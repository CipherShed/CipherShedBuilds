; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\cipherShed\src\Format\Tcformat.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?szVerify@@3PADA				; szVerify
PUBLIC	?lastRandPool@@3PAEA				; lastRandPool
PUBLIC	_MasterKeyGUIView
PUBLIC	?szRescueDiskISO@@3PADA				; szRescueDiskISO
PUBLIC	?randPool@@3PAEA				; randPool
PUBLIC	?BootEncStatus@@3UBootEncryptionStatus@@A	; BootEncStatus
PUBLIC	?realClusterSize@@3HA				; realClusterSize
PUBLIC	?szDiskFile@@3PADA				; szDiskFile
PUBLIC	?volumePassword@@3UPassword@@A			; volumePassword
PUBLIC	?SysEncDriveAnalysisStart@@3HA			; SysEncDriveAnalysisStart
PUBLIC	?szRawPassword@@3PADA				; szRawPassword
PUBLIC	_HeaderKeyGUIView
PUBLIC	?outRandPoolDispBuffer@@3PAEA			; outRandPoolDispBuffer
PUBLIC	?szFileName@@3PADA				; szFileName
PUBLIC	?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A	; SysEncMultiBootCfg
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
PUBLIC	?BootEncObj@@3PAVBootEncryption@CipherShed@@A	; BootEncObj
PUBLIC	_hCurPage
PUBLIC	?nCurPageNo@@3HA				; nCurPageNo
PUBLIC	?nLastPageNo@@3HA				; nLastPageNo
PUBLIC	_WizardMode
PUBLIC	?bHiddenOS@@3HC					; bHiddenOS
PUBLIC	?bDirectSysEncMode@@3HA				; bDirectSysEncMode
PUBLIC	?bDirectSysEncModeCommand@@3HA			; bDirectSysEncModeCommand
PUBLIC	?DirectDeviceEncMode@@3HA			; DirectDeviceEncMode
PUBLIC	?DirectNonSysInplaceEncResumeMode@@3HA		; DirectNonSysInplaceEncResumeMode
PUBLIC	?DirectPromptNonSysInplaceEncResumeMode@@3HA	; DirectPromptNonSysInplaceEncResumeMode
PUBLIC	_bInPlaceEncNonSys
PUBLIC	_bInPlaceEncNonSysResumed
PUBLIC	_bFirstNonSysInPlaceEncResumeDone
PUBLIC	_NonSysInplaceEncBytesDone
PUBLIC	_NonSysInplaceEncTotalSize
PUBLIC	?bDeviceTransformModeChoiceMade@@3HA		; bDeviceTransformModeChoiceMade
PUBLIC	?nNeedToStoreFilesOver4GB@@3HA			; nNeedToStoreFilesOver4GB
PUBLIC	?nVolumeEA@@3HA					; nVolumeEA
PUBLIC	?bSystemEncryptionInProgress@@3HA		; bSystemEncryptionInProgress
PUBLIC	?bWholeSysDrive@@3HA				; bWholeSysDrive
PUBLIC	?bSysEncDriveAnalysisInProgress@@3HC		; bSysEncDriveAnalysisInProgress
PUBLIC	?bSysEncDriveAnalysisTimeOutOccurred@@3HC	; bSysEncDriveAnalysisTimeOutOccurred
PUBLIC	?SysEncDetectHiddenSectors@@3HA			; SysEncDetectHiddenSectors
PUBLIC	?bDontVerifyRescueDisk@@3HA			; bDontVerifyRescueDisk
PUBLIC	?bFirstSysEncResumeDone@@3HA			; bFirstSysEncResumeDone
PUBLIC	?nMultiBoot@@3HA				; nMultiBoot
PUBLIC	?bHiddenVol@@3HC				; bHiddenVol
PUBLIC	_bHiddenVolHost
PUBLIC	_bHiddenVolDirect
PUBLIC	?bHiddenVolFinished@@3HC			; bHiddenVolFinished
PUBLIC	?hiddenVolHostDriveNo@@3HA			; hiddenVolHostDriveNo
PUBLIC	_bRemovableHostDevice
PUBLIC	?hash_algo@@3HA					; hash_algo
PUBLIC	?nUIVolumeSize@@3_KA				; nUIVolumeSize
PUBLIC	?nVolumeSize@@3_KA				; nVolumeSize
PUBLIC	?nHiddenVolHostSize@@3_KA			; nHiddenVolHostSize
PUBLIC	?nMaximumHiddenVolSize@@3_JA			; nMaximumHiddenVolSize
PUBLIC	?nbrFreeClusters@@3_JA				; nbrFreeClusters
PUBLIC	?nMultiplier@@3HA				; nMultiplier
PUBLIC	?bDeviceWipeInProgress@@3HA			; bDeviceWipeInProgress
PUBLIC	?bTryToCorrectReadErrors@@3HC			; bTryToCorrectReadErrors
PUBLIC	?DiscardUnreadableEncryptedSectors@@3HC		; DiscardUnreadableEncryptedSectors
PUBLIC	_bVolTransformThreadCancel
PUBLIC	?bVolTransformThreadRunning@@3HC		; bVolTransformThreadRunning
PUBLIC	?bVolTransformThreadToRun@@3HC			; bVolTransformThreadToRun
PUBLIC	?bConfirmQuit@@3HC				; bConfirmQuit
PUBLIC	?bConfirmQuitSysEncPretest@@3HC			; bConfirmQuitSysEncPretest
PUBLIC	?bDevice@@3HA					; bDevice
PUBLIC	_showKeys
PUBLIC	_hMasterKey
PUBLIC	_hHeaderKey
PUBLIC	?hRandPool@@3RAUHWND__@@A			; hRandPool
PUBLIC	?hRandPoolSys@@3RAUHWND__@@A			; hRandPoolSys
PUBLIC	?hPasswordInputField@@3RAUHWND__@@A		; hPasswordInputField
PUBLIC	?hVerifyPasswordInputField@@3RAUHWND__@@A	; hVerifyPasswordInputField
PUBLIC	?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A	; hbmWizardBitmapRescaled
PUBLIC	?OrigKeyboardLayout@@3PADA			; OrigKeyboardLayout
PUBLIC	?bKeyboardLayoutChanged@@3HA			; bKeyboardLayoutChanged
PUBLIC	?bKeybLayoutAltKeyWarningShown@@3HA		; bKeybLayoutAltKeyWarningShown
PUBLIC	_bWarnDeviceFormatAdvanced
PUBLIC	?bWarnOuterVolSuitableFileSys@@3HA		; bWarnOuterVolSuitableFileSys
PUBLIC	?bHistoryCmdLine@@3HA				; bHistoryCmdLine
PUBLIC	?ComServerMode@@3HA				; ComServerMode
PUBLIC	_nPbar
PUBLIC	?bDisplayPoolContents@@3HA			; bDisplayPoolContents
PUBLIC	?bSparseFileSwitch@@3HC				; bSparseFileSwitch
PUBLIC	?quickFormat@@3HC				; quickFormat
PUBLIC	?fileSystem@@3HC				; fileSystem
PUBLIC	?clusterSize@@3HC				; clusterSize
PUBLIC	?SysEncMultiBootCfgOutcome@@3PA_WA		; SysEncMultiBootCfgOutcome
PUBLIC	_NonSysInplaceEncStatus
_BSS	SEGMENT
?szVerify@@3PADA DB 041H DUP (?)			; szVerify
	ALIGN	4

?lastRandPool@@3PAEA DB 078H DUP (?)			; lastRandPool
_MasterKeyGUIView DB 040H DUP (?)
?szRescueDiskISO@@3PADA DB 0105H DUP (?)		; szRescueDiskISO
	ALIGN	4

?randPool@@3PAEA DB 078H DUP (?)			; randPool
?BootEncStatus@@3UBootEncryptionStatus@@A DB 05eH DUP (?) ; BootEncStatus
	ALIGN	4

?realClusterSize@@3HA DD 01H DUP (?)			; realClusterSize
?szDiskFile@@3PADA DB 0105H DUP (?)			; szDiskFile
	ALIGN	4

?volumePassword@@3UPassword@@A DB 048H DUP (?)		; volumePassword
?SysEncDriveAnalysisStart@@3HA DD 01H DUP (?)		; SysEncDriveAnalysisStart
?szRawPassword@@3PADA DB 041H DUP (?)			; szRawPassword
	ALIGN	4

_HeaderKeyGUIView DB 040H DUP (?)
?outRandPoolDispBuffer@@3PAEA DB 0172H DUP (?)		; outRandPoolDispBuffer
	ALIGN	4

?szFileName@@3PADA DB 0105H DUP (?)			; szFileName
	ALIGN	4

?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A DB 014H DUP (?) ; SysEncMultiBootCfg
?BootEncObj@@3PAVBootEncryption@CipherShed@@A DD 01H DUP (?) ; BootEncObj
_hCurPage DD	01H DUP (?)
_WizardMode DD	01H DUP (?)
?bHiddenOS@@3HC DD 01H DUP (?)				; bHiddenOS
?bDirectSysEncMode@@3HA DD 01H DUP (?)			; bDirectSysEncMode
?bDirectSysEncModeCommand@@3HA DD 01H DUP (?)		; bDirectSysEncModeCommand
?DirectDeviceEncMode@@3HA DD 01H DUP (?)		; DirectDeviceEncMode
?DirectNonSysInplaceEncResumeMode@@3HA DD 01H DUP (?)	; DirectNonSysInplaceEncResumeMode
?DirectPromptNonSysInplaceEncResumeMode@@3HA DD 01H DUP (?) ; DirectPromptNonSysInplaceEncResumeMode
_bInPlaceEncNonSys DD 01H DUP (?)
_bInPlaceEncNonSysResumed DD 01H DUP (?)
_bFirstNonSysInPlaceEncResumeDone DD 01H DUP (?)
_NonSysInplaceEncBytesDone DQ 01H DUP (?)
_NonSysInplaceEncTotalSize DQ 01H DUP (?)
?bDeviceTransformModeChoiceMade@@3HA DD 01H DUP (?)	; bDeviceTransformModeChoiceMade
?nNeedToStoreFilesOver4GB@@3HA DD 01H DUP (?)		; nNeedToStoreFilesOver4GB
?bSystemEncryptionInProgress@@3HA DD 01H DUP (?)	; bSystemEncryptionInProgress
?bWholeSysDrive@@3HA DD 01H DUP (?)			; bWholeSysDrive
_bSystemEncryptionStatusChanged DD 01H DUP (?)
?bSysEncDriveAnalysisInProgress@@3HC DD 01H DUP (?)	; bSysEncDriveAnalysisInProgress
?bSysEncDriveAnalysisTimeOutOccurred@@3HC DD 01H DUP (?) ; bSysEncDriveAnalysisTimeOutOccurred
?bDontVerifyRescueDisk@@3HA DD 01H DUP (?)		; bDontVerifyRescueDisk
?bFirstSysEncResumeDone@@3HA DD 01H DUP (?)		; bFirstSysEncResumeDone
?nMultiBoot@@3HA DD 01H DUP (?)				; nMultiBoot
?bHiddenVol@@3HC DD 01H DUP (?)				; bHiddenVol
_bHiddenVolHost DD 01H DUP (?)
_bHiddenVolDirect DD 01H DUP (?)
?bHiddenVolFinished@@3HC DD 01H DUP (?)			; bHiddenVolFinished
_bRemovableHostDevice DD 01H DUP (?)
	ALIGN	8

?nUIVolumeSize@@3_KA DQ 01H DUP (?)			; nUIVolumeSize
?nVolumeSize@@3_KA DQ 01H DUP (?)			; nVolumeSize
?nHiddenVolHostSize@@3_KA DQ 01H DUP (?)		; nHiddenVolHostSize
?nMaximumHiddenVolSize@@3_JA DQ 01H DUP (?)		; nMaximumHiddenVolSize
?nbrFreeClusters@@3_JA DQ 01H DUP (?)			; nbrFreeClusters
?bDeviceWipeInProgress@@3HA DD 01H DUP (?)		; bDeviceWipeInProgress
?bTryToCorrectReadErrors@@3HC DD 01H DUP (?)		; bTryToCorrectReadErrors
?DiscardUnreadableEncryptedSectors@@3HC DD 01H DUP (?)	; DiscardUnreadableEncryptedSectors
_bVolTransformThreadCancel DD 01H DUP (?)
?bVolTransformThreadRunning@@3HC DD 01H DUP (?)		; bVolTransformThreadRunning
?bVolTransformThreadToRun@@3HC DD 01H DUP (?)		; bVolTransformThreadToRun
?bConfirmQuit@@3HC DD 01H DUP (?)			; bConfirmQuit
?bConfirmQuitSysEncPretest@@3HC DD 01H DUP (?)		; bConfirmQuitSysEncPretest
?bDevice@@3HA DD 01H DUP (?)				; bDevice
_hMasterKey DD	01H DUP (?)
_hHeaderKey DD	01H DUP (?)
?hRandPool@@3RAUHWND__@@A DD 01H DUP (?)		; hRandPool
?hRandPoolSys@@3RAUHWND__@@A DD 01H DUP (?)		; hRandPoolSys
?hPasswordInputField@@3RAUHWND__@@A DD 01H DUP (?)	; hPasswordInputField
?hVerifyPasswordInputField@@3RAUHWND__@@A DD 01H DUP (?) ; hVerifyPasswordInputField
?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A DD 01H DUP (?) ; hbmWizardBitmapRescaled
?bKeyboardLayoutChanged@@3HA DD 01H DUP (?)		; bKeyboardLayoutChanged
?bKeybLayoutAltKeyWarningShown@@3HA DD 01H DUP (?)	; bKeybLayoutAltKeyWarningShown
?bHistoryCmdLine@@3HA DD 01H DUP (?)			; bHistoryCmdLine
?ComServerMode@@3HA DD 01H DUP (?)			; ComServerMode
_nPbar	DD	01H DUP (?)
?bSparseFileSwitch@@3HC DD 01H DUP (?)			; bSparseFileSwitch
?quickFormat@@3HC DD 01H DUP (?)			; quickFormat
?fileSystem@@3HC DD 01H DUP (?)				; fileSystem
?clusterSize@@3HC DD 01H DUP (?)			; clusterSize
_NonSysInplaceEncStatus DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
?nCurPageNo@@3HA DD 0ffffffffH				; nCurPageNo
?nLastPageNo@@3HA DD 0ffffffffH				; nLastPageNo
?nVolumeEA@@3HA DD 01H					; nVolumeEA
?SysEncDetectHiddenSectors@@3HA DD 0ffffffffH		; SysEncDetectHiddenSectors
?hiddenVolHostDriveNo@@3HA DD 0ffffffffH		; hiddenVolHostDriveNo
?hash_algo@@3HA DD 01H					; hash_algo
?nMultiplier@@3HA DD 0100000H				; nMultiplier
_showKeys DD	01H
?OrigKeyboardLayout@@3PADA DB '00000409', 00H		; OrigKeyboardLayout
	ORG $+3
_bWarnDeviceFormatAdvanced DD 01H
?bWarnOuterVolSuitableFileSys@@3HA DD 01H		; bWarnOuterVolSuitableFileSys
?bDisplayPoolContents@@3HA DD 01H			; bDisplayPoolContents
	ORG $+4
?SysEncMultiBootCfgOutcome@@3PA_WA DW 04eH		; SysEncMultiBootCfgOutcome
	DW	02fH
	DW	041H
	DW	00H
	ORG $+8184
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
EXTRN	_strstr:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 190  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	?swprintf@@YAHPA_WPB_WZZ			; swprintf
EXTRN	__vswprintf:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\swprintf.inl
;	COMDAT ?swprintf@@YAHPA_WPB_WZZ
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHPA_WPB_WZZ PROC				; swprintf, COMDAT

; 87   :     va_list _Arglist;
; 88   :     _crt_va_start(_Arglist, _Format);
; 89   :     int _Ret = _vswprintf(_String, _Format, _Arglist);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Format$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __String$[esp-4]
  00008	8d 44 24 0c	 lea	 eax, DWORD PTR __Format$[esp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 __vswprintf
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :     _crt_va_end(_Arglist);
; 91   :     return _Ret;
; 92   : }

  00017	c3		 ret	 0
?swprintf@@YAHPA_WPB_WZZ ENDP				; swprintf
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z	; std::char_traits<wchar_t>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 391  : 		return (_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 392  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z	; std::char_traits<wchar_t>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 397  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 398  : 		}

  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@_W@std@@SAGXZ		; std::char_traits<wchar_t>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 402  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 403  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T140864 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T140864[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$89301 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$89301[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$89301[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$89307 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$89307[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$89307[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$89312 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$89312[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$89312[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$140891 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$140891[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$140891[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$140899 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$140899[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$140899[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$140912 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$140912[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$140912[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@_W@std@@QBE_WD@Z			; std::ctype<wchar_t>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 1965 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<wchar_t>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T140966 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2047 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 2048 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T140966[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2049 : 		_Cvt = _Lobj._Getcvt();

  0002a	e8 00 00 00 00	 call	 __Getcvt
  0002f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00032	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  00035	5e		 pop	 esi

; 2050 : 		}

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T140996 = -4						; size = 4
__Lock$141009 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$141009[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T140996[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$141009[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_defaultKeyFilesParam:QWORD
EXTRN	_KeyFileRemoveAll:PROC
EXTRN	_FirstKeyFile:DWORD
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT ?WipePasswordsAndKeyfiles@@YAXXZ
_TEXT	SEGMENT
_tmp$ = -72						; size = 65
__$ArrayPad$ = -4					; size = 4
?WipePasswordsAndKeyfiles@@YAXXZ PROC			; WipePasswordsAndKeyfiles, COMDAT

; 277  : {

  00000	83 ec 48	 sub	 esp, 72			; 00000048H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+72], eax
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 278  : 	char tmp[MAX_PASSWORD+1];
; 279  : 
; 280  : 	// Attempt to wipe passwords stored in the input field buffers
; 281  : 	memset (tmp, 'X', MAX_PASSWORD);

  00010	6a 40		 push	 64			; 00000040H
  00012	8d 44 24 0c	 lea	 eax, DWORD PTR _tmp$[esp+84]
  00016	6a 58		 push	 88			; 00000058H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _memset

; 282  : 	tmp [MAX_PASSWORD] = 0;
; 283  : 	SetWindowText (hPasswordInputField, tmp);

  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00024	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR _tmp$[esp+80]
  00031	51		 push	 ecx
  00032	52		 push	 edx
  00033	c6 44 24 50 00	 mov	 BYTE PTR _tmp$[esp+152], 0
  00038	ff d7		 call	 edi

; 284  : 	SetWindowText (hVerifyPasswordInputField, tmp);

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00040	8d 44 24 08	 lea	 eax, DWORD PTR _tmp$[esp+80]
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	ff d7		 call	 edi

; 285  : 
; 286  : 	burn (&szVerify[0], sizeof (szVerify));

  00048	ba 00 00 00 00	 mov	 edx, OFFSET ?szVerify@@3PADA ; szVerify
  0004d	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00052	8b f1		 mov	 esi, ecx
  00054	8b c2		 mov	 eax, edx
$LL19@WipePasswo:
  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
  00059	40		 inc	 eax
  0005a	83 ee 01	 sub	 esi, 1
  0005d	75 f7		 jne	 SHORT $LL19@WipePasswo
  0005f	90		 npad	 1
$LL12@WipePasswo:
  00060	49		 dec	 ecx
  00061	c6 02 00	 mov	 BYTE PTR [edx], 0
  00064	42		 inc	 edx
  00065	85 c9		 test	 ecx, ecx
  00067	75 f7		 jne	 SHORT $LL12@WipePasswo

; 287  : 	burn (&volumePassword, sizeof (volumePassword));

  00069	ba 00 00 00 00	 mov	 edx, OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  0006e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00073	8b f1		 mov	 esi, ecx
  00075	8b c2		 mov	 eax, edx
$LL23@WipePasswo:
  00077	c6 00 00	 mov	 BYTE PTR [eax], 0
  0007a	40		 inc	 eax
  0007b	83 ee 01	 sub	 esi, 1
  0007e	75 f7		 jne	 SHORT $LL23@WipePasswo
$LL7@WipePasswo:
  00080	49		 dec	 ecx
  00081	c6 02 00	 mov	 BYTE PTR [edx], 0
  00084	42		 inc	 edx
  00085	85 c9		 test	 ecx, ecx
  00087	75 f7		 jne	 SHORT $LL7@WipePasswo

; 288  : 	burn (&szRawPassword[0], sizeof (szRawPassword));

  00089	ba 00 00 00 00	 mov	 edx, OFFSET ?szRawPassword@@3PADA ; szRawPassword
  0008e	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00093	8b f1		 mov	 esi, ecx
  00095	8b c2		 mov	 eax, edx
$LL27@WipePasswo:
  00097	c6 00 00	 mov	 BYTE PTR [eax], 0
  0009a	40		 inc	 eax
  0009b	83 ee 01	 sub	 esi, 1
  0009e	75 f7		 jne	 SHORT $LL27@WipePasswo
$LL2@WipePasswo:
  000a0	49		 dec	 ecx
  000a1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000a4	42		 inc	 edx
  000a5	85 c9		 test	 ecx, ecx
  000a7	75 f7		 jne	 SHORT $LL2@WipePasswo

; 289  : 
; 290  : 	SetWindowText (hPasswordInputField, "");

  000a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000b4	52		 push	 edx
  000b5	ff d7		 call	 edi

; 291  : 	SetWindowText (hVerifyPasswordInputField, "");

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000c1	50		 push	 eax
  000c2	ff d7		 call	 edi

; 292  : 
; 293  : 	KeyFileRemoveAll (&FirstKeyFile);

  000c4	68 00 00 00 00	 push	 OFFSET _FirstKeyFile
  000c9	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 294  : 	KeyFileRemoveAll (&defaultKeyFilesParam.FirstKeyFile);

  000ce	68 04 00 00 00	 push	 OFFSET _defaultKeyFilesParam+4
  000d3	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 295  : }

  000d8	8b 4c 24 54	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+88]
  000dc	83 c4 08	 add	 esp, 8
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	33 cc		 xor	 ecx, esp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	83 c4 48	 add	 esp, 72			; 00000048H
  000eb	c3		 ret	 0
?WipePasswordsAndKeyfiles@@YAXXZ ENDP			; WipePasswordsAndKeyfiles
_TEXT	ENDS
PUBLIC	??_GBootEncryption@CipherShed@@QAEPAXI@Z	; CipherShed::BootEncryption::`scalar deleting destructor'
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
; Function compile flags: /Ogtpy
;	COMDAT ??_GBootEncryption@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z PROC		; CipherShed::BootEncryption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@6
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@6:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z ENDP		; CipherShed::BootEncryption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0L@FEEFGEIL@CipherShed?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_MainDlg:DWORD
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
;	COMDAT ??_C@_0L@FEEFGEIL@CipherShed?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0L@FEEFGEIL@CipherShed?$AA@ DB 'CipherShed', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_name$131745 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z PROC	; BroadcastSysEncCfgUpdateCallb, COMDAT

; 377  : {

  00000	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1028], eax
  00014	56		 push	 esi
  00015	8b b4 24 0c 04
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+1028]

; 378  : 	/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 379  : 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  0001c	6a eb		 push	 -21			; ffffffebH
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00025	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  0002a	75 58		 jne	 SHORT $LN9@BroadcastS

; 380  : 	{
; 381  : 		char name[1024] = { 0 };

  0002c	68 ff 03 00 00	 push	 1023			; 000003ffH
  00031	8d 44 24 09	 lea	 eax, DWORD PTR _name$131745[esp+1037]
  00035	6a 00		 push	 0
  00037	50		 push	 eax
  00038	c6 44 24 10 00	 mov	 BYTE PTR _name$131745[esp+1044], 0
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  : 		GetWindowText (hwnd, name, sizeof (name) - 1);

  00045	68 ff 03 00 00	 push	 1023			; 000003ffH
  0004a	8d 4c 24 08	 lea	 ecx, DWORD PTR _name$131745[esp+1036]
  0004e	51		 push	 ecx
  0004f	56		 push	 esi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 383  : 		if (hwnd != MainDlg && strstr (name, "CipherShed"))

  00056	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  0005c	74 26		 je	 SHORT $LN9@BroadcastS
  0005e	8d 54 24 04	 lea	 edx, DWORD PTR _name$131745[esp+1032]
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 _strstr
  0006d	83 c4 08	 add	 esp, 8
  00070	85 c0		 test	 eax, eax
  00072	74 10		 je	 SHORT $LN9@BroadcastS

; 384  : 		{
; 385  : 			PostMessage (hwnd, TC_APPMSG_SYSENC_CONFIG_UPDATE, 0, 0);

  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	68 65 80 00 00	 push	 32869			; 00008065H
  0007d	56		 push	 esi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN9@BroadcastS:

; 386  : 		}
; 387  : 	}
; 388  : 	return TRUE;
; 389  : }

  00084	8b 8c 24 04 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1032]
  0008b	5e		 pop	 esi
  0008c	33 cc		 xor	 ecx, esp
  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	81 c4 04 04 00
	00		 add	 esp, 1028		; 00000404H
  0009e	c2 08 00	 ret	 8
?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ENDP	; BroadcastSysEncCfgUpdateCallb
_TEXT	ENDS
EXTRN	__imp__EnumWindows@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?BroadcastSysEncCfgUpdate@@YAHXZ
_TEXT	SEGMENT
_bSuccess$ = -4						; size = 4
?BroadcastSysEncCfgUpdate@@YAHXZ PROC			; BroadcastSysEncCfgUpdate, COMDAT

; 392  : {

  00000	51		 push	 ecx

; 393  : 	BOOL bSuccess = FALSE;
; 394  : 	EnumWindows (BroadcastSysEncCfgUpdateCallb, (LPARAM) &bSuccess);

  00001	8d 04 24	 lea	 eax, DWORD PTR _bSuccess$[esp+4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _bSuccess$[esp+12], 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 395  : 	return bSuccess;

  00018	8b 04 24	 mov	 eax, DWORD PTR _bSuccess$[esp+4]

; 396  : }

  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
?BroadcastSysEncCfgUpdate@@YAHXZ ENDP			; BroadcastSysEncCfgUpdate
_TEXT	ENDS
PUBLIC	??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@ ; `string'
PUBLIC	??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@ ; `string'
PUBLIC	??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@ ; `string'
PUBLIC	??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@	; `string'
EXTRN	_fclose:PROC
EXTRN	_TCFlushFile:PROC
EXTRN	_XmlWriteFooter:PROC
EXTRN	_nWipeMode:DWORD
EXTRN	_fprintf:PROC
EXTRN	_fputs:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_fopen:PROC
EXTRN	_Error:PROC
EXTRN	_remove:PROC
EXTRN	_GetConfigPath:PROC
EXTRN	_SystemEncryptionStatus:DWORD
EXTRN	_CreateSysEncMutex:PROC
;	COMDAT ??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@ DB 0aH, 09H, '</sysen'
	DB	'cryption>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@
CONST	SEGMENT
??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@ DB 0aH
	DB	09H, 09H, '<config key="WipeMode">%d</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@
CONST	SEGMENT
??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@ DB 0aH, 09H
	DB	09H, '<config key="SystemEncryptionStatus">%d</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@ DB 0aH, 09H, '<sysencry'
	DB	'ption>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
CONST	SEGMENT
??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@ DB 'CANNOT_SAVE_SYS_'
	DB	'ENCRYPTION_SETTINGS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
CONST	SEGMENT
??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@ DB 'System Encryption.xml'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?SaveSysEncSettings@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?SaveSysEncSettings@@YAHPAUHWND__@@@Z PROC		; SaveSysEncSettings, COMDAT
; _hwndDlg$ = eax

; 402  : 	FILE *f;
; 403  : 
; 404  : 	if (!bSystemEncryptionStatusChanged)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSystemEncryptionStatusChanged, 0
  00007	57		 push	 edi
  00008	8b f8		 mov	 edi, eax

; 405  : 		return TRUE;

  0000a	74 58		 je	 SHORT $LN13@SaveSysEnc

; 406  : 
; 407  : 	if (hwndDlg == NULL && MainDlg != NULL)

  0000c	85 ff		 test	 edi, edi
  0000e	75 0b		 jne	 SHORT $LN7@SaveSysEnc
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00015	85 c0		 test	 eax, eax
  00017	74 02		 je	 SHORT $LN7@SaveSysEnc

; 408  : 		hwndDlg = MainDlg;

  00019	8b f8		 mov	 edi, eax
$LN7@SaveSysEnc:

; 409  : 
; 410  : 	if (!CreateSysEncMutex ())

  0001b	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00020	85 c0		 test	 eax, eax

; 411  : 		return FALSE;		// Only one instance that has the mutex can modify the system encryption settings

  00022	74 2d		 je	 SHORT $LN14@SaveSysEnc

; 412  : 
; 413  : 	if (SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SystemEncryptionStatus, 0
  0002b	75 3e		 jne	 SHORT $LN5@SaveSysEnc

; 414  : 	{
; 415  : 		if (remove (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION)) != 0)

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00032	e8 00 00 00 00	 call	 _GetConfigPath
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _remove
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	74 11		 je	 SHORT $LN4@SaveSysEnc

; 416  : 		{
; 417  : 			Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  00049	e8 00 00 00 00	 call	 _Error
  0004e	83 c4 04	 add	 esp, 4
$LN14@SaveSysEnc:

; 418  : 			return FALSE;

  00051	33 c0		 xor	 eax, eax
  00053	5f		 pop	 edi

; 460  : }

  00054	c3		 ret	 0
$LN4@SaveSysEnc:

; 419  : 		}
; 420  : 
; 421  : 		bSystemEncryptionStatusChanged = FALSE;

  00055	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 0

; 422  : 		BroadcastSysEncCfgUpdate ();

  0005f	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate
$LN13@SaveSysEnc:

; 423  : 		return TRUE;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	5f		 pop	 edi

; 460  : }

  0006a	c3		 ret	 0
$LN5@SaveSysEnc:
  0006b	56		 push	 esi

; 424  : 	}
; 425  : 
; 426  : 	f = fopen (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION), "w");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00076	e8 00 00 00 00	 call	 _GetConfigPath
  0007b	83 c4 04	 add	 esp, 4
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _fopen
  00084	8b f0		 mov	 esi, eax
  00086	83 c4 08	 add	 esp, 8

; 427  : 	if (f == NULL)

  00089	85 f6		 test	 esi, esi
  0008b	75 18		 jne	 SHORT $LN3@SaveSysEnc

; 428  : 	{
; 429  : 		Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  00092	e8 00 00 00 00	 call	 _Error

; 430  : 		handleWin32Error (hwndDlg);

  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _handleWin32Error
  0009d	83 c4 08	 add	 esp, 8
  000a0	5e		 pop	 esi

; 449  : 		return FALSE;

  000a1	33 c0		 xor	 eax, eax
  000a3	5f		 pop	 edi

; 460  : }

  000a4	c3		 ret	 0
$LN3@SaveSysEnc:

; 431  : 		return FALSE;
; 432  : 	}
; 433  : 
; 434  : 	if (XmlWriteHeader (f) < 0
; 435  : 
; 436  : 	|| fputs ("\n\t<sysencryption>", f) < 0
; 437  : 
; 438  : 	|| fprintf (f, "\n\t\t<config key=\"SystemEncryptionStatus\">%d</config>", SystemEncryptionStatus) < 0
; 439  : 
; 440  : 	|| fprintf (f, "\n\t\t<config key=\"WipeMode\">%d</config>", (int) nWipeMode) < 0
; 441  : 
; 442  : 	|| fputs ("\n\t</sysencryption>", f) < 0
; 443  : 
; 444  : 	|| XmlWriteFooter (f) < 0)

  000a5	56		 push	 esi
  000a6	e8 00 00 00 00	 call	 _XmlWriteHeader
  000ab	83 c4 04	 add	 esp, 4
  000ae	85 c0		 test	 eax, eax
  000b0	0f 8c 88 00 00
	00		 jl	 $LN1@SaveSysEnc
  000b6	56		 push	 esi
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@
  000bc	e8 00 00 00 00	 call	 _fputs
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 c0		 test	 eax, eax
  000c6	7c 76		 jl	 SHORT $LN1@SaveSysEnc
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000cd	50		 push	 eax
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@
  000d3	56		 push	 esi
  000d4	e8 00 00 00 00	 call	 _fprintf
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dc	85 c0		 test	 eax, eax
  000de	7c 5e		 jl	 SHORT $LN1@SaveSysEnc
  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nWipeMode
  000e6	51		 push	 ecx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 _fprintf
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	85 c0		 test	 eax, eax
  000f7	7c 45		 jl	 SHORT $LN1@SaveSysEnc
  000f9	56		 push	 esi
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@
  000ff	e8 00 00 00 00	 call	 _fputs
  00104	83 c4 08	 add	 esp, 8
  00107	85 c0		 test	 eax, eax
  00109	7c 33		 jl	 SHORT $LN1@SaveSysEnc
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 _XmlWriteFooter
  00111	83 c4 04	 add	 esp, 4
  00114	85 c0		 test	 eax, eax
  00116	7c 26		 jl	 SHORT $LN1@SaveSysEnc

; 450  : 	}
; 451  : 
; 452  : 	TCFlushFile (f);

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 _TCFlushFile

; 453  : 
; 454  : 	fclose (f);

  0011e	56		 push	 esi
  0011f	e8 00 00 00 00	 call	 _fclose
  00124	83 c4 08	 add	 esp, 8

; 455  : 
; 456  : 	bSystemEncryptionStatusChanged = FALSE;

  00127	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 0

; 457  : 	BroadcastSysEncCfgUpdate ();

  00131	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate
  00136	5e		 pop	 esi

; 458  : 
; 459  : 	return TRUE;

  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	5f		 pop	 edi

; 460  : }

  0013d	c3		 ret	 0
$LN1@SaveSysEnc:

; 445  : 	{
; 446  : 		handleWin32Error (hwndDlg);

  0013e	57		 push	 edi
  0013f	e8 00 00 00 00	 call	 _handleWin32Error

; 447  : 		fclose (f);

  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 _fclose

; 448  : 		Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  0014f	e8 00 00 00 00	 call	 _Error
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH
  00157	5e		 pop	 esi

; 449  : 		return FALSE;

  00158	33 c0		 xor	 eax, eax
  0015a	5f		 pop	 edi

; 460  : }

  0015b	c3		 ret	 0
?SaveSysEncSettings@@YAHPAUHWND__@@@Z ENDP		; SaveSysEncSettings
_TEXT	ENDS
PUBLIC	??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@ ; `string'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
EXTRN	_AbortProcess:PROC
EXTRN	?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ:PROC ; CipherShed::BootEncryption::GetHiddenOSCreationPhase
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
CONST	SEGMENT
??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@ DB 'ERR_GETTING_SYST'
	DB	'EM_ENCRYPTION_STATUS', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?DetermineHiddenOSCreationPhase@@YAIXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?DetermineHiddenOSCreationPhase@@YAIXZ$0
__unwindtable$?DetermineHiddenOSCreationPhase@@YAIXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DetermineHiddenOSCreationPhase@@YAIXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?DetermineHiddenOSCreationPhase@@YAIXZ$2
__ehfuncinfo$?DetermineHiddenOSCreationPhase@@YAIXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DetermineHiddenOSCreationPhase@@YAIXZ
	DD	01H
	DD	FLAT:__tryblocktable$?DetermineHiddenOSCreationPhase@@YAIXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?DetermineHiddenOSCreationPhase@@YAIXZ
_TEXT	SEGMENT
_e$131777 = -24						; size = 4
_phase$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?DetermineHiddenOSCreationPhase@@YAIXZ PROC		; DetermineHiddenOSCreationPhase, COMDAT

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DetermineHiddenOSCreationPhase@@YAIXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 465  : 	unsigned int phase = TC_HIDDEN_OS_CREATION_PHASE_NONE;
; 466  : 
; 467  : 	try
; 468  : 	{
; 469  : 		phase = BootEncObj->GetHiddenOSCreationPhase();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	33 c0		 xor	 eax, eax
  00033	89 45 ec	 mov	 DWORD PTR _phase$[ebp], eax
  00036	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00039	e8 00 00 00 00	 call	 ?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ ; CipherShed::BootEncryption::GetHiddenOSCreationPhase

; 476  : 
; 477  : 	return phase;
; 478  : }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
__catch$?DetermineHiddenOSCreationPhase@@YAIXZ$0:

; 470  : 	}
; 471  : 	catch (Exception &e)
; 472  : 	{
; 473  : 		e.Show (MainDlg);

  00050	8b 4d e8	 mov	 ecx, DWORD PTR _e$131777[ebp]
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]
  0005d	52		 push	 edx
  0005e	ff d0		 call	 eax

; 474  : 		AbortProcess("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00065	e8 00 00 00 00	 call	 _AbortProcess
  0006a	83 c4 04	 add	 esp, 4

; 475  : 	}

  0006d	b8 00 00 00 00	 mov	 eax, $LN9@DetermineH
  00072	c3		 ret	 0
$LN9@DetermineH:
  00073	8b 45 ec	 mov	 eax, DWORD PTR _phase$[ebp]

; 476  : 
; 477  : 	return phase;
; 478  : }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DetermineHiddenOSCreationPhase@@YAIXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DetermineHiddenOSCreationPhase@@YAIXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DetermineHiddenOSCreationPhase@@YAIXZ ENDP		; DetermineHiddenOSCreationPhase
PUBLIC	??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ ; `string'
EXTRN	?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z:PROC ; CipherShed::BootEncryption::SetHiddenOSCreationPhase
;	COMDAT ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
CONST	SEGMENT
??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ DB 'SYSTEM_ENCRYPTIO'
	DB	'N_IN_PROGRESS_ELSEWHERE', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ChangeHiddenOSCreationPhase@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ChangeHiddenOSCreationPhase@@YAHH@Z$0
__unwindtable$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ChangeHiddenOSCreationPhase@@YAHH@Z$2
__ehfuncinfo$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ChangeHiddenOSCreationPhase@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ChangeHiddenOSCreationPhase@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ChangeHiddenOSCreationPhase@@YAHH@Z
_TEXT	SEGMENT
_e$131786 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_newPhase$ = 8						; size = 4
?ChangeHiddenOSCreationPhase@@YAHH@Z PROC		; ChangeHiddenOSCreationPhase, COMDAT

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeHiddenOSCreationPhase@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 484  : 	if (!CreateSysEncMutex ())

  0002b	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00030	85 c0		 test	 eax, eax
  00032	75 21		 jne	 SHORT $LN2@ChangeHidd

; 485  : 	{
; 486  : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00039	e8 00 00 00 00	 call	 _Error
  0003e	83 c4 04	 add	 esp, 4
$LN8@ChangeHidd:

; 497  : 		return FALSE;

  00041	33 c0		 xor	 eax, eax

; 507  : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN2@ChangeHidd:

; 487  : 		return FALSE;
; 488  : 	}
; 489  : 
; 490  : 	try
; 491  : 	{
; 492  : 		BootEncObj->SetHiddenOSCreationPhase (newPhase);

  00055	8b 45 08	 mov	 eax, DWORD PTR _newPhase$[ebp]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0005e	50		 push	 eax
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00066	e8 00 00 00 00	 call	 ?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z ; CipherShed::BootEncryption::SetHiddenOSCreationPhase

; 498  : 	}
; 499  : 
; 500  : 	//// The contents of the following items might be inappropriate after a change of the phase
; 501  : 	//szFileName[0] = 0;
; 502  : 	//szDiskFile[0] = 0;
; 503  : 	//nUIVolumeSize = 0;
; 504  : 	//nVolumeSize = 0;
; 505  : 
; 506  : 	return TRUE;

  0006b	b8 01 00 00 00	 mov	 eax, 1

; 507  : }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
__catch$?ChangeHiddenOSCreationPhase@@YAHH@Z$0:

; 493  : 	}
; 494  : 	catch (Exception &e)
; 495  : 	{
; 496  : 		e.Show (MainDlg);

  00082	8b 4d ec	 mov	 ecx, DWORD PTR _e$131786[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0008c	8b 12		 mov	 edx, DWORD PTR [edx]
  0008e	50		 push	 eax
  0008f	ff d2		 call	 edx

; 497  : 		return FALSE;

  00091	b8 00 00 00 00	 mov	 eax, $LN8@ChangeHidd
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ChangeHiddenOSCreationPhase@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeHiddenOSCreationPhase@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeHiddenOSCreationPhase@@YAHH@Z ENDP		; ChangeHiddenOSCreationPhase
; Function compile flags: /Ogtpy
;	COMDAT _CreatingHiddenSysVol
_TEXT	SEGMENT
_CreatingHiddenSysVol PROC				; COMDAT

; 610  : 	return (bHiddenOS 
; 611  : 		&& bHiddenVol && !bHiddenVolHost);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00005	85 c0		 test	 eax, eax
  00007	74 1a		 je	 SHORT $LN3@CreatingHi
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0000f	85 c9		 test	 ecx, ecx
  00011	74 10		 je	 SHORT $LN3@CreatingHi
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00019	85 d2		 test	 edx, edx
  0001b	75 06		 jne	 SHORT $LN3@CreatingHi
  0001d	b8 01 00 00 00	 mov	 eax, 1

; 612  : }

  00022	c3		 ret	 0
$LN3@CreatingHi:

; 610  : 	return (bHiddenOS 
; 611  : 		&& bHiddenVol && !bHiddenVolHost);

  00023	33 c0		 xor	 eax, eax

; 612  : }

  00025	c3		 ret	 0
_CreatingHiddenSysVol ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@	; `string'
PUBLIC	??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@	; `string'
PUBLIC	??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ ; `string'
PUBLIC	??_C@_0N@PLOGBODB@StartOnLogon?$AA@		; `string'
EXTRN	_LoadCombo:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	_InitSecurityTokenLibrary:PROC
EXTRN	_ConfigReadString:PROC
EXTRN	_bHistory:DWORD
EXTRN	_SecurityTokenLibraryPath:BYTE
EXTRN	_HiddenSectorDetectionStatus:DWORD
EXTRN	_bStartOnLogon:DWORD
EXTRN	_ConfigReadInt:PROC
EXTRN	_bInPlaceEncNonSysPending:DWORD
EXTRN	_LoadNonSysInPlaceEncSettings:PROC
EXTRN	_LoadSysEncSettings:PROC
EXTRN	_EnableHwEncryption:PROC
EXTRN	_ReadDriverConfigurationFlags:PROC
;	COMDAT ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
CONST	SEGMENT
??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@ DB 'SecurityTokenLibrary', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
CONST	SEGMENT
??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@ DB 'SaveVolumeHistory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
CONST	SEGMENT
??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ DB 'HiddenSectorDetec'
	DB	'tionStatus', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
CONST	SEGMENT
??_C@_0N@PLOGBODB@StartOnLogon?$AA@ DB 'StartOnLogon', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadSettings
_TEXT	SEGMENT
_savedWipeAlgorithm$ = -4				; size = 4
_LoadSettings PROC					; COMDAT
; _hwndDlg$ = esi

; 615  : {

  00000	51		 push	 ecx

; 616  : 	EnableHwEncryption ((ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION) ? FALSE : TRUE);

  00001	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00006	c1 e8 03	 shr	 eax, 3
  00009	f7 d0		 not	 eax
  0000b	83 e0 01	 and	 eax, 1
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _EnableHwEncryption

; 617  : 
; 618  : 	WipeAlgorithmId savedWipeAlgorithm = TC_WIPE_NONE;
; 619  : 
; 620  : 	LoadSysEncSettings (hwndDlg);

  00014	56		 push	 esi
  00015	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _savedWipeAlgorithm$[esp+12], 0
  0001d	e8 00 00 00 00	 call	 _LoadSysEncSettings

; 621  : 
; 622  : 	if (LoadNonSysInPlaceEncSettings (&savedWipeAlgorithm) != 0)

  00022	8d 44 24 08	 lea	 eax, DWORD PTR _savedWipeAlgorithm$[esp+12]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _LoadNonSysInPlaceEncSettings
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	85 c0		 test	 eax, eax
  00031	74 0a		 je	 SHORT $LN4@LoadSettin

; 623  : 		bInPlaceEncNonSysPending = TRUE;

  00033	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSysPending, 1
$LN4@LoadSettin:

; 624  : 
; 625  : 	defaultKeyFilesParam.EnableKeyFiles = FALSE;
; 626  : 
; 627  : 	bStartOnLogon =	ConfigReadInt ("StartOnLogon", FALSE);

  0003d	6a 00		 push	 0
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam, 0
  0004e	e8 00 00 00 00	 call	 _ConfigReadInt

; 628  : 
; 629  : 	HiddenSectorDetectionStatus = ConfigReadInt ("HiddenSectorDetectionStatus", 0);

  00053	6a 00		 push	 0
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  0005a	a3 00 00 00 00	 mov	 DWORD PTR _bStartOnLogon, eax
  0005f	e8 00 00 00 00	 call	 _ConfigReadInt

; 630  : 
; 631  : 	bHistory = ConfigReadInt ("SaveVolumeHistory", FALSE);

  00064	6a 00		 push	 0
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0006b	a3 00 00 00 00	 mov	 DWORD PTR _HiddenSectorDetectionStatus, eax
  00070	e8 00 00 00 00	 call	 _ConfigReadInt

; 632  : 
; 633  : 	ConfigReadString ("SecurityTokenLibrary", "", SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath) - 1);

  00075	68 03 01 00 00	 push	 259			; 00000103H
  0007a	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  00089	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  0008e	e8 00 00 00 00	 call	 _ConfigReadString
  00093	83 c4 28	 add	 esp, 40			; 00000028H

; 634  : 	if (SecurityTokenLibraryPath[0])

  00096	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  0009d	74 05		 je	 SHORT $LN3@LoadSettin

; 635  : 		InitSecurityTokenLibrary();

  0009f	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary
$LN3@LoadSettin:

; 636  : 
; 637  : 	if (hwndDlg != NULL)

  000a4	85 f6		 test	 esi, esi
  000a6	74 15		 je	 SHORT $LN2@LoadSettin

; 638  : 	{
; 639  : 		LoadCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  000a8	68 ea 03 00 00	 push	 1002			; 000003eaH
  000ad	56		 push	 esi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _LoadCombo
  000ba	83 c4 04	 add	 esp, 4
$LN2@LoadSettin:

; 640  : 		return;
; 641  : 	}
; 642  : 
; 643  : 	if (bHistoryCmdLine)
; 644  : 		return;
; 645  : }

  000bd	59		 pop	 ecx
  000be	c3		 ret	 0
_LoadSettings ENDP
_TEXT	ENDS
PUBLIC	??_C@_08BENDAOKD@Language?$AA@			; `string'
EXTRN	_NormalCursor:PROC
EXTRN	_ConfigWriteEnd:PROC
EXTRN	_GetPreferredLangId:PROC
EXTRN	_ConfigWriteString:PROC
EXTRN	_ConfigWriteInt:PROC
EXTRN	_ConfigWriteBegin:PROC
EXTRN	_DumpCombo:PROC
EXTRN	_WaitCursor:PROC
;	COMDAT ??_C@_08BENDAOKD@Language?$AA@
CONST	SEGMENT
??_C@_08BENDAOKD@Language?$AA@ DB 'Language', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SaveSettings
_TEXT	SEGMENT
_SaveSettings PROC					; COMDAT
; _hwndDlg$ = esi

; 649  : 	WaitCursor ();

  00000	e8 00 00 00 00	 call	 _WaitCursor

; 650  : 
; 651  : 	if (hwndDlg != NULL)

  00005	85 f6		 test	 esi, esi
  00007	74 21		 je	 SHORT $LN2@SaveSettin

; 652  : 		DumpCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX), !bHistory);

  00009	33 c0		 xor	 eax, eax
  0000b	39 05 00 00 00
	00		 cmp	 DWORD PTR _bHistory, eax
  00011	0f 94 c0	 sete	 al
  00014	50		 push	 eax
  00015	68 ea 03 00 00	 push	 1002			; 000003eaH
  0001a	56		 push	 esi
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _DumpCombo
  00027	83 c4 08	 add	 esp, 8
$LN2@SaveSettin:

; 653  : 
; 654  : 	ConfigWriteBegin ();

  0002a	e8 00 00 00 00	 call	 _ConfigWriteBegin

; 655  : 
; 656  : 	ConfigWriteInt ("StartOnLogon",	bStartOnLogon);

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bStartOnLogon
  00035	51		 push	 ecx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  0003b	e8 00 00 00 00	 call	 _ConfigWriteInt

; 657  : 	ConfigWriteInt ("HiddenSectorDetectionStatus", HiddenSectorDetectionStatus);

  00040	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _HiddenSectorDetectionStatus
  00046	52		 push	 edx
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  0004c	e8 00 00 00 00	 call	 _ConfigWriteInt

; 658  : 	ConfigWriteInt ("SaveVolumeHistory", bHistory);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0005c	e8 00 00 00 00	 call	 _ConfigWriteInt
  00061	83 c4 18	 add	 esp, 24			; 00000018H

; 659  : 	ConfigWriteString ("SecurityTokenLibrary", SecurityTokenLibraryPath[0] ? SecurityTokenLibraryPath : "");

  00064	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET _SecurityTokenLibraryPath
  00070	75 05		 jne	 SHORT $LN6@SaveSettin
  00072	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN6@SaveSettin:
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  0007d	e8 00 00 00 00	 call	 _ConfigWriteString
  00082	83 c4 08	 add	 esp, 8

; 660  : 
; 661  : 	if (GetPreferredLangId () != NULL)

  00085	e8 00 00 00 00	 call	 _GetPreferredLangId
  0008a	85 c0		 test	 eax, eax
  0008c	74 13		 je	 SHORT $LN1@SaveSettin

; 662  : 		ConfigWriteString ("Language", GetPreferredLangId ());

  0008e	e8 00 00 00 00	 call	 _GetPreferredLangId
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_08BENDAOKD@Language?$AA@
  00099	e8 00 00 00 00	 call	 _ConfigWriteString
  0009e	83 c4 08	 add	 esp, 8
$LN1@SaveSettin:

; 663  : 
; 664  : 	ConfigWriteEnd ();

  000a1	e8 00 00 00 00	 call	 _ConfigWriteEnd

; 665  : 
; 666  : 	NormalCursor ();

  000a6	e9 00 00 00 00	 jmp	 _NormalCursor
_SaveSettings ENDP
_TEXT	ENDS
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_CleanLastVisitedMRU:PROC
EXTRN	_MoveEditToCombo:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	__imp__IsWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EndMainDlg
_TEXT	SEGMENT
_EndMainDlg PROC					; COMDAT
; _hwndDlg$ = edi

; 673  : 	if (nCurPageNo == VOLUME_LOCATION_PAGE)

  00000	83 3d 00 00 00
	00 0e		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 14 ; nCurPageNo, 0000000eH
  00007	56		 push	 esi
  00008	75 66		 jne	 SHORT $LN4@EndMainDlg

; 674  : 	{
; 675  : 		if (IsWindow(GetDlgItem(hCurPage, IDC_NO_HISTORY)))

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00015	68 f4 03 00 00	 push	 1012			; 000003f4H
  0001a	50		 push	 eax
  0001b	ff d6		 call	 esi
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00024	85 c0		 test	 eax, eax
  00026	74 23		 je	 SHORT $LN7@EndMainDlg

; 676  : 			bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY));

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0002e	68 f4 03 00 00	 push	 1012			; 000003f4H
  00033	51		 push	 ecx
  00034	ff d6		 call	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _IsButtonChecked
  0003c	83 c4 04	 add	 esp, 4
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	40		 inc	 eax
  00044	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  00049	eb 05		 jmp	 SHORT $LN3@EndMainDlg
$LN7@EndMainDlg:
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
$LN3@EndMainDlg:

; 677  : 
; 678  : 		MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00056	50		 push	 eax
  00057	68 ea 03 00 00	 push	 1002			; 000003eaH
  0005c	52		 push	 edx
  0005d	ff d6		 call	 esi
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _MoveEditToCombo

; 679  : 		SaveSettings (hCurPage);

  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  0006b	83 c4 08	 add	 esp, 8

; 680  : 	}
; 681  : 	else 

  0006e	eb 02		 jmp	 SHORT $LN8@EndMainDlg
$LN4@EndMainDlg:

; 682  : 	{
; 683  : 		SaveSettings (NULL);

  00070	33 f6		 xor	 esi, esi
$LN8@EndMainDlg:
  00072	e8 00 00 00 00	 call	 _SaveSettings

; 684  : 	}
; 685  : 
; 686  : 	SaveSysEncSettings (hwndDlg);

  00077	8b c7		 mov	 eax, edi
  00079	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings

; 687  : 
; 688  : 	if (!bHistory)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHistory, 0
  00085	5e		 pop	 esi
  00086	75 05		 jne	 SHORT $LN1@EndMainDlg

; 689  : 		CleanLastVisitedMRU ();

  00088	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN1@EndMainDlg:

; 690  : 
; 691  : 	EndDialog (hwndDlg, 0);

  0008d	6a 00		 push	 0
  0008f	57		 push	 edi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 692  : }

  00096	c3		 ret	 0
_EndMainDlg ENDP
_TEXT	ENDS
EXTRN	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ:PROC ; CipherShed::BootEncryption::GetStatus
;	COMDAT ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A
_BSS	SEGMENT
?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A DB 05eH DUP (?) ; `SysEncryptionOrDecryptionRequired'::`2'::locBootEncStatus
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0
__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2
__ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncryptionOrDecryptionRequired@@YAHXZ
_TEXT	SEGMENT
$T141168 = -114						; size = 94
_e$131848 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?SysEncryptionOrDecryptionRequired@@YAHXZ PROC		; SysEncryptionOrDecryptionRequired, COMDAT

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 697  : 	/* If you update this function, revise SysEncryptionOrDecryptionRequired() in Mount.c as well. */
; 698  : 
; 699  : 	static BootEncryptionStatus locBootEncStatus;
; 700  : 
; 701  : 	try
; 702  : 	{
; 703  : 		locBootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T141168[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN11@SysEncrypt:

; 709  : 
; 710  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 711  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 712  : 		|| 
; 713  : 		(
; 714  : 			locBootEncStatus.DriveMounted 
; 715  : 			&& 
; 716  : 			(
; 717  : 				locBootEncStatus.ConfiguredEncryptedAreaStart != locBootEncStatus.EncryptedAreaStart
; 718  : 				|| locBootEncStatus.ConfiguredEncryptedAreaEnd != locBootEncStatus.EncryptedAreaEnd
; 719  : 			)
; 720  : 		)
; 721  : 	);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00056	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0005b	74 6f		 je	 SHORT $LN4@SysEncrypt
  0005d	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00062	74 68		 je	 SHORT $LN4@SysEncrypt
  00064	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+6, 0
  0006b	74 36		 je	 SHORT $LN6@SysEncrypt
  0006d	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+26
  00072	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+42
  00078	75 52		 jne	 SHORT $LN4@SysEncrypt
  0007a	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+30
  00080	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+46
  00086	75 44		 jne	 SHORT $LN4@SysEncrypt
  00088	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+34
  0008e	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+50
  00094	75 36		 jne	 SHORT $LN4@SysEncrypt
  00096	a1 26 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+38
  0009b	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+54
  000a1	75 29		 jne	 SHORT $LN4@SysEncrypt
$LN6@SysEncrypt:
  000a3	33 c0		 xor	 eax, eax

; 722  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0:

; 704  : 	}
; 705  : 	catch (Exception &e)
; 706  : 	{
; 707  : 		e.Show (MainDlg);

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _e$131848[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c1	8b 12		 mov	 edx, DWORD PTR [edx]
  000c3	50		 push	 eax
  000c4	ff d2		 call	 edx

; 708  : 	}

  000c6	b8 00 00 00 00	 mov	 eax, $LN11@SysEncrypt
  000cb	c3		 ret	 0
$LN4@SysEncrypt:

; 709  : 
; 710  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 711  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 712  : 		|| 
; 713  : 		(
; 714  : 			locBootEncStatus.DriveMounted 
; 715  : 			&& 
; 716  : 			(
; 717  : 				locBootEncStatus.ConfiguredEncryptedAreaStart != locBootEncStatus.EncryptedAreaStart
; 718  : 				|| locBootEncStatus.ConfiguredEncryptedAreaEnd != locBootEncStatus.EncryptedAreaEnd
; 719  : 			)
; 720  : 		)
; 721  : 	);

  000cc	b8 01 00 00 00	 mov	 eax, 1

; 722  : }

  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncryptionOrDecryptionRequired@@YAHXZ ENDP		; SysEncryptionOrDecryptionRequired
;	COMDAT ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A
_BSS	SEGMENT
?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A DB 05eH DUP (?) ; `SysDriveOrPartitionFullyEncrypted'::`2'::locBootEncStatus
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0
__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2
__ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
_TEXT	SEGMENT
$T141188 = -114						; size = 94
_e$131856 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z PROC		; SysDriveOrPartitionFullyEncrypted, COMDAT

; 726  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 727  : 	/* If you update this function, revise SysDriveOrPartitionFullyEncrypted() in Mount.c as well. */
; 728  : 
; 729  : 	static BootEncryptionStatus locBootEncStatus;
; 730  : 
; 731  : 	try
; 732  : 	{
; 733  : 		locBootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T141188[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN10@SysDriveOr:

; 740  : 
; 741  : 	return (!locBootEncStatus.SetupInProgress
; 742  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 743  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 744  : 		&& locBootEncStatus.ConfiguredEncryptedAreaStart == locBootEncStatus.EncryptedAreaStart
; 745  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd == locBootEncStatus.EncryptedAreaEnd);

  00051	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+62, 0
  00058	75 78		 jne	 SHORT $LN5@SysDriveOr
  0005a	a1 22 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+34
  0005f	8b 0d 26 00 00
	00		 mov	 ecx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+38
  00065	8b d0		 mov	 edx, eax
  00067	0b d1		 or	 edx, ecx
  00069	74 67		 je	 SHORT $LN5@SysDriveOr
  0006b	8b d0		 mov	 edx, eax
  0006d	23 d1		 and	 edx, ecx
  0006f	83 fa ff	 cmp	 edx, -1
  00072	74 5e		 je	 SHORT $LN5@SysDriveOr
  00074	8b 15 1a 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+26
  0007a	3b 15 2a 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+42
  00080	75 50		 jne	 SHORT $LN5@SysDriveOr
  00082	8b 15 1e 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+30
  00088	3b 15 2e 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+46
  0008e	75 42		 jne	 SHORT $LN5@SysDriveOr
  00090	3b 05 32 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+50
  00096	75 3a		 jne	 SHORT $LN5@SysDriveOr
  00098	3b 0d 36 00 00
	00		 cmp	 ecx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+54
  0009e	75 32		 jne	 SHORT $LN5@SysDriveOr
  000a0	b8 01 00 00 00	 mov	 eax, 1

; 746  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0:

; 734  : 	}
; 735  : 	catch (Exception &e)
; 736  : 	{
; 737  : 		if (!bSilent)

  000b7	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  000bb	75 0f		 jne	 SHORT $LN1@SysDriveOr

; 738  : 			e.Show (MainDlg);

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _e$131856[ebp]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c7	8b 12		 mov	 edx, DWORD PTR [edx]
  000c9	50		 push	 eax
  000ca	ff d2		 call	 edx
$LN1@SysDriveOr:

; 739  : 	}

  000cc	b8 00 00 00 00	 mov	 eax, $LN10@SysDriveOr
  000d1	c3		 ret	 0
$LN5@SysDriveOr:

; 740  : 
; 741  : 	return (!locBootEncStatus.SetupInProgress
; 742  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 743  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 744  : 		&& locBootEncStatus.ConfiguredEncryptedAreaStart == locBootEncStatus.EncryptedAreaStart
; 745  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd == locBootEncStatus.EncryptedAreaEnd);

  000d2	33 c0		 xor	 eax, eax

; 746  : }

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ENDP		; SysDriveOrPartitionFullyEncrypted
EXTRN	?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::Deinstall
EXTRN	?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckEncryptionSetupResult
EXTRN	__imp__Sleep@4:PROC
EXTRN	?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z:PROC ; CipherShed::BootEncryption::StartDecryption
EXTRN	?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortSetupWait
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ForceRemoveSysEnc@@YAHXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?ForceRemoveSysEnc@@YAHXZ$2
__catchsym$?ForceRemoveSysEnc@@YAHXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ForceRemoveSysEnc@@YAHXZ$0
__unwindtable$?ForceRemoveSysEnc@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?ForceRemoveSysEnc@@YAHXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ForceRemoveSysEnc@@YAHXZ
	DD	02H
	DD	FLAT:__tryblocktable$?ForceRemoveSysEnc@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?ForceRemoveSysEnc@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ForceRemoveSysEnc@@YAHXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?ForceRemoveSysEnc@@YAHXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ForceRemoveSysEnc@@YAHXZ
_TEXT	SEGMENT
$T141211 = -590						; size = 94
$T141207 = -496						; size = 94
$T141209 = -402						; size = 94
$T141208 = -308						; size = 94
$T141206 = -214						; size = 94
_locBootEncStatus$131988 = -120				; size = 94
_e$132004 = -24						; size = 4
_e$131999 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ForceRemoveSysEnc@@YAHXZ PROC				; ForceRemoveSysEnc, COMDAT

; 1101 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ForceRemoveSysEnc@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 44 02 00
	00		 sub	 esp, 580		; 00000244H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1102 : 	if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 47 01 00
	00		 je	 $LN9@ForceRemov

; 1103 : 	{
; 1104 : 		BootEncryptionStatus locBootEncStatus;
; 1105 : 
; 1106 : 		try
; 1107 : 		{
; 1108 : 			locBootEncStatus = BootEncObj->GetStatus();

  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00041	8d 85 2a ff ff
	ff		 lea	 eax, DWORD PTR $T141206[ebp]
  00047	50		 push	 eax
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00054	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00059	8b f0		 mov	 esi, eax
  0005b	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$131988[ebp]
  0005e	f3 a5		 rep movsd
  00060	66 a5		 movsw

; 1109 : 
; 1110 : 			if (locBootEncStatus.SetupInProgress)

  00062	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$131988[ebp+62], 0
  00066	74 0b		 je	 SHORT $LN7@ForceRemov

; 1111 : 				BootEncObj->AbortSetupWait ();

  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006e	e8 00 00 00 00	 call	 ?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetupWait
$LN7@ForceRemov:

; 1112 : 
; 1113 : 			locBootEncStatus = BootEncObj->GetStatus();

  00073	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T141207[ebp]
  00079	51		 push	 ecx
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00080	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00085	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0008a	8b f0		 mov	 esi, eax
  0008c	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$131988[ebp]
  0008f	f3 a5		 rep movsd
  00091	66 a5		 movsw

; 1114 : 
; 1115 : 			if (locBootEncStatus.DriveMounted)

  00093	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$131988[ebp+6], 0
  00097	74 63		 je	 SHORT $LN23@ForceRemov

; 1116 : 			{
; 1117 : 				// Remove the header
; 1118 : 				BootEncObj->StartDecryption (DiscardUnreadableEncryptedSectors);			

  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 ?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::StartDecryption

; 1119 : 				locBootEncStatus = BootEncObj->GetStatus();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000b1	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T141208[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000bd	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LN26@ForceRemov:
  000c3	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000c8	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$131988[ebp]
  000cb	8b f0		 mov	 esi, eax
  000cd	f3 a5		 rep movsd
  000cf	66 a5		 movsw

; 1120 : 
; 1121 : 				while (locBootEncStatus.SetupInProgress)

  000d1	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$131988[ebp+62], 0
  000d5	74 18		 je	 SHORT $LN4@ForceRemov

; 1122 : 				{
; 1123 : 					Sleep (100);

  000d7	6a 64		 push	 100			; 00000064H
  000d9	ff d3		 call	 ebx

; 1124 : 					locBootEncStatus = BootEncObj->GetStatus();

  000db	8d 8d 6e fe ff
	ff		 lea	 ecx, DWORD PTR $T141209[ebp]
  000e1	51		 push	 ecx
  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000e8	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 1125 : 				}

  000ed	eb d4		 jmp	 SHORT $LN26@ForceRemov
$LN4@ForceRemov:

; 1126 : 
; 1127 : 				BootEncObj->CheckEncryptionSetupResult ();

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000f5	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
  000fa	eb 06		 jmp	 SHORT $LN6@ForceRemov
$LN23@ForceRemov:
  000fc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LN6@ForceRemov:

; 1128 : 			}
; 1129 : 
; 1130 : 			Sleep (50);

  00102	6a 32		 push	 50			; 00000032H
  00104	ff d3		 call	 ebx

; 1131 : 		}
; 1132 : 		catch (Exception &e)
; 1133 : 		{
; 1134 : 			e.Show (MainDlg);
; 1135 : 			return FALSE;
; 1136 : 		}
; 1137 : 
; 1138 : 		try
; 1139 : 		{
; 1140 : 			locBootEncStatus = BootEncObj->GetStatus();

  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010c	8d 95 b2 fd ff
	ff		 lea	 edx, DWORD PTR $T141211[ebp]
  00112	52		 push	 edx
  00113	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0011a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0011f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00124	8b f0		 mov	 esi, eax
  00126	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$131988[ebp]
  00129	f3 a5		 rep movsd
  0012b	66 a5		 movsw

; 1141 : 
; 1142 : 			if (!locBootEncStatus.DriveMounted)

  0012d	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$131988[ebp+6], 0
  00131	75 0d		 jne	 SHORT $LN2@ForceRemov

; 1143 : 				BootEncObj->Deinstall (true);

  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00139	6a 01		 push	 1
  0013b	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
$LN2@ForceRemov:

; 1149 : 		}
; 1150 : 
; 1151 : 		return TRUE;

  00140	b8 01 00 00 00	 mov	 eax, 1

; 1155 : }

  00145	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00148	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014f	59		 pop	 ecx
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
__catch$?ForceRemoveSysEnc@@YAHXZ$2:

; 1144 : 		}
; 1145 : 		catch (Exception &e)
; 1146 : 		{
; 1147 : 			e.Show (MainDlg);

  00157	8b 4d e8	 mov	 ecx, DWORD PTR _e$132004[ebp]
  0015a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00162	8b 00		 mov	 eax, DWORD PTR [eax]
  00164	52		 push	 edx
  00165	ff d0		 call	 eax

; 1148 : 			return FALSE;

  00167	b8 00 00 00 00	 mov	 eax, $LN9@ForceRemov
  0016c	c3		 ret	 0
__catch$?ForceRemoveSysEnc@@YAHXZ$0:
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _e$131999[ebp]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00177	8b 12		 mov	 edx, DWORD PTR [edx]
  00179	50		 push	 eax
  0017a	ff d2		 call	 edx
  0017c	b8 00 00 00 00	 mov	 eax, $LN9@ForceRemov
  00181	c3		 ret	 0
$LN9@ForceRemov:

; 1152 : 	}
; 1153 : 	else
; 1154 : 		return FALSE;

  00182	33 c0		 xor	 eax, eax

; 1155 : }

  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ForceRemoveSysEnc@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a ac fd ff
	ff		 mov	 ecx, DWORD PTR [edx-596]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ForceRemoveSysEnc@@YAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ForceRemoveSysEnc@@YAHXZ ENDP				; ForceRemoveSysEnc
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@ ; `string'
PUBLIC	??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@ ; `string'
PUBLIC	??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@		; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@		; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_08FJPFOLOD@AES_HELP?$AA@			; `string'
PUBLIC	??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@		; `string'
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ComboSelChangeEA
EXTRN	_AccommodateTextField:PROC
EXTRN	_hUserUnderlineFont:DWORD
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	_wcscpy_s:PROC
EXTRN	_CipherGetName:PROC
EXTRN	_CipherGetKeySize:PROC
EXTRN	_EAGetPreviousCipher:PROC
EXTRN	_EAGetLastCipher:PROC
EXTRN	_EAGetCipherCount:PROC
EXTRN	_swprintf_s:PROC
EXTRN	_GetString:PROC
EXTRN	_EAGetName:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@
CONST	SEGMENT
??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@ DB 'IDC_LINK_MORE'
	DB	'_INFO_ABOUT_CIPHER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@
CONST	SEGMENT
??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@ DB 'TWO_LAYER_CASCADE_HELP'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@
CONST	SEGMENT
??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@ DB 'THREE_LAYER_CASCADE_'
	DB	'HELP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@
CONST	SEGMENT
??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@ DB 'TWOFISH_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@
CONST	SEGMENT
??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@ DB 'SERPENT_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJPFOLOD@AES_HELP?$AA@
CONST	SEGMENT
??_C@_08FJPFOLOD@AES_HELP?$AA@ DB 'AES_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
CONST	SEGMENT
??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@ DB 'MORE_INFO_ABOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ComboSelChangeEA
_TEXT	SEGMENT
_cipherIDs$132028 = -8828				; size = 20
_name$132025 = -8808					; size = 100
_hyperLink$132027 = -8708				; size = 512
_auxLine$132026 = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_ComboSelChangeEA PROC					; COMDAT

; 1172 : {

  00000	b8 7c 22 00 00	 mov	 eax, 8828		; 0000227cH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 78 22
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+8828], eax
  00018	53		 push	 ebx

; 1173 : 	LPARAM nIndex = SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  00019	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0001f	55		 push	 ebp
  00020	8b ac 24 88 22
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+8832]
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	68 47 01 00 00	 push	 327			; 00000147H
  00032	68 ea 03 00 00	 push	 1002			; 000003eaH
  00037	55		 push	 ebp
  00038	ff d3		 call	 ebx
  0003a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00040	50		 push	 eax
  00041	ff d7		 call	 edi
  00043	8b f0		 mov	 esi, eax

; 1174 : 
; 1175 : 	if (nIndex == CB_ERR)

  00045	83 fe ff	 cmp	 esi, -1
  00048	75 19		 jne	 SHORT $LN16@ComboSelCh

; 1176 : 	{
; 1177 : 		SetWindowText (GetDlgItem (hwndDlg, IDC_BOX_HELP), "");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004f	68 eb 03 00 00	 push	 1003			; 000003ebH
  00054	55		 push	 ebp
  00055	ff d3		 call	 ebx
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1178 : 	}
; 1179 : 	else

  0005e	e9 16 03 00 00	 jmp	 $LN15@ComboSelCh
$LN16@ComboSelCh:

; 1180 : 	{
; 1181 : 		char name[100];
; 1182 : 		wchar_t auxLine[4096];
; 1183 : 		wchar_t hyperLink[256] = { 0 };

  00063	33 c0		 xor	 eax, eax
  00065	68 fe 01 00 00	 push	 510			; 000001feH
  0006a	50		 push	 eax
  0006b	8d 8c 24 92 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132027[esp+8854]
  00072	51		 push	 ecx
  00073	66 89 84 24 94
	00 00 00	 mov	 WORD PTR _hyperLink$132027[esp+8856], ax
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1184 : 		int cipherIDs[5];
; 1185 : 		int i, cnt = 0;
; 1186 : 
; 1187 : 		nIndex = SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  00083	6a 00		 push	 0
  00085	56		 push	 esi
  00086	68 50 01 00 00	 push	 336			; 00000150H
  0008b	68 ea 03 00 00	 push	 1002			; 000003eaH
  00090	55		 push	 ebp
  00091	ff d3		 call	 ebx
  00093	50		 push	 eax
  00094	ff d7		 call	 edi
  00096	8b d8		 mov	 ebx, eax

; 1188 : 		EAGetName (name, nIndex);

  00098	8d 54 24 24	 lea	 edx, DWORD PTR _name$132025[esp+8844]
  0009c	53		 push	 ebx
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _EAGetName
  000a3	83 c4 08	 add	 esp, 8

; 1189 : 
; 1190 : 		if (strcmp (name, "AES") == 0)

  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  000ab	8d 44 24 24	 lea	 eax, DWORD PTR _name$132025[esp+8844]
  000af	90		 npad	 1
$LL21@ComboSelCh:
  000b0	8a 10		 mov	 dl, BYTE PTR [eax]
  000b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b4	75 1a		 jne	 SHORT $LN22@ComboSelCh
  000b6	84 d2		 test	 dl, dl
  000b8	74 12		 je	 SHORT $LN23@ComboSelCh
  000ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c0	75 0e		 jne	 SHORT $LN22@ComboSelCh
  000c2	83 c0 02	 add	 eax, 2
  000c5	83 c1 02	 add	 ecx, 2
  000c8	84 d2		 test	 dl, dl
  000ca	75 e4		 jne	 SHORT $LL21@ComboSelCh
$LN23@ComboSelCh:
  000cc	33 c0		 xor	 eax, eax
  000ce	eb 05		 jmp	 SHORT $LN24@ComboSelCh
$LN22@ComboSelCh:
  000d0	1b c0		 sbb	 eax, eax
  000d2	83 d8 ff	 sbb	 eax, -1
$LN24@ComboSelCh:
  000d5	85 c0		 test	 eax, eax

; 1191 : 		{
; 1192 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  000d7	8d 44 24 24	 lea	 eax, DWORD PTR _name$132025[esp+8844]
  000db	75 34		 jne	 SHORT $LN14@ComboSelCh
  000dd	50		 push	 eax
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  000e3	e8 00 00 00 00	 call	 _GetString
  000e8	83 c4 04	 add	 esp, 4
  000eb	50		 push	 eax
  000ec	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132027[esp+8852]
  000f3	68 00 01 00 00	 push	 256			; 00000100H
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _swprintf_s

; 1193 : 
; 1194 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AES_HELP"));

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_08FJPFOLOD@AES_HELP?$AA@
  00103	e8 00 00 00 00	 call	 _GetString
  00108	83 c4 14	 add	 esp, 20			; 00000014H
  0010b	50		 push	 eax
  0010c	e9 25 02 00 00	 jmp	 $LN33@ComboSelCh
$LN14@ComboSelCh:

; 1195 : 		}
; 1196 : 		else if (strcmp (name, "Serpent") == 0)

  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
$LL25@ComboSelCh:
  00116	8a 10		 mov	 dl, BYTE PTR [eax]
  00118	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0011a	75 1a		 jne	 SHORT $LN26@ComboSelCh
  0011c	84 d2		 test	 dl, dl
  0011e	74 12		 je	 SHORT $LN27@ComboSelCh
  00120	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00123	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00126	75 0e		 jne	 SHORT $LN26@ComboSelCh
  00128	83 c0 02	 add	 eax, 2
  0012b	83 c1 02	 add	 ecx, 2
  0012e	84 d2		 test	 dl, dl
  00130	75 e4		 jne	 SHORT $LL25@ComboSelCh
$LN27@ComboSelCh:
  00132	33 c0		 xor	 eax, eax
  00134	eb 05		 jmp	 SHORT $LN28@ComboSelCh
$LN26@ComboSelCh:
  00136	1b c0		 sbb	 eax, eax
  00138	83 d8 ff	 sbb	 eax, -1
$LN28@ComboSelCh:
  0013b	85 c0		 test	 eax, eax
  0013d	75 38		 jne	 SHORT $LN12@ComboSelCh

; 1197 : 		{
; 1198 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  0013f	8d 54 24 24	 lea	 edx, DWORD PTR _name$132025[esp+8844]
  00143	52		 push	 edx
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  00149	e8 00 00 00 00	 call	 _GetString
  0014e	83 c4 04	 add	 esp, 4
  00151	50		 push	 eax
  00152	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _hyperLink$132027[esp+8852]
  00159	68 00 01 00 00	 push	 256			; 00000100H
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _swprintf_s

; 1199 : 				
; 1200 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SERPENT_HELP"));

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@
  00169	e8 00 00 00 00	 call	 _GetString
  0016e	83 c4 14	 add	 esp, 20			; 00000014H
  00171	50		 push	 eax
  00172	e9 bf 01 00 00	 jmp	 $LN33@ComboSelCh
$LN12@ComboSelCh:

; 1201 : 		}
; 1202 : 		else if (strcmp (name, "Twofish") == 0)

  00177	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  0017c	8d 44 24 24	 lea	 eax, DWORD PTR _name$132025[esp+8844]
$LL29@ComboSelCh:
  00180	8a 10		 mov	 dl, BYTE PTR [eax]
  00182	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00184	75 1a		 jne	 SHORT $LN30@ComboSelCh
  00186	84 d2		 test	 dl, dl
  00188	74 12		 je	 SHORT $LN31@ComboSelCh
  0018a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0018d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00190	75 0e		 jne	 SHORT $LN30@ComboSelCh
  00192	83 c0 02	 add	 eax, 2
  00195	83 c1 02	 add	 ecx, 2
  00198	84 d2		 test	 dl, dl
  0019a	75 e4		 jne	 SHORT $LL29@ComboSelCh
$LN31@ComboSelCh:
  0019c	33 c0		 xor	 eax, eax
  0019e	eb 05		 jmp	 SHORT $LN32@ComboSelCh
$LN30@ComboSelCh:
  001a0	1b c0		 sbb	 eax, eax
  001a2	83 d8 ff	 sbb	 eax, -1
$LN32@ComboSelCh:
  001a5	85 c0		 test	 eax, eax
  001a7	75 38		 jne	 SHORT $LN10@ComboSelCh

; 1203 : 		{
; 1204 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  001a9	8d 4c 24 24	 lea	 ecx, DWORD PTR _name$132025[esp+8844]
  001ad	51		 push	 ecx
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  001b3	e8 00 00 00 00	 call	 _GetString
  001b8	83 c4 04	 add	 esp, 4
  001bb	50		 push	 eax
  001bc	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _hyperLink$132027[esp+8852]
  001c3	68 00 01 00 00	 push	 256			; 00000100H
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 _swprintf_s

; 1205 : 
; 1206 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("TWOFISH_HELP"));

  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@
  001d3	e8 00 00 00 00	 call	 _GetString
  001d8	83 c4 14	 add	 esp, 20			; 00000014H
  001db	50		 push	 eax
  001dc	e9 55 01 00 00	 jmp	 $LN33@ComboSelCh
$LN10@ComboSelCh:

; 1207 : 		}
; 1208 : 		else if (EAGetCipherCount (nIndex) > 1)

  001e1	53		 push	 ebx
  001e2	e8 00 00 00 00	 call	 _EAGetCipherCount
  001e7	83 c4 04	 add	 esp, 4
  001ea	83 f8 01	 cmp	 eax, 1
  001ed	0f 8e 3e 01 00
	00		 jle	 $LN8@ComboSelCh

; 1209 : 		{
; 1210 : 			// Cascade
; 1211 : 			cipherIDs[cnt++] = i = EAGetLastCipher(nIndex);

  001f3	53		 push	 ebx
  001f4	e8 00 00 00 00	 call	 _EAGetLastCipher

; 1212 : 			while (i = EAGetPreviousCipher(nIndex, i))

  001f9	50		 push	 eax
  001fa	8b f8		 mov	 edi, eax
  001fc	53		 push	 ebx
  001fd	89 7c 24 1c	 mov	 DWORD PTR _cipherIDs$132028[esp+8856], edi
  00201	be 01 00 00 00	 mov	 esi, 1
  00206	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020e	85 c0		 test	 eax, eax
  00210	74 17		 je	 SHORT $LN6@ComboSelCh
$LL7@ComboSelCh:
  00212	50		 push	 eax

; 1213 : 			{
; 1214 : 				cipherIDs[cnt] = i;

  00213	89 44 b4 14	 mov	 DWORD PTR _cipherIDs$132028[esp+esi*4+8848], eax
  00217	53		 push	 ebx

; 1215 : 				cnt++; 

  00218	46		 inc	 esi
  00219	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0021e	83 c4 08	 add	 esp, 8
  00221	85 c0		 test	 eax, eax
  00223	75 ed		 jne	 SHORT $LL7@ComboSelCh

; 1212 : 			while (i = EAGetPreviousCipher(nIndex, i))

  00225	8b 7c 24 10	 mov	 edi, DWORD PTR _cipherIDs$132028[esp+8844]
$LN6@ComboSelCh:

; 1216 : 			}
; 1217 : 
; 1218 : 			switch (cnt)	// Number of ciphers in the cascade

  00229	83 ee 02	 sub	 esi, 2
  0022c	0f 84 7f 00 00
	00		 je	 $LN3@ComboSelCh
  00232	83 ee 01	 sub	 esi, 1
  00235	0f 85 cc 00 00
	00		 jne	 $LN4@ComboSelCh

; 1226 : 				break;
; 1227 : 
; 1228 : 			case 3:
; 1229 : 				swprintf (auxLine, GetString ("THREE_LAYER_CASCADE_HELP"), 
; 1230 : 					CipherGetName (cipherIDs[2]),
; 1231 : 					CipherGetKeySize (cipherIDs[2])*8,
; 1232 : 					CipherGetName (cipherIDs[1]),
; 1233 : 					CipherGetKeySize (cipherIDs[1])*8,
; 1234 : 					CipherGetName (cipherIDs[0]),
; 1235 : 					CipherGetKeySize (cipherIDs[0])*8);

  0023b	57		 push	 edi
  0023c	e8 00 00 00 00	 call	 _CipherGetKeySize
  00241	03 c0		 add	 eax, eax
  00243	03 c0		 add	 eax, eax
  00245	83 c4 04	 add	 esp, 4
  00248	03 c0		 add	 eax, eax
  0024a	50		 push	 eax
  0024b	57		 push	 edi
  0024c	e8 00 00 00 00	 call	 _CipherGetName
  00251	8b 74 24 1c	 mov	 esi, DWORD PTR _cipherIDs$132028[esp+8856]
  00255	83 c4 04	 add	 esp, 4
  00258	50		 push	 eax
  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 _CipherGetKeySize
  0025f	03 c0		 add	 eax, eax
  00261	03 c0		 add	 eax, eax
  00263	83 c4 04	 add	 esp, 4
  00266	03 c0		 add	 eax, eax
  00268	50		 push	 eax
  00269	56		 push	 esi
  0026a	e8 00 00 00 00	 call	 _CipherGetName
  0026f	8b 74 24 28	 mov	 esi, DWORD PTR _cipherIDs$132028[esp+8868]
  00273	83 c4 04	 add	 esp, 4
  00276	50		 push	 eax
  00277	56		 push	 esi
  00278	e8 00 00 00 00	 call	 _CipherGetKeySize
  0027d	03 c0		 add	 eax, eax
  0027f	03 c0		 add	 eax, eax
  00281	83 c4 04	 add	 esp, 4
  00284	03 c0		 add	 eax, eax
  00286	50		 push	 eax
  00287	56		 push	 esi
  00288	e8 00 00 00 00	 call	 _CipherGetName
  0028d	83 c4 04	 add	 esp, 4
  00290	50		 push	 eax
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@
  00296	e8 00 00 00 00	 call	 _GetString
  0029b	83 c4 04	 add	 esp, 4
  0029e	50		 push	 eax
  0029f	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _auxLine$132026[esp+8872]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  002ac	83 c4 20	 add	 esp, 32			; 00000020H

; 1236 : 				break;

  002af	eb 56		 jmp	 SHORT $LN4@ComboSelCh
$LN3@ComboSelCh:

; 1219 : 			{
; 1220 : 			case 2:
; 1221 : 				swprintf (auxLine, GetString ("TWO_LAYER_CASCADE_HELP"), 
; 1222 : 					CipherGetName (cipherIDs[1]),
; 1223 : 					CipherGetKeySize (cipherIDs[1])*8,
; 1224 : 					CipherGetName (cipherIDs[0]),
; 1225 : 					CipherGetKeySize (cipherIDs[0])*8);

  002b1	57		 push	 edi
  002b2	e8 00 00 00 00	 call	 _CipherGetKeySize
  002b7	03 c0		 add	 eax, eax
  002b9	03 c0		 add	 eax, eax
  002bb	83 c4 04	 add	 esp, 4
  002be	03 c0		 add	 eax, eax
  002c0	50		 push	 eax
  002c1	57		 push	 edi
  002c2	e8 00 00 00 00	 call	 _CipherGetName
  002c7	8b 74 24 1c	 mov	 esi, DWORD PTR _cipherIDs$132028[esp+8856]
  002cb	83 c4 04	 add	 esp, 4
  002ce	50		 push	 eax
  002cf	56		 push	 esi
  002d0	e8 00 00 00 00	 call	 _CipherGetKeySize
  002d5	03 c0		 add	 eax, eax
  002d7	03 c0		 add	 eax, eax
  002d9	83 c4 04	 add	 esp, 4
  002dc	03 c0		 add	 eax, eax
  002de	50		 push	 eax
  002df	56		 push	 esi
  002e0	e8 00 00 00 00	 call	 _CipherGetName
  002e5	83 c4 04	 add	 esp, 4
  002e8	50		 push	 eax
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@
  002ee	e8 00 00 00 00	 call	 _GetString
  002f3	83 c4 04	 add	 esp, 4
  002f6	50		 push	 eax
  002f7	8d 8c 24 9c 02
	00 00		 lea	 ecx, DWORD PTR _auxLine$132026[esp+8864]
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00304	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@ComboSelCh:

; 1237 : 			}
; 1238 : 
; 1239 : 			wcscpy_s (hyperLink, sizeof(hyperLink) / 2, GetString ("IDC_LINK_MORE_INFO_ABOUT_CIPHER"));

  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@
  0030c	e8 00 00 00 00	 call	 _GetString
  00311	50		 push	 eax
  00312	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _hyperLink$132027[esp+8852]
  00319	68 00 01 00 00	 push	 256			; 00000100H
  0031e	52		 push	 edx
  0031f	e8 00 00 00 00	 call	 _wcscpy_s
  00324	83 c4 10	 add	 esp, 16			; 00000010H

; 1240 : 
; 1241 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), auxLine);

  00327	8d 84 24 88 02
	00 00		 lea	 eax, DWORD PTR _auxLine$132026[esp+8844]
  0032e	50		 push	 eax

; 1242 : 		}
; 1243 : 		else

  0032f	eb 05		 jmp	 SHORT $LN33@ComboSelCh
$LN8@ComboSelCh:

; 1244 : 		{
; 1245 : 			// No info available for this encryption algorithm
; 1246 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), L"");

  00331	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN33@ComboSelCh:
  00336	68 eb 03 00 00	 push	 1003			; 000003ebH
  0033b	55		 push	 ebp
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00342	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00348	50		 push	 eax
  00349	ff d6		 call	 esi

; 1247 : 		}
; 1248 : 
; 1249 : 
; 1250 : 		// Update hyperlink
; 1251 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER), hyperLink);

  0034b	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132027[esp+8844]
  00352	51		 push	 ecx
  00353	68 21 04 00 00	 push	 1057			; 00000421H
  00358	55		 push	 ebp
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0035f	50		 push	 eax
  00360	ff d6		 call	 esi

; 1252 : 		AccommodateTextField (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER, FALSE, hUserUnderlineFont);

  00362	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserUnderlineFont
  00368	52		 push	 edx
  00369	6a 00		 push	 0
  0036b	68 21 04 00 00	 push	 1057			; 00000421H
  00370	55		 push	 ebp
  00371	e8 00 00 00 00	 call	 _AccommodateTextField
  00376	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@ComboSelCh:

; 1253 : 	}
; 1254 : }

  00379	8b 8c 24 88 22
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+8844]
  00380	5f		 pop	 edi
  00381	5e		 pop	 esi
  00382	5d		 pop	 ebp
  00383	5b		 pop	 ebx
  00384	33 cc		 xor	 ecx, esp
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	81 c4 7c 22 00
	00		 add	 esp, 8828		; 0000227cH
  00391	c3		 ret	 0
_ComboSelChangeEA ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z
_TEXT	SEGMENT
?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z PROC	; UpdateWizardModeControls, COMDAT
; _hwndDlg$ = edi
; _setWizardMode$ = esi

; 1339 : 	SendMessage (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER),
; 1340 : 		BM_SETCHECK,
; 1341 : 		setWizardMode == WIZARD_MODE_FILE_CONTAINER ? BST_CHECKED : BST_UNCHECKED,
; 1342 : 		0);

  00000	33 c0		 xor	 eax, eax
  00002	53		 push	 ebx
  00003	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00009	85 f6		 test	 esi, esi
  0000b	55		 push	 ebp
  0000c	0f 94 c0	 sete	 al
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	68 f1 00 00 00	 push	 241			; 000000f1H
  00017	68 25 04 00 00	 push	 1061			; 00000425H
  0001c	57		 push	 edi
  0001d	ff d3		 call	 ebx
  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  00025	50		 push	 eax
  00026	ff d5		 call	 ebp

; 1343 : 
; 1344 : 	SendMessage (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE),
; 1345 : 		BM_SETCHECK,
; 1346 : 		setWizardMode == WIZARD_MODE_NONSYS_DEVICE ? BST_CHECKED : BST_UNCHECKED,
; 1347 : 		0);

  00028	33 c9		 xor	 ecx, ecx
  0002a	83 fe 01	 cmp	 esi, 1
  0002d	0f 94 c1	 sete	 cl
  00030	6a 00		 push	 0
  00032	51		 push	 ecx
  00033	68 f1 00 00 00	 push	 241			; 000000f1H
  00038	68 26 04 00 00	 push	 1062			; 00000426H
  0003d	57		 push	 edi
  0003e	ff d3		 call	 ebx
  00040	50		 push	 eax
  00041	ff d5		 call	 ebp

; 1348 : 
; 1349 : 	SendMessage (GetDlgItem (hwndDlg, IDC_SYS_DEVICE),
; 1350 : 		BM_SETCHECK,
; 1351 : 		setWizardMode == WIZARD_MODE_SYS_DEVICE ? BST_CHECKED : BST_UNCHECKED,
; 1352 : 		0);

  00043	33 d2		 xor	 edx, edx
  00045	83 fe 02	 cmp	 esi, 2
  00048	0f 94 c2	 sete	 dl
  0004b	6a 00		 push	 0
  0004d	52		 push	 edx
  0004e	68 f1 00 00 00	 push	 241			; 000000f1H
  00053	68 27 04 00 00	 push	 1063			; 00000427H
  00058	57		 push	 edi
  00059	ff d3		 call	 ebx
  0005b	50		 push	 eax
  0005c	ff d5		 call	 ebp
  0005e	5d		 pop	 ebp
  0005f	5b		 pop	 ebx

; 1353 : }

  00060	c3		 ret	 0
?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z ENDP	; UpdateWizardModeControls
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetSelectedWizardMode@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?GetSelectedWizardMode@@YAHPAUHWND__@@@Z PROC		; GetSelectedWizardMode, COMDAT
; _hwndDlg$ = esi

; 1356 : {

  00000	57		 push	 edi

; 1357 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER)))

  00001	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00007	68 25 04 00 00	 push	 1061			; 00000425H
  0000c	56		 push	 esi
  0000d	ff d7		 call	 edi
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _IsButtonChecked
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN3@GetSelecte

; 1358 : 		return WIZARD_MODE_FILE_CONTAINER;

  0001c	33 c0		 xor	 eax, eax
  0001e	5f		 pop	 edi

; 1364 : 		return WIZARD_MODE_SYS_DEVICE;
; 1365 : 
; 1366 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1367 : }

  0001f	c3		 ret	 0
$LN3@GetSelecte:

; 1359 : 
; 1360 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE)))

  00020	68 26 04 00 00	 push	 1062			; 00000426H
  00025	56		 push	 esi
  00026	ff d7		 call	 edi
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _IsButtonChecked
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 07		 je	 SHORT $LN2@GetSelecte

; 1361 : 		return WIZARD_MODE_NONSYS_DEVICE;

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	5f		 pop	 edi

; 1364 : 		return WIZARD_MODE_SYS_DEVICE;
; 1365 : 
; 1366 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1367 : }

  0003b	c3		 ret	 0
$LN2@GetSelecte:

; 1362 : 
; 1363 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_SYS_DEVICE)))

  0003c	68 27 04 00 00	 push	 1063			; 00000427H
  00041	56		 push	 esi
  00042	ff d7		 call	 edi
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _IsButtonChecked
  0004a	83 c4 04	 add	 esp, 4
  0004d	f7 d8		 neg	 eax
  0004f	1b c0		 sbb	 eax, eax
  00051	83 e0 02	 and	 eax, 2
  00054	5f		 pop	 edi

; 1364 : 		return WIZARD_MODE_SYS_DEVICE;
; 1365 : 
; 1366 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1367 : }

  00055	c3		 ret	 0
?GetSelectedWizardMode@@YAHPAUHWND__@@@Z ENDP		; GetSelectedWizardMode
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RefreshMultiBootControls@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
?RefreshMultiBootControls@@YAXPAUHWND__@@@Z PROC	; RefreshMultiBootControls, COMDAT
; _hwndDlg$ = esi

; 1371 : #ifdef DEBUG
; 1372 : 	if (nMultiBoot == 0)
; 1373 : 		nMultiBoot = 1;
; 1374 : #endif
; 1375 : 
; 1376 : 	SendMessage (GetDlgItem (hwndDlg, IDC_SINGLE_BOOT),
; 1377 : 		BM_SETCHECK,
; 1378 : 		nMultiBoot == 1 ? BST_CHECKED : BST_UNCHECKED,
; 1379 : 		0);

  00000	33 c0		 xor	 eax, eax
  00002	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00011	0f 94 c0	 sete	 al
  00014	6a 00		 push	 0
  00016	50		 push	 eax
  00017	68 f1 00 00 00	 push	 241			; 000000f1H
  0001c	68 34 04 00 00	 push	 1076			; 00000434H
  00021	56		 push	 esi
  00022	ff d7		 call	 edi
  00024	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0002a	50		 push	 eax
  0002b	ff d3		 call	 ebx

; 1380 : 
; 1381 : 	SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_BOOT),
; 1382 : 		BM_SETCHECK,
; 1383 : 		nMultiBoot > 1 ? BST_CHECKED : BST_UNCHECKED,
; 1384 : 		0);

  0002d	33 c9		 xor	 ecx, ecx
  0002f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  00036	6a 00		 push	 0
  00038	0f 9f c1	 setg	 cl
  0003b	51		 push	 ecx
  0003c	68 f1 00 00 00	 push	 241			; 000000f1H
  00041	68 35 04 00 00	 push	 1077			; 00000435H
  00046	56		 push	 esi
  00047	ff d7		 call	 edi
  00049	50		 push	 eax
  0004a	ff d3		 call	 ebx
  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx

; 1385 : }

  0004e	c3		 ret	 0
?RefreshMultiBootControls@@YAXPAUHWND__@@@Z ENDP	; RefreshMultiBootControls
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Get2RadButtonPageAnswer@@YAHXZ
_TEXT	SEGMENT
?Get2RadButtonPageAnswer@@YAHXZ PROC			; Get2RadButtonPageAnswer, COMDAT

; 1390 : 	if (IsButtonChecked (GetDlgItem (hCurPage, IDC_CHOICE1)))

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0000c	68 dd 13 00 00	 push	 5085			; 000013ddH
  00011	50		 push	 eax
  00012	ff d6		 call	 esi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _IsButtonChecked
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 07		 je	 SHORT $LN2@Get2RadBut

; 1391 : 		return 1;

  00021	b8 01 00 00 00	 mov	 eax, 1
  00026	5e		 pop	 esi

; 1394 : 		return 0;
; 1395 : 
; 1396 : 	return -1;
; 1397 : }

  00027	c3		 ret	 0
$LN2@Get2RadBut:

; 1392 : 
; 1393 : 	if (IsButtonChecked (GetDlgItem (hCurPage, IDC_CHOICE2)))

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0002e	68 df 13 00 00	 push	 5087			; 000013dfH
  00033	51		 push	 ecx
  00034	ff d6		 call	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _IsButtonChecked
  0003c	83 c4 04	 add	 esp, 4
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	f7 d8		 neg	 eax
  00045	48		 dec	 eax
  00046	5e		 pop	 esi

; 1394 : 		return 0;
; 1395 : 
; 1396 : 	return -1;
; 1397 : }

  00047	c3		 ret	 0
?Get2RadButtonPageAnswer@@YAHXZ ENDP			; Get2RadButtonPageAnswer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Update2RadButtonPage@@YAXH@Z
_TEXT	SEGMENT
?Update2RadButtonPage@@YAXH@Z PROC			; Update2RadButtonPage, COMDAT
; _answer$ = esi

; 1402 : 	SendMessage (GetDlgItem (hCurPage, IDC_CHOICE1),
; 1403 : 		BM_SETCHECK,
; 1404 : 		answer == 1 ? BST_CHECKED : BST_UNCHECKED,
; 1405 : 		0);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00010	83 fe 01	 cmp	 esi, 1
  00013	0f 94 c0	 sete	 al
  00016	6a 00		 push	 0
  00018	50		 push	 eax
  00019	68 f1 00 00 00	 push	 241			; 000000f1H
  0001e	68 dd 13 00 00	 push	 5085			; 000013ddH
  00023	51		 push	 ecx
  00024	ff d7		 call	 edi
  00026	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0002c	50		 push	 eax
  0002d	ff d3		 call	 ebx

; 1406 : 
; 1407 : 	SendMessage (GetDlgItem (hCurPage, IDC_CHOICE2),
; 1408 : 		BM_SETCHECK,
; 1409 : 		answer == 0 ? BST_CHECKED : BST_UNCHECKED,
; 1410 : 		0);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00034	33 d2		 xor	 edx, edx
  00036	85 f6		 test	 esi, esi
  00038	0f 94 c2	 sete	 dl
  0003b	6a 00		 push	 0
  0003d	52		 push	 edx
  0003e	68 f1 00 00 00	 push	 241			; 000000f1H
  00043	68 df 13 00 00	 push	 5087			; 000013dfH
  00048	50		 push	 eax
  00049	ff d7		 call	 edi
  0004b	50		 push	 eax
  0004c	ff d3		 call	 ebx
  0004e	5f		 pop	 edi
  0004f	5b		 pop	 ebx

; 1411 : }

  00050	c3		 ret	 0
?Update2RadButtonPage@@YAXH@Z ENDP			; Update2RadButtonPage
_TEXT	ENDS
PUBLIC	??_C@_06JHILMIHF@CANCEL?$AA@			; `string'
PUBLIC	??_C@_04PKHKLFPJ@PREV?$AA@			; `string'
PUBLIC	??_C@_04MOKMKBJN@NEXT?$AA@			; `string'
PUBLIC	??_C@_08EOJLPPDK@UISTR_NO?$AA@			; `string'
PUBLIC	??_C@_09JHINKGCK@UISTR_YES?$AA@			; `string'
EXTRN	__imp__EnableWindow@8:PROC
;	COMDAT ??_C@_06JHILMIHF@CANCEL?$AA@
CONST	SEGMENT
??_C@_06JHILMIHF@CANCEL?$AA@ DB 'CANCEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKHKLFPJ@PREV?$AA@
CONST	SEGMENT
??_C@_04PKHKLFPJ@PREV?$AA@ DB 'PREV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOKMKBJN@NEXT?$AA@
CONST	SEGMENT
??_C@_04MOKMKBJN@NEXT?$AA@ DB 'NEXT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EOJLPPDK@UISTR_NO?$AA@
CONST	SEGMENT
??_C@_08EOJLPPDK@UISTR_NO?$AA@ DB 'UISTR_NO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHINKGCK@UISTR_YES?$AA@
CONST	SEGMENT
??_C@_09JHINKGCK@UISTR_YES?$AA@ DB 'UISTR_YES', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Init2RadButtonPageYesNo@@YAXH@Z
_TEXT	SEGMENT
?Init2RadButtonPageYesNo@@YAXH@Z PROC			; Init2RadButtonPageYesNo, COMDAT
; _answer$ = eax

; 1415 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1416 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE1), GetString ("UISTR_YES"));

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
  00008	8b f0		 mov	 esi, eax
  0000a	e8 00 00 00 00	 call	 _GetString
  0000f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0001e	68 dd 13 00 00	 push	 5085			; 000013ddH
  00023	50		 push	 eax
  00024	ff d7		 call	 edi
  00026	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  0002c	50		 push	 eax
  0002d	ff d3		 call	 ebx

; 1417 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE2), GetString ("UISTR_NO"));

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
  00034	e8 00 00 00 00	 call	 _GetString
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	68 df 13 00 00	 push	 5087			; 000013dfH
  00048	51		 push	 ecx
  00049	ff d7		 call	 edi
  0004b	50		 push	 eax
  0004c	ff d3		 call	 ebx

; 1418 : 
; 1419 : 	SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00053	e8 00 00 00 00	 call	 _GetString
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	68 10 04 00 00	 push	 1040			; 00000410H
  00067	52		 push	 edx
  00068	ff d7		 call	 edi
  0006a	50		 push	 eax
  0006b	ff d3		 call	 ebx

; 1420 : 	SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00072	e8 00 00 00 00	 call	 _GetString
  00077	83 c4 04	 add	 esp, 4
  0007a	50		 push	 eax
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00080	68 11 04 00 00	 push	 1041			; 00000411H
  00085	50		 push	 eax
  00086	ff d7		 call	 edi
  00088	50		 push	 eax
  00089	ff d3		 call	 ebx

; 1421 : 	SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00090	e8 00 00 00 00	 call	 _GetString
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0009b	83 c4 04	 add	 esp, 4
  0009e	50		 push	 eax
  0009f	6a 02		 push	 2
  000a1	51		 push	 ecx
  000a2	ff d7		 call	 edi
  000a4	50		 push	 eax
  000a5	ff d3		 call	 ebx

; 1422 : 
; 1423 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), answer >= 0);

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ac	33 d2		 xor	 edx, edx
  000ae	85 f6		 test	 esi, esi
  000b0	0f 9d c2	 setge	 dl
  000b3	52		 push	 edx
  000b4	68 10 04 00 00	 push	 1040			; 00000410H
  000b9	50		 push	 eax
  000ba	ff d7		 call	 edi
  000bc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  000c2	50		 push	 eax
  000c3	ff d3		 call	 ebx

; 1424 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000cb	6a 01		 push	 1
  000cd	68 11 04 00 00	 push	 1041			; 00000411H
  000d2	51		 push	 ecx
  000d3	ff d7		 call	 edi
  000d5	50		 push	 eax
  000d6	ff d3		 call	 ebx

; 1425 : 
; 1426 : 	Update2RadButtonPage (answer);

  000d8	e8 00 00 00 00	 call	 ?Update2RadButtonPage@@YAXH@Z ; Update2RadButtonPage
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 1427 : }

  000e0	c3		 ret	 0
?Init2RadButtonPageYesNo@@YAXH@Z ENDP			; Init2RadButtonPageYesNo
_TEXT	ENDS
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_UpdateProgressBarProc:PROC
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
CONST	SEGMENT
??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@ DB 'PROGRESS_STATUS_EN'
	DB	'CRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@
CONST	SEGMENT
??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@ DB 'PROGRESS_STATUS_DE'
	DB	'CRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@
CONST	SEGMENT
??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@ DB 'PROGRESS_STATUS_WAITI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?UpdateSysEncProgressBar@@YAXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateSysEncProgressBar@@YAXXZ$0
__unwindtable$?UpdateSysEncProgressBar@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?UpdateSysEncProgressBar@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?UpdateSysEncProgressBar@@YAXXZ$2
__ehfuncinfo$?UpdateSysEncProgressBar@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateSysEncProgressBar@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateSysEncProgressBar@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?UpdateSysEncProgressBar@@YAXXZ
_TEXT	SEGMENT
$T141270 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_tmpStr$132138 = 0					; size = 200
__$ArrayPad$ = 200					; size = 4
?UpdateSysEncProgressBar@@YAXXZ PROC			; UpdateSysEncProgressBar, COMDAT

; 1430 : {

  00000	55		 push	 ebp
  00001	8d ac 24 34 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-204]
  00008	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?UpdateSysEncProgressBar@@YAXXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 c8 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1431 : 	BootEncryptionStatus locBootEncStatus;
; 1432 : 
; 1433 : 	try
; 1434 : 	{
; 1435 : 		locBootEncStatus = BootEncObj->GetStatus();

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00045	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141270[ebp]
  0004b	50		 push	 eax
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00058	8b f0		 mov	 esi, eax
  0005a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0005f	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00062	f3 a5		 rep movsd
  00064	66 a5		 movsw

; 1440 : 	}
; 1441 : 
; 1442 : 	if (locBootEncStatus.EncryptedAreaEnd == -1 
; 1443 : 		|| locBootEncStatus.EncryptedAreaStart == -1)

  00066	8b 45 c2	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+50]
  00069	8b 4d c6	 mov	 ecx, DWORD PTR _locBootEncStatus$[ebp+54]
  0006c	8b d0		 mov	 edx, eax
  0006e	23 d1		 and	 edx, ecx
  00070	83 fa ff	 cmp	 edx, -1
  00073	0f 84 ec 00 00
	00		 je	 $LN5@UpdateSysE
  00079	8b 55 ba	 mov	 edx, DWORD PTR _locBootEncStatus$[ebp+42]
  0007c	8b 75 be	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+46]
  0007f	8b fa		 mov	 edi, edx
  00081	23 fe		 and	 edi, esi
  00083	83 ff ff	 cmp	 edi, -1
  00086	0f 84 d9 00 00
	00		 je	 $LN5@UpdateSysE

; 1448 : 	{
; 1449 : 		UpdateProgressBarProc (locBootEncStatus.EncryptedAreaEnd - locBootEncStatus.EncryptedAreaStart + 1);

  0008c	2b c2		 sub	 eax, edx
  0008e	1b ce		 sbb	 ecx, esi
  00090	83 c0 01	 add	 eax, 1
  00093	83 d1 00	 adc	 ecx, 0
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0009d	83 c4 08	 add	 esp, 8

; 1450 : 
; 1451 : 		if (locBootEncStatus.SetupInProgress)

  000a0	83 7d ce 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  000a4	0f 84 96 00 00
	00		 je	 $LN17@UpdateSysE

; 1452 : 		{
; 1453 : 			wchar_t tmpStr[100];
; 1454 : 
; 1455 : 			// Status
; 1456 : 
; 1457 : 			if (locBootEncStatus.TransformWaitingForIdle)

  000aa	83 7d d6 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+70], 0
  000ae	74 23		 je	 SHORT $LN2@UpdateSysE

; 1458 : 				wcscpy (tmpStr, GetString ("PROGRESS_STATUS_WAITING"));

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@
  000b5	e8 00 00 00 00	 call	 _GetString
  000ba	83 c4 04	 add	 esp, 4
  000bd	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132138[ebp]
$LL10@UpdateSysE:
  000c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c3	66 89 0a	 mov	 WORD PTR [edx], cx
  000c6	83 c0 02	 add	 eax, 2
  000c9	83 c2 02	 add	 edx, 2
  000cc	66 85 c9	 test	 cx, cx
  000cf	75 ef		 jne	 SHORT $LL10@UpdateSysE

; 1459 : 			else

  000d1	eb 33		 jmp	 SHORT $LN1@UpdateSysE
$LN2@UpdateSysE:

; 1460 : 				wcscpy (tmpStr, GetString (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING ? "PROGRESS_STATUS_DECRYPTING" : "PROGRESS_STATUS_ENCRYPTING"));

  000d3	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000dd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@
  000e2	74 05		 je	 SHORT $LN12@UpdateSysE
  000e4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
$LN12@UpdateSysE:
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _GetString
  000ef	83 c4 04	 add	 esp, 4
  000f2	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132138[ebp]
$LL13@UpdateSysE:
  000f5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000f8	66 89 0a	 mov	 WORD PTR [edx], cx
  000fb	83 c0 02	 add	 eax, 2
  000fe	83 c2 02	 add	 edx, 2
  00101	66 85 c9	 test	 cx, cx
  00104	75 ef		 jne	 SHORT $LL13@UpdateSysE
$LN1@UpdateSysE:

; 1461 : 
; 1462 : 			wcscat (tmpStr, L" ");

  00106	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132138[ebp]
  00109	83 c7 fe	 add	 edi, -2			; fffffffeH
  0010c	8d 64 24 00	 npad	 4
$LL21@UpdateSysE:
  00110	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00114	83 c7 02	 add	 edi, 2
  00117	66 85 c0	 test	 ax, ax
  0011a	75 f4		 jne	 SHORT $LL21@UpdateSysE

; 1463 : 
; 1464 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), tmpStr);

  0011c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00127	8d 4d 00	 lea	 ecx, DWORD PTR _tmpStr$132138[ebp]
  0012a	51		 push	 ecx
  0012b	68 01 04 00 00	 push	 1025			; 00000401H
  00130	52		 push	 edx
  00131	89 07		 mov	 DWORD PTR [edi], eax
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN17@UpdateSysE:

; 1465 : 		}
; 1466 : 	}
; 1467 : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b 8d c8 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	81 c5 cc 00 00
	00		 add	 ebp, 204		; 000000ccH
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN5@UpdateSysE:

; 1444 : 	{
; 1445 : 		UpdateProgressBarProc (0);

  00165	6a 00		 push	 0
  00167	6a 00		 push	 0
  00169	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0016e	83 c4 08	 add	 esp, 8

; 1446 : 	}
; 1447 : 	else

  00171	eb cd		 jmp	 SHORT $LN17@UpdateSysE
__catch$?UpdateSysEncProgressBar@@YAXXZ$0:

; 1436 : 	}
; 1437 : 	catch (...)
; 1438 : 	{
; 1439 : 		return;

  00173	b8 00 00 00 00	 mov	 eax, $LN17@UpdateSysE
  00178	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UpdateSysEncProgressBar@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a d4 00 00
	00		 mov	 ecx, DWORD PTR [edx+212]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateSysEncProgressBar@@YAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateSysEncProgressBar@@YAXXZ ENDP			; UpdateSysEncProgressBar
EXTRN	_InitProgressBar:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_InitSysEncProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_InitSysEncProgressBar$0
__unwindtable$_InitSysEncProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_InitSysEncProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_InitSysEncProgressBar$2
__ehfuncinfo$_InitSysEncProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_InitSysEncProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_InitSysEncProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _InitSysEncProgressBar
_TEXT	SEGMENT
$T141293 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_InitSysEncProgressBar PROC				; COMDAT

; 1470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_InitSysEncProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1471 : 	BootEncryptionStatus locBootEncStatus;
; 1472 : 
; 1473 : 	try
; 1474 : 	{
; 1475 : 		locBootEncStatus = BootEncObj->GetStatus();

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141293[ebp]
  0003a	50		 push	 eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00047	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0004c	8b f0		 mov	 esi, eax
  0004e	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00051	f3 a5		 rep movsd
  00053	66 a5		 movsw

; 1480 : 	}
; 1481 : 
; 1482 : 	if (locBootEncStatus.ConfiguredEncryptedAreaEnd == -1 
; 1483 : 		|| locBootEncStatus.ConfiguredEncryptedAreaStart == -1)

  00055	8b 55 b2	 mov	 edx, DWORD PTR _locBootEncStatus$[ebp+34]
  00058	8b 75 b6	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+38]
  0005b	8b ca		 mov	 ecx, edx
  0005d	23 ce		 and	 ecx, esi
  0005f	83 f9 ff	 cmp	 ecx, -1
  00062	74 67		 je	 SHORT $LN11@InitSysEnc
  00064	8b 45 aa	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+26]
  00067	23 45 ae	 and	 eax, DWORD PTR _locBootEncStatus$[ebp+30]
  0006a	83 f8 ff	 cmp	 eax, -1
  0006d	74 5c		 je	 SHORT $LN11@InitSysEnc

; 1484 : 		return;
; 1485 : 
; 1486 : 	InitProgressBar (locBootEncStatus.ConfiguredEncryptedAreaEnd 
; 1487 : 		- locBootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 1488 : 		(locBootEncStatus.EncryptedAreaEnd == locBootEncStatus.EncryptedAreaStart || locBootEncStatus.EncryptedAreaEnd == -1) ?
; 1489 : 		0 :	locBootEncStatus.EncryptedAreaEnd - locBootEncStatus.EncryptedAreaStart + 1,
; 1490 : 		SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING,
; 1491 : 		TRUE,
; 1492 : 		TRUE,
; 1493 : 		TRUE);

  0006f	8b 4d c2	 mov	 ecx, DWORD PTR _locBootEncStatus$[ebp+50]
  00072	8b 7d ba	 mov	 edi, DWORD PTR _locBootEncStatus$[ebp+42]
  00075	8b 45 c6	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+54]
  00078	3b cf		 cmp	 ecx, edi
  0007a	75 05		 jne	 SHORT $LN13@InitSysEnc
  0007c	3b 45 be	 cmp	 eax, DWORD PTR _locBootEncStatus$[ebp+46]
  0007f	74 18		 je	 SHORT $LN6@InitSysEnc
$LN13@InitSysEnc:
  00081	8b d9		 mov	 ebx, ecx
  00083	23 d8		 and	 ebx, eax
  00085	83 fb ff	 cmp	 ebx, -1
  00088	74 0f		 je	 SHORT $LN6@InitSysEnc
  0008a	2b cf		 sub	 ecx, edi
  0008c	1b 45 be	 sbb	 eax, DWORD PTR _locBootEncStatus$[ebp+46]
  0008f	83 c1 01	 add	 ecx, 1
  00092	83 d0 00	 adc	 eax, 0
  00095	8b f8		 mov	 edi, eax
  00097	eb 04		 jmp	 SHORT $LN7@InitSysEnc
$LN6@InitSysEnc:
  00099	33 c9		 xor	 ecx, ecx
  0009b	33 ff		 xor	 edi, edi
$LN7@InitSysEnc:
  0009d	33 c0		 xor	 eax, eax
  0009f	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000a9	6a 01		 push	 1
  000ab	0f 94 c0	 sete	 al
  000ae	2b 55 aa	 sub	 edx, DWORD PTR _locBootEncStatus$[ebp+26]
  000b1	6a 01		 push	 1
  000b3	1b 75 ae	 sbb	 esi, DWORD PTR _locBootEncStatus$[ebp+30]
  000b6	6a 01		 push	 1
  000b8	83 c2 01	 add	 edx, 1
  000bb	83 d6 00	 adc	 esi, 0
  000be	50		 push	 eax
  000bf	57		 push	 edi
  000c0	51		 push	 ecx
  000c1	56		 push	 esi
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _InitProgressBar
  000c8	83 c4 20	 add	 esp, 32			; 00000020H
$LN11@InitSysEnc:

; 1494 : }

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
__catch$_InitSysEncProgressBar$0:

; 1476 : 	}
; 1477 : 	catch (...)
; 1478 : 	{
; 1479 : 		return;

  000dd	b8 00 00 00 00	 mov	 eax, $LN11@InitSysEnc
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_InitSysEncProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_InitSysEncProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_InitSysEncProgressBar ENDP
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@	; `string'
PUBLIC	??_C@_06PPGAKMJI@RESUME?$AA@			; `string'
PUBLIC	??_C@_09PJBBBIIP@IDC_PAUSE?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ DB 'PROCESSED_PORTI'
	DB	'ON_100_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@ DB 'PROGRESS_STATUS_FINI'
	DB	'SHED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
CONST	SEGMENT
??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@ DB 'PROGRESS_STATUS_PAUSED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPGAKMJI@RESUME?$AA@
CONST	SEGMENT
??_C@_06PPGAKMJI@RESUME?$AA@ DB 'RESUME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
CONST	SEGMENT
??_C@_09PJBBBIIP@IDC_PAUSE?$AA@ DB 'IDC_PAUSE', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?UpdateSysEncControls@@YAXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateSysEncControls@@YAXXZ$0
__unwindtable$?UpdateSysEncControls@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?UpdateSysEncControls@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?UpdateSysEncControls@@YAXXZ$2
__ehfuncinfo$?UpdateSysEncControls@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateSysEncControls@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateSysEncControls@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?UpdateSysEncControls@@YAXXZ
_TEXT	SEGMENT
$T141314 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_tmpStr$132162 = 0					; size = 200
__$ArrayPad$ = 200					; size = 4
?UpdateSysEncControls@@YAXXZ PROC			; UpdateSysEncControls, COMDAT

; 1497 : {

  00000	55		 push	 ebp
  00001	8d ac 24 34 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-204]
  00008	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?UpdateSysEncControls@@YAXXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 c8 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1498 : 	BootEncryptionStatus locBootEncStatus;
; 1499 : 
; 1500 : 	try
; 1501 : 	{
; 1502 : 		locBootEncStatus = BootEncObj->GetStatus();

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00045	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141314[ebp]
  0004b	50		 push	 eax
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00058	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0005d	8b f0		 mov	 esi, eax
  0005f	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00062	f3 a5		 rep movsd
  00064	66 a5		 movsw

; 1507 : 	}
; 1508 : 
; 1509 : 	EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), 
; 1510 : 		!locBootEncStatus.SetupInProgress 
; 1511 : 		&& SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING);

  00066	8b 75 ce	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+62]
  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	85 f6		 test	 esi, esi
  00072	75 11		 jne	 SHORT $LN7@UpdateSysE@2
  00074	81 3d 00 00 00
	00 90 01 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 400 ; 00000190H
  0007e	75 05		 jne	 SHORT $LN7@UpdateSysE@2
  00080	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00083	eb 02		 jmp	 SHORT $LN8@UpdateSysE@2
$LN7@UpdateSysE@2:
  00085	33 c0		 xor	 eax, eax
$LN8@UpdateSysE@2:
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0008d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00093	50		 push	 eax
  00094	68 3d 04 00 00	 push	 1085			; 0000043dH
  00099	51		 push	 ecx
  0009a	ff d3		 call	 ebx
  0009c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000a2	50		 push	 eax
  000a3	ff d7		 call	 edi

; 1512 : 
; 1513 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_PAUSE),
; 1514 : 		GetString (locBootEncStatus.SetupInProgress ? "IDC_PAUSE" : "RESUME"));

  000a5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  000aa	85 f6		 test	 esi, esi
  000ac	75 05		 jne	 SHORT $LN10@UpdateSysE@2
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
$LN10@UpdateSysE@2:
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _GetString
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000bf	83 c4 04	 add	 esp, 4
  000c2	50		 push	 eax
  000c3	68 41 04 00 00	 push	 1089			; 00000441H
  000c8	52		 push	 edx
  000c9	ff d3		 call	 ebx
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1515 : 
; 1516 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !locBootEncStatus.SetupInProgress && !bFirstSysEncResumeDone);

  000d2	85 f6		 test	 esi, esi
  000d4	75 0d		 jne	 SHORT $LN11@UpdateSysE@2
  000d6	39 35 00 00 00
	00		 cmp	 DWORD PTR ?bFirstSysEncResumeDone@@3HA, esi ; bFirstSysEncResumeDone
  000dc	75 05		 jne	 SHORT $LN11@UpdateSysE@2
  000de	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000e1	eb 02		 jmp	 SHORT $LN12@UpdateSysE@2
$LN11@UpdateSysE@2:
  000e3	33 c0		 xor	 eax, eax
$LN12@UpdateSysE@2:
  000e5	50		 push	 eax
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000eb	68 10 04 00 00	 push	 1040			; 00000410H
  000f0	50		 push	 eax
  000f1	ff d3		 call	 ebx
  000f3	50		 push	 eax
  000f4	ff d7		 call	 edi

; 1517 : 
; 1518 : 	if (!locBootEncStatus.SetupInProgress)

  000f6	85 f6		 test	 esi, esi
  000f8	0f 85 f4 00 00
	00		 jne	 $LN20@UpdateSysE@2

; 1519 : 	{
; 1520 : 		wchar_t tmpStr[100];
; 1521 : 
; 1522 : 		wcscpy (tmpStr, GetString ((SysDriveOrPartitionFullyEncrypted (TRUE) || !locBootEncStatus.DriveMounted) ?
; 1523 : 			"PROGRESS_STATUS_FINISHED" : "PROGRESS_STATUS_PAUSED"));

  000fe	6a 01		 push	 1
  00100	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  00105	83 c4 04	 add	 esp, 4
  00108	85 c0		 test	 eax, eax
  0010a	75 0a		 jne	 SHORT $LN13@UpdateSysE@2
  0010c	39 45 96	 cmp	 DWORD PTR _locBootEncStatus$[ebp+6], eax
  0010f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
  00114	75 05		 jne	 SHORT $LN14@UpdateSysE@2
$LN13@UpdateSysE@2:
  00116	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
$LN14@UpdateSysE@2:
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _GetString
  00121	83 c4 04	 add	 esp, 4
  00124	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132162[ebp]
$LL15@UpdateSysE@2:
  00127	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0012a	66 89 0a	 mov	 WORD PTR [edx], cx
  0012d	83 c0 02	 add	 eax, 2
  00130	83 c2 02	 add	 edx, 2
  00133	66 85 c9	 test	 cx, cx
  00136	75 ef		 jne	 SHORT $LL15@UpdateSysE@2

; 1524 : 		wcscat (tmpStr, L" ");

  00138	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132162[ebp]
  0013b	83 c7 fe	 add	 edi, -2			; fffffffeH
  0013e	8b ff		 npad	 2
$LL24@UpdateSysE@2:
  00140	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00144	83 c7 02	 add	 edi, 2
  00147	66 85 c0	 test	 ax, ax
  0014a	75 f4		 jne	 SHORT $LL24@UpdateSysE@2

; 1525 : 
; 1526 : 		// Status
; 1527 : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), tmpStr);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00157	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132162[ebp]
  0015a	52		 push	 edx
  0015b	68 01 04 00 00	 push	 1025			; 00000401H
  00160	50		 push	 eax
  00161	89 0f		 mov	 DWORD PTR [edi], ecx
  00163	ff d3		 call	 ebx
  00165	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  0016b	50		 push	 eax
  0016c	ff d6		 call	 esi

; 1528 : 
; 1529 : 		if (SysDriveOrPartitionFullyEncrypted (TRUE) || SystemEncryptionStatus == SYSENC_STATUS_NONE)

  0016e	6a 01		 push	 1
  00170	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  00175	83 c4 04	 add	 esp, 4
  00178	85 c0		 test	 eax, eax
  0017a	75 08		 jne	 SHORT $LN1@UpdateSysE@2
  0017c	39 05 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, eax
  00182	75 54		 jne	 SHORT $LN2@UpdateSysE@2
$LN1@UpdateSysE@2:

; 1530 : 		{
; 1531 : 			wcscpy (tmpStr, GetString ("PROCESSED_PORTION_100_PERCENT"));

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
  00189	e8 00 00 00 00	 call	 _GetString
  0018e	83 c4 04	 add	 esp, 4
  00191	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132162[ebp]
$LL16@UpdateSysE@2:
  00194	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00197	66 89 0a	 mov	 WORD PTR [edx], cx
  0019a	83 c0 02	 add	 eax, 2
  0019d	83 c2 02	 add	 edx, 2
  001a0	66 85 c9	 test	 cx, cx
  001a3	75 ef		 jne	 SHORT $LL16@UpdateSysE@2

; 1532 : 			wcscat (tmpStr, L" ");

  001a5	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132162[ebp]
  001a8	83 c7 fe	 add	 edi, -2			; fffffffeH
  001ab	eb 03 8d 49 00	 npad	 5
$LL25@UpdateSysE@2:
  001b0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  001b4	83 c7 02	 add	 edi, 2
  001b7	66 85 c0	 test	 ax, ax
  001ba	75 f4		 jne	 SHORT $LL25@UpdateSysE@2

; 1533 : 
; 1534 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_BYTESWRITTEN), tmpStr);

  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  001c7	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132162[ebp]
  001ca	52		 push	 edx
  001cb	68 00 04 00 00	 push	 1024			; 00000400H
  001d0	50		 push	 eax
  001d1	89 0f		 mov	 DWORD PTR [edi], ecx
  001d3	ff d3		 call	 ebx
  001d5	50		 push	 eax
  001d6	ff d6		 call	 esi
$LN2@UpdateSysE@2:

; 1535 : 		}
; 1536 : 
; 1537 : 		SetWindowText (GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  001d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001de	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001e3	68 03 04 00 00	 push	 1027			; 00000403H
  001e8	51		 push	 ecx
  001e9	ff d3		 call	 ebx
  001eb	50		 push	 eax
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN20@UpdateSysE@2:

; 1538 : 	}
; 1539 : }

  001f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fc	59		 pop	 ecx
  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
  001ff	5b		 pop	 ebx
  00200	8b 8d c8 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00206	33 cd		 xor	 ecx, ebp
  00208	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020d	81 c5 cc 00 00
	00		 add	 ebp, 204		; 000000ccH
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
__catch$?UpdateSysEncControls@@YAXXZ$0:

; 1503 : 	}
; 1504 : 	catch (...)
; 1505 : 	{
; 1506 : 		return;

  00217	b8 00 00 00 00	 mov	 eax, $LN20@UpdateSysE@2
  0021c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UpdateSysEncControls@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a d4 00 00
	00		 mov	 ecx, DWORD PTR [edx+212]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateSysEncControls@@YAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateSysEncControls@@YAXXZ ENDP			; UpdateSysEncControls
PUBLIC	??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@ ; `string'
EXTRN	__imp__SetTimer@16:PROC
EXTRN	?AbortSetup@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortSetup
;	COMDAT ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@
CONST	SEGMENT
??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@ DB 'FAILED_TO_INTERR'
	DB	'UPT_SYSTEM_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncPause@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	060H
	DD	FLAT:__catch$?SysEncPause@@YAXXZ$2
__catchsym$?SysEncPause@@YAXXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	064H
	DD	FLAT:__catch$?SysEncPause@@YAXXZ$0
__unwindtable$?SysEncPause@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SysEncPause@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SysEncPause@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?SysEncPause@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?SysEncPause@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncPause@@YAXXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?SysEncPause@@YAXXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncPause@@YAXXZ
_TEXT	SEGMENT
$T141347 = -110						; size = 94
$T141346 = -110						; size = 94
$T141345 = -110						; size = 94
__$EHRec$ = -16						; size = 16
_locBootEncStatus$ = 0					; size = 94
_e$132186 = 96						; size = 4
_e$132176 = 100						; size = 4
?SysEncPause@@YAXXZ PROC				; SysEncPause, COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8d 6c 24 98	 lea	 ebp, DWORD PTR [esp-104]
  00005	83 ec 68	 sub	 esp, 104		; 00000068H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?SysEncPause@@YAXXZ
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 64	 sub	 esp, 100		; 00000064H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1543 : 	BootEncryptionStatus locBootEncStatus;
; 1544 : 
; 1545 : 	if (CreateSysEncMutex ())

  00030	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00035	85 c0		 test	 eax, eax
  00037	0f 84 90 01 00
	00		 je	 $LN9@SysEncPaus

; 1546 : 	{
; 1547 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00042	6a 00		 push	 0
  00044	68 41 04 00 00	 push	 1089			; 00000441H
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00050	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00056	50		 push	 eax
  00057	ff d3		 call	 ebx

; 1548 : 
; 1549 : 		try
; 1550 : 		{
; 1551 : 			locBootEncStatus = BootEncObj->GetStatus();

  00059	8d 4d 92	 lea	 ecx, DWORD PTR $T141345[ebp]
  0005c	51		 push	 ecx
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0006f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00074	8b f0		 mov	 esi, eax
  00076	8d 7d 00	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00079	f3 a5		 rep movsd
  0007b	66 a5		 movsw

; 1559 : 		}
; 1560 : 
; 1561 : 		if (!locBootEncStatus.SetupInProgress)

  0007d	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00081	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00088	75 1c		 jne	 SHORT $LN7@SysEncPaus

; 1562 : 		{
; 1563 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0008a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00090	6a 01		 push	 1
  00092	68 41 04 00 00	 push	 1089			; 00000441H
  00097	52		 push	 edx
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0009e	50		 push	 eax
  0009f	ff d3		 call	 ebx

; 1564 : 			return;

  000a1	e9 34 01 00 00	 jmp	 $LN1@SysEncPaus
$LN7@SysEncPaus:

; 1565 : 		}
; 1566 : 
; 1567 : 		WaitCursor ();

  000a6	e8 00 00 00 00	 call	 _WaitCursor

; 1568 : 
; 1569 : 		try
; 1570 : 		{
; 1571 : 			int attempts = SYSENC_PAUSE_RETRIES;
; 1572 : 
; 1573 : 			BootEncObj->AbortSetup ();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000b1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000b8	bb c8 00 00 00	 mov	 ebx, 200		; 000000c8H
  000bd	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup

; 1574 : 
; 1575 : 			locBootEncStatus = BootEncObj->GetStatus();

  000c2	8d 45 92	 lea	 eax, DWORD PTR $T141346[ebp]
  000c5	50		 push	 eax
$LN26@SysEncPaus:
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000cc	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000d1	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000d6	8d 7d 00	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  000d9	8b f0		 mov	 esi, eax
  000db	f3 a5		 rep movsd
  000dd	66 a5		 movsw

; 1576 : 
; 1577 : 			while (locBootEncStatus.SetupInProgress && attempts > 0)

  000df	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  000e3	74 13		 je	 SHORT $LN23@SysEncPaus
  000e5	85 db		 test	 ebx, ebx
  000e7	7e 1a		 jle	 SHORT $LN3@SysEncPaus

; 1578 : 			{
; 1579 : 				Sleep (SYSENC_PAUSE_RETRY_INTERVAL);

  000e9	6a 64		 push	 100			; 00000064H
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1580 : 				attempts--;
; 1581 : 				locBootEncStatus = BootEncObj->GetStatus();

  000f1	8d 4d 92	 lea	 ecx, DWORD PTR $T141347[ebp]
  000f4	4b		 dec	 ebx
  000f5	51		 push	 ecx

; 1582 : 			}

  000f6	eb ce		 jmp	 SHORT $LN26@SysEncPaus
$LN23@SysEncPaus:

; 1583 : 
; 1584 : 			if (!locBootEncStatus.SetupInProgress)
; 1585 : 				BootEncObj->CheckEncryptionSetupResult ();

  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000fe	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
$LN3@SysEncPaus:
  00103	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN19@SysEncPaus:

; 1592 : 
; 1593 : 		NormalCursor ();

  0010a	e8 00 00 00 00	 call	 _NormalCursor

; 1594 : 
; 1595 : 		if (locBootEncStatus.SetupInProgress)

  0010f	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00113	74 56		 je	 SHORT $LN2@SysEncPaus

; 1596 : 		{
; 1597 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0011a	6a 00		 push	 0
  0011c	6a 1e		 push	 30			; 0000001eH
  0011e	68 00 01 00 00	 push	 256			; 00000100H
  00123	50		 push	 eax
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1598 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0012a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00130	6a 01		 push	 1
  00132	68 41 04 00 00	 push	 1089			; 00000441H
  00137	51		 push	 ecx
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0013e	50		 push	 eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1599 : 			Error ("FAILED_TO_INTERRUPT_SYSTEM_ENCRYPTION");

  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@

; 1600 : 			return;

  0014a	e9 83 00 00 00	 jmp	 $LN27@SysEncPaus
__catch$?SysEncPause@@YAXXZ$2:

; 1586 : 
; 1587 : 		}
; 1588 : 		catch (Exception &e)
; 1589 : 		{
; 1590 : 			e.Show (MainDlg);

  0014f	8b 4d 60	 mov	 ecx, DWORD PTR _e$132186[ebp]
  00152	8b 11		 mov	 edx, DWORD PTR [ecx]
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00159	8b 12		 mov	 edx, DWORD PTR [edx]
  0015b	50		 push	 eax
  0015c	ff d2		 call	 edx

; 1591 : 		}

  0015e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00165	b8 00 00 00 00	 mov	 eax, $LN19@SysEncPaus
  0016a	c3		 ret	 0
$LN2@SysEncPaus:

; 1601 : 		}
; 1602 : 		
; 1603 : 		UpdateSysEncControls ();

  0016b	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1604 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00176	6a 01		 push	 1
  00178	68 41 04 00 00	 push	 1089			; 00000441H
  0017d	52		 push	 edx
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00184	50		 push	 eax
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1605 : 	}
; 1606 : 	else

  0018b	eb 4d		 jmp	 SHORT $LN1@SysEncPaus
__catch$?SysEncPause@@YAXXZ$0:

; 1552 : 		}
; 1553 : 		catch (Exception &e)
; 1554 : 		{
; 1555 : 			e.Show (MainDlg);

  0018d	8b 4d 64	 mov	 ecx, DWORD PTR _e$132176[ebp]
  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00198	8b 00		 mov	 eax, DWORD PTR [eax]
  0019a	52		 push	 edx
  0019b	ff d0		 call	 eax

; 1556 : 			Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  001a2	e8 00 00 00 00	 call	 _Error

; 1557 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  001a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001ad	83 c4 04	 add	 esp, 4
  001b0	6a 01		 push	 1
  001b2	68 41 04 00 00	 push	 1089			; 00000441H
  001b7	51		 push	 ecx
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001be	50		 push	 eax
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1558 : 			return;

  001c5	b8 00 00 00 00	 mov	 eax, $LN17@SysEncPaus
  001ca	c3		 ret	 0
$LN17@SysEncPaus:
  001cb	eb 0d		 jmp	 SHORT $LN1@SysEncPaus
$LN9@SysEncPaus:

; 1607 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
$LN27@SysEncPaus:
  001d2	e8 00 00 00 00	 call	 _Error
  001d7	83 c4 04	 add	 esp, 4
$LN1@SysEncPaus:

; 1608 : }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	83 c5 68	 add	 ebp, 104		; 00000068H
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncPause@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncPause@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncPause@@YAXXZ ENDP				; SysEncPause
PUBLIC	??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@ ; `string'
EXTRN	?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z:PROC ; CipherShed::BootEncryption::StartEncryption
EXTRN	__imp__SetThreadExecutionState@4:PROC
;	COMDAT ??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@
CONST	SEGMENT
??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@ DB 'FAILED_TO_RESUME'
	DB	'_SYSTEM_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncResume@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?SysEncResume@@YAXXZ$2
__catchsym$?SysEncResume@@YAXXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncResume@@YAXXZ$0
__unwindtable$?SysEncResume@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SysEncResume@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SysEncResume@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?SysEncResume@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?SysEncResume@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncResume@@YAXXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?SysEncResume@@YAXXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncResume@@YAXXZ
_TEXT	SEGMENT
$T141374 = -214						; size = 94
_locBootEncStatus$ = -120				; size = 94
_e$132209 = -24						; size = 4
_e$132197 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?SysEncResume@@YAXXZ PROC				; SysEncResume, COMDAT

; 1612 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncResume@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1613 : 	BootEncryptionStatus locBootEncStatus;
; 1614 : 
; 1615 : 	if (CreateSysEncMutex ())

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 34 02 00
	00		 je	 $LN11@SysEncResu

; 1616 : 	{
; 1617 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00040	6a 00		 push	 0
  00042	68 41 04 00 00	 push	 1089			; 00000441H
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0004e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00054	50		 push	 eax
  00055	ff d3		 call	 ebx

; 1618 : 
; 1619 : 		try
; 1620 : 		{
; 1621 : 			locBootEncStatus = BootEncObj->GetStatus();

  00057	8d 8d 2a ff ff
	ff		 lea	 ecx, DWORD PTR $T141374[ebp]
  0005d	51		 push	 ecx
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006b	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00070	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00075	8b f0		 mov	 esi, eax
  00077	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  0007a	f3 a5		 rep movsd
  0007c	66 a5		 movsw
  0007e	83 ce ff	 or	 esi, -1

; 1629 : 		}
; 1630 : 
; 1631 : 		if (locBootEncStatus.SetupInProgress)

  00081	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00085	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00088	74 58		 je	 SHORT $LN9@SysEncResu

; 1632 : 		{
; 1633 : 			// Prevent the OS from entering Sleep mode when idle
; 1634 : 			SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  0008a	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1635 : 
; 1636 : 			bSystemEncryptionInProgress = TRUE;

  00095	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress

; 1637 : 			UpdateSysEncControls ();

  0009f	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1638 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000aa	6a 00		 push	 0
  000ac	6a 1e		 push	 30			; 0000001eH
  000ae	68 00 01 00 00	 push	 256			; 00000100H
  000b3	52		 push	 edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1639 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  000bf	6a 01		 push	 1
  000c1	68 41 04 00 00	 push	 1089			; 00000441H
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000cd	50		 push	 eax
  000ce	ff d3		 call	 ebx

; 1694 : }

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
$LN9@SysEncResu:

; 1640 : 			return;
; 1641 : 		}
; 1642 : 
; 1643 : 		bSystemEncryptionInProgress = FALSE;

  000e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress

; 1644 : 		WaitCursor ();

  000ec	e8 00 00 00 00	 call	 _WaitCursor

; 1645 : 
; 1646 : 		try
; 1647 : 		{
; 1648 : 			switch (SystemEncryptionStatus)

  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000f6	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000fd	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00102	74 2e		 je	 SHORT $LN5@SysEncResu
  00104	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00109	75 48		 jne	 SHORT $LN6@SysEncResu

; 1653 : 				break;
; 1654 : 
; 1655 : 			case SYSENC_STATUS_DECRYPTING:
; 1656 : 
; 1657 : 				if (locBootEncStatus.DriveMounted)	// If the drive is not encrypted we will just deinstall

  0010b	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+6], 0
  0010f	74 42		 je	 SHORT $LN6@SysEncResu

; 1658 : 					BootEncObj->StartDecryption (DiscardUnreadableEncryptedSectors);	

  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  00117	51		 push	 ecx
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0011e	e8 00 00 00 00	 call	 ?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::StartDecryption

; 1659 : 
; 1660 : 				break;
; 1661 : 			}
; 1662 : 
; 1663 : 			bSystemEncryptionInProgress = TRUE;

  00123	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress
  0012d	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00130	eb 53		 jmp	 SHORT $LN21@SysEncResu
$LN5@SysEncResu:

; 1649 : 			{
; 1650 : 			case SYSENC_STATUS_ENCRYPTING:
; 1651 : 
; 1652 : 				BootEncObj->StartEncryption (nWipeMode, bTryToCorrectReadErrors ? true : false);	

  00132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  00138	85 d2		 test	 edx, edx
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00140	0f 95 c0	 setne	 al
  00143	0f b6 c8	 movzx	 ecx, al
  00146	51		 push	 ecx
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 ?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z ; CipherShed::BootEncryption::StartEncryption
$LN6@SysEncResu:

; 1659 : 
; 1660 : 				break;
; 1661 : 			}
; 1662 : 
; 1663 : 			bSystemEncryptionInProgress = TRUE;

  00153	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress
  0015d	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00160	eb 23		 jmp	 SHORT $LN21@SysEncResu
__catch$?SysEncResume@@YAXXZ$2:

; 1664 : 		}
; 1665 : 		catch (Exception &e)
; 1666 : 		{
; 1667 : 			e.Show (MainDlg);

  00162	8b 4d e8	 mov	 ecx, DWORD PTR _e$132209[ebp]
  00165	8b 01		 mov	 eax, DWORD PTR [ecx]
  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	52		 push	 edx
  00170	ff d0		 call	 eax

; 1668 : 		}

  00172	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00179	b8 00 00 00 00	 mov	 eax, $LN24@SysEncResu
  0017e	c3		 ret	 0
$LN24@SysEncResu:
  0017f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
$LN21@SysEncResu:

; 1669 : 
; 1670 : 		NormalCursor ();

  00185	e8 00 00 00 00	 call	 _NormalCursor

; 1671 : 
; 1672 : 		if (!bSystemEncryptionInProgress)

  0018a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  00191	75 2c		 jne	 SHORT $LN2@SysEncResu

; 1673 : 		{
; 1674 : 			// Allow the OS to enter Sleep mode when idle
; 1675 : 			SetThreadExecutionState (ES_CONTINUOUS);

  00193	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1676 : 
; 1677 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001a4	6a 01		 push	 1
  001a6	68 41 04 00 00	 push	 1089			; 00000441H
  001ab	51		 push	 ecx
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001b2	50		 push	 eax
  001b3	ff d3		 call	 ebx

; 1678 : 			Error ("FAILED_TO_RESUME_SYSTEM_ENCRYPTION");

  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@

; 1679 : 			return;

  001ba	e9 b5 00 00 00	 jmp	 $LN26@SysEncResu
$LN2@SysEncResu:

; 1680 : 		}
; 1681 : 
; 1682 : 		// Prevent the OS from entering Sleep mode when idle
; 1683 : 		SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  001bf	68 01 00 00 80	 push	 -2147483647		; 80000001H
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1684 : 
; 1685 : 		bFirstSysEncResumeDone = TRUE;

  001ca	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bFirstSysEncResumeDone@@3HA, 1 ; bFirstSysEncResumeDone

; 1686 : 		InitSysEncProgressBar ();

  001d4	e8 00 00 00 00	 call	 _InitSysEncProgressBar

; 1687 : 		UpdateSysEncProgressBar ();

  001d9	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 1688 : 		UpdateSysEncControls ();

  001de	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1689 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001e9	6a 01		 push	 1
  001eb	68 41 04 00 00	 push	 1089			; 00000441H
  001f0	52		 push	 edx
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001f7	50		 push	 eax
  001f8	ff d3		 call	 ebx

; 1690 : 		SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  001ff	6a 00		 push	 0
  00201	6a 1e		 push	 30			; 0000001eH
  00203	68 00 01 00 00	 push	 256			; 00000100H
  00208	50		 push	 eax
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1694 : }

  0020f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00212	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00219	59		 pop	 ecx
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
  0021c	5b		 pop	 ebx
  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c3		 ret	 0
__catch$?SysEncResume@@YAXXZ$0:

; 1622 : 		}
; 1623 : 		catch (Exception &e)
; 1624 : 		{
; 1625 : 			e.Show (MainDlg);

  00221	8b 4d ec	 mov	 ecx, DWORD PTR _e$132197[ebp]
  00224	8b 11		 mov	 edx, DWORD PTR [ecx]
  00226	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0022b	8b 12		 mov	 edx, DWORD PTR [edx]
  0022d	50		 push	 eax
  0022e	ff d2		 call	 edx

; 1626 : 			Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00235	e8 00 00 00 00	 call	 _Error

; 1627 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0023f	83 c4 04	 add	 esp, 4
  00242	6a 01		 push	 1
  00244	68 41 04 00 00	 push	 1089			; 00000441H
  00249	50		 push	 eax
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00250	50		 push	 eax
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1628 : 			return;

  00257	b8 00 00 00 00	 mov	 eax, $LN19@SysEncResu
  0025c	c3		 ret	 0
$LN19@SysEncResu:

; 1694 : }

  0025d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00260	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00267	59		 pop	 ecx
  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	5b		 pop	 ebx
  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c3		 ret	 0
$LN11@SysEncResu:

; 1691 : 	}
; 1692 : 	else
; 1693 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
$LN26@SysEncResu:
  00274	e8 00 00 00 00	 call	 _Error
  00279	83 c4 04	 add	 esp, 4

; 1694 : }

  0027c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0027f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00286	59		 pop	 ecx
  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	5b		 pop	 ebx
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncResume@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncResume@@YAXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncResume@@YAXXZ ENDP				; SysEncResume
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _NonSysInplaceEncPause
_TEXT	SEGMENT
_guiMsg$132241 = -28					; size = 28
_NonSysInplaceEncPause PROC				; COMDAT

; 1743 : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	55		 push	 ebp
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1744 : 	bVolTransformThreadCancel = TRUE;

  00006	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 1745 : 
; 1746 : 	WaitCursor ();

  00010	e8 00 00 00 00	 call	 _WaitCursor

; 1747 : 
; 1748 : 	int waitThreshold = 100;	// Do not block GUI events for more than 10 seconds. IMPORTANT: This prevents deadlocks when the thread calls us back e.g. to update GUI!

  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PeekMessageA@20
  0001b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DispatchMessageA@4
  00021	bd 64 00 00 00	 mov	 ebp, 100		; 00000064H
$LL7@NonSysInpl:

; 1749 : 	
; 1750 : 	while (bVolTransformThreadRunning || bVolTransformThreadToRun)

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0002b	85 c0		 test	 eax, eax
  0002d	75 0a		 jne	 SHORT $LN5@NonSysInpl
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00035	85 c9		 test	 ecx, ecx
  00037	74 56		 je	 SHORT $LN6@NonSysInpl
$LN5@NonSysInpl:

; 1751 : 	{
; 1752 : 		MSG guiMsg;
; 1753 : 
; 1754 : 		bVolTransformThreadCancel = TRUE;

  00039	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 1755 : 
; 1756 : 		if (waitThreshold <= 0)

  00043	85 ed		 test	 ebp, ebp
  00045	7f 3d		 jg	 SHORT $LN4@NonSysInpl

; 1757 : 		{
; 1758 : 			while (PeekMessage (&guiMsg, NULL, 0, 0, PM_REMOVE) != 0)

  00047	6a 01		 push	 1
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	8d 54 24 1c	 lea	 edx, DWORD PTR _guiMsg$132241[esp+56]
  00053	52		 push	 edx
  00054	ff d6		 call	 esi
  00056	85 c0		 test	 eax, eax
  00058	74 2b		 je	 SHORT $LN14@NonSysInpl
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL3@NonSysInpl:

; 1759 : 			{
; 1760 : 				DispatchMessage (&guiMsg);

  00060	8d 44 24 0c	 lea	 eax, DWORD PTR _guiMsg$132241[esp+40]
  00064	50		 push	 eax
  00065	ff d7		 call	 edi
  00067	6a 01		 push	 1
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	8d 4c 24 1c	 lea	 ecx, DWORD PTR _guiMsg$132241[esp+56]
  00073	51		 push	 ecx
  00074	ff d6		 call	 esi
  00076	85 c0		 test	 eax, eax
  00078	75 e6		 jne	 SHORT $LL3@NonSysInpl

; 1765 : 
; 1766 : 		Sleep (100);

  0007a	6a 64		 push	 100			; 00000064H
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1767 : 	}

  00082	eb a2		 jmp	 SHORT $LL7@NonSysInpl
$LN4@NonSysInpl:

; 1761 : 			}
; 1762 : 		}
; 1763 : 		else
; 1764 : 			waitThreshold--;

  00084	4d		 dec	 ebp
$LN14@NonSysInpl:

; 1765 : 
; 1766 : 		Sleep (100);

  00085	6a 64		 push	 100			; 00000064H
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1767 : 	}

  0008d	eb 97		 jmp	 SHORT $LL7@NonSysInpl
$LN6@NonSysInpl:
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp

; 1768 : }

  00092	83 c4 1c	 add	 esp, 28			; 0000001cH
  00095	c3		 ret	 0
_NonSysInplaceEncPause ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@ ; `string'
PUBLIC	??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ShowNonSysInPlaceEncUIStatus
;	COMDAT ??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@
CONST	SEGMENT
??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@ DB 'PROGRESS_STATUS_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@
CONST	SEGMENT
??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@ DB 'PROGRESS_STATUS_FI'
	DB	'NALIZING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@
CONST	SEGMENT
??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@ DB 'PROGRESS_STATUS_RESI'
	DB	'ZING', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@
CONST	SEGMENT
??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@ DB 'PROGRESS_STATUS_PRE'
	DB	'PARING', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ShowNonSysInPlaceEncUIStatus
_TEXT	SEGMENT
_nonSysInplaceEncUIStatus$ = -604			; size = 600
__$ArrayPad$ = -4					; size = 4
_ShowNonSysInPlaceEncUIStatus PROC			; COMDAT

; 1802 : {

  00000	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+604], eax

; 1803 : 	wchar_t nonSysInplaceEncUIStatus [300] = {0};

  00014	33 c0		 xor	 eax, eax
  00016	68 56 02 00 00	 push	 598			; 00000256H
  0001b	50		 push	 eax
  0001c	8d 4c 24 0a	 lea	 ecx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+614]
  00020	51		 push	 ecx
  00021	66 89 44 24 0c	 mov	 WORD PTR _nonSysInplaceEncUIStatus$[esp+616], ax
  00026	e8 00 00 00 00	 call	 _memset

; 1804 : 
; 1805 : 	switch (NonSysInplaceEncStatus)

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00030	48		 dec	 eax
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	83 f8 06	 cmp	 eax, 6
  00037	0f 87 14 01 00
	00		 ja	 $LN8@ShowNonSys
  0003d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@ShowNonSys[eax*4]
$LN7@ShowNonSys:

; 1806 : 	{
; 1807 : 	case NONSYS_INPLACE_ENC_STATUS_PAUSED:
; 1808 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_PAUSED"));

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
  00049	e8 00 00 00 00	 call	 _GetString
  0004e	83 c4 04	 add	 esp, 4
  00051	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL12@ShowNonSys:
  00054	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00057	66 89 0a	 mov	 WORD PTR [edx], cx
  0005a	83 c0 02	 add	 eax, 2
  0005d	83 c2 02	 add	 edx, 2
  00060	66 85 c9	 test	 cx, cx
  00063	75 ef		 jne	 SHORT $LL12@ShowNonSys

; 1809 : 		break;

  00065	e9 e7 00 00 00	 jmp	 $LN8@ShowNonSys
$LN6@ShowNonSys:

; 1810 : 	case NONSYS_INPLACE_ENC_STATUS_PREPARING:
; 1811 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_PREPARING"));

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@
  0006f	e8 00 00 00 00	 call	 _GetString
  00074	83 c4 04	 add	 esp, 4
  00077	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL13@ShowNonSys:
  00080	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00083	66 89 0a	 mov	 WORD PTR [edx], cx
  00086	83 c0 02	 add	 eax, 2
  00089	83 c2 02	 add	 edx, 2
  0008c	66 85 c9	 test	 cx, cx
  0008f	75 ef		 jne	 SHORT $LL13@ShowNonSys

; 1812 : 		break;

  00091	e9 bb 00 00 00	 jmp	 $LN8@ShowNonSys
$LN5@ShowNonSys:

; 1813 : 	case NONSYS_INPLACE_ENC_STATUS_RESIZING:
; 1814 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_RESIZING"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@
  0009b	e8 00 00 00 00	 call	 _GetString
  000a0	83 c4 04	 add	 esp, 4
  000a3	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL14@ShowNonSys:
  000a6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a9	66 89 0a	 mov	 WORD PTR [edx], cx
  000ac	83 c0 02	 add	 eax, 2
  000af	83 c2 02	 add	 edx, 2
  000b2	66 85 c9	 test	 cx, cx
  000b5	75 ef		 jne	 SHORT $LL14@ShowNonSys

; 1815 : 		break;

  000b7	e9 95 00 00 00	 jmp	 $LN8@ShowNonSys
$LN4@ShowNonSys:

; 1816 : 	case NONSYS_INPLACE_ENC_STATUS_ENCRYPTING:
; 1817 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_ENCRYPTING"));

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
  000c1	e8 00 00 00 00	 call	 _GetString
  000c6	83 c4 04	 add	 esp, 4
  000c9	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  000cc	8d 64 24 00	 npad	 4
$LL15@ShowNonSys:
  000d0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000d3	66 89 0a	 mov	 WORD PTR [edx], cx
  000d6	83 c0 02	 add	 eax, 2
  000d9	83 c2 02	 add	 edx, 2
  000dc	66 85 c9	 test	 cx, cx
  000df	75 ef		 jne	 SHORT $LL15@ShowNonSys

; 1818 : 		break;

  000e1	eb 6e		 jmp	 SHORT $LN8@ShowNonSys
$LN3@ShowNonSys:

; 1819 : 	case NONSYS_INPLACE_ENC_STATUS_FINALIZING:
; 1820 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_FINALIZING"));

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@
  000e8	e8 00 00 00 00	 call	 _GetString
  000ed	83 c4 04	 add	 esp, 4
  000f0	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL16@ShowNonSys:
  000f3	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000f6	66 89 0a	 mov	 WORD PTR [edx], cx
  000f9	83 c0 02	 add	 eax, 2
  000fc	83 c2 02	 add	 edx, 2
  000ff	66 85 c9	 test	 cx, cx
  00102	75 ef		 jne	 SHORT $LL16@ShowNonSys

; 1821 : 		break;

  00104	eb 4b		 jmp	 SHORT $LN8@ShowNonSys
$LN2@ShowNonSys:

; 1822 : 	case NONSYS_INPLACE_ENC_STATUS_FINISHED:
; 1823 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_FINISHED"));

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
  0010b	e8 00 00 00 00	 call	 _GetString
  00110	83 c4 04	 add	 esp, 4
  00113	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL17@ShowNonSys:
  00116	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00119	66 89 0a	 mov	 WORD PTR [edx], cx
  0011c	83 c0 02	 add	 eax, 2
  0011f	83 c2 02	 add	 edx, 2
  00122	66 85 c9	 test	 cx, cx
  00125	75 ef		 jne	 SHORT $LL17@ShowNonSys

; 1824 : 		break;

  00127	eb 28		 jmp	 SHORT $LN8@ShowNonSys
$LN1@ShowNonSys:

; 1825 : 	case NONSYS_INPLACE_ENC_STATUS_ERROR:
; 1826 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_ERROR"));

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@
  0012e	e8 00 00 00 00	 call	 _GetString
  00133	83 c4 04	 add	 esp, 4
  00136	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  00139	8d a4 24 00 00
	00 00		 npad	 7
$LL18@ShowNonSys:
  00140	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00143	66 89 0a	 mov	 WORD PTR [edx], cx
  00146	83 c0 02	 add	 eax, 2
  00149	83 c2 02	 add	 edx, 2
  0014c	66 85 c9	 test	 cx, cx
  0014f	75 ef		 jne	 SHORT $LL18@ShowNonSys
$LN8@ShowNonSys:
  00151	57		 push	 edi

; 1827 : 		break;
; 1828 : 	}
; 1829 : 
; 1830 : 	wcscat (nonSysInplaceEncUIStatus, L" ");

  00152	8d 7c 24 04	 lea	 edi, DWORD PTR _nonSysInplaceEncUIStatus$[esp+608]
  00156	83 c7 fe	 add	 edi, -2			; fffffffeH
  00159	8d a4 24 00 00
	00 00		 npad	 7
$LL26@ShowNonSys:
  00160	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00164	83 c7 02	 add	 edi, 2
  00167	66 85 c0	 test	 ax, ax
  0016a	75 f4		 jne	 SHORT $LL26@ShowNonSys

; 1831 : 
; 1832 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), nonSysInplaceEncUIStatus);

  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00172	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00178	8d 44 24 04	 lea	 eax, DWORD PTR _nonSysInplaceEncUIStatus$[esp+608]
  0017c	50		 push	 eax
  0017d	68 01 04 00 00	 push	 1025			; 00000401H
  00182	51		 push	 ecx
  00183	89 17		 mov	 DWORD PTR [edi], edx
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0018b	50		 push	 eax
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1833 : }

  00192	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+608]
  00199	5f		 pop	 edi
  0019a	33 cc		 xor	 ecx, esp
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	81 c4 5c 02 00
	00		 add	 esp, 604		; 0000025cH
  001a7	c3		 ret	 0
$LN27@ShowNonSys:
  001a8	00 00 00 00	 DD	 $LN6@ShowNonSys
  001ac	00 00 00 00	 DD	 $LN5@ShowNonSys
  001b0	00 00 00 00	 DD	 $LN4@ShowNonSys
  001b4	00 00 00 00	 DD	 $LN3@ShowNonSys
  001b8	00 00 00 00	 DD	 $LN7@ShowNonSys
  001bc	00 00 00 00	 DD	 $LN2@ShowNonSys
  001c0	00 00 00 00	 DD	 $LN1@ShowNonSys
_ShowNonSysInPlaceEncUIStatus ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _InitNonSysInplaceEncProgressBar
_TEXT	SEGMENT
_InitNonSysInplaceEncProgressBar PROC			; COMDAT

; 1934 : 	__int64 totalSize = NonSysInplaceEncTotalSize;

  00000	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncTotalSize+4
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncTotalSize

; 1935 : 
; 1936 : 	if (totalSize <= 0)

  0000b	85 c9		 test	 ecx, ecx
  0000d	7f 19		 jg	 SHORT $LN6@InitNonSys
  0000f	7c 04		 jl	 SHORT $LN5@InitNonSys
  00011	85 c0		 test	 eax, eax
  00013	77 13		 ja	 SHORT $LN6@InitNonSys
$LN5@InitNonSys:

; 1937 : 	{
; 1938 : 		if (nVolumeSize <= 0)

  00015	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  00020	85 c9		 test	 ecx, ecx
  00022	77 04		 ja	 SHORT $LN6@InitNonSys
  00024	85 c0		 test	 eax, eax
  00026	76 20		 jbe	 SHORT $LN3@InitNonSys
$LN6@InitNonSys:

; 1939 : 			return;
; 1940 : 
; 1941 : 		totalSize = nVolumeSize;
; 1942 : 	}
; 1943 : 
; 1944 : 	InitProgressBar (totalSize,
; 1945 : 		NonSysInplaceEncBytesDone,
; 1946 : 		FALSE,
; 1947 : 		TRUE,
; 1948 : 		TRUE,
; 1949 : 		TRUE);

  00028	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone+4
  0002e	6a 01		 push	 1
  00030	6a 01		 push	 1
  00032	6a 01		 push	 1
  00034	6a 00		 push	 0
  00036	52		 push	 edx
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _InitProgressBar
  00045	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@InitNonSys:

; 1950 : }

  00048	c3		 ret	 0
_InitNonSysInplaceEncProgressBar ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_05BFHEBJNP@?$CF02X?5?$AA@			; `string'
PUBLIC	??_C@_03NJNOMAJF@?5?4?5?$AA@			; `string'
PUBLIC	??_C@_04LAOFCJDB@?5?$CFc?5?$AA@			; `string'
PUBLIC	_DisplayRandPool
EXTRN	_sprintf:PROC
EXTRN	_RandpeekBytes:PROC
;	COMDAT ?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA
_BSS	SEGMENT
?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA DD 01H DUP (?) ; `DisplayRandPool'::`2'::bRandPoolDispAscii
_BSS	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
CONST	SEGMENT
??_C@_05BFHEBJNP@?$CF02X?5?$AA@ DB '%02X ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJNOMAJF@?5?4?5?$AA@
CONST	SEGMENT
??_C@_03NJNOMAJF@?5?4?5?$AA@ DB ' . ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
CONST	SEGMENT
??_C@_04LAOFCJDB@?5?$CFc?5?$AA@ DB ' %c ', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DisplayRandPool
_TEXT	SEGMENT
_hPoolDisplay$ = 8					; size = 4
_tmp$ = 12						; size = 4
_bShow$ = 12						; size = 4
_DisplayRandPool PROC					; COMDAT

; 1955 : 	unsigned char tmp[4];
; 1956 : 	unsigned char tmpByte;
; 1957 : 	int col, row;
; 1958 : 	static BOOL bRandPoolDispAscii = FALSE;
; 1959 : 
; 1960 : 	if (!bShow)

  00000	83 7c 24 08 00	 cmp	 DWORD PTR _bShow$[esp-4], 0
  00005	75 11		 jne	 SHORT $LN8@DisplayRan

; 1961 : 	{
; 1962 : 		SetWindowText (hPoolDisplay, "");

  00007	8b 44 24 04	 mov	 eax, DWORD PTR _hPoolDisplay$[esp-4]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1986 : 	}
; 1987 : }

  00017	c3		 ret	 0
$LN8@DisplayRan:

; 1963 : 		return;
; 1964 : 	}
; 1965 : 
; 1966 : 	RandpeekBytes (randPool, sizeof (randPool));

  00018	6a 78		 push	 120			; 00000078H
  0001a	68 00 00 00 00	 push	 OFFSET ?randPool@@3PAEA	; randPool
  0001f	e8 00 00 00 00	 call	 _RandpeekBytes
  00024	83 c4 08	 add	 esp, 8

; 1967 : 
; 1968 : 	if (memcmp (lastRandPool, randPool, sizeof(lastRandPool)) != 0)

  00027	b8 78 00 00 00	 mov	 eax, 120		; 00000078H
  0002c	33 c9		 xor	 ecx, ecx
  0002e	8b ff		 npad	 2
$LL16@DisplayRan:
  00030	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?lastRandPool@@3PAEA[ecx]
  00036	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ?randPool@@3PAEA[ecx]
  0003c	75 0c		 jne	 SHORT $LN18@DisplayRan
  0003e	83 e8 04	 sub	 eax, 4
  00041	83 c1 04	 add	 ecx, 4
  00044	83 f8 04	 cmp	 eax, 4
  00047	73 e7		 jae	 SHORT $LL16@DisplayRan

; 1986 : 	}
; 1987 : }

  00049	c3		 ret	 0
$LN18@DisplayRan:
  0004a	53		 push	 ebx
  0004b	55		 push	 ebp
  0004c	56		 push	 esi
  0004d	57		 push	 edi

; 1969 : 	{
; 1970 : 		outRandPoolDispBuffer[0] = 0;

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?outRandPoolDispBuffer@@3PAEA, 0
  00055	bd 00 00 00 00	 mov	 ebp, OFFSET ?randPool@@3PAEA ; randPool
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL30@DisplayRan:

; 1971 : 
; 1972 : 		for (row = 0; row < RANDPOOL_DISPLAY_ROWS; row++)
; 1973 : 		{
; 1974 : 			for (col = 0; col < RANDPOOL_DISPLAY_COLUMNS; col++)

  00060	33 db		 xor	 ebx, ebx
$LL31@DisplayRan:

; 1975 : 			{
; 1976 : 				tmpByte = randPool[row * RANDPOOL_DISPLAY_COLUMNS + col];
; 1977 : 
; 1978 : 				sprintf ((char *) tmp, bRandPoolDispAscii ? ((tmpByte >= 32 && tmpByte < 255 && tmpByte != '&') ? " %c " : " . ") : "%02X ", tmpByte);

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA, 0
  00069	8a 0c 2b	 mov	 cl, BYTE PTR [ebx+ebp]
  0006c	74 1b		 je	 SHORT $LN13@DisplayRan
  0006e	8a c1		 mov	 al, cl
  00070	2c 20		 sub	 al, 32			; 00000020H
  00072	3c de		 cmp	 al, 222			; 000000deH
  00074	77 0c		 ja	 SHORT $LN11@DisplayRan
  00076	80 f9 26	 cmp	 cl, 38			; 00000026H
  00079	74 07		 je	 SHORT $LN11@DisplayRan
  0007b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
  00080	eb 0c		 jmp	 SHORT $LN14@DisplayRan
$LN11@DisplayRan:
  00082	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NJNOMAJF@?5?4?5?$AA@
  00087	eb 05		 jmp	 SHORT $LN14@DisplayRan
$LN13@DisplayRan:
  00089	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
$LN14@DisplayRan:
  0008e	0f b6 c9	 movzx	 ecx, cl
  00091	51		 push	 ecx
  00092	50		 push	 eax
  00093	8d 54 24 20	 lea	 edx, DWORD PTR _tmp$[esp+20]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 _sprintf

; 1979 : 				strcat ((char *) outRandPoolDispBuffer, (char *) tmp);

  0009d	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+24]
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	8b c8		 mov	 ecx, eax
$LL27@DisplayRan:
  000a6	8a 10		 mov	 dl, BYTE PTR [eax]
  000a8	40		 inc	 eax
  000a9	84 d2		 test	 dl, dl
  000ab	75 f9		 jne	 SHORT $LL27@DisplayRan
  000ad	bf 00 00 00 00	 mov	 edi, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  000b2	2b c1		 sub	 eax, ecx
  000b4	8b f1		 mov	 esi, ecx
  000b6	4f		 dec	 edi
$LL28@DisplayRan:
  000b7	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000ba	47		 inc	 edi
  000bb	84 c9		 test	 cl, cl
  000bd	75 f8		 jne	 SHORT $LL28@DisplayRan
  000bf	8b c8		 mov	 ecx, eax
  000c1	c1 e9 02	 shr	 ecx, 2
  000c4	f3 a5		 rep movsd
  000c6	8b c8		 mov	 ecx, eax
  000c8	83 e1 03	 and	 ecx, 3
  000cb	43		 inc	 ebx
  000cc	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  000cf	f3 a4		 rep movsb
  000d1	7c 8f		 jl	 SHORT $LL31@DisplayRan

; 1980 : 			}
; 1981 : 			strcat ((char *) outRandPoolDispBuffer, "\n");

  000d3	bf 00 00 00 00	 mov	 edi, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  000d8	4f		 dec	 edi
  000d9	8d a4 24 00 00
	00 00		 npad	 7
$LL29@DisplayRan:
  000e0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000e3	47		 inc	 edi
  000e4	84 c0		 test	 al, al
  000e6	75 f8		 jne	 SHORT $LL29@DisplayRan
  000e8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
  000ee	83 c5 0f	 add	 ebp, 15			; 0000000fH
  000f1	81 fd 78 00 00
	00		 cmp	 ebp, OFFSET ?randPool@@3PAEA+120
  000f7	66 89 07	 mov	 WORD PTR [edi], ax
  000fa	0f 8c 60 ff ff
	ff		 jl	 $LL30@DisplayRan

; 1982 : 		}
; 1983 : 		SetWindowText (hPoolDisplay, (char *) outRandPoolDispBuffer);

  00100	8b 4c 24 14	 mov	 ecx, DWORD PTR _hPoolDisplay$[esp+12]
  00104	68 00 00 00 00	 push	 OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  00109	51		 push	 ecx
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1984 : 
; 1985 : 		memcpy (lastRandPool, randPool, sizeof(lastRandPool));

  00110	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00115	be 00 00 00 00	 mov	 esi, OFFSET ?randPool@@3PAEA ; randPool
  0011a	bf 00 00 00 00	 mov	 edi, OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0011f	f3 a5		 rep movsd
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5d		 pop	 ebp
  00124	5b		 pop	 ebx

; 1986 : 	}
; 1987 : }

  00125	c3		 ret	 0
_DisplayRandPool ENDP
_TEXT	ENDS
EXTRN	?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ:PROC ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
EXTRN	_IsHiddenOSRunning:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_UpdateWipeProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_UpdateWipeProgressBar$0
__unwindtable$_UpdateWipeProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_UpdateWipeProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_UpdateWipeProgressBar$2
__ehfuncinfo$_UpdateWipeProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_UpdateWipeProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_UpdateWipeProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _UpdateWipeProgressBar
_TEXT	SEGMENT
$T141452 = -142						; size = 94
$T141451 = -48						; size = 16
_decoySysPartitionWipeStatus$132386 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_UpdateWipeProgressBar PROC				; COMDAT

; 2117 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_UpdateWipeProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2118 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	74 6d		 je	 SHORT $LN11@UpdateWipe
  00037	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003c	85 c0		 test	 eax, eax
  0003e	74 64		 je	 SHORT $LN11@UpdateWipe

; 2119 : 	{
; 2120 : 		/* Decoy system partition wipe */
; 2121 : 
; 2122 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2123 : 
; 2124 : 		try
; 2125 : 		{
; 2126 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00040	8d 4d d0	 lea	 ecx, DWORD PTR $T141451[ebp]
  00043	51		 push	 ecx
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00051	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00056	8b 10		 mov	 edx, DWORD PTR [eax]
  00058	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005b	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  0005e	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132386[ebp], edx
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2127 : 			BootEncStatus = BootEncObj->GetStatus();

  00064	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141452[ebp]
  0006a	89 4d e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132386[ebp+4], ecx
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00073	50		 push	 eax
  00074	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132386[ebp+12], edx
  00077	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0007c	8b f0		 mov	 esi, eax

; 2132 : 		}
; 2133 : 
; 2134 : 		if (decoySysPartitionWipeStatus.WipedAreaEnd == -1)

  0007e	8b 45 ec	 mov	 eax, DWORD PTR _decoySysPartitionWipeStatus$132386[ebp+12]
  00081	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00086	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0008b	f3 a5		 rep movsd
  0008d	8b cb		 mov	 ecx, ebx
  0008f	23 c8		 and	 ecx, eax
  00091	66 a5		 movsw
  00093	83 f9 ff	 cmp	 ecx, -1
  00096	75 1e		 jne	 SHORT $LN3@UpdateWipe

; 2135 : 			UpdateProgressBarProc (0);

  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
$LN14@UpdateWipe:
  0009c	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  000a1	83 c4 08	 add	 esp, 8
$LN11@UpdateWipe:

; 2140 : 	{
; 2141 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2142 : 	}
; 2143 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN3@UpdateWipe:

; 2136 : 		else
; 2137 : 			UpdateProgressBarProc (decoySysPartitionWipeStatus.WipedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1);

  000b6	2b 1d 1a 00 00
	00		 sub	 ebx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000bc	1b 05 1e 00 00
	00		 sbb	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000c2	83 c3 01	 add	 ebx, 1
  000c5	83 d0 00	 adc	 eax, 0
  000c8	50		 push	 eax
  000c9	53		 push	 ebx

; 2138 : 	}
; 2139 : 	else

  000ca	eb d0		 jmp	 SHORT $LN14@UpdateWipe
__catch$_UpdateWipeProgressBar$0:

; 2128 : 		}
; 2129 : 		catch (...)
; 2130 : 		{
; 2131 : 			return;

  000cc	b8 00 00 00 00	 mov	 eax, $LN11@UpdateWipe
  000d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_UpdateWipeProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_UpdateWipeProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_UpdateWipeProgressBar ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_InitWipeProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_InitWipeProgressBar$0
__unwindtable$_InitWipeProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_InitWipeProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_InitWipeProgressBar$2
__ehfuncinfo$_InitWipeProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_InitWipeProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_InitWipeProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _InitWipeProgressBar
_TEXT	SEGMENT
$T141469 = -142						; size = 94
$T141468 = -48						; size = 16
_decoySysPartitionWipeStatus$132397 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_InitWipeProgressBar PROC				; COMDAT

; 2147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_InitWipeProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2148 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	0f 84 cb 00 00
	00		 je	 $LN13@InitWipePr
  0003b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00040	85 c0		 test	 eax, eax
  00042	0f 84 be 00 00
	00		 je	 $LN13@InitWipePr

; 2149 : 	{
; 2150 : 		/* Decoy system partition wipe */
; 2151 : 
; 2152 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2153 : 
; 2154 : 		try
; 2155 : 		{
; 2156 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00048	8d 4d d0	 lea	 ecx, DWORD PTR $T141468[ebp]
  0004b	51		 push	 ecx
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00059	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00066	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132397[ebp], edx
  00069	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2157 : 			BootEncStatus = BootEncObj->GetStatus();

  0006c	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141469[ebp]
  00072	89 4d e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132397[ebp+4], ecx
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0007b	50		 push	 eax
  0007c	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132397[ebp+12], edx
  0007f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00084	8b f0		 mov	 esi, eax
  00086	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0008b	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00090	f3 a5		 rep movsd
  00092	66 a5		 movsw

; 2162 : 		}
; 2163 : 
; 2164 : 		if (BootEncStatus.ConfiguredEncryptedAreaEnd == -1 
; 2165 : 			|| BootEncStatus.ConfiguredEncryptedAreaStart == -1)

  00094	8b 0d 22 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0009a	8b 15 26 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  000a0	8b c1		 mov	 eax, ecx
  000a2	23 c2		 and	 eax, edx
  000a4	83 f8 ff	 cmp	 eax, -1
  000a7	74 5d		 je	 SHORT $LN13@InitWipePr
  000a9	8b 35 1a 00 00
	00		 mov	 esi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000af	8b 3d 1e 00 00
	00		 mov	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000b5	8b c6		 mov	 eax, esi
  000b7	23 c7		 and	 eax, edi
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	74 48		 je	 SHORT $LN13@InitWipePr

; 2166 : 			return;
; 2167 : 
; 2168 : 		InitProgressBar (BootEncStatus.ConfiguredEncryptedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 2169 : 			(decoySysPartitionWipeStatus.WipedAreaEnd == BootEncStatus.ConfiguredEncryptedAreaStart || decoySysPartitionWipeStatus.WipedAreaEnd == -1) ?
; 2170 : 			0 :	decoySysPartitionWipeStatus.WipedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 2171 : 			FALSE,
; 2172 : 			TRUE,
; 2173 : 			FALSE,
; 2174 : 			TRUE);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _decoySysPartitionWipeStatus$132397[ebp+12]
  000c1	3b de		 cmp	 ebx, esi
  000c3	75 04		 jne	 SHORT $LN15@InitWipePr
  000c5	3b c7		 cmp	 eax, edi
  000c7	74 1b		 je	 SHORT $LN8@InitWipePr
$LN15@InitWipePr:
  000c9	8b fb		 mov	 edi, ebx
  000cb	23 f8		 and	 edi, eax
  000cd	83 ff ff	 cmp	 edi, -1
  000d0	8b 3d 1e 00 00
	00		 mov	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000d6	74 0c		 je	 SHORT $LN8@InitWipePr
  000d8	2b de		 sub	 ebx, esi
  000da	1b c7		 sbb	 eax, edi
  000dc	83 c3 01	 add	 ebx, 1
  000df	83 d0 00	 adc	 eax, 0
  000e2	eb 04		 jmp	 SHORT $LN9@InitWipePr
$LN8@InitWipePr:
  000e4	33 db		 xor	 ebx, ebx
  000e6	33 c0		 xor	 eax, eax
$LN9@InitWipePr:
  000e8	6a 01		 push	 1
  000ea	6a 00		 push	 0
  000ec	6a 01		 push	 1
  000ee	6a 00		 push	 0
  000f0	2b ce		 sub	 ecx, esi
  000f2	50		 push	 eax
  000f3	1b d7		 sbb	 edx, edi
  000f5	83 c1 01	 add	 ecx, 1
  000f8	53		 push	 ebx
  000f9	83 d2 00	 adc	 edx, 0
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 _InitProgressBar
  00103	83 c4 20	 add	 esp, 32			; 00000020H
$LN13@InitWipePr:

; 2175 : 	}
; 2176 : 	else
; 2177 : 	{
; 2178 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2179 : 	}
; 2180 : }

  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
__catch$_InitWipeProgressBar$0:

; 2158 : 		}
; 2159 : 		catch (...)
; 2160 : 		{
; 2161 : 			return;

  00118	b8 00 00 00 00	 mov	 eax, $LN13@InitWipePr
  0011d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_InitWipeProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_InitWipeProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_InitWipeProgressBar ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_UpdateWipeControls$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_UpdateWipeControls$0
__unwindtable$_UpdateWipeControls DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_UpdateWipeControls DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_UpdateWipeControls$2
__ehfuncinfo$_UpdateWipeControls DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_UpdateWipeControls
	DD	01H
	DD	FLAT:__tryblocktable$_UpdateWipeControls
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _UpdateWipeControls
_TEXT	SEGMENT
$T141490 = -142						; size = 94
$T141489 = -48						; size = 16
_decoySysPartitionWipeStatus$132408 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_UpdateWipeControls PROC				; COMDAT

; 2184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_UpdateWipeControls
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2185 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	0f 84 98 00 00
	00		 je	 $LN4@UpdateWipe@2
  0003b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00040	85 c0		 test	 eax, eax
  00042	0f 84 8b 00 00
	00		 je	 $LN4@UpdateWipe@2

; 2186 : 	{
; 2187 : 		/* Decoy system partition wipe */
; 2188 : 
; 2189 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2190 : 
; 2191 : 		try
; 2192 : 		{
; 2193 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00048	8d 4d d0	 lea	 ecx, DWORD PTR $T141489[ebp]
  0004b	51		 push	 ecx
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00059	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0005e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00061	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00064	8b 18		 mov	 ebx, DWORD PTR [eax]
  00066	89 55 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132408[ebp+4], edx
  00069	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2194 : 			BootEncStatus = BootEncObj->GetStatus();

  0006c	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141490[ebp]
  00072	89 4d e8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132408[ebp+8], ecx
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0007b	50		 push	 eax
  0007c	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132408[ebp+12], edx
  0007f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 2199 : 		}
; 2200 : 
; 2201 : 		EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !decoySysPartitionWipeStatus.WipeInProgress);

  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0008a	8b f0		 mov	 esi, eax
  0008c	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00091	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00096	f3 a5		 rep movsd
  00098	33 c9		 xor	 ecx, ecx
  0009a	85 db		 test	 ebx, ebx
  0009c	0f 94 c1	 sete	 cl
  0009f	66 a5		 movsw
  000a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000a7	51		 push	 ecx
  000a8	68 10 04 00 00	 push	 1040			; 00000410H
  000ad	52		 push	 edx
  000ae	ff d6		 call	 esi
  000b0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000b6	50		 push	 eax
  000b7	ff d7		 call	 edi

; 2202 : 	}
; 2203 : 	else

  000b9	eb 5e		 jmp	 SHORT $LN1@UpdateWipe@2
__catch$_UpdateWipeControls$0:

; 2195 : 		}
; 2196 : 		catch (...)
; 2197 : 		{
; 2198 : 			return;

  000bb	b8 00 00 00 00	 mov	 eax, $LN10@UpdateWipe@2
  000c0	c3		 ret	 0
$LN10@UpdateWipe@2:

; 2219 : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN4@UpdateWipe@2:

; 2204 : 	{
; 2205 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2206 : 
; 2207 : 		EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), bDeviceWipeInProgress);

  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000de	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000e4	50		 push	 eax
  000e5	68 10 04 00 00	 push	 1040			; 00000410H
  000ea	51		 push	 ecx
  000eb	ff d6		 call	 esi
  000ed	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000f3	50		 push	 eax
  000f4	ff d7		 call	 edi

; 2208 : 
; 2209 : 		if (!bDeviceWipeInProgress)

  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  000fd	75 1a		 jne	 SHORT $LN1@UpdateWipe@2

; 2210 : 		{
; 2211 : 			SetWindowText (GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  0010a	68 03 04 00 00	 push	 1027			; 00000403H
  0010f	52		 push	 edx
  00110	ff d6		 call	 esi
  00112	50		 push	 eax
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN1@UpdateWipe@2:

; 2212 : 		}
; 2213 : 	}
; 2214 : 
; 2215 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), bDeviceWipeInProgress);

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00124	50		 push	 eax
  00125	68 f8 03 00 00	 push	 1016			; 000003f8H
  0012a	51		 push	 ecx
  0012b	ff d6		 call	 esi
  0012d	50		 push	 eax
  0012e	ff d7		 call	 edi

; 2216 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), !bDeviceWipeInProgress);

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00135	33 d2		 xor	 edx, edx
  00137	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, edx ; bDeviceWipeInProgress
  0013d	0f 94 c2	 sete	 dl
  00140	52		 push	 edx
  00141	68 11 04 00 00	 push	 1041			; 00000411H
  00146	50		 push	 eax
  00147	ff d6		 call	 esi
  00149	50		 push	 eax
  0014a	ff d7		 call	 edi

; 2217 : 
; 2218 : 	bConfirmQuit = bDeviceWipeInProgress;

  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  00152	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bConfirmQuit@@3HC, ecx ; bConfirmQuit

; 2219 : }

  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_UpdateWipeControls:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_UpdateWipeControls
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_UpdateWipeControls ENDP
PUBLIC	??_R0?AUTimeOut@CipherShed@@@8			; CipherShed::TimeOut `RTTI Type Descriptor'
EXTRN	_exit:PROC
EXTRN	?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::ProbeRealSystemDriveSize
;	COMDAT ??_R0?AUTimeOut@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUTimeOut@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::TimeOut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUTimeOut@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_sysEncDriveAnalysisThread DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_sysEncDriveAnalysisThread DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$_sysEncDriveAnalysisThread$3
__catchsym$_sysEncDriveAnalysisThread$3 DD 08H
	DD	FLAT:??_R0?AUTimeOut@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$_sysEncDriveAnalysisThread$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$_sysEncDriveAnalysisThread$1
__ehfuncinfo$_sysEncDriveAnalysisThread DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_sysEncDriveAnalysisThread
	DD	01H
	DD	FLAT:__tryblocktable$_sysEncDriveAnalysisThread
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _sysEncDriveAnalysisThread
_TEXT	SEGMENT
_e$132420 = -28						; size = 4
_bSuccess$141519 = -24					; size = 4
_bSuccess$141515 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlgArg$ = 8					; size = 4
_sysEncDriveAnalysisThread PROC				; COMDAT

; 2224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_sysEncDriveAnalysisThread
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2225 : 	// Mark the detection process as 'in progress'
; 2226 : 	HiddenSectorDetectionStatus = 1;
; 2227 : 	SaveSettings (NULL);

  0002b	33 f6		 xor	 esi, esi
  0002d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _HiddenSectorDetectionStatus, 1
  00037	e8 00 00 00 00	 call	 _SaveSettings

; 2228 : 	BroadcastSysEncCfgUpdate ();

  0003c	8d 45 ec	 lea	 eax, DWORD PTR _bSuccess$141515[ebp]
  0003f	50		 push	 eax
  00040	33 db		 xor	 ebx, ebx
  00042	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  00047	89 5d ec	 mov	 DWORD PTR _bSuccess$141515[ebp], ebx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 2229 : 
; 2230 : 	try
; 2231 : 	{
; 2232 : 		BootEncObj->ProbeRealSystemDriveSize ();

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00056	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00059	e8 00 00 00 00	 call	 ?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::ProbeRealSystemDriveSize

; 2233 : 		bSysEncDriveAnalysisTimeOutOccurred = FALSE;

  0005e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC, ebx ; bSysEncDriveAnalysisTimeOutOccurred
  00064	eb 12		 jmp	 SHORT $LN8@sysEncDriv
__catch$_sysEncDriveAnalysisThread$0:

; 2234 : 	}
; 2235 : 	catch (TimeOut &)
; 2236 : 	{
; 2237 : 		bSysEncDriveAnalysisTimeOutOccurred = TRUE;

  00066	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC, 1 ; bSysEncDriveAnalysisTimeOutOccurred

; 2238 : 	}

  00070	b8 00 00 00 00	 mov	 eax, $LN17@sysEncDriv
  00075	c3		 ret	 0
$LN17@sysEncDriv:
  00076	33 db		 xor	 ebx, ebx
$LN8@sysEncDriv:

; 2249 : 	}
; 2250 : 
; 2251 : 	// Mark the detection process as completed
; 2252 : 	HiddenSectorDetectionStatus = 0;
; 2253 : 	SaveSettings (NULL);

  00078	33 f6		 xor	 esi, esi
  0007a	89 1d 00 00 00
	00		 mov	 DWORD PTR _HiddenSectorDetectionStatus, ebx
  00080	e8 00 00 00 00	 call	 _SaveSettings

; 2254 : 	BroadcastSysEncCfgUpdate ();

  00085	8d 4d e8	 lea	 ecx, DWORD PTR _bSuccess$141519[ebp]
  00088	51		 push	 ecx
  00089	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  0008e	89 5d e8	 mov	 DWORD PTR _bSuccess$141519[ebp], ebx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 2255 : 
; 2256 : 	// This artificial delay prevents user confusion on systems where the analysis ends almost instantly
; 2257 : 	Sleep (3000);

  00097	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2258 : 
; 2259 : 	bSysEncDriveAnalysisInProgress = FALSE;

  000a2	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC, ebx ; bSysEncDriveAnalysisInProgress

; 2260 : }

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b2	59		 pop	 ecx
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
__catch$_sysEncDriveAnalysisThread$1:

; 2239 : 	catch (Exception &e)
; 2240 : 	{
; 2241 : 		// There was a problem but the system did not freeze. Mark the detection process as completed.
; 2242 : 		HiddenSectorDetectionStatus = 0;

  000ba	33 db		 xor	 ebx, ebx

; 2243 : 		SaveSettings (NULL);

  000bc	33 f6		 xor	 esi, esi
  000be	89 1d 00 00 00
	00		 mov	 DWORD PTR _HiddenSectorDetectionStatus, ebx
  000c4	e8 00 00 00 00	 call	 _SaveSettings

; 2244 : 		BroadcastSysEncCfgUpdate ();

  000c9	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate

; 2245 : 
; 2246 : 		e.Show (NULL);

  000ce	8b 4d e4	 mov	 ecx, DWORD PTR _e$132420[ebp]
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	53		 push	 ebx
  000d6	ff d0		 call	 eax

; 2247 : 		EndMainDlg (MainDlg);

  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  000de	e8 00 00 00 00	 call	 _EndMainDlg

; 2248 : 		exit(0);

  000e3	53		 push	 ebx
  000e4	e8 00 00 00 00	 call	 _exit
$LN19@sysEncDriv:
  000e9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_sysEncDriveAnalysisThread:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_sysEncDriveAnalysisThread
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_sysEncDriveAnalysisThread ENDP
PUBLIC	??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@		; `string'
PUBLIC	??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@		; `string'
PUBLIC	??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@		; `string'
PUBLIC	??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@		; `string'
PUBLIC	??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@		; `string'
PUBLIC	??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@		; `string'
PUBLIC	??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@		; `string'
PUBLIC	??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@	; `string'
PUBLIC	??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@	; `string'
PUBLIC	??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@	; `string'
PUBLIC	??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@	; `string'
PUBLIC	??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_PrintFreeSpace
EXTRN	__snwprintf:PROC
EXTRN	__fltused:DWORD
EXTRN	__allrem:PROC
;	COMDAT ??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@
CONST	SEGMENT
??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@ DB 'DISK_FREE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@
CONST	SEGMENT
??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@ DB 'DEVICE_FREE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@
CONST	SEGMENT
??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@ DB 'DISK_FREE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@
CONST	SEGMENT
??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@ DB 'DEVICE_FREE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@
CONST	SEGMENT
??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@ DB 'DISK_FREE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@
CONST	SEGMENT
??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@ DB 'DEVICE_FREE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@ DB 'DISK_FREE_BYTES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@ DB 'DEVICE_FREE_BYTES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@
CONST	SEGMENT
??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@ DB 'MAX_HIDVOL_SIZE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@
CONST	SEGMENT
??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@ DB 'MAX_HIDVOL_SIZE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@
CONST	SEGMENT
??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@ DB 'MAX_HIDVOL_SIZE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@ DB 'MAX_HIDVOL_SIZE_BYTES', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PrintFreeSpace
_TEXT	SEGMENT
_nMultiplier$ = -520					; size = 4
_szTmp2$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_hwndTextBox$ = 8					; size = 4
_lpszDrive$ = 12					; size = 4
_lDiskFree$ = 16					; size = 4
_PrintFreeSpace PROC					; COMDAT

; 2855 : {

  00000	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+520], eax
  00014	8b 94 24 10 02
	00 00		 mov	 edx, DWORD PTR _lpszDrive$[esp+516]
  0001b	53		 push	 ebx
  0001c	8b 9c 24 10 02
	00 00		 mov	 ebx, DWORD PTR _hwndTextBox$[esp+520]
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	8b b4 24 20 02
	00 00		 mov	 esi, DWORD PTR _lDiskFree$[esp+528]

; 2856 : 	char *nResourceString;
; 2857 : 	int nMultiplier;
; 2858 : 	wchar_t szTmp2[256];
; 2859 : 
; 2860 : 	if (lDiskFree->QuadPart < BYTES_PER_KB)

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	57		 push	 edi
  00032	85 c0		 test	 eax, eax
  00034	0f 8f 9d 00 00
	00		 jg	 $LN27@PrintFreeS
  0003a	7c 08		 jl	 SHORT $LN37@PrintFreeS
  0003c	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00042	73 2e		 jae	 SHORT $LN41@PrintFreeS
$LN37@PrintFreeS:

; 2865 : 		nMultiplier = BYTES_PER_MB;
; 2866 : 	else
; 2867 : 		nMultiplier = BYTES_PER_GB;
; 2868 : 
; 2869 : 	if (nMultiplier == 1)
; 2870 : 	{
; 2871 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00049	bd 01 00 00 00	 mov	 ebp, 1
  0004e	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  00052	85 c0		 test	 eax, eax
  00054	0f 84 a0 00 00
	00		 je	 $LN24@PrintFreeS
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00060	85 c9		 test	 ecx, ecx
  00062	0f 85 92 00 00
	00		 jne	 $LN24@PrintFreeS

; 2872 : 			nResourceString = "MAX_HIDVOL_SIZE_BYTES";

  00068	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@
  0006d	e9 e0 00 00 00	 jmp	 $LN4@PrintFreeS
$LN41@PrintFreeS:

; 2861 : 		nMultiplier = 1;
; 2862 : 	else if (lDiskFree->QuadPart < BYTES_PER_MB)

  00072	85 c0		 test	 eax, eax
  00074	7f 61		 jg	 SHORT $LN27@PrintFreeS
  00076	7c 08		 jl	 SHORT $LN38@PrintFreeS
  00078	81 f9 00 00 10
	00		 cmp	 ecx, 1048576		; 00100000H
  0007e	73 26		 jae	 SHORT $LN42@PrintFreeS
$LN38@PrintFreeS:

; 2877 : 	}
; 2878 : 	else if (nMultiplier == BYTES_PER_KB)
; 2879 : 	{
; 2880 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00085	bd 00 04 00 00	 mov	 ebp, 1024		; 00000400H
  0008a	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  0008e	85 c0		 test	 eax, eax
  00090	74 7f		 je	 SHORT $LN18@PrintFreeS
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00098	85 c9		 test	 ecx, ecx
  0009a	75 75		 jne	 SHORT $LN18@PrintFreeS

; 2881 : 			nResourceString = "MAX_HIDVOL_SIZE_KB";

  0009c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@
  000a1	e9 ac 00 00 00	 jmp	 $LN4@PrintFreeS
$LN42@PrintFreeS:

; 2863 : 		nMultiplier = BYTES_PER_KB;
; 2864 : 	else if (lDiskFree->QuadPart < BYTES_PER_GB)

  000a6	85 c0		 test	 eax, eax
  000a8	7f 2d		 jg	 SHORT $LN27@PrintFreeS
  000aa	7c 08		 jl	 SHORT $LN39@PrintFreeS
  000ac	81 f9 00 00 00
	40		 cmp	 ecx, 1073741824		; 40000000H
  000b2	73 23		 jae	 SHORT $LN27@PrintFreeS
$LN39@PrintFreeS:

; 2886 : 	}
; 2887 : 	else if (nMultiplier == BYTES_PER_MB)
; 2888 : 	{
; 2889 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000b9	bd 00 00 10 00	 mov	 ebp, 1048576		; 00100000H
  000be	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  000c2	85 c0		 test	 eax, eax
  000c4	74 62		 je	 SHORT $LN12@PrintFreeS
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  000cc	85 c9		 test	 ecx, ecx
  000ce	75 58		 jne	 SHORT $LN12@PrintFreeS

; 2890 : 			nResourceString = "MAX_HIDVOL_SIZE_MB";

  000d0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@
  000d5	eb 7b		 jmp	 SHORT $LN4@PrintFreeS
$LN27@PrintFreeS:

; 2897 : 	{
; 2898 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000dc	bd 00 00 00 40	 mov	 ebp, 1073741824		; 40000000H
  000e1	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  000e5	85 c0		 test	 eax, eax
  000e7	74 56		 je	 SHORT $LN7@PrintFreeS
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  000ef	85 c9		 test	 ecx, ecx
  000f1	75 4c		 jne	 SHORT $LN7@PrintFreeS

; 2899 : 			nResourceString = "MAX_HIDVOL_SIZE_GB";

  000f3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@
  000f8	eb 58		 jmp	 SHORT $LN4@PrintFreeS
$LN24@PrintFreeS:

; 2873 : 		else if (bDevice)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00101	74 07		 je	 SHORT $LN22@PrintFreeS

; 2874 : 			nResourceString = "DEVICE_FREE_BYTES";

  00103	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@

; 2875 : 		else

  00108	eb 48		 jmp	 SHORT $LN4@PrintFreeS
$LN22@PrintFreeS:

; 2876 : 			nResourceString = "DISK_FREE_BYTES";

  0010a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@
  0010f	eb 41		 jmp	 SHORT $LN4@PrintFreeS
$LN18@PrintFreeS:

; 2882 : 		else if (bDevice)

  00111	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00118	74 07		 je	 SHORT $LN16@PrintFreeS

; 2883 : 			nResourceString = "DEVICE_FREE_KB";

  0011a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@

; 2884 : 		else

  0011f	eb 31		 jmp	 SHORT $LN4@PrintFreeS
$LN16@PrintFreeS:

; 2885 : 			nResourceString = "DISK_FREE_KB";

  00121	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@
  00126	eb 2a		 jmp	 SHORT $LN4@PrintFreeS
$LN12@PrintFreeS:

; 2891 : 		else if (bDevice)

  00128	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0012f	74 07		 je	 SHORT $LN10@PrintFreeS

; 2892 : 			nResourceString = "DEVICE_FREE_MB";

  00131	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@

; 2893 : 		else

  00136	eb 1a		 jmp	 SHORT $LN4@PrintFreeS
$LN10@PrintFreeS:

; 2894 : 			nResourceString = "DISK_FREE_MB";

  00138	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@

; 2895 : 	}
; 2896 :  	else 

  0013d	eb 13		 jmp	 SHORT $LN4@PrintFreeS
$LN7@PrintFreeS:

; 2900 : 		else if (bDevice)

  0013f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice

; 2901 : 			nResourceString = "DEVICE_FREE_GB";

  00146	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@
  0014b	75 05		 jne	 SHORT $LN4@PrintFreeS

; 2902 : 		else
; 2903 : 			nResourceString = "DISK_FREE_GB";

  0014d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@
$LN4@PrintFreeS:

; 2904 : 	}
; 2905 : 
; 2906 : 	if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00152	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00158	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0015e	85 c9		 test	 ecx, ecx
  00160	74 48		 je	 SHORT $LN3@PrintFreeS
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00168	85 c9		 test	 ecx, ecx
  0016a	75 3e		 jne	 SHORT $LN3@PrintFreeS

; 2907 : 	{
; 2908 : 		_snwprintf (szTmp2, sizeof szTmp2 / 2, GetString (nResourceString), ((double) lDiskFree->QuadPart) / nMultiplier);

  0016c	df 2e		 fild	 QWORD PTR [esi]
  0016e	83 ec 08	 sub	 esp, 8
  00171	da 74 24 18	 fidiv	 DWORD PTR _nMultiplier$[esp+544]
  00175	dd 1c 24	 fstp	 QWORD PTR [esp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _GetString
  0017e	83 c4 04	 add	 esp, 4
  00181	50		 push	 eax
  00182	8d 54 24 20	 lea	 edx, DWORD PTR _szTmp2$[esp+548]
  00186	68 00 01 00 00	 push	 256			; 00000100H
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 __snwprintf
  00191	83 c4 14	 add	 esp, 20			; 00000014H

; 2909 : 		SetWindowTextW (GetDlgItem (hwndTextBox, IDC_SIZEBOX), szTmp2);

  00194	8d 44 24 14	 lea	 eax, DWORD PTR _szTmp2$[esp+536]
  00198	50		 push	 eax
  00199	68 0e 04 00 00	 push	 1038			; 0000040eH
  0019e	53		 push	 ebx
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001a5	50		 push	 eax
  001a6	ff d7		 call	 edi

; 2910 : 	}
; 2911 : 	else

  001a8	eb 29		 jmp	 SHORT $LN2@PrintFreeS
$LN3@PrintFreeS:

; 2912 : 		_snwprintf (szTmp2, sizeof szTmp2 / 2, GetString (nResourceString), lpszDrive, ((double) lDiskFree->QuadPart) / nMultiplier);

  001aa	df 2e		 fild	 QWORD PTR [esi]
  001ac	83 ec 08	 sub	 esp, 8
  001af	da 74 24 18	 fidiv	 DWORD PTR _nMultiplier$[esp+544]
  001b3	dd 1c 24	 fstp	 QWORD PTR [esp]
  001b6	52		 push	 edx
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _GetString
  001bd	83 c4 04	 add	 esp, 4
  001c0	50		 push	 eax
  001c1	8d 4c 24 24	 lea	 ecx, DWORD PTR _szTmp2$[esp+552]
  001c5	68 00 01 00 00	 push	 256			; 00000100H
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 __snwprintf
  001d0	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@PrintFreeS:

; 2913 : 
; 2914 : 	SetWindowTextW (hwndTextBox, szTmp2);

  001d3	8d 54 24 14	 lea	 edx, DWORD PTR _szTmp2$[esp+536]
  001d7	52		 push	 edx
  001d8	53		 push	 ebx
  001d9	ff d7		 call	 edi

; 2915 : 
; 2916 : 	if (lDiskFree->QuadPart % (__int64) BYTES_PER_MB != 0)

  001db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001de	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001e0	6a 00		 push	 0
  001e2	68 00 00 10 00	 push	 1048576			; 00100000H
  001e7	50		 push	 eax
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 __allrem
  001ee	0b c2		 or	 eax, edx

; 2917 : 		nMultiplier = BYTES_PER_KB;

  001f0	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  001f5	75 02		 jne	 SHORT $LN1@PrintFreeS

; 2918 : 
; 2919 : 	return nMultiplier;

  001f7	8b c5		 mov	 eax, ebp
$LN1@PrintFreeS:

; 2920 : }

  001f9	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+536]
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	33 cc		 xor	 ecx, esp
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	81 c4 08 02 00
	00		 add	 esp, 520		; 00000208H
  00211	c3		 ret	 0
_PrintFreeSpace ENDP
_TEXT	ENDS
PUBLIC	??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_DisplaySizingErrorText
EXTRN	__imp__wsprintfW:PROC
EXTRN	_translateWin32Error:PROC
;	COMDAT ??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, 0aH, 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
CONST	SEGMENT
??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@ DB 'CANNOT_CALC_SPACE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DisplaySizingErrorText
_TEXT	SEGMENT
_szTmp$ = -4100						; size = 2048
_szTmp2$132854 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndTextBox$ = 8					; size = 4
_DisplaySizingErrorText PROC				; COMDAT

; 2923 : {

  00000	b8 04 10 00 00	 mov	 eax, 4100		; 00001004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4100], eax
  00018	56		 push	 esi
  00019	8b b4 24 0c 10
	00 00		 mov	 esi, DWORD PTR _hwndTextBox$[esp+4100]

; 2924 : 	wchar_t szTmp[1024];
; 2925 : 
; 2926 : 	if (translateWin32Error (szTmp, sizeof (szTmp) / sizeof(szTmp[0])))

  00020	8d 44 24 04	 lea	 eax, DWORD PTR _szTmp$[esp+4104]
  00024	68 00 04 00 00	 push	 1024			; 00000400H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _translateWin32Error
  0002f	83 c4 08	 add	 esp, 8
  00032	85 c0		 test	 eax, eax
  00034	74 4e		 je	 SHORT $LN2@DisplaySiz

; 2927 : 	{
; 2928 : 		wchar_t szTmp2[1024];
; 2929 : 		wsprintfW (szTmp2, L"%s\n%s", GetString ("CANNOT_CALC_SPACE"), szTmp);

  00036	8d 4c 24 04	 lea	 ecx, DWORD PTR _szTmp$[esp+4104]
  0003a	51		 push	 ecx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  00040	e8 00 00 00 00	 call	 _GetString
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	8d 94 24 0c 08
	00 00		 lea	 edx, DWORD PTR _szTmp2$132854[esp+4112]
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@
  00055	52		 push	 edx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0005c	83 c4 10	 add	 esp, 16			; 00000010H

; 2930 : 		SetWindowTextW (hwndTextBox, szTmp2);

  0005f	8d 84 24 04 08
	00 00		 lea	 eax, DWORD PTR _szTmp2$132854[esp+4104]
  00066	50		 push	 eax
  00067	56		 push	 esi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0006e	5e		 pop	 esi

; 2935 : 	}
; 2936 : }

  0006f	8b 8c 24 00 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4100]
  00076	33 cc		 xor	 ecx, esp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  00083	c3		 ret	 0
$LN2@DisplaySiz:

; 2931 : 	}
; 2932 : 	else
; 2933 : 	{
; 2934 : 		SetWindowText (hwndTextBox, "");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00089	56		 push	 esi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 2935 : 	}
; 2936 : }

  00090	8b 8c 24 04 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4104]
  00097	5e		 pop	 esi
  00098	33 cc		 xor	 ecx, esp
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  000a5	c3		 ret	 0
_DisplaySizingErrorText ENDP
_TEXT	ENDS
PUBLIC	_EnableDisableFileNext
EXTRN	__imp__SetFocus@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EnableDisableFileNext
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_hMainButton$ = 12					; size = 4
_EnableDisableFileNext PROC				; COMDAT

; 2939 : {

  00000	56		 push	 esi

; 2940 : 	LPARAM nIndex = SendMessage (hComboBox, CB_GETCURSEL, 0, 0);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hComboBox$[esp]
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	68 47 01 00 00	 push	 327			; 00000147H
  0000e	56		 push	 esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2941 : 	if (bHistory && nIndex == CB_ERR)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHistory, 0
  0001c	74 1b		 je	 SHORT $LN2@EnableDisa
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 16		 jne	 SHORT $LN2@EnableDisa

; 2942 : 	{
; 2943 : 		EnableWindow (hMainButton, FALSE);

  00023	8b 44 24 0c	 mov	 eax, DWORD PTR _hMainButton$[esp]
  00027	6a 00		 push	 0
  00029	50		 push	 eax

; 2944 : 		SetFocus (hComboBox);
; 2945 : 	}
; 2946 : 	else
; 2947 : 	{
; 2948 : 		EnableWindow (hMainButton, TRUE);

  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2949 : 		SetFocus (hMainButton);

  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  00037	5e		 pop	 esi

; 2950 : 	}
; 2951 : }

  00038	c3		 ret	 0
$LN2@EnableDisa:

; 2944 : 		SetFocus (hComboBox);
; 2945 : 	}
; 2946 : 	else
; 2947 : 	{
; 2948 : 		EnableWindow (hMainButton, TRUE);

  00039	8b 74 24 0c	 mov	 esi, DWORD PTR _hMainButton$[esp]
  0003d	6a 01		 push	 1
  0003f	56		 push	 esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2949 : 		SetFocus (hMainButton);

  00046	56		 push	 esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  0004d	5e		 pop	 esi

; 2950 : 	}
; 2951 : }

  0004e	c3		 ret	 0
_EnableDisableFileNext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@		; `string'
PUBLIC	_IsSparseFile
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	_bPreserveTimestamp:DWORD
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_lpszTitle:DWORD
EXTRN	__imp__CreateFileA@28:PROC
;	COMDAT ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
CONST	SEGMENT
??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@ DB 'CANT_ACCESS_VOL', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _IsSparseFile
_TEXT	SEGMENT
_ftLastAccessTime$ = -60				; size = 8
_bhFileInfo$ = -52					; size = 52
_hwndDlg$ = 8						; size = 4
_IsSparseFile PROC					; COMDAT

; 2955 : {

  00000	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2956 : 	HANDLE hFile;
; 2957 : 	BY_HANDLE_FILE_INFORMATION bhFileInfo;
; 2958 : 
; 2959 : 	FILETIME ftLastAccessTime;
; 2960 : 	BOOL bTimeStampValid = FALSE;

  00005	33 f6		 xor	 esi, esi

; 2961 : 
; 2962 : 	BOOL retCode = FALSE;
; 2963 : 
; 2964 : 	hFile = CreateFile (szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	56		 push	 esi
  00008	56		 push	 esi
  00009	6a 03		 push	 3
  0000b	56		 push	 esi
  0000c	6a 03		 push	 3
  0000e	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00013	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001e	8b f8		 mov	 edi, eax

; 2965 : 
; 2966 : 	if (hFile == INVALID_HANDLE_VALUE)

  00020	83 ff ff	 cmp	 edi, -1
  00023	75 29		 jne	 SHORT $LN5@IsSparseFi

; 2967 : 	{
; 2968 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_VOL"), lpszTitle, ICON_HAND);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0002a	6a 10		 push	 16			; 00000010H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
  00032	e8 00 00 00 00	 call	 _GetString
  00037	8b 4c 24 54	 mov	 ecx, DWORD PTR _hwndDlg$[esp+76]
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00046	5f		 pop	 edi

; 2969 : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 2991 : }

  0004a	83 c4 3c	 add	 esp, 60			; 0000003cH
  0004d	c3		 ret	 0
$LN5@IsSparseFi:

; 2970 : 	}
; 2971 : 
; 2972 : 	if (bPreserveTimestamp)

  0004e	39 35 00 00 00
	00		 cmp	 DWORD PTR _bPreserveTimestamp, esi
  00054	74 18		 je	 SHORT $LN3@IsSparseFi

; 2973 : 	{
; 2974 : 		if (GetFileTime (hFile, NULL, &ftLastAccessTime, NULL) == 0)

  00056	6a 00		 push	 0
  00058	8d 54 24 0c	 lea	 edx, DWORD PTR _ftLastAccessTime$[esp+72]
  0005c	52		 push	 edx
  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00066	8b f0		 mov	 esi, eax
  00068	f7 de		 neg	 esi
  0006a	1b f6		 sbb	 esi, esi
  0006c	f7 de		 neg	 esi
$LN3@IsSparseFi:
  0006e	53		 push	 ebx

; 2975 : 			bTimeStampValid = FALSE;
; 2976 : 		else
; 2977 : 			bTimeStampValid = TRUE;
; 2978 : 	}
; 2979 : 
; 2980 : 	bhFileInfo.dwFileAttributes = 0;
; 2981 : 
; 2982 : 	GetFileInformationByHandle(hFile, &bhFileInfo);

  0006f	8d 44 24 14	 lea	 eax, DWORD PTR _bhFileInfo$[esp+72]
  00073	50		 push	 eax
  00074	57		 push	 edi
  00075	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _bhFileInfo$[esp+80], 0
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileInformationByHandle@8

; 2983 : 
; 2984 : 	retCode = bhFileInfo.dwFileAttributes & FILE_ATTRIBUTE_SPARSE_FILE;

  00083	8b 5c 24 14	 mov	 ebx, DWORD PTR _bhFileInfo$[esp+72]
  00087	81 e3 00 02 00
	00		 and	 ebx, 512		; 00000200H

; 2985 : 
; 2986 : 	if (bTimeStampValid)

  0008d	85 f6		 test	 esi, esi
  0008f	74 10		 je	 SHORT $LN1@IsSparseFi

; 2987 : 		SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  00091	6a 00		 push	 0
  00093	8d 4c 24 10	 lea	 ecx, DWORD PTR _ftLastAccessTime$[esp+76]
  00097	51		 push	 ecx
  00098	6a 00		 push	 0
  0009a	57		 push	 edi
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN1@IsSparseFi:

; 2988 : 
; 2989 : 	CloseHandle (hFile);

  000a1	57		 push	 edi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2990 : 	return retCode;

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 2991 : }

  000ad	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b0	c3		 ret	 0
_IsSparseFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@	; `string'
PUBLIC	_GetFileVolSize
EXTRN	__imp__GetFileSizeEx@8:PROC
;	COMDAT ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
CONST	SEGMENT
??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@ DB 'CANT_GET_VOLSIZE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetFileVolSize
_TEXT	SEGMENT
_ftLastAccessTime$ = -16				; size = 8
_fileSize$ = -8						; size = 8
_hwndDlg$ = 8						; size = 4
_size$ = 12						; size = 4
_GetFileVolSize PROC					; COMDAT

; 2996 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2997 : 	LARGE_INTEGER fileSize;
; 2998 : 	HANDLE hFile;
; 2999 : 
; 3000 : 	FILETIME ftLastAccessTime;
; 3001 : 	BOOL bTimeStampValid = FALSE;

  00005	33 f6		 xor	 esi, esi

; 3002 : 
; 3003 : 	hFile = CreateFile (szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	56		 push	 esi
  00008	56		 push	 esi
  00009	6a 03		 push	 3
  0000b	56		 push	 esi
  0000c	6a 03		 push	 3
  0000e	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00013	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001e	8b f8		 mov	 edi, eax

; 3004 : 
; 3005 : 	if (hFile == INVALID_HANDLE_VALUE)

  00020	83 ff ff	 cmp	 edi, -1
  00023	75 29		 jne	 SHORT $LN7@GetFileVol

; 3006 : 	{
; 3007 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_VOL"), lpszTitle, ICON_HAND);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0002a	6a 10		 push	 16			; 00000010H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
  00032	e8 00 00 00 00	 call	 _GetString
  00037	8b 4c 24 28	 mov	 ecx, DWORD PTR _hwndDlg$[esp+32]
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00046	5f		 pop	 edi

; 3008 : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 3036 : }

  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	c3		 ret	 0
$LN7@GetFileVol:

; 3009 : 	}
; 3010 : 
; 3011 : 	if (bPreserveTimestamp)

  0004e	39 35 00 00 00
	00		 cmp	 DWORD PTR _bPreserveTimestamp, esi
  00054	74 18		 je	 SHORT $LN5@GetFileVol

; 3012 : 	{
; 3013 : 		if (GetFileTime (hFile, NULL, &ftLastAccessTime, NULL) == 0)

  00056	6a 00		 push	 0
  00058	8d 54 24 0c	 lea	 edx, DWORD PTR _ftLastAccessTime$[esp+28]
  0005c	52		 push	 edx
  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00066	8b f0		 mov	 esi, eax
  00068	f7 de		 neg	 esi
  0006a	1b f6		 sbb	 esi, esi
  0006c	f7 de		 neg	 esi
$LN5@GetFileVol:

; 3014 : 			bTimeStampValid = FALSE;
; 3015 : 		else
; 3016 : 			bTimeStampValid = TRUE;
; 3017 : 	}
; 3018 : 
; 3019 : 	if (GetFileSizeEx(hFile, &fileSize) == 0)

  0006e	8d 44 24 10	 lea	 eax, DWORD PTR _fileSize$[esp+24]
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  0007a	85 c0		 test	 eax, eax
  0007c	75 45		 jne	 SHORT $LN3@GetFileVol

; 3020 : 	{
; 3021 : 		MessageBoxW (hwndDlg, GetString ("CANT_GET_VOLSIZE"), lpszTitle, ICON_HAND);

  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00084	6a 10		 push	 16			; 00000010H
  00086	51		 push	 ecx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  0008c	e8 00 00 00 00	 call	 _GetString
  00091	8b 54 24 28	 mov	 edx, DWORD PTR _hwndDlg$[esp+32]
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	52		 push	 edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3022 : 
; 3023 : 		if (bTimeStampValid)

  000a0	85 f6		 test	 esi, esi
  000a2	74 10		 je	 SHORT $LN2@GetFileVol

; 3024 : 			SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  000a4	6a 00		 push	 0
  000a6	8d 44 24 0c	 lea	 eax, DWORD PTR _ftLastAccessTime$[esp+28]
  000aa	50		 push	 eax
  000ab	6a 00		 push	 0
  000ad	57		 push	 edi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN2@GetFileVol:

; 3025 : 
; 3026 : 		CloseHandle (hFile);

  000b4	57		 push	 edi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000bb	5f		 pop	 edi

; 3027 : 		return FALSE;

  000bc	33 c0		 xor	 eax, eax
  000be	5e		 pop	 esi

; 3036 : }

  000bf	83 c4 10	 add	 esp, 16			; 00000010H
  000c2	c3		 ret	 0
$LN3@GetFileVol:

; 3028 : 	}
; 3029 : 
; 3030 : 	if (bTimeStampValid)

  000c3	85 f6		 test	 esi, esi
  000c5	74 10		 je	 SHORT $LN1@GetFileVol

; 3031 : 		SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  000c7	6a 00		 push	 0
  000c9	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ftLastAccessTime$[esp+28]
  000cd	51		 push	 ecx
  000ce	6a 00		 push	 0
  000d0	57		 push	 edi
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN1@GetFileVol:

; 3032 : 
; 3033 : 	CloseHandle (hFile);

  000d7	57		 push	 edi
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 3034 : 	*size = fileSize.QuadPart;

  000de	8b 44 24 20	 mov	 eax, DWORD PTR _size$[esp+20]
  000e2	8b 54 24 10	 mov	 edx, DWORD PTR _fileSize$[esp+24]
  000e6	8b 4c 24 14	 mov	 ecx, DWORD PTR _fileSize$[esp+28]
  000ea	5f		 pop	 edi
  000eb	89 10		 mov	 DWORD PTR [eax], edx
  000ed	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3035 : 	return TRUE;

  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	5e		 pop	 esi

; 3036 : }

  000f6	83 c4 10	 add	 esp, 16			; 00000010H
  000f9	c3		 ret	 0
_GetFileVolSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BFNCKGCL@PATH_ITEM?$AA@			; `string'
PUBLIC	??_C@_09DBGAMMMC@SIZE_ITEM?$AA@			; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@		; `string'
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@	; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@ ; `string'
PUBLIC	??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@ ; `string'
PUBLIC	__real@42b00000
PUBLIC	__real@4058ff5c28f5c28f
PUBLIC	__real@42c80000
PUBLIC	??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@	; `string'
PUBLIC	??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@ ; `string'
PUBLIC	??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_AskMultiChoice:PROC
EXTRN	_GetSizeString:PROC
EXTRN	_GetStatsFreeSpaceOnPartition:PROC
EXTRN	_GetDriveLabel:PROC
EXTRN	_GetPathType:PROC
EXTRN	_GetDiskDeviceDriveLetter:PROC
EXTRN	_ToUNICODE:PROC
;	COMDAT ??_C@_09BFNCKGCL@PATH_ITEM?$AA@
CONST	SEGMENT
??_C@_09BFNCKGCL@PATH_ITEM?$AA@ DB 'PATH_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBGAMMMC@SIZE_ITEM?$AA@
CONST	SEGMENT
??_C@_09DBGAMMMC@SIZE_ITEM?$AA@ DB 'SIZE_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@
CONST	SEGMENT
??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@ DB 'LABEL_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@
CONST	SEGMENT
??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@ DB '%', 00H, 'h', 00H, 'c'
	DB	00H, ':', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@
CONST	SEGMENT
??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@ DB 'DRIVE_LETTER_ITEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@ DB 'ERASE_FILES_BY'
	DB	'_CREATING_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@
CONST	SEGMENT
??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@ DB 'OVERWRITEPROMPT_'
	DB	'DEVICE_SECOND_WARNING_LOTS_OF_DATA', 00H	; `string'
CONST	ENDS
;	COMDAT __real@42b00000
CONST	SEGMENT
__real@42b00000 DD 042b00000r			; 88
CONST	ENDS
;	COMDAT __real@4058ff5c28f5c28f
CONST	SEGMENT
__real@4058ff5c28f5c28f DQ 04058ff5c28f5c28fr	; 99.99
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@
CONST	SEGMENT
??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@ DB 'OVERWRITEPROMPT_DEVICE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@ DB 'NONSYS_INPLACE_ENC'
	DB	'_CONFIRM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@
CONST	SEGMENT
??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@ DB 'OVERWRITEPROMPT_'
	DB	'DEVICE_HIDDEN_OS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@ DB ' '
	DB	00H, '(', 00H, '%', 00H, 'h', 00H, 'c', 00H, ':', 00H, ' ', 00H
	DB	'''', 00H, '%', 00H, 's', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB ' '
	DB	00H, '(', 00H, '%', 00H, 'h', 00H, 'c', 00H, ':', 00H, '%', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _FinalPreTransformPrompts
_TEXT	SEGMENT
_percentFreeSpace$132969 = -26364			; size = 4
_bTmpIsPartition$132951 = -26360			; size = 4
_occupiedBytes$132970 = -26356				; size = 8
_tmpStr$132992 = -26348					; size = 20
_volumeLabel$132949 = -26328				; size = 256
_tmpMcOptionCancel$132977 = -26072			; size = 100
_drive$132948 = -25972					; size = 256
_deviceName$ = -25716					; size = 520
_tmpMcOption1$132976 = -25196				; size = 1000
_szTmp$ = -24196					; size = 8192
_tmpMcMsg$132975 = -16004				; size = 16000
__$ArrayPad$ = -4					; size = 4
_FinalPreTransformPrompts PROC				; COMDAT

; 3150 : {

  00000	b8 fc 66 00 00	 mov	 eax, 26364		; 000066fcH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 f8 66
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+26364], eax
  00018	53		 push	 ebx
  00019	55		 push	 ebp

; 3151 : 	int x;
; 3152 : 	wchar_t szTmp[4096];
; 3153 : 	int driveNo;
; 3154 : 	WCHAR deviceName[MAX_PATH];
; 3155 : 
; 3156 : 	strcpy ((char *)deviceName, szFileName);

  0001a	33 db		 xor	 ebx, ebx
  0001c	56		 push	 esi
  0001d	33 c0		 xor	 eax, eax
  0001f	90		 npad	 1
$LL20@FinalPreTr:
  00020	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szFileName@@3PADA[eax]
  00026	88 8c 04 94 02
	00 00		 mov	 BYTE PTR _deviceName$[esp+eax+26376], cl
  0002d	40		 inc	 eax
  0002e	3a cb		 cmp	 cl, bl
  00030	75 ee		 jne	 SHORT $LL20@FinalPreTr

; 3157 : 	ToUNICODE ((char *)deviceName);

  00032	8d 84 24 94 02
	00 00		 lea	 eax, DWORD PTR _deviceName$[esp+26376]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _ToUNICODE

; 3158 : 
; 3159 : 	driveNo = GetDiskDeviceDriveLetter (deviceName);

  0003f	8d 8c 24 98 02
	00 00		 lea	 ecx, DWORD PTR _deviceName$[esp+26380]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter

; 3160 : 
; 3161 : 	if (!(bHiddenVol && !bHiddenVolHost))	// Do not ask for permission to overwrite an existing volume if we're creating a hidden volume within it

  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00052	83 c4 08	 add	 esp, 8
  00055	8b e8		 mov	 ebp, eax
  00057	85 d2		 test	 edx, edx
  00059	74 0d		 je	 SHORT $LN16@FinalPreTr
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00060	85 c0		 test	 eax, eax
  00062	0f 84 da 05 00
	00		 je	 $LN57@FinalPreTr
$LN16@FinalPreTr:

; 3162 : 	{
; 3163 : 		wchar_t drive[128];
; 3164 : 		wchar_t volumeLabel[128];
; 3165 : 		wchar_t *type;
; 3166 : 		BOOL bTmpIsPartition = FALSE;
; 3167 : 
; 3168 : 		type = GetPathType (szFileName, !bInPlaceEncNonSys, &bTmpIsPartition);

  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  0006e	f7 da		 neg	 edx
  00070	8d 4c 24 10	 lea	 ecx, DWORD PTR _bTmpIsPartition$132951[esp+26376]
  00074	1b d2		 sbb	 edx, edx
  00076	51		 push	 ecx
  00077	42		 inc	 edx
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0007e	89 5c 24 1c	 mov	 DWORD PTR _bTmpIsPartition$132951[esp+26388], ebx
  00082	e8 00 00 00 00	 call	 _GetPathType
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	8b f0		 mov	 esi, eax

; 3169 : 
; 3170 : 		if (driveNo != -1)

  0008c	83 fd ff	 cmp	 ebp, -1
  0008f	74 57		 je	 SHORT $LN15@FinalPreTr

; 3171 : 		{
; 3172 : 			if (!GetDriveLabel (driveNo, volumeLabel, sizeof (volumeLabel)))

  00091	68 00 01 00 00	 push	 256			; 00000100H
  00096	8d 44 24 34	 lea	 eax, DWORD PTR _volumeLabel$132949[esp+26380]
  0009a	50		 push	 eax
  0009b	55		 push	 ebp
  0009c	e8 00 00 00 00	 call	 _GetDriveLabel
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	85 c0		 test	 eax, eax
  000a6	75 2e		 jne	 SHORT $LN14@FinalPreTr

; 3173 : 				volumeLabel[0] = 0;

  000a8	33 c9		 xor	 ecx, ecx
  000aa	66 89 4c 24 30	 mov	 WORD PTR _volumeLabel$132949[esp+26376], cx
$LN21@FinalPreTr:

; 3174 : 
; 3175 : 			swprintf_s (drive, sizeof (drive)/2, volumeLabel[0] ? L" (%hc: '%s')" : L" (%hc:%s)", 'A' + driveNo, volumeLabel[0] ? volumeLabel : L"");

  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  000b4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
$LN24@FinalPreTr:
  000b9	51		 push	 ecx
  000ba	8d 55 41	 lea	 edx, DWORD PTR [ebp+65]
  000bd	52		 push	 edx
  000be	50		 push	 eax
  000bf	8d 84 24 a0 01
	00 00		 lea	 eax, DWORD PTR _drive$132948[esp+26388]
  000c6	68 80 00 00 00	 push	 128			; 00000080H
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _swprintf_s
  000d1	83 c4 14	 add	 esp, 20			; 00000014H

; 3176 : 		}
; 3177 : 		else

  000d4	eb 23		 jmp	 SHORT $LN13@FinalPreTr
$LN14@FinalPreTr:

; 3174 : 
; 3175 : 			swprintf_s (drive, sizeof (drive)/2, volumeLabel[0] ? L" (%hc: '%s')" : L" (%hc:%s)", 'A' + driveNo, volumeLabel[0] ? volumeLabel : L"");

  000d6	66 39 5c 24 30	 cmp	 WORD PTR _volumeLabel$132949[esp+26376], bx
  000db	74 d2		 je	 SHORT $LN21@FinalPreTr
  000dd	8d 4c 24 30	 lea	 ecx, DWORD PTR _volumeLabel$132949[esp+26376]
  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@
  000e6	eb d1		 jmp	 SHORT $LN24@FinalPreTr
$LN15@FinalPreTr:

; 3178 : 		{
; 3179 : 			drive[0] = 0;

  000e8	33 c9		 xor	 ecx, ecx

; 3180 : 			volumeLabel[0] = 0;

  000ea	33 d2		 xor	 edx, edx
  000ec	66 89 8c 24 94
	01 00 00	 mov	 WORD PTR _drive$132948[esp+26376], cx
  000f4	66 89 54 24 30	 mov	 WORD PTR _volumeLabel$132949[esp+26376], dx
$LN13@FinalPreTr:

; 3181 : 		}
; 3182 : 
; 3183 : 		if (bHiddenOS && bHiddenVolHost)

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  000fe	85 c0		 test	 eax, eax
  00100	74 37		 je	 SHORT $LN12@FinalPreTr
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00108	85 c9		 test	 ecx, ecx
  0010a	74 2d		 je	 SHORT $LN12@FinalPreTr

; 3184 : 			swprintf (szTmp, GetString ("OVERWRITEPROMPT_DEVICE_HIDDEN_OS_PARTITION"), szFileName, drive);

  0010c	8d 94 24 94 01
	00 00		 lea	 edx, DWORD PTR _drive$132948[esp+26376]
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@
  0011e	e8 00 00 00 00	 call	 _GetString
  00123	83 c4 04	 add	 esp, 4
  00126	50		 push	 eax
  00127	8d 84 24 90 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26388]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00134	83 c4 10	 add	 esp, 16			; 00000010H

; 3185 : 		else

  00137	eb 3c		 jmp	 SHORT $LN11@FinalPreTr
$LN12@FinalPreTr:

; 3186 : 			swprintf (szTmp, GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_CONFIRM" : "OVERWRITEPROMPT_DEVICE"), type, szFileName, drive);

  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0013f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@
  00144	85 c9		 test	 ecx, ecx
  00146	75 05		 jne	 SHORT $LN26@FinalPreTr
  00148	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@
$LN26@FinalPreTr:
  0014d	8d 94 24 94 01
	00 00		 lea	 edx, DWORD PTR _drive$132948[esp+26376]
  00154	52		 push	 edx
  00155	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0015a	56		 push	 esi
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _GetString
  00161	83 c4 04	 add	 esp, 4
  00164	50		 push	 eax
  00165	8d 84 24 94 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26392]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00172	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@FinalPreTr:

; 3187 : 
; 3188 : 
; 3189 : 		x = MessageBoxW (MainDlg, szTmp, lpszTitle, YES_NO | MB_ICONWARNING | (bInPlaceEncNonSys ? MB_DEFBUTTON1 : MB_DEFBUTTON2));

  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0017b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00181	f7 d9		 neg	 ecx
  00183	1b c9		 sbb	 ecx, ecx
  00185	81 e1 00 ff ff
	ff		 and	 ecx, -256		; ffffff00H
  0018b	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00191	83 c9 34	 or	 ecx, 52			; 00000034H
  00194	51		 push	 ecx
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0019b	52		 push	 edx
  0019c	8d 84 24 8c 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26384]
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3190 : 		if (x != IDYES)

  001ab	83 f8 06	 cmp	 eax, 6
  001ae	74 1a		 je	 SHORT $LN10@FinalPreTr
$LN65@FinalPreTr:
  001b0	5e		 pop	 esi
  001b1	5d		 pop	 ebp

; 3191 : 			return FALSE;

  001b2	33 c0		 xor	 eax, eax
  001b4	5b		 pop	 ebx

; 3245 : 					}
; 3246 : 				}
; 3247 : 			}
; 3248 : 		}
; 3249 : 	}
; 3250 : 	return TRUE;
; 3251 : }

  001b5	8b 8c 24 f8 66
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+26364]
  001bc	33 cc		 xor	 ecx, esp
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	81 c4 fc 66 00
	00		 add	 esp, 26364		; 000066fcH
  001c9	c3		 ret	 0
$LN10@FinalPreTr:

; 3192 : 
; 3193 : 
; 3194 : 		if (driveNo != -1 && bTmpIsPartition && !bInPlaceEncNonSys)

  001ca	83 fd ff	 cmp	 ebp, -1
  001cd	0f 84 6f 04 00
	00		 je	 $LN57@FinalPreTr
  001d3	39 5c 24 10	 cmp	 DWORD PTR _bTmpIsPartition$132951[esp+26376], ebx
  001d7	0f 84 65 04 00
	00		 je	 $LN57@FinalPreTr
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  001e3	85 d2		 test	 edx, edx
  001e5	0f 85 57 04 00
	00		 jne	 $LN57@FinalPreTr

; 3195 : 		{
; 3196 : 			float percentFreeSpace = 100.0;

  001eb	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42c80000

; 3197 : 			__int64 occupiedBytes = 0;
; 3198 : 
; 3199 : 			// Do a second check. If we find that the partition contains more than 1GB of data or more than 12%
; 3200 : 			// of its space is occupied, we will display an extra warning, however, this time it won't be a Yes/No
; 3201 : 			// dialog box (because users often ignore such dialog boxes).
; 3202 : 
; 3203 : 			if (GetStatsFreeSpaceOnPartition (szFileName, &percentFreeSpace, &occupiedBytes, TRUE) != -1)

  001f1	6a 01		 push	 1
  001f3	8d 44 24 18	 lea	 eax, DWORD PTR _occupiedBytes$132970[esp+26380]
  001f7	d9 5c 24 10	 fstp	 DWORD PTR _percentFreeSpace$132969[esp+26380]
  001fb	50		 push	 eax
  001fc	8d 4c 24 14	 lea	 ecx, DWORD PTR _percentFreeSpace$132969[esp+26384]
  00200	51		 push	 ecx
  00201	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00206	89 5c 24 24	 mov	 DWORD PTR _occupiedBytes$132970[esp+26392], ebx
  0020a	89 5c 24 28	 mov	 DWORD PTR _occupiedBytes$132970[esp+26396], ebx
  0020e	e8 00 00 00 00	 call	 _GetStatsFreeSpaceOnPartition
  00213	23 c2		 and	 eax, edx
  00215	83 c4 10	 add	 esp, 16			; 00000010H
  00218	83 f8 ff	 cmp	 eax, -1
  0021b	0f 84 21 04 00
	00		 je	 $LN57@FinalPreTr

; 3204 : 			{
; 3205 : 				if (occupiedBytes > BYTES_PER_GB && percentFreeSpace < 99.99	// "percentFreeSpace < 99.99" is needed because an NTFS filesystem larger than several terabytes can have more than 1GB of data in use, even if there are no files stored on it.
; 3206 : 					|| percentFreeSpace < 88)		// A 24-MB NTFS filesystem has 11.5% of space in use even if there are no files stored on it.

  00221	39 5c 24 18	 cmp	 DWORD PTR _occupiedBytes$132970[esp+26380], ebx
  00225	d9 44 24 0c	 fld	 DWORD PTR _percentFreeSpace$132969[esp+26376]
  00229	7c 19		 jl	 SHORT $LN5@FinalPreTr
  0022b	7f 0a		 jg	 SHORT $LN36@FinalPreTr
  0022d	81 7c 24 14 00
	00 00 40	 cmp	 DWORD PTR _occupiedBytes$132970[esp+26376], 1073741824 ; 40000000H
  00235	76 0d		 jbe	 SHORT $LN5@FinalPreTr
$LN36@FinalPreTr:
  00237	dc 15 00 00 00
	00		 fcom	 QWORD PTR __real@4058ff5c28f5c28f
  0023d	df e0		 fnstsw	 ax
  0023f	f6 c4 05	 test	 ah, 5
  00242	7b 13		 jnp	 SHORT $LN64@FinalPreTr
$LN5@FinalPreTr:
  00244	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42b00000
  0024a	df e0		 fnstsw	 ax
  0024c	f6 c4 05	 test	 ah, 5
  0024f	0f 8a ed 03 00
	00		 jp	 $LN57@FinalPreTr
  00255	eb 02		 jmp	 SHORT $LN6@FinalPreTr
$LN64@FinalPreTr:
  00257	dd d8		 fstp	 ST(0)
$LN6@FinalPreTr:

; 3207 : 				{
; 3208 : 					wchar_t tmpMcMsg [8000];
; 3209 : 					wchar_t tmpMcOption1 [500];
; 3210 : 					wchar_t tmpMcOptionCancel [50];
; 3211 : 
; 3212 : 					wcscpy (tmpMcMsg, GetString("OVERWRITEPROMPT_DEVICE_SECOND_WARNING_LOTS_OF_DATA"));

  00259	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@
  0025e	e8 00 00 00 00	 call	 _GetString
  00263	83 c4 04	 add	 esp, 4
  00266	8d 94 24 84 28
	00 00		 lea	 edx, DWORD PTR _tmpMcMsg$132975[esp+26376]
  0026d	8d 49 00	 npad	 3
$LL27@FinalPreTr:
  00270	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00273	66 89 0a	 mov	 WORD PTR [edx], cx
  00276	83 c0 02	 add	 eax, 2
  00279	83 c2 02	 add	 edx, 2
  0027c	66 3b cb	 cmp	 cx, bx
  0027f	75 ef		 jne	 SHORT $LL27@FinalPreTr

; 3213 : 					wcscpy (tmpMcOption1, GetString("ERASE_FILES_BY_CREATING_VOLUME"));

  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@
  00286	e8 00 00 00 00	 call	 _GetString
  0028b	83 c4 04	 add	 esp, 4
  0028e	8d 94 24 9c 04
	00 00		 lea	 edx, DWORD PTR _tmpMcOption1$132976[esp+26376]
$LL28@FinalPreTr:
  00295	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00298	66 89 0a	 mov	 WORD PTR [edx], cx
  0029b	83 c0 02	 add	 eax, 2
  0029e	83 c2 02	 add	 edx, 2
  002a1	66 3b cb	 cmp	 cx, bx
  002a4	75 ef		 jne	 SHORT $LL28@FinalPreTr

; 3214 : 					wcscpy (tmpMcOptionCancel, GetString("CANCEL"));

  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  002ab	e8 00 00 00 00	 call	 _GetString
  002b0	83 c4 04	 add	 esp, 4
  002b3	8d 94 24 30 01
	00 00		 lea	 edx, DWORD PTR _tmpMcOptionCancel$132977[esp+26376]
  002ba	8d 9b 00 00 00
	00		 npad	 6
$LL29@FinalPreTr:
  002c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002c3	66 89 0a	 mov	 WORD PTR [edx], cx
  002c6	83 c0 02	 add	 eax, 2
  002c9	83 c2 02	 add	 edx, 2
  002cc	66 3b cb	 cmp	 cx, bx
  002cf	75 ef		 jne	 SHORT $LL29@FinalPreTr

; 3215 : 
; 3216 : 					wcscat (tmpMcMsg, L"\n\n");

  002d1	8d 84 24 84 28
	00 00		 lea	 eax, DWORD PTR _tmpMcMsg$132975[esp+26376]
  002d8	83 c0 fe	 add	 eax, -2			; fffffffeH
  002db	eb 03 8d 49 00	 npad	 5
$LL37@FinalPreTr:
  002e0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  002e4	83 c0 02	 add	 eax, 2
  002e7	66 3b cb	 cmp	 cx, bx
  002ea	75 f4		 jne	 SHORT $LL37@FinalPreTr
  002ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  002f2	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  002f9	89 10		 mov	 DWORD PTR [eax], edx

; 3217 : 					wcscat (tmpMcMsg, GetString("DRIVE_LETTER_ITEM"));

  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@
  00300	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  00304	e8 00 00 00 00	 call	 _GetString
  00309	83 c4 04	 add	 esp, 4
  0030c	8b d0		 mov	 edx, eax
  0030e	8b ff		 npad	 2
$LL38@FinalPreTr:
  00310	66 8b 08	 mov	 cx, WORD PTR [eax]
  00313	83 c0 02	 add	 eax, 2
  00316	66 3b cb	 cmp	 cx, bx
  00319	75 f5		 jne	 SHORT $LL38@FinalPreTr
  0031b	57		 push	 edi
  0031c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00323	2b c2		 sub	 eax, edx
  00325	83 c7 fe	 add	 edi, -2			; fffffffeH
  00328	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL39@FinalPreTr:
  00330	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00334	83 c7 02	 add	 edi, 2
  00337	66 3b cb	 cmp	 cx, bx
  0033a	75 f4		 jne	 SHORT $LL39@FinalPreTr
  0033c	8b c8		 mov	 ecx, eax
  0033e	c1 e9 02	 shr	 ecx, 2
  00341	8b f2		 mov	 esi, edx
  00343	f3 a5		 rep movsd

; 3218 : 					swprintf_s (szTmp, sizeof (szTmp)/2, L"%hc:", 'A' + driveNo);

  00345	83 c5 41	 add	 ebp, 65			; 00000041H
  00348	55		 push	 ebp
  00349	68 00 00 00 00	 push	 OFFSET ??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@
  0034e	8b c8		 mov	 ecx, eax
  00350	8d 94 24 90 08
	00 00		 lea	 edx, DWORD PTR _szTmp$[esp+26388]
  00357	83 e1 03	 and	 ecx, 3
  0035a	68 00 10 00 00	 push	 4096			; 00001000H
  0035f	52		 push	 edx
  00360	f3 a4		 rep movsb
  00362	e8 00 00 00 00	 call	 _swprintf_s

; 3219 : 					wcscat (tmpMcMsg, szTmp);

  00367	8d 84 24 98 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26396]
  0036e	83 c4 10	 add	 esp, 16			; 00000010H
  00371	8b d0		 mov	 edx, eax
$LL40@FinalPreTr:
  00373	66 8b 08	 mov	 cx, WORD PTR [eax]
  00376	83 c0 02	 add	 eax, 2
  00379	66 3b cb	 cmp	 cx, bx
  0037c	75 f5		 jne	 SHORT $LL40@FinalPreTr
  0037e	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00385	2b c2		 sub	 eax, edx
  00387	83 c7 fe	 add	 edi, -2			; fffffffeH
  0038a	8d 9b 00 00 00
	00		 npad	 6
$LL41@FinalPreTr:
  00390	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00394	83 c7 02	 add	 edi, 2
  00397	66 3b cb	 cmp	 cx, bx
  0039a	75 f4		 jne	 SHORT $LL41@FinalPreTr
  0039c	8b c8		 mov	 ecx, eax
  0039e	c1 e9 02	 shr	 ecx, 2
  003a1	8b f2		 mov	 esi, edx
  003a3	f3 a5		 rep movsd
  003a5	8b c8		 mov	 ecx, eax
  003a7	83 e1 03	 and	 ecx, 3
  003aa	f3 a4		 rep movsb

; 3220 : 
; 3221 : 					wcscat (tmpMcMsg, L"\n");

  003ac	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  003b3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL42@FinalPreTr:
  003b6	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  003ba	83 c7 02	 add	 edi, 2
  003bd	66 3b c3	 cmp	 ax, bx
  003c0	75 f4		 jne	 SHORT $LL42@FinalPreTr
  003c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3222 : 					wcscat (tmpMcMsg, GetString("LABEL_ITEM"));

  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@
  003cc	89 07		 mov	 DWORD PTR [edi], eax
  003ce	e8 00 00 00 00	 call	 _GetString
  003d3	83 c4 04	 add	 esp, 4
  003d6	8b d0		 mov	 edx, eax
  003d8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL43@FinalPreTr:
  003e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  003e3	83 c0 02	 add	 eax, 2
  003e6	66 3b cb	 cmp	 cx, bx
  003e9	75 f5		 jne	 SHORT $LL43@FinalPreTr
  003eb	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  003f2	2b c2		 sub	 eax, edx
  003f4	83 c7 fe	 add	 edi, -2			; fffffffeH
  003f7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL44@FinalPreTr:
  00400	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00404	83 c7 02	 add	 edi, 2
  00407	66 3b cb	 cmp	 cx, bx
  0040a	75 f4		 jne	 SHORT $LL44@FinalPreTr
  0040c	8b c8		 mov	 ecx, eax
  0040e	c1 e9 02	 shr	 ecx, 2
  00411	8b f2		 mov	 esi, edx
  00413	f3 a5		 rep movsd
  00415	8b c8		 mov	 ecx, eax
  00417	83 e1 03	 and	 ecx, 3
  0041a	f3 a4		 rep movsb

; 3223 : 					wcscat (tmpMcMsg, volumeLabel[0] != 0 ? volumeLabel : GetString("NOT_APPLICABLE_OR_NOT_AVAILABLE"));

  0041c	66 39 5c 24 34	 cmp	 WORD PTR _volumeLabel$132949[esp+26380], bx
  00421	74 06		 je	 SHORT $LN30@FinalPreTr
  00423	8d 44 24 34	 lea	 eax, DWORD PTR _volumeLabel$132949[esp+26380]
  00427	eb 0d		 jmp	 SHORT $LN31@FinalPreTr
$LN30@FinalPreTr:
  00429	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0042e	e8 00 00 00 00	 call	 _GetString
  00433	83 c4 04	 add	 esp, 4
$LN31@FinalPreTr:
  00436	8b d0		 mov	 edx, eax
  00438	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL45@FinalPreTr:
  00440	66 8b 08	 mov	 cx, WORD PTR [eax]
  00443	83 c0 02	 add	 eax, 2
  00446	66 3b cb	 cmp	 cx, bx
  00449	75 f5		 jne	 SHORT $LL45@FinalPreTr
  0044b	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00452	2b c2		 sub	 eax, edx
  00454	83 c7 fe	 add	 edi, -2			; fffffffeH
  00457	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL46@FinalPreTr:
  00460	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00464	83 c7 02	 add	 edi, 2
  00467	66 3b cb	 cmp	 cx, bx
  0046a	75 f4		 jne	 SHORT $LL46@FinalPreTr
  0046c	8b c8		 mov	 ecx, eax
  0046e	c1 e9 02	 shr	 ecx, 2
  00471	8b f2		 mov	 esi, edx
  00473	f3 a5		 rep movsd
  00475	8b c8		 mov	 ecx, eax
  00477	83 e1 03	 and	 ecx, 3
  0047a	f3 a4		 rep movsb

; 3224 : 
; 3225 : 					wcscat (tmpMcMsg, L"\n");

  0047c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00483	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL47@FinalPreTr:
  00486	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  0048a	83 c7 02	 add	 edi, 2
  0048d	66 3b c3	 cmp	 ax, bx
  00490	75 f4		 jne	 SHORT $LL47@FinalPreTr
  00492	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3226 : 					wcscat (tmpMcMsg, GetString("SIZE_ITEM"));

  00498	68 00 00 00 00	 push	 OFFSET ??_C@_09DBGAMMMC@SIZE_ITEM?$AA@
  0049d	89 0f		 mov	 DWORD PTR [edi], ecx
  0049f	e8 00 00 00 00	 call	 _GetString
  004a4	83 c4 04	 add	 esp, 4
  004a7	8b d0		 mov	 edx, eax
  004a9	8d a4 24 00 00
	00 00		 npad	 7
$LL48@FinalPreTr:
  004b0	66 8b 08	 mov	 cx, WORD PTR [eax]
  004b3	83 c0 02	 add	 eax, 2
  004b6	66 3b cb	 cmp	 cx, bx
  004b9	75 f5		 jne	 SHORT $LL48@FinalPreTr
  004bb	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  004c2	2b c2		 sub	 eax, edx
  004c4	83 c7 fe	 add	 edi, -2			; fffffffeH
  004c7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL49@FinalPreTr:
  004d0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  004d4	83 c7 02	 add	 edi, 2
  004d7	66 3b cb	 cmp	 cx, bx
  004da	75 f4		 jne	 SHORT $LL49@FinalPreTr
  004dc	8b c8		 mov	 ecx, eax
  004de	c1 e9 02	 shr	 ecx, 2
  004e1	8b f2		 mov	 esi, edx
  004e3	f3 a5		 rep movsd
  004e5	8b c8		 mov	 ecx, eax

; 3227 : 					GetSizeString (nVolumeSize, szTmp);

  004e7	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  004ec	83 e1 03	 and	 ecx, 3
  004ef	8d 94 24 88 08
	00 00		 lea	 edx, DWORD PTR _szTmp$[esp+26380]
  004f6	52		 push	 edx
  004f7	f3 a4		 rep movsb
  004f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  004ff	50		 push	 eax
  00500	51		 push	 ecx
  00501	e8 00 00 00 00	 call	 _GetSizeString

; 3228 : 					wcscat (tmpMcMsg, szTmp);

  00506	8d 84 24 94 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26392]
  0050d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00510	8b d0		 mov	 edx, eax
$LL50@FinalPreTr:
  00512	66 8b 08	 mov	 cx, WORD PTR [eax]
  00515	83 c0 02	 add	 eax, 2
  00518	66 3b cb	 cmp	 cx, bx
  0051b	75 f5		 jne	 SHORT $LL50@FinalPreTr
  0051d	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00524	2b c2		 sub	 eax, edx
  00526	83 c7 fe	 add	 edi, -2			; fffffffeH
  00529	8d a4 24 00 00
	00 00		 npad	 7
$LL51@FinalPreTr:
  00530	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00534	83 c7 02	 add	 edi, 2
  00537	66 3b cb	 cmp	 cx, bx
  0053a	75 f4		 jne	 SHORT $LL51@FinalPreTr
  0053c	8b c8		 mov	 ecx, eax
  0053e	c1 e9 02	 shr	 ecx, 2
  00541	8b f2		 mov	 esi, edx
  00543	f3 a5		 rep movsd
  00545	8b c8		 mov	 ecx, eax
  00547	83 e1 03	 and	 ecx, 3
  0054a	f3 a4		 rep movsb

; 3229 : 
; 3230 : 					wcscat (tmpMcMsg, L"\n");

  0054c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00553	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL52@FinalPreTr:
  00556	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  0055a	83 c7 02	 add	 edi, 2
  0055d	66 3b c3	 cmp	 ax, bx
  00560	75 f4		 jne	 SHORT $LL52@FinalPreTr
  00562	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3231 : 					wcscat (tmpMcMsg, GetString("PATH_ITEM"));

  00568	68 00 00 00 00	 push	 OFFSET ??_C@_09BFNCKGCL@PATH_ITEM?$AA@
  0056d	89 17		 mov	 DWORD PTR [edi], edx
  0056f	e8 00 00 00 00	 call	 _GetString
  00574	83 c4 04	 add	 esp, 4
  00577	8b d0		 mov	 edx, eax
  00579	8d a4 24 00 00
	00 00		 npad	 7
$LL53@FinalPreTr:
  00580	66 8b 08	 mov	 cx, WORD PTR [eax]
  00583	83 c0 02	 add	 eax, 2
  00586	66 3b cb	 cmp	 cx, bx
  00589	75 f5		 jne	 SHORT $LL53@FinalPreTr
  0058b	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00592	2b c2		 sub	 eax, edx
  00594	83 c7 fe	 add	 edi, -2			; fffffffeH
  00597	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL54@FinalPreTr:
  005a0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  005a4	83 c7 02	 add	 edi, 2
  005a7	66 3b cb	 cmp	 cx, bx
  005aa	75 f4		 jne	 SHORT $LL54@FinalPreTr
  005ac	8b c8		 mov	 ecx, eax
  005ae	c1 e9 02	 shr	 ecx, 2
  005b1	8b f2		 mov	 esi, edx
  005b3	f3 a5		 rep movsd
  005b5	8b c8		 mov	 ecx, eax
  005b7	83 e1 03	 and	 ecx, 3

; 3232 : 					wcscat (tmpMcMsg, deviceName);

  005ba	8d 84 24 98 02
	00 00		 lea	 eax, DWORD PTR _deviceName$[esp+26380]
  005c1	f3 a4		 rep movsb
  005c3	8b d0		 mov	 edx, eax
$LL55@FinalPreTr:
  005c5	66 8b 08	 mov	 cx, WORD PTR [eax]
  005c8	83 c0 02	 add	 eax, 2
  005cb	66 3b cb	 cmp	 cx, bx
  005ce	75 f5		 jne	 SHORT $LL55@FinalPreTr
  005d0	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$132975[esp+26380]
  005d7	2b c2		 sub	 eax, edx
  005d9	83 c7 fe	 add	 edi, -2			; fffffffeH
  005dc	8d 64 24 00	 npad	 4
$LL56@FinalPreTr:
  005e0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  005e4	83 c7 02	 add	 edi, 2
  005e7	66 3b cb	 cmp	 cx, bx
  005ea	75 f4		 jne	 SHORT $LL56@FinalPreTr
  005ec	8b c8		 mov	 ecx, eax
  005ee	c1 e9 02	 shr	 ecx, 2
  005f1	8b f2		 mov	 esi, edx
  005f3	f3 a5		 rep movsd
  005f5	8b c8		 mov	 ecx, eax
  005f7	83 e1 03	 and	 ecx, 3

; 3233 : 
; 3234 : 					wchar_t *tmpStr[] = {L"", tmpMcMsg, tmpMcOption1, tmpMcOptionCancel, 0};

  005fa	8d 84 24 88 28
	00 00		 lea	 eax, DWORD PTR _tmpMcMsg$132975[esp+26380]
  00601	89 44 24 24	 mov	 DWORD PTR _tmpStr$132992[esp+26384], eax
  00605	f3 a4		 rep movsb

; 3235 : 					switch (AskMultiChoice ((void **) tmpStr, TRUE))

  00607	8d 44 24 20	 lea	 eax, DWORD PTR _tmpStr$132992[esp+26380]
  0060b	8d 8c 24 a0 04
	00 00		 lea	 ecx, DWORD PTR _tmpMcOption1$132976[esp+26380]
  00612	8d 94 24 34 01
	00 00		 lea	 edx, DWORD PTR _tmpMcOptionCancel$132977[esp+26380]
  00619	6a 01		 push	 1
  0061b	50		 push	 eax
  0061c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _tmpStr$132992[esp+26388], OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00624	89 4c 24 30	 mov	 DWORD PTR _tmpStr$132992[esp+26396], ecx
  00628	89 54 24 34	 mov	 DWORD PTR _tmpStr$132992[esp+26400], edx
  0062c	89 5c 24 38	 mov	 DWORD PTR _tmpStr$132992[esp+26404], ebx
  00630	e8 00 00 00 00	 call	 _AskMultiChoice
  00635	83 c4 08	 add	 esp, 8
  00638	83 e8 01	 sub	 eax, 1
  0063b	5f		 pop	 edi

; 3236 : 					{
; 3237 : 					case 1:
; 3238 : 						// Proceed 
; 3239 : 
; 3240 : 						// NOP
; 3241 : 						break;
; 3242 : 
; 3243 : 					default:
; 3244 : 						return FALSE;

  0063c	0f 85 6e fb ff
	ff		 jne	 $LN65@FinalPreTr
$LN57@FinalPreTr:

; 3245 : 					}
; 3246 : 				}
; 3247 : 			}
; 3248 : 		}
; 3249 : 	}
; 3250 : 	return TRUE;
; 3251 : }

  00642	8b 8c 24 04 67
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+26376]
  00649	5e		 pop	 esi
  0064a	5d		 pop	 ebp
  0064b	5b		 pop	 ebx
  0064c	33 cc		 xor	 ecx, esp
  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00658	81 c4 fc 66 00
	00		 add	 esp, 26364		; 000066fcH
  0065e	c3		 ret	 0
_FinalPreTransformPrompts ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_HandleOldAssignedDriveLetter
;	COMDAT ??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@
CONST	SEGMENT
??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@ DB 'AFTER_FORMAT_D'
	DB	'RIVE_LETTER_WARN', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _HandleOldAssignedDriveLetter
_TEXT	SEGMENT
_deviceName$133004 = -16908				; size = 520
_szTmp$133011 = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_HandleOldAssignedDriveLetter PROC			; COMDAT

; 3254 : {

  00000	b8 0c 42 00 00	 mov	 eax, 16908		; 0000420cH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 08 42
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16908], eax

; 3255 : 	if (bDevice)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0001f	0f 84 8c 00 00
	00		 je	 $LN1@HandleOldA

; 3256 : 	{
; 3257 : 		// Handle assigned drive letter (if any)
; 3258 : 
; 3259 : 		WCHAR deviceName[MAX_PATH];
; 3260 : 		int driveLetter = -1;
; 3261 : 
; 3262 : 		strcpy ((char *)deviceName, szDiskFile);

  00025	33 c0		 xor	 eax, eax
  00027	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL5@HandleOldA:
  00030	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szDiskFile@@3PADA[eax]
  00036	88 0c 04	 mov	 BYTE PTR _deviceName$133004[esp+eax+16908], cl
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f2		 jne	 SHORT $LL5@HandleOldA

; 3263 : 		ToUNICODE ((char *)deviceName);

  0003e	8d 04 24	 lea	 eax, DWORD PTR _deviceName$133004[esp+16908]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _ToUNICODE

; 3264 : 		driveLetter = GetDiskDeviceDriveLetter (deviceName);

  00047	8d 4c 24 04	 lea	 ecx, DWORD PTR _deviceName$133004[esp+16912]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter

; 3265 : 
; 3266 : 		if (!bHiddenVolHost
; 3267 : 			&& !bHiddenOS
; 3268 : 			&& driveLetter > 1)		// If a drive letter is assigned to the device, but not A: or B:

  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00057	83 c4 08	 add	 esp, 8
  0005a	85 d2		 test	 edx, edx
  0005c	75 53		 jne	 SHORT $LN1@HandleOldA
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00064	85 c9		 test	 ecx, ecx
  00066	75 49		 jne	 SHORT $LN1@HandleOldA
  00068	83 f8 01	 cmp	 eax, 1
  0006b	7e 44		 jle	 SHORT $LN1@HandleOldA

; 3269 : 		{
; 3270 : 			char rootPath[] = { (char) driveLetter + 'A', ':', '\\', 0 };

  0006d	04 41		 add	 al, 65			; 00000041H

; 3271 : 			wchar_t szTmp[8192];
; 3272 : 
; 3273 : 			swprintf (szTmp, GetString ("AFTER_FORMAT_DRIVE_LETTER_WARN"), rootPath[0], rootPath[0], rootPath[0], rootPath[0]);

  0006f	0f be c0	 movsx	 eax, al
  00072	50		 push	 eax
  00073	50		 push	 eax
  00074	50		 push	 eax
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@
  0007b	e8 00 00 00 00	 call	 _GetString
  00080	83 c4 04	 add	 esp, 4
  00083	50		 push	 eax
  00084	8d 94 24 1c 02
	00 00		 lea	 edx, DWORD PTR _szTmp$133011[esp+16928]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 3274 : 			MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING);

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	6a 30		 push	 48			; 00000030H
  000a1	50		 push	 eax
  000a2	8d 8c 24 10 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$133011[esp+16916]
  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN1@HandleOldA:

; 3275 : 		}
; 3276 : 	}
; 3277 : }

  000b1	8b 8c 24 08 42
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16908]
  000b8	33 cc		 xor	 ecx, esp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	81 c4 0c 42 00
	00		 add	 esp, 16908		; 0000420cH
  000c5	c3		 ret	 0
_HandleOldAssignedDriveLetter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@	; `string'
PUBLIC	_DetermineMaxHiddenVolSize
EXTRN	_GetVolumeDataAreaSize:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	_UnmountVolume:PROC
EXTRN	__aulldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
CONST	SEGMENT
??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@ DB 'NO_SPACE_FOR_HIDDEN_V'
	DB	'OL', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DetermineMaxHiddenVolSize
_TEXT	SEGMENT
_nbrReserveBytes$ = -8					; size = 8
_hwndDlg$ = 8						; size = 4
_DetermineMaxHiddenVolSize PROC				; COMDAT

; 8021 : 	__int64 nbrReserveBytes;
; 8022 : 
; 8023 : 	if (nbrFreeClusters * realClusterSize < TC_MIN_HIDDEN_VOLUME_SIZE)

  00000	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA+4
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?realClusterSize@@3HA ; realClusterSize
  0000b	83 ec 08	 sub	 esp, 8
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	51		 push	 ecx
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA
  00019	99		 cdq
  0001a	51		 push	 ecx
  0001b	52		 push	 edx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __allmul
  00022	85 d2		 test	 edx, edx
  00024	7f 41		 jg	 SHORT $LN7@DetermineM
  00026	7c 07		 jl	 SHORT $LN10@DetermineM
  00028	3d 00 a0 00 00	 cmp	 eax, 40960		; 0000a000H
  0002d	73 38		 jae	 SHORT $LN7@DetermineM
$LN10@DetermineM:

; 8024 : 	{
; 8025 : 		MessageBoxW (hwndDlg, GetString ("NO_SPACE_FOR_HIDDEN_VOL"), lpszTitle, ICON_HAND);

  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00035	6a 10		 push	 16			; 00000010H
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
  0003d	e8 00 00 00 00	 call	 _GetString
  00042	8b 74 24 28	 mov	 esi, DWORD PTR _hwndDlg$[esp+32]
  00046	83 c4 04	 add	 esp, 4
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8026 : 		UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  00056	6a 01		 push	 1
  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _UnmountVolume
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8027 : 		AbortProcessSilent ();

  00062	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN7@DetermineM:

; 8028 : 	}
; 8029 : 
; 8030 : 	// Add a reserve (in case the user mounts the outer volume and creates new files
; 8031 : 	// on it by accident or OS writes some new data behind his or her back, such as
; 8032 : 	// System Restore etc.)
; 8033 : 	nbrReserveBytes = GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize) / 200;

  00067	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  00073	51		 push	 ecx
  00074	52		 push	 edx
  00075	6a 00		 push	 0
  00077	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	6a 00		 push	 0
  00081	68 c8 00 00 00	 push	 200			; 000000c8H
  00086	52		 push	 edx
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 __aulldiv
  0008d	89 44 24 10	 mov	 DWORD PTR _nbrReserveBytes$[esp+24], eax
  00091	89 54 24 14	 mov	 DWORD PTR _nbrReserveBytes$[esp+28], edx

; 8034 : 	if (nbrReserveBytes > BYTES_PER_MB * 10)

  00095	85 d2		 test	 edx, edx
  00097	7c 19		 jl	 SHORT $LN6@DetermineM
  00099	7f 07		 jg	 SHORT $LN11@DetermineM
  0009b	3d 00 00 a0 00	 cmp	 eax, 10485760		; 00a00000H
  000a0	76 10		 jbe	 SHORT $LN6@DetermineM
$LN11@DetermineM:

; 8035 : 		nbrReserveBytes = BYTES_PER_MB * 10;

  000a2	c7 44 24 10 00
	00 a0 00	 mov	 DWORD PTR _nbrReserveBytes$[esp+24], 10485760 ; 00a00000H
  000aa	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _nbrReserveBytes$[esp+28], 0
$LN6@DetermineM:

; 8036 : 
; 8037 : 	// Compute the final value
; 8038 : 
; 8039 : 	nMaximumHiddenVolSize = nbrFreeClusters * realClusterSize - TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE - nbrReserveBytes;

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?realClusterSize@@3HA ; realClusterSize
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA
  000bd	99		 cdq
  000be	8b d8		 mov	 ebx, eax
  000c0	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nbrFreeClusters@@3_JA+4
  000c5	50		 push	 eax
  000c6	51		 push	 ecx
  000c7	8b ea		 mov	 ebp, edx
  000c9	55		 push	 ebp
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 __allmul
  000d0	8b f8		 mov	 edi, eax
  000d2	2b 7c 24 10	 sub	 edi, DWORD PTR _nbrReserveBytes$[esp+24]
  000d6	8b f2		 mov	 esi, edx
  000d8	1b 74 24 14	 sbb	 esi, DWORD PTR _nbrReserveBytes$[esp+28]

; 8040 : 	nMaximumHiddenVolSize -= nMaximumHiddenVolSize % realClusterSize;		// Must be a multiple of the sector size

  000dc	55		 push	 ebp
  000dd	81 ef 00 10 00
	00		 sub	 edi, 4096		; 00001000H
  000e3	53		 push	 ebx
  000e4	83 de 00	 sbb	 esi, 0
  000e7	56		 push	 esi
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 __allrem
  000ee	2b f8		 sub	 edi, eax
  000f0	1b f2		 sbb	 esi, edx

; 8041 : 
; 8042 : 	if (nMaximumHiddenVolSize < TC_MIN_HIDDEN_VOLUME_SIZE)

  000f2	33 db		 xor	 ebx, ebx
  000f4	3b f3		 cmp	 esi, ebx
  000f6	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA, edi
  000fc	89 35 04 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4, esi
  00102	0f 8f 82 00 00
	00		 jg	 $LN2@DetermineM
  00108	7c 08		 jl	 SHORT $LN12@DetermineM
  0010a	81 ff 00 a0 00
	00		 cmp	 edi, 40960		; 0000a000H
  00110	73 44		 jae	 SHORT $LN15@DetermineM
$LN12@DetermineM:

; 8043 : 	{
; 8044 : 		MessageBoxW (hwndDlg, GetString ("NO_SPACE_FOR_HIDDEN_VOL"), lpszTitle, ICON_HAND);

  00112	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00118	6a 10		 push	 16			; 00000010H
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
  00120	e8 00 00 00 00	 call	 _GetString
  00125	8b 74 24 28	 mov	 esi, DWORD PTR _hwndDlg$[esp+32]
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	56		 push	 esi
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8045 : 		UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  00139	6a 01		 push	 1
  0013b	50		 push	 eax
  0013c	56		 push	 esi
  0013d	e8 00 00 00 00	 call	 _UnmountVolume
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8046 : 		AbortProcessSilent ();

  00145	e8 00 00 00 00	 call	 _AbortProcessSilent
  0014a	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  00150	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
$LN15@DetermineM:

; 8047 : 	}
; 8048 : 
; 8049 : 	// Prepare the hidden volume size parameters
; 8050 : 	if (nMaximumHiddenVolSize < BYTES_PER_MB)

  00156	3b f3		 cmp	 esi, ebx
  00158	7f 30		 jg	 SHORT $LN2@DetermineM
  0015a	7c 08		 jl	 SHORT $LN13@DetermineM
  0015c	81 ff 00 00 10
	00		 cmp	 edi, 1048576		; 00100000H
  00162	73 0c		 jae	 SHORT $LN4@DetermineM
$LN13@DetermineM:

; 8051 : 		nMultiplier = BYTES_PER_KB;

  00164	c7 05 00 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, 1024 ; nMultiplier, 00000400H
  0016e	eb 24		 jmp	 SHORT $LN1@DetermineM
$LN4@DetermineM:

; 8052 : 	else if (nMaximumHiddenVolSize < BYTES_PER_GB)

  00170	3b f3		 cmp	 esi, ebx
  00172	7f 16		 jg	 SHORT $LN2@DetermineM
  00174	7c 08		 jl	 SHORT $LN14@DetermineM
  00176	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  0017c	73 0c		 jae	 SHORT $LN2@DetermineM
$LN14@DetermineM:

; 8053 : 		nMultiplier = BYTES_PER_MB;

  0017e	c7 05 00 00 00
	00 00 00 10 00	 mov	 DWORD PTR ?nMultiplier@@3HA, 1048576 ; nMultiplier, 00100000H

; 8054 : 	else

  00188	eb 0a		 jmp	 SHORT $LN1@DetermineM
$LN2@DetermineM:

; 8055 : 		nMultiplier = BYTES_PER_GB;

  0018a	c7 05 00 00 00
	00 00 00 00 40	 mov	 DWORD PTR ?nMultiplier@@3HA, 1073741824 ; nMultiplier, 40000000H
$LN1@DetermineM:
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5d		 pop	 ebp

; 8056 : 
; 8057 : 	nUIVolumeSize = 0;								// Set the initial value for the hidden volume size input field to the max

  00197	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  0019d	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx

; 8058 : 	nVolumeSize = nUIVolumeSize * nMultiplier;		// Chop off possible remainder

  001a3	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  001a9	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx

; 8059 : 
; 8060 : 	return 1;

  001af	b8 01 00 00 00	 mov	 eax, 1
  001b4	5b		 pop	 ebx

; 8061 : }

  001b5	83 c4 08	 add	 esp, 8
  001b8	c3		 ret	 0
_DetermineMaxHiddenVolSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_MountHiddenVolHost
EXTRN	_MountVolume:PROC
EXTRN	_GetLastAvailableDrive:PROC
;	COMDAT ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
CONST	SEGMENT
??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@ DB 'MountVolumesRemovable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MountHiddenVolHost
_TEXT	SEGMENT
_mountOptions$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_volumePath$ = 12					; size = 4
_driveNo$ = 16						; size = 4
_password$ = 20						; size = 4
_bReadOnly$ = 24					; size = 4
_MountHiddenVolHost PROC				; COMDAT

; 8219 : {

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 64	 mov	 DWORD PTR __$ArrayPad$[esp+104], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 74	 mov	 ebx, DWORD PTR _volumePath$[esp+104]
  00013	55		 push	 ebp
  00014	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR _password$[esp+108]
  0001b	56		 push	 esi
  0001c	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _driveNo$[esp+112]
  00023	57		 push	 edi
  00024	8b 7c 24 7c	 mov	 edi, DWORD PTR _hwndDlg$[esp+116]

; 8220 : 	MountOptions mountOptions;
; 8221 : 	ZeroMemory (&mountOptions, sizeof (mountOptions));

  00028	6a 64		 push	 100			; 00000064H
  0002a	8d 44 24 14	 lea	 eax, DWORD PTR _mountOptions$[esp+124]
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8222 : 
; 8223 : 	*driveNo = GetLastAvailableDrive ();

  00039	e8 00 00 00 00	 call	 _GetLastAvailableDrive
  0003e	89 06		 mov	 DWORD PTR [esi], eax

; 8224 : 
; 8225 : 	if (*driveNo == -1)

  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 1e		 jne	 SHORT $LN2@MountHidde
  00045	5f		 pop	 edi

; 8226 : 	{
; 8227 : 		*driveNo = -2;

  00046	c7 06 fe ff ff
	ff		 mov	 DWORD PTR [esi], -2	; fffffffeH
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp

; 8228 : 		return ERR_NO_FREE_DRIVES;

  0004e	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00053	5b		 pop	 ebx

; 8242 : 	}
; 8243 : 	return 0;
; 8244 : }

  00054	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  00058	33 cc		 xor	 ecx, esp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	83 c4 68	 add	 esp, 104		; 00000068H
  00062	c3		 ret	 0
$LN2@MountHidde:

; 8229 : 	}
; 8230 : 
; 8231 : 	mountOptions.ReadOnly = bReadOnly;

  00063	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR _bReadOnly$[esp+116]

; 8232 : 	mountOptions.Removable = ConfigReadInt ("MountVolumesRemovable", FALSE);

  0006a	6a 00		 push	 0
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
  00071	89 4c 24 18	 mov	 DWORD PTR _mountOptions$[esp+128], ecx
  00075	e8 00 00 00 00	 call	 _ConfigReadInt

; 8233 : 	mountOptions.ProtectHiddenVolume = FALSE;
; 8234 : 	mountOptions.PreserveTimestamp = bPreserveTimestamp;

  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bPreserveTimestamp

; 8235 : 	mountOptions.PartitionInInactiveSysEncScope = FALSE;
; 8236 : 	mountOptions.UseBackupHeader = FALSE;
; 8237 : 
; 8238 : 	if (MountVolume (hwndDlg, *driveNo, volumePath, password, FALSE, TRUE, &mountOptions, FALSE, TRUE) < 1)

  00080	6a 01		 push	 1
  00082	89 44 24 20	 mov	 DWORD PTR _mountOptions$[esp+136], eax
  00086	33 c0		 xor	 eax, eax
  00088	50		 push	 eax
  00089	8d 4c 24 20	 lea	 ecx, DWORD PTR _mountOptions$[esp+136]
  0008d	51		 push	 ecx
  0008e	6a 01		 push	 1
  00090	50		 push	 eax
  00091	55		 push	 ebp
  00092	89 54 24 3c	 mov	 DWORD PTR _mountOptions$[esp+164], edx
  00096	8b 16		 mov	 edx, DWORD PTR [esi]
  00098	53		 push	 ebx
  00099	52		 push	 edx
  0009a	57		 push	 edi
  0009b	89 44 24 44	 mov	 DWORD PTR _mountOptions$[esp+172], eax
  0009f	89 44 24 4c	 mov	 DWORD PTR _mountOptions$[esp+180], eax
  000a3	89 84 24 98 00
	00 00		 mov	 DWORD PTR _mountOptions$[esp+256], eax
  000aa	e8 00 00 00 00	 call	 _MountVolume
  000af	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	7d 1e		 jge	 SHORT $LN1@MountHidde
  000b7	5f		 pop	 edi

; 8239 : 	{
; 8240 : 		*driveNo = -3;

  000b8	c7 06 fd ff ff
	ff		 mov	 DWORD PTR [esi], -3	; fffffffdH
  000be	5e		 pop	 esi
  000bf	5d		 pop	 ebp

; 8241 : 		return ERR_VOL_MOUNT_FAILED;

  000c0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000c5	5b		 pop	 ebx

; 8242 : 	}
; 8243 : 	return 0;
; 8244 : }

  000c6	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000ca	33 cc		 xor	 ecx, esp
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	83 c4 68	 add	 esp, 104		; 00000068H
  000d4	c3		 ret	 0
$LN1@MountHidde:
  000d5	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5d		 pop	 ebp
  000dc	5b		 pop	 ebx
  000dd	33 cc		 xor	 ecx, esp
  000df	33 c0		 xor	 eax, eax
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	83 c4 68	 add	 esp, 104		; 00000068H
  000e9	c3		 ret	 0
_MountHiddenVolHost ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@	; `string'
PUBLIC	??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@		; `string'
PUBLIC	??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@	; `string'
PUBLIC	_nbrFreeClusters$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_ScanVolClusterBitmap
EXTRN	_free:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_malloc:PROC
EXTRN	__alldiv:PROC
;	COMDAT ??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@
CONST	SEGMENT
??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@ DB 'CANT_GET_CLUSTER_BITM'
	DB	'AP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
CONST	SEGMENT
??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@ DB 'ERR_MEM_ALLOC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@ DB 'CANT_ACCESS_OUTER_VOL', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ScanVolClusterBitmap
_TEXT	SEGMENT
_nbrFreeClusters$GSCopy$ = -32				; size = 4
_hDevice$ = -28						; size = 4
_lpInBuffer$ = -24					; size = 8
_lBytesReturned$ = -16					; size = 4
_tmpPath$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_nbrClusters$ = 16					; size = 8
_nbrFreeClusters$ = 24					; size = 4
_ScanVolClusterBitmap PROC				; COMDAT

; 8253 : {

  00000	83 ec 20	 sub	 esp, 32			; 00000020H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  0000e	8b 44 24 28	 mov	 eax, DWORD PTR _driveNo$[esp+28]
  00012	8b 4c 24 34	 mov	 ecx, DWORD PTR _nbrFreeClusters$[esp+28]

; 8254 : 	PVOLUME_BITMAP_BUFFER lpOutBuffer;
; 8255 : 	STARTING_LCN_INPUT_BUFFER lpInBuffer;
; 8256 : 
; 8257 : 	HANDLE hDevice;
; 8258 : 	DWORD lBytesReturned;
; 8259 : 	BYTE rmnd;
; 8260 : 	char tmpPath[7] = {'\\','\\','.','\\', (char) *driveNo + 'A', ':', 0};

  00016	8a 10		 mov	 dl, BYTE PTR [eax]
  00018	53		 push	 ebx
  00019	8b 5c 24 28	 mov	 ebx, DWORD PTR _hwndDlg$[esp+32]
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi

; 8261 : 
; 8262 : 	DWORD bufLen;
; 8263 : 	__int64 bitmapCnt;
; 8264 : 
; 8265 : 	hDevice = CreateFile (tmpPath, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	6a 03		 push	 3
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	89 4c 24 24	 mov	 DWORD PTR _nbrFreeClusters$GSCopy$[esp+68], ecx
  0002e	b1 5c		 mov	 cl, 92			; 0000005cH
  00030	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00035	8d 44 24 3c	 lea	 eax, DWORD PTR _tmpPath$[esp+72]
  00039	80 c2 41	 add	 dl, 65			; 00000041H
  0003c	50		 push	 eax
  0003d	88 4c 24 40	 mov	 BYTE PTR _tmpPath$[esp+76], cl
  00041	88 4c 24 41	 mov	 BYTE PTR _tmpPath$[esp+77], cl
  00045	c6 44 24 42 2e	 mov	 BYTE PTR _tmpPath$[esp+78], 46 ; 0000002eH
  0004a	88 4c 24 43	 mov	 BYTE PTR _tmpPath$[esp+79], cl
  0004e	88 54 24 44	 mov	 BYTE PTR _tmpPath$[esp+80], dl
  00052	c6 44 24 45 3a	 mov	 BYTE PTR _tmpPath$[esp+81], 58 ; 0000003aH
  00057	c6 44 24 46 00	 mov	 BYTE PTR _tmpPath$[esp+82], 0
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00062	8b f8		 mov	 edi, eax
  00064	89 7c 24 14	 mov	 DWORD PTR _hDevice$[esp+48], edi

; 8266 : 
; 8267 : 	if (hDevice == INVALID_HANDLE_VALUE)

  00068	83 ff ff	 cmp	 edi, -1
  0006b	75 10		 jne	 SHORT $LN11@ScanVolClu

; 8268 : 	{
; 8269 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00073	6a 10		 push	 16			; 00000010H
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  0007b	eb 48		 jmp	 SHORT $LN20@ScanVolClu
$LN11@ScanVolClu:

; 8270 : 		goto vcmf_error;
; 8271 : 	}
; 8272 : 
; 8273 :  	bufLen = (DWORD) (nbrClusters / 8 + 2 * sizeof(LARGE_INTEGER));

  0007d	8b 54 24 40	 mov	 edx, DWORD PTR _nbrClusters$[esp+48]
  00081	8b 44 24 3c	 mov	 eax, DWORD PTR _nbrClusters$[esp+44]
  00085	6a 00		 push	 0
  00087	6a 08		 push	 8
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 __alldiv
  00090	8b c8		 mov	 ecx, eax
  00092	83 c1 10	 add	 ecx, 16			; 00000010H

; 8274 : 	bufLen += 100000 + bufLen/10;	// Add reserve

  00095	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  0009a	f7 e1		 mul	 ecx
  0009c	c1 ea 03	 shr	 edx, 3
  0009f	8d ac 11 a0 86
	01 00		 lea	 ebp, DWORD PTR [ecx+edx+100000]

; 8275 : 
; 8276 : 	lpOutBuffer = (PVOLUME_BITMAP_BUFFER) malloc (bufLen);

  000a6	55		 push	 ebp
  000a7	e8 00 00 00 00	 call	 _malloc
  000ac	8b f0		 mov	 esi, eax

; 8277 : 
; 8278 : 	if (lpOutBuffer == NULL)

  000ae	33 c0		 xor	 eax, eax
  000b0	83 c4 04	 add	 esp, 4
  000b3	3b f0		 cmp	 esi, eax
  000b5	75 34		 jne	 SHORT $LN9@ScanVolClu

; 8279 : 	{
; 8280 : 		MessageBoxW (hwndDlg, GetString ("ERR_MEM_ALLOC"), lpszTitle, ICON_HAND);

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  000bd	6a 10		 push	 16			; 00000010H
  000bf	51		 push	 ecx
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
$LN20@ScanVolClu:
  000c5	e8 00 00 00 00	 call	 _GetString
  000ca	83 c4 04	 add	 esp, 4
  000cd	50		 push	 eax
  000ce	53		 push	 ebx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5d		 pop	 ebp

; 8333 : 
; 8334 : vcmf_error:
; 8335 : 	return -1;

  000d8	83 c8 ff	 or	 eax, -1
  000db	5b		 pop	 ebx

; 8336 : }

  000dc	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  000e0	33 cc		 xor	 ecx, esp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	83 c4 20	 add	 esp, 32			; 00000020H
  000ea	c3		 ret	 0
$LN9@ScanVolClu:

; 8281 : 		goto vcmf_error;
; 8282 : 	}
; 8283 : 
; 8284 : 	lpInBuffer.StartingLcn.QuadPart = 0;
; 8285 : 
; 8286 : 	if ( !DeviceIoControl (hDevice,
; 8287 : 		FSCTL_GET_VOLUME_BITMAP,
; 8288 : 		&lpInBuffer,
; 8289 : 		sizeof(lpInBuffer),
; 8290 : 		lpOutBuffer,
; 8291 : 		bufLen,  
; 8292 : 		&lBytesReturned,
; 8293 : 		NULL))

  000eb	50		 push	 eax
  000ec	8d 54 24 24	 lea	 edx, DWORD PTR _lBytesReturned$[esp+52]
  000f0	52		 push	 edx
  000f1	55		 push	 ebp
  000f2	56		 push	 esi
  000f3	6a 08		 push	 8
  000f5	89 44 24 2c	 mov	 DWORD PTR _lpInBuffer$[esp+68], eax
  000f9	89 44 24 30	 mov	 DWORD PTR _lpInBuffer$[esp+72], eax
  000fd	8d 44 24 2c	 lea	 eax, DWORD PTR _lpInBuffer$[esp+68]
  00101	50		 push	 eax
  00102	68 6f 00 09 00	 push	 589935			; 0009006fH
  00107	57		 push	 edi
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0010e	85 c0		 test	 eax, eax
  00110	75 4d		 jne	 SHORT $LN7@ScanVolClu

; 8294 : 	{
; 8295 : 		handleWin32Error (hwndDlg);

  00112	53		 push	 ebx
  00113	e8 00 00 00 00	 call	 _handleWin32Error

; 8296 : 		MessageBoxW (hwndDlg, GetString ("CANT_GET_CLUSTER_BITMAP"), lpszTitle, ICON_HAND);

  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  0011e	83 c4 04	 add	 esp, 4
  00121	6a 10		 push	 16			; 00000010H
  00123	51		 push	 ecx
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@
  00129	e8 00 00 00 00	 call	 _GetString
  0012e	83 c4 04	 add	 esp, 4
  00131	50		 push	 eax
  00132	53		 push	 ebx
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8328 : 	return 1;
; 8329 : 
; 8330 : vcm_error:
; 8331 : 	CloseHandle (hDevice);

  00139	57		 push	 edi
$vcm_error$135063:
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8332 : 	free(lpOutBuffer);

  00140	56		 push	 esi
  00141	e8 00 00 00 00	 call	 _free
  00146	83 c4 04	 add	 esp, 4
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5d		 pop	 ebp
$vcmf_error$135054:

; 8333 : 
; 8334 : vcmf_error:
; 8335 : 	return -1;

  0014c	83 c8 ff	 or	 eax, -1
  0014f	5b		 pop	 ebx

; 8336 : }

  00150	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00154	33 cc		 xor	 ecx, esp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	83 c4 20	 add	 esp, 32			; 00000020H
  0015e	c3		 ret	 0
$LN7@ScanVolClu:

; 8297 : 
; 8298 : 		goto vcm_error;
; 8299 : 	}
; 8300 : 
; 8301 : 	rmnd = (BYTE) (lpOutBuffer->BitmapSize.QuadPart % 8);

  0015f	8b 6e 0c	 mov	 ebp, DWORD PTR [esi+12]
  00162	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00165	6a 00		 push	 0
  00167	6a 08		 push	 8
  00169	55		 push	 ebp
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 __allrem
  00170	8a d8		 mov	 bl, al

; 8302 : 
; 8303 : 	if ((rmnd != 0) 
; 8304 : 	&& ((lpOutBuffer->Buffer[lpOutBuffer->BitmapSize.QuadPart / 8] & ((1 << rmnd)-1) ) != 0))

  00172	84 db		 test	 bl, bl
  00174	74 2e		 je	 SHORT $LN18@ScanVolClu
  00176	6a 00		 push	 0
  00178	6a 08		 push	 8
  0017a	55		 push	 ebp
  0017b	57		 push	 edi
  0017c	e8 00 00 00 00	 call	 __alldiv
  00181	ba 01 00 00 00	 mov	 edx, 1
  00186	8a cb		 mov	 cl, bl
  00188	d3 e2		 shl	 edx, cl
  0018a	4a		 dec	 edx
  0018b	84 54 30 10	 test	 BYTE PTR [eax+esi+16], dl
  0018f	74 13		 je	 SHORT $LN18@ScanVolClu

; 8305 : 	{
; 8306 : 		*nbrFreeClusters = 0;

  00191	8b 44 24 10	 mov	 eax, DWORD PTR _nbrFreeClusters$GSCopy$[esp+48]
  00195	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0019b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 8307 : 	}
; 8308 : 	else

  001a2	eb 66		 jmp	 SHORT $LN2@ScanVolClu
$LN18@ScanVolClu:

; 8309 : 	{
; 8310 : 		*nbrFreeClusters = lpOutBuffer->BitmapSize.QuadPart;

  001a4	8b c7		 mov	 eax, edi
  001a6	8b 7c 24 10	 mov	 edi, DWORD PTR _nbrFreeClusters$GSCopy$[esp+48]
  001aa	89 07		 mov	 DWORD PTR [edi], eax
  001ac	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 8311 : 		bitmapCnt = lpOutBuffer->BitmapSize.QuadPart / 8;

  001af	6a 00		 push	 0
  001b1	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  001b4	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001b7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ba	6a 08		 push	 8
  001bc	52		 push	 edx
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 __alldiv

; 8312 : 
; 8313 : 		// Scan the bitmap from the end
; 8314 : 		while (--bitmapCnt >= 0)

  001c3	83 e8 01	 sub	 eax, 1
  001c6	83 da 00	 sbb	 edx, 0
  001c9	78 3f		 js	 SHORT $LN2@ScanVolClu
  001cb	7f 04		 jg	 SHORT $LL3@ScanVolClu
  001cd	85 c0		 test	 eax, eax
  001cf	72 39		 jb	 SHORT $LN2@ScanVolClu
$LL3@ScanVolClu:

; 8315 : 		{
; 8316 : 			if (lpOutBuffer->Buffer[bitmapCnt] != 0)

  001d1	80 7c 06 10 00	 cmp	 BYTE PTR [esi+eax+16], 0
  001d6	75 12		 jne	 SHORT $LN15@ScanVolClu
  001d8	83 c0 ff	 add	 eax, -1
  001db	83 d2 ff	 adc	 edx, -1
  001de	85 d2		 test	 edx, edx
  001e0	7f ef		 jg	 SHORT $LL3@ScanVolClu

; 8312 : 
; 8313 : 		// Scan the bitmap from the end
; 8314 : 		while (--bitmapCnt >= 0)

  001e2	7c 26		 jl	 SHORT $LN2@ScanVolClu
  001e4	85 c0		 test	 eax, eax
  001e6	73 e9		 jae	 SHORT $LL3@ScanVolClu

; 8315 : 		{
; 8316 : 			if (lpOutBuffer->Buffer[bitmapCnt] != 0)

  001e8	eb 20		 jmp	 SHORT $LN2@ScanVolClu
$LN15@ScanVolClu:

; 8317 : 			{
; 8318 : 				// There might be up to 7 extra free clusters in this byte of the bitmap. 
; 8319 : 				// These are ignored because there is always a cluster reserve added anyway.
; 8320 : 				*nbrFreeClusters = lpOutBuffer->BitmapSize.QuadPart - ((bitmapCnt + 1) * 8);	

  001ea	6a 00		 push	 0
  001ec	83 c0 01	 add	 eax, 1
  001ef	6a 08		 push	 8
  001f1	83 d2 00	 adc	 edx, 0
  001f4	52		 push	 edx
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 __allmul
  001fb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001fe	2b c8		 sub	 ecx, eax
  00200	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00203	1b c2		 sbb	 eax, edx
  00205	89 0f		 mov	 DWORD PTR [edi], ecx
  00207	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN2@ScanVolClu:

; 8321 : 				break;
; 8322 : 			}
; 8323 : 		}
; 8324 : 	}
; 8325 : 
; 8326 : 	CloseHandle (hDevice);

  0020a	8b 4c 24 14	 mov	 ecx, DWORD PTR _hDevice$[esp+48]
  0020e	51		 push	 ecx
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8327 : 	free(lpOutBuffer);

  00215	56		 push	 esi
  00216	e8 00 00 00 00	 call	 _free

; 8336 : }

  0021b	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0021f	83 c4 04	 add	 esp, 4
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5d		 pop	 ebp
  00225	5b		 pop	 ebx
  00226	33 cc		 xor	 ecx, esp
  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00232	83 c4 20	 add	 esp, 32			; 00000020H
  00235	c3		 ret	 0
_ScanVolClusterBitmap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally8347@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ
_TEXT	SEGMENT
??1Finally8347@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ PROC ; `WipeHiddenOSCreationConfig'::`6'::Finally8347::~Finally8347, COMDAT

; 8347 : 			finally_do ({ NormalCursor(); });

  00000	e9 00 00 00 00	 jmp	 _NormalCursor
??1Finally8347@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ENDP ; `WipeHiddenOSCreationConfig'::`6'::Finally8347::~Finally8347
_TEXT	ENDS
EXTRN	_GetDriveGeometry:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetFormatSectorSize
_TEXT	SEGMENT
_geometry$ = -24					; size = 24
_GetFormatSectorSize PROC				; COMDAT

; 8992 : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 8993 : 	if (!bDevice)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0000a	75 09		 jne	 SHORT $LN2@GetFormatS

; 8994 : 		return TC_SECTOR_SIZE_FILE_HOSTED_VOLUME;

  0000c	b8 00 02 00 00	 mov	 eax, 512		; 00000200H

; 9005 : }

  00011	83 c4 18	 add	 esp, 24			; 00000018H
  00014	c3		 ret	 0
$LN2@GetFormatS:

; 8995 : 
; 8996 : 	DISK_GEOMETRY geometry;
; 8997 : 
; 8998 : 	if (!GetDriveGeometry (szDiskFile, &geometry))

  00015	8d 04 24	 lea	 eax, DWORD PTR _geometry$[esp+24]
  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0001e	e8 00 00 00 00	 call	 _GetDriveGeometry
  00023	83 c4 08	 add	 esp, 8
  00026	85 c0		 test	 eax, eax
  00028	75 14		 jne	 SHORT $LN1@GetFormatS

; 8999 : 	{
; 9000 : 		handleWin32Error (MainDlg);

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _handleWin32Error
  00036	83 c4 04	 add	 esp, 4

; 9001 : 		AbortProcessSilent();

  00039	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN1@GetFormatS:

; 9002 : 	}
; 9003 : 
; 9004 : 	return geometry.BytesPerSector;

  0003e	8b 44 24 14	 mov	 eax, DWORD PTR _geometry$[esp+44]

; 9005 : }

  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	c3		 ret	 0
_GetFormatSectorSize ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 727  : 		}

  00017	c3		 ret	 0
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	f7 d8		 neg	 eax
  00019	1b c0		 sbb	 eax, eax
  0001b	40		 inc	 eax

; 737  : 		}

  0001c	c3		 ret	 0
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00009	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000e	f7 e9		 imul	 ecx
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	57		 push	 edi
  00019	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0001d	03 c2		 add	 eax, edx
  0001f	3b f8		 cmp	 edi, eax
  00021	72 05		 jb	 SHORT $LN3@operator@2
  00023	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@2:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  00028	8b c7		 mov	 eax, edi
  0002a	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00030	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 786  : 		}

  00035	c2 04 00	 ret	 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@3
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@3
$LN19@operator@3:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@3
$LN15@operator@3:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@3:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@3
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@3:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$141750 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@7
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141750[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@7
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@7
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@7:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141750[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@7
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@7:
  00049	5e		 pop	 esi
$LN7@scalar@7:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@7
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@7:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	66 8b 41 30	 mov	 ax, WORD PTR [ecx+48]

; 107  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 206  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 224  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	d1 fa		 sar	 edx, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 06	 sar	 edx, 6
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 636  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@XZ	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHostDevice@@@std@@QAE@XZ PROC		; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UHostDevice@@@std@@QAE@XZ ENDP		; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put, COMDAT
; _this$ = ecx

; 1092 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 20	 mov	 edx, DWORD PTR __Val$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 20	 mov	 edx, DWORD PTR __Fill$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 20	 mov	 edx, DWORD PTR __Iosbase$[esp+12]
  0001d	52		 push	 edx
  0001e	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00022	52		 push	 edx
  00023	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00027	52		 push	 edx
  00028	56		 push	 esi
  00029	ff d0		 call	 eax
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 1093 : 		}

  0002e	c2 1c 00	 ret	 28			; 0000001cH
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN21@operator@4
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@4
$LN21@operator@4:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@4
$LN17@operator@4:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@4:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN22@operator@4
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN22@operator@4:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T141978 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T141978[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T141978[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T141978[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T141978[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ; std::allocator<HostDevice>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@5
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@5
$LN4@operator@5:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 06	 sar	 edx, 6
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	5f		 pop	 edi
  0002d	03 c2		 add	 eax, edx
  0002f	5e		 pop	 esi

; 195  : 		}

  00030	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@6
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@6
$LN4@operator@6:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ	; std::allocator<HostDevice>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ PROC	; std::allocator<HostDevice>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ ENDP	; std::allocator<HostDevice>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN26@operator@7
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN16@operator@7
$LN26@operator@7:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN17@operator@7
$LN16@operator@7:
  00019	33 c9		 xor	 ecx, ecx
$LN17@operator@7:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN4@operator@7
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN22@operator@7
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN23@operator@7
$LN22@operator@7:
  00037	33 c0		 xor	 eax, eax
$LN23@operator@7:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN27@operator@7
$LN4@operator@7:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@7:

; 164  : 		_Myptr += _Off;

  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 165  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 166  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T142169 = -12						; size = 12
$T142174 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T142174[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142169[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142174[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142169[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142169[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
_TEXT	ENDS
PUBLIC	??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z
_TEXT	SEGMENT
$T142183 = -12						; size = 12
$T142187 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z PROC ; std::_Allocate<HostDevice>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T142187[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142183[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142187[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142183[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142183[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  0005b	cc		 int	 3
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ENDP ; std::_Allocate<HostDevice>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T142193 = -12						; size = 12
$T142197 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T142197[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142193[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142197[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142193[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142193[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T142201 = -12						; size = 12
$T142205 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T142205[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142201[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142205[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142201[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142201[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ; std::_Iter_random<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Iter_random<HostDevice *,HostDevice *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Iter_random<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ; std::_Ptr_cat<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z PROC ; std::_Ptr_cat<HostDevice *,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ENDP ; std::_Ptr_cat<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ; std::_Move_cat<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z PROC ; std::_Move_cat<HostDevice *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ENDP ; std::_Move_cat<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??4HostDevice@@QAEAAU0@ABU0@@Z			; HostDevice::operator=
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 23		 je	 SHORT $LN200@Copy_opt
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL3@Copy_opt

; 2473 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2474 : 	}

  00030	c3		 ret	 0
$LN200@Copy_opt:

; 2473 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2474 : 	}

  00037	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z	; std::ctype<wchar_t>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ; std::ctype<wchar_t>::_Do_narrow_s
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T142753 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2025 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2026 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142753[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	83 c4 04	 add	 esp, 4
  00034	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00037	e8 00 00 00 00	 call	 __Getcvt
  0003c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0003f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 2027 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
PUBLIC	?is@?$ctype@_W@std@@QBE_NF_W@Z			; std::ctype<wchar_t>::is
; Function compile flags: /Ogtpy
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 1922 : 		return (do_is(_Maskval, _Ch));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2040 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2041 : 		if (_Ctype._Delfl)

  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN9@ctype

; 2042 : 			free((void *)_Ctype._Table);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN9@ctype:

; 2043 : 		}

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
EXTRN	__Getwctype:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2054 : 		return ((::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Getwctype
  0000e	83 c4 08	 add	 esp, 8
  00011	66 85 44 24 04	 test	 WORD PTR __Maskval$[esp-4], ax
  00016	b8 00 00 00 00	 mov	 eax, 0
  0001b	0f 95 c0	 setne	 al

; 2055 : 		}

  0001e	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
EXTRN	__Getwctypes:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2060 : 		_DEBUG_RANGE(_First, _Last);
; 2061 : 		_DEBUG_POINTER(_Dest);
; 2062 : 		return (::_Getwctypes(_First, _Last, _Dest, &_Ctype));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	83 c1 08	 add	 ecx, 8
  0000b	51		 push	 ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Last$[esp]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __Getwctypes
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 2063 : 		}

  0001b	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2067 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp

; 2068 : 		_DEBUG_RANGE(_First, _Last);
; 2069 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_is
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_is:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	75 07		 jne	 SHORT $LN11@do_scan_is
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_is
$LN11@do_scan_is:
  0002f	5b		 pop	 ebx
$LN10@do_scan_is:
  00030	5f		 pop	 edi

; 2070 : 			;
; 2071 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2072 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2076 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp

; 2077 : 		_DEBUG_RANGE(_First, _Last);
; 2078 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_no
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_no:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	74 07		 je	 SHORT $LN11@do_scan_no
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_no
$LN11@do_scan_no:
  0002f	5b		 pop	 ebx
$LN10@do_scan_no:
  00030	5f		 pop	 edi

; 2079 : 			;
; 2080 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2081 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
EXTRN	__Towlower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2085 : 		return (_Towlower(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towlower
  0000e	83 c4 08	 add	 esp, 8

; 2086 : 		}

  00011	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2090 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2091 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2092 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 2093 : 			*_First = _Towlower(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towlower
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_tolower
  00029	5f		 pop	 edi
$LN8@do_tolower:

; 2094 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2095 : 		}

  0002e	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
EXTRN	__Towupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2099 : 		return (_Towupper(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towupper
  0000e	83 c4 08	 add	 esp, 8

; 2100 : 		}

  00011	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2104 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2105 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2106 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 2107 : 			*_First = _Towupper(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towupper
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_toupper
  00029	5f		 pop	 edi
$LN8@do_toupper:

; 2108 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2109 : 		}

  0002e	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
PUBLIC	?_Dowiden@?$ctype@_W@std@@IBE_WD@Z		; std::ctype<wchar_t>::_Dowiden
EXTRN	__Mbrtowc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst$ = -4						; size = 4
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2112 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2113 : 		_Mbstinit(_Mbst);
; 2114 : 		wchar_t _Wc;
; 2115 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
; 2116 : 			? (wchar_t)WEOF : _Wc);

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	51		 push	 ecx
  00007	8d 44 24 08	 lea	 eax, DWORD PTR __Mbst$[esp+12]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Byte$[esp+16]
  00012	51		 push	 ecx
  00013	8d 54 24 10	 lea	 edx, DWORD PTR __Wc$[esp+24]
  00017	52		 push	 edx
  00018	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+28], 0
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002f	7c 04		 jl	 SHORT $LN4@Dowiden
  00031	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$[esp+8]
$LN4@Dowiden:

; 2117 : 		}

  00035	83 c4 08	 add	 esp, 8
  00038	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Wc$142828 = -8					; size = 2
__Mbst$142827 = -4					; size = 4
$T142829 = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2120 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2121 : 		return (_Dowiden(_Byte));

  00003	8a 44 24 0c	 mov	 al, BYTE PTR __Byte$[esp+4]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	51		 push	 ecx
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst$142827[esp+12]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	8d 54 24 18	 lea	 edx, DWORD PTR $T142829[esp+16]
  00016	88 44 24 18	 mov	 BYTE PTR $T142829[esp+16], al
  0001a	52		 push	 edx
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$142828[esp+24]
  0001f	50		 push	 eax
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$142827[esp+28], 0
  00028	e8 00 00 00 00	 call	 __Mbrtowc
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	85 c0		 test	 eax, eax
  00032	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00037	7c 04		 jl	 SHORT $LN6@do_widen
  00039	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$142828[esp+8]
$LN6@do_widen:

; 2122 : 		}

  0003d	83 c4 08	 add	 esp, 8
  00040	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2128 : 		// assume there is enough space in _Dest
; 2129 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2130 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
_TEXT	SEGMENT
__Wc$142842 = 8						; size = 2
__First$ = 8						; size = 4
$T142843 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Mbst$142841 = 20					; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z PROC	; std::ctype<wchar_t>::_Do_widen_s, COMDAT
; _this$ = ecx

; 2134 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 2135 : 		_DEBUG_RANGE(_First, _Last);
; 2136 : 		_DEBUG_POINTER(_Dest);
; 2137 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	8b c3		 mov	 eax, ebx
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	39 44 24 1c	 cmp	 DWORD PTR __Dest_size$[esp+8], eax
  00015	73 05		 jae	 SHORT $LN6@Do_widen_s
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_widen_s:

; 2138 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 4a		 je	 SHORT $LN16@Do_widen_s
  00020	55		 push	 ebp
  00021	8d 6f 18	 lea	 ebp, DWORD PTR [edi+24]
  00024	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+12]
$LL3@Do_widen_s:

; 2139 : 			*_Dest = _Dowiden(*_First);

  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	55		 push	 ebp
  0002b	8d 54 24 24	 lea	 edx, DWORD PTR __Mbst$142841[esp+16]
  0002f	52		 push	 edx
  00030	6a 01		 push	 1
  00032	8d 44 24 24	 lea	 eax, DWORD PTR $T142843[esp+24]
  00036	88 4c 24 24	 mov	 BYTE PTR $T142843[esp+24], cl
  0003a	50		 push	 eax
  0003b	8d 4c 24 24	 lea	 ecx, DWORD PTR __Wc$142842[esp+28]
  0003f	51		 push	 ecx
  00040	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR __Mbst$142841[esp+32], 0
  00048	e8 00 00 00 00	 call	 __Mbrtowc
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	7c 05		 jl	 SHORT $LN13@Do_widen_s
  00059	0f b7 44 24 14	 movzx	 eax, WORD PTR __Wc$142842[esp+12]
$LN13@Do_widen_s:
  0005e	66 89 07	 mov	 WORD PTR [edi], ax
  00061	46		 inc	 esi
  00062	83 c7 02	 add	 edi, 2
  00065	3b f3		 cmp	 esi, ebx
  00067	75 bf		 jne	 SHORT $LL3@Do_widen_s
  00069	5d		 pop	 ebp
$LN16@Do_widen_s:
  0006a	5f		 pop	 edi

; 2140 : 		return (_First);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 2141 : 		}

  0006f	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z ENDP	; std::ctype<wchar_t>::_Do_widen_s
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?_Donarrow@?$ctype@_W@std@@IBED_WD@Z		; std::ctype<wchar_t>::_Donarrow
EXTRN	__Wcrtomb:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -16						; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2144 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2145 : 		char _Buf[MB_LEN_MAX];
; 2146 : 		_Mbstinit(_Mbst);
; 2147 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
; 2148 : 			? _Dflt : _Buf[0]);

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN4@Donarrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$[esp+16]
$LN4@Donarrow:

; 2149 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$142865 = -16					; size = 4
__Buf$142864 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2152 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2153 : 		return (_Donarrow(_Ch, _Dflt));

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$142865[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$142864[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$142865[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN6@do_narrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$142864[esp+16]
$LN6@do_narrow:

; 2154 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2161 : 		// assume there is enough space in _Dest
; 2162 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	d1 ff		 sar	 edi, 1
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00021	52		 push	 edx
  00022	ff d0		 call	 eax
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 2163 : 		}

  00026	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
_TEXT	SEGMENT
__Mbst$142881 = -16					; size = 4
__Buf$142880 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z PROC	; std::ctype<wchar_t>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 2169 : 		{	// narrow elements in [_First, _Last) to chars

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 2170 : 		_DEBUG_RANGE(_First, _Last);
; 2171 : 		_DEBUG_POINTER(_Dest);
; 2172 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00010	8b 6c 24 20	 mov	 ebp, DWORD PTR __Last$[esp+20]
  00014	56		 push	 esi
  00015	8b 74 24 20	 mov	 esi, DWORD PTR __First$[esp+24]
  00019	8b c5		 mov	 eax, ebp
  0001b	2b c6		 sub	 eax, esi
  0001d	d1 f8		 sar	 eax, 1
  0001f	57		 push	 edi
  00020	8b 7c 24 30	 mov	 edi, DWORD PTR __Dest$[esp+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	39 44 24 34	 cmp	 DWORD PTR __Dest_size$[esp+28], eax
  0002a	73 05		 jae	 SHORT $LN6@Do_narrow_
  0002c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_narrow_:

; 2173 : 		for (; _First != _Last; ++_First, ++_Dest)

  00031	3b f5		 cmp	 esi, ebp
  00033	74 39		 je	 SHORT $LN16@Do_narrow_
  00035	83 c3 18	 add	 ebx, 24			; 00000018H
$LL3@Do_narrow_:

; 2174 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00038	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0003b	53		 push	 ebx
  0003c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst$142881[esp+36]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8d 54 24 20	 lea	 edx, DWORD PTR __Buf$142880[esp+44]
  00046	52		 push	 edx
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __Mbst$142881[esp+48], 0
  0004f	e8 00 00 00 00	 call	 __Wcrtomb
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	8a 44 24 2c	 mov	 al, BYTE PTR __Dflt$[esp+28]
  0005e	75 04		 jne	 SHORT $LN13@Do_narrow_
  00060	8a 44 24 14	 mov	 al, BYTE PTR __Buf$142880[esp+32]
$LN13@Do_narrow_:
  00064	88 07		 mov	 BYTE PTR [edi], al
  00066	83 c6 02	 add	 esi, 2
  00069	47		 inc	 edi
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 ca		 jne	 SHORT $LL3@Do_narrow_
$LN16@Do_narrow_:

; 2175 : 		return (_First);
; 2176 : 		}

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00072	5f		 pop	 edi
  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ENDP	; std::ctype<wchar_t>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN4@scalar@9
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN4@scalar@9:
  0001b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00026	74 09		 je	 SHORT $LN11@scalar@9
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN11@scalar@9:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
_TEXT	ENDS
;	COMDAT _SysEncInEffect
_TEXT	SEGMENT
_SysEncInEffect PROC					; COMDAT

; 604  : 	return (WizardMode == WIZARD_MODE_SYS_DEVICE
; 605  : 		|| CreatingHiddenSysVol());

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00005	83 f8 02	 cmp	 eax, 2
  00008	74 20		 je	 SHORT $LN3@SysEncInEf
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00010	85 c9		 test	 ecx, ecx
  00012	74 13		 je	 SHORT $LN7@SysEncInEf
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0001a	85 d2		 test	 edx, edx
  0001c	74 09		 je	 SHORT $LN7@SysEncInEf
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00023	85 c0		 test	 eax, eax
  00025	74 03		 je	 SHORT $LN3@SysEncInEf
$LN7@SysEncInEf:
  00027	33 c0		 xor	 eax, eax

; 606  : }

  00029	c3		 ret	 0
$LN3@SysEncInEf:

; 604  : 	return (WizardMode == WIZARD_MODE_SYS_DEVICE
; 605  : 		|| CreatingHiddenSysVol());

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 606  : }

  0002f	c3		 ret	 0
_SysEncInEffect ENDP
_TEXT	ENDS
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetParent@4:PROC
EXTRN	__atoi64:PROC
;	COMDAT ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA
_BSS	SEGMENT
?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA DQ 01H DUP (?) ; `VerifySizeAndUpdate'::`2'::nLastVolumeSize
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _VerifySizeAndUpdate
_TEXT	SEGMENT
_bEnable$ = -108					; size = 4
tv73 = -104						; size = 4
_i$ = -104						; size = 4
tv240 = -100						; size = 8
_hwndDlg$GSCopy$ = -92					; size = 4
tv239 = -88						; size = 8
_geometry$142930 = -80					; size = 24
_szTmp$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_bUpdate$ = 8						; size = 4
_VerifySizeAndUpdate PROC				; COMDAT
; _hwndDlg$ = ecx

; 1257 : {

  00000	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+108], eax
  0000e	53		 push	 ebx

; 1258 : 	BOOL bEnable = TRUE;
; 1259 : 	char szTmp[50];
; 1260 : 	__int64 lTmp;
; 1261 : 	size_t i;
; 1262 : 	static unsigned __int64 nLastVolumeSize = 0;
; 1263 : 
; 1264 : 	GetWindowText (GetDlgItem (hwndDlg, IDC_SIZEBOX), szTmp, sizeof (szTmp));

  0000f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	6a 32		 push	 50			; 00000032H
  0001a	8d 44 24 48	 lea	 eax, DWORD PTR _szTmp$[esp+128]
  0001e	50		 push	 eax
  0001f	8b f9		 mov	 edi, ecx
  00021	68 0e 04 00 00	 push	 1038			; 0000040eH
  00026	bd 01 00 00 00	 mov	 ebp, 1
  0002b	57		 push	 edi
  0002c	89 7c 24 30	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+140], edi
  00030	89 6c 24 20	 mov	 DWORD PTR _bEnable$[esp+140], ebp
  00034	ff d3		 call	 ebx
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 1265 : 
; 1266 : 	for (i = 0; i < strlen (szTmp); i++)

  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  00041	33 d2		 xor	 edx, edx
  00043	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL36@VerifySize:
  00046	8a 08		 mov	 cl, BYTE PTR [eax]
  00048	40		 inc	 eax
  00049	84 c9		 test	 cl, cl
  0004b	75 f9		 jne	 SHORT $LL36@VerifySize
  0004d	2b c6		 sub	 eax, esi
  0004f	74 2c		 je	 SHORT $LN46@VerifySize
$LL23@VerifySize:

; 1267 : 	{
; 1268 : 		if (szTmp[i] >= '0' && szTmp[i] <= '9')

  00051	8a 44 14 44	 mov	 al, BYTE PTR _szTmp$[esp+edx+124]
  00055	3c 30		 cmp	 al, 48			; 00000030H
  00057	7c 1c		 jl	 SHORT $LN20@VerifySize
  00059	3c 39		 cmp	 al, 57			; 00000039H
  0005b	7f 18		 jg	 SHORT $LN20@VerifySize
  0005d	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  00061	03 d5		 add	 edx, ebp
  00063	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL37@VerifySize:
  00066	8a 08		 mov	 cl, BYTE PTR [eax]
  00068	40		 inc	 eax
  00069	84 c9		 test	 cl, cl
  0006b	75 f9		 jne	 SHORT $LL37@VerifySize
  0006d	2b c6		 sub	 eax, esi
  0006f	3b d0		 cmp	 edx, eax
  00071	72 de		 jb	 SHORT $LL23@VerifySize

; 1265 : 
; 1266 : 	for (i = 0; i < strlen (szTmp); i++)

  00073	eb 08		 jmp	 SHORT $LN46@VerifySize
$LN20@VerifySize:

; 1269 : 			continue;
; 1270 : 		else
; 1271 : 		{
; 1272 : 			bEnable = FALSE;

  00075	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _bEnable$[esp+124], 0
$LN46@VerifySize:

; 1273 : 			break;
; 1274 : 		}
; 1275 : 	}
; 1276 : 
; 1277 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_KB)))

  0007d	68 f3 03 00 00	 push	 1011			; 000003f3H
  00082	57		 push	 edi
  00083	ff d3		 call	 ebx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsButtonChecked
  0008b	83 c4 04	 add	 esp, 4
  0008e	85 c0		 test	 eax, eax
  00090	74 07		 je	 SHORT $LN18@VerifySize

; 1278 : 		nMultiplier = BYTES_PER_KB;

  00092	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00097	eb 1f		 jmp	 SHORT $LN47@VerifySize
$LN18@VerifySize:

; 1279 : 	else if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_MB)))

  00099	68 f5 03 00 00	 push	 1013			; 000003f5H
  0009e	57		 push	 edi
  0009f	ff d3		 call	 ebx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _IsButtonChecked
  000a7	83 c4 04	 add	 esp, 4
  000aa	f7 d8		 neg	 eax
  000ac	1b c0		 sbb	 eax, eax
  000ae	25 00 00 10 c0	 and	 eax, -1072693248	; c0100000H
  000b3	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
$LN47@VerifySize:

; 1280 : 		nMultiplier = BYTES_PER_MB;
; 1281 : 	else
; 1282 : 		nMultiplier = BYTES_PER_GB;
; 1283 : 
; 1284 : 	if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  000b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
  000c4	74 2e		 je	 SHORT $LN14@VerifySize
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 0a		 je	 SHORT $LN13@VerifySize
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  000d6	85 d2		 test	 edx, edx
  000d8	74 15		 je	 SHORT $LN42@VerifySize
$LN13@VerifySize:

; 1285 : 	{
; 1286 : 		lTmp = nVolumeSize;

  000da	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nVolumeSize@@3_KA
  000e0	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?nVolumeSize@@3_KA+4

; 1287 : 		i = 1;

  000e6	89 6c 24 14	 mov	 DWORD PTR _i$[esp+124], ebp

; 1288 : 	}
; 1289 : 	else

  000ea	e9 a8 00 00 00	 jmp	 $LN44@VerifySize
$LN42@VerifySize:
  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
$LN14@VerifySize:

; 1290 : 	{
; 1291 : 		i = nMultiplier;

  000f4	89 44 24 14	 mov	 DWORD PTR _i$[esp+124], eax

; 1292 : 		lTmp = _atoi64 (szTmp);

  000f8	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 __atoi64
  00102	83 c4 04	 add	 esp, 4

; 1293 : 
; 1294 : 		int sectorSize = GetFormatSectorSize();

  00105	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0010c	8b f8		 mov	 edi, eax
  0010e	8b da		 mov	 ebx, edx
  00110	75 07		 jne	 SHORT $LN31@VerifySize
  00112	be 00 02 00 00	 mov	 esi, 512		; 00000200H
  00117	eb 2e		 jmp	 SHORT $LN32@VerifySize
$LN31@VerifySize:
  00119	8d 4c 24 2c	 lea	 ecx, DWORD PTR _geometry$142930[esp+124]
  0011d	51		 push	 ecx
  0011e	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00123	e8 00 00 00 00	 call	 _GetDriveGeometry
  00128	83 c4 08	 add	 esp, 8
  0012b	85 c0		 test	 eax, eax
  0012d	75 14		 jne	 SHORT $LN30@VerifySize
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 _handleWin32Error
  0013b	83 c4 04	 add	 esp, 4
  0013e	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN30@VerifySize:
  00143	8b 74 24 40	 mov	 esi, DWORD PTR _geometry$142930[esp+144]
$LN32@VerifySize:

; 1295 : 		uint32 sectorSizeRem = (lTmp * nMultiplier) % sectorSize;

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  0014c	53		 push	 ebx
  0014d	99		 cdq
  0014e	57		 push	 edi
  0014f	8b e8		 mov	 ebp, eax
  00151	52		 push	 edx
  00152	55		 push	 ebp
  00153	89 54 24 38	 mov	 DWORD PTR tv239[esp+144], edx
  00157	e8 00 00 00 00	 call	 __allmul
  0015c	8b c8		 mov	 ecx, eax
  0015e	89 54 24 1c	 mov	 DWORD PTR tv240[esp+128], edx
  00162	8b c6		 mov	 eax, esi
  00164	99		 cdq
  00165	52		 push	 edx
  00166	50		 push	 eax
  00167	8b 44 24 24	 mov	 eax, DWORD PTR tv240[esp+136]
  0016b	50		 push	 eax
  0016c	51		 push	 ecx
  0016d	89 4c 24 28	 mov	 DWORD PTR tv240[esp+140], ecx
  00171	e8 00 00 00 00	 call	 __allrem

; 1296 : 
; 1297 : 		if (sectorSizeRem != 0)

  00176	85 c0		 test	 eax, eax
  00178	74 1d		 je	 SHORT $LN44@VerifySize

; 1298 : 			lTmp = (lTmp * nMultiplier + (sectorSize - sectorSizeRem)) / nMultiplier;

  0017a	8b 54 24 28	 mov	 edx, DWORD PTR tv239[esp+128]
  0017e	2b f0		 sub	 esi, eax
  00180	33 c9		 xor	 ecx, ecx
  00182	03 74 24 18	 add	 esi, DWORD PTR tv240[esp+124]
  00186	52		 push	 edx
  00187	13 4c 24 20	 adc	 ecx, DWORD PTR tv240[esp+132]
  0018b	55		 push	 ebp
  0018c	51		 push	 ecx
  0018d	56		 push	 esi
  0018e	e8 00 00 00 00	 call	 __alldiv
  00193	8b f8		 mov	 edi, eax
  00195	8b da		 mov	 ebx, edx
$LN44@VerifySize:

; 1299 : 	}
; 1300 : 
; 1301 : 	if (bEnable)

  00197	83 7c 24 10 00	 cmp	 DWORD PTR _bEnable$[esp+124], 0
  0019c	0f 84 9f 00 00
	00		 je	 $LN43@VerifySize

; 1302 : 	{
; 1303 : 		if (lTmp * i < (bHiddenVolHost ? TC_MIN_HIDDEN_VOLUME_HOST_SIZE : (bHiddenVol ? TC_MIN_HIDDEN_VOLUME_SIZE : TC_MIN_VOLUME_SIZE)))

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  001a7	85 c0		 test	 eax, eax
  001a9	74 07		 je	 SHORT $LN26@VerifySize
  001ab	be 00 50 05 00	 mov	 esi, 348160		; 00055000H
  001b0	eb 16		 jmp	 SHORT $LN27@VerifySize
$LN26@VerifySize:
  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  001b8	f7 de		 neg	 esi
  001ba	1b f6		 sbb	 esi, esi
  001bc	81 e6 00 10 fc
	ff		 and	 esi, -258048		; fffc1000H
  001c2	81 c6 00 90 04
	00		 add	 esi, 299008		; 00049000H
$LN27@VerifySize:
  001c8	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$[esp+124]
  001cc	53		 push	 ebx
  001cd	57		 push	 edi
  001ce	6a 00		 push	 0
  001d0	51		 push	 ecx
  001d1	e8 00 00 00 00	 call	 __allmul
  001d6	8b e8		 mov	 ebp, eax
  001d8	8b ca		 mov	 ecx, edx
  001da	8b c6		 mov	 eax, esi
  001dc	99		 cdq
  001dd	3b ca		 cmp	 ecx, edx
  001df	7f 0e		 jg	 SHORT $LN45@VerifySize
  001e1	7c 04		 jl	 SHORT $LN38@VerifySize
  001e3	3b e8		 cmp	 ebp, eax
  001e5	73 08		 jae	 SHORT $LN45@VerifySize
$LN38@VerifySize:

; 1304 : 			bEnable = FALSE;

  001e7	33 f6		 xor	 esi, esi
  001e9	89 74 24 10	 mov	 DWORD PTR _bEnable$[esp+124], esi
  001ed	eb 02		 jmp	 SHORT $LN9@VerifySize
$LN45@VerifySize:
  001ef	33 f6		 xor	 esi, esi
$LN9@VerifySize:

; 1305 : 
; 1306 : 		if (!bHiddenVolHost && bHiddenVol)

  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  001f7	85 d2		 test	 edx, edx
  001f9	75 1b		 jne	 SHORT $LN8@VerifySize
  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00200	85 c0		 test	 eax, eax
  00202	74 12		 je	 SHORT $LN8@VerifySize

; 1307 : 		{
; 1308 : 			if (lTmp * i > nMaximumHiddenVolSize)

  00204	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  0020a	7c 35		 jl	 SHORT $LN43@VerifySize
  0020c	7f 2f		 jg	 SHORT $LN40@VerifySize
  0020e	3b 2d 00 00 00
	00		 cmp	 ebp, DWORD PTR ?nMaximumHiddenVolSize@@3_JA

; 1309 : 				bEnable = FALSE;
; 1310 : 		}
; 1311 : 		else

  00214	eb 25		 jmp	 SHORT $LN48@VerifySize
$LN8@VerifySize:

; 1312 : 		{
; 1313 : 			if (lTmp * i > (bHiddenVolHost ? TC_MAX_HIDDEN_VOLUME_HOST_SIZE : TC_MAX_VOLUME_SIZE))

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0021c	85 d2		 test	 edx, edx
  0021e	74 0c		 je	 SHORT $LN28@VerifySize
  00220	ba 00 00 fc ff	 mov	 edx, -262144		; fffc0000H
  00225	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0022a	eb 07		 jmp	 SHORT $LN29@VerifySize
$LN28@VerifySize:
  0022c	33 d2		 xor	 edx, edx
  0022e	b8 00 00 04 00	 mov	 eax, 262144		; 00040000H
$LN29@VerifySize:
  00233	3b c8		 cmp	 ecx, eax
  00235	7c 0a		 jl	 SHORT $LN43@VerifySize
  00237	7f 04		 jg	 SHORT $LN40@VerifySize
  00239	3b ea		 cmp	 ebp, edx
$LN48@VerifySize:
  0023b	76 04		 jbe	 SHORT $LN43@VerifySize
$LN40@VerifySize:

; 1314 : 				bEnable = FALSE;

  0023d	89 74 24 10	 mov	 DWORD PTR _bEnable$[esp+124], esi
$LN43@VerifySize:

; 1315 : 		}
; 1316 : 	}
; 1317 : 
; 1318 : 	if (bUpdate)

  00241	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR _bUpdate$[esp+120], 0
  00249	74 41		 je	 SHORT $LN3@VerifySize

; 1319 : 	{
; 1320 : 		nUIVolumeSize = lTmp;
; 1321 : 
; 1322 : 		if (!bDevice || (bHiddenVol && !bHiddenVolHost))	// Update only if it's not a raw device or if it's a hidden volume

  0024b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00252	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, edi
  00258	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0025e	74 13		 je	 SHORT $LN2@VerifySize
  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00265	85 c0		 test	 eax, eax
  00267	74 23		 je	 SHORT $LN3@VerifySize
  00269	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0026f	85 c9		 test	 ecx, ecx
  00271	75 19		 jne	 SHORT $LN3@VerifySize
$LN2@VerifySize:

; 1323 : 			nVolumeSize = i * lTmp;

  00273	8b 54 24 14	 mov	 edx, DWORD PTR _i$[esp+124]
  00277	53		 push	 ebx
  00278	57		 push	 edi
  00279	6a 00		 push	 0
  0027b	52		 push	 edx
  0027c	e8 00 00 00 00	 call	 __allmul
  00281	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  00286	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
$LN3@VerifySize:

; 1324 : 	}
; 1325 : 
; 1326 : 	EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), bEnable);

  0028c	8b 44 24 10	 mov	 eax, DWORD PTR _bEnable$[esp+124]
  00290	8b 4c 24 20	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+124]
  00294	50		 push	 eax
  00295	68 10 04 00 00	 push	 1040			; 00000410H
  0029a	51		 push	 ecx
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  002a1	50		 push	 eax
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1327 : 
; 1328 : 	if (nVolumeSize != nLastVolumeSize)

  002af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  002b4	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  002ba	5f		 pop	 edi
  002bb	5e		 pop	 esi
  002bc	5d		 pop	 ebp
  002bd	5b		 pop	 ebx
  002be	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA
  002c4	75 08		 jne	 SHORT $LN41@VerifySize
  002c6	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA+4
  002cc	74 15		 je	 SHORT $LN1@VerifySize
$LN41@VerifySize:

; 1329 : 	{
; 1330 : 		// Change of volume size may make some file systems allowed or disallowed, so the default filesystem must
; 1331 : 		// be reselected.
; 1332 : 		fileSystem = FILESYS_NONE;	

  002ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem

; 1333 : 		nLastVolumeSize = nVolumeSize;

  002d8	a3 00 00 00 00	 mov	 DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA, eax
  002dd	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA+4, ecx
$LN1@VerifySize:

; 1334 : 	}
; 1335 : }

  002e3	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+108]
  002e7	33 cc		 xor	 ecx, esp
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	83 c4 6c	 add	 esp, 108		; 0000006cH
  002f1	c3		 ret	 0
_VerifySizeAndUpdate ENDP
_TEXT	ENDS
;	COMDAT ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA
_BSS	SEGMENT
?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA DD 01H DUP (?) ; `UpdateNonSysInplaceEncProgressBar'::`2'::lastNonSysInplaceEncStatus
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _UpdateNonSysInplaceEncProgressBar
_TEXT	SEGMENT
_UpdateNonSysInplaceEncProgressBar PROC			; COMDAT

; 1901 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1902 : 	static int lastNonSysInplaceEncStatus = NONSYS_INPLACE_ENC_STATUS_NONE;
; 1903 : 	int nonSysInplaceEncStatus = NonSysInplaceEncStatus;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _NonSysInplaceEncStatus

; 1904 : 	__int64 totalSize = NonSysInplaceEncTotalSize;
; 1905 : 
; 1906 : 	if (bVolTransformThreadRunning 
; 1907 : 		&& (nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_ENCRYPTING
; 1908 : 		|| nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1909 : 		|| nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED))

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0000d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _NonSysInplaceEncTotalSize
  00013	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncTotalSize+4
  00019	85 c0		 test	 eax, eax
  0001b	74 70		 je	 SHORT $LN1@UpdateNonS
  0001d	83 ff 03	 cmp	 edi, 3
  00020	74 0a		 je	 SHORT $LN5@UpdateNonS
  00022	83 ff 04	 cmp	 edi, 4
  00025	74 05		 je	 SHORT $LN5@UpdateNonS
  00027	83 ff 06	 cmp	 edi, 6
  0002a	75 61		 jne	 SHORT $LN1@UpdateNonS
$LN5@UpdateNonS:

; 1910 : 	{
; 1911 : 		if (lastNonSysInplaceEncStatus != nonSysInplaceEncStatus
; 1912 : 			&& nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_ENCRYPTING)

  0002c	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00032	74 18		 je	 SHORT $LN4@UpdateNonS
  00034	83 ff 03	 cmp	 edi, 3
  00037	75 13		 jne	 SHORT $LN4@UpdateNonS

; 1913 : 		{
; 1914 : 			InitNonSysInplaceEncProgressBar ();

  00039	e8 00 00 00 00	 call	 _InitNonSysInplaceEncProgressBar

; 1923 : 		}
; 1924 : 	}
; 1925 : 
; 1926 : 	ShowNonSysInPlaceEncUIStatus ();

  0003e	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus

; 1927 : 
; 1928 : 	lastNonSysInplaceEncStatus = nonSysInplaceEncStatus;

  00043	89 3d 00 00 00
	00		 mov	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 1929 : }

  0004b	c3		 ret	 0
$LN4@UpdateNonS:

; 1915 : 		}
; 1916 : 		else
; 1917 : 		{
; 1918 : 			if (totalSize <= 0 && nVolumeSize > 0)

  0004c	85 d2		 test	 edx, edx
  0004e	7f 27		 jg	 SHORT $LN12@UpdateNonS
  00050	7c 04		 jl	 SHORT $LN10@UpdateNonS
  00052	85 f6		 test	 esi, esi
  00054	77 21		 ja	 SHORT $LN12@UpdateNonS
$LN10@UpdateNonS:
  00056	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00061	85 c0		 test	 eax, eax
  00063	77 04		 ja	 SHORT $LN11@UpdateNonS
  00065	85 c9		 test	 ecx, ecx
  00067	76 04		 jbe	 SHORT $LN2@UpdateNonS
$LN11@UpdateNonS:

; 1919 : 				totalSize = nVolumeSize;

  00069	8b f1		 mov	 esi, ecx
  0006b	8b d0		 mov	 edx, eax
$LN2@UpdateNonS:

; 1920 : 
; 1921 : 			if (totalSize > 0)

  0006d	85 d2		 test	 edx, edx
  0006f	7c 1c		 jl	 SHORT $LN1@UpdateNonS
  00071	7f 04		 jg	 SHORT $LN12@UpdateNonS
  00073	85 f6		 test	 esi, esi
  00075	76 16		 jbe	 SHORT $LN1@UpdateNonS
$LN12@UpdateNonS:

; 1922 : 				UpdateProgressBarProc (NonSysInplaceEncBytesDone);

  00077	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncBytesDone+4
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone
  00083	51		 push	 ecx
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0008a	83 c4 08	 add	 esp, 8
$LN1@UpdateNonS:

; 1923 : 		}
; 1924 : 	}
; 1925 : 
; 1926 : 	ShowNonSysInPlaceEncUIStatus ();

  0008d	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus

; 1927 : 
; 1928 : 	lastNonSysInplaceEncStatus = nonSysInplaceEncStatus;

  00092	89 3d 00 00 00
	00		 mov	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1929 : }

  0009a	c3		 ret	 0
_UpdateNonSysInplaceEncProgressBar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@ ; `string'
EXTRN	?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
EXTRN	?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortDecoyOSWipe
;	COMDAT ??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@
CONST	SEGMENT
??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@ DB 'FAILED_TO_INTERRUP'
	DB	'T_WIPING', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeAbort$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeAbort$2
__catchsym$_WipeAbort$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$_WipeAbort$0
__unwindtable$_WipeAbort DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WipeAbort DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$_WipeAbort
	DD	02H
	DD	FLAT:__tryblocktable$_WipeAbort
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_WipeAbort DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_WipeAbort$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_WipeAbort$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeAbort
_TEXT	SEGMENT
$T142961 = -88						; size = 16
$T142960 = -72						; size = 16
$T142959 = -56						; size = 16
_decoySysPartitionWipeStatus$132356 = -40		; size = 16
_e$132359 = -24						; size = 4
_e$132369 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeAbort PROC						; COMDAT

; 2000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeAbort
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2001 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00030	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00036	6a 00		 push	 0
  00038	68 f8 03 00 00	 push	 1016			; 000003f8H
  0003d	50		 push	 eax
  0003e	ff d7		 call	 edi
  00040	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00046	50		 push	 eax
  00047	ff d6		 call	 esi

; 2002 : 
; 2003 : 	if (bHiddenOS && IsHiddenOSRunning())

  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0004f	85 c9		 test	 ecx, ecx
  00051	0f 84 a4 01 00
	00		 je	 $LN9@WipeAbort
  00057	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 97 01 00
	00		 je	 $LN9@WipeAbort

; 2004 : 	{
; 2005 : 		/* Decoy system partition wipe */	
; 2006 : 		
; 2007 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2008 : 
; 2009 : 		try
; 2010 : 		{
; 2011 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006a	8d 55 c8	 lea	 edx, DWORD PTR $T142959[ebp]
  0006d	52		 push	 edx
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0007a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	89 55 dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+4], edx
  00082	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00085	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00088	89 4d d8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp], ecx
  0008b	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+8], edx
  0008e	89 45 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+12], eax
  00091	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 2018 : 		}
; 2019 : 
; 2020 : 		if (!decoySysPartitionWipeStatus.WipeInProgress)

  00098	85 c9		 test	 ecx, ecx
  0009a	75 13		 jne	 SHORT $LN7@WipeAbort

; 2021 : 		{
; 2022 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  000a2	6a 01		 push	 1
  000a4	68 f8 03 00 00	 push	 1016			; 000003f8H
  000a9	51		 push	 ecx

; 2023 : 			return;

  000aa	e9 5f 01 00 00	 jmp	 $LN28@WipeAbort
$LN7@WipeAbort:

; 2024 : 		}
; 2025 : 
; 2026 : 		WaitCursor ();

  000af	e8 00 00 00 00	 call	 _WaitCursor

; 2027 : 
; 2028 : 		try
; 2029 : 		{
; 2030 : 			int attempts = SYSENC_PAUSE_RETRIES;
; 2031 : 
; 2032 : 			BootEncObj->AbortDecoyOSWipe ();

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000c1	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
  000c6	e8 00 00 00 00	 call	 ?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortDecoyOSWipe

; 2033 : 
; 2034 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000d1	8d 55 b8	 lea	 edx, DWORD PTR $T142960[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000e0	8b 30		 mov	 esi, DWORD PTR [eax]
  000e2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000e5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
  000eb	89 4d dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+4], ecx
  000ee	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+8], edx
  000f1	89 45 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+12], eax
$LN29@WipeAbort:
  000f4	89 75 d8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp], esi

; 2035 : 
; 2036 : 			while (decoySysPartitionWipeStatus.WipeInProgress && attempts > 0)

  000f7	85 f6		 test	 esi, esi
  000f9	74 2e		 je	 SHORT $LN23@WipeAbort
  000fb	85 ff		 test	 edi, edi
  000fd	7e 50		 jle	 SHORT $LN19@WipeAbort

; 2037 : 			{
; 2038 : 				Sleep (SYSENC_PAUSE_RETRY_INTERVAL);

  000ff	6a 64		 push	 100			; 00000064H
  00101	ff d3		 call	 ebx

; 2039 : 				attempts--;
; 2040 : 				decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00103	8d 4d a8	 lea	 ecx, DWORD PTR $T142961[ebp]
  00106	51		 push	 ecx
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010d	4f		 dec	 edi
  0010e	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00113	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	8b 30		 mov	 esi, DWORD PTR [eax]
  0011b	89 55 dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+4], edx
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	89 4d e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+8], ecx
  00124	89 55 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132356[ebp+12], edx

; 2041 : 			}

  00127	eb cb		 jmp	 SHORT $LN29@WipeAbort
$LN23@WipeAbort:

; 2042 : 
; 2043 : 			if (!decoySysPartitionWipeStatus.WipeInProgress)
; 2044 : 				BootEncObj->CheckDecoyOSWipeResult ();

  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0012f	e8 00 00 00 00	 call	 ?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
  00134	eb 19		 jmp	 SHORT $LN19@WipeAbort
__catch$_WipeAbort$2:

; 2045 : 
; 2046 : 		}
; 2047 : 		catch (Exception &e)
; 2048 : 		{
; 2049 : 			e.Show (MainDlg);

  00136	8b 4d ec	 mov	 ecx, DWORD PTR _e$132369[ebp]
  00139	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00141	8b 00		 mov	 eax, DWORD PTR [eax]
  00143	52		 push	 edx
  00144	ff d0		 call	 eax

; 2050 : 		}

  00146	b8 00 00 00 00	 mov	 eax, $LN24@WipeAbort
  0014b	c3		 ret	 0
$LN24@WipeAbort:
  0014c	8b 75 d8	 mov	 esi, DWORD PTR _decoySysPartitionWipeStatus$132356[ebp]
$LN19@WipeAbort:

; 2051 : 
; 2052 : 		NormalCursor ();

  0014f	e8 00 00 00 00	 call	 _NormalCursor

; 2053 : 
; 2054 : 		if (decoySysPartitionWipeStatus.WipeInProgress)

  00154	85 f6		 test	 esi, esi
  00156	0f 84 93 00 00
	00		 je	 $LN26@WipeAbort

; 2055 : 		{
; 2056 : 			SetTimer (MainDlg, TIMER_ID_WIPE_PROGRESS, TIMER_INTERVAL_WIPE_PROGRESS, NULL);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00162	6a 00		 push	 0
  00164	6a 1e		 push	 30			; 0000001eH
  00166	68 02 01 00 00	 push	 258			; 00000102H
  0016b	51		 push	 ecx
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 2057 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00172	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00178	6a 01		 push	 1
  0017a	68 f8 03 00 00	 push	 1016			; 000003f8H
  0017f	52		 push	 edx
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00186	50		 push	 eax
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2058 : 			Error ("FAILED_TO_INTERRUPT_WIPING");

  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@
  00192	e8 00 00 00 00	 call	 _Error
  00197	83 c4 04	 add	 esp, 4

; 2069 : }

  0019a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a4	59		 pop	 ecx
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
__catch$_WipeAbort$0:

; 2012 : 		}
; 2013 : 		catch (Exception &e)
; 2014 : 		{
; 2015 : 			e.Show (MainDlg);

  001ac	8b 4d e8	 mov	 ecx, DWORD PTR _e$132359[ebp]
  001af	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  001b7	8b 00		 mov	 eax, DWORD PTR [eax]
  001b9	52		 push	 edx
  001ba	ff d0		 call	 eax

; 2016 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  001bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001c2	6a 01		 push	 1
  001c4	68 f8 03 00 00	 push	 1016			; 000003f8H
  001c9	51		 push	 ecx
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001d0	50		 push	 eax
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2017 : 			return;

  001d7	b8 00 00 00 00	 mov	 eax, $LN17@WipeAbort
  001dc	c3		 ret	 0
$LN17@WipeAbort:

; 2069 : }

  001dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e7	59		 pop	 ecx
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN26@WipeAbort:

; 2017 : 			return;

  001ef	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  001f5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
$LN9@WipeAbort:

; 2059 : 			return;
; 2060 : 		}
; 2061 : 	}
; 2062 : 	else
; 2063 : 	{
; 2064 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2065 : 	}
; 2066 : 
; 2067 : 	UpdateWipeControls ();

  001fb	e8 00 00 00 00	 call	 _UpdateWipeControls

; 2068 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00200	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00206	6a 01		 push	 1
  00208	68 f8 03 00 00	 push	 1016			; 000003f8H
  0020d	52		 push	 edx
$LN28@WipeAbort:
  0020e	ff d7		 call	 edi
  00210	50		 push	 eax
  00211	ff d6		 call	 esi

; 2069 : }

  00213	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00216	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021d	59		 pop	 ecx
  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_WipeAbort:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeAbort
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeAbort ENDP
PUBLIC	??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@	; `string'
EXTRN	?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z:PROC ; CipherShed::BootEncryption::StartDecoyOSWipe
;	COMDAT ??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@
CONST	SEGMENT
??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@ DB 'FAILED_TO_START_WIPING'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeStart$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeStart$0
__unwindtable$_WipeStart DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_WipeStart DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_WipeStart$2
__ehfuncinfo$_WipeStart DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_WipeStart
	DD	01H
	DD	FLAT:__tryblocktable$_WipeStart
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeStart
_TEXT	SEGMENT
_e$132378 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeStart PROC						; COMDAT

; 2073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeStart
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2074 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00030	85 c0		 test	 eax, eax
  00032	0f 84 b1 00 00
	00		 je	 $LN2@WipeStart
  00038	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 a4 00 00
	00		 je	 $LN2@WipeStart

; 2075 : 	{
; 2076 : 		/* Decoy system partition wipe */
; 2077 : 
; 2078 : 		EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0004b	33 f6		 xor	 esi, esi
  0004d	56		 push	 esi
  0004e	68 f8 03 00 00	 push	 1016			; 000003f8H
  00053	51		 push	 ecx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2079 : 
; 2080 : 		bDeviceWipeInProgress = FALSE;

  00061	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, esi ; bDeviceWipeInProgress

; 2081 : 		WaitCursor ();

  00067	e8 00 00 00 00	 call	 _WaitCursor

; 2082 : 
; 2083 : 		try
; 2084 : 		{
; 2085 : 			BootEncObj->StartDecoyOSWipe (nWipeMode);	

  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00078	52		 push	 edx
  00079	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  0007c	e8 00 00 00 00	 call	 ?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z ; CipherShed::BootEncryption::StartDecoyOSWipe

; 2086 : 
; 2087 : 			bDeviceWipeInProgress = TRUE;

  00081	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 1 ; bDeviceWipeInProgress
$LN10@WipeStart:

; 2093 : 
; 2094 : 		NormalCursor ();

  0008b	e8 00 00 00 00	 call	 _NormalCursor

; 2095 : 
; 2096 : 		if (!bDeviceWipeInProgress)

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  00097	75 50		 jne	 SHORT $LN2@WipeStart

; 2097 : 		{
; 2098 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0009f	6a 01		 push	 1
  000a1	68 f8 03 00 00	 push	 1016			; 000003f8H
  000a6	51		 push	 ecx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2099 : 			Error ("FAILED_TO_START_WIPING");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@
  000b9	e8 00 00 00 00	 call	 _Error
  000be	83 c4 04	 add	 esp, 4

; 2113 : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
__catch$_WipeStart$0:

; 2088 : 		}
; 2089 : 		catch (Exception &e)
; 2090 : 		{
; 2091 : 			e.Show (MainDlg);

  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _e$132378[ebp]
  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000de	8b 00		 mov	 eax, DWORD PTR [eax]
  000e0	52		 push	 edx
  000e1	ff d0		 call	 eax

; 2092 : 		}

  000e3	b8 00 00 00 00	 mov	 eax, $LN10@WipeStart
  000e8	c3		 ret	 0
$LN2@WipeStart:

; 2100 : 			return;
; 2101 : 		}
; 2102 : 	}
; 2103 : 	else
; 2104 : 	{
; 2105 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2106 : 	}
; 2107 : 
; 2108 : 	InitWipeProgressBar ();

  000e9	e8 00 00 00 00	 call	 _InitWipeProgressBar

; 2109 : 	UpdateWipeProgressBar ();

  000ee	e8 00 00 00 00	 call	 _UpdateWipeProgressBar

; 2110 : 	UpdateWipeControls ();

  000f3	e8 00 00 00 00	 call	 _UpdateWipeControls

; 2111 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  000f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000fe	6a 01		 push	 1
  00100	68 f8 03 00 00	 push	 1016			; 000003f8H
  00105	52		 push	 edx
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2112 : 	SetTimer (MainDlg, TIMER_ID_WIPE_PROGRESS, TIMER_INTERVAL_WIPE_PROGRESS, NULL);

  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00118	6a 00		 push	 0
  0011a	6a 1e		 push	 30			; 0000001eH
  0011c	68 02 01 00 00	 push	 258			; 00000102H
  00121	50		 push	 eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 2113 : }

  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_WipeStart:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeStart
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeStart ENDP
PUBLIC	??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@		; `string'
PUBLIC	??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@ ; `string'
PUBLIC	??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@		; `string'
PUBLIC	??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@	; `string'
PUBLIC	??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@	; `string'
PUBLIC	??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@ ; `string'
PUBLIC	??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@ ; `string'
PUBLIC	??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@		; `string'
PUBLIC	??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@ ; `string'
PUBLIC	??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@ ; `string'
PUBLIC	??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@ ; `string'
PUBLIC	??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@	; `string'
PUBLIC	??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@		; `string'
PUBLIC	??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@		; `string'
PUBLIC	??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@		; `string'
PUBLIC	??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@		; `string'
PUBLIC	??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@ ; `string'
PUBLIC	??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__endthread:PROC
EXTRN	_LastDialogId:DWORD
EXTRN	__imp__VirtualUnlock@8:PROC
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	_Info:PROC
EXTRN	_Warning:PROC
EXTRN	_RestoreDefaultKeyFilesParam:PROC
EXTRN	_ShowInPlaceEncErrMsgWAltSteps:PROC
EXTRN	_handleError:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_TCFormatVolume:PROC
EXTRN	_EncryptPartitionInPlaceResume:PROC
EXTRN	_EncryptPartitionInPlaceBegin:PROC
EXTRN	_SetNonSysInplaceEncUIStatus:PROC
EXTRN	__chmod:PROC
EXTRN	__errno:PROC
EXTRN	__access:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_IsAdmin:PROC
EXTRN	__imp__VirtualLock@8:PROC
;	COMDAT ??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
CONST	SEGMENT
??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@ DB 'FORMAT_CANCELED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@
CONST	SEGMENT
??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@ DB 'NONSYS_INPLACE_EN'
	DB	'C_CANCELED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@ DB 'FORMAT_FINISHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@
CONST	SEGMENT
??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@ DB 'SPARSE_FILE_SIZE_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@
CONST	SEGMENT
??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@ DB 'FORMAT_FINISHED_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
CONST	SEGMENT
??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@ DB 'NONSYS_INPLACE_E'
	DB	'NC_FINISHED_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@
CONST	SEGMENT
??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@ DB 'HIDVOL_FORMAT_FIN'
	DB	'ISHED_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@ DB 'CREATE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@
CONST	SEGMENT
??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@ DB 'INPLACE_ENC_GENE'
	DB	'RIC_ERR_ALT_STEPS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@ DB 'NO_FREE_DRIVE_FOR'
	DB	'_OUTER_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@
CONST	SEGMENT
??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@ DB 'INPLACE_ENC_GEN'
	DB	'ERIC_ERR_RESUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@ DB 'CANT_MOUNT_OUTER_VOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@ DB 'OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@
CONST	SEGMENT
??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@ DB 'ACCESSMODEFAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@
CONST	SEGMENT
??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@ DB 'OVERWRITEPROMPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@
CONST	SEGMENT
??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@ DB 'READONLYPROMPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
CONST	SEGMENT
??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@ DB 'ADMIN_PRIVILEGE'
	DB	'S_WARN_DEVICES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@
CONST	SEGMENT
??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@ DB 'ADMIN_PRIVILEGES_W'
	DB	'ARN_NTFS', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT _volTransformThreadFunction
_TEXT	SEGMENT
_hPartition$132468 = -17440				; size = 4
_geometry$143022 = -17436				; size = 24
_szTmp$132450 = -17412					; size = 1024
_szMsg$132504 = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_hwndDlgArg$ = 8					; size = 4
_volTransformThreadFunction PROC			; COMDAT

; 2263 : {

  00000	b8 20 44 00 00	 mov	 eax, 17440		; 00004420H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 1c 44
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+17440], eax
  00018	53		 push	 ebx
  00019	8b 9c 24 28 44
	00 00		 mov	 ebx, DWORD PTR _hwndDlgArg$[esp+17440]
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	57		 push	 edi

; 2264 : 	int nStatus;
; 2265 : 	DWORD dwWin32FormatError;
; 2266 : 	BOOL bHidden;
; 2267 : 	HWND hwndDlg = (HWND) hwndDlgArg;
; 2268 : 	volatile FORMAT_VOL_PARAMETERS *volParams = (FORMAT_VOL_PARAMETERS *) malloc (sizeof(FORMAT_VOL_PARAMETERS));

  00023	6a 50		 push	 80			; 00000050H
  00025	e8 00 00 00 00	 call	 _malloc
  0002a	8b f0		 mov	 esi, eax
  0002c	83 c4 04	 add	 esp, 4

; 2269 : 
; 2270 : 	if (volParams == NULL)

  0002f	85 f6		 test	 esi, esi
  00031	75 0d		 jne	 SHORT $LN79@volTransfo

; 2271 : 		AbortProcess ("ERR_MEM_ALLOC");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
  00038	e8 00 00 00 00	 call	 _AbortProcess
  0003d	83 c4 04	 add	 esp, 4
$LN79@volTransfo:

; 2272 : 
; 2273 : 	VirtualLock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00040	6a 50		 push	 80			; 00000050H
  00042	56		 push	 esi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 2274 : 
; 2275 : 	bVolTransformThreadRunning = TRUE;

  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, 1 ; bVolTransformThreadRunning

; 2276 : 	bVolTransformThreadToRun = FALSE;

  00053	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun

; 2277 : 
; 2278 : 	// Check administrator privileges
; 2279 : 	if (!IsAdmin () && !IsUacSupported ())

  0005d	e8 00 00 00 00	 call	 _IsAdmin
  00062	85 c0		 test	 eax, eax
  00064	75 70		 jne	 SHORT $LN73@volTransfo
  00066	e8 00 00 00 00	 call	 _IsUacSupported
  0006b	85 c0		 test	 eax, eax
  0006d	75 67		 jne	 SHORT $LN73@volTransfo

; 2280 : 	{
; 2281 : 		if (fileSystem == FILESYS_NTFS)

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  00074	83 f8 02	 cmp	 eax, 2
  00077	75 2a		 jne	 SHORT $LN76@volTransfo

; 2282 : 		{
; 2283 : 			if (MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_NTFS"), lpszTitle, MB_OKCANCEL|MB_ICONWARNING|MB_DEFBUTTON2) == IDCANCEL)

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  0007f	68 31 01 00 00	 push	 305			; 00000131H
  00084	51		 push	 ecx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@
  0008a	e8 00 00 00 00	 call	 _GetString
  0008f	83 c4 04	 add	 esp, 4
  00092	50		 push	 eax
  00093	53		 push	 ebx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  0009a	83 f8 02	 cmp	 eax, 2
  0009d	0f 84 7d 06 00
	00		 je	 $cancel$132440
$LN76@volTransfo:

; 2284 : 				goto cancel;
; 2285 : 		}
; 2286 : 		if (bDevice)

  000a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  000aa	74 2a		 je	 SHORT $LN73@volTransfo

; 2287 : 		{
; 2288 : 			if (MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_DEVICES"), lpszTitle, MB_OKCANCEL|MB_ICONWARNING|MB_DEFBUTTON2) == IDCANCEL)

  000ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  000b2	68 31 01 00 00	 push	 305			; 00000131H
  000b7	52		 push	 edx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  000bd	e8 00 00 00 00	 call	 _GetString
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	53		 push	 ebx
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  000cd	83 f8 02	 cmp	 eax, 2
  000d0	0f 84 4a 06 00
	00		 je	 $cancel$132440
$LN73@volTransfo:

; 2289 : 				goto cancel;
; 2290 : 		}
; 2291 : 	}
; 2292 : 
; 2293 : 	if (!bInPlaceEncNonSys)

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  000db	85 c0		 test	 eax, eax
  000dd	0f 85 ff 00 00
	00		 jne	 $LN58@volTransfo

; 2294 : 	{
; 2295 : 		if (!bDevice)

  000e3	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, eax ; bDevice
  000e9	0f 85 e6 00 00
	00		 jne	 $LN70@volTransfo

; 2296 : 		{
; 2297 : 			int x = _access (szDiskFile, 06);

  000ef	6a 06		 push	 6
  000f1	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  000f6	e8 00 00 00 00	 call	 __access
  000fb	83 c4 08	 add	 esp, 8

; 2298 : 			if (x == 0 || errno != ENOENT)

  000fe	85 c0		 test	 eax, eax
  00100	74 0a		 je	 SHORT $LN68@volTransfo
  00102	e8 00 00 00 00	 call	 __errno
  00107	83 38 02	 cmp	 DWORD PTR [eax], 2
  0010a	74 74		 je	 SHORT $LN65@volTransfo
$LN68@volTransfo:

; 2299 : 			{
; 2300 : 				wchar_t szTmp[512];
; 2301 : 
; 2302 : 				if (! ((bHiddenVol && !bHiddenVolHost) && errno != EACCES))	// Only ask ask for permission to overwrite an existing volume if we're not creating a hidden volume

  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00112	85 c9		 test	 ecx, ecx
  00114	74 14		 je	 SHORT $LN66@volTransfo
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0011c	85 d2		 test	 edx, edx
  0011e	75 0a		 jne	 SHORT $LN66@volTransfo
  00120	e8 00 00 00 00	 call	 __errno
  00125	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  00128	75 56		 jne	 SHORT $LN65@volTransfo
$LN66@volTransfo:

; 2303 : 				{
; 2304 : 					_snwprintf (szTmp, sizeof szTmp / 2,
; 2305 : 						GetString (errno == EACCES ? "READONLYPROMPT" : "OVERWRITEPROMPT"),
; 2306 : 						szDiskFile);

  0012a	e8 00 00 00 00	 call	 __errno
  0012f	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  00132	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@
  00137	74 05		 je	 SHORT $LN83@volTransfo
  00139	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@
$LN83@volTransfo:
  0013e	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _GetString
  00149	83 c4 04	 add	 esp, 4
  0014c	50		 push	 eax
  0014d	8d 44 24 34	 lea	 eax, DWORD PTR _szTmp$132450[esp+17464]
  00151	68 00 02 00 00	 push	 512			; 00000200H
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 __snwprintf

; 2307 : 
; 2308 : 					x = MessageBoxW (hwndDlg, szTmp, lpszTitle, YES_NO|MB_ICONWARNING|MB_DEFBUTTON2);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	68 34 01 00 00	 push	 308			; 00000134H
  0016a	51		 push	 ecx
  0016b	8d 54 24 34	 lea	 edx, DWORD PTR _szTmp$132450[esp+17464]
  0016f	52		 push	 edx
  00170	53		 push	 ebx
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2309 : 
; 2310 : 					if (x != IDYES)

  00177	83 f8 06	 cmp	 eax, 6
  0017a	0f 85 a0 05 00
	00		 jne	 $cancel$132440
$LN65@volTransfo:

; 2311 : 						goto cancel;
; 2312 : 				}
; 2313 : 			}
; 2314 : 
; 2315 : 			if (_access (szDiskFile, 06) != 0)

  00180	6a 06		 push	 6
  00182	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00187	e8 00 00 00 00	 call	 __access
  0018c	83 c4 08	 add	 esp, 8
  0018f	85 c0		 test	 eax, eax
  00191	74 4f		 je	 SHORT $LN58@volTransfo

; 2316 : 			{
; 2317 : 				if (errno == EACCES)

  00193	e8 00 00 00 00	 call	 __errno
  00198	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  0019b	75 45		 jne	 SHORT $LN58@volTransfo

; 2318 : 				{
; 2319 : 					if (_chmod (szDiskFile, _S_IREAD | _S_IWRITE) != 0)

  0019d	68 80 01 00 00	 push	 384			; 00000180H
  001a2	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  001a7	e8 00 00 00 00	 call	 __chmod
  001ac	83 c4 08	 add	 esp, 8
  001af	85 c0		 test	 eax, eax
  001b1	74 2f		 je	 SHORT $LN58@volTransfo

; 2320 : 					{
; 2321 : 						MessageBoxW (hwndDlg, GetString ("ACCESSMODEFAIL"), lpszTitle, ICON_HAND);

  001b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  001b8	6a 10		 push	 16			; 00000010H
  001ba	50		 push	 eax
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@
  001c0	e8 00 00 00 00	 call	 _GetString
  001c5	83 c4 04	 add	 esp, 4
  001c8	50		 push	 eax
  001c9	53		 push	 ebx
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2549 : 
; 2550 : cancel:

  001d0	e9 4b 05 00 00	 jmp	 $cancel$132440
$LN70@volTransfo:

; 2322 : 						goto cancel;
; 2323 : 					}
; 2324 : 				}
; 2325 : 			}
; 2326 : 
; 2327 : 		}
; 2328 : 		else
; 2329 : 		{
; 2330 : 			// Partition / device / dynamic volume
; 2331 : 
; 2332 : 			if (!FinalPreTransformPrompts ())

  001d5	e8 00 00 00 00	 call	 _FinalPreTransformPrompts
  001da	85 c0		 test	 eax, eax
  001dc	0f 84 3e 05 00
	00		 je	 $cancel$132440
$LN58@volTransfo:

; 2333 : 				goto cancel;
; 2334 : 		}
; 2335 : 	}
; 2336 : 
; 2337 : 	// Prevent the OS from entering Sleep mode when idle
; 2338 : 	SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  001e2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetThreadExecutionState@4
  001e8	68 01 00 00 80	 push	 -2147483647		; 80000001H
  001ed	ff d5		 call	 ebp

; 2339 : 
; 2340 : 	bHidden = bHiddenVol && !bHiddenVolHost;

  001ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  001f5	85 c9		 test	 ecx, ecx
  001f7	74 0f		 je	 SHORT $LN84@volTransfo
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  001ff	85 d2		 test	 edx, edx
  00201	75 05		 jne	 SHORT $LN84@volTransfo
  00203	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  00206	eb 02		 jmp	 SHORT $LN85@volTransfo
$LN84@volTransfo:
  00208	33 ff		 xor	 edi, edi
$LN85@volTransfo:

; 2341 : 
; 2342 : 	volParams->bDevice = bDevice;

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDevice@@3HA ; bDevice
  0020f	89 06		 mov	 DWORD PTR [esi], eax

; 2343 : 	volParams->hiddenVol = bHidden;

  00211	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 2344 : 	volParams->volumePath = szDiskFile;

  00214	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?szDiskFile@@3PADA ; szDiskFile

; 2345 : 	volParams->size = nVolumeSize;

  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00221	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00224	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  0022a	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2346 : 	volParams->hiddenVolHostSize = nHiddenVolHostSize;

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  00232	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00235	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0023b	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 2347 : 	volParams->ea = nVolumeEA;

  0023e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  00244	89 56 20	 mov	 DWORD PTR [esi+32], edx

; 2348 : 	volParams->pkcs5 = hash_algo;

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hash_algo@@3HA ; hash_algo
  0024c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 2349 : 	volParams->headerFlags = CreatingHiddenSysVol() ? TC_HEADER_FLAG_ENCRYPTED_SYSTEM : 0;

  0024f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00255	85 c9		 test	 ecx, ecx
  00257	74 1a		 je	 SHORT $LN90@volTransfo
  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0025f	85 d2		 test	 edx, edx
  00261	74 10		 je	 SHORT $LN90@volTransfo
  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00268	85 c0		 test	 eax, eax
  0026a	75 07		 jne	 SHORT $LN90@volTransfo
  0026c	b8 01 00 00 00	 mov	 eax, 1
  00271	eb 02		 jmp	 SHORT $LN91@volTransfo
$LN90@volTransfo:
  00273	33 c0		 xor	 eax, eax
$LN91@volTransfo:
  00275	33 c9		 xor	 ecx, ecx
  00277	85 c0		 test	 eax, eax
  00279	0f 95 c1	 setne	 cl
  0027c	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 2350 : 	volParams->fileSystem = fileSystem;

  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  00285	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 2351 : 	volParams->clusterSize = clusterSize;

  00288	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clusterSize@@3HC ; clusterSize
  0028d	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 2352 : 	volParams->sparseFileSwitch = bSparseFileSwitch;

  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  00296	89 4e 34	 mov	 DWORD PTR [esi+52], ecx

; 2353 : 	volParams->quickFormat = quickFormat;

  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?quickFormat@@3HC ; quickFormat
  0029f	89 56 38	 mov	 DWORD PTR [esi+56], edx

; 2354 : 	volParams->sectorSize = GetFormatSectorSize();

  002a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  002a9	75 07		 jne	 SHORT $LN93@volTransfo
  002ab	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  002b0	eb 2e		 jmp	 SHORT $LN94@volTransfo
$LN93@volTransfo:
  002b2	8d 44 24 14	 lea	 eax, DWORD PTR _geometry$143022[esp+17456]
  002b6	50		 push	 eax
  002b7	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  002bc	e8 00 00 00 00	 call	 _GetDriveGeometry
  002c1	83 c4 08	 add	 esp, 8
  002c4	85 c0		 test	 eax, eax
  002c6	75 14		 jne	 SHORT $LN92@volTransfo
  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  002ce	51		 push	 ecx
  002cf	e8 00 00 00 00	 call	 _handleWin32Error
  002d4	83 c4 04	 add	 esp, 4
  002d7	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN92@volTransfo:
  002dc	8b 44 24 28	 mov	 eax, DWORD PTR _geometry$143022[esp+17476]
$LN94@volTransfo:
  002e0	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 2355 : 	volParams->realClusterSize = &realClusterSize;

  002e3	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET ?realClusterSize@@3HA ; realClusterSize

; 2356 : 	volParams->password = &volumePassword;

  002ea	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], OFFSET ?volumePassword@@3UPassword@@A ; volumePassword

; 2357 : 	volParams->hwndDlg = hwndDlg;

  002f1	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 2358 : 
; 2359 : 	if (bInPlaceEncNonSys)

  002f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys

; 2360 : 	{
; 2361 : 		HANDLE hPartition = INVALID_HANDLE_VALUE;
; 2362 : 
; 2363 : 		SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PREPARING);

  002fa	6a 01		 push	 1
  002fc	85 d2		 test	 edx, edx
  002fe	0f 84 87 00 00
	00		 je	 $LN56@volTransfo
  00304	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _hPartition$132468[esp+17460], -1
  0030c	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2364 : 
; 2365 : 		if (!bInPlaceEncNonSysResumed)

  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  00316	83 c4 04	 add	 esp, 4
  00319	85 c0		 test	 eax, eax
  0031b	75 55		 jne	 SHORT $LN55@volTransfo

; 2366 : 		{
; 2367 : 			bTryToCorrectReadErrors = FALSE;
; 2368 : 
; 2369 : 			nStatus = EncryptPartitionInPlaceBegin (volParams, &hPartition, nWipeMode);

  0031d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nWipeMode
  00323	51		 push	 ecx
  00324	8d 54 24 14	 lea	 edx, DWORD PTR _hPartition$132468[esp+17460]
  00328	52		 push	 edx
  00329	56		 push	 esi
  0032a	a3 00 00 00 00	 mov	 DWORD PTR ?bTryToCorrectReadErrors@@3HC, eax ; bTryToCorrectReadErrors
  0032f	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceBegin
  00334	8b f8		 mov	 edi, eax
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2370 : 
; 2371 : 			if (nStatus == ERR_SUCCESS)

  00339	85 ff		 test	 edi, edi
  0033b	75 1b		 jne	 SHORT $LN54@volTransfo

; 2372 : 			{
; 2373 : 				nStatus = EncryptPartitionInPlaceResume (hPartition, volParams, nWipeMode, &bTryToCorrectReadErrors);

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR _nWipeMode
  00342	8b 4c 24 10	 mov	 ecx, DWORD PTR _hPartition$132468[esp+17456]
  00346	68 00 00 00 00	 push	 OFFSET ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0034b	50		 push	 eax
  0034c	56		 push	 esi
  0034d	51		 push	 ecx
  0034e	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceResume
  00353	83 c4 10	 add	 esp, 16			; 00000010H
  00356	eb 63		 jmp	 SHORT $LN130@volTransfo
$LN54@volTransfo:

; 2374 : 			}
; 2375 : 			else if (hPartition != INVALID_HANDLE_VALUE)

  00358	8b 44 24 10	 mov	 eax, DWORD PTR _hPartition$132468[esp+17456]
  0035c	83 f8 ff	 cmp	 eax, -1
  0035f	74 5c		 je	 SHORT $LN50@volTransfo

; 2376 : 			{
; 2377 : 				CloseHandle (hPartition);

  00361	50		 push	 eax
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2378 : 				hPartition = INVALID_HANDLE_VALUE;

  00368	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR _hPartition$132468[esp+17456], -1

; 2379 : 			}
; 2380 : 		}
; 2381 : 		else

  00370	eb 4b		 jmp	 SHORT $LN50@volTransfo
$LN55@volTransfo:

; 2382 : 		{
; 2383 : 			nStatus = EncryptPartitionInPlaceResume (INVALID_HANDLE_VALUE, volParams, nWipeMode, &bTryToCorrectReadErrors);

  00372	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00378	68 00 00 00 00	 push	 OFFSET ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0037d	52		 push	 edx
  0037e	56		 push	 esi
  0037f	6a ff		 push	 -1
  00381	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceResume
  00386	83 c4 10	 add	 esp, 16			; 00000010H

; 2384 : 		}
; 2385 : 	}
; 2386 : 	else

  00389	eb 30		 jmp	 SHORT $LN130@volTransfo
$LN56@volTransfo:

; 2387 : 	{
; 2388 : 		InitProgressBar (GetVolumeDataAreaSize (bHidden, nVolumeSize), 0, FALSE, FALSE, FALSE, TRUE);

  0038b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  00390	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00396	6a 00		 push	 0
  00398	6a 00		 push	 0
  0039a	6a 00		 push	 0
  0039c	6a 00		 push	 0
  0039e	6a 00		 push	 0
  003a0	50		 push	 eax
  003a1	51		 push	 ecx
  003a2	57		 push	 edi
  003a3	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ab	52		 push	 edx
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _InitProgressBar

; 2389 : 
; 2390 : 		nStatus = TCFormatVolume (volParams);

  003b2	56		 push	 esi
  003b3	e8 00 00 00 00	 call	 _TCFormatVolume
  003b8	83 c4 24	 add	 esp, 36			; 00000024H
$LN130@volTransfo:
  003bb	8b f8		 mov	 edi, eax
$LN50@volTransfo:

; 2391 : 	}
; 2392 : 
; 2393 : 	// Allow the OS to enter Sleep mode when idle
; 2394 : 	SetThreadExecutionState (ES_CONTINUOUS);

  003bd	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003c2	ff d5		 call	 ebp

; 2395 : 
; 2396 : 	if (nStatus == ERR_OUTOFMEMORY)

  003c4	83 ff 02	 cmp	 edi, 2
  003c7	75 0d		 jne	 SHORT $LN49@volTransfo

; 2397 : 	{
; 2398 : 		AbortProcess ("OUTOFMEMORY");

  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  003ce	e8 00 00 00 00	 call	 _AbortProcess
  003d3	83 c4 04	 add	 esp, 4
$LN49@volTransfo:

; 2399 : 	}
; 2400 : 
; 2401 : 	if (bInPlaceEncNonSys
; 2402 : 		&& nStatus == ERR_USER_ABORT
; 2403 : 		&& NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED)

  003d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  003dc	85 d2		 test	 edx, edx
  003de	74 11		 je	 SHORT $LN48@volTransfo
  003e0	83 ff 21	 cmp	 edi, 33			; 00000021H
  003e3	75 0c		 jne	 SHORT $LN48@volTransfo
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  003ea	83 f8 06	 cmp	 eax, 6
  003ed	75 02		 jne	 SHORT $LN48@volTransfo

; 2404 : 	{
; 2405 : 		// Ignore user abort if non-system in-place encryption successfully finished
; 2406 : 		nStatus = ERR_SUCCESS;

  003ef	33 ff		 xor	 edi, edi
$LN48@volTransfo:

; 2407 : 	}
; 2408 : 
; 2409 : 
; 2410 : 	dwWin32FormatError = GetLastError ();

  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 2411 : 
; 2412 : 	if (bHiddenVolHost && !bVolTransformThreadCancel && nStatus == 0)

  003f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  003fd	8b e8		 mov	 ebp, eax
  003ff	85 c9		 test	 ecx, ecx
  00401	74 62		 je	 SHORT $LN45@volTransfo
  00403	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  00409	85 d2		 test	 edx, edx
  0040b	75 58		 jne	 SHORT $LN45@volTransfo
  0040d	85 ff		 test	 edi, edi
  0040f	75 54		 jne	 SHORT $LN45@volTransfo

; 2413 : 	{
; 2414 : 		/* Auto mount the newly created hidden volume host */
; 2415 : 		switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, FALSE))

  00411	57		 push	 edi
  00412	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  00417	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0041c	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00421	53		 push	 ebx
  00422	e8 00 00 00 00	 call	 _MountHiddenVolHost
  00427	83 c4 14	 add	 esp, 20			; 00000014H
  0042a	83 e8 03	 sub	 eax, 3
  0042d	74 0e		 je	 SHORT $LN43@volTransfo
  0042f	83 e8 13	 sub	 eax, 19			; 00000013H
  00432	0f 84 a5 00 00
	00		 je	 $LN44@volTransfo
  00438	83 e8 02	 sub	 eax, 2
  0043b	75 28		 jne	 SHORT $LN45@volTransfo
$LN43@volTransfo:

; 2421 : 		case ERR_VOL_MOUNT_FAILED:
; 2422 : 		case ERR_PASSWORD_WRONG:
; 2423 : 			MessageBoxW (hwndDlg, GetString ("CANT_MOUNT_OUTER_VOL"), lpszTitle, ICON_HAND);

  0043d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00443	6a 10		 push	 16			; 00000010H
  00445	51		 push	 ecx
  00446	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@
$LN131@volTransfo:
  0044b	e8 00 00 00 00	 call	 _GetString
  00450	83 c4 04	 add	 esp, 4
  00453	50		 push	 eax
  00454	53		 push	 ebx
  00455	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2424 : 			bVolTransformThreadCancel = TRUE;

  0045b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1
$LN45@volTransfo:

; 2425 : 			break;
; 2426 : 		}
; 2427 : 	}
; 2428 : 
; 2429 : 	SetLastError (dwWin32FormatError);

  00465	55		 push	 ebp
  00466	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 2430 : 
; 2431 : 	if ((bVolTransformThreadCancel || nStatus == ERR_USER_ABORT)
; 2432 : 		&& !(bInPlaceEncNonSys && NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED))	// Ignore user abort if non-system in-place encryption successfully finished.

  0046c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  00472	85 d2		 test	 edx, edx
  00474	75 05		 jne	 SHORT $LN123@volTransfo
  00476	83 ff 21	 cmp	 edi, 33			; 00000021H
  00479	75 25		 jne	 SHORT $LN114@volTransfo
$LN123@volTransfo:
  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  00480	85 c0		 test	 eax, eax
  00482	0f 84 6f 02 00
	00		 je	 $LN40@volTransfo
  00488	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  0048e	83 f9 06	 cmp	 ecx, 6
  00491	0f 85 60 02 00
	00		 jne	 $LN40@volTransfo

; 2437 : 		}
; 2438 : 
; 2439 : 		goto cancel;
; 2440 : 	}
; 2441 : 
; 2442 : 	if (nStatus != ERR_USER_ABORT)

  00497	83 ff 21	 cmp	 edi, 33			; 00000021H
  0049a	0f 84 80 02 00
	00		 je	 $cancel$132440
$LN114@volTransfo:

; 2443 : 	{
; 2444 : 		if (nStatus != 0)

  004a0	33 ed		 xor	 ebp, ebp
  004a2	3b fd		 cmp	 edi, ebp
  004a4	0f 84 cf 00 00
	00		 je	 $LN35@volTransfo

; 2445 : 		{
; 2446 : 			/* An error occurred */
; 2447 : 
; 2448 : 			wchar_t szMsg[8192];
; 2449 : 
; 2450 : 			handleError (hwndDlg, nStatus);

  004aa	57		 push	 edi
  004ab	53		 push	 ebx
  004ac	e8 00 00 00 00	 call	 _handleError

; 2451 : 
; 2452 : 			if (bInPlaceEncNonSys)

  004b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  004b7	83 c4 08	 add	 esp, 8
  004ba	85 d2		 test	 edx, edx
  004bc	74 49		 je	 SHORT $LN34@volTransfo

; 2453 : 			{
; 2454 : 				if (bInPlaceEncNonSysResumed)

  004be	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  004c3	85 c0		 test	 eax, eax
  004c5	74 28		 je	 SHORT $LN33@volTransfo

; 2455 : 				{
; 2456 : 					SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PAUSED);

  004c7	6a 05		 push	 5
  004c9	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2457 : 					Error ("INPLACE_ENC_GENERIC_ERR_RESUME");

  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@
  004d3	e8 00 00 00 00	 call	 _Error
  004d8	83 c4 08	 add	 esp, 8

; 2458 : 				}
; 2459 : 				else

  004db	eb 76		 jmp	 SHORT $LN124@volTransfo
$LN44@volTransfo:

; 2416 : 		{
; 2417 : 		case ERR_NO_FREE_DRIVES:
; 2418 : 			MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  004e2	6a 10		 push	 16			; 00000010H
  004e4	50		 push	 eax
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@

; 2419 : 			bVolTransformThreadCancel = TRUE;
; 2420 : 			break;

  004ea	e9 5c ff ff ff	 jmp	 $LN131@volTransfo
$LN33@volTransfo:

; 2460 : 				{
; 2461 : 					SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_ERROR);

  004ef	6a 07		 push	 7
  004f1	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2462 : 					ShowInPlaceEncErrMsgWAltSteps ("INPLACE_ENC_GENERIC_ERR_ALT_STEPS", TRUE);

  004f6	6a 01		 push	 1
  004f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@
  004fd	e8 00 00 00 00	 call	 _ShowInPlaceEncErrMsgWAltSteps
  00502	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2463 : 				}

  00505	eb 4c		 jmp	 SHORT $LN124@volTransfo
$LN34@volTransfo:

; 2464 : 			}
; 2465 : 			else if (!(bHiddenVolHost && hiddenVolHostDriveNo < 0))  // If the error was not that the hidden volume host could not be mounted (this error has already been reported to the user)

  00507	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0050d	85 c9		 test	 ecx, ecx
  0050f	74 08		 je	 SHORT $LN29@volTransfo
  00511	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, ebp ; hiddenVolHostDriveNo
  00517	7c 3a		 jl	 SHORT $LN124@volTransfo
$LN29@volTransfo:

; 2466 : 			{
; 2467 : 				swprintf (szMsg, GetString ("CREATE_FAILED"), szDiskFile);

  00519	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0051e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@
  00523	e8 00 00 00 00	 call	 _GetString
  00528	83 c4 04	 add	 esp, 4
  0052b	50		 push	 eax
  0052c	8d 94 24 34 04
	00 00		 lea	 edx, DWORD PTR _szMsg$132504[esp+17464]
  00533	52		 push	 edx
  00534	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2468 : 				MessageBoxW (hwndDlg, szMsg, lpszTitle, ICON_HAND);

  00539	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0053e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00541	6a 10		 push	 16			; 00000010H
  00543	50		 push	 eax
  00544	8d 8c 24 34 04
	00 00		 lea	 ecx, DWORD PTR _szMsg$132504[esp+17464]
  0054b	51		 push	 ecx
  0054c	53		 push	 ebx
  0054d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN124@volTransfo:

; 2469 : 			}
; 2470 : 
; 2471 : 			if (!bDevice && !(bHiddenVol && !bHiddenVolHost))	// If we're not creating a hidden volume and if it's a file container

  00553	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ebp ; bDevice
  00559	0f 85 c1 01 00
	00		 jne	 $cancel$132440
  0055f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00565	85 d2		 test	 edx, edx
  00567	0f 84 a6 01 00
	00		 je	 $LN38@volTransfo
  0056d	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00572	85 c0		 test	 eax, eax

; 2549 : 
; 2550 : cancel:

  00574	e9 98 01 00 00	 jmp	 $LN132@volTransfo
$LN35@volTransfo:

; 2472 : 			{
; 2473 : 				remove (szDiskFile);		// Delete the container
; 2474 : 			}
; 2475 : 
; 2476 : 			goto cancel;
; 2477 : 		}
; 2478 : 		else
; 2479 : 		{
; 2480 : 			/* Volume successfully created */
; 2481 : 
; 2482 : 			RestoreDefaultKeyFilesParam ();

  00579	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 2483 : 
; 2484 : 			if (bDevice && !bInPlaceEncNonSys)

  0057e	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ebp ; bDevice
  00584	74 0f		 je	 SHORT $LN24@volTransfo
  00586	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0058c	85 c9		 test	 ecx, ecx
  0058e	75 05		 jne	 SHORT $LN24@volTransfo

; 2485 : 			{
; 2486 : 				// Handle assigned drive letter (if any)
; 2487 : 
; 2488 : 				HandleOldAssignedDriveLetter ();

  00590	e8 00 00 00 00	 call	 _HandleOldAssignedDriveLetter
$LN24@volTransfo:

; 2489 : 			}
; 2490 : 
; 2491 : 			if (!bHiddenVolHost)

  00595	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0059b	85 d2		 test	 edx, edx
  0059d	0f 85 80 00 00
	00		 jne	 $LN23@volTransfo

; 2492 : 			{
; 2493 : 				if (bHiddenVol)

  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  005a8	85 c0		 test	 eax, eax
  005aa	74 2a		 je	 SHORT $LN22@volTransfo

; 2494 : 				{
; 2495 : 					bHiddenVolFinished = TRUE;

  005ac	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, 1 ; bHiddenVolFinished

; 2496 : 
; 2497 : 					if (!bHiddenOS)

  005b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  005bc	85 c9		 test	 ecx, ecx
  005be	0f 85 a5 00 00
	00		 jne	 $LN125@volTransfo

; 2498 : 						Warning ("HIDVOL_FORMAT_FINISHED_HELP");

  005c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@
  005c9	e8 00 00 00 00	 call	 _Warning
  005ce	83 c4 04	 add	 esp, 4

; 2499 : 				}

  005d1	e9 93 00 00 00	 jmp	 $LN125@volTransfo
$LN22@volTransfo:

; 2500 : 				else if (bInPlaceEncNonSys)

  005d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  005dc	85 d2		 test	 edx, edx
  005de	74 14		 je	 SHORT $LN19@volTransfo

; 2501 : 				{
; 2502 : 					Warning ("NONSYS_INPLACE_ENC_FINISHED_INFO");

  005e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  005e5	e8 00 00 00 00	 call	 _Warning
  005ea	83 c4 04	 add	 esp, 4

; 2503 : 
; 2504 : 					HandleOldAssignedDriveLetter ();

  005ed	e8 00 00 00 00	 call	 _HandleOldAssignedDriveLetter

; 2505 : 				}
; 2506 : 				else 

  005f2	eb 75		 jmp	 SHORT $LN125@volTransfo
$LN19@volTransfo:

; 2507 : 				{
; 2508 : 					Info("FORMAT_FINISHED_INFO");

  005f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@
  005f9	e8 00 00 00 00	 call	 _Info

; 2509 : 
; 2510 : 					if (bSparseFileSwitch && quickFormat)

  005fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  00603	83 c4 04	 add	 esp, 4
  00606	85 c0		 test	 eax, eax
  00608	74 5f		 je	 SHORT $LN125@volTransfo
  0060a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?quickFormat@@3HC ; quickFormat
  00610	85 c9		 test	 ecx, ecx
  00612	74 55		 je	 SHORT $LN125@volTransfo

; 2511 : 						Warning("SPARSE_FILE_SIZE_NOTE");

  00614	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@
  00619	e8 00 00 00 00	 call	 _Warning
  0061e	83 c4 04	 add	 esp, 4

; 2512 : 				}
; 2513 : 			}
; 2514 : 			else

  00621	eb 46		 jmp	 SHORT $LN125@volTransfo
$LN23@volTransfo:

; 2515 : 			{
; 2516 : 				/* We've just created an outer volume (to host a hidden volume within) */
; 2517 : 
; 2518 : 				bHiddenVolHost = FALSE; 
; 2519 : 				bHiddenVolFinished = FALSE;
; 2520 : 				nHiddenVolHostSize = nVolumeSize;

  00623	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA
  00629	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4

; 2521 : 
; 2522 : 				// Clear the outer volume password
; 2523 : 				memset(&szVerify[0], 0, sizeof (szVerify));

  0062e	6a 41		 push	 65			; 00000041H
  00630	55		 push	 ebp
  00631	89 2d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, ebp
  00637	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  0063c	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, ebp ; bHiddenVolFinished
  00642	89 15 00 00 00
	00		 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA, edx
  00648	a3 04 00 00 00	 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA+4, eax
  0064d	e8 00 00 00 00	 call	 _memset

; 2524 : 				memset(&szRawPassword[0], 0, sizeof (szRawPassword));

  00652	6a 41		 push	 65			; 00000041H
  00654	55		 push	 ebp
  00655	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  0065a	e8 00 00 00 00	 call	 _memset
  0065f	83 c4 18	 add	 esp, 24			; 00000018H

; 2525 : 
; 2526 : 				MessageBeep (MB_OK);

  00662	55		 push	 ebp
  00663	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN125@volTransfo:

; 2527 : 			}
; 2528 : 
; 2529 : 			if (!bInPlaceEncNonSys)

  00669	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0066f	85 c9		 test	 ecx, ecx
  00671	75 0f		 jne	 SHORT $LN15@volTransfo

; 2530 : 				SetTimer (hwndDlg, TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  00673	55		 push	 ebp
  00674	6a 1e		 push	 30			; 0000001eH
  00676	68 ff 00 00 00	 push	 255			; 000000ffH
  0067b	53		 push	 ebx
  0067c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
$LN15@volTransfo:

; 2531 : 
; 2532 : 			if (volParams != NULL)
; 2533 : 			{
; 2534 : 				burn ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00682	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00687	8b d6		 mov	 edx, esi
  00689	8b f9		 mov	 edi, ecx
  0068b	8b c6		 mov	 eax, esi
  0068d	8d 49 00	 npad	 3
$LL97@volTransfo:
  00690	c6 00 00	 mov	 BYTE PTR [eax], 0
  00693	40		 inc	 eax
  00694	83 ef 01	 sub	 edi, 1
  00697	75 f7		 jne	 SHORT $LL97@volTransfo
  00699	8d a4 24 00 00
	00 00		 npad	 7
$LL10@volTransfo:
  006a0	49		 dec	 ecx
  006a1	c6 02 00	 mov	 BYTE PTR [edx], 0
  006a4	42		 inc	 edx
  006a5	3b cd		 cmp	 ecx, ebp
  006a7	75 f7		 jne	 SHORT $LL10@volTransfo

; 2535 : 				VirtualUnlock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  006a9	6a 50		 push	 80			; 00000050H
  006ab	56		 push	 esi
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualUnlock@8

; 2536 : 				free ((LPVOID) volParams);

  006b2	56		 push	 esi
  006b3	e8 00 00 00 00	 call	 _free
  006b8	83 c4 04	 add	 esp, 4

; 2537 : 				volParams = NULL;
; 2538 : 			}
; 2539 : 
; 2540 : 			bVolTransformThreadRunning = FALSE;

  006bb	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, ebp ; bVolTransformThreadRunning

; 2541 : 			bVolTransformThreadCancel = FALSE;

  006c1	89 2d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ebp

; 2542 : 
; 2543 : 			PostMessage (hwndDlg, bInPlaceEncNonSys ? TC_APPMSG_NONSYS_INPLACE_ENC_FINISHED : TC_APPMSG_FORMAT_FINISHED, 0, 0);

  006c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  006cd	33 f6		 xor	 esi, esi
  006cf	f7 da		 neg	 edx
  006d1	1b d2		 sbb	 edx, edx
  006d3	55		 push	 ebp
  006d4	83 e2 04	 and	 edx, 4
  006d7	55		 push	 ebp
  006d8	81 c2 2e 81 00
	00		 add	 edx, 33070		; 0000812eH
  006de	52		 push	 edx
  006df	53		 push	 ebx
  006e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 2544 : 
; 2545 : 			LastDialogId = "FORMAT_FINISHED";

  006e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@

; 2546 : 			_endthread ();

  006f0	e8 00 00 00 00	 call	 __endthread

; 2547 : 		}
; 2548 : 	}

  006f5	eb 29		 jmp	 SHORT $cancel$132440
$LN40@volTransfo:

; 2433 : 	{
; 2434 : 		if (!bDevice && !(bHiddenVol && !bHiddenVolHost))	// If we're not creating a hidden volume and if it's a file container

  006f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  006fe	75 20		 jne	 SHORT $cancel$132440
  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00705	85 c0		 test	 eax, eax
  00707	74 0a		 je	 SHORT $LN38@volTransfo
  00709	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0070f	85 c9		 test	 ecx, ecx
$LN132@volTransfo:
  00711	74 0d		 je	 SHORT $cancel$132440
$LN38@volTransfo:

; 2435 : 		{
; 2436 : 			remove (szDiskFile);		// Delete the container

  00713	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00718	e8 00 00 00 00	 call	 _remove
  0071d	83 c4 04	 add	 esp, 4
$cancel$132440:

; 2551 : 
; 2552 : 	LastDialogId = (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_CANCELED" : "FORMAT_CANCELED");

  00720	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  00726	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@
  00730	85 d2		 test	 edx, edx
  00732	75 0a		 jne	 SHORT $LN87@volTransfo
  00734	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@
$LN87@volTransfo:

; 2553 : 
; 2554 : 	if (!bInPlaceEncNonSys)

  0073e	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  00743	85 c0		 test	 eax, eax
  00745	75 0f		 jne	 SHORT $LN126@volTransfo

; 2555 : 		SetTimer (hwndDlg, TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  00747	50		 push	 eax
  00748	6a 1e		 push	 30			; 0000001eH
  0074a	68 ff 00 00 00	 push	 255			; 000000ffH
  0074f	53		 push	 ebx
  00750	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
$LN126@volTransfo:

; 2556 : 
; 2557 : 	if (volParams != NULL)

  00756	33 ed		 xor	 ebp, ebp
  00758	3b f5		 cmp	 esi, ebp
  0075a	74 2f		 je	 SHORT $LN7@volTransfo

; 2558 : 	{
; 2559 : 		burn ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  0075c	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00761	8b d6		 mov	 edx, esi
  00763	8b f9		 mov	 edi, ecx
  00765	8b c6		 mov	 eax, esi
$LL101@volTransfo:
  00767	c6 00 00	 mov	 BYTE PTR [eax], 0
  0076a	40		 inc	 eax
  0076b	83 ef 01	 sub	 edi, 1
  0076e	75 f7		 jne	 SHORT $LL101@volTransfo
$LL3@volTransfo:
  00770	49		 dec	 ecx
  00771	c6 02 00	 mov	 BYTE PTR [edx], 0
  00774	42		 inc	 edx
  00775	3b cd		 cmp	 ecx, ebp
  00777	75 f7		 jne	 SHORT $LL3@volTransfo

; 2560 : 		VirtualUnlock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00779	6a 50		 push	 80			; 00000050H
  0077b	56		 push	 esi
  0077c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualUnlock@8

; 2561 : 		free ((LPVOID) volParams);

  00782	56		 push	 esi
  00783	e8 00 00 00 00	 call	 _free
  00788	83 c4 04	 add	 esp, 4
$LN7@volTransfo:

; 2562 : 		volParams = NULL;
; 2563 : 	}
; 2564 : 
; 2565 : 	bVolTransformThreadRunning = FALSE;

  0078b	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, ebp ; bVolTransformThreadRunning

; 2566 : 	bVolTransformThreadCancel = FALSE;

  00791	89 2d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ebp

; 2567 : 
; 2568 : 	// Allow the OS to enter Sleep mode when idle
; 2569 : 	SetThreadExecutionState (ES_CONTINUOUS);

  00797	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0079c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 2570 : 
; 2571 : 	PostMessage (hwndDlg, TC_APPMSG_VOL_TRANSFORM_THREAD_ENDED, 0, 0);

  007a2	55		 push	 ebp
  007a3	55		 push	 ebp
  007a4	68 2d 81 00 00	 push	 33069			; 0000812dH
  007a9	53		 push	 ebx
  007aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 2572 : 
; 2573 : 	if (bHiddenVolHost && hiddenVolHostDriveNo < -1 && !bVolTransformThreadCancel)	// If hidden volume host could not be mounted

  007b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  007b6	5f		 pop	 edi
  007b7	5e		 pop	 esi
  007b8	5d		 pop	 ebp
  007b9	5b		 pop	 ebx
  007ba	85 c9		 test	 ecx, ecx
  007bc	74 18		 je	 SHORT $LN1@volTransfo
  007be	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo
  007c5	7d 0f		 jge	 SHORT $LN1@volTransfo
  007c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  007cd	85 d2		 test	 edx, edx
  007cf	75 05		 jne	 SHORT $LN1@volTransfo

; 2574 : 		AbortProcessSilent ();

  007d1	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN1@volTransfo:

; 2575 : 
; 2576 : 	_endthread ();

  007d6	e8 00 00 00 00	 call	 __endthread

; 2577 : }

  007db	8b 8c 24 1c 44
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+17440]
  007e2	33 cc		 xor	 ecx, esp
  007e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007e9	81 c4 20 44 00
	00		 add	 esp, 17440		; 00004420H
  007ef	c3		 ret	 0
_volTransformThreadFunction ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_QueryFreeSpace
EXTRN	_GetPartitionInfo:PROC
EXTRN	__imp__GetDiskFreeSpaceExA@16:PROC
EXTRN	__imp__GetVolumePathNameA@12:PROC
;	COMDAT ??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@ DB 'SECTOR_SIZE_UNSUPPORT'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@
CONST	SEGMENT
??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@ DB 'EXT_PARTITION', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _QueryFreeSpace
_TEXT	SEGMENT
_lDiskFree$132935 = -612				; size = 8
_lDiskFree$132916 = -604				; size = 8
_free$132911 = -596					; size = 8
_lDiskFree$132905 = -588				; size = 8
_driveInfo$132919 = -580				; size = 24
_diskInfo$132920 = -556					; size = 32
_root$132910 = -524					; size = 260
_szTmp$132906 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_hwndTextBox$ = 12					; size = 4
_display$ = 16						; size = 4
_QueryFreeSpace PROC					; COMDAT

; 3040 : {

  00000	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 60 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+612], eax

; 3041 : 	if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00019	56		 push	 esi
  0001a	8b b4 24 6c 02
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+612]
  00021	57		 push	 edi
  00022	8b bc 24 74 02
	00 00		 mov	 edi, DWORD PTR _hwndTextBox$[esp+616]
  00029	85 c0		 test	 eax, eax
  0002b	74 58		 je	 SHORT $LN20@QueryFreeS
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00033	85 c9		 test	 ecx, ecx
  00035	75 4e		 jne	 SHORT $LN20@QueryFreeS

; 3042 : 	{
; 3043 : 		LARGE_INTEGER lDiskFree;
; 3044 : 		char szTmp[TC_MAX_PATH];
; 3045 : 
; 3046 : 		lDiskFree.QuadPart = nMaximumHiddenVolSize;

  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  0003d	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  00042	89 54 24 20	 mov	 DWORD PTR _lDiskFree$132905[esp+620], edx
  00046	89 44 24 24	 mov	 DWORD PTR _lDiskFree$132905[esp+624], eax

; 3047 : 
; 3048 : 		if (display)

  0004a	39 8c 24 78 02
	00 00		 cmp	 DWORD PTR _display$[esp+616], ecx
  00051	74 16		 je	 SHORT $LN19@QueryFreeS

; 3049 : 			PrintFreeSpace (hwndTextBox, szTmp, &lDiskFree);

  00053	8d 4c 24 20	 lea	 ecx, DWORD PTR _lDiskFree$132905[esp+620]
  00057	51		 push	 ecx
  00058	8d 94 24 68 01
	00 00		 lea	 edx, DWORD PTR _szTmp$132906[esp+624]
  0005f	52		 push	 edx
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 _PrintFreeSpace
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@QueryFreeS:
  00069	5f		 pop	 edi

; 3050 : 
; 3051 : 		return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  00070	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00077	33 cc		 xor	 ecx, esp
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00084	c3		 ret	 0
$LN20@QueryFreeS:

; 3052 : 	}
; 3053 : 	else if (bDevice == FALSE)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0008c	0f 85 cc 00 00
	00		 jne	 $LN17@QueryFreeS

; 3054 : 	{
; 3055 : 		char root[TC_MAX_PATH];
; 3056 : 		ULARGE_INTEGER free;
; 3057 : 
; 3058 : 		if (!GetVolumePathName (szFileName, root, sizeof (root)))

  00092	68 04 01 00 00	 push	 260			; 00000104H
  00097	8d 44 24 64	 lea	 eax, DWORD PTR _root$132910[esp+624]
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  000a7	85 c0		 test	 eax, eax
  000a9	75 22		 jne	 SHORT $LN16@QueryFreeS

; 3059 : 		{
; 3060 : 			handleWin32Error (hwndDlg);

  000ab	56		 push	 esi
  000ac	e8 00 00 00 00	 call	 _handleWin32Error
  000b1	83 c4 04	 add	 esp, 4
  000b4	5f		 pop	 edi

; 3061 : 			return FALSE;

  000b5	33 c0		 xor	 eax, eax
  000b7	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  000b8	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  000bf	33 cc		 xor	 ecx, esp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  000cc	c3		 ret	 0
$LN16@QueryFreeS:

; 3062 : 		}
; 3063 : 
; 3064 : 		if (!GetDiskFreeSpaceEx (root, &free, 0, 0))

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	8d 4c 24 20	 lea	 ecx, DWORD PTR _free$132911[esp+628]
  000d5	51		 push	 ecx
  000d6	8d 54 24 6c	 lea	 edx, DWORD PTR _root$132910[esp+632]
  000da	52		 push	 edx
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceExA@16
  000e1	85 c0		 test	 eax, eax
  000e3	75 2c		 jne	 SHORT $LN15@QueryFreeS
$LN27@QueryFreeS:

; 3065 : 		{
; 3066 : 			if (display)

  000e5	83 bc 24 78 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+616], 0
  000ed	74 09		 je	 SHORT $LN14@QueryFreeS

; 3067 : 				DisplaySizingErrorText (hwndTextBox);

  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 _DisplaySizingErrorText
  000f5	83 c4 04	 add	 esp, 4
$LN14@QueryFreeS:
  000f8	5f		 pop	 edi

; 3068 : 
; 3069 : 			return FALSE;

  000f9	33 c0		 xor	 eax, eax
  000fb	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  000fc	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00103	33 cc		 xor	 ecx, esp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00110	c3		 ret	 0
$LN15@QueryFreeS:

; 3070 : 		}
; 3071 : 		else
; 3072 : 		{
; 3073 : 			LARGE_INTEGER lDiskFree;
; 3074 : 			lDiskFree.QuadPart = free.QuadPart;
; 3075 : 
; 3076 : 			if (display)

  00111	83 bc 24 78 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+616], 0
  00119	8b 44 24 18	 mov	 eax, DWORD PTR _free$132911[esp+620]
  0011d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _free$132911[esp+624]
  00121	89 44 24 10	 mov	 DWORD PTR _lDiskFree$132916[esp+620], eax
  00125	89 4c 24 14	 mov	 DWORD PTR _lDiskFree$132916[esp+624], ecx
  00129	0f 84 3a ff ff
	ff		 je	 $LN19@QueryFreeS

; 3077 : 				PrintFreeSpace (hwndTextBox, root, &lDiskFree);

  0012f	8d 54 24 10	 lea	 edx, DWORD PTR _lDiskFree$132916[esp+620]
  00133	52		 push	 edx
  00134	8d 44 24 64	 lea	 eax, DWORD PTR _root$132910[esp+624]
  00138	50		 push	 eax
  00139	57		 push	 edi
  0013a	e8 00 00 00 00	 call	 _PrintFreeSpace
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	5f		 pop	 edi

; 3078 : 
; 3079 : 			return TRUE;

  00143	b8 01 00 00 00	 mov	 eax, 1
  00148	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  00149	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00150	33 cc		 xor	 ecx, esp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  0015d	c3		 ret	 0
$LN17@QueryFreeS:

; 3080 : 		}
; 3081 : 	}
; 3082 : 	else
; 3083 : 	{
; 3084 : 		DISK_GEOMETRY driveInfo;
; 3085 : 		PARTITION_INFORMATION diskInfo;
; 3086 : 		BOOL piValid = FALSE;
; 3087 : 		BOOL gValid = FALSE;
; 3088 : 
; 3089 : 		// Query partition size
; 3090 : 		piValid = GetPartitionInfo (szDiskFile, &diskInfo);

  0015e	8d 4c 24 40	 lea	 ecx, DWORD PTR _diskInfo$132920[esp+620]
  00162	51		 push	 ecx
  00163	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00168	e8 00 00 00 00	 call	 _GetPartitionInfo

; 3091 : 		gValid = GetDriveGeometry (szDiskFile, &driveInfo);

  0016d	8d 54 24 30	 lea	 edx, DWORD PTR _driveInfo$132919[esp+628]
  00171	52		 push	 edx
  00172	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00177	8b f0		 mov	 esi, eax
  00179	e8 00 00 00 00	 call	 _GetDriveGeometry
  0017e	83 c4 10	 add	 esp, 16			; 00000010H

; 3092 : 
; 3093 : 		if (!piValid && !gValid)

  00181	85 f6		 test	 esi, esi
  00183	75 08		 jne	 SHORT $LN10@QueryFreeS
  00185	85 c0		 test	 eax, eax

; 3094 : 		{
; 3095 : 			if (display)
; 3096 : 				DisplaySizingErrorText (hwndTextBox);
; 3097 : 
; 3098 : 			return FALSE;

  00187	0f 84 58 ff ff
	ff		 je	 $LN27@QueryFreeS
$LN10@QueryFreeS:

; 3099 : 		}
; 3100 : 
; 3101 : 		int sectorSize = GetFormatSectorSize();

  0018d	e8 00 00 00 00	 call	 _GetFormatSectorSize

; 3102 : 
; 3103 : 		if (sectorSize < TC_MIN_VOLUME_SECTOR_SIZE
; 3104 : 			|| sectorSize > TC_MAX_VOLUME_SECTOR_SIZE
; 3105 : 			|| sectorSize % ENCRYPTION_DATA_UNIT_SIZE != 0)

  00192	8d 88 00 fe ff
	ff		 lea	 ecx, DWORD PTR [eax-512]
  00198	81 f9 00 0e 00
	00		 cmp	 ecx, 3584		; 00000e00H
  0019e	0f 87 5b 01 00
	00		 ja	 $LN7@QueryFreeS
  001a4	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  001a9	79 07		 jns	 SHORT $LN26@QueryFreeS
  001ab	48		 dec	 eax
  001ac	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  001b1	40		 inc	 eax
$LN26@QueryFreeS:
  001b2	0f 85 47 01 00
	00		 jne	 $LN7@QueryFreeS
  001b8	53		 push	 ebx

; 3108 : 			return FALSE;
; 3109 : 		}
; 3110 : 
; 3111 : 		if (piValid)

  001b9	85 f6		 test	 esi, esi
  001bb	0f 84 9e 00 00
	00		 je	 $LN6@QueryFreeS

; 3112 : 		{
; 3113 : 			nVolumeSize = diskInfo.PartitionLength.QuadPart;
; 3114 : 
; 3115 : 			if(display)

  001c1	8b 9c 24 7c 02
	00 00		 mov	 ebx, DWORD PTR _display$[esp+620]
  001c8	8b 74 24 4c	 mov	 esi, DWORD PTR _diskInfo$132920[esp+632]
  001cc	8b 54 24 50	 mov	 edx, DWORD PTR _diskInfo$132920[esp+636]
  001d0	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  001d6	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  001dc	85 db		 test	 ebx, ebx
  001de	74 1e		 je	 SHORT $LN23@QueryFreeS

; 3116 : 				nMultiplier = PrintFreeSpace (hwndTextBox, szDiskFile, &diskInfo.PartitionLength);

  001e0	8d 44 24 4c	 lea	 eax, DWORD PTR _diskInfo$132920[esp+632]
  001e4	50		 push	 eax
  001e5	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  001ea	57		 push	 edi
  001eb	e8 00 00 00 00	 call	 _PrintFreeSpace
  001f0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nVolumeSize@@3_KA
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
$LN23@QueryFreeS:

; 3117 : 
; 3118 : 			nUIVolumeSize = diskInfo.PartitionLength.QuadPart / nMultiplier;

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  00203	8b 4c 24 50	 mov	 ecx, DWORD PTR _diskInfo$132920[esp+636]
  00207	99		 cdq
  00208	52		 push	 edx
  00209	8b 54 24 50	 mov	 edx, DWORD PTR _diskInfo$132920[esp+636]
  0020d	50		 push	 eax
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 __alldiv

; 3119 : 
; 3120 : 			if (nVolumeSize == 0)

  00215	0b 35 04 00 00
	00		 or	 esi, DWORD PTR ?nVolumeSize@@3_KA+4
  0021b	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  00220	89 15 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, edx
  00226	0f 85 b6 00 00
	00		 jne	 $LN2@QueryFreeS

; 3121 : 			{
; 3122 : 				if (display)

  0022c	85 db		 test	 ebx, ebx
  0022e	74 15		 je	 SHORT $LN3@QueryFreeS

; 3123 : 					SetWindowTextW (hwndTextBox, GetString ("EXT_PARTITION"));

  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@
  00235	e8 00 00 00 00	 call	 _GetString
  0023a	83 c4 04	 add	 esp, 4
  0023d	50		 push	 eax
  0023e	57		 push	 edi
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN3@QueryFreeS:
  00245	5b		 pop	 ebx
  00246	5f		 pop	 edi

; 3124 : 
; 3125 : 				return FALSE;

  00247	33 c0		 xor	 eax, eax
  00249	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  0024a	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00251	33 cc		 xor	 ecx, esp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  0025e	c3		 ret	 0
$LN6@QueryFreeS:

; 3126 : 			}
; 3127 : 		}
; 3128 : 		else
; 3129 : 		{
; 3130 : 			LARGE_INTEGER lDiskFree;
; 3131 : 
; 3132 : 			// Drive geometry info is used only when GetPartitionInfo() fails
; 3133 : 			lDiskFree.QuadPart = driveInfo.Cylinders.QuadPart * driveInfo.BytesPerSector *
; 3134 : 				driveInfo.SectorsPerTrack * driveInfo.TracksPerCylinder;

  0025f	8b 44 24 38	 mov	 eax, DWORD PTR _driveInfo$132919[esp+636]
  00263	f7 64 24 3c	 mul	 DWORD PTR _driveInfo$132919[esp+640]
  00267	8b 4c 24 40	 mov	 ecx, DWORD PTR _driveInfo$132919[esp+644]
  0026b	6a 00		 push	 0
  0026d	51		 push	 ecx
  0026e	52		 push	 edx
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 __allmul
  00275	8b 4c 24 30	 mov	 ecx, DWORD PTR _driveInfo$132919[esp+628]
  00279	51		 push	 ecx
  0027a	8b 4c 24 30	 mov	 ecx, DWORD PTR _driveInfo$132919[esp+628]
  0027e	51		 push	 ecx
  0027f	52		 push	 edx
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 __allmul

; 3135 : 
; 3136 : 			nVolumeSize = lDiskFree.QuadPart;
; 3137 : 
; 3138 : 			if (display)

  00286	83 bc 24 7c 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+620], 0
  0028e	8b f0		 mov	 esi, eax
  00290	8b ca		 mov	 ecx, edx
  00292	89 74 24 0c	 mov	 DWORD PTR _lDiskFree$132935[esp+624], esi
  00296	89 4c 24 10	 mov	 DWORD PTR _lDiskFree$132935[esp+628], ecx
  0029a	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  002a0	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ecx
  002a6	74 20		 je	 SHORT $LN24@QueryFreeS

; 3139 : 				nMultiplier = PrintFreeSpace (hwndTextBox, szDiskFile, &lDiskFree);

  002a8	8d 54 24 0c	 lea	 edx, DWORD PTR _lDiskFree$132935[esp+624]
  002ac	52		 push	 edx
  002ad	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  002b2	57		 push	 edi
  002b3	e8 00 00 00 00	 call	 _PrintFreeSpace
  002b8	8b 4c 24 1c	 mov	 ecx, DWORD PTR _lDiskFree$132935[esp+640]
  002bc	8b 74 24 18	 mov	 esi, DWORD PTR _lDiskFree$132935[esp+636]
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c3	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
$LN24@QueryFreeS:

; 3140 : 
; 3141 : 			nUIVolumeSize = lDiskFree.QuadPart / nMultiplier;

  002c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  002cd	99		 cdq
  002ce	52		 push	 edx
  002cf	50		 push	 eax
  002d0	51		 push	 ecx
  002d1	56		 push	 esi
  002d2	e8 00 00 00 00	 call	 __alldiv
  002d7	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  002dc	89 15 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, edx
$LN2@QueryFreeS:
  002e2	5b		 pop	 ebx
  002e3	5f		 pop	 edi

; 3142 : 		}
; 3143 : 
; 3144 : 		return TRUE;

  002e4	b8 01 00 00 00	 mov	 eax, 1
  002e9	5e		 pop	 esi

; 3145 : 	}
; 3146 : }

  002ea	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  002f1	33 cc		 xor	 ecx, esp
  002f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f8	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  002fe	c3		 ret	 0
$LN7@QueryFreeS:

; 3106 : 		{
; 3107 : 			Error ("SECTOR_SIZE_UNSUPPORTED");

  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@
  00304	e8 00 00 00 00	 call	 _Error

; 3145 : 	}
; 3146 : }

  00309	8b 8c 24 6c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+624]
  00310	83 c4 04	 add	 esp, 4
  00313	5f		 pop	 edi
  00314	5e		 pop	 esi
  00315	33 cc		 xor	 ecx, esp
  00317	33 c0		 xor	 eax, eax
  00319	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031e	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00324	c3		 ret	 0
_QueryFreeSpace ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?FileSize4GBLimitQuestionNeeded@@YAHXZ
_TEXT	SEGMENT
?FileSize4GBLimitQuestionNeeded@@YAHXZ PROC		; FileSize4GBLimitQuestionNeeded, COMDAT

; 3283 : 	uint64 dataAreaSize = GetVolumeDataAreaSize (bHiddenVol && !bHiddenVolHost, nVolumeSize);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00005	85 c0		 test	 eax, eax
  00007	74 0f		 je	 SHORT $LN3@FileSize4G
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0000f	85 c9		 test	 ecx, ecx
  00011	75 05		 jne	 SHORT $LN3@FileSize4G
  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	eb 02		 jmp	 SHORT $LN4@FileSize4G
$LN3@FileSize4G:
  00018	33 c0		 xor	 eax, eax
$LN4@FileSize4G:
  0001a	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	52		 push	 edx
  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  00030	8b f2		 mov	 esi, edx
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b f8		 mov	 edi, eax

; 3284 : 
; 3285 : 	return (dataAreaSize > 4 * BYTES_PER_GB + TC_MIN_FAT_FS_SIZE
; 3286 : 		&& dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize());

  00037	83 fe 01	 cmp	 esi, 1
  0003a	72 2d		 jb	 SHORT $LN5@FileSize4G
  0003c	77 08		 ja	 SHORT $LN7@FileSize4G
  0003e	81 ff 00 90 00
	00		 cmp	 edi, 36864		; 00009000H
  00044	76 23		 jbe	 SHORT $LN5@FileSize4G
$LN7@FileSize4G:
  00046	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0004b	6a 01		 push	 1
  0004d	99		 cdq
  0004e	6a 00		 push	 0
  00050	52		 push	 edx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 __allmul
  00057	3b f2		 cmp	 esi, edx
  00059	77 0e		 ja	 SHORT $LN5@FileSize4G
  0005b	72 04		 jb	 SHORT $LN8@FileSize4G
  0005d	3b f8		 cmp	 edi, eax
  0005f	77 08		 ja	 SHORT $LN5@FileSize4G
$LN8@FileSize4G:
  00061	5f		 pop	 edi
  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	5e		 pop	 esi

; 3287 : }

  00068	c3		 ret	 0
$LN5@FileSize4G:
  00069	5f		 pop	 edi

; 3284 : 
; 3285 : 	return (dataAreaSize > 4 * BYTES_PER_GB + TC_MIN_FAT_FS_SIZE
; 3286 : 		&& dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize());

  0006a	33 c0		 xor	 eax, eax
  0006c	5e		 pop	 esi

; 3287 : }

  0006d	c3		 ret	 0
?FileSize4GBLimitQuestionNeeded@@YAHXZ ENDP		; FileSize4GBLimitQuestionNeeded
_TEXT	ENDS
PUBLIC	??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@ ; `string'
PUBLIC	??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ ; `string'
PUBLIC	??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@	; `string'
PUBLIC	??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@	; `string'
PUBLIC	??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ ; `string'
PUBLIC	??_C@_04HPPAIJNK@NTFS?$AA@			; `string'
PUBLIC	??_C@_03MPELFIKF@FAT?$AA@			; `string'
PUBLIC	??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@ ; `string'
PUBLIC	??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@	; `string'
PUBLIC	_realClusterSize$GSCopy$
PUBLIC	_pnbrFreeClusters$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_AnalyzeHiddenVolumeHost
EXTRN	_CloseVolumeExplorerWindows:PROC
EXTRN	__imp__GetDiskFreeSpaceA@20:PROC
EXTRN	_nCurrentOS:DWORD
EXTRN	_strncmp:PROC
EXTRN	__imp__GetVolumeInformationA@32:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
EXTRN	_hDriver:DWORD
;	COMDAT ??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@
CONST	SEGMENT
??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@ DB 'ERR_HIDDEN_VOL_H'
	DB	'OST_ENCRYPTED_INPLACE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
CONST	SEGMENT
??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ DB 'HIDDEN_VOL_HOST_'
	DB	'UNSUPPORTED_FILESYS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@
CONST	SEGMENT
??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@ DB 'CANT_GET_OUTER_VOL_INF'
	DB	'O', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@
CONST	SEGMENT
??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@ DB 'HIDDEN_VOL_HOST_NTFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
CONST	SEGMENT
??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ DB 'HIDDEN_VOL_HOST_'
	DB	'UNSUPPORTED_FILESYS_WIN2000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPPAIJNK@NTFS?$AA@
CONST	SEGMENT
??_C@_04HPPAIJNK@NTFS?$AA@ DB 'NTFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPELFIKF@FAT?$AA@
CONST	SEGMENT
??_C@_03MPELFIKF@FAT?$AA@ DB 'FAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@ DB 'ERR_HIDDEN_NOT_N'
	DB	'ORMAL_VOLUME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
CONST	SEGMENT
??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@ DB 'ERR_VOL_FORMAT_BAD', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _AnalyzeHiddenVolumeHost
_TEXT	SEGMENT
_szRootPathName$ = -9108				; size = 4
_pnbrFreeClusters$GSCopy$ = -9104			; size = 4
_dwResult$ = -9100					; size = 4
_dwBytesPerSector$ = -9096				; size = 4
_dwSectorsPerCluster$ = -9092				; size = 4
_realClusterSize$GSCopy$ = -9088			; size = 4
_dwTotalNumberOfClusters$ = -9084			; size = 4
tv349 = -9080						; size = 8
_dwNumberOfFreeClusters$ = -9072			; size = 4
_bytesReturned$ = -9068					; size = 4
_offsetNew$ = -9064					; size = 8
_volProp$ = -9056					; size = 596
_tmpPath$ = -8460					; size = 7
_szFileSystemNameBuffer$ = -8452			; size = 256
_readBuffer$ = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_hiddenVolHostSize$ = 16				; size = 8
_realClusterSize$ = 24					; size = 4
_pnbrFreeClusters$ = 28					; size = 4
_AnalyzeHiddenVolumeHost PROC				; COMDAT

; 8068 : {

  00000	b8 94 23 00 00	 mov	 eax, 9108		; 00002394H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 90 23
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+9108], eax

; 8212 : 
; 8213 : 	return -1;

  00018	8b 84 24 ac 23
	00 00		 mov	 eax, DWORD PTR _pnbrFreeClusters$[esp+9104]
  0001f	53		 push	 ebx
  00020	8b 9c 24 ac 23
	00 00		 mov	 ebx, DWORD PTR _realClusterSize$[esp+9108]
  00027	55		 push	 ebp
  00028	8b ac 24 a0 23
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+9112]
  0002f	56		 push	 esi
  00030	8b b4 24 a8 23
	00 00		 mov	 esi, DWORD PTR _driveNo$[esp+9116]
  00037	b1 5c		 mov	 cl, 92			; 0000005cH
  00039	57		 push	 edi
  0003a	89 44 24 14	 mov	 DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124], eax
  0003e	8a 06		 mov	 al, BYTE PTR [esi]
  00040	68 54 02 00 00	 push	 596			; 00000254H
  00045	88 8c 24 9c 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9128], cl
  0004c	88 8c 24 9d 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9129], cl
  00053	88 8c 24 9f 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9131], cl
  0005a	88 4c 24 16	 mov	 BYTE PTR _szRootPathName$[esp+9130], cl
  0005e	04 41		 add	 al, 65			; 00000041H
  00060	b2 3a		 mov	 dl, 58			; 0000003aH
  00062	8d 4c 24 48	 lea	 ecx, DWORD PTR _volProp$[esp+9128]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	89 5c 24 30	 mov	 DWORD PTR _realClusterSize$GSCopy$[esp+9136], ebx
  0006d	c6 84 24 a6 02
	00 00 2e	 mov	 BYTE PTR _tmpPath$[esp+9138], 46 ; 0000002eH
  00075	88 84 24 a8 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9140], al
  0007c	88 94 24 a9 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9141], dl
  00083	c6 84 24 aa 02
	00 00 00	 mov	 BYTE PTR _tmpPath$[esp+9142], 0
  0008b	88 44 24 1c	 mov	 BYTE PTR _szRootPathName$[esp+9136], al
  0008f	88 54 24 1d	 mov	 BYTE PTR _szRootPathName$[esp+9137], dl
  00093	c6 44 24 1f 00	 mov	 BYTE PTR _szRootPathName$[esp+9139], 0
  00098	e8 00 00 00 00	 call	 _memset
  0009d	8b 16		 mov	 edx, DWORD PTR [esi]
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	6a 00		 push	 0
  000a4	8d 44 24 1c	 lea	 eax, DWORD PTR _dwResult$[esp+9128]
  000a8	50		 push	 eax
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  000ae	68 54 02 00 00	 push	 596			; 00000254H
  000b3	8d 4c 24 50	 lea	 ecx, DWORD PTR _volProp$[esp+9136]
  000b7	51		 push	 ecx
  000b8	68 54 02 00 00	 push	 596			; 00000254H
  000bd	89 54 24 58	 mov	 DWORD PTR _volProp$[esp+9144], edx
  000c1	8b d1		 mov	 edx, ecx
  000c3	52		 push	 edx
  000c4	68 1c 20 22 00	 push	 2236444			; 0022201cH
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 11 03 00
	00		 je	 $LN21@AnalyzeHid

; 8069 : 	HANDLE hDevice;
; 8070 : 	DWORD bytesReturned;
; 8071 : 	DWORD dwSectorsPerCluster, dwBytesPerSector, dwNumberOfFreeClusters, dwTotalNumberOfClusters;
; 8072 : 	DWORD dwResult;
; 8073 : 	int result;
; 8074 : 	char szFileSystemNameBuffer[256];
; 8075 : 	char tmpPath[7] = {'\\','\\','.','\\',(char) *driveNo + 'A',':',0};
; 8076 : 	char szRootPathName[4] = {(char) *driveNo + 'A', ':', '\\', 0};
; 8077 : 	BYTE readBuffer[TC_MAX_VOLUME_SECTOR_SIZE * 2];
; 8078 : 	LARGE_INTEGER offset, offsetNew;
; 8079 : 	VOLUME_PROPERTIES_STRUCT volProp;
; 8080 : 
; 8081 : 	memset (&volProp, 0, sizeof(volProp));
; 8082 : 	volProp.driveNo = *driveNo;
; 8083 : 	if (!DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &volProp, sizeof (volProp), &volProp, sizeof (volProp), &dwResult, NULL) || dwResult == 0)

  000d8	83 7c 24 18 00	 cmp	 DWORD PTR _dwResult$[esp+9124], 0
  000dd	0f 84 06 03 00
	00		 je	 $LN21@AnalyzeHid

; 8087 : 		goto efsf_error;
; 8088 : 	}
; 8089 : 
; 8090 : 	if (volProp.volFormatVersion < TC_VOLUME_FORMAT_VERSION)

  000e3	83 bc 24 94 02
	00 00 02	 cmp	 DWORD PTR _volProp$[esp+9716], 2
  000eb	7d 14		 jge	 SHORT $LN19@AnalyzeHid

; 8091 : 	{
; 8092 : 		// We do not support creating hidden volumes within volumes created by TrueCrypt 5.1a or earlier.
; 8093 : 		Error ("ERR_VOL_FORMAT_BAD");

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
  000f2	e8 00 00 00 00	 call	 _Error
  000f7	83 c4 04	 add	 esp, 4

; 8094 : 		return 0;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 0a 03 00 00	 jmp	 $LN23@AnalyzeHid
$LN19@AnalyzeHid:

; 8095 : 	}
; 8096 : 
; 8097 : 	if (volProp.hiddenVolume)

  00101	83 bc 24 6c 02
	00 00 00	 cmp	 DWORD PTR _volProp$[esp+9676], 0
  00109	74 14		 je	 SHORT $LN18@AnalyzeHid

; 8098 : 	{
; 8099 : 		// The user entered a password for a hidden volume
; 8100 : 		Error ("ERR_HIDDEN_NOT_NORMAL_VOLUME");

  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@
  00110	e8 00 00 00 00	 call	 _Error
  00115	83 c4 04	 add	 esp, 4

; 8101 : 		return 0;

  00118	33 c0		 xor	 eax, eax
  0011a	e9 ec 02 00 00	 jmp	 $LN23@AnalyzeHid
$LN18@AnalyzeHid:

; 8102 : 	}
; 8103 : 
; 8104 : 	if (volProp.volumeHeaderFlags & TC_HEADER_FLAG_NONSYS_INPLACE_ENC
; 8105 : 		|| volProp.volumeHeaderFlags & TC_HEADER_FLAG_ENCRYPTED_SYSTEM)

  0011f	f6 84 24 7c 02
	00 00 03	 test	 BYTE PTR _volProp$[esp+9692], 3
  00127	0f 85 ab 02 00
	00		 jne	 $LN16@AnalyzeHid

; 8109 : 	}
; 8110 : 
; 8111 : 	hDevice = CreateFile (tmpPath, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0012d	6a 00		 push	 0
  0012f	6a 00		 push	 0
  00131	6a 03		 push	 3
  00133	6a 00		 push	 0
  00135	6a 03		 push	 3
  00137	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0013c	8d 8c 24 b0 02
	00 00		 lea	 ecx, DWORD PTR _tmpPath$[esp+9148]
  00143	51		 push	 ecx
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0014a	8b f8		 mov	 edi, eax

; 8112 : 
; 8113 : 	if (hDevice == INVALID_HANDLE_VALUE)

  0014c	83 ff ff	 cmp	 edi, -1
  0014f	75 23		 jne	 SHORT $LN15@AnalyzeHid

; 8114 : 	{
; 8115 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  00151	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00157	6a 10		 push	 16			; 00000010H
  00159	52		 push	 edx
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  0015f	e8 00 00 00 00	 call	 _GetString
  00164	83 c4 04	 add	 esp, 4
  00167	50		 push	 eax
  00168	55		 push	 ebp
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8209 : 
; 8210 : efsf_error:

  0016f	e9 88 02 00 00	 jmp	 $efsf_error$134990
$LN15@AnalyzeHid:

; 8116 : 		goto efsf_error;
; 8117 : 	}
; 8118 : 
; 8119 : 	offset.QuadPart = 0;

  00174	33 c9		 xor	 ecx, ecx

; 8120 : 
; 8121 : 	if (SetFilePointerEx (hDevice, offset, &offsetNew, FILE_BEGIN) == 0)

  00176	51		 push	 ecx
  00177	8d 54 24 40	 lea	 edx, DWORD PTR _offsetNew$[esp+9128]
  0017b	52		 push	 edx
  0017c	51		 push	 ecx
  0017d	33 c0		 xor	 eax, eax
  0017f	50		 push	 eax
  00180	57		 push	 edi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00187	85 c0		 test	 eax, eax
  00189	75 15		 jne	 SHORT $LN13@AnalyzeHid

; 8122 : 	{
; 8123 : 		handleWin32Error (hwndDlg);

  0018b	55		 push	 ebp
  0018c	e8 00 00 00 00	 call	 _handleWin32Error
  00191	83 c4 04	 add	 esp, 4

; 8205 : 	}
; 8206 : 
; 8207 : efs_error:
; 8208 : 	CloseHandle (hDevice);

  00194	57		 push	 edi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0019b	e9 5c 02 00 00	 jmp	 $efsf_error$134990
$LN13@AnalyzeHid:

; 8124 : 		goto efs_error;
; 8125 : 	}
; 8126 : 
; 8127 : 	result = ReadFile (hDevice, &readBuffer, TC_MAX_VOLUME_SECTOR_SIZE, &bytesReturned, NULL);

  001a0	6a 00		 push	 0
  001a2	8d 44 24 3c	 lea	 eax, DWORD PTR _bytesReturned$[esp+9128]
  001a6	50		 push	 eax
  001a7	68 00 10 00 00	 push	 4096			; 00001000H
  001ac	8d 8c 24 ac 03
	00 00		 lea	 ecx, DWORD PTR _readBuffer$[esp+9136]
  001b3	51		 push	 ecx
  001b4	57		 push	 edi
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 8128 : 
; 8129 : 	if (result == 0)

  001bb	85 c0		 test	 eax, eax
  001bd	75 33		 jne	 SHORT $LN11@AnalyzeHid

; 8130 : 	{
; 8131 : 		handleWin32Error (hwndDlg);

  001bf	55		 push	 ebp
  001c0	e8 00 00 00 00	 call	 _handleWin32Error

; 8132 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  001c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  001cb	83 c4 04	 add	 esp, 4
  001ce	6a 10		 push	 16			; 00000010H
  001d0	52		 push	 edx
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  001d6	e8 00 00 00 00	 call	 _GetString
  001db	83 c4 04	 add	 esp, 4
  001de	50		 push	 eax
  001df	55		 push	 ebp
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8205 : 	}
; 8206 : 
; 8207 : efs_error:
; 8208 : 	CloseHandle (hDevice);

  001e6	57		 push	 edi
$efs_error$135004:
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  001ed	e9 0a 02 00 00	 jmp	 $efsf_error$134990
$LN11@AnalyzeHid:

; 8133 : 		goto efs_error;
; 8134 : 	}
; 8135 : 
; 8136 : 	CloseHandle (hDevice);

  001f2	57		 push	 edi
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8137 : 	hDevice = INVALID_HANDLE_VALUE;
; 8138 : 
; 8139 : 	// Determine file system type
; 8140 : 
; 8141 : 	GetVolumeInformation(szRootPathName, NULL, 0, NULL, NULL, NULL, szFileSystemNameBuffer, sizeof(szFileSystemNameBuffer));

  001f9	68 00 01 00 00	 push	 256			; 00000100H
  001fe	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00205	50		 push	 eax
  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	6a 00		 push	 0
  0020c	6a 00		 push	 0
  0020e	6a 00		 push	 0
  00210	8d 4c 24 2c	 lea	 ecx, DWORD PTR _szRootPathName$[esp+9152]
  00214	51		 push	 ecx
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32

; 8142 : 
; 8143 : 	// The Windows API sometimes fails to indentify the file system correctly so we're using "raw" analysis too.
; 8144 : 	if (!strncmp (szFileSystemNameBuffer, "FAT", 3)
; 8145 : 		|| (readBuffer[0x36] == 'F' && readBuffer[0x37] == 'A' && readBuffer[0x38] == 'T')
; 8146 : 		|| (readBuffer[0x52] == 'F' && readBuffer[0x53] == 'A' && readBuffer[0x54] == 'T'))

  0021b	6a 03		 push	 3
  0021d	8d 94 24 a4 02
	00 00		 lea	 edx, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_03MPELFIKF@FAT?$AA@
  00229	52		 push	 edx
  0022a	e8 00 00 00 00	 call	 _strncmp
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00232	85 c0		 test	 eax, eax
  00234	0f 84 51 01 00
	00		 je	 $LN8@AnalyzeHid
  0023a	b0 46		 mov	 al, 70			; 00000046H
  0023c	b1 54		 mov	 cl, 84			; 00000054H
  0023e	38 84 24 d6 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9178], al
  00245	75 17		 jne	 SHORT $LN7@AnalyzeHid
  00247	80 bc 24 d7 03
	00 00 41	 cmp	 BYTE PTR _readBuffer$[esp+9179], 65 ; 00000041H
  0024f	75 0d		 jne	 SHORT $LN7@AnalyzeHid
  00251	38 8c 24 d8 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9180], cl
  00258	0f 84 2d 01 00
	00		 je	 $LN8@AnalyzeHid
$LN7@AnalyzeHid:
  0025e	38 84 24 f2 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9206], al
  00265	75 17		 jne	 SHORT $LN9@AnalyzeHid
  00267	80 bc 24 f3 03
	00 00 41	 cmp	 BYTE PTR _readBuffer$[esp+9207], 65 ; 00000041H
  0026f	75 0d		 jne	 SHORT $LN9@AnalyzeHid
  00271	38 8c 24 f4 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9208], cl
  00278	0f 84 0d 01 00
	00		 je	 $LN8@AnalyzeHid
$LN9@AnalyzeHid:

; 8162 : 	}
; 8163 : 	else if (!strncmp (szFileSystemNameBuffer, "NTFS", 4))

  0027e	6a 04		 push	 4
  00280	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_04HPPAIJNK@NTFS?$AA@
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _strncmp
  00292	83 c4 0c	 add	 esp, 12			; 0000000cH
  00295	85 c0		 test	 eax, eax
  00297	0f 85 cb 00 00
	00		 jne	 $LN5@AnalyzeHid

; 8164 : 	{
; 8165 : 		// NTFS
; 8166 : 
; 8167 : 		if (nCurrentOS == WIN_2000)

  0029d	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  002a4	75 14		 jne	 SHORT $LN4@AnalyzeHid

; 8168 : 		{
; 8169 : 			Error("HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000");

  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  002ab	e8 00 00 00 00	 call	 _Error
  002b0	83 c4 04	 add	 esp, 4

; 8170 : 			return 0;

  002b3	33 c0		 xor	 eax, eax
  002b5	e9 51 01 00 00	 jmp	 $LN23@AnalyzeHid
$LN4@AnalyzeHid:

; 8171 : 		}
; 8172 : 
; 8173 : 		if (bHiddenVolDirect && GetVolumeDataAreaSize (FALSE, hiddenVolHostSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  002c0	8b 9c 24 b4 23
	00 00		 mov	 ebx, DWORD PTR _hiddenVolHostSize$[esp+9124]
  002c7	85 c9		 test	 ecx, ecx
  002c9	74 43		 je	 SHORT $LN3@AnalyzeHid
  002cb	8b 94 24 b0 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9120]
  002d2	53		 push	 ebx
  002d3	52		 push	 edx
  002d4	6a 00		 push	 0
  002d6	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH
  002de	89 44 24 2c	 mov	 DWORD PTR tv349[esp+9124], eax
  002e2	8b fa		 mov	 edi, edx
  002e4	e8 00 00 00 00	 call	 _GetFormatSectorSize
  002e9	6a 01		 push	 1
  002eb	99		 cdq
  002ec	6a 00		 push	 0
  002ee	52		 push	 edx
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 __allmul
  002f5	3b fa		 cmp	 edi, edx
  002f7	77 15		 ja	 SHORT $LN3@AnalyzeHid
  002f9	72 06		 jb	 SHORT $LN27@AnalyzeHid
  002fb	39 44 24 2c	 cmp	 DWORD PTR tv349[esp+9124], eax
  002ff	77 0d		 ja	 SHORT $LN3@AnalyzeHid
$LN27@AnalyzeHid:

; 8174 : 			Info ("HIDDEN_VOL_HOST_NTFS");

  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@
  00306	e8 00 00 00 00	 call	 _Info
  0030b	83 c4 04	 add	 esp, 4
$LN3@AnalyzeHid:

; 8175 : 
; 8176 : 		if (!GetDiskFreeSpace(szRootPathName, 
; 8177 : 			&dwSectorsPerCluster, 
; 8178 : 			&dwBytesPerSector, 
; 8179 : 			&dwNumberOfFreeClusters, 
; 8180 : 			&dwTotalNumberOfClusters))

  0030e	8d 44 24 28	 lea	 eax, DWORD PTR _dwTotalNumberOfClusters$[esp+9124]
  00312	50		 push	 eax
  00313	8d 4c 24 38	 lea	 ecx, DWORD PTR _dwNumberOfFreeClusters$[esp+9128]
  00317	51		 push	 ecx
  00318	8d 54 24 24	 lea	 edx, DWORD PTR _dwBytesPerSector$[esp+9132]
  0031c	52		 push	 edx
  0031d	8d 44 24 2c	 lea	 eax, DWORD PTR _dwSectorsPerCluster$[esp+9136]
  00321	50		 push	 eax
  00322	8d 4c 24 20	 lea	 ecx, DWORD PTR _szRootPathName$[esp+9140]
  00326	51		 push	 ecx
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceA@20
  0032d	85 c0		 test	 eax, eax
  0032f	75 15		 jne	 SHORT $LN2@AnalyzeHid

; 8181 : 		{
; 8182 : 			handleWin32Error (hwndDlg);

  00331	55		 push	 ebp
  00332	e8 00 00 00 00	 call	 _handleWin32Error

; 8183 : 			Error ("CANT_GET_OUTER_VOL_INFO");

  00337	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@
  0033c	e8 00 00 00 00	 call	 _Error

; 8184 : 			return -1;

  00341	e9 bf 00 00 00	 jmp	 $LN28@AnalyzeHid
$LN2@AnalyzeHid:

; 8185 : 		};
; 8186 : 
; 8187 : 		*realClusterSize = dwBytesPerSector * dwSectorsPerCluster;

  00346	8b 44 24 20	 mov	 eax, DWORD PTR _dwSectorsPerCluster$[esp+9124]
  0034a	0f af 44 24 1c	 imul	 eax, DWORD PTR _dwBytesPerSector$[esp+9124]
  0034f	8b 54 24 24	 mov	 edx, DWORD PTR _realClusterSize$GSCopy$[esp+9124]

; 8188 : 
; 8189 : 		// Get the map of the clusters that are free and in use on the outer volume.
; 8190 : 		// The map will be scanned to determine the size of the uninterrupted block of free
; 8191 : 		// space (provided there is any) whose end is aligned with the end of the volume.
; 8192 : 		// The value will then be used to determine the maximum possible size of the hidden volume.
; 8193 : 
; 8194 : 		return ScanVolClusterBitmap (hwndDlg,
; 8195 : 			driveNo,
; 8196 : 			hiddenVolHostSize / *realClusterSize,
; 8197 : 			pnbrFreeClusters);

  00353	8b 4c 24 14	 mov	 ecx, DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124]
  00357	89 02		 mov	 DWORD PTR [edx], eax
  00359	51		 push	 ecx
  0035a	99		 cdq
  0035b	52		 push	 edx
  0035c	8b 94 24 b8 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9128]
  00363	50		 push	 eax
  00364	53		 push	 ebx
  00365	52		 push	 edx
  00366	eb 5d		 jmp	 SHORT $LN29@AnalyzeHid
$LN5@AnalyzeHid:

; 8198 : 	}
; 8199 : 	else
; 8200 : 	{
; 8201 : 		// Unsupported file system
; 8202 : 
; 8203 : 		Error ((nCurrentOS == WIN_2000) ? "HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000" : "HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS");

  00368	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  0036f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  00374	74 05		 je	 SHORT $LN26@AnalyzeHid
  00376	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
$LN26@AnalyzeHid:
  0037b	50		 push	 eax
  0037c	e8 00 00 00 00	 call	 _Error
  00381	83 c4 04	 add	 esp, 4

; 8204 : 		return 0;

  00384	33 c0		 xor	 eax, eax
  00386	e9 80 00 00 00	 jmp	 $LN23@AnalyzeHid
$LN8@AnalyzeHid:

; 8147 : 	{
; 8148 : 		// FAT12/FAT16/FAT32
; 8149 : 
; 8150 : 		// Retrieve the cluster size
; 8151 : 		*realClusterSize = ((int) readBuffer[0xb] + ((int) readBuffer[0xc] << 8)) * (int) readBuffer[0xd];	

  0038b	0f b6 84 24 ac
	03 00 00	 movzx	 eax, BYTE PTR _readBuffer$[esp+9136]
  00393	0f b6 8c 24 ab
	03 00 00	 movzx	 ecx, BYTE PTR _readBuffer$[esp+9135]
  0039b	0f b6 94 24 ad
	03 00 00	 movzx	 edx, BYTE PTR _readBuffer$[esp+9137]
  003a3	c1 e0 08	 shl	 eax, 8
  003a6	03 c1		 add	 eax, ecx

; 8152 : 
; 8153 : 		// Get the map of the clusters that are free and in use on the outer volume.
; 8154 : 		// The map will be scanned to determine the size of the uninterrupted block of free
; 8155 : 		// space (provided there is any) whose end is aligned with the end of the volume.
; 8156 : 		// The value will then be used to determine the maximum possible size of the hidden volume.
; 8157 : 
; 8158 : 		return ScanVolClusterBitmap (hwndDlg,
; 8159 : 			driveNo,
; 8160 : 			hiddenVolHostSize / *realClusterSize,
; 8161 : 			pnbrFreeClusters);

  003a8	8b 4c 24 14	 mov	 ecx, DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124]
  003ac	0f af c2	 imul	 eax, edx
  003af	89 03		 mov	 DWORD PTR [ebx], eax
  003b1	99		 cdq
  003b2	51		 push	 ecx
  003b3	52		 push	 edx
  003b4	8b 94 24 bc 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9132]
  003bb	50		 push	 eax
  003bc	8b 84 24 bc 23
	00 00		 mov	 eax, DWORD PTR _hiddenVolHostSize$[esp+9132]
  003c3	52		 push	 edx
  003c4	50		 push	 eax
$LN29@AnalyzeHid:
  003c5	e8 00 00 00 00	 call	 __alldiv
  003ca	52		 push	 edx
  003cb	50		 push	 eax
  003cc	56		 push	 esi
  003cd	55		 push	 ebp
  003ce	e8 00 00 00 00	 call	 _ScanVolClusterBitmap
  003d3	83 c4 14	 add	 esp, 20			; 00000014H
  003d6	eb 33		 jmp	 SHORT $LN23@AnalyzeHid
$LN16@AnalyzeHid:

; 8106 : 	{
; 8107 : 		Warning ("ERR_HIDDEN_VOL_HOST_ENCRYPTED_INPLACE");

  003d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@
  003dd	e8 00 00 00 00	 call	 _Warning
  003e2	83 c4 04	 add	 esp, 4

; 8108 : 		return 0;

  003e5	33 c0		 xor	 eax, eax
  003e7	eb 22		 jmp	 SHORT $LN23@AnalyzeHid
$LN21@AnalyzeHid:

; 8084 : 	{
; 8085 : 		handleWin32Error (hwndDlg);

  003e9	55		 push	 ebp
  003ea	e8 00 00 00 00	 call	 _handleWin32Error

; 8086 : 		Error ("CANT_ACCESS_OUTER_VOL");

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  003f4	e8 00 00 00 00	 call	 _Error
  003f9	83 c4 08	 add	 esp, 8
$efsf_error$134990:

; 8211 : 	CloseVolumeExplorerWindows (hwndDlg, *driveNo);

  003fc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003fe	51		 push	 ecx
  003ff	55		 push	 ebp
  00400	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows
$LN28@AnalyzeHid:
  00405	83 c4 08	 add	 esp, 8

; 8212 : 
; 8213 : 	return -1;

  00408	83 c8 ff	 or	 eax, -1
$LN23@AnalyzeHid:

; 8214 : }

  0040b	8b 8c 24 a0 23
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+9124]
  00412	5f		 pop	 edi
  00413	5e		 pop	 esi
  00414	5d		 pop	 ebp
  00415	5b		 pop	 ebx
  00416	33 cc		 xor	 ecx, esp
  00418	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041d	81 c4 94 23 00
	00		 add	 esp, 9108		; 00002394H
  00423	c3		 ret	 0
_AnalyzeHiddenVolumeHost ENDP
_TEXT	ENDS
EXTRN	?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeHiddenOSCreationConfig$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeHiddenOSCreationConfig$0
__tryblocktable$_WipeHiddenOSCreationConfig DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_WipeHiddenOSCreationConfig$3
__unwindtable$_WipeHiddenOSCreationConfig DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_WipeHiddenOSCreationConfig$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WipeHiddenOSCreationConfig DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_WipeHiddenOSCreationConfig
	DD	01H
	DD	FLAT:__tryblocktable$_WipeHiddenOSCreationConfig
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeHiddenOSCreationConfig
_TEXT	SEGMENT
_e$135089 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeHiddenOSCreationConfig PROC			; COMDAT

; 8341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeHiddenOSCreationConfig
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8342 : 	if (!IsHiddenOSRunning())

  0002b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00030	85 c0		 test	 eax, eax
  00032	75 1c		 jne	 SHORT __tryend$_WipeHiddenOSCreationConfig$1

; 8343 : 	{
; 8344 : 		try
; 8345 : 		{

  00034	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 8346 : 			WaitCursor();

  00037	e8 00 00 00 00	 call	 _WaitCursor

; 8347 : 			finally_do ({ NormalCursor(); });
; 8348 : 
; 8349 : 			BootEncObj->WipeHiddenOSCreationConfig();

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00046	e8 00 00 00 00	 call	 ?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig

; 8350 : 		}

  0004b	e8 00 00 00 00	 call	 ??1Finally8347@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ; `WipeHiddenOSCreationConfig'::`6'::Finally8347::~Finally8347
__tryend$_WipeHiddenOSCreationConfig$1:

; 8355 : 		}
; 8356 : 	}
; 8357 : 
; 8358 : 	return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 8359 : }

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
__catch$_WipeHiddenOSCreationConfig$0:

; 8351 : 		catch (Exception &e)
; 8352 : 		{
; 8353 : 			e.Show (MainDlg);

  00067	8b 4d ec	 mov	 ecx, DWORD PTR _e$135089[ebp]
  0006a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	52		 push	 edx
  00075	ff d0		 call	 eax

; 8354 : 			return FALSE;

  00077	b8 00 00 00 00	 mov	 eax, $LN9@WipeHidden
  0007c	c3		 ret	 0
$LN9@WipeHidden:
  0007d	33 c0		 xor	 eax, eax

; 8359 : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WipeHiddenOSCreationConfig$2:
  00000	e9 00 00 00 00	 jmp	 ??1Finally8347@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ; `WipeHiddenOSCreationConfig'::`6'::Finally8347::~Finally8347
__ehhandler$_WipeHiddenOSCreationConfig:
  00005	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00009	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000c	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeHiddenOSCreationConfig
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeHiddenOSCreationConfig ENDP
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$143169 = -4					; size = 4
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143169[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143169[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@_W@std@@SA_WABG@Z	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 386  : 		return (_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 387  : 		}

  00007	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 299  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 304  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 314  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 212  : 		}

  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 253  : 		}

  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000f	66 3b c8	 cmp	 cx, ax
  00012	75 04		 jne	 SHORT $LN3@uflow
  00014	8b c1		 mov	 eax, ecx
  00016	5e		 pop	 esi

; 320  : 		}

  00017	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002a	5e		 pop	 esi

; 320  : 		}

  0002b	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@_W@std@@SA_NAB_W0@Z		; std::char_traits<wchar_t>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 315  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 316  : 		}

  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@_W@std@@SAGABG@Z		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00007	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000c	66 3b c1	 cmp	 ax, cx
  0000f	74 04		 je	 SHORT $LN3@not_eof
  00011	0f b7 c0	 movzx	 eax, ax

; 408  : 		}

  00014	c3		 ret	 0
$LN3@not_eof:

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00015	33 c0		 xor	 eax, eax

; 408  : 		}

  00017	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 4c		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 45		 jbe	 SHORT $LN3@pbackfail
  00010	66 8b 54 24 04	 mov	 dx, WORD PTR __Meta$[esp-4]
  00015	56		 push	 esi
  00016	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0001b	66 3b f2	 cmp	 si, dx
  0001e	5e		 pop	 esi
  0001f	74 0c		 je	 SHORT $LN4@pbackfail
  00021	66 3b 50 fe	 cmp	 dx, WORD PTR [eax-2]
  00025	74 06		 je	 SHORT $LN4@pbackfail
  00027	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  0002b	75 28		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  0002d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00030	ff 00		 inc	 DWORD PTR [eax]
  00032	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00038	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 0e		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00042	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	66 89 10	 mov	 WORD PTR [eax], dx

; 168  : 			return (_Traits::not_eof(_Meta));

  0004a	0f b7 c2	 movzx	 eax, dx

; 169  : 			}
; 170  : 		}

  0004d	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  00050	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00052	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00055	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 169  : 			}
; 170  : 		}

  0005a	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 07		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00010	c3		 ret	 0
$LN8@underflow:
  00011	53		 push	 ebx
  00012	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00013	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00016	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00018	8b c6		 mov	 eax, esi
  0001a	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00021	66 8b 06	 mov	 ax, WORD PTR [esi]
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx
  00026	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00027	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00028	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  0002c	75 31		 jne	 SHORT $LN3@underflow
  0002e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	85 c0		 test	 eax, eax
  00035	74 28		 je	 SHORT $LN3@underflow
  00037	3b c6		 cmp	 eax, esi
  00039	77 05		 ja	 SHORT $LN4@underflow
  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	76 1f		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  00040	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00043	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00045	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00053	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	66 8b 02	 mov	 ax, WORD PTR [edx]
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0005e	c3		 ret	 0
$LN3@underflow:
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  00061	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00066	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00067	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 193  : 		{	// change position by _Off, according to _Way, _Mode

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00003	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN20@seekoff
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	8a 5c 24 20	 mov	 bl, BYTE PTR __Which$[esp+12]
  00019	f6 c3 01	 test	 bl, 1
  0001c	0f 84 b5 00 00
	00		 je	 $LN19@seekoff
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	85 d2		 test	 edx, edx
  00029	0f 84 a8 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002f	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  00033	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 12		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00044	2b 28		 sub	 ebp, DWORD PTR [eax]
  00046	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0004a	d1 fd		 sar	 ebp, 1
  0004c	03 f5		 add	 esi, ebp

; 201  : 			else if (_Way == ios_base::cur

  0004e	eb 27		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  00050	83 f8 01	 cmp	 eax, 1
  00053	75 16		 jne	 SHORT $LN16@seekoff
  00055	f6 c3 02	 test	 bl, 2
  00058	75 15		 jne	 SHORT $LN71@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  00061	8b ea		 mov	 ebp, edx
  00063	2b 28		 sub	 ebp, DWORD PTR [eax]
  00065	d1 fd		 sar	 ebp, 1
  00067	03 f5		 add	 esi, ebp
  00069	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  0006b	85 c0		 test	 eax, eax
  0006d	74 04		 je	 SHORT $LN72@seekoff
$LN71@seekoff:

; 205  : 				_Off = _BADOFF;

  0006f	8b f7		 mov	 esi, edi
  00071	eb 04		 jmp	 SHORT $LN14@seekoff
$LN72@seekoff:
  00073	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00077	85 f6		 test	 esi, esi
  00079	0f 8c cd 00 00
	00		 jl	 $LN3@seekoff
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00087	2b e8		 sub	 ebp, eax
  00089	d1 fd		 sar	 ebp, 1
  0008b	3b f5		 cmp	 esi, ebp
  0008d	0f 8f b9 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00093	2b c2		 sub	 eax, edx
  00095	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00098	d1 f8		 sar	 eax, 1
  0009a	03 c6		 add	 eax, esi
  0009c	29 02		 sub	 DWORD PTR [edx], eax
  0009e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a1	03 c0		 add	 eax, eax
  000a3	01 02		 add	 DWORD PTR [edx], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a5	f6 c3 02	 test	 bl, 2
  000a8	0f 84 a8 00 00
	00		 je	 $LN75@seekoff
  000ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 9b 00 00
	00		 je	 $LN75@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000be	8b 12		 mov	 edx, DWORD PTR [edx]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c6	50		 push	 eax
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	50		 push	 eax
  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 213  : 				}
; 214  : 			else

  000d5	eb 7f		 jmp	 SHORT $LN75@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 c3 02	 test	 bl, 2
  000da	74 74		 je	 SHORT $LN9@seekoff
  000dc	8b 16		 mov	 edx, DWORD PTR [esi]
  000de	85 d2		 test	 edx, edx
  000e0	74 6e		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000e2	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000ec	83 f8 02	 cmp	 eax, 2
  000ef	75 12		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000f4	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  000f7	2b 18		 sub	 ebx, DWORD PTR [eax]
  000f9	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  000fd	d1 fb		 sar	 ebx, 1
  000ff	03 f3		 add	 esi, ebx
  00101	eb 20		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  00103	83 f8 01	 cmp	 eax, 1
  00106	75 11		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00108	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0010b	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0010f	8b da		 mov	 ebx, edx
  00111	2b 18		 sub	 ebx, DWORD PTR [eax]
  00113	d1 fb		 sar	 ebx, 1
  00115	03 f3		 add	 esi, ebx
  00117	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00119	8b f7		 mov	 esi, edi
  0011b	85 c0		 test	 eax, eax
  0011d	75 04		 jne	 SHORT $LN4@seekoff
  0011f	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00123	85 f6		 test	 esi, esi
  00125	7c 25		 jl	 SHORT $LN3@seekoff
  00127	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0012a	8b 00		 mov	 eax, DWORD PTR [eax]
  0012c	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0012f	2b d8		 sub	 ebx, eax
  00131	d1 fb		 sar	 ebx, 1
  00133	3b f3		 cmp	 esi, ebx
  00135	7f 15		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00137	2b c2		 sub	 eax, edx
  00139	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0013c	d1 f8		 sar	 eax, 1
  0013e	03 c6		 add	 eax, esi
  00140	29 02		 sub	 DWORD PTR [edx], eax
  00142	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00145	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  00148	01 11		 add	 DWORD PTR [ecx], edx

; 229  : 			else

  0014a	eb 0a		 jmp	 SHORT $LN75@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  0014c	8b f7		 mov	 esi, edi

; 231  : 			}
; 232  : 		else

  0014e	eb 06		 jmp	 SHORT $LN75@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN75@seekoff:

; 234  : 		return (pos_type(_Off));

  00156	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0015a	5f		 pop	 edi
  0015b	89 30		 mov	 DWORD PTR [eax], esi
  0015d	5e		 pop	 esi
  0015e	33 c9		 xor	 ecx, ecx
  00160	5d		 pop	 ebp
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00164	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00167	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0016a	5b		 pop	 ebx

; 235  : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000b	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	85 c0		 test	 eax, eax
  00015	74 08		 je	 SHORT $LN12@seekpos
  00017	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0001a	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00025	3b f5		 cmp	 esi, ebp
  00027	0f 84 99 00 00
	00		 je	 $LN54@seekpos
  0002d	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002e	8a 5c 24 30	 mov	 bl, BYTE PTR __Mode$[esp+12]
  00032	f6 c3 01	 test	 bl, 1
  00035	74 59		 je	 SHORT $LN53@seekpos
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	85 d2		 test	 edx, edx
  0003e	74 50		 je	 SHORT $LN53@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00040	85 f6		 test	 esi, esi
  00042	7c 7f		 jl	 SHORT $LN4@seekpos
  00044	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004c	2b f8		 sub	 edi, eax
  0004e	d1 ff		 sar	 edi, 1
  00050	3b f7		 cmp	 esi, edi
  00052	7f 6f		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00054	2b c2		 sub	 eax, edx
  00056	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c6		 add	 eax, esi
  0005d	29 02		 sub	 DWORD PTR [edx], eax
  0005f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00062	03 c0		 add	 eax, eax
  00064	01 02		 add	 DWORD PTR [edx], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00066	f6 c3 02	 test	 bl, 2
  00069	74 5a		 je	 SHORT $LN55@seekpos
  0006b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN55@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0007c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0007f	50		 push	 eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00085	50		 push	 eax
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  0008e	eb 35		 jmp	 SHORT $LN55@seekpos
$LN53@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00090	f6 c3 02	 test	 bl, 2
  00093	74 2e		 je	 SHORT $LN4@seekpos
  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
  00097	85 ff		 test	 edi, edi
  00099	74 28		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0009b	85 f6		 test	 esi, esi
  0009d	7c 24		 jl	 SHORT $LN4@seekpos
  0009f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a7	2b d0		 sub	 edx, eax
  000a9	d1 fa		 sar	 edx, 1
  000ab	3b f2		 cmp	 esi, edx
  000ad	7f 14		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b2	2b c7		 sub	 eax, edi
  000b4	d1 f8		 sar	 eax, 1
  000b6	03 c6		 add	 eax, esi
  000b8	29 02		 sub	 DWORD PTR [edx], eax
  000ba	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bd	03 c0		 add	 eax, eax
  000bf	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000c1	eb 02		 jmp	 SHORT $LN55@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000c3	8b f5		 mov	 esi, ebp
$LN55@seekpos:
  000c5	5b		 pop	 ebx
$LN54@seekpos:

; 268  : 		return (streampos(_Off));

  000c6	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000ca	5f		 pop	 edi
  000cb	33 c9		 xor	 ecx, ecx
  000cd	89 30		 mov	 DWORD PTR [eax], esi
  000cf	5e		 pop	 esi
  000d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000d9	5d		 pop	 ebp

; 269  : 		}

  000da	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@10
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@10:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@12
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@12:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@13
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@13:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@14
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@14:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 23		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1b		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00022	66 89 08	 mov	 WORD PTR [eax], cx
  00025	0f b7 c1	 movzx	 eax, cx

; 164  : 		}

  00028	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 54 24 04	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	0f b7 c0	 movzx	 eax, ax

; 164  : 		}

  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@8
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@8
$LN6@operator@8:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@8:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$143821 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@2
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$143821[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@2
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@2:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143821[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@2
$LN3@basic_stre@2:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@2:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN28@operator@9
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN18@operator@9
$LN28@operator@9:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN19@operator@9
$LN18@operator@9:
  00019	33 c9		 xor	 ecx, ecx
$LN19@operator@9:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN6@operator@9
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN24@operator@9
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN25@operator@9
$LN24@operator@9:
  00037	33 c0		 xor	 eax, eax
$LN25@operator@9:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN29@operator@9
$LN6@operator@9:
  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN29@operator@9:
  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 376  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 377  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ PROC	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ENDP	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
PUBLIC	??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
PUBLIC	??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
EXTRN	??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@'
	DB	'_W@std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
	DD	FLAT:??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z	; std::_Maklocchr<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst1$ = -4						; size = 4
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocchr<wchar_t>, COMDAT

; 609  : 	{	// convert char to wchar_t using _Cvtvec

  00000	83 ec 08	 sub	 esp, 8

; 610  : 	wchar_t _Wc = L'\0';

  00003	33 c0		 xor	 eax, eax
  00005	89 04 24	 mov	 DWORD PTR __Wc$[esp+8], eax

; 611  : 	_Mbstinit(_Mbst1);

  00008	89 44 24 04	 mov	 DWORD PTR __Mbst1$[esp+8], eax

; 612  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0000c	8b 44 24 14	 mov	 eax, DWORD PTR __Cvt$[esp+4]
  00010	50		 push	 eax
  00011	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst1$[esp+12]
  00015	51		 push	 ecx
  00016	6a 01		 push	 1
  00018	8d 54 24 18	 lea	 edx, DWORD PTR __Byte$[esp+16]
  0001c	52		 push	 edx
  0001d	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$[esp+24]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 __Mbrtowc

; 613  : 	return (_Wc);

  00027	66 8b 44 24 14	 mov	 ax, WORD PTR __Wc$[esp+28]

; 614  : 	}

  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	c3		 ret	 0
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocchr<wchar_t>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst1$ = -12						; size = 4
__Mbst2$ = -8						; size = 4
__Count1$ = -4						; size = 4
__Wc$ = 8						; size = 2
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 640  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 641  : 	size_t _Count, _Count1;
; 642  : 	size_t _Wchars;
; 643  : 	const char *_Ptr1;
; 644  : 	int _Bytes;
; 645  : 	wchar_t _Wc;
; 646  : 	_Mbstinit(_Mbst1);
; 647  : 
; 648  : 	_Count1 = ::strlen(_Ptr) + 1;

  00004	8b 5c 24 14	 mov	 ebx, DWORD PTR __Ptr$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	33 f6		 xor	 esi, esi
  0000c	8b c3		 mov	 eax, ebx
  0000e	57		 push	 edi
  0000f	89 74 24 10	 mov	 DWORD PTR __Mbst1$[esp+28], esi
  00013	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL17@Maklocstr:
  00016	8a 08		 mov	 cl, BYTE PTR [eax]
  00018	40		 inc	 eax
  00019	84 c9		 test	 cl, cl
  0001b	75 f9		 jne	 SHORT $LL17@Maklocstr
  0001d	2b c2		 sub	 eax, edx
  0001f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00022	89 7c 24 18	 mov	 DWORD PTR __Count1$[esp+28], edi

; 649  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00026	8b eb		 mov	 ebp, ebx

; 650  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00028	3b fe		 cmp	 edi, esi
  0002a	76 2a		 jbe	 SHORT $LN13@Maklocstr
  0002c	8d 64 24 00	 npad	 4
$LL8@Maklocstr:

; 651  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00030	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00034	50		 push	 eax
  00035	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst1$[esp+32]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8d 54 24 2c	 lea	 edx, DWORD PTR __Wc$[esp+36]
  0003f	55		 push	 ebp
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __Mbrtowc
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	85 c0		 test	 eax, eax
  0004b	7e 09		 jle	 SHORT $LN13@Maklocstr
  0004d	2b f8		 sub	 edi, eax
  0004f	03 e8		 add	 ebp, eax
  00051	46		 inc	 esi
  00052	85 ff		 test	 edi, edi
  00054	77 da		 ja	 SHORT $LL8@Maklocstr
$LN13@Maklocstr:

; 652  : 			break;
; 653  : 	++_Wchars;	// count terminating nul

  00056	46		 inc	 esi

; 654  : 
; 655  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];

  00057	33 c9		 xor	 ecx, ecx
  00059	8b c6		 mov	 eax, esi
  0005b	ba 02 00 00 00	 mov	 edx, 2
  00060	f7 e2		 mul	 edx
  00062	0f 90 c1	 seto	 cl
  00065	f7 d9		 neg	 ecx
  00067	0b c8		 or	 ecx, eax
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0006f	83 c4 04	 add	 esp, 4
  00072	8b e8		 mov	 ebp, eax

; 656  : 	wchar_t *_Ptrnext = _Ptrdest;

  00074	8b fd		 mov	 edi, ebp

; 657  : 	_Mbstinit(_Mbst2);

  00076	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Mbst2$[esp+28], 0

; 658  : #pragma warning(push)
; 659  : #pragma warning(disable: 6011)
; 660  : 	/* prefast noise */
; 661  : 	for (; 0 < _Wchars;
; 662  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  0007e	85 f6		 test	 esi, esi
  00080	76 27		 jbe	 SHORT $LN14@Maklocstr
$LL4@Maklocstr:

; 663  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  00082	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00086	8b 54 24 18	 mov	 edx, DWORD PTR __Count1$[esp+28]
  0008a	50		 push	 eax
  0008b	8d 4c 24 18	 lea	 ecx, DWORD PTR __Mbst2$[esp+32]
  0008f	51		 push	 ecx
  00090	52		 push	 edx
  00091	53		 push	 ebx
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 __Mbrtowc
  00098	83 c4 14	 add	 esp, 20			; 00000014H
  0009b	85 c0		 test	 eax, eax
  0009d	7e 0a		 jle	 SHORT $LN14@Maklocstr
  0009f	4e		 dec	 esi
  000a0	03 d8		 add	 ebx, eax
  000a2	83 c7 02	 add	 edi, 2
  000a5	85 f6		 test	 esi, esi
  000a7	77 d9		 ja	 SHORT $LL4@Maklocstr
$LN14@Maklocstr:

; 664  : 			break;
; 665  : 	*_Ptrnext = L'\0';

  000a9	33 c0		 xor	 eax, eax
  000ab	66 89 07	 mov	 WORD PTR [edi], ax
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 666  : #pragma warning(pop)
; 667  : 	return (_Ptrdest);

  000b0	8b c5		 mov	 eax, ebp
  000b2	5d		 pop	 ebp
  000b3	5b		 pop	 ebx

; 668  : 	}

  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@15
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@15:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@10
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@10:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@10
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@10:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@_W@std@@AAEXXZ		; std::numpunct<wchar_t>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@_W@std@@AAEXXZ PROC			; std::numpunct<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@_W@std@@AAEXXZ ENDP			; std::numpunct<wchar_t>::_Tidy
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr@2:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr@2
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr@2
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr@2:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr@2
$LN1@Maklocstr@2:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 2
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 43		 je	 SHORT $LN1@operator@11
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 22		 je	 SHORT $LN7@operator@11
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 1a		 jle	 SHORT $LN7@operator@11
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  0002c	66 89 08	 mov	 WORD PTR [eax], cx
  0002f	0f b7 c1	 movzx	 eax, cx
  00032	eb 0f		 jmp	 SHORT $LN8@operator@11
$LN7@operator@11:
  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
  00040	0f b7 c0	 movzx	 eax, ax
$LN8@operator@11:
  00043	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00048	66 3b c8	 cmp	 cx, ax
  0004b	75 03		 jne	 SHORT $LN23@operator@11
$LN1@operator@11:

; 596  : 			_Failed = true;

  0004d	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@11:

; 597  : 		return (*this);

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 598  : 		}

  00053	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T144219 = -44						; size = 8
$T144218 = -44						; size = 8
$T144217 = -44						; size = 8
$T144216 = -44						; size = 8
$T144215 = -44						; size = 8
_this$ = -40						; size = 4
__Mbst1$144306 = -36					; size = 4
__Mbst1$144295 = -36					; size = 4
__Mbst1$144279 = -36					; size = 4
__Mbst1$144268 = -36					; size = 4
__Ptr$ = -36						; size = 4
$T144214 = -32						; size = 8
$T144213 = -32						; size = 8
tv175 = -28						; size = 4
__Wc$144294 = -24					; size = 2
__Wc$144305 = -24					; size = 2
__Wc$144267 = -24					; size = 2
__Wc$144278 = -24					; size = 2
$T144243 = -24						; size = 4
$T144281 = -20						; size = 1
$T144270 = -20						; size = 1
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
$T144308 = 12						; size = 1
$T144297 = 12						; size = 1
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d8	 mov	 DWORD PTR _this$[ebp], esi

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv

; 137  : 
; 138  : 		_Grouping = 0;

  00035	33 db		 xor	 ebx, ebx
  00037	8b f8		 mov	 edi, eax
  00039	89 7d dc	 mov	 DWORD PTR __Ptr$[ebp], edi
  0003c	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 139  : 		_Falsename = 0;

  0003f	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 140  : 		_Truename = 0;

  00042	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00050	89 45 e8	 mov	 DWORD PTR $T144243[ebp], eax
  00053	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL46@Init:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	40		 inc	 eax
  00059	3a cb		 cmp	 cl, bl
  0005b	75 f9		 jne	 SHORT $LL46@Init
  0005d	2b c2		 sub	 eax, edx
  0005f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 e4	 mov	 DWORD PTR tv175[ebp], eax
  0006e	8b c8		 mov	 ecx, eax
$LL15@Init:
  00070	3b fb		 cmp	 edi, ebx
  00072	76 0f		 jbe	 SHORT $LN13@Init
  00074	8b 55 e8	 mov	 edx, DWORD PTR $T144243[ebp]
  00077	8a 02		 mov	 al, BYTE PTR [edx]
  00079	88 01		 mov	 BYTE PTR [ecx], al
  0007b	4f		 dec	 edi
  0007c	41		 inc	 ecx
  0007d	42		 inc	 edx
  0007e	89 55 e8	 mov	 DWORD PTR $T144243[ebp], edx
  00081	eb ed		 jmp	 SHORT $LL15@Init
$LN13@Init:
  00083	8b 4d e4	 mov	 ecx, DWORD PTR tv175[ebp]
  00086	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00089	e8 00 00 00 00	 call	 __Getcvt
  0008e	89 55 e4	 mov	 DWORD PTR $T144213[ebp+4], edx
  00091	8d 55 e0	 lea	 edx, DWORD PTR $T144213[ebp]
  00094	52		 push	 edx
  00095	53		 push	 ebx
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  0009b	89 45 e0	 mov	 DWORD PTR $T144213[ebp], eax
  0009e	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000a9	e8 00 00 00 00	 call	 __Getcvt
  000ae	89 45 e0	 mov	 DWORD PTR $T144214[ebp], eax
  000b1	8d 45 e0	 lea	 eax, DWORD PTR $T144214[ebp]
  000b4	50		 push	 eax
  000b5	53		 push	 ebx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000bb	89 55 e4	 mov	 DWORD PTR $T144214[ebp+4], edx
  000be	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000d0	e8 00 00 00 00	 call	 __Getcvt
  000d5	8b 7d dc	 mov	 edi, DWORD PTR __Ptr$[ebp]
  000d8	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000da	89 45 d4	 mov	 DWORD PTR $T144215[ebp], eax
  000dd	89 55 d8	 mov	 DWORD PTR $T144215[ebp+4], edx
  000e0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000e2	8d 45 d4	 lea	 eax, DWORD PTR $T144215[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$144268[ebp]
  000e9	51		 push	 ecx
  000ea	88 55 ec	 mov	 BYTE PTR $T144270[ebp], dl
  000ed	6a 01		 push	 1
  000ef	8d 55 ec	 lea	 edx, DWORD PTR $T144270[ebp]
  000f2	52		 push	 edx
  000f3	8d 45 e8	 lea	 eax, DWORD PTR __Wc$144267[ebp]
  000f6	50		 push	 eax
  000f7	89 5d e8	 mov	 DWORD PTR __Wc$144267[ebp], ebx
  000fa	89 5d dc	 mov	 DWORD PTR __Mbst1$144268[ebp], ebx
  000fd	e8 00 00 00 00	 call	 __Mbrtowc
  00102	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$144267[ebp]
  00106	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  0010a	e8 00 00 00 00	 call	 __Getcvt
  0010f	89 55 d8	 mov	 DWORD PTR $T144216[ebp+4], edx
  00112	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00115	89 45 d4	 mov	 DWORD PTR $T144216[ebp], eax
  00118	8a 02		 mov	 al, BYTE PTR [edx]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR $T144216[ebp]
  0011d	51		 push	 ecx
  0011e	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$144279[ebp]
  00121	52		 push	 edx
  00122	88 45 ec	 mov	 BYTE PTR $T144281[ebp], al
  00125	6a 01		 push	 1
  00127	8d 45 ec	 lea	 eax, DWORD PTR $T144281[ebp]
  0012a	50		 push	 eax
  0012b	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$144278[ebp]
  0012e	51		 push	 ecx
  0012f	89 5d e8	 mov	 DWORD PTR __Wc$144278[ebp], ebx
  00132	89 5d dc	 mov	 DWORD PTR __Mbst1$144279[ebp], ebx
  00135	e8 00 00 00 00	 call	 __Mbrtowc
  0013a	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$144278[ebp]
  0013e	83 c4 28	 add	 esp, 40			; 00000028H
  00141	66 89 56 0e	 mov	 WORD PTR [esi+14], dx

; 154  : 
; 155  : 		if (_Isdef)

  00145	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00148	0f 84 82 00 00
	00		 je	 $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  0014e	e8 00 00 00 00	 call	 __Getcvt
  00153	8d 45 d4	 lea	 eax, DWORD PTR $T144217[ebp]
  00156	50		 push	 eax
  00157	53		 push	 ebx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0015d	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00162	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00165	e8 00 00 00 00	 call	 __Getcvt
  0016a	8d 4d d4	 lea	 ecx, DWORD PTR $T144218[ebp]
  0016d	51		 push	 ecx
  0016e	89 55 d8	 mov	 DWORD PTR $T144218[ebp+4], edx
  00171	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$144295[ebp]
  00174	52		 push	 edx
  00175	89 45 d4	 mov	 DWORD PTR $T144218[ebp], eax
  00178	6a 01		 push	 1
  0017a	8d 45 0c	 lea	 eax, DWORD PTR $T144297[ebp]
  0017d	50		 push	 eax
  0017e	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$144294[ebp]
  00181	51		 push	 ecx
  00182	c6 45 0c 2e	 mov	 BYTE PTR $T144297[ebp], 46 ; 0000002eH
  00186	89 5d e8	 mov	 DWORD PTR __Wc$144294[ebp], ebx
  00189	89 5d dc	 mov	 DWORD PTR __Mbst1$144295[ebp], ebx
  0018c	e8 00 00 00 00	 call	 __Mbrtowc
  00191	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$144294[ebp]
  00195	66 89 56 0c	 mov	 WORD PTR [esi+12], dx

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  00199	e8 00 00 00 00	 call	 __Getcvt
  0019e	89 45 d4	 mov	 DWORD PTR $T144219[ebp], eax
  001a1	8d 45 d4	 lea	 eax, DWORD PTR $T144219[ebp]
  001a4	50		 push	 eax
  001a5	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$144306[ebp]
  001a8	51		 push	 ecx
  001a9	89 55 d8	 mov	 DWORD PTR $T144219[ebp+4], edx
  001ac	6a 01		 push	 1
  001ae	8d 55 0c	 lea	 edx, DWORD PTR $T144308[ebp]
  001b1	52		 push	 edx
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __Wc$144305[ebp]
  001b5	50		 push	 eax
  001b6	c6 45 0c 2c	 mov	 BYTE PTR $T144308[ebp], 44 ; 0000002cH
  001ba	89 5d e8	 mov	 DWORD PTR __Wc$144305[ebp], ebx
  001bd	89 5d dc	 mov	 DWORD PTR __Mbst1$144306[ebp], ebx
  001c0	e8 00 00 00 00	 call	 __Mbrtowc
  001c5	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$144305[ebp]
  001c9	83 c4 34	 add	 esp, 52			; 00000034H
  001cc	66 89 4e 0e	 mov	 WORD PTR [esi+14], cx
$LN1@Init:

; 160  : 			}
; 161  : 		}

  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  001e4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@_W@std@@AAEXXZ ; std::numpunct<wchar_t>::_Tidy

; 148  : 		_RERAISE;

  001ec	33 db		 xor	 ebx, ebx
  001ee	53		 push	 ebx
  001ef	53		 push	 ebx
  001f0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN48@Init:
  001f5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<wchar_t>::_Init
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T144328 = -8						; size = 1
$T144329 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T144330 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	83 ec 08	 sub	 esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);
; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T144330[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T144329[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T144329[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T144328[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T144328[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	03 c7		 add	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 2486 : 	return _Result;
; 2487 : 	}

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_cleanup:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	_UnregisterRedTick:PROC
EXTRN	_hInst:DWORD
EXTRN	_RandStop:PROC
EXTRN	_CloseNonSysInplaceEncMutex:PROC
EXTRN	_InstanceHasSysEncMutex:PROC
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$_localcleanup$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_localcleanup$0
__unwindtable$_localcleanup DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_localcleanup DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_localcleanup$2
__ehfuncinfo$_localcleanup DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_localcleanup
	DD	01H
	DD	FLAT:__tryblocktable$_localcleanup
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _localcleanup
_TEXT	SEGMENT
$T144349 = -486						; size = 94
_tmp$ = -392						; size = 371
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_localcleanup PROC					; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_localcleanup
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 299  : 	char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 300  : 
; 301  : 	// System encryption
; 302  : 
; 303  : 	if (WizardMode == WIZARD_MODE_SYS_DEVICE
; 304  : 		&& InstanceHasSysEncMutex ())

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00036	83 f8 02	 cmp	 eax, 2
  00039	75 59		 jne	 SHORT $LN152@localclean
  0003b	e8 00 00 00 00	 call	 _InstanceHasSysEncMutex
  00040	85 c0		 test	 eax, eax
  00042	74 50		 je	 SHORT $LN152@localclean

; 305  : 	{
; 306  : 		try
; 307  : 		{
; 308  : 			BootEncStatus = BootEncObj->GetStatus();

  00044	8d 8d 1a fe ff
	ff		 lea	 ecx, DWORD PTR $T144349[ebp]
  0004a	51		 push	 ecx
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00051	33 db		 xor	 ebx, ebx
  00053	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00056	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0005b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00060	8b f0		 mov	 esi, eax
  00062	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00067	f3 a5		 rep movsd
  00069	66 a5		 movsw

; 309  : 
; 310  : 			if (BootEncStatus.SetupInProgress)

  0006b	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  00071	74 0b		 je	 SHORT $LN41@localclean

; 311  : 			{
; 312  : 				BootEncObj->AbortSetup ();

  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00079	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup
$LN41@localclean:
  0007e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00085	eb 0f		 jmp	 SHORT $LN51@localclean
__catch$_localcleanup$0:

; 313  : 			}
; 314  : 		}
; 315  : 		catch (...)
; 316  : 		{
; 317  : 			// NOP
; 318  : 		}

  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0008e	b8 00 00 00 00	 mov	 eax, $LN152@localclean
  00093	c3		 ret	 0
$LN152@localclean:
  00094	33 db		 xor	 ebx, ebx
$LN51@localclean:

; 319  : 	}
; 320  : 
; 321  : 	// Mon-system in-place encryption
; 322  : 
; 323  : 	if (bInPlaceEncNonSys && (bVolTransformThreadRunning || bVolTransformThreadToRun))

  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  0009c	85 d2		 test	 edx, edx
  0009e	74 18		 je	 SHORT $LN40@localclean
  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  000a5	85 c0		 test	 eax, eax
  000a7	75 0a		 jne	 SHORT $LN39@localclean
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  000af	85 c9		 test	 ecx, ecx
  000b1	74 05		 je	 SHORT $LN40@localclean
$LN39@localclean:

; 324  : 	{
; 325  : 		NonSysInplaceEncPause ();

  000b3	e8 00 00 00 00	 call	 _NonSysInplaceEncPause
$LN40@localclean:

; 326  : 	}
; 327  : 
; 328  : 	CloseNonSysInplaceEncMutex ();

  000b8	e8 00 00 00 00	 call	 _CloseNonSysInplaceEncMutex

; 329  : 	
; 330  : 
; 331  : 	// Device wipe
; 332  : 
; 333  : 	if (bDeviceWipeInProgress)

  000bd	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, ebx ; bDeviceWipeInProgress
  000c3	74 05		 je	 SHORT $LN38@localclean

; 334  : 		WipeAbort();

  000c5	e8 00 00 00 00	 call	 _WipeAbort
$LN38@localclean:

; 335  : 
; 336  : 
; 337  : 	WipePasswordsAndKeyfiles ();

  000ca	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 338  : 
; 339  : 	RandStop (TRUE);

  000cf	6a 01		 push	 1
  000d1	e8 00 00 00 00	 call	 _RandStop

; 340  : 
; 341  : 	burn (HeaderKeyGUIView, sizeof(HeaderKeyGUIView));

  000d6	ba 00 00 00 00	 mov	 edx, OFFSET _HeaderKeyGUIView
  000db	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000e0	83 c4 04	 add	 esp, 4
  000e3	8b f1		 mov	 esi, ecx
  000e5	8b c2		 mov	 eax, edx
$LL53@localclean:
  000e7	88 18		 mov	 BYTE PTR [eax], bl
  000e9	40		 inc	 eax
  000ea	83 ee 01	 sub	 esi, 1
  000ed	75 f8		 jne	 SHORT $LL53@localclean
  000ef	90		 npad	 1
$LL34@localclean:
  000f0	49		 dec	 ecx
  000f1	88 1a		 mov	 BYTE PTR [edx], bl
  000f3	42		 inc	 edx
  000f4	3b cb		 cmp	 ecx, ebx
  000f6	75 f8		 jne	 SHORT $LL34@localclean

; 342  : 	burn (MasterKeyGUIView, sizeof(MasterKeyGUIView));

  000f8	ba 00 00 00 00	 mov	 edx, OFFSET _MasterKeyGUIView
  000fd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00102	8b f1		 mov	 esi, ecx
  00104	8b c2		 mov	 eax, edx
$LL57@localclean:
  00106	88 18		 mov	 BYTE PTR [eax], bl
  00108	40		 inc	 eax
  00109	83 ee 01	 sub	 esi, 1
  0010c	75 f8		 jne	 SHORT $LL57@localclean
  0010e	8b ff		 npad	 2
$LL29@localclean:
  00110	49		 dec	 ecx
  00111	88 1a		 mov	 BYTE PTR [edx], bl
  00113	42		 inc	 edx
  00114	3b cb		 cmp	 ecx, ebx
  00116	75 f8		 jne	 SHORT $LL29@localclean

; 343  : 	burn (randPool, sizeof(randPool));

  00118	ba 00 00 00 00	 mov	 edx, OFFSET ?randPool@@3PAEA ; randPool
  0011d	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00122	8b f1		 mov	 esi, ecx
  00124	8b c2		 mov	 eax, edx
$LL61@localclean:
  00126	88 18		 mov	 BYTE PTR [eax], bl
  00128	40		 inc	 eax
  00129	83 ee 01	 sub	 esi, 1
  0012c	75 f8		 jne	 SHORT $LL61@localclean
  0012e	8b ff		 npad	 2
$LL24@localclean:
  00130	49		 dec	 ecx
  00131	88 1a		 mov	 BYTE PTR [edx], bl
  00133	42		 inc	 edx
  00134	3b cb		 cmp	 ecx, ebx
  00136	75 f8		 jne	 SHORT $LL24@localclean

; 344  : 	burn (lastRandPool, sizeof(lastRandPool));

  00138	ba 00 00 00 00	 mov	 edx, OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0013d	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00142	8b f1		 mov	 esi, ecx
  00144	8b c2		 mov	 eax, edx
$LL65@localclean:
  00146	88 18		 mov	 BYTE PTR [eax], bl
  00148	40		 inc	 eax
  00149	83 ee 01	 sub	 esi, 1
  0014c	75 f8		 jne	 SHORT $LL65@localclean
  0014e	8b ff		 npad	 2
$LL19@localclean:
  00150	49		 dec	 ecx
  00151	88 1a		 mov	 BYTE PTR [edx], bl
  00153	42		 inc	 edx
  00154	3b cb		 cmp	 ecx, ebx
  00156	75 f8		 jne	 SHORT $LL19@localclean

; 345  : 	burn (outRandPoolDispBuffer, sizeof(outRandPoolDispBuffer));

  00158	ba 00 00 00 00	 mov	 edx, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  0015d	b9 72 01 00 00	 mov	 ecx, 370		; 00000172H
  00162	8b f1		 mov	 esi, ecx
  00164	8b c2		 mov	 eax, edx
$LL69@localclean:
  00166	88 18		 mov	 BYTE PTR [eax], bl
  00168	40		 inc	 eax
  00169	83 ee 01	 sub	 esi, 1
  0016c	75 f8		 jne	 SHORT $LL69@localclean
  0016e	8b ff		 npad	 2
$LL14@localclean:
  00170	49		 dec	 ecx
  00171	88 1a		 mov	 BYTE PTR [edx], bl
  00173	42		 inc	 edx
  00174	3b cb		 cmp	 ecx, ebx
  00176	75 f8		 jne	 SHORT $LL14@localclean

; 346  : 	burn (szFileName, sizeof(szFileName));

  00178	ba 00 00 00 00	 mov	 edx, OFFSET ?szFileName@@3PADA ; szFileName
  0017d	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00182	8b f1		 mov	 esi, ecx
  00184	8b c2		 mov	 eax, edx
$LL73@localclean:
  00186	88 18		 mov	 BYTE PTR [eax], bl
  00188	40		 inc	 eax
  00189	83 ee 01	 sub	 esi, 1
  0018c	75 f8		 jne	 SHORT $LL73@localclean
  0018e	8b ff		 npad	 2
$LL9@localclean:
  00190	49		 dec	 ecx
  00191	88 1a		 mov	 BYTE PTR [edx], bl
  00193	42		 inc	 edx
  00194	3b cb		 cmp	 ecx, ebx
  00196	75 f8		 jne	 SHORT $LL9@localclean

; 347  : 	burn (szDiskFile, sizeof(szDiskFile));

  00198	ba 00 00 00 00	 mov	 edx, OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0019d	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  001a2	8b f1		 mov	 esi, ecx
  001a4	8b c2		 mov	 eax, edx
$LL77@localclean:
  001a6	88 18		 mov	 BYTE PTR [eax], bl
  001a8	40		 inc	 eax
  001a9	83 ee 01	 sub	 esi, 1
  001ac	75 f8		 jne	 SHORT $LL77@localclean
  001ae	8b ff		 npad	 2
$LL4@localclean:
  001b0	49		 dec	 ecx
  001b1	88 1a		 mov	 BYTE PTR [edx], bl
  001b3	42		 inc	 edx
  001b4	3b cb		 cmp	 ecx, ebx
  001b6	75 f8		 jne	 SHORT $LL4@localclean

; 348  : 
; 349  : 	// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 350  : 	memset (tmp, 'X', sizeof(tmp));

  001b8	68 73 01 00 00	 push	 371			; 00000173H
  001bd	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _tmp$[ebp]
  001c3	6a 58		 push	 88			; 00000058H
  001c5	52		 push	 edx
  001c6	e8 00 00 00 00	 call	 _memset

; 351  : 	tmp [sizeof(tmp)-1] = 0;
; 352  : 	SetWindowText (hRandPool, tmp);

  001cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  001d1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001da	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$[ebp]
  001e0	50		 push	 eax
  001e1	51		 push	 ecx
  001e2	88 5d ea	 mov	 BYTE PTR _tmp$[ebp+370], bl
  001e5	ff d6		 call	 esi

; 353  : 	SetWindowText (hRandPoolSys, tmp);

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  001ec	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _tmp$[ebp]
  001f2	52		 push	 edx
  001f3	50		 push	 eax
  001f4	ff d6		 call	 esi

; 354  : 	SetWindowText (hMasterKey, tmp);

  001f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  001fc	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _tmp$[ebp]
  00202	51		 push	 ecx
  00203	52		 push	 edx
  00204	ff d6		 call	 esi

; 355  : 	SetWindowText (hHeaderKey, tmp);

  00206	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  0020c	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$[ebp]
  00212	50		 push	 eax
  00213	51		 push	 ecx
  00214	ff d6		 call	 esi

; 356  : 
; 357  : 	UnregisterRedTick (hInst);

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0021c	52		 push	 edx
  0021d	e8 00 00 00 00	 call	 _UnregisterRedTick

; 358  : 
; 359  : 	// Delete buffered bitmaps (if any)
; 360  : 	if (hbmWizardBitmapRescaled != NULL)

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A ; hbmWizardBitmapRescaled
  00227	83 c4 04	 add	 esp, 4
  0022a	3b c3		 cmp	 eax, ebx
  0022c	74 0d		 je	 SHORT $LN2@localclean

; 361  : 	{
; 362  : 		DeleteObject ((HGDIOBJ) hbmWizardBitmapRescaled);

  0022e	50		 push	 eax
  0022f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 363  : 		hbmWizardBitmapRescaled = NULL;

  00235	89 1d 00 00 00
	00		 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, ebx ; hbmWizardBitmapRescaled
$LN2@localclean:

; 364  : 	}
; 365  : 
; 366  : 	// Cleanup common code resources
; 367  : 	cleanup ();

  0023b	e8 00 00 00 00	 call	 _cleanup

; 368  : 
; 369  : 	if (BootEncObj != NULL)

  00240	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00246	3b cb		 cmp	 ecx, ebx
  00248	74 16		 je	 SHORT $LN1@localclean

; 370  : 	{
; 371  : 		delete BootEncObj;

  0024a	8b f1		 mov	 esi, ecx
  0024c	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00251	56		 push	 esi
  00252	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00257	83 c4 04	 add	 esp, 4

; 372  : 		BootEncObj = NULL;

  0025a	89 1d 00 00 00
	00		 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, ebx ; BootEncObj
$LN1@localclean:

; 373  : 	}
; 374  : }

  00260	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00263	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026a	59		 pop	 ecx
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	5b		 pop	 ebx
  0026e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	33 cd		 xor	 ecx, ebp
  00273	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_localcleanup:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-492]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_localcleanup
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_localcleanup ENDP
; Function compile flags: /Ogtpy
;	COMDAT ?ChangeSystemEncryptionStatus@@YAHH@Z
_TEXT	SEGMENT
?ChangeSystemEncryptionStatus@@YAHH@Z PROC		; ChangeSystemEncryptionStatus, COMDAT
; _newStatus$ = esi

; 513  : 	if (!CreateSysEncMutex ())

  00000	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00005	85 c0		 test	 eax, eax
  00007	75 10		 jne	 SHORT $LN5@ChangeSyst

; 514  : 	{
; 515  : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0000e	e8 00 00 00 00	 call	 _Error
  00013	83 c4 04	 add	 esp, 4
$LN8@ChangeSyst:

; 516  : 		return FALSE;		// Only one instance that has the mutex can modify the system encryption settings

  00016	33 c0		 xor	 eax, eax

; 539  : 	{
; 540  : 		return FALSE;
; 541  : 	}
; 542  : 
; 543  : 	return TRUE;
; 544  : }

  00018	c3		 ret	 0
$LN5@ChangeSyst:

; 517  : 	}
; 518  : 
; 519  : 	SystemEncryptionStatus = newStatus;

  00019	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi

; 520  : 	bSystemEncryptionStatusChanged = TRUE;

  0001f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1

; 521  : 
; 522  : 	if (newStatus == SYSENC_STATUS_ENCRYPTING)

  00029	81 fe 90 01 00
	00		 cmp	 esi, 400		; 00000190H

; 523  : 	{
; 524  : 		// If the user has created a hidden OS and now is creating a decoy OS, we must wipe the hidden OS
; 525  : 		// config area in the MBR.
; 526  : 		WipeHiddenOSCreationConfig();
; 527  : 	}
; 528  : 
; 529  : 	if (newStatus == SYSENC_STATUS_NONE && !IsHiddenOSRunning())

  0002f	74 23		 je	 SHORT $LN2@ChangeSyst
  00031	85 f6		 test	 esi, esi
  00033	75 24		 jne	 SHORT $LN3@ChangeSyst
  00035	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003a	85 c0		 test	 eax, eax
  0003c	75 1b		 jne	 SHORT $LN3@ChangeSyst

; 530  : 	{
; 531  : 		if (DetermineHiddenOSCreationPhase() != TC_HIDDEN_OS_CREATION_PHASE_NONE
; 532  : 			&& !ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE))

  0003e	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00043	85 c0		 test	 eax, eax
  00045	74 0d		 je	 SHORT $LN2@ChangeSyst
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  0004d	83 c4 04	 add	 esp, 4
  00050	85 c0		 test	 eax, eax

; 533  : 			return FALSE;

  00052	74 c2		 je	 SHORT $LN8@ChangeSyst
$LN2@ChangeSyst:

; 534  : 
; 535  : 		WipeHiddenOSCreationConfig();

  00054	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN3@ChangeSyst:

; 536  : 	}
; 537  : 
; 538  : 	if (!SaveSysEncSettings (MainDlg))

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0005e	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  00063	f7 d8		 neg	 eax
  00065	1b c0		 sbb	 eax, eax
  00067	f7 d8		 neg	 eax

; 539  : 	{
; 540  : 		return FALSE;
; 541  : 	}
; 542  : 
; 543  : 	return TRUE;
; 544  : }

  00069	c3		 ret	 0
?ChangeSystemEncryptionStatus@@YAHH@Z ENDP		; ChangeSystemEncryptionStatus
_TEXT	ENDS
PUBLIC	??_C@_08DDAIHKOO@IDCANCEL?$AA@			; `string'
PUBLIC	??_C@_07OOEIKEPO@DECRYPT?$AA@			; `string'
PUBLIC	??_C@_07CAOFPAJK@ENCRYPT?$AA@			; `string'
PUBLIC	??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@ ; `string'
PUBLIC	??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@ ; `string'
;	COMDAT ??_C@_08DDAIHKOO@IDCANCEL?$AA@
CONST	SEGMENT
??_C@_08DDAIHKOO@IDCANCEL?$AA@ DB 'IDCANCEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOEIKEPO@DECRYPT?$AA@
CONST	SEGMENT
??_C@_07OOEIKEPO@DECRYPT?$AA@ DB 'DECRYPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAOFPAJK@ENCRYPT?$AA@
CONST	SEGMENT
??_C@_07CAOFPAJK@ENCRYPT?$AA@ DB 'ENCRYPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@
CONST	SEGMENT
??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@ DB 'CHOOSE_ENCRYPT_OR_D'
	DB	'ECRYPT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@
CONST	SEGMENT
??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@ DB 'CHOOSE_ENCRYPT_O'
	DB	'R_DECRYPT_FINALIZE_DECRYPT_NOTE', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_ResolveUnknownSysEncDirection$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_ResolveUnknownSysEncDirection$0
__unwindtable$_ResolveUnknownSysEncDirection DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_ResolveUnknownSysEncDirection DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_ResolveUnknownSysEncDirection$2
__ehfuncinfo$_ResolveUnknownSysEncDirection DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_ResolveUnknownSysEncDirection
	DD	01H
	DD	FLAT:__tryblocktable$_ResolveUnknownSysEncDirection
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _ResolveUnknownSysEncDirection
_TEXT	SEGMENT
$T144493 = -138						; size = 94
_tmpStr$131968 = -44					; size = 24
_e$131964 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_ResolveUnknownSysEncDirection PROC			; COMDAT

; 1040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_ResolveUnknownSysEncDirection
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1041 : 	if (CreateSysEncMutex ())

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 65 01 00
	00		 je	 $LN12@ResolveUnk

; 1042 : 	{
; 1043 : 		if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 1044 : 			&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00040	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00045	0f 84 3e 01 00
	00		 je	 $LN11@ResolveUnk
  0004b	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00050	0f 84 33 01 00
	00		 je	 $LN11@ResolveUnk

; 1045 : 		{
; 1046 : 			try
; 1047 : 			{
; 1048 : 				BootEncStatus = BootEncObj->GetStatus();

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0005c	8d 85 76 ff ff
	ff		 lea	 eax, DWORD PTR $T144493[ebp]
  00062	33 db		 xor	 ebx, ebx
  00064	50		 push	 eax
  00065	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00068	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0006d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00072	8b f0		 mov	 esi, eax
  00074	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00079	f3 a5		 rep movsd
  0007b	66 a5		 movsw
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1055 : 			}
; 1056 : 
; 1057 : 			if (BootEncStatus.SetupInProgress)

  00084	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  0008a	74 30		 je	 SHORT $LN9@ResolveUnk

; 1058 : 			{
; 1059 : 				return ChangeSystemEncryptionStatus (
; 1060 : 					(BootEncStatus.SetupMode != SetupDecryption) ? SYSENC_STATUS_ENCRYPTING : SYSENC_STATUS_DECRYPTING);

  0008c	8b 35 42 00 00
	00		 mov	 esi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+66
  00092	83 ee 02	 sub	 esi, 2
  00095	f7 de		 neg	 esi
  00097	1b f6		 sbb	 esi, esi
  00099	81 e6 38 ff ff
	ff		 and	 esi, -200		; ffffff38H
  0009f	81 c6 58 02 00
	00		 add	 esi, 600		; 00000258H
  000a5	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 1091 : 	}
; 1092 : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN9@ResolveUnk:

; 1061 : 			}
; 1062 : 			else
; 1063 : 			{
; 1064 : 				// Ask the user to select encryption, decryption, or cancel
; 1065 : 
; 1066 : 				char *tmpStr[] = {0,

  000bc	89 5d d4	 mov	 DWORD PTR _tmpStr$131968[ebp], ebx

; 1067 : 					!BootEncStatus.DriveEncrypted ? "CHOOSE_ENCRYPT_OR_DECRYPT_FINALIZE_DECRYPT_NOTE" : "CHOOSE_ENCRYPT_OR_DECRYPT",

  000bf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$131968[ebp+4], OFFSET ??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@
  000c6	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  000cc	74 07		 je	 SHORT $LN16@ResolveUnk
  000ce	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$131968[ebp+4], OFFSET ??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@
$LN16@ResolveUnk:

; 1068 : 					"ENCRYPT",
; 1069 : 					"DECRYPT",
; 1070 : 					"IDCANCEL",
; 1071 : 					0};
; 1072 : 
; 1073 : 				switch (AskMultiChoice ((void **) tmpStr, FALSE))

  000d5	8d 4d d4	 lea	 ecx, DWORD PTR _tmpStr$131968[ebp]
  000d8	53		 push	 ebx
  000d9	51		 push	 ecx
  000da	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _tmpStr$131968[ebp+8], OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  000e1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tmpStr$131968[ebp+12], OFFSET ??_C@_07OOEIKEPO@DECRYPT?$AA@
  000e8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tmpStr$131968[ebp+16], OFFSET ??_C@_08DDAIHKOO@IDCANCEL?$AA@
  000ef	89 5d e8	 mov	 DWORD PTR _tmpStr$131968[ebp+20], ebx
  000f2	e8 00 00 00 00	 call	 _AskMultiChoice
  000f7	83 c4 08	 add	 esp, 8
  000fa	83 e8 01	 sub	 eax, 1
  000fd	74 4c		 je	 SHORT $LN5@ResolveUnk
  000ff	83 e8 01	 sub	 eax, 1

; 1077 : 				case 2:
; 1078 : 					return ChangeSystemEncryptionStatus (SYSENC_STATUS_DECRYPTING);
; 1079 : 				default:
; 1080 : 					return FALSE;

  00102	0f 85 a5 00 00
	00		 jne	 $LN30@ResolveUnk
  00108	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0010d	85 c0		 test	 eax, eax
  0010f	0f 84 8b 00 00
	00		 je	 $LN12@ResolveUnk
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0011a	c7 05 00 00 00
	00 58 02 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  00124	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  0012e	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  00133	f7 d8		 neg	 eax
  00135	1b c0		 sbb	 eax, eax
  00137	f7 d8		 neg	 eax

; 1091 : 	}
; 1092 : }

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
$LN5@ResolveUnk:

; 1074 : 				{
; 1075 : 				case 1:
; 1076 : 					return ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  0014b	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  00150	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 1091 : 	}
; 1092 : }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
__catch$_ResolveUnknownSysEncDirection$0:

; 1049 : 			}
; 1050 : 			catch (Exception &e)
; 1051 : 			{
; 1052 : 				e.Show (MainDlg);

  00167	8b 4d ec	 mov	 ecx, DWORD PTR _e$131964[ebp]
  0016a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00171	8b 12		 mov	 edx, DWORD PTR [edx]
  00173	50		 push	 eax
  00174	ff d2		 call	 edx

; 1053 : 				Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  0017b	e8 00 00 00 00	 call	 _Error
  00180	83 c4 04	 add	 esp, 4

; 1054 : 				return FALSE;

  00183	b8 00 00 00 00	 mov	 eax, $LN30@ResolveUnk
  00188	c3		 ret	 0
$LN11@ResolveUnk:

; 1081 : 				}
; 1082 : 			}
; 1083 : 		}
; 1084 : 		else
; 1085 : 			return TRUE;

  00189	b8 01 00 00 00	 mov	 eax, 1

; 1091 : 	}
; 1092 : }

  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN12@ResolveUnk:

; 1086 : 	}
; 1087 : 	else
; 1088 : 	{
; 1089 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  001a5	e8 00 00 00 00	 call	 _Error
  001aa	83 c4 04	 add	 esp, 4
$LN30@ResolveUnk:

; 1090 : 		return FALSE;

  001ad	33 c0		 xor	 eax, eax

; 1091 : 	}
; 1092 : }

  001af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b9	59		 pop	 ecx
  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_ResolveUnknownSysEncDirection:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_ResolveUnknownSysEncDirection
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_ResolveUnknownSysEncDirection ENDP
PUBLIC	??_C@_05KEELGAD@DEFER?$AA@			; `string'
PUBLIC	_UpdateNonSysInPlaceEncControls
EXTRN	_ArrowWaitCursor:PROC
;	COMDAT ??_C@_05KEELGAD@DEFER?$AA@
CONST	SEGMENT
??_C@_05KEELGAD@DEFER?$AA@ DB 'DEFER', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UpdateNonSysInPlaceEncControls
_TEXT	SEGMENT
_UpdateNonSysInPlaceEncControls PROC			; COMDAT

; 1838 : 	EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), !(bVolTransformThreadRunning || bVolTransformThreadToRun));

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00005	85 c0		 test	 eax, eax
  00007	75 0f		 jne	 SHORT $LN14@UpdateNonS@2
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0000f	85 c9		 test	 ecx, ecx
  00011	75 05		 jne	 SHORT $LN14@UpdateNonS@2
  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	eb 02		 jmp	 SHORT $LN15@UpdateNonS@2
$LN14@UpdateNonS@2:
  00018	33 c0		 xor	 eax, eax
$LN15@UpdateNonS@2:
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	68 3d 04 00 00	 push	 1085			; 0000043dH
  0002f	52		 push	 edx
  00030	ff d6		 call	 esi
  00032	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00038	50		 push	 eax
  00039	ff d3		 call	 ebx

; 1839 : 
; 1840 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_PAUSE),
; 1841 : 		GetString ((bVolTransformThreadRunning || bVolTransformThreadToRun) ? "IDC_PAUSE" : "RESUME"));

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00040	85 c0		 test	 eax, eax
  00042	75 0f		 jne	 SHORT $LN16@UpdateNonS@2
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
  0004f	85 c9		 test	 ecx, ecx
  00051	74 05		 je	 SHORT $LN17@UpdateNonS@2
$LN16@UpdateNonS@2:
  00053	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
$LN17@UpdateNonS@2:
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _GetString
  0005e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	68 41 04 00 00	 push	 1089			; 00000441H
  0006d	52		 push	 edx
  0006e	ff d6		 call	 esi
  00070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00076	50		 push	 eax
  00077	ff d7		 call	 edi

; 1842 : 
; 1843 : 	SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString (bInPlaceEncNonSysResumed ? "DEFER" : "CANCEL"));

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  0007e	85 c0		 test	 eax, eax
  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  00085	75 05		 jne	 SHORT $LN19@UpdateNonS@2
  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
$LN19@UpdateNonS@2:
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _GetString
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00098	83 c4 04	 add	 esp, 4
  0009b	50		 push	 eax
  0009c	6a 02		 push	 2
  0009e	51		 push	 ecx
  0009f	ff d6		 call	 esi
  000a1	50		 push	 eax
  000a2	ff d7		 call	 edi

; 1844 : 
; 1845 : 	EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), bFirstNonSysInPlaceEncResumeDone 
; 1846 : 		&& NonSysInplaceEncStatus != NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1847 : 		&& NonSysInplaceEncStatus != NONSYS_INPLACE_ENC_STATUS_FINISHED);

  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bFirstNonSysInPlaceEncResumeDone
  000aa	85 d2		 test	 edx, edx
  000ac	74 1c		 je	 SHORT $LN20@UpdateNonS@2
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  000b3	83 f8 04	 cmp	 eax, 4
  000b6	74 12		 je	 SHORT $LN20@UpdateNonS@2
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  000be	83 f9 06	 cmp	 ecx, 6
  000c1	74 07		 je	 SHORT $LN20@UpdateNonS@2
  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN21@UpdateNonS@2
$LN20@UpdateNonS@2:
  000ca	33 c0		 xor	 eax, eax
$LN21@UpdateNonS@2:
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000d2	50		 push	 eax
  000d3	68 41 04 00 00	 push	 1089			; 00000441H
  000d8	52		 push	 edx
  000d9	ff d6		 call	 esi
  000db	50		 push	 eax
  000dc	ff d3		 call	 ebx

; 1848 : 
; 1849 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !(bVolTransformThreadRunning || bVolTransformThreadToRun) && !bFirstNonSysInPlaceEncResumeDone);

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  000e3	85 c0		 test	 eax, eax
  000e5	75 19		 jne	 SHORT $LN22@UpdateNonS@2
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  000ed	85 c9		 test	 ecx, ecx
  000ef	75 0f		 jne	 SHORT $LN22@UpdateNonS@2
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bFirstNonSysInPlaceEncResumeDone
  000f7	85 d2		 test	 edx, edx
  000f9	75 05		 jne	 SHORT $LN22@UpdateNonS@2
  000fb	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000fe	eb 02		 jmp	 SHORT $LN23@UpdateNonS@2
$LN22@UpdateNonS@2:
  00100	33 c0		 xor	 eax, eax
$LN23@UpdateNonS@2:
  00102	50		 push	 eax
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00108	68 10 04 00 00	 push	 1040			; 00000410H
  0010d	50		 push	 eax
  0010e	ff d6		 call	 esi
  00110	50		 push	 eax
  00111	ff d3		 call	 ebx

; 1850 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), !(bVolTransformThreadRunning || bVolTransformThreadToRun) && !bInPlaceEncNonSysResumed);

  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00119	85 c9		 test	 ecx, ecx
  0011b	75 18		 jne	 SHORT $LN24@UpdateNonS@2
  0011d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00123	85 d2		 test	 edx, edx
  00125	75 0e		 jne	 SHORT $LN24@UpdateNonS@2
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  0012c	85 c0		 test	 eax, eax
  0012e	75 05		 jne	 SHORT $LN24@UpdateNonS@2
  00130	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00133	eb 02		 jmp	 SHORT $LN25@UpdateNonS@2
$LN24@UpdateNonS@2:
  00135	33 c0		 xor	 eax, eax
$LN25@UpdateNonS@2:
  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0013d	50		 push	 eax
  0013e	68 11 04 00 00	 push	 1041			; 00000411H
  00143	51		 push	 ecx
  00144	ff d6		 call	 esi
  00146	50		 push	 eax
  00147	ff d3		 call	 ebx

; 1851 : 	EnableWindow (GetDlgItem (MainDlg, IDCANCEL), 
; 1852 : 		!(bVolTransformThreadToRun 
; 1853 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_PREPARING 
; 1854 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_RESIZING
; 1855 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1856 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED));

  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0014f	85 d2		 test	 edx, edx
  00151	75 31		 jne	 SHORT $LN26@UpdateNonS@2
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00158	83 f8 01	 cmp	 eax, 1
  0015b	74 27		 je	 SHORT $LN26@UpdateNonS@2
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  00163	83 f9 02	 cmp	 ecx, 2
  00166	74 1c		 je	 SHORT $LN26@UpdateNonS@2
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncStatus
  0016e	83 fa 04	 cmp	 edx, 4
  00171	74 11		 je	 SHORT $LN26@UpdateNonS@2
  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00178	83 f8 06	 cmp	 eax, 6
  0017b	74 07		 je	 SHORT $LN26@UpdateNonS@2
  0017d	b8 01 00 00 00	 mov	 eax, 1
  00182	eb 02		 jmp	 SHORT $LN27@UpdateNonS@2
$LN26@UpdateNonS@2:
  00184	33 c0		 xor	 eax, eax
$LN27@UpdateNonS@2:
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0018c	50		 push	 eax
  0018d	6a 02		 push	 2
  0018f	51		 push	 ecx
  00190	ff d6		 call	 esi
  00192	50		 push	 eax
  00193	ff d3		 call	 ebx

; 1857 : 
; 1858 : 	if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  00195	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0019b	85 d2		 test	 edx, edx
  0019d	75 62		 jne	 SHORT $LN10@UpdateNonS@2
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  001a4	85 c0		 test	 eax, eax
  001a6	75 59		 jne	 SHORT $LN10@UpdateNonS@2

; 1879 : 	}
; 1880 : 	else
; 1881 : 	{
; 1882 : 		NormalCursor ();

  001a8	e8 00 00 00 00	 call	 _NormalCursor

; 1883 : 
; 1884 : 		if (bInPlaceEncNonSysResumed)

  001ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  001b3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  001b9	85 c9		 test	 ecx, ecx
  001bb	74 0c		 je	 SHORT $LN2@UpdateNonS@2

; 1885 : 		{
; 1886 : 			SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PAUSED);

  001bd	6a 05		 push	 5
  001bf	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus
  001c4	83 c4 04	 add	 esp, 4

; 1887 : 		}
; 1888 : 		else

  001c7	eb 16		 jmp	 SHORT $LN1@UpdateNonS@2
$LN2@UpdateNonS@2:

; 1889 : 			SetWindowText (GetDlgItem (hCurPage, IDC_WRITESPEED), " ");

  001c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001d4	68 01 04 00 00	 push	 1025			; 00000401H
  001d9	52		 push	 edx
  001da	ff d6		 call	 esi
  001dc	50		 push	 eax
  001dd	ff d7		 call	 edi
$LN1@UpdateNonS@2:

; 1890 : 
; 1891 : 		SetWindowText (GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001e9	68 03 04 00 00	 push	 1027			; 00000403H
  001ee	50		 push	 eax
  001ef	ff d6		 call	 esi
  001f1	50		 push	 eax
  001f2	ff d7		 call	 edi

; 1892 : 	}
; 1893 : 
; 1894 : 	ShowNonSysInPlaceEncUIStatus ();

  001f4	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx

; 1895 : 
; 1896 : 	UpdateNonSysInplaceEncProgressBar ();

  001fc	e9 00 00 00 00	 jmp	 _UpdateNonSysInplaceEncProgressBar
$LN10@UpdateNonS@2:

; 1859 : 	{
; 1860 : 		switch (NonSysInplaceEncStatus)

  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00206	48		 dec	 eax
  00207	83 f8 03	 cmp	 eax, 3
  0020a	77 0e		 ja	 SHORT $LN5@UpdateNonS@2
  0020c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@UpdateNonS@2[eax*4]
$LN7@UpdateNonS@2:

; 1861 : 		{
; 1862 : 		case NONSYS_INPLACE_ENC_STATUS_PREPARING:
; 1863 : 		case NONSYS_INPLACE_ENC_STATUS_RESIZING:
; 1864 : 		case NONSYS_INPLACE_ENC_STATUS_FINALIZING:
; 1865 : 			ArrowWaitCursor ();

  00213	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 1866 : 			break;

  00218	eb 05		 jmp	 SHORT $LN8@UpdateNonS@2
$LN5@UpdateNonS@2:

; 1867 : 
; 1868 : 		case NONSYS_INPLACE_ENC_STATUS_ENCRYPTING:
; 1869 : 			NormalCursor ();
; 1870 : 			break;
; 1871 : 
; 1872 : 		default:
; 1873 : 			NormalCursor ();

  0021a	e8 00 00 00 00	 call	 _NormalCursor
$LN8@UpdateNonS@2:

; 1874 : 			break;
; 1875 : 		}
; 1876 : 
; 1877 : 		if (bVolTransformThreadCancel)

  0021f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bVolTransformThreadCancel
  00225	85 c9		 test	 ecx, ecx
  00227	74 05		 je	 SHORT $LN4@UpdateNonS@2

; 1878 : 			WaitCursor ();

  00229	e8 00 00 00 00	 call	 _WaitCursor
$LN4@UpdateNonS@2:

; 1892 : 	}
; 1893 : 
; 1894 : 	ShowNonSysInPlaceEncUIStatus ();

  0022e	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus
  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx

; 1895 : 
; 1896 : 	UpdateNonSysInplaceEncProgressBar ();

  00236	e9 00 00 00 00	 jmp	 _UpdateNonSysInplaceEncProgressBar
  0023b	90		 npad	 1
$LN30@UpdateNonS@2:

; 1897 : }

  0023c	00 00 00 00	 DD	 $LN7@UpdateNonS@2
  00240	00 00 00 00	 DD	 $LN7@UpdateNonS@2
  00244	00 00 00 00	 DD	 $LN5@UpdateNonS@2
  00248	00 00 00 00	 DD	 $LN7@UpdateNonS@2
_UpdateNonSysInPlaceEncControls ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_0CE@IIKKMGJC@AfterSysEncProgressWMInitTasks?38@ ; `string'
EXTRN	_InconsistencyResolved:PROC
EXTRN	_ManageStartupSeqWiz:PROC
;	COMDAT ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@ DB 'SYSTEM_ENCRYPTION_'
	DB	'FINISHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IIKKMGJC@AfterSysEncProgressWMInitTasks?38@
CONST	SEGMENT
??_C@_0CE@IIKKMGJC@AfterSysEncProgressWMInitTasks?38@ DB 'AfterSysEncProg'
	DB	'ressWMInitTasks:8403', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_AfterSysEncProgressWMInitTasks$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_AfterSysEncProgressWMInitTasks$0
__unwindtable$_AfterSysEncProgressWMInitTasks DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_AfterSysEncProgressWMInitTasks DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_AfterSysEncProgressWMInitTasks$2
__ehfuncinfo$_AfterSysEncProgressWMInitTasks DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_AfterSysEncProgressWMInitTasks
	DD	01H
	DD	FLAT:__tryblocktable$_AfterSysEncProgressWMInitTasks
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _AfterSysEncProgressWMInitTasks
_TEXT	SEGMENT
_e$135108 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_AfterSysEncProgressWMInitTasks PROC			; COMDAT

; 8365 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_AfterSysEncProgressWMInitTasks
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8366 : 	try
; 8367 : 	{
; 8368 : 		switch (SystemEncryptionStatus)

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00030	33 f6		 xor	 esi, esi
  00032	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00035	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0003a	0f 84 9a 00 00
	00		 je	 $LN5@AfterSysEn
  00040	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00045	0f 84 69 01 00
	00		 je	 $LN4@AfterSysEn

; 8388 : 			}
; 8389 : 
; 8390 : 			break;
; 8391 : 
; 8392 : 		case SYSENC_STATUS_DECRYPTING:
; 8393 : 			SysEncResume ();
; 8394 : 			break;
; 8395 : 
; 8396 : 		default:
; 8397 : 
; 8398 : 			// Unexpected mode here -- fix the inconsistency
; 8399 : 
; 8400 : 			ManageStartupSeqWiz (TRUE, "");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00050	6a 01		 push	 1
  00052	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00057	83 c4 08	 add	 esp, 8

; 8401 : 			ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  0005a	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0005f	85 c0		 test	 eax, eax
  00061	75 0f		 jne	 SHORT $LN26@AfterSysEn
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00068	e8 00 00 00 00	 call	 _Error
  0006d	83 c4 04	 add	 esp, 4
  00070	eb 3e		 jmp	 SHORT $LN22@AfterSysEn
$LN26@AfterSysEn:
  00072	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi
  00078	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  00082	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00087	85 c0		 test	 eax, eax
  00089	75 1b		 jne	 SHORT $LN24@AfterSysEn
  0008b	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00090	3b c6		 cmp	 eax, esi
  00092	74 0d		 je	 SHORT $LN23@AfterSysEn
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  0009a	83 c4 04	 add	 esp, 4
  0009d	3b c6		 cmp	 eax, esi
  0009f	74 0f		 je	 SHORT $LN22@AfterSysEn
$LN23@AfterSysEn:
  000a1	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN24@AfterSysEn:
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ab	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN22@AfterSysEn:

; 8402 : 			EndMainDlg (MainDlg);

  000b0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  000b6	e8 00 00 00 00	 call	 _EndMainDlg

; 8403 : 			InconsistencyResolved (SRC_POS);

  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IIKKMGJC@AfterSysEncProgressWMInitTasks?38@
  000c0	e8 00 00 00 00	 call	 _InconsistencyResolved
  000c5	83 c4 04	 add	 esp, 4
$LN14@AfterSysEn:

; 8419 : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN5@AfterSysEn:

; 8369 : 		{
; 8370 : 		case SYSENC_STATUS_ENCRYPTING:
; 8371 : 
; 8372 : 			if (BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 8373 : 				&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd)

  000da	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000df	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  000e5	0f 85 c9 00 00
	00		 jne	 $LN4@AfterSysEn
  000eb	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000f1	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  000f7	0f 85 b7 00 00
	00		 jne	 $LN4@AfterSysEn
  000fd	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00103	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00109	0f 85 a5 00 00
	00		 jne	 $LN4@AfterSysEn
  0010f	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00114	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  0011a	0f 85 94 00 00
	00		 jne	 $LN4@AfterSysEn

; 8374 : 			{
; 8375 : 				// The partition/drive had been fully encrypted
; 8376 : 
; 8377 : 				ManageStartupSeqWiz (TRUE, "");

  00120	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00125	6a 01		 push	 1
  00127	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  0012c	83 c4 08	 add	 esp, 8

; 8378 : 				WipeHiddenOSCreationConfig();	// For extra conservative security

  0012f	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig

; 8379 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00134	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00139	85 c0		 test	 eax, eax
  0013b	75 0f		 jne	 SHORT $LN19@AfterSysEn
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00142	e8 00 00 00 00	 call	 _Error
  00147	83 c4 04	 add	 esp, 4
  0014a	eb 3e		 jmp	 SHORT $LN15@AfterSysEn
$LN19@AfterSysEn:
  0014c	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi
  00152	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  0015c	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00161	85 c0		 test	 eax, eax
  00163	75 1b		 jne	 SHORT $LN17@AfterSysEn
  00165	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  0016a	3b c6		 cmp	 eax, esi
  0016c	74 0d		 je	 SHORT $LN16@AfterSysEn
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  00174	83 c4 04	 add	 esp, 4
  00177	3b c6		 cmp	 eax, esi
  00179	74 0f		 je	 SHORT $LN15@AfterSysEn
$LN16@AfterSysEn:
  0017b	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN17@AfterSysEn:
  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00185	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN15@AfterSysEn:

; 8380 : 
; 8381 : 				Info ("SYSTEM_ENCRYPTION_FINISHED");

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
  0018f	e8 00 00 00 00	 call	 _Info

; 8382 : 				EndMainDlg (MainDlg);

  00194	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0019a	83 c4 04	 add	 esp, 4
  0019d	e8 00 00 00 00	 call	 _EndMainDlg

; 8419 : }

  001a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ac	59		 pop	 ecx
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
$LN4@AfterSysEn:

; 8383 : 				return;
; 8384 : 			}
; 8385 : 			else
; 8386 : 			{
; 8387 : 				SysEncResume ();

  001b4	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
  001b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 8412 : 	}
; 8413 : 
; 8414 : 	InitSysEncProgressBar ();

  001c0	e8 00 00 00 00	 call	 _InitSysEncProgressBar

; 8415 : 
; 8416 : 	UpdateSysEncProgressBar ();

  001c5	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 8417 : 
; 8418 : 	UpdateSysEncControls ();

  001ca	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 8419 : }

  001cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d9	59		 pop	 ecx
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
__catch$_AfterSysEncProgressWMInitTasks$0:

; 8404 : 			return;
; 8405 : 		}
; 8406 : 	}
; 8407 : 	catch (Exception &e)
; 8408 : 	{
; 8409 : 		e.Show (hwndDlg);

  001e1	8b 4d ec	 mov	 ecx, DWORD PTR _e$135108[ebp]
  001e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e6	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  001e9	8b 12		 mov	 edx, DWORD PTR [edx]
  001eb	50		 push	 eax
  001ec	ff d2		 call	 edx

; 8410 : 		EndMainDlg (MainDlg);

  001ee	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  001f4	e8 00 00 00 00	 call	 _EndMainDlg

; 8411 : 		return;

  001f9	b8 00 00 00 00	 mov	 eax, $LN14@AfterSysEn
  001fe	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_AfterSysEncProgressWMInitTasks:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_AfterSysEncProgressWMInitTasks
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_AfterSysEncProgressWMInitTasks ENDP
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 89 00 00
	00		 jle	 $LN33@Xsgetn_s
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 41		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00044	50		 push	 eax
  00045	55		 push	 ebp
  00046	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  0004b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0004e	29 30		 sub	 DWORD PTR [eax], esi
  00050	29 74 24 30	 sub	 DWORD PTR __Count$[esp+32], esi
  00054	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00058	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0005b	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005f	03 ef		 add	 ebp, edi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	01 38		 add	 DWORD PTR [eax], edi
  00066	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+16]
  0006a	eb 27		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0006c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	0f b7 c0	 movzx	 eax, ax
  00078	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007d	66 3b c8	 cmp	 cx, ax
  00080	74 15		 je	 SHORT $LN32@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  00082	66 89 45 00	 mov	 WORD PTR [ebp], ax

; 353  : 				++_Copied;

  00086	46		 inc	 esi
  00087	83 c5 02	 add	 ebp, 2

; 354  : 				--_Count;

  0008a	4f		 dec	 edi
  0008b	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  0008f	89 7c 24 20	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00093	85 ff		 test	 edi, edi
  00095	7f 89		 jg	 SHORT $LL7@Xsgetn_s
$LN32@Xsgetn_s:
  00097	5d		 pop	 ebp
  00098	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 358  : 		}

  0009d	59		 pop	 ecx
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Xsgetn_s:
  000a1	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  000a2	8b c6		 mov	 eax, esi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 358  : 		}

  000a6	59		 pop	 ecx
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 82 00 00
	00		 jle	 $LN33@xsputn
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 3c		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003b	57		 push	 edi
  0003c	55		 push	 ebp
  0003d	03 c0		 add	 eax, eax
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00046	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00049	29 30		 sub	 DWORD PTR [eax], esi
  0004b	29 74 24 2c	 sub	 DWORD PTR __Count$[esp+32], esi
  0004f	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00053	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005a	03 ef		 add	 ebp, edi
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	01 38		 add	 DWORD PTR [eax], edi
  00061	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+16]
  00065	eb 25		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00067	0f b7 45 00	 movzx	 eax, WORD PTR [ebp]
  0006b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006d	50		 push	 eax
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007a	66 3b c8	 cmp	 cx, ax
  0007d	74 11		 je	 SHORT $LN32@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0007f	46		 inc	 esi
  00080	83 c5 02	 add	 ebp, 2

; 384  : 				--_Count;

  00083	4f		 dec	 edi
  00084	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  00088	89 7c 24 1c	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  0008c	85 ff		 test	 edi, edi
  0008e	7f 90		 jg	 SHORT $LL7@xsputn
$LN32@xsputn:
  00090	5d		 pop	 ebp
  00091	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 388  : 		}

  00096	59		 pop	 ecx
  00097	c2 08 00	 ret	 8
$LN33@xsputn:
  0009a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 388  : 		}

  0009f	59		 pop	 ecx
  000a0	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$135987 = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 23		 je	 SHORT $LN98@overflow
  0000b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	74 1a		 je	 SHORT $LN98@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b c1		 cmp	 eax, ecx
  00019	73 13		 jae	 SHORT $LN98@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00023	2b c1		 sub	 eax, ecx
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	66 8b 44 24 10	 mov	 ax, WORD PTR __Meta$[esp+8]
  00033	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00038	66 3b d0	 cmp	 dx, ax
  0003b	75 08		 jne	 SHORT $LN17@overflow
  0003d	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0003e	33 c0		 xor	 eax, eax
  00040	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  00045	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	53		 push	 ebx
  0004b	85 ff		 test	 edi, edi
  0004d	74 24		 je	 SHORT $LN15@overflow
  0004f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00052	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00054	8b d7		 mov	 edx, edi
  00056	8d 1c 5a	 lea	 ebx, DWORD PTR [edx+ebx*2]
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 16		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005d	ff 09		 dec	 DWORD PTR [ecx]

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005f	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	5b		 pop	 ebx
  00065	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00068	89 16		 mov	 DWORD PTR [esi], edx
  0006a	5f		 pop	 edi
  0006b	66 89 01	 mov	 WORD PTR [ecx], ax
  0006e	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  0006f	59		 pop	 ecx
  00070	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00073	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00077	75 3f		 jne	 SHORT $LN105@overflow

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 10		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 18		 mov	 ebx, DWORD PTR [eax]
  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	03 db		 add	 ebx, ebx
  0008b	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0008d	03 df		 add	 ebx, edi
  0008f	d1 fb		 sar	 ebx, 1
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00091	8b c3		 mov	 eax, ebx
  00093	d1 e8		 shr	 eax, 1
  00095	83 f8 20	 cmp	 eax, 32			; 00000020H
  00098	73 07		 jae	 SHORT $LN23@overflow
  0009a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009f	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a1	85 c0		 test	 eax, eax
  000a3	76 11		 jbe	 SHORT $LN102@overflow
$LL11@overflow:
  000a5	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000aa	2b d0		 sub	 edx, eax
  000ac	3b d3		 cmp	 edx, ebx
  000ae	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000b0	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b2	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b4	85 c0		 test	 eax, eax
$LN102@overflow:
  000b6	75 0c		 jne	 SHORT $LN9@overflow
$LN105@overflow:
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000ba	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bf	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000c0	59		 pop	 ecx
  000c1	c2 04 00	 ret	 4
$LN9@overflow:
  000c4	55		 push	 ebp

; 114  : 
; 115  : 			_Newsize += _Inc;

  000c5	03 c3		 add	 eax, ebx

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c7	6a 00		 push	 0
  000c9	50		 push	 eax
  000ca	89 44 24 18	 mov	 DWORD PTR __Newsize$135987[esp+28], eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  000d3	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000d5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000da	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000dd	85 db		 test	 ebx, ebx
  000df	76 12		 jbe	 SHORT $LN103@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$135987[esp+20]
  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	51		 push	 ecx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000f1	85 db		 test	 ebx, ebx
$LN103@overflow:
  000f3	75 42		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f8	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$135987[esp+20]
  000fc	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000ff	89 3a		 mov	 DWORD PTR [edx], edi
  00101	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00109	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0010c	d1 fa		 sar	 edx, 1
  0010e	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 				if (_Mystate & _Noread)

  00110	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00114	74 1a		 je	 SHORT $LN6@overflow

; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	89 39		 mov	 DWORD PTR [ecx], edi
  0011b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0011e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	d1 ff		 sar	 edi, 1
  00129	89 38		 mov	 DWORD PTR [eax], edi

; 129  : 				else

  0012b	e9 80 00 00 00	 jmp	 $LN2@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00130	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  00133	51		 push	 ecx
  00134	57		 push	 edi

; 131  : 				}
; 132  : 			else

  00135	eb 71		 jmp	 SHORT $LN104@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00137	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	2b d5		 sub	 edx, ebp
  0013f	d1 fa		 sar	 edx, 1
  00141	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00144	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0014c	2b d5		 sub	 edx, ebp
  0014e	d1 fa		 sar	 edx, 1
  00150	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	2b d5		 sub	 edx, ebp
  00157	d1 fa		 sar	 edx, 1
  00159	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  0015c	89 11		 mov	 DWORD PTR [ecx], edx
  0015e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00161	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$135987[esp+20]
  00165	89 01		 mov	 DWORD PTR [ecx], eax
  00167	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0016a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016d	2b c8		 sub	 ecx, eax
  0016f	03 cf		 add	 ecx, edi
  00171	d1 f9		 sar	 ecx, 1
  00173	89 0a		 mov	 DWORD PTR [edx], ecx

; 138  : 				if (_Mystate & _Noread)

  00175	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00179	74 17		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 38		 mov	 DWORD PTR [eax], edi
  00180	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00183	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00189	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0018c	d1 ff		 sar	 edi, 1
  0018e	89 3a		 mov	 DWORD PTR [edx], edi

; 140  : 				else

  00190	eb 1e		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00192	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0019a	8b 02		 mov	 eax, DWORD PTR [edx]
  0019c	83 c1 02	 add	 ecx, 2
  0019f	2b c5		 sub	 eax, ebp
  001a1	51		 push	 ecx
  001a2	d1 f8		 sar	 eax, 1
  001a4	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  001a7	51		 push	 ecx
$LN104@overflow:
  001a8	57		 push	 edi
  001a9	8b ce		 mov	 ecx, esi
  001ab	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
$LN2@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  001b0	bb 01 00 00 00	 mov	 ebx, 1
  001b5	84 5e 40	 test	 BYTE PTR [esi+64], bl
  001b8	74 09		 je	 SHORT $LN87@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001ba	55		 push	 ebp
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN87@overflow:

; 148  : 			_Mystate |= _Allocated;

  001c3	09 5e 40	 or	 DWORD PTR [esi+64], ebx

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001c6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001c9	ff 08		 dec	 DWORD PTR [eax]
  001cb	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d0	66 8b 44 24 18	 mov	 ax, WORD PTR __Meta$[esp+16]
  001d5	5d		 pop	 ebp
  001d6	5b		 pop	 ebx
  001d7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001da	89 16		 mov	 DWORD PTR [esi], edx
  001dc	5f		 pop	 edi
  001dd	66 89 01	 mov	 WORD PTR [ecx], ax
  001e0	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001e1	59		 pop	 ecx
  001e2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@3

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@3

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@3

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@3:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@3:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 ff		 test	 edi, edi
  00018	0f 84 8d 00 00
	00		 je	 $LN4@Init@2
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	0f 84 82 00 00
	00		 je	 $LN4@Init@2
  00029	53		 push	 ebx

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00032	8b d8		 mov	 ebx, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00034	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00038	03 ff		 add	 edi, edi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _memcpy_s
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00046	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00050	75 13		 jne	 SHORT $LN21@Init@2

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  00052	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00055	89 19		 mov	 DWORD PTR [ecx], ebx
  00057	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005a	89 1a		 mov	 DWORD PTR [edx], ebx
  0005c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005f	8b cf		 mov	 ecx, edi
  00061	d1 f9		 sar	 ecx, 1
  00063	89 0a		 mov	 DWORD PTR [edx], ecx
$LN21@Init@2:

; 287  : 			if (!(_Mystate & _Constant))

  00065	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00068	f6 c1 02	 test	 cl, 2
  0006b	75 39		 jne	 SHORT $LN27@Init@2

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  0006d	f6 c1 10	 test	 cl, 16			; 00000010H
  00070	75 02		 jne	 SHORT $LN8@Init@2
  00072	8b c3		 mov	 eax, ebx
$LN8@Init@2:
  00074	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00077	89 19		 mov	 DWORD PTR [ecx], ebx
  00079	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007c	2b f8		 sub	 edi, eax
  0007e	89 02		 mov	 DWORD PTR [edx], eax
  00080	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00083	03 fb		 add	 edi, ebx
  00085	d1 ff		 sar	 edi, 1
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 292  : 				if (_Mysb::gptr() == 0)

  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0008f	75 15		 jne	 SHORT $LN27@Init@2

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	89 1a		 mov	 DWORD PTR [edx], ebx
  00096	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a2	d1 fb		 sar	 ebx, 1
  000a4	89 19		 mov	 DWORD PTR [ecx], ebx
$LN27@Init@2:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  000a6	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  000aa	5b		 pop	 ebx
$LN4@Init@2:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 296  : 			}
; 297  : 		}

  000ad	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 5b		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 42		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	0f b7 17	 movzx	 edx, WORD PTR [edi]
  00020	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00023	74 1b		 je	 SHORT $LN16@Put
  00025	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00028	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002b	7e 13		 jle	 SHORT $LN16@Put
  0002d	ff 08		 dec	 DWORD PTR [eax]
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	66 89 11	 mov	 WORD PTR [ecx], dx
  0003b	0f b7 c2	 movzx	 eax, dx
  0003e	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	52		 push	 edx
  00043	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00046	ff d2		 call	 edx
  00048	0f b7 c0	 movzx	 eax, ax
$LN17@Put:
  0004b	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00050	66 3b c8	 cmp	 cx, ax
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  00057	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00059	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  0005e	4d		 dec	 ebp
  0005f	83 c7 02	 add	 edi, 2
  00062	85 ed		 test	 ebp, ebp
  00064	77 ad		 ja	 SHORT $LL3@Put
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  00068	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0006c	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00070	89 10		 mov	 DWORD PTR [eax], edx
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00075	5d		 pop	 ebp

; 1513 : 		}

  00076	c3		 ret	 0
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 2
__Count$ = 28						; size = 4
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	57		 push	 edi
  00005	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp]
  00009	85 ff		 test	 edi, edi
  0000b	76 53		 jbe	 SHORT $LN1@Rep
  0000d	56		 push	 esi
  0000e	8b 74 24 1c	 mov	 esi, DWORD PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 3f		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1b		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 13		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	66 89 31	 mov	 WORD PTR [ecx], si
  00037	0f b7 c6	 movzx	 eax, si
  0003a	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	56		 push	 esi
  00042	ff d2		 call	 edx
  00044	0f b7 c0	 movzx	 eax, ax
$LN17@Rep:
  00047	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0004c	66 3b c8	 cmp	 cx, ax
  0004f	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  00053	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  00055	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  0005a	83 ef 01	 sub	 edi, 1
  0005d	75 b3		 jne	 SHORT $LL6@Rep
  0005f	5e		 pop	 esi
$LN1@Rep:

; 1547 : 		return (_Dest);

  00060	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00064	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00068	89 10		 mov	 DWORD PTR [eax], edx
  0006a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006d	5f		 pop	 edi

; 1548 : 		}

  0006e	c3		 ret	 0
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 20		 jne	 SHORT $LN30@operator@12
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN21@operator@12:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0001c	03 f9		 add	 edi, ecx
  0001e	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00021	77 13		 ja	 SHORT $LN8@operator@12
  00023	85 f6		 test	 esi, esi
  00025	74 08		 je	 SHORT $LN26@operator@12
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	eb 06		 jmp	 SHORT $LN27@operator@12
$LN30@operator@12:
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	eb e3		 jmp	 SHORT $LN21@operator@12
$LN26@operator@12:
  0002f	33 c0		 xor	 eax, eax
$LN27@operator@12:
  00031	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00034	73 05		 jae	 SHORT $LN7@operator@12
$LN8@operator@12:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@operator@12:
  0003b	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003f	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00042	5f		 pop	 edi
  00043	89 30		 mov	 DWORD PTR [eax], esi
  00045	5e		 pop	 esi

; 383  : 		}

  00046	c2 08 00	 ret	 8
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
$T146126 = -16						; size = 1
__Wc$146123 = -12					; size = 2
tv163 = -8						; size = 4
__Mbst1$146124 = -4					; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc, COMDAT

; 1517 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	55		 push	 ebp

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00004	33 ed		 xor	 ebp, ebp
  00006	39 6c 24 2c	 cmp	 DWORD PTR __Count$[esp+16], ebp
  0000a	0f 86 b8 00 00
	00		 jbe	 $LN37@Putc
  00010	8b 44 24 18	 mov	 eax, DWORD PTR _this$[esp+16]
  00014	53		 push	 ebx
  00015	56		 push	 esi

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00016	83 c0 08	 add	 eax, 8
  00019	57		 push	 edi
  0001a	8b 7c 24 34	 mov	 edi, DWORD PTR __Ptr$[esp+28]
  0001e	89 44 24 18	 mov	 DWORD PTR tv163[esp+32], eax
$LL38@Putc:
  00022	8b 54 24 18	 mov	 edx, DWORD PTR tv163[esp+32]
  00026	8a 0f		 mov	 cl, BYTE PTR [edi]
  00028	52		 push	 edx
  00029	8d 44 24 20	 lea	 eax, DWORD PTR __Mbst1$146124[esp+36]
  0002d	50		 push	 eax
  0002e	88 4c 24 18	 mov	 BYTE PTR $T146126[esp+40], cl
  00032	6a 01		 push	 1
  00034	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T146126[esp+44]
  00038	51		 push	 ecx
  00039	8d 54 24 24	 lea	 edx, DWORD PTR __Wc$146123[esp+48]
  0003d	52		 push	 edx
  0003e	89 6c 24 28	 mov	 DWORD PTR __Wc$146123[esp+52], ebp
  00042	89 6c 24 30	 mov	 DWORD PTR __Mbst1$146124[esp+52], ebp
  00046	e8 00 00 00 00	 call	 __Mbrtowc
  0004b	8b 4c 24 44	 mov	 ecx, DWORD PTR __Dest$[esp+52]
  0004f	83 c4 14	 add	 esp, 20			; 00000014H
  00052	3b cd		 cmp	 ecx, ebp
  00054	74 46		 je	 SHORT $LN12@Putc
  00056	8b 59 24	 mov	 ebx, DWORD PTR [ecx+36]
  00059	8b 74 24 14	 mov	 esi, DWORD PTR __Wc$146123[esp+32]
  0005d	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00060	0f b7 d6	 movzx	 edx, si
  00063	39 2b		 cmp	 DWORD PTR [ebx], ebp
  00065	74 1c		 je	 SHORT $LN18@Putc
  00067	8b 59 34	 mov	 ebx, DWORD PTR [ecx+52]
  0006a	39 2b		 cmp	 DWORD PTR [ebx], ebp
  0006c	7e 15		 jle	 SHORT $LN18@Putc
  0006e	8b cb		 mov	 ecx, ebx
  00070	ff 09		 dec	 DWORD PTR [ecx]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00079	89 30		 mov	 DWORD PTR [eax], esi
  0007b	66 89 11	 mov	 WORD PTR [ecx], dx
  0007e	0f b7 c2	 movzx	 eax, dx
  00081	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00088	56		 push	 esi
  00089	ff d2		 call	 edx
  0008b	0f b7 c0	 movzx	 eax, ax
$LN19@Putc:
  0008e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00093	66 3b c8	 cmp	 cx, ax
  00096	8b 4c 24 30	 mov	 ecx, DWORD PTR __Dest$[esp+32]
  0009a	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  0009c	c6 44 24 2c 01	 mov	 BYTE PTR __Dest$[esp+28], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  000a1	8b 44 24 38	 mov	 eax, DWORD PTR __Count$[esp+28]
  000a5	48		 dec	 eax
  000a6	47		 inc	 edi
  000a7	89 44 24 38	 mov	 DWORD PTR __Count$[esp+28], eax
  000ab	3b c5		 cmp	 eax, ebp
  000ad	0f 87 6f ff ff
	ff		 ja	 $LL38@Putc

; 1520 : 		return (_Dest);

  000b3	8b 44 24 28	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+28]
  000b7	8b 54 24 2c	 mov	 edx, DWORD PTR __Dest$[esp+28]
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	89 10		 mov	 DWORD PTR [eax], edx
  000c0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000c3	5d		 pop	 ebp

; 1521 : 		}

  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	c3		 ret	 0
$LN37@Putc:

; 1520 : 		return (_Dest);

  000c8	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000cc	8b 4c 24 24	 mov	 ecx, DWORD PTR __Dest$[esp+20]
  000d0	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+16]
  000d4	89 10		 mov	 DWORD PTR [eax], edx
  000d6	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d9	5d		 pop	 ebp

; 1521 : 		}

  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	c3		 ret	 0
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z
_TEXT	SEGMENT
$T146213 = -16						; size = 8
$T146214 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 2
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T146213[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 32		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	66 85 c9	 test	 cx, cx
  0005c	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	6a 01		 push	 1
  00062	51		 push	 ecx
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	51		 push	 ecx
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	52		 push	 edx
  0006b	8d 44 24 28	 lea	 eax, DWORD PTR $T146214[esp+48]
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00076	8b 10		 mov	 edx, DWORD PTR [eax]
  00078	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00084	47		 inc	 edi
  00085	4b		 dec	 ebx
  00086	eb 8a		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00088	8b 10		 mov	 edx, DWORD PTR [eax]
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00095	89 11		 mov	 DWORD PTR [ecx], edx
  00097	8b c1		 mov	 eax, ecx
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T146294 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$146299 = 12					; size = 1
$T146296 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::unchecked_copy<HostDevice *,HostDevice *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$146299[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T146296[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T146294[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T146294[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::unchecked_copy<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??_7?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`vftable'
PUBLIC	??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<wchar_t>::numpunct<wchar_t>
PUBLIC	??_R4?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@_W@std@@@8			; std::numpunct<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@_W@std@@8		; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::do_grouping
PUBLIC	?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_falsename
PUBLIC	?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_truename
EXTRN	??_E?$numpunct@_W@std@@MAEPAXI@Z:PROC		; std::numpunct<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@_W@std@@8 DD FLAT:??_R0?AV?$numpunct@_W@std@@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@_W@std@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@_W@std@@8 DD 00H			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@_W@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::numpunct<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@_W@std@@6B@ DD 00H			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@_W@std@@@8
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@_W@std@@6B@
CONST	SEGMENT
??_7?$numpunct@_W@std@@6B@ DD FLAT:??_R4?$numpunct@_W@std@@6B@ ; std::numpunct<wchar_t>::`vftable'
	DD	FLAT:??_E?$numpunct@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<wchar_t>::numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<wchar_t>::numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]

; 166  : 		}

  00004	c3		 ret	 0
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	66 8b 41 0e	 mov	 ax, WORD PTR [ecx+14]

; 171  : 		}

  00004	c3		 ret	 0
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@_W@std@@MAE@XZ			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@_W@std@@MAE@XZ PROC			; std::numpunct<wchar_t>::~numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@_W@std@@MAE@XZ ENDP			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@_W@std@@MAEPAXI@Z PROC			; std::numpunct<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@16
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@16:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@_W@std@@MAEPAXI@Z ENDP			; std::numpunct<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@ ; `string'
EXTRN	__beginthread:PROC
EXTRN	_CreateNonSysInplaceEncMutex:PROC
;	COMDAT ??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	SEGMENT
??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@ DB 'NONSYS_INPLACE'
	DB	'_ENC_IN_PROGRESS', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _NonSysInplaceEncResume
_TEXT	SEGMENT
_NonSysInplaceEncResume PROC				; COMDAT

; 1773 : 	if (bVolTransformThreadRunning || bVolTransformThreadToRun || bVolTransformThreadCancel)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00005	85 c0		 test	 eax, eax
  00007	0f 85 84 00 00
	00		 jne	 $LN2@NonSysInpl@2
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00013	85 c9		 test	 ecx, ecx
  00015	75 7a		 jne	 SHORT $LN2@NonSysInpl@2
  00017	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  0001d	85 d2		 test	 edx, edx
  0001f	75 70		 jne	 SHORT $LN2@NonSysInpl@2

; 1774 : 		return;
; 1775 : 
; 1776 : 	if (!bInPlaceEncNonSysResumed
; 1777 : 		&& !FinalPreTransformPrompts ())

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  00026	85 c0		 test	 eax, eax
  00028	75 09		 jne	 SHORT $LN1@NonSysInpl@2
  0002a	e8 00 00 00 00	 call	 _FinalPreTransformPrompts
  0002f	85 c0		 test	 eax, eax
  00031	74 5e		 je	 SHORT $LN2@NonSysInpl@2
$LN1@NonSysInpl@2:

; 1778 : 	{
; 1779 : 		return;
; 1780 : 	}
; 1781 : 
; 1782 : 	CreateNonSysInplaceEncMutex ();

  00033	e8 00 00 00 00	 call	 _CreateNonSysInplaceEncMutex

; 1783 : 
; 1784 : 	bFirstNonSysInPlaceEncResumeDone = TRUE;
; 1785 : 
; 1786 : 	SetTimer (MainDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS, TIMER_INTERVAL_NONSYS_INPLACE_ENC_PROGRESS, NULL);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0003e	6a 00		 push	 0
  00040	6a 1e		 push	 30			; 0000001eH
  00042	68 01 01 00 00	 push	 257			; 00000101H
  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bFirstNonSysInPlaceEncResumeDone, 1
  00051	51		 push	 ecx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1787 : 
; 1788 : 	bVolTransformThreadCancel = FALSE;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 0

; 1789 : 	bVolTransformThreadToRun = TRUE;

  00062	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 1 ; bVolTransformThreadToRun

; 1790 : 
; 1791 : 	UpdateNonSysInPlaceEncControls ();

  0006c	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls

; 1792 : 
; 1793 : 	LastDialogId = "NONSYS_INPLACE_ENC_IN_PROGRESS";
; 1794 : 
; 1795 : 	_beginthread (volTransformThreadFunction, 0, MainDlg);

  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	68 00 00 00 00	 push	 OFFSET _volTransformThreadFunction
  0007f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@
  00089	e8 00 00 00 00	 call	 __beginthread
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@NonSysInpl@2:

; 1796 : 
; 1797 : 	return;
; 1798 : }

  00091	c3		 ret	 0
_NonSysInplaceEncResume ENDP
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
PUBLIC	??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 559  : 		_Tidy();

  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 560  : 		}

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4
  00040	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5e		 pop	 esi
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@17
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@17:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T147821 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T147821[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T147826 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T147826[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::truename
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append:
  00044	76 58		 jbe	 SHORT $LN64@append

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append:
  0009e	5f		 pop	 edi
$LN63@append:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T148290 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T148290[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@2

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@2:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@2

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@2:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@2
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append@2
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append@2
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@2:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append@2
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append@2:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append@2

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append@2
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append@2

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@2:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append@2
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append@2
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append@2:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append@2:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append@2:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append@2
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append@2
$LN68@append@2:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append@2:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append@2
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append@2:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append@2:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@3

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@3:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@3

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@3:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@3
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@3
$LN2@append@3:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@3:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append@3
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append@3
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@3:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append@3
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append@3:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append@3

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append@3
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append@3

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@3:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append@3
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append@3
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append@3:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append@3:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append@3:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append@3
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append@3
$LN70@append@3:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append@3:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append@3
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append@3:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append@3:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@18
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@18:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@18
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@18:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@19
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@19:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@19
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@19:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	??1HostDevice@@QAE@XZ				; HostDevice::~HostDevice
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$2
__ehfuncinfo$??1HostDevice@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\dlgcode.h
xdata$x	ENDS
;	COMDAT ??1HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1HostDevice@@QAE@XZ PROC				; HostDevice::~HostDevice, COMDAT
; _this$ = ecx

; 505  : 	~HostDevice () { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1HostDevice@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0002c	c7 44 24 18 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 2
  00034	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00039	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0003d	72 0c		 jb	 SHORT $LN23@HostDevice
  0003f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$LN23@HostDevice:
  0004b	33 db		 xor	 ebx, ebx
  0004d	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00054	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00057	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  0005a	83 7e 3c 08	 cmp	 DWORD PTR [esi+60], 8
  0005e	72 0c		 jb	 SHORT $LN51@HostDevice
  00060	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
$LN51@HostDevice:
  0006c	33 d2		 xor	 edx, edx
  0006e	c7 46 3c 07 00
	00 00		 mov	 DWORD PTR [esi+60], 7
  00075	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00078	66 89 56 28	 mov	 WORD PTR [esi+40], dx
  0007c	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00080	72 0c		 jb	 SHORT $LN77@HostDevice
  00082	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008b	83 c4 04	 add	 esp, 4
$LN77@HostDevice:
  0008e	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00095	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00098	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  0009b	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1HostDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1HostDevice@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??1HostDevice@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1HostDevice@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1HostDevice@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1HostDevice@@QAE@XZ ENDP				; HostDevice::~HostDevice
PUBLIC	??1Partition@CipherShed@@QAE@XZ			; CipherShed::Partition::~Partition
; Function compile flags: /Ogtpy
;	COMDAT ??1Partition@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Partition@CipherShed@@QAE@XZ PROC			; CipherShed::Partition::~Partition, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 7c 08	 cmp	 DWORD PTR [esi+124], 8
  00008	72 0c		 jb	 SHORT $LN24@Partition
  0000a	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN24@Partition:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 7c 07 00
	00 00		 mov	 DWORD PTR [esi+124], 7
  00021	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00024	66 89 4e 68	 mov	 WORD PTR [esi+104], cx
  00028	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN50@Partition
  0002e	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN50@Partition:
  0003a	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00041	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00044	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  00047	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN76@Partition
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN76@Partition:
  00059	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0005c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00063	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
??1Partition@CipherShed@@QAE@XZ ENDP			; CipherShed::Partition::~Partition
_TEXT	ENDS
EXTRN	_CreateFullVolumePath:PROC
EXTRN	_strncpy:PROC
EXTRN	?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ:PROC ; CipherShed::BootEncryption::GetPartitionForHiddenOS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$?GetDevicePathForHiddenOS@@YAHXZ$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?GetDevicePathForHiddenOS@@YAHXZ$0
__unwindtable$?GetDevicePathForHiddenOS@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetDevicePathForHiddenOS@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetDevicePathForHiddenOS@@YAHXZ$3
__ehfuncinfo$?GetDevicePathForHiddenOS@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDevicePathForHiddenOS@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetDevicePathForHiddenOS@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ?GetDevicePathForHiddenOS@@YAHXZ
_TEXT	SEGMENT
$T151094 = -156						; size = 128
_e$132222 = -24						; size = 4
_tmpbDevice$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?GetDevicePathForHiddenOS@@YAHXZ PROC			; GetDevicePathForHiddenOS, COMDAT

; 1698 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetDevicePathForHiddenOS@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1699 : 	BOOL tmpbDevice = FALSE;
; 1700 : 
; 1701 : 	try
; 1702 : 	{
; 1703 : 		strncpy (szFileName, BootEncObj->GetPartitionForHiddenOS().DevicePath.c_str(), sizeof(szFileName));

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T151094[ebp]
  0003a	33 db		 xor	 ebx, ebx
  0003c	50		 push	 eax
  0003d	89 5d ec	 mov	 DWORD PTR _tmpbDevice$[ebp], ebx
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00043	e8 00 00 00 00	 call	 ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
  00048	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0004c	72 05		 jb	 SHORT $LN15@GetDeviceP
  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	eb 03		 jmp	 SHORT $LN16@GetDeviceP
$LN15@GetDeviceP:
  00053	83 c0 04	 add	 eax, 4
$LN16@GetDeviceP:
  00056	68 05 01 00 00	 push	 261			; 00000105H
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00061	e8 00 00 00 00	 call	 _strncpy
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T151094[ebp]
  0006f	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 1704 : 
; 1705 : 		CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  00074	8d 4d ec	 lea	 ecx, DWORD PTR _tmpbDevice$[ebp]
  00077	51		 push	 ecx
  00078	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0007d	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00082	e8 00 00 00 00	 call	 _CreateFullVolumePath
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1711 : 	}
; 1712 : 
; 1713 : 	return (szFileName[0] != 0 
; 1714 : 		&& szDiskFile[0] != 0 
; 1715 : 		&& tmpbDevice);

  0008a	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?szFileName@@3PADA, bl
  00090	74 39		 je	 SHORT $LN10@GetDeviceP
  00092	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?szDiskFile@@3PADA, bl
  00098	74 31		 je	 SHORT $LN10@GetDeviceP
  0009a	39 5d ec	 cmp	 DWORD PTR _tmpbDevice$[ebp], ebx
  0009d	74 2c		 je	 SHORT $LN10@GetDeviceP
  0009f	b8 01 00 00 00	 mov	 eax, 1

; 1716 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
__catch$?GetDevicePathForHiddenOS@@YAHXZ$0:

; 1706 : 	}
; 1707 : 	catch (Exception &e)
; 1708 : 	{
; 1709 : 		e.Show (MainDlg);

  000b6	8b 4d e8	 mov	 ecx, DWORD PTR _e$132222[ebp]
  000b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c0	8b 12		 mov	 edx, DWORD PTR [edx]
  000c2	50		 push	 eax
  000c3	ff d2		 call	 edx

; 1710 : 		return FALSE;

  000c5	b8 00 00 00 00	 mov	 eax, $LN10@GetDeviceP
  000ca	c3		 ret	 0
$LN10@GetDeviceP:
  000cb	33 c0		 xor	 eax, eax

; 1716 : }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetDevicePathForHiddenOS@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDevicePathForHiddenOS@@YAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDevicePathForHiddenOS@@YAHXZ ENDP			; GetDevicePathForHiddenOS
PUBLIC	??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0
__ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00033	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter
$LN8@Make_iter:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@4
$LN14@append@4:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@4:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@4
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@4
$LN18@append@4:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@4

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@4
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@4:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@4:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@4
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@4
$LN2@append@4:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@4:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@4
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@4
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@4:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@4
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@4:
  0009c	76 61		 jbe	 SHORT $LN92@append@4

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@4
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@4

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@4:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@4
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@4
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@4:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@4:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@4:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@4
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@4:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@4:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@5
$LN14@append@5:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@5
$LN18@append@5:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@5

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@5:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@5
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@5
$LN2@append@5:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@5:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@5
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@5
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@5:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@5
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@5:
  000a2	76 6c		 jbe	 SHORT $LN96@append@5

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@5
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@5

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@5:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@5
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@5
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@5:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@5:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@5:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@5
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@5:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@5:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_GHostDevice@@QAEPAXI@Z			; HostDevice::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GHostDevice@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GHostDevice@@QAEPAXI@Z PROC				; HostDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@20
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@20:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GHostDevice@@QAEPAXI@Z ENDP				; HostDevice::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ
_TEXT	SEGMENT
?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN9@front
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@front:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN42@front
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@front:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN43@front
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@front:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN42@front:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN39@front
?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::front
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	51		 push	 ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 640  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T153474 = -44						; size = 4
$T153471 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T153471[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T153474[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T153471[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T153471[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T153471[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	6a ff		 push	 -1
  00052	53		 push	 ebx
  00053	51		 push	 ecx
  00054	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T153471[esp+68]
  00058	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00065	6a ff		 push	 -1
  00067	53		 push	 ebx
  00068	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007d	83 7c 24 28 10	 cmp	 DWORD PTR $T153471[esp+80], 16 ; 00000010H
  00082	72 0d		 jb	 SHORT $LN88@operator@13
  00084	8b 54 24 14	 mov	 edx, DWORD PTR $T153471[esp+60]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN88@operator@13:
  00091	8b c6		 mov	 eax, esi

; 25   : 	}

  00093	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T153471[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@21
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@21:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ; std::_Destroy<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z PROC ; std::_Destroy<HostDevice>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ENDP ; std::_Destroy<HostDevice>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@22
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@22:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@22
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@22:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T154425 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T154425[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T154547 = -164						; size = 4
$T154541 = -160						; size = 4
$T154543 = -156						; size = 28
$T154542 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2031 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2032 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T154547[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 2033 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2034 : 				_Locinfo(_Ploc->name()));

  00049	6a 20		 push	 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T154541[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T154543[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T154542[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T154547[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T154542[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T154547[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T154543[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T154543[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 2035 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 2036 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T154541[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T154547[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T154547[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T154543[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@23
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@23:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@23
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@23:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@4:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@4
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@5:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@5
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T155233 = -76						; size = 4
__Str$136620 = -72					; size = 28
__Str$136617 = -72					; size = 28
__Nul$136622 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00033	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00036	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  0003a	33 ff		 xor	 edi, edi
  0003c	89 7c 24 10	 mov	 DWORD PTR $T155233[esp+92], edi
  00040	f6 c2 02	 test	 dl, 2
  00043	75 6e		 jne	 SHORT $LN4@str
  00045	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00048	39 39		 cmp	 DWORD PTR [ecx], edi
  0004a	74 67		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00051	3b d1		 cmp	 edx, ecx
  00053	72 02		 jb	 SHORT $LN8@str
  00055	8b ca		 mov	 ecx, edx
$LN8@str:
  00057	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	2b c8		 sub	 ecx, eax
  0005e	d1 f9		 sar	 ecx, 1
  00060	51		 push	 ecx
  00061	33 d2		 xor	 edx, edx
  00063	bb 07 00 00 00	 mov	 ebx, 7
  00068	50		 push	 eax
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136617[esp+100]
  0006d	89 5c 24 34	 mov	 DWORD PTR __Str$136617[esp+124], ebx
  00071	89 7c 24 30	 mov	 DWORD PTR __Str$136617[esp+120], edi
  00075	66 89 54 24 20	 mov	 WORD PTR __Str$136617[esp+104], dx
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007f	89 7c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], edi
$LN304@str:

; 65   : 			return (_Str);

  00083	6a ff		 push	 -1
  00085	57		 push	 edi
  00086	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136617[esp+100]
  0008a	33 c0		 xor	 eax, eax
  0008c	51		 push	 ecx
  0008d	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00090	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00093	8b ce		 mov	 ecx, esi
  00095	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	83 7c 24 2c 08	 cmp	 DWORD PTR __Str$136617[esp+116], 8
  000a3	0f 82 9d 00 00
	00		 jb	 $LN292@str
  000a9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$136617[esp+96]
  000ad	52		 push	 edx
  000ae	e9 8b 00 00 00	 jmp	 $LN303@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000b3	f6 c2 04	 test	 dl, 4
  000b6	75 43		 jne	 SHORT $LN2@str
  000b8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000bb	39 39		 cmp	 DWORD PTR [ecx], edi
  000bd	74 3c		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000bf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000c4	8b 12		 mov	 edx, DWORD PTR [edx]
  000c6	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	2b c8		 sub	 ecx, eax
  000d0	d1 f9		 sar	 ecx, 1
  000d2	51		 push	 ecx
  000d3	33 d2		 xor	 edx, edx
  000d5	bb 07 00 00 00	 mov	 ebx, 7
  000da	50		 push	 eax
  000db	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136620[esp+100]
  000df	89 5c 24 34	 mov	 DWORD PTR __Str$136620[esp+124], ebx
  000e3	89 7c 24 30	 mov	 DWORD PTR __Str$136620[esp+120], edi
  000e7	66 89 54 24 20	 mov	 WORD PTR __Str$136620[esp+104], dx
  000ec	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000f1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000f9	eb 88		 jmp	 SHORT $LN304@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000fb	bb 07 00 00 00	 mov	 ebx, 7
  00100	33 c0		 xor	 eax, eax
  00102	89 5c 24 48	 mov	 DWORD PTR __Nul$136622[esp+116], ebx
  00106	89 7c 24 44	 mov	 DWORD PTR __Nul$136622[esp+112], edi
  0010a	66 89 44 24 34	 mov	 WORD PTR __Nul$136622[esp+96], ax

; 75   : 			return (_Nul);

  0010f	6a ff		 push	 -1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00116	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00119	57		 push	 edi
  0011a	8d 54 24 38	 lea	 edx, DWORD PTR __Nul$136622[esp+100]
  0011e	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00122	52		 push	 edx
  00123	8b ce		 mov	 ecx, esi
  00125	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00132	83 7c 24 48 08	 cmp	 DWORD PTR __Nul$136622[esp+116], 8
  00137	72 0d		 jb	 SHORT $LN292@str
  00139	8b 44 24 34	 mov	 eax, DWORD PTR __Nul$136622[esp+96]
  0013d	50		 push	 eax
$LN303@str:
  0013e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00143	83 c4 04	 add	 esp, 4
$LN292@str:
  00146	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  00148	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  0015b	33 cc		 xor	 ecx, esp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 4c	 add	 esp, 76			; 0000004cH
  00165	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$136617[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$136620[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$136622[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T156456 = -80						; size = 28
$T156455 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T156456[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T156456[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T156456[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T156456[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T156456[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T156455[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T156455[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T156455[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T156456[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T156737 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T156737[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T156887 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T156887[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_falsena:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_falsena
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 181  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T157050 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T157050[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_truenam:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_truenam
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 186  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$137563 = -36					; size = 4
__Lock$157222 = -32					; size = 4
__Lock$137562 = -28					; size = 4
$T157215 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$157244 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$137562[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$137563[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$157222[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN10@use_facet:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$157222[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet
$LN30@use_facet:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet
$LN20@use_facet:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet
$LN16@use_facet:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$137563[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T157215[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T157215[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$137563[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$157244[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$157244[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$137562[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$137562[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@14:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@14
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T157292 = -164						; size = 4
$T157286 = -160						; size = 4
$T157288 = -156						; size = 28
$T157287 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T157292[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@2
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@2

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T157286[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@2
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T157288[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T157287[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T157292[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@2
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T157287[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T157292[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@2
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T157288[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@2
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T157288[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@2:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T157286[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157292[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T157292[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T157288[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T157455 = -164						; size = 4
$T157449 = -160						; size = 4
$T157451 = -156						; size = 28
$T157450 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<wchar_t>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T157455[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@3
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@3

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T157449[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@3
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T157451[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T157450[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T157455[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T157455[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<wchar_t>::numpunct<wchar_t>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@3:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@3
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T157450[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T157455[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@3
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T157451[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@3
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T157451[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@3:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T157449[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157455[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T157455[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T157451[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157455[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@3
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T157455[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T157450[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@3:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<wchar_t>::_Getcat
PUBLIC	?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ; std::allocator<HostDevice>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::allocator<HostDevice>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::allocator<HostDevice>::destroy
_TEXT	ENDS
PUBLIC	??0HostDevice@@QAE@ABU0@@Z			; HostDevice::HostDevice
PUBLIC	??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T157977 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$157974 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$157974[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T157977[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop
__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN121@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$157974[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T157977[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T158018 = -148						; size = 40
$T158016 = -148						; size = 40
$T158019 = -108						; size = 28
$T158017 = -108						; size = 28
$T158020 = -80						; size = 40
$T158021 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T158017[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T158017[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158016[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158016[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T158016[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T158019[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T158019[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158018[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T158018[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T158018[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T158021[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T158021[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T158020[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T158020[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T158020[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T158017[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T158019[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T158021[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$158190 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@3
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$158190[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@3
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@3:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$158190[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@3:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@		; `string'
PUBLIC	??_C@_05KPBLJGDL@runas?$AA@			; `string'
PUBLIC	??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
;	COMDAT ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@ DB 'UAC_INIT_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPBLJGDL@runas?$AA@
CONST	SEGMENT
??_C@_05KPBLJGDL@runas?$AA@ DB 'runas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@
CONST	SEGMENT
??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@ DB '/q UAC ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T158198 = -333						; size = 1
$T158199 = -332						; size = 28
$T158200 = -304						; size = 28
_modPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_arguments$ = 8						; size = 28
?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ElevateWholeWizardProcess, COMDAT

; 254  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 40 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+336], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c4		 xor	 eax, esp
  0002b	50		 push	 eax
  0002c	8d 84 24 50 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+348]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	33 db		 xor	 ebx, ebx
  0003b	89 9c 24 58 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+356], ebx

; 255  : 	char modPath[MAX_PATH];
; 256  : 
; 257  : 	if (IsAdmin())

  00042	e8 00 00 00 00	 call	 _IsAdmin
  00047	85 c0		 test	 eax, eax
  00049	74 24		 je	 SHORT $LN4@ElevateWho

; 258  : 		return TRUE;

  0004b	83 bc 24 78 01
	00 00 10	 cmp	 DWORD PTR _arguments$[esp+368], 16 ; 00000010H
  00053	72 10		 jb	 SHORT $LN26@ElevateWho
  00055	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR _arguments$[esp+348]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	83 c4 04	 add	 esp, 4
$LN26@ElevateWho:
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	e9 23 01 00 00	 jmp	 $LN5@ElevateWho
$LN4@ElevateWho:

; 259  : 
; 260  : 	if (!IsUacSupported())

  0006f	e8 00 00 00 00	 call	 _IsUacSupported
  00074	85 c0		 test	 eax, eax
  00076	75 28		 jne	 SHORT $LN3@ElevateWho

; 261  : 		return IsAdmin();

  00078	e8 00 00 00 00	 call	 _IsAdmin
  0007d	83 bc 24 78 01
	00 00 10	 cmp	 DWORD PTR _arguments$[esp+368], 16 ; 00000010H
  00085	8b f0		 mov	 esi, eax
  00087	72 10		 jb	 SHORT $LN52@ElevateWho
  00089	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR _arguments$[esp+348]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	83 c4 04	 add	 esp, 4
$LN52@ElevateWho:
  00099	8b c6		 mov	 eax, esi
  0009b	e9 f2 00 00 00	 jmp	 $LN5@ElevateWho
$LN3@ElevateWho:

; 262  : 
; 263  : 	GetModuleFileName (NULL, modPath, sizeof (modPath));

  000a0	68 04 01 00 00	 push	 260			; 00000104H
  000a5	8d 54 24 4c	 lea	 edx, DWORD PTR _modPath$[esp+352]
  000a9	52		 push	 edx
  000aa	53		 push	 ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 264  : 
; 265  : 	if ((int)ShellExecute (MainDlg, "runas", modPath, (string("/q UAC ") + arguments).c_str(), NULL, SW_SHOWNORMAL) > 32)

  000b1	6a 07		 push	 7
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@
  000b8	8d 4c 24 18	 lea	 ecx, DWORD PTR $T158199[esp+356]
  000bc	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T158199[esp+380], 15 ; 0000000fH
  000c4	89 5c 24 2c	 mov	 DWORD PTR $T158199[esp+376], ebx
  000c8	88 5c 24 1c	 mov	 BYTE PTR $T158199[esp+360], bl
  000cc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d1	8d 84 24 60 01
	00 00		 lea	 eax, DWORD PTR _arguments$[esp+344]
  000d8	50		 push	 eax
  000d9	8d 4c 24 14	 lea	 ecx, DWORD PTR $T158199[esp+352]
  000dd	51		 push	 ecx
  000de	8d 54 24 34	 lea	 edx, DWORD PTR $T158200[esp+356]
  000e2	52		 push	 edx
  000e3	c6 84 24 64 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+368], 1
  000eb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000f0	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  000fb	72 05		 jb	 SHORT $LN102@ElevateWho
  000fd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00100	eb 03		 jmp	 SHORT $LN103@ElevateWho
$LN102@ElevateWho:
  00102	83 c0 04	 add	 eax, 4
$LN103@ElevateWho:
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0010b	6a 01		 push	 1
  0010d	53		 push	 ebx
  0010e	50		 push	 eax
  0010f	8d 44 24 54	 lea	 eax, DWORD PTR _modPath$[esp+360]
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_05KPBLJGDL@runas?$AA@
  00119	51		 push	 ecx
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  00120	83 f8 20	 cmp	 eax, 32			; 00000020H
  00123	0f 9f 44 24 0f	 setg	 BYTE PTR $T158198[esp+348]
  00128	39 74 24 44	 cmp	 DWORD PTR $T158200[esp+372], esi
  0012c	72 0d		 jb	 SHORT $LN120@ElevateWho
  0012e	8b 54 24 30	 mov	 edx, DWORD PTR $T158200[esp+352]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00138	83 c4 04	 add	 esp, 4
$LN120@ElevateWho:
  0013b	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR $T158200[esp+372], 15 ; 0000000fH
  00143	89 5c 24 40	 mov	 DWORD PTR $T158200[esp+368], ebx
  00147	88 5c 24 30	 mov	 BYTE PTR $T158200[esp+352], bl
  0014b	39 74 24 28	 cmp	 DWORD PTR $T158199[esp+372], esi
  0014f	72 0d		 jb	 SHORT $LN146@ElevateWho
  00151	8b 44 24 14	 mov	 eax, DWORD PTR $T158199[esp+352]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015b	83 c4 04	 add	 esp, 4
$LN146@ElevateWho:
  0015e	38 5c 24 0f	 cmp	 BYTE PTR $T158198[esp+348], bl
  00162	74 06		 je	 SHORT $LN2@ElevateWho

; 266  : 	{				
; 267  : 		exit (0);

  00164	53		 push	 ebx
  00165	e8 00 00 00 00	 call	 _exit
$LN2@ElevateWho:

; 268  : 	}
; 269  : 	else
; 270  : 	{
; 271  : 		Error ("UAC_INIT_ERROR");

  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
  0016f	e8 00 00 00 00	 call	 _Error
  00174	83 c4 04	 add	 esp, 4

; 272  : 		return FALSE;

  00177	39 b4 24 78 01
	00 00		 cmp	 DWORD PTR _arguments$[esp+368], esi
  0017e	72 10		 jb	 SHORT $LN172@ElevateWho
  00180	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR _arguments$[esp+348]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018d	83 c4 04	 add	 esp, 4
$LN172@ElevateWho:
  00190	33 c0		 xor	 eax, eax
$LN5@ElevateWho:

; 273  : 	}
; 274  : }

  00192	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+348]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
  001a3	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+336]
  001aa	33 cc		 xor	 ecx, esp
  001ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b1	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  001b7	c3		 ret	 0
$LN183@ElevateWho:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _arguments$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T158199[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 82 b4 fe ff
	ff		 lea	 eax, DWORD PTR [edx-332]
  0001d	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	83 c0 08	 add	 eax, 8
  0002d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ElevateWholeWizardProcess
PUBLIC	??_C@_02CLCFLINC@?1e?$AA@			; `string'
EXTRN	_CloseSysEncMutex:PROC
;	COMDAT ??_C@_02CLCFLINC@?1e?$AA@
CONST	SEGMENT
??_C@_02CLCFLINC@?1e?$AA@ DB '/e', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ChangeWizardMode@@YAHH@Z
_TEXT	SEGMENT
$T158922 = -4						; size = 4
?ChangeWizardMode@@YAHH@Z PROC				; ChangeWizardMode, COMDAT
; _newWizardMode$ = esi

; 549  : {

  00000	51		 push	 ecx

; 550  : 	if (WizardMode != newWizardMode)	

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00006	53		 push	 ebx
  00007	3b c6		 cmp	 eax, esi
  00009	0f 84 a1 00 00
	00		 je	 $LN9@ChangeWiza

; 551  : 	{
; 552  : 		if (WizardMode == WIZARD_MODE_SYS_DEVICE || newWizardMode == WIZARD_MODE_SYS_DEVICE)

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00015	83 f9 02	 cmp	 ecx, 2
  00018	74 07		 je	 SHORT $LN7@ChangeWiza
  0001a	83 fe 02	 cmp	 esi, 2
  0001d	75 27		 jne	 SHORT $LN8@ChangeWiza

; 553  : 		{
; 554  : 			if (newWizardMode == WIZARD_MODE_SYS_DEVICE)

  0001f	eb 05		 jmp	 SHORT $LN14@ChangeWiza
$LN7@ChangeWiza:
  00021	83 fe 02	 cmp	 esi, 2
  00024	75 1b		 jne	 SHORT $LN5@ChangeWiza
$LN14@ChangeWiza:

; 555  : 			{
; 556  : 				if (!CreateSysEncMutex ())

  00026	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0002b	85 c0		 test	 eax, eax
  0002d	75 12		 jne	 SHORT $LN5@ChangeWiza

; 557  : 				{
; 558  : 					Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00034	e8 00 00 00 00	 call	 _Error
  00039	83 c4 04	 add	 esp, 4
$LN15@ChangeWiza:

; 559  : 					return FALSE;

  0003c	33 c0		 xor	 eax, eax

; 596  : }

  0003e	5b		 pop	 ebx
  0003f	59		 pop	 ecx
  00040	c3		 ret	 0
$LN5@ChangeWiza:

; 560  : 				}
; 561  : 			}
; 562  : 
; 563  : 			// If the previous mode was different, the password may have been typed using a different
; 564  : 			// keyboard layout (which might confuse the user and cause other problems if system encryption
; 565  : 			// was or will be involved).
; 566  : 			WipePasswordsAndKeyfiles();	

  00041	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN8@ChangeWiza:

; 567  : 		}
; 568  : 
; 569  : 		if (newWizardMode != WIZARD_MODE_NONSYS_DEVICE)

  00046	33 db		 xor	 ebx, ebx
  00048	83 fe 01	 cmp	 esi, 1
  0004b	74 08		 je	 SHORT $LN13@ChangeWiza

; 570  : 			bInPlaceEncNonSys = FALSE;

  0004d	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx

; 571  : 
; 572  : 		if (newWizardMode == WIZARD_MODE_NONSYS_DEVICE && !IsAdmin() && IsUacSupported())

  00053	eb 31		 jmp	 SHORT $LN2@ChangeWiza
$LN13@ChangeWiza:
  00055	e8 00 00 00 00	 call	 _IsAdmin
  0005a	85 c0		 test	 eax, eax
  0005c	75 28		 jne	 SHORT $LN2@ChangeWiza
  0005e	e8 00 00 00 00	 call	 _IsUacSupported
  00063	85 c0		 test	 eax, eax
  00065	74 1f		 je	 SHORT $LN2@ChangeWiza

; 573  : 		{
; 574  : 			if (!ElevateWholeWizardProcess ("/e"))

  00067	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 64 24 20	 mov	 DWORD PTR $T158922[esp+36], esp
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  00075	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007a	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  0007f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00082	3b c3		 cmp	 eax, ebx

; 575  : 				return FALSE;

  00084	74 b6		 je	 SHORT $LN15@ChangeWiza
$LN2@ChangeWiza:

; 576  : 		}
; 577  : 
; 578  : 		// The contents of the following items may be inappropriate after a change of mode
; 579  : 		szFileName[0] = 0;

  00086	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl

; 580  : 		szDiskFile[0] = 0;

  0008c	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl

; 581  : 		nUIVolumeSize = 0;

  00092	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00098	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx

; 582  : 		nVolumeSize = 0;

  0009e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  000a4	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx

; 583  : 
; 584  : 		WizardMode = newWizardMode;

  000aa	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN9@ChangeWiza:

; 585  : 	}
; 586  : 
; 587  : 	bDevice = (WizardMode != WIZARD_MODE_FILE_CONTAINER);

  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  000b6	f7 da		 neg	 edx
  000b8	1b d2		 sbb	 edx, edx
  000ba	f7 da		 neg	 edx
  000bc	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice

; 588  : 
; 589  : 	if (newWizardMode != WIZARD_MODE_SYS_DEVICE 
; 590  : 		&& !bHiddenOS)

  000c2	83 fe 02	 cmp	 esi, 2
  000c5	74 0e		 je	 SHORT $LN1@ChangeWiza
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  000cc	85 c0		 test	 eax, eax
  000ce	75 05		 jne	 SHORT $LN1@ChangeWiza

; 591  : 	{
; 592  : 		CloseSysEncMutex ();	

  000d0	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN1@ChangeWiza:

; 593  : 	}
; 594  : 
; 595  : 	return TRUE;

  000d5	b8 01 00 00 00	 mov	 eax, 1

; 596  : }

  000da	5b		 pop	 ebx
  000db	59		 pop	 ecx
  000dc	c3		 ret	 0
?ChangeWizardMode@@YAHH@Z ENDP				; ChangeWizardMode
_TEXT	ENDS
PUBLIC	??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@	; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_03ICICOMAL@yes?$AA@			; `string'
PUBLIC	??_C@_01EANLCPLP@y?$AA@				; `string'
PUBLIC	??_C@_02OGHPLGEM@?1z?$AA@			; `string'
PUBLIC	??_C@_09FFOCOHMH@?1zinplace?$AA@		; `string'
PUBLIC	??_C@_02DHLNANAF@?1s?$AA@			; `string'
PUBLIC	??_C@_07PFDFIFLD@?1sysenc?$AA@			; `string'
PUBLIC	??_C@_02COKGDMEE@?1r?$AA@			; `string'
PUBLIC	??_C@_09PMGMEKMI@?1risysenc?$AA@		; `string'
PUBLIC	??_C@_02BMJAFOMG@?1p?$AA@			; `string'
PUBLIC	??_C@_0L@DLEMDKJB@?1prinplace?$AA@		; `string'
PUBLIC	??_C@_02IHJAPHNO@?1i?$AA@			; `string'
PUBLIC	??_C@_08MEKEMIGM@?1isysenc?$AA@			; `string'
PUBLIC	??_C@_07MFEOHHG@?1encdev?$AA@			; `string'
PUBLIC	??_C@_02DCDOIJJD@?1d?$AA@			; `string'
PUBLIC	??_C@_08FPKBNNLN@?1dsysenc?$AA@			; `string'
PUBLIC	??_C@_02HNHPBPFE@?1c?$AA@			; `string'
PUBLIC	??_C@_08FFGENEKE@?1csysenc?$AA@			; `string'
PUBLIC	??_C@_02EPEJHNNG@?1a?$AA@			; `string'
PUBLIC	??_C@_09PIOBCILE@?1acsysenc?$AA@		; `string'
PUBLIC	??_C@_09JABABBPB@?1tokenlib?$AA@		; `string'
PUBLIC	??_C@_02FILGPIH@?1q?$AA@			; `string'
PUBLIC	??_C@_05CMMBDMDD@?1quit?$AA@			; `string'
PUBLIC	??_C@_02MINBGBBJ@?1n?$AA@			; `string'
PUBLIC	??_C@_0M@IEGCIDAG@?1noisocheck?$AA@		; `string'
PUBLIC	??_C@_02JOILMGJP@?1h?$AA@			; `string'
PUBLIC	??_C@_08BCLHLEKP@?1history?$AA@			; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	??_C@_0L@JGIDNNFC@?9Embedding?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ExtractCommandLine
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_CommandHelpDlgProc@16:PROC
EXTRN	_GetArgumentValue:PROC
EXTRN	_GetArgumentID:PROC
EXTRN	_Win32CommandLine:PROC
EXTRN	__stricmp:PROC
;	COMDAT ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
CONST	SEGMENT
??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@ DB 'COMMAND_LINE_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICICOMAL@yes?$AA@
CONST	SEGMENT
??_C@_03ICICOMAL@yes?$AA@ DB 'yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y?$AA@
CONST	SEGMENT
??_C@_01EANLCPLP@y?$AA@ DB 'y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OGHPLGEM@?1z?$AA@
CONST	SEGMENT
??_C@_02OGHPLGEM@?1z?$AA@ DB '/z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FFOCOHMH@?1zinplace?$AA@
CONST	SEGMENT
??_C@_09FFOCOHMH@?1zinplace?$AA@ DB '/zinplace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHLNANAF@?1s?$AA@
CONST	SEGMENT
??_C@_02DHLNANAF@?1s?$AA@ DB '/s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PFDFIFLD@?1sysenc?$AA@
CONST	SEGMENT
??_C@_07PFDFIFLD@?1sysenc?$AA@ DB '/sysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02COKGDMEE@?1r?$AA@
CONST	SEGMENT
??_C@_02COKGDMEE@?1r?$AA@ DB '/r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PMGMEKMI@?1risysenc?$AA@
CONST	SEGMENT
??_C@_09PMGMEKMI@?1risysenc?$AA@ DB '/risysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMJAFOMG@?1p?$AA@
CONST	SEGMENT
??_C@_02BMJAFOMG@?1p?$AA@ DB '/p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLEMDKJB@?1prinplace?$AA@
CONST	SEGMENT
??_C@_0L@DLEMDKJB@?1prinplace?$AA@ DB '/prinplace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHJAPHNO@?1i?$AA@
CONST	SEGMENT
??_C@_02IHJAPHNO@?1i?$AA@ DB '/i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEKEMIGM@?1isysenc?$AA@
CONST	SEGMENT
??_C@_08MEKEMIGM@?1isysenc?$AA@ DB '/isysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MFEOHHG@?1encdev?$AA@
CONST	SEGMENT
??_C@_07MFEOHHG@?1encdev?$AA@ DB '/encdev', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCDOIJJD@?1d?$AA@
CONST	SEGMENT
??_C@_02DCDOIJJD@?1d?$AA@ DB '/d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FPKBNNLN@?1dsysenc?$AA@
CONST	SEGMENT
??_C@_08FPKBNNLN@?1dsysenc?$AA@ DB '/dsysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNHPBPFE@?1c?$AA@
CONST	SEGMENT
??_C@_02HNHPBPFE@?1c?$AA@ DB '/c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFGENEKE@?1csysenc?$AA@
CONST	SEGMENT
??_C@_08FFGENEKE@?1csysenc?$AA@ DB '/csysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPEJHNNG@?1a?$AA@
CONST	SEGMENT
??_C@_02EPEJHNNG@?1a?$AA@ DB '/a', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIOBCILE@?1acsysenc?$AA@
CONST	SEGMENT
??_C@_09PIOBCILE@?1acsysenc?$AA@ DB '/acsysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JABABBPB@?1tokenlib?$AA@
CONST	SEGMENT
??_C@_09JABABBPB@?1tokenlib?$AA@ DB '/tokenlib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FILGPIH@?1q?$AA@
CONST	SEGMENT
??_C@_02FILGPIH@?1q?$AA@ DB '/q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMMBDMDD@?1quit?$AA@
CONST	SEGMENT
??_C@_05CMMBDMDD@?1quit?$AA@ DB '/quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MINBGBBJ@?1n?$AA@
CONST	SEGMENT
??_C@_02MINBGBBJ@?1n?$AA@ DB '/n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@
CONST	SEGMENT
??_C@_0M@IEGCIDAG@?1noisocheck?$AA@ DB '/noisocheck', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOILMGJP@?1h?$AA@
CONST	SEGMENT
??_C@_02JOILMGJP@?1h?$AA@ DB '/h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCLHLEKP@?1history?$AA@
CONST	SEGMENT
??_C@_08BCLHLEKP@?1history?$AA@ DB '/history', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
CONST	SEGMENT
??_C@_0L@JGIDNNFC@?9Embedding?$AA@ DB '-Embedding', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ExtractCommandLine
_TEXT	SEGMENT
_nNoCommandLineArgs$ = -696				; size = 4
_i$134856 = -692					; size = 4
_lpszCommandLineArgs$ = -688				; size = 4
_nArgPos$134897 = -684					; size = 4
_hwndDlg$GSCopy$ = -680					; size = 4
_as$134896 = -676					; size = 8
_args$134874 = -668					; size = 624
_szTmp$134927 = -44					; size = 8
_szTmp$134941 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_lpszCommandLine$ = 12					; size = 4
_ExtractCommandLine PROC				; COMDAT

; 7774 : {

  00000	81 ec b8 02 00
	00		 sub	 esp, 696		; 000002b8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 b4 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+696], eax
  00014	8b 84 24 bc 02
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+692]
  0001b	56		 push	 esi
  0001c	8b b4 24 c4 02
	00 00		 mov	 esi, DWORD PTR _lpszCommandLine$[esp+696]

; 7775 : 	char **lpszCommandLineArgs;	/* Array of command line arguments */
; 7776 : 	int nNoCommandLineArgs;	/* The number of arguments in the array */
; 7777 : 
; 7778 : 	if (_stricmp (lpszCommandLine, "-Embedding") == 0)

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
  00028	56		 push	 esi

; 7787 : 	{
; 7788 : 		int i;
; 7789 : 
; 7790 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  00029	89 44 24 1c	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+708], eax
  0002d	e8 00 00 00 00	 call	 __stricmp
  00032	83 c4 08	 add	 esp, 8
  00035	85 c0		 test	 eax, eax
  00037	75 20		 jne	 SHORT $LN42@ExtractCom

; 7779 : 	{
; 7780 : 		ComServerMode = TRUE;

  00039	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ComServerMode@@3HA, 1 ; ComServerMode
  00043	5e		 pop	 esi

; 8015 : 	}
; 8016 : }

  00044	8b 8c 24 b4 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+696]
  0004b	33 cc		 xor	 ecx, esp
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	81 c4 b8 02 00
	00		 add	 esp, 696		; 000002b8H
  00058	c3		 ret	 0
$LN42@ExtractCom:
  00059	53		 push	 ebx
  0005a	55		 push	 ebp
  0005b	57		 push	 edi

; 7781 : 		return;
; 7782 : 	}
; 7783 : 
; 7784 : 	/* Extract command line arguments */
; 7785 : 	nNoCommandLineArgs = Win32CommandLine (lpszCommandLine, &lpszCommandLineArgs);

  0005c	8d 4c 24 18	 lea	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00060	51		 push	 ecx
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _Win32CommandLine

; 7786 : 	if (nNoCommandLineArgs > 0)

  00067	33 db		 xor	 ebx, ebx
  00069	83 c4 08	 add	 esp, 8
  0006c	3b c3		 cmp	 eax, ebx
  0006e	89 44 24 10	 mov	 DWORD PTR _nNoCommandLineArgs$[esp+712], eax
  00072	be 01 00 00 00	 mov	 esi, 1
  00077	0f 8e c1 09 00
	00		 jle	 $LN116@ExtractCom

; 7787 : 	{
; 7788 : 		int i;
; 7789 : 
; 7790 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  0007d	33 c9		 xor	 ecx, ecx
  0007f	3b c3		 cmp	 eax, ebx
  00081	89 4c 24 14	 mov	 DWORD PTR _i$134856[esp+712], ecx
  00085	0f 8e b3 09 00
	00		 jle	 $LN116@ExtractCom
  0008b	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0008e	8d 6e 05	 lea	 ebp, DWORD PTR [esi+5]
$LL40@ExtractCom:

; 7791 : 		{
; 7792 : 			enum
; 7793 : 			{
; 7794 : 				OptionHistory,
; 7795 : 				OptionNoIsoCheck,
; 7796 : 				OptionQuit,
; 7797 : 				OptionTokenLib,
; 7798 : 				CommandResumeSysEncLogOn,
; 7799 : 				CommandResumeSysEnc,
; 7800 : 				CommandDecryptSysEnc,
; 7801 : 				CommandEncDev,
; 7802 : 				CommandHiddenSys,
; 7803 : 				CommandResumeInplaceLogOn,
; 7804 : 				CommandResumeHiddenSys,
; 7805 : 				CommandSysEnc,
; 7806 : 				CommandResumeInplace,
; 7807 : 			};
; 7808 : 
; 7809 : 			argument args[]=
; 7810 : 			{
; 7811 : 				{ OptionHistory,				"/history",			"/h", FALSE },

  00091	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@+4
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@
  0009c	89 44 24 34	 mov	 DWORD PTR _args$134874[esp+720], eax
  000a0	33 c0		 xor	 eax, eax
  000a2	89 44 24 39	 mov	 DWORD PTR _args$134874[esp+725], eax
  000a6	89 44 24 3d	 mov	 DWORD PTR _args$134874[esp+729], eax
  000aa	89 44 24 41	 mov	 DWORD PTR _args$134874[esp+733], eax
  000ae	89 44 24 45	 mov	 DWORD PTR _args$134874[esp+737], eax
  000b2	89 44 24 49	 mov	 DWORD PTR _args$134874[esp+741], eax
  000b6	66 89 44 24 4d	 mov	 WORD PTR _args$134874[esp+745], ax
  000bb	88 44 24 4f	 mov	 BYTE PTR _args$134874[esp+747], al
  000bf	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02JOILMGJP@?1h?$AA@
  000c6	66 89 44 24 50	 mov	 WORD PTR _args$134874[esp+748], ax
  000cb	33 c0		 xor	 eax, eax
  000cd	89 44 24 53	 mov	 DWORD PTR _args$134874[esp+751], eax
  000d1	88 44 24 57	 mov	 BYTE PTR _args$134874[esp+755], al

; 7812 : 				{ OptionNoIsoCheck,				"/noisocheck",		"/n", FALSE },

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@
  000da	89 44 24 60	 mov	 DWORD PTR _args$134874[esp+764], eax
  000de	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@+8
  000e3	89 54 24 30	 mov	 DWORD PTR _args$134874[esp+716], edx
  000e7	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08BCLHLEKP@?1history?$AA@+8
  000ee	89 44 24 68	 mov	 DWORD PTR _args$134874[esp+772], eax
  000f2	33 c0		 xor	 eax, eax
  000f4	89 44 24 6c	 mov	 DWORD PTR _args$134874[esp+776], eax
  000f8	89 44 24 70	 mov	 DWORD PTR _args$134874[esp+780], eax
  000fc	89 44 24 74	 mov	 DWORD PTR _args$134874[esp+784], eax
  00100	89 44 24 78	 mov	 DWORD PTR _args$134874[esp+788], eax
  00104	89 44 24 7c	 mov	 DWORD PTR _args$134874[esp+792], eax
  00108	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02MINBGBBJ@?1n?$AA@+2
  0010f	88 54 24 38	 mov	 BYTE PTR _args$134874[esp+724], dl
  00113	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02JOILMGJP@?1h?$AA@+2
  0011a	88 84 24 82 00
	00 00		 mov	 BYTE PTR _args$134874[esp+798], al
  00121	33 c0		 xor	 eax, eax
  00123	88 54 24 52	 mov	 BYTE PTR _args$134874[esp+750], dl
  00127	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@+4
  0012d	89 84 24 83 00
	00 00		 mov	 DWORD PTR _args$134874[esp+799], eax
  00134	88 84 24 87 00
	00 00		 mov	 BYTE PTR _args$134874[esp+803], al

; 7813 : 				{ OptionQuit,					"/quit",			"/q", FALSE },

  0013b	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@+4
  00142	89 54 24 64	 mov	 DWORD PTR _args$134874[esp+768], edx
  00146	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02MINBGBBJ@?1n?$AA@
  0014d	66 89 84 24 94
	00 00 00	 mov	 WORD PTR _args$134874[esp+816], ax
  00155	33 c0		 xor	 eax, eax
  00157	66 89 94 24 80
	00 00 00	 mov	 WORD PTR _args$134874[esp+796], dx
  0015f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@
  00165	89 84 24 96 00
	00 00		 mov	 DWORD PTR _args$134874[esp+818], eax
  0016c	89 84 24 9a 00
	00 00		 mov	 DWORD PTR _args$134874[esp+822], eax
  00173	89 84 24 9e 00
	00 00		 mov	 DWORD PTR _args$134874[esp+826], eax
  0017a	89 84 24 a2 00
	00 00		 mov	 DWORD PTR _args$134874[esp+830], eax
  00181	89 84 24 a6 00
	00 00		 mov	 DWORD PTR _args$134874[esp+834], eax
  00188	89 84 24 aa 00
	00 00		 mov	 DWORD PTR _args$134874[esp+838], eax
  0018f	66 89 84 24 ae
	00 00 00	 mov	 WORD PTR _args$134874[esp+842], ax
  00197	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02FILGPIH@?1q?$AA@+2
  0019e	89 94 24 90 00
	00 00		 mov	 DWORD PTR _args$134874[esp+812], edx
  001a5	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02FILGPIH@?1q?$AA@
  001ac	88 84 24 b2 00
	00 00		 mov	 BYTE PTR _args$134874[esp+846], al
  001b3	33 c0		 xor	 eax, eax
  001b5	66 89 94 24 b0
	00 00 00	 mov	 WORD PTR _args$134874[esp+844], dx

; 7814 : 				{ OptionTokenLib,				"/tokenlib",		NULL, FALSE },

  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@
  001c3	89 84 24 b3 00
	00 00		 mov	 DWORD PTR _args$134874[esp+847], eax
  001ca	88 84 24 b7 00
	00 00		 mov	 BYTE PTR _args$134874[esp+851], al
  001d1	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+4
  001d6	89 94 24 c0 00
	00 00		 mov	 DWORD PTR _args$134874[esp+860], edx
  001dd	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+8
  001e4	89 84 24 c4 00
	00 00		 mov	 DWORD PTR _args$134874[esp+864], eax
  001eb	33 c0		 xor	 eax, eax
  001ed	89 5c 24 2c	 mov	 DWORD PTR _args$134874[esp+712], ebx
  001f1	89 5c 24 58	 mov	 DWORD PTR _args$134874[esp+756], ebx
  001f5	89 74 24 5c	 mov	 DWORD PTR _args$134874[esp+760], esi
  001f9	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _args$134874[esp+804], ebx
  00200	89 bc 24 8c 00
	00 00		 mov	 DWORD PTR _args$134874[esp+808], edi
  00207	89 9c 24 b8 00
	00 00		 mov	 DWORD PTR _args$134874[esp+852], ebx
  0020e	c7 84 24 bc 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _args$134874[esp+856], 3
  00219	66 89 94 24 c8
	00 00 00	 mov	 WORD PTR _args$134874[esp+868], dx
  00221	89 84 24 ca 00
	00 00		 mov	 DWORD PTR _args$134874[esp+870], eax
  00228	89 84 24 ce 00
	00 00		 mov	 DWORD PTR _args$134874[esp+874], eax
  0022f	89 84 24 d2 00
	00 00		 mov	 DWORD PTR _args$134874[esp+878], eax
  00236	89 84 24 d6 00
	00 00		 mov	 DWORD PTR _args$134874[esp+882], eax
  0023d	89 84 24 da 00
	00 00		 mov	 DWORD PTR _args$134874[esp+886], eax
  00244	66 89 84 24 de
	00 00 00	 mov	 WORD PTR _args$134874[esp+890], ax
  0024c	88 9c 24 e0 00
	00 00		 mov	 BYTE PTR _args$134874[esp+892], bl
  00253	88 9c 24 e1 00
	00 00		 mov	 BYTE PTR _args$134874[esp+893], bl
  0025a	89 84 24 e2 00
	00 00		 mov	 DWORD PTR _args$134874[esp+894], eax
  00261	66 89 84 24 e6
	00 00 00	 mov	 WORD PTR _args$134874[esp+898], ax

; 7815 : 
; 7816 : 				{ CommandResumeSysEncLogOn,		"/acsysenc",		"/a", TRUE },

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@
  0026e	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _args$134874[esp+908], eax
  00275	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@+8
  0027c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@+4
  00282	66 89 84 24 f8
	00 00 00	 mov	 WORD PTR _args$134874[esp+916], ax
  0028a	33 c0		 xor	 eax, eax
  0028c	89 84 24 fa 00
	00 00		 mov	 DWORD PTR _args$134874[esp+918], eax
  00293	89 84 24 fe 00
	00 00		 mov	 DWORD PTR _args$134874[esp+922], eax
  0029a	89 84 24 02 01
	00 00		 mov	 DWORD PTR _args$134874[esp+926], eax
  002a1	89 84 24 06 01
	00 00		 mov	 DWORD PTR _args$134874[esp+930], eax
  002a8	89 84 24 0a 01
	00 00		 mov	 DWORD PTR _args$134874[esp+934], eax
  002af	66 89 84 24 0e
	01 00 00	 mov	 WORD PTR _args$134874[esp+938], ax
  002b7	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02EPEJHNNG@?1a?$AA@+2
  002be	88 84 24 12 01
	00 00		 mov	 BYTE PTR _args$134874[esp+942], al
  002c5	33 c0		 xor	 eax, eax
  002c7	89 84 24 13 01
	00 00		 mov	 DWORD PTR _args$134874[esp+943], eax
  002ce	88 84 24 17 01
	00 00		 mov	 BYTE PTR _args$134874[esp+947], al

; 7817 : 				{ CommandResumeSysEnc,			"/csysenc",			"/c", TRUE },

  002d5	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08FFGENEKE@?1csysenc?$AA@+4
  002da	89 84 24 24 01
	00 00		 mov	 DWORD PTR _args$134874[esp+960], eax
  002e1	33 c0		 xor	 eax, eax
  002e3	89 84 24 29 01
	00 00		 mov	 DWORD PTR _args$134874[esp+965], eax
  002ea	89 84 24 2d 01
	00 00		 mov	 DWORD PTR _args$134874[esp+969], eax
  002f1	89 84 24 31 01
	00 00		 mov	 DWORD PTR _args$134874[esp+973], eax
  002f8	89 84 24 35 01
	00 00		 mov	 DWORD PTR _args$134874[esp+977], eax
  002ff	89 84 24 39 01
	00 00		 mov	 DWORD PTR _args$134874[esp+981], eax
  00306	66 89 84 24 3d
	01 00 00	 mov	 WORD PTR _args$134874[esp+985], ax
  0030e	88 84 24 3f 01
	00 00		 mov	 BYTE PTR _args$134874[esp+987], al
  00315	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02HNHPBPFE@?1c?$AA@
  0031c	89 94 24 f4 00
	00 00		 mov	 DWORD PTR _args$134874[esp+912], edx
  00323	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02EPEJHNNG@?1a?$AA@
  0032a	66 89 84 24 40
	01 00 00	 mov	 WORD PTR _args$134874[esp+988], ax
  00332	33 c0		 xor	 eax, eax
  00334	89 84 24 43 01
	00 00		 mov	 DWORD PTR _args$134874[esp+991], eax
  0033b	88 84 24 47 01
	00 00		 mov	 BYTE PTR _args$134874[esp+995], al

; 7818 : 				{ CommandDecryptSysEnc,			"/dsysenc",			"/d", TRUE },

  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@
  00347	66 89 94 24 10
	01 00 00	 mov	 WORD PTR _args$134874[esp+940], dx
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08FFGENEKE@?1csysenc?$AA@
  00355	89 84 24 50 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1004], eax
  0035c	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@+8
  00363	89 94 24 20 01
	00 00		 mov	 DWORD PTR _args$134874[esp+956], edx
  0036a	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08FFGENEKE@?1csysenc?$AA@+8
  00371	88 84 24 58 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1012], al
  00378	33 c0		 xor	 eax, eax
  0037a	88 94 24 28 01
	00 00		 mov	 BYTE PTR _args$134874[esp+964], dl
  00381	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02HNHPBPFE@?1c?$AA@+2
  00388	89 84 24 59 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1013], eax
  0038f	89 84 24 5d 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1017], eax
  00396	89 84 24 61 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1021], eax
  0039d	89 84 24 65 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1025], eax
  003a4	89 84 24 69 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1029], eax
  003ab	66 89 84 24 6d
	01 00 00	 mov	 WORD PTR _args$134874[esp+1033], ax
  003b3	88 84 24 6f 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1035], al
  003ba	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DCDOIJJD@?1d?$AA@+2
  003c1	88 94 24 42 01
	00 00		 mov	 BYTE PTR _args$134874[esp+990], dl
  003c8	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@+4
  003ce	88 84 24 72 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1038], al
  003d5	33 c0		 xor	 eax, eax
  003d7	89 94 24 54 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1008], edx
  003de	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02DCDOIJJD@?1d?$AA@
  003e5	89 84 24 73 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1039], eax
  003ec	88 84 24 77 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1043], al

; 7819 : 				{ CommandEncDev,				"/encdev",			"/e", TRUE },

  003f3	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07MFEOHHG@?1encdev?$AA@+4
  003f8	66 89 94 24 70
	01 00 00	 mov	 WORD PTR _args$134874[esp+1036], dx
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07MFEOHHG@?1encdev?$AA@
  00406	89 84 24 84 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1056], eax
  0040d	33 c0		 xor	 eax, eax
  0040f	89 9c 24 e8 00
	00 00		 mov	 DWORD PTR _args$134874[esp+900], ebx
  00416	c7 84 24 ec 00
	00 00 04 00 00
	00		 mov	 DWORD PTR _args$134874[esp+904], 4
  00421	89 b4 24 18 01
	00 00		 mov	 DWORD PTR _args$134874[esp+948], esi
  00428	c7 84 24 1c 01
	00 00 05 00 00
	00		 mov	 DWORD PTR _args$134874[esp+952], 5
  00433	89 b4 24 48 01
	00 00		 mov	 DWORD PTR _args$134874[esp+996], esi
  0043a	89 ac 24 4c 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1000], ebp
  00441	89 b4 24 78 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1044], esi
  00448	c7 84 24 7c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1048], 7
  00453	89 94 24 80 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1052], edx
  0045a	89 84 24 88 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1060], eax
  00461	89 84 24 8c 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1064], eax
  00468	89 84 24 90 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1068], eax
  0046f	89 84 24 94 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1072], eax
  00476	89 84 24 98 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1076], eax
  0047d	89 84 24 9c 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1080], eax
  00484	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02CLCFLINC@?1e?$AA@+2
  0048b	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02CLCFLINC@?1e?$AA@
  00492	88 84 24 a2 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1086], al
  00499	33 c0		 xor	 eax, eax
  0049b	89 84 24 a3 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1087], eax
  004a2	88 84 24 a7 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1091], al

; 7820 : 				{ CommandHiddenSys,				"/isysenc",			"/i", TRUE },	

  004a9	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@+4
  004ae	89 84 24 b4 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1104], eax
  004b5	33 c0		 xor	 eax, eax
  004b7	89 84 24 b9 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1109], eax
  004be	89 84 24 bd 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1113], eax
  004c5	89 84 24 c1 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1117], eax
  004cc	89 84 24 c5 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1121], eax
  004d3	89 84 24 c9 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1125], eax
  004da	66 89 84 24 cd
	01 00 00	 mov	 WORD PTR _args$134874[esp+1129], ax
  004e2	88 84 24 cf 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1131], al
  004e9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02IHJAPHNO@?1i?$AA@
  004f0	66 89 84 24 d0
	01 00 00	 mov	 WORD PTR _args$134874[esp+1132], ax
  004f8	33 c0		 xor	 eax, eax
  004fa	89 84 24 d3 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1135], eax
  00501	88 84 24 d7 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1139], al

; 7821 : 				{ CommandResumeInplaceLogOn,	"/prinplace",		"/p", TRUE },

  00508	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@
  0050d	66 89 94 24 a0
	01 00 00	 mov	 WORD PTR _args$134874[esp+1084], dx
  00515	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@
  0051b	89 84 24 e0 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1148], eax
  00522	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+8
  00529	89 94 24 b0 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1100], edx
  00530	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@+8
  00537	66 89 84 24 e8
	01 00 00	 mov	 WORD PTR _args$134874[esp+1156], ax
  0053f	33 c0		 xor	 eax, eax
  00541	88 94 24 b8 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1108], dl
  00548	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02IHJAPHNO@?1i?$AA@+2
  0054f	89 84 24 eb 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1159], eax
  00556	89 84 24 ef 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1163], eax
  0055d	89 84 24 f3 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1167], eax
  00564	89 84 24 f7 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1171], eax
  0056b	89 84 24 fb 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1175], eax
  00572	88 84 24 ff 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1179], al
  00579	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02BMJAFOMG@?1p?$AA@
  00580	88 94 24 d2 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1134], dl
  00587	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+4
  0058d	66 89 84 24 00
	02 00 00	 mov	 WORD PTR _args$134874[esp+1180], ax
  00595	33 c0		 xor	 eax, eax
  00597	89 94 24 e4 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1152], edx
  0059e	0f b6 15 0a 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+10
  005a5	89 84 24 03 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1183], eax
  005ac	88 84 24 07 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1187], al

; 7822 : 				{ CommandResumeHiddenSys,		"/risysenc",		"/r", TRUE },	

  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@
  005b8	89 84 24 10 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1196], eax
  005bf	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@+8
  005c6	88 94 24 ea 01
	00 00		 mov	 BYTE PTR _args$134874[esp+1158], dl
  005cd	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02BMJAFOMG@?1p?$AA@+2
  005d4	66 89 84 24 18
	02 00 00	 mov	 WORD PTR _args$134874[esp+1204], ax
  005dc	33 c0		 xor	 eax, eax
  005de	88 94 24 02 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1182], dl
  005e5	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@+4
  005eb	89 84 24 1a 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1206], eax
  005f2	89 84 24 1e 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1210], eax
  005f9	89 84 24 22 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1214], eax
  00600	89 84 24 26 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1218], eax
  00607	89 84 24 2a 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1222], eax
  0060e	66 89 84 24 2e
	02 00 00	 mov	 WORD PTR _args$134874[esp+1226], ax
  00616	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02COKGDMEE@?1r?$AA@+2
  0061d	89 94 24 14 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1200], edx
  00624	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02COKGDMEE@?1r?$AA@
  0062b	88 84 24 32 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1230], al
  00632	33 c0		 xor	 eax, eax
  00634	66 89 94 24 30
	02 00 00	 mov	 WORD PTR _args$134874[esp+1228], dx

; 7823 : 				{ CommandSysEnc,				"/sysenc",			"/s", TRUE },	

  0063c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07PFDFIFLD@?1sysenc?$AA@
  00642	89 b4 24 a8 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1092], esi
  00649	c7 84 24 ac 01
	00 00 08 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1096], 8
  00654	89 b4 24 d8 01
	00 00		 mov	 DWORD PTR _args$134874[esp+1140], esi
  0065b	c7 84 24 dc 01
	00 00 09 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1144], 9
  00666	89 b4 24 08 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1188], esi
  0066d	c7 84 24 0c 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1192], 10 ; 0000000aH
  00678	89 84 24 33 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1231], eax
  0067f	88 84 24 37 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1235], al
  00686	89 b4 24 38 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1236], esi
  0068d	c7 84 24 3c 02
	00 00 0b 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1240], 11 ; 0000000bH
  00698	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07PFDFIFLD@?1sysenc?$AA@+4
  0069d	89 84 24 44 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1248], eax
  006a4	33 c0		 xor	 eax, eax
  006a6	89 84 24 48 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1252], eax
  006ad	89 84 24 4c 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1256], eax
  006b4	89 84 24 50 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1260], eax
  006bb	89 84 24 54 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1264], eax
  006c2	89 84 24 58 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1268], eax
  006c9	89 84 24 5c 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1272], eax
  006d0	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DHLNANAF@?1s?$AA@+2
  006d7	88 84 24 62 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1278], al
  006de	33 c0		 xor	 eax, eax
  006e0	89 94 24 40 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1244], edx
  006e7	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02DHLNANAF@?1s?$AA@
  006ee	89 84 24 63 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1279], eax
  006f5	88 84 24 67 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1283], al

; 7824 : 				{ CommandResumeInplace,			"/zinplace",		"/z", TRUE }

  006fc	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@+4
  00701	89 84 24 74 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1296], eax
  00708	33 c0		 xor	 eax, eax
  0070a	66 89 94 24 60
	02 00 00	 mov	 WORD PTR _args$134874[esp+1276], dx
  00712	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@
  00718	89 84 24 7a 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1302], eax
  0071f	89 84 24 7e 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1306], eax
  00726	89 84 24 82 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1310], eax
  0072d	89 84 24 86 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1314], eax
  00734	89 84 24 8a 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1318], eax
  0073b	66 89 84 24 8e
	02 00 00	 mov	 WORD PTR _args$134874[esp+1322], ax
  00743	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02OGHPLGEM@?1z?$AA@
  0074a	89 94 24 70 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1292], edx
  00751	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@+8
  00758	66 89 84 24 90
	02 00 00	 mov	 WORD PTR _args$134874[esp+1324], ax
  00760	33 c0		 xor	 eax, eax
  00762	66 89 94 24 78
	02 00 00	 mov	 WORD PTR _args$134874[esp+1300], dx
  0076a	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02OGHPLGEM@?1z?$AA@+2
  00771	89 84 24 93 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1327], eax
  00778	88 84 24 97 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1331], al

; 7825 : 			};
; 7826 : 
; 7827 : 			argumentspec as;
; 7828 : 
; 7829 : 			int nArgPos;
; 7830 : 			int x;
; 7831 : 
; 7832 : 			if (lpszCommandLineArgs[i] == NULL)

  0077f	8b 44 24 18	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00783	89 b4 24 68 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1284], esi
  0078a	c7 84 24 6c 02
	00 00 0c 00 00
	00		 mov	 DWORD PTR _args$134874[esp+1288], 12 ; 0000000cH
  00795	88 94 24 92 02
	00 00		 mov	 BYTE PTR _args$134874[esp+1326], dl
  0079c	89 b4 24 98 02
	00 00		 mov	 DWORD PTR _args$134874[esp+1332], esi
  007a3	39 1c 88	 cmp	 DWORD PTR [eax+ecx*4], ebx
  007a6	0f 84 7c 02 00
	00		 je	 $LN39@ExtractCom

; 7833 : 				continue;
; 7834 : 
; 7835 : 			as.args = args;

  007ac	8d 54 24 2c	 lea	 edx, DWORD PTR _args$134874[esp+712]
  007b0	89 54 24 24	 mov	 DWORD PTR _as$134896[esp+712], edx

; 7836 : 			as.arg_cnt = sizeof(args)/ sizeof(args[0]);
; 7837 : 			
; 7838 : 			x = GetArgumentID (&as, lpszCommandLineArgs[i], &nArgPos);

  007b4	8d 54 24 1c	 lea	 edx, DWORD PTR _nArgPos$134897[esp+712]
  007b8	c7 44 24 28 0d
	00 00 00	 mov	 DWORD PTR _as$134896[esp+716], 13 ; 0000000dH
  007c0	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  007c3	52		 push	 edx
  007c4	50		 push	 eax
  007c5	8d 4c 24 2c	 lea	 ecx, DWORD PTR _as$134896[esp+720]
  007c9	51		 push	 ecx
  007ca	e8 00 00 00 00	 call	 _GetArgumentID
  007cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7839 : 
; 7840 : 			switch (x)

  007d2	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  007d5	0f 87 bb 02 00
	00		 ja	 $LN3@ExtractCom
  007db	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN124@ExtractCom[eax*4]
$LN34@ExtractCom:

; 7841 : 			{
; 7842 : 			case CommandSysEnc:
; 7843 : 				// Encrypt system partition/drive (passed by Mount if system encryption hasn't started or to reverse decryption)
; 7844 : 
; 7845 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7846 : 				if (CreateSysEncMutex ())

  007e2	e8 00 00 00 00	 call	 _CreateSysEncMutex
  007e7	85 c0		 test	 eax, eax
  007e9	0f 84 94 02 00
	00		 je	 $LN33@ExtractCom

; 7847 : 				{
; 7848 : 					bDirectSysEncMode = TRUE;
; 7849 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_ENCRYPT;

  007ef	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 3 ; bDirectSysEncModeCommand
$LN123@ExtractCom:

; 7850 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  007f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  007ff	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, esi ; bDirectSysEncMode
  00805	3b d7		 cmp	 edx, edi
  00807	74 55		 je	 SHORT $LN53@ExtractCom
  00809	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0080e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00813	85 c0		 test	 eax, eax
  00815	75 12		 jne	 SHORT $LN49@ExtractCom
  00817	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0081c	e8 00 00 00 00	 call	 _Error
  00821	83 c4 04	 add	 esp, 4
  00824	e9 ff 01 00 00	 jmp	 $LN39@ExtractCom
$LN49@ExtractCom:
  00829	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0082e	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00834	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0083a	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00840	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00846	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0084c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00852	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00858	89 3d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, edi
$LN53@ExtractCom:
  0085e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00864	f7 d9		 neg	 ecx
  00866	1b c9		 sbb	 ecx, ecx
  00868	f7 d9		 neg	 ecx
  0086a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice

; 7856 : 				}
; 7857 : 
; 7858 : 				break;

  00870	e9 b3 01 00 00	 jmp	 $LN39@ExtractCom
$LN31@ExtractCom:

; 7859 : 
; 7860 : 			case CommandDecryptSysEnc:
; 7861 : 				// Decrypt system partition/drive (passed by Mount, also to reverse encryption in progress, when paused)
; 7862 : 
; 7863 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7864 : 				if (CreateSysEncMutex ())

  00875	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0087a	85 c0		 test	 eax, eax
  0087c	0f 84 01 02 00
	00		 je	 $LN33@ExtractCom

; 7865 : 				{
; 7866 : 					bDirectSysEncMode = TRUE;
; 7867 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_DECRYPT;

  00882	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 4 ; bDirectSysEncModeCommand

; 7868 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  0088c	e9 68 ff ff ff	 jmp	 $LN123@ExtractCom
$LN28@ExtractCom:

; 7869 : 				}
; 7870 : 				else
; 7871 : 				{
; 7872 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7873 : 					exit(0);
; 7874 : 				}
; 7875 : 				break;
; 7876 : 
; 7877 : 			case CommandHiddenSys:
; 7878 : 				// Create a hidden operating system (passed by Mount when the user selects System -> Create Hidden Operating System)
; 7879 : 
; 7880 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7881 : 				if (CreateSysEncMutex ())

  00891	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00896	85 c0		 test	 eax, eax
  00898	0f 84 e5 01 00
	00		 je	 $LN33@ExtractCom

; 7882 : 				{
; 7883 : 					bDirectSysEncMode = TRUE;
; 7884 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_CREATE_HIDDEN_OS;

  0089e	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 5 ; bDirectSysEncModeCommand

; 7885 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008a8	e9 4c ff ff ff	 jmp	 $LN123@ExtractCom
$LN25@ExtractCom:

; 7886 : 				}
; 7887 : 				else
; 7888 : 				{
; 7889 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7890 : 					exit(0);
; 7891 : 				}
; 7892 : 
; 7893 : 				break;
; 7894 : 
; 7895 : 			case CommandResumeHiddenSys:
; 7896 : 				// Resume process of creation of a hidden operating system (passed by Wizard when the user needs to UAC-elevate the whole wizard process)
; 7897 : 
; 7898 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7899 : 				if (CreateSysEncMutex ())

  008ad	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008b2	85 c0		 test	 eax, eax
  008b4	0f 84 c9 01 00
	00		 je	 $LN33@ExtractCom

; 7900 : 				{
; 7901 : 					bDirectSysEncMode = TRUE;
; 7902 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV;

  008ba	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, ebp ; bDirectSysEncModeCommand

; 7903 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008c0	e9 34 ff ff ff	 jmp	 $LN123@ExtractCom
$LN22@ExtractCom:

; 7904 : 				}
; 7905 : 				else
; 7906 : 				{
; 7907 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7908 : 					exit(0);
; 7909 : 				}
; 7910 : 
; 7911 : 				break;
; 7912 : 
; 7913 : 			case CommandResumeSysEnc:
; 7914 : 				// Resume previous system-encryption operation (passed by Mount) e.g. encryption, decryption, or pretest 
; 7915 : 
; 7916 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7917 : 				if (CreateSysEncMutex ())

  008c5	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008ca	85 c0		 test	 eax, eax
  008cc	0f 84 b1 01 00
	00		 je	 $LN33@ExtractCom

; 7918 : 				{
; 7919 : 					bDirectSysEncMode = TRUE;
; 7920 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_RESUME;

  008d2	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, esi ; bDirectSysEncModeCommand

; 7921 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008d8	e9 1c ff ff ff	 jmp	 $LN123@ExtractCom
$LN19@ExtractCom:

; 7922 : 				}
; 7923 : 				else
; 7924 : 				{
; 7925 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7926 : 					exit(0);
; 7927 : 				}
; 7928 : 				break;
; 7929 : 
; 7930 : 			case CommandResumeSysEncLogOn:
; 7931 : 				// Same as csysenc but passed only by the system (from the startup sequence)
; 7932 : 
; 7933 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7934 : 				if (CreateSysEncMutex ())

  008dd	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008e2	85 c0		 test	 eax, eax
  008e4	0f 84 99 01 00
	00		 je	 $LN33@ExtractCom

; 7935 : 				{
; 7936 : 					bDirectSysEncMode = TRUE;
; 7937 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_STARTUP_SEQ_RESUME;

  008ea	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, edi ; bDirectSysEncModeCommand

; 7938 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008f0	e9 04 ff ff ff	 jmp	 $LN123@ExtractCom
$LN16@ExtractCom:

; 7939 : 				}
; 7940 : 				else
; 7941 : 				{
; 7942 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7943 : 					exit(0);
; 7944 : 				}
; 7945 : 				break;
; 7946 : 
; 7947 : 			case CommandEncDev:
; 7948 : 				// Resume process of creation of a non-sys-device-hosted volume (passed by Wizard when the user needs to UAC-elevate)
; 7949 : 				DirectDeviceEncMode = TRUE;

  008f5	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectDeviceEncMode@@3HA, esi ; DirectDeviceEncMode

; 7950 : 				break;

  008fb	e9 28 01 00 00	 jmp	 $LN39@ExtractCom
$LN15@ExtractCom:

; 7951 : 
; 7952 : 			case CommandResumeInplace:
; 7953 : 				// Resume interrupted process of non-system in-place encryption of a partition
; 7954 : 				DirectNonSysInplaceEncResumeMode = TRUE;

  00900	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectNonSysInplaceEncResumeMode@@3HA, esi ; DirectNonSysInplaceEncResumeMode

; 7955 : 				break;

  00906	e9 1d 01 00 00	 jmp	 $LN39@ExtractCom
$LN14@ExtractCom:

; 7956 : 
; 7957 : 			case CommandResumeInplaceLogOn:
; 7958 : 				// Ask the user whether to resume interrupted process of non-system in-place encryption of a partition
; 7959 : 				// This switch is passed only by the system (from the startup sequence).
; 7960 : 				DirectPromptNonSysInplaceEncResumeMode = TRUE;

  0090b	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, esi ; DirectPromptNonSysInplaceEncResumeMode

; 7961 : 				break;

  00911	e9 12 01 00 00	 jmp	 $LN39@ExtractCom
$LN13@ExtractCom:

; 7962 : 
; 7963 : 			case OptionNoIsoCheck:
; 7964 : 				bDontVerifyRescueDisk = TRUE;

  00916	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, esi ; bDontVerifyRescueDisk

; 7965 : 				break;

  0091c	e9 07 01 00 00	 jmp	 $LN39@ExtractCom
$LN12@ExtractCom:

; 7966 : 
; 7967 : 			case OptionHistory:
; 7968 : 				{
; 7969 : 					char szTmp[8];
; 7970 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 7971 : 						     szTmp, sizeof (szTmp));

  00921	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00925	6a 08		 push	 8
  00927	8d 94 24 a0 02
	00 00		 lea	 edx, DWORD PTR _szTmp$134927[esp+716]
  0092e	52		 push	 edx
  0092f	8b 54 24 24	 mov	 edx, DWORD PTR _nArgPos$134897[esp+720]
  00933	50		 push	 eax
  00934	8b 44 24 24	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+724]
  00938	8d 4c 24 20	 lea	 ecx, DWORD PTR _i$134856[esp+724]
  0093c	51		 push	 ecx
  0093d	52		 push	 edx
  0093e	50		 push	 eax
  0093f	e8 00 00 00 00	 call	 _GetArgumentValue

; 7972 : 					if (!_stricmp(szTmp,"y") || !_stricmp(szTmp,"yes"))

  00944	8d 8c 24 b4 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$134927[esp+736]
  0094b	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y?$AA@
  00950	51		 push	 ecx
  00951	e8 00 00 00 00	 call	 __stricmp
  00956	83 c4 20	 add	 esp, 32			; 00000020H
  00959	85 c0		 test	 eax, eax
  0095b	74 19		 je	 SHORT $LN10@ExtractCom
  0095d	8d 94 24 9c 02
	00 00		 lea	 edx, DWORD PTR _szTmp$134927[esp+712]
  00964	68 00 00 00 00	 push	 OFFSET ??_C@_03ICICOMAL@yes?$AA@
  00969	52		 push	 edx
  0096a	e8 00 00 00 00	 call	 __stricmp
  0096f	83 c4 08	 add	 esp, 8
  00972	85 c0		 test	 eax, eax
  00974	75 0c		 jne	 SHORT $LN11@ExtractCom
$LN10@ExtractCom:

; 7973 : 					{
; 7974 : 						bHistory = TRUE;

  00976	89 35 00 00 00
	00		 mov	 DWORD PTR _bHistory, esi

; 7975 : 						bHistoryCmdLine = TRUE;

  0097c	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHistoryCmdLine@@3HA, esi ; bHistoryCmdLine
$LN11@ExtractCom:

; 7976 : 					}
; 7977 : 
; 7978 : 					if (!_stricmp(szTmp,"n") || !_stricmp(szTmp,"no"))

  00982	8d 84 24 9c 02
	00 00		 lea	 eax, DWORD PTR _szTmp$134927[esp+712]
  00989	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  0098e	50		 push	 eax
  0098f	e8 00 00 00 00	 call	 __stricmp
  00994	83 c4 08	 add	 esp, 8
  00997	85 c0		 test	 eax, eax
  00999	74 19		 je	 SHORT $LN8@ExtractCom
  0099b	8d 8c 24 9c 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$134927[esp+712]
  009a2	68 00 00 00 00	 push	 OFFSET ??_C@_02KAJCLHKP@no?$AA@
  009a7	51		 push	 ecx
  009a8	e8 00 00 00 00	 call	 __stricmp
  009ad	83 c4 08	 add	 esp, 8
  009b0	85 c0		 test	 eax, eax
  009b2	75 74		 jne	 SHORT $LN39@ExtractCom
$LN8@ExtractCom:

; 7979 : 					{
; 7980 : 						bHistory = FALSE;

  009b4	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHistory, ebx

; 7981 : 						bHistoryCmdLine = TRUE;

  009ba	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHistoryCmdLine@@3HA, esi ; bHistoryCmdLine

; 7982 : 					}
; 7983 : 				}
; 7984 : 				break;

  009c0	eb 66		 jmp	 SHORT $LN39@ExtractCom
$LN7@ExtractCom:

; 7985 : 				
; 7986 : 			case OptionTokenLib:
; 7987 : 				if (GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs, SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath)) == HAS_ARGUMENT)

  009c2	8b 54 24 10	 mov	 edx, DWORD PTR _nNoCommandLineArgs$[esp+712]
  009c6	8b 4c 24 1c	 mov	 ecx, DWORD PTR _nArgPos$134897[esp+712]
  009ca	68 04 01 00 00	 push	 260			; 00000104H
  009cf	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  009d4	52		 push	 edx
  009d5	8b 54 24 24	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+724]
  009d9	8d 44 24 20	 lea	 eax, DWORD PTR _i$134856[esp+724]
  009dd	50		 push	 eax
  009de	51		 push	 ecx
  009df	52		 push	 edx
  009e0	e8 00 00 00 00	 call	 _GetArgumentValue
  009e5	83 c4 18	 add	 esp, 24			; 00000018H
  009e8	3b c6		 cmp	 eax, esi
  009ea	75 07		 jne	 SHORT $LN6@ExtractCom

; 7988 : 					InitSecurityTokenLibrary();

  009ec	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary

; 7989 : 				else

  009f1	eb 35		 jmp	 SHORT $LN39@ExtractCom
$LN6@ExtractCom:

; 7990 : 					Error ("COMMAND_LINE_ERROR");

  009f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
  009f8	e8 00 00 00 00	 call	 _Error
  009fd	83 c4 04	 add	 esp, 4

; 7991 : 
; 7992 : 				break;

  00a00	eb 26		 jmp	 SHORT $LN39@ExtractCom
$LN4@ExtractCom:

; 7993 : 
; 7994 : 			case OptionQuit:
; 7995 : 				{
; 7996 : 					// Used to indicate non-install elevation
; 7997 : 					char szTmp[32];
; 7998 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs, szTmp, sizeof (szTmp));

  00a02	8b 4c 24 10	 mov	 ecx, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a06	6a 20		 push	 32			; 00000020H
  00a08	8d 84 24 a8 02
	00 00		 lea	 eax, DWORD PTR _szTmp$134941[esp+716]
  00a0f	50		 push	 eax
  00a10	8b 44 24 24	 mov	 eax, DWORD PTR _nArgPos$134897[esp+720]
  00a14	51		 push	 ecx
  00a15	8b 4c 24 24	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+724]
  00a19	8d 54 24 20	 lea	 edx, DWORD PTR _i$134856[esp+724]
  00a1d	52		 push	 edx
  00a1e	50		 push	 eax
  00a1f	51		 push	 ecx
  00a20	e8 00 00 00 00	 call	 _GetArgumentValue
  00a25	83 c4 18	 add	 esp, 24			; 00000018H
$LN39@ExtractCom:
  00a28	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$134856[esp+712]
  00a2c	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a30	03 ce		 add	 ecx, esi
  00a32	3b c8		 cmp	 ecx, eax
  00a34	89 4c 24 14	 mov	 DWORD PTR _i$134856[esp+712], ecx
  00a38	0f 8c 53 f6 ff
	ff		 jl	 $LL40@ExtractCom
$LN116@ExtractCom:

; 8007 : 			}
; 8008 : 		}
; 8009 : 	}
; 8010 : 
; 8011 : 	/* Free up the command line arguments */
; 8012 : 	while (--nNoCommandLineArgs >= 0)

  00a3e	2b c6		 sub	 eax, esi
  00a40	89 44 24 10	 mov	 DWORD PTR _nNoCommandLineArgs$[esp+712], eax
  00a44	78 24		 js	 SHORT $LN118@ExtractCom
  00a46	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL2@ExtractCom:

; 8013 : 	{
; 8014 : 		free (lpszCommandLineArgs[nNoCommandLineArgs]);

  00a50	8b 54 24 18	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00a54	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a58	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00a5b	51		 push	 ecx
  00a5c	e8 00 00 00 00	 call	 _free
  00a61	83 c4 04	 add	 esp, 4
  00a64	29 74 24 10	 sub	 DWORD PTR _nNoCommandLineArgs$[esp+712], esi
  00a68	79 e6		 jns	 SHORT $LL2@ExtractCom
$LN118@ExtractCom:

; 8015 : 	}
; 8016 : }

  00a6a	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+712]
  00a71	5f		 pop	 edi
  00a72	5d		 pop	 ebp
  00a73	5b		 pop	 ebx
  00a74	5e		 pop	 esi
  00a75	33 cc		 xor	 ecx, esp
  00a77	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a7c	81 c4 b8 02 00
	00		 add	 esp, 696		; 000002b8H
  00a82	c3		 ret	 0
$LN33@ExtractCom:

; 7851 : 				}
; 7852 : 				else
; 7853 : 				{
; 7854 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00a83	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00a88	e8 00 00 00 00	 call	 _Warning
  00a8d	83 c4 04	 add	 esp, 4

; 7855 : 					exit(0);

  00a90	53		 push	 ebx
  00a91	e8 00 00 00 00	 call	 _exit
$LN3@ExtractCom:

; 7999 : 				}
; 8000 : 				break;
; 8001 : 
; 8002 : 			default:
; 8003 : 				DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_COMMANDHELP_DLG), hwndDlg, (DLGPROC)
; 8004 : 						CommandHelpDlgProc, (LPARAM) &as);

  00a96	8b 44 24 20	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+712]
  00a9a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00aa0	8d 54 24 24	 lea	 edx, DWORD PTR _as$134896[esp+712]
  00aa4	52		 push	 edx
  00aa5	68 00 00 00 00	 push	 OFFSET _CommandHelpDlgProc@16
  00aaa	50		 push	 eax
  00aab	68 fd 01 00 00	 push	 509			; 000001fdH
  00ab0	51		 push	 ecx
  00ab1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 8005 : 
; 8006 : 				exit(0);

  00ab7	53		 push	 ebx
  00ab8	e8 00 00 00 00	 call	 _exit
$LN121@ExtractCom:
  00abd	8d 49 00	 npad	 3
$LN124@ExtractCom:

; 8015 : 	}
; 8016 : }

  00ac0	00 00 00 00	 DD	 $LN12@ExtractCom
  00ac4	00 00 00 00	 DD	 $LN13@ExtractCom
  00ac8	00 00 00 00	 DD	 $LN4@ExtractCom
  00acc	00 00 00 00	 DD	 $LN7@ExtractCom
  00ad0	00 00 00 00	 DD	 $LN19@ExtractCom
  00ad4	00 00 00 00	 DD	 $LN22@ExtractCom
  00ad8	00 00 00 00	 DD	 $LN31@ExtractCom
  00adc	00 00 00 00	 DD	 $LN16@ExtractCom
  00ae0	00 00 00 00	 DD	 $LN28@ExtractCom
  00ae4	00 00 00 00	 DD	 $LN14@ExtractCom
  00ae8	00 00 00 00	 DD	 $LN25@ExtractCom
  00aec	00 00 00 00	 DD	 $LN34@ExtractCom
  00af0	00 00 00 00	 DD	 $LN15@ExtractCom
_ExtractCommandLine ENDP
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T159033 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T159033[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@2
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@2:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1104 : 		if (_Capacity == 0)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Capacity$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0000d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00010	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00013	3b f0		 cmp	 esi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 fe e1 e1 e1
	01		 cmp	 esi, 31580641		; 01e1e1e1H
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00038	03 f0		 add	 esi, eax
  0003a	83 c4 08	 add	 esp, 8
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00040	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00043	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00046	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 1115 : 		}

  0004a	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T159083 = -20						; size = 4
__Lock$159107 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T159083[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T159083[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159107[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159107[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T159083[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T159125 = -44						; size = 4
$T159122 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159122[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T159125[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T159122[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T159122[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T159122[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@15:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@15
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T159122[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T159122[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@15
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T159122[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@15:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T159122[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$137673 = -36					; size = 4
__Lock$159530 = -32					; size = 4
__Lock$137672 = -28					; size = 4
$T159523 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$159552 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$137672[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$137673[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159530[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159530[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$137673[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159523[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159523[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$137673[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$159552[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$159552[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$137672[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$137672[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$138032 = -36					; size = 4
__Lock$159577 = -32					; size = 4
__Lock$138031 = -28					; size = 4
$T159570 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$159599 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$138031[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$138032[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159577[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, eax ; std::numpunct<wchar_t>::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159577[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$138032[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159570[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159570[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$138032[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$159599[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$159599[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$138031[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$138031[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN1@Destroy_ra
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 235  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z
_TEXT	SEGMENT
$T159639 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$159643 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$159643[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T159639[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T159639[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@ ; `string'
PUBLIC	??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ ; `string'
PUBLIC	_DisplayPortionsOfKeys
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
;	COMDAT ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@ DB 'TRIPLE_DOT_GLYPH_EL'
	DB	'LIPSIS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
CONST	SEGMENT
??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ DB '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT _DisplayPortionsOfKeys
_TEXT	SEGMENT
$T159691 = -88						; size = 4
$T159686 = -84						; size = 28
$T159681 = -84						; size = 28
$T159687 = -56						; size = 28
$T159683 = -56						; size = 28
$T159688 = -28						; size = 28
$T159682 = -28						; size = 28
_headerKeyHandle$ = 8					; size = 4
_masterKeyHandle$ = 12					; size = 4
_headerKeyStr$ = 16					; size = 4
_masterKeyStr$ = 20					; size = 4
_hideKeys$ = 24						; size = 4
_DisplayPortionsOfKeys PROC				; COMDAT

; 1991 : {

  00000	83 ec 58	 sub	 esp, 88			; 00000058H
  00003	53		 push	 ebx
  00004	55		 push	 ebp

; 1992 : 	const wchar_t *hiddenKey = L"********************************                                              ";
; 1993 : 
; 1994 : 	SetWindowTextW (headerKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (headerKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00005	8b 6c 24 74	 mov	 ebp, DWORD PTR _hideKeys$[esp+92]

; 1995 : 	SetWindowTextW (masterKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (masterKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00009	33 db		 xor	 ebx, ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	89 5c 24 10	 mov	 DWORD PTR $T159691[esp+104], ebx
  00011	3b eb		 cmp	 ebp, ebx
  00013	74 0a		 je	 SHORT $LN3@DisplayPor
  00015	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
  0001a	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  0001d	eb 72		 jmp	 SHORT $LN54@DisplayPor
$LN3@DisplayPor:

; 1992 : 	const wchar_t *hiddenKey = L"********************************                                              ";
; 1993 : 
; 1994 : 	SetWindowTextW (headerKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (headerKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  0001f	8b 54 24 74	 mov	 edx, DWORD PTR _headerKeyStr$[esp+100]
  00023	8b c2		 mov	 eax, edx
  00025	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T159681[esp+128], 15 ; 0000000fH
  0002d	89 5c 24 28	 mov	 DWORD PTR $T159681[esp+124], ebx
  00031	88 5c 24 18	 mov	 BYTE PTR $T159681[esp+108], bl
  00035	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL261@DisplayPor:
  00038	8a 08		 mov	 cl, BYTE PTR [eax]
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f9		 jne	 SHORT $LL261@DisplayPor
  0003f	2b c6		 sub	 eax, esi
  00041	50		 push	 eax
  00042	52		 push	 edx
  00043	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159681[esp+112]
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  00051	bb 07 00 00 00	 mov	 ebx, 7
  00056	e8 00 00 00 00	 call	 _GetString
  0005b	83 c4 04	 add	 esp, 4
  0005e	50		 push	 eax
  0005f	8d 44 24 18	 lea	 eax, DWORD PTR $T159681[esp+108]
  00063	50		 push	 eax
  00064	8d 4c 24 54	 lea	 ecx, DWORD PTR $T159682[esp+112]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0006e	83 c4 08	 add	 esp, 8
  00071	50		 push	 eax
  00072	8d 54 24 38	 lea	 edx, DWORD PTR $T159683[esp+112]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0007c	bf 08 00 00 00	 mov	 edi, 8
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00087	72 05		 jb	 SHORT $LN53@DisplayPor
  00089	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008c	eb 03		 jmp	 SHORT $LN54@DisplayPor
$LN53@DisplayPor:
  0008e	83 c0 04	 add	 eax, 4
$LN54@DisplayPor:
  00091	50		 push	 eax
  00092	8b 44 24 70	 mov	 eax, DWORD PTR _headerKeyHandle$[esp+104]
  00096	50		 push	 eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0009d	f6 c3 04	 test	 bl, 4
  000a0	74 2d		 je	 SHORT $LN264@DisplayPor
  000a2	83 e3 fb	 and	 ebx, -5			; fffffffbH
  000a5	39 7c 24 48	 cmp	 DWORD PTR $T159683[esp+128], edi
  000a9	72 0d		 jb	 SHORT $LN73@DisplayPor
  000ab	8b 4c 24 34	 mov	 ecx, DWORD PTR $T159683[esp+108]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b5	83 c4 04	 add	 esp, 4
$LN73@DisplayPor:
  000b8	33 f6		 xor	 esi, esi
  000ba	33 d2		 xor	 edx, edx
  000bc	c7 44 24 48 07
	00 00 00	 mov	 DWORD PTR $T159683[esp+128], 7
  000c4	89 74 24 44	 mov	 DWORD PTR $T159683[esp+124], esi
  000c8	66 89 54 24 34	 mov	 WORD PTR $T159683[esp+108], dx
  000cd	eb 02		 jmp	 SHORT $LN81@DisplayPor
$LN264@DisplayPor:
  000cf	33 f6		 xor	 esi, esi
$LN81@DisplayPor:
  000d1	f6 c3 02	 test	 bl, 2
  000d4	74 29		 je	 SHORT $LN109@DisplayPor
  000d6	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000d9	39 7c 24 64	 cmp	 DWORD PTR $T159682[esp+128], edi
  000dd	72 0d		 jb	 SHORT $LN101@DisplayPor
  000df	8b 44 24 50	 mov	 eax, DWORD PTR $T159682[esp+108]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e9	83 c4 04	 add	 esp, 4
$LN101@DisplayPor:
  000ec	33 c9		 xor	 ecx, ecx
  000ee	c7 44 24 64 07
	00 00 00	 mov	 DWORD PTR $T159682[esp+128], 7
  000f6	89 74 24 60	 mov	 DWORD PTR $T159682[esp+124], esi
  000fa	66 89 4c 24 50	 mov	 WORD PTR $T159682[esp+108], cx
$LN109@DisplayPor:
  000ff	f6 c3 01	 test	 bl, 1
  00102	74 17		 je	 SHORT $LN263@DisplayPor
  00104	83 e3 fe	 and	 ebx, -2			; fffffffeH
  00107	83 7c 24 2c 10	 cmp	 DWORD PTR $T159681[esp+128], 16 ; 00000010H
  0010c	72 0d		 jb	 SHORT $LN263@DisplayPor
  0010e	8b 54 24 18	 mov	 edx, DWORD PTR $T159681[esp+108]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00118	83 c4 04	 add	 esp, 4
$LN263@DisplayPor:

; 1995 : 	SetWindowTextW (masterKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (masterKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  0011b	3b ee		 cmp	 ebp, esi
  0011d	74 07		 je	 SHORT $LN5@DisplayPor
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
  00124	eb 70		 jmp	 SHORT $LN178@DisplayPor
$LN5@DisplayPor:
  00126	8b 54 24 78	 mov	 edx, DWORD PTR _masterKeyStr$[esp+100]
  0012a	8b c2		 mov	 eax, edx
  0012c	89 74 24 28	 mov	 DWORD PTR $T159686[esp+124], esi
  00130	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T159686[esp+128], 15 ; 0000000fH
  00138	c6 44 24 18 00	 mov	 BYTE PTR $T159686[esp+108], 0
  0013d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL262@DisplayPor:
  00140	8a 08		 mov	 cl, BYTE PTR [eax]
  00142	40		 inc	 eax
  00143	84 c9		 test	 cl, cl
  00145	75 f9		 jne	 SHORT $LL262@DisplayPor
  00147	2b c6		 sub	 eax, esi
  00149	50		 push	 eax
  0014a	52		 push	 edx
  0014b	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159686[esp+112]
  0014f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00154	0b df		 or	 ebx, edi
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  0015b	83 cb 30	 or	 ebx, 48			; 00000030H
  0015e	e8 00 00 00 00	 call	 _GetString
  00163	83 c4 04	 add	 esp, 4
  00166	50		 push	 eax
  00167	8d 44 24 18	 lea	 eax, DWORD PTR $T159686[esp+108]
  0016b	50		 push	 eax
  0016c	8d 4c 24 38	 lea	 ecx, DWORD PTR $T159687[esp+112]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00176	83 c4 08	 add	 esp, 8
  00179	50		 push	 eax
  0017a	8d 54 24 54	 lea	 edx, DWORD PTR $T159688[esp+112]
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
  00187	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0018a	72 05		 jb	 SHORT $LN177@DisplayPor
  0018c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018f	eb 03		 jmp	 SHORT $LN266@DisplayPor
$LN177@DisplayPor:
  00191	83 c0 04	 add	 eax, 4
$LN266@DisplayPor:
  00194	33 f6		 xor	 esi, esi
$LN178@DisplayPor:
  00196	50		 push	 eax
  00197	8b 44 24 74	 mov	 eax, DWORD PTR _masterKeyHandle$[esp+104]
  0019b	50		 push	 eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  001a2	f6 c3 20	 test	 bl, 32			; 00000020H
  001a5	74 29		 je	 SHORT $LN265@DisplayPor
  001a7	83 e3 df	 and	 ebx, -33		; ffffffdfH
  001aa	39 7c 24 64	 cmp	 DWORD PTR $T159688[esp+128], edi
  001ae	72 0d		 jb	 SHORT $LN197@DisplayPor
  001b0	8b 4c 24 50	 mov	 ecx, DWORD PTR $T159688[esp+108]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ba	83 c4 04	 add	 esp, 4
$LN197@DisplayPor:
  001bd	33 d2		 xor	 edx, edx
  001bf	c7 44 24 64 07
	00 00 00	 mov	 DWORD PTR $T159688[esp+128], 7
  001c7	89 74 24 60	 mov	 DWORD PTR $T159688[esp+124], esi
  001cb	66 89 54 24 50	 mov	 WORD PTR $T159688[esp+108], dx
$LN265@DisplayPor:
  001d0	f6 c3 10	 test	 bl, 16			; 00000010H
  001d3	74 29		 je	 SHORT $LN233@DisplayPor
  001d5	83 e3 ef	 and	 ebx, -17		; ffffffefH
  001d8	39 7c 24 48	 cmp	 DWORD PTR $T159687[esp+128], edi
  001dc	72 0d		 jb	 SHORT $LN225@DisplayPor
  001de	8b 44 24 34	 mov	 eax, DWORD PTR $T159687[esp+108]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e8	83 c4 04	 add	 esp, 4
$LN225@DisplayPor:
  001eb	33 c9		 xor	 ecx, ecx
  001ed	c7 44 24 48 07
	00 00 00	 mov	 DWORD PTR $T159687[esp+128], 7
  001f5	89 74 24 44	 mov	 DWORD PTR $T159687[esp+124], esi
  001f9	66 89 4c 24 34	 mov	 WORD PTR $T159687[esp+108], cx
$LN233@DisplayPor:
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5d		 pop	 ebp
  00201	f6 c3 08	 test	 bl, 8
  00204	5b		 pop	 ebx
  00205	74 14		 je	 SHORT $LN251@DisplayPor
  00207	83 7c 24 1c 10	 cmp	 DWORD PTR $T159686[esp+112], 16 ; 00000010H
  0020c	72 0d		 jb	 SHORT $LN251@DisplayPor
  0020e	8b 54 24 08	 mov	 edx, DWORD PTR $T159686[esp+92]
  00212	52		 push	 edx
  00213	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00218	83 c4 04	 add	 esp, 4
$LN251@DisplayPor:

; 1996 : }

  0021b	83 c4 58	 add	 esp, 88			; 00000058H
  0021e	c3		 ret	 0
_DisplayPortionsOfKeys ENDP
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector
$LN13@vector:
  00038	33 c0		 xor	 eax, eax
$LN14@vector:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T160951 = -88						; size = 8
$T160946 = -88						; size = 4
$T160948 = -80						; size = 28
$T160947 = -80						; size = 28
$T160952 = -52						; size = 8
__Str$136662 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 1
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put@2
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 76 01 00 00	 jmp	 $LN150@do_put@2
$LN5@do_put@2:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T160946[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T160946[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	33 d2		 xor	 edx, edx
  000a5	c7 44 24 5c 07
	00 00 00	 mov	 DWORD PTR __Str$136662[esp+136], 7
  000ad	89 5c 24 58	 mov	 DWORD PTR __Str$136662[esp+132], ebx
  000b1	66 89 54 24 48	 mov	 WORD PTR __Str$136662[esp+116], dx
  000b6	bb 01 00 00 00	 mov	 ebx, 1
  000bb	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx

; 1131 : 			if (_Val)
; 1132 : 				_Str.assign(_Punct_fac.truename());

  000bf	8b ce		 mov	 ecx, esi
  000c1	38 94 24 88 00
	00 00		 cmp	 BYTE PTR __Val$[esp+108], dl
  000c8	74 2f		 je	 SHORT $LN3@do_put@2
  000ca	8d 44 24 20	 lea	 eax, DWORD PTR $T160947[esp+112]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
  000d4	6a ff		 push	 -1
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$136662[esp+124]
  000dd	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e2	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000e7	83 7c 24 38 08	 cmp	 DWORD PTR $T160947[esp+136], 8
  000ec	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000f0	72 3c		 jb	 SHORT $LN100@do_put@2
  000f2	8b 4c 24 24	 mov	 ecx, DWORD PTR $T160947[esp+116]
  000f6	51		 push	 ecx

; 1133 : 			else

  000f7	eb 2d		 jmp	 SHORT $LN163@do_put@2
$LN3@do_put@2:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f9	8d 54 24 20	 lea	 edx, DWORD PTR $T160948[esp+112]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$136662[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00116	83 7c 24 38 08	 cmp	 DWORD PTR $T160948[esp+136], 8
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN100@do_put@2
  00121	8b 44 24 24	 mov	 eax, DWORD PTR $T160948[esp+116]
  00125	50		 push	 eax
$LN163@do_put@2:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN100@do_put@2:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$136662[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put@2
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put@2
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put@2
$LN8@do_put@2:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put@2:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 55 10	 mov	 edx, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	81 e2 c0 01 00
	00		 and	 edx, 448		; 000001c0H
  00155	83 fa 40	 cmp	 edx, 64			; 00000040H
  00158	74 30		 je	 SHORT $LN1@do_put@2

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0015a	8b 44 24 7c	 mov	 eax, DWORD PTR __Dest$[esp+112]
  0015e	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00162	56		 push	 esi
  00163	53		 push	 ebx
  00164	50		 push	 eax
  00165	51		 push	 ecx
  00166	8d 54 24 28	 lea	 edx, DWORD PTR $T160951[esp+128]
  0016a	52		 push	 edx
  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  0017a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017d	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$136662[esp+156]
  00181	83 c4 18	 add	 esp, 24			; 00000018H
  00184	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00188	33 f6		 xor	 esi, esi
$LN1@do_put@2:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0018a	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$136662[esp+136], 8
  0018f	8b 44 24 48	 mov	 eax, DWORD PTR __Str$136662[esp+116]
  00193	73 04		 jae	 SHORT $LN129@do_put@2
  00195	8d 44 24 48	 lea	 eax, DWORD PTR __Str$136662[esp+116]
$LN129@do_put@2:
  00199	51		 push	 ecx
  0019a	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019e	50		 push	 eax
  0019f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	8d 54 24 4c	 lea	 edx, DWORD PTR $T160952[esp+128]
  001ac	52		 push	 edx
  001ad	57		 push	 edi
  001ae	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  001b3	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b5	56		 push	 esi
  001b6	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001ba	53		 push	 ebx
  001bb	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c5	50		 push	 eax
  001c6	51		 push	 ecx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001d0	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d7	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001dc	83 c4 30	 add	 esp, 48			; 00000030H
  001df	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$136662[esp+136], 8
  001e4	72 0d		 jb	 SHORT $LN150@do_put@2
  001e6	8b 44 24 48	 mov	 eax, DWORD PTR __Str$136662[esp+116]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f0	83 c4 04	 add	 esp, 4
$LN150@do_put@2:
  001f3	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f5	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00200	59		 pop	 ecx
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5d		 pop	 ebp
  00204	5b		 pop	 ebx
  00205	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00209	33 cc		 xor	 ecx, esp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	83 c4 5c	 add	 esp, 92			; 0000005cH
  00213	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T160946[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$136662[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T160947[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T160948[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@3
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@3:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@3
  0003a	5b		 pop	 ebx
$LN1@clear@3:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
_TEXT	ENDS
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
_TEXT	SEGMENT
__Fillcount$ = -120					; size = 4
__Pointptr$ = -120					; size = 4
__Enders$ = -116					; size = 3
$T161778 = -112						; size = 1
__Kseparator$ = -108					; size = 2
$T161626 = -108						; size = 4
__Mbst1$161776 = -104					; size = 4
__Lock$161635 = -104					; size = 4
$T161600 = -104						; size = 8
$T161599 = -104						; size = 8
$T161598 = -104						; size = 8
$T161597 = -104						; size = 8
$T161596 = -104						; size = 8
__Prefix$ = -104					; size = 4
__Wc$161775 = -96					; size = 2
$T161609 = -92						; size = 8
$T161608 = -92						; size = 8
$T161607 = -92						; size = 8
$T161604 = -92						; size = 8
$T161603 = -92						; size = 8
$T161602 = -92						; size = 8
$T161601 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
$T161591 = -80						; size = 4
___$ReturnUdt$GSCopy$ = -76				; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+120], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+140]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00035	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+136]
  0003c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+136]
  00043	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _this$[esp+136]
  0004a	8b b4 24 a8 00
	00 00		 mov	 esi, DWORD PTR __Buf$[esp+136]
  00051	8d 54 24 3c	 lea	 edx, DWORD PTR $T161591[esp+140]
  00055	52		 push	 edx
  00056	89 44 24 44	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+144], eax
  0005a	89 4c 24 3c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+144], ecx
  0005e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00063	33 db		 xor	 ebx, ebx
  00065	50		 push	 eax
  00066	89 9c 24 8c 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+152], ebx
  0006d	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00072	8b e8		 mov	 ebp, eax
  00074	8b 44 24 40	 mov	 eax, DWORD PTR $T161591[esp+144]
  00078	83 c4 04	 add	 esp, 4
  0007b	89 6c 24 30	 mov	 DWORD PTR __Punct_fac$[esp+140], ebp
  0007f	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+148], -1
  0008a	3b c3		 cmp	 eax, ebx
  0008c	74 46		 je	 SHORT $LN31@Fput
  0008e	53		 push	 ebx
  0008f	8d 4c 24 28	 lea	 ecx, DWORD PTR __Lock$161635[esp+144]
  00093	89 44 24 24	 mov	 DWORD PTR $T161626[esp+144], eax
  00097	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0009c	8b 4c 24 20	 mov	 ecx, DWORD PTR $T161626[esp+140]
  000a0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a3	3b c3		 cmp	 eax, ebx
  000a5	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  000a7	83 f8 ff	 cmp	 eax, -1
  000aa	73 04		 jae	 SHORT $LN33@Fput
  000ac	48		 dec	 eax
  000ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN33@Fput:
  000b0	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  000b3	f7 db		 neg	 ebx
  000b5	1b db		 sbb	 ebx, ebx
  000b7	f7 d3		 not	 ebx
  000b9	23 d9		 and	 ebx, ecx
  000bb	8d 4c 24 24	 lea	 ecx, DWORD PTR __Lock$161635[esp+140]
  000bf	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000c4	85 db		 test	 ebx, ebx
  000c6	74 0a		 je	 SHORT $LN189@Fput
  000c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ca	8b 10		 mov	 edx, DWORD PTR [eax]
  000cc	6a 01		 push	 1
  000ce	8b cb		 mov	 ecx, ebx
  000d0	ff d2		 call	 edx
$LN189@Fput:
  000d2	33 db		 xor	 ebx, ebx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000d4	8d 44 24 60	 lea	 eax, DWORD PTR __Grouping$[esp+140]
  000d8	50		 push	 eax
  000d9	8b cd		 mov	 ecx, ebp
  000db	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000e0	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000e3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e6	8b cd		 mov	 ecx, ebp
  000e8	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+148], 1
  000f3	ff d0		 call	 eax
  000f5	0f b7 c8	 movzx	 ecx, ax
  000f8	89 4c 24 20	 mov	 DWORD PTR __Kseparator$[esp+140], ecx

; 1318 : 		string _Groupstring;

  000fc	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  00104	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  00108	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);

  0010d	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00110	52		 push	 edx
  00111	8d 44 24 28	 lea	 eax, DWORD PTR __Mbst1$161776[esp+144]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	8d 4c 24 28	 lea	 ecx, DWORD PTR $T161778[esp+152]
  0011c	51		 push	 ecx
  0011d	8d 54 24 3c	 lea	 edx, DWORD PTR __Wc$161775[esp+156]
  00121	52		 push	 edx
  00122	c6 84 24 9c 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+168], 2
  0012a	c6 44 24 30 30	 mov	 BYTE PTR $T161778[esp+160], 48 ; 00000030H
  0012f	89 5c 24 40	 mov	 DWORD PTR __Wc$161775[esp+160], ebx
  00133	89 5c 24 38	 mov	 DWORD PTR __Mbst1$161776[esp+160], ebx
  00137	e8 00 00 00 00	 call	 __Mbrtowc

; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  0013c	8a 06		 mov	 al, BYTE PTR [esi]
  0013e	83 c4 14	 add	 esp, 20			; 00000014H
  00141	3c 2b		 cmp	 al, 43			; 0000002bH
  00143	74 08		 je	 SHORT $LN19@Fput
  00145	89 5c 24 24	 mov	 DWORD PTR __Prefix$[esp+140], ebx
  00149	3c 2d		 cmp	 al, 45			; 0000002dH
  0014b	75 08		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  0014d	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+140], 1
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00155	e8 00 00 00 00	 call	 _localeconv
  0015a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0015c	8b 9c 24 b8 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+136]
  00163	8a 08		 mov	 cl, BYTE PTR [eax]
  00165	53		 push	 ebx
  00166	6a 65		 push	 101			; 00000065H
  00168	56		 push	 esi
  00169	88 4c 24 24	 mov	 BYTE PTR __Enders$[esp+152], cl
  0016d	c6 44 24 25 65	 mov	 BYTE PTR __Enders$[esp+153], 101 ; 00000065H
  00172	c6 44 24 26 00	 mov	 BYTE PTR __Enders$[esp+154], 0
  00177	e8 00 00 00 00	 call	 _memchr

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0017c	0f be 54 24 24	 movsx	 edx, BYTE PTR __Enders$[esp+152]
  00181	53		 push	 ebx
  00182	52		 push	 edx
  00183	56		 push	 esi
  00184	8b e8		 mov	 ebp, eax
  00186	e8 00 00 00 00	 call	 _memchr
  0018b	83 c4 18	 add	 esp, 24			; 00000018H
  0018e	89 44 24 14	 mov	 DWORD PTR __Pointptr$[esp+140], eax

; 1331 : 		if (_Pointptr == 0)

  00192	85 c0		 test	 eax, eax
  00194	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00196	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+136], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0019d	8b 54 24 78	 mov	 edx, DWORD PTR __Grouping$[esp+164]
  001a1	8b 44 24 64	 mov	 eax, DWORD PTR __Grouping$[esp+144]
  001a5	8b c8		 mov	 ecx, eax
  001a7	83 fa 10	 cmp	 edx, 16			; 00000010H
  001aa	73 04		 jae	 SHORT $LN78@Fput
  001ac	8d 4c 24 64	 lea	 ecx, DWORD PTR __Grouping$[esp+144]
$LN78@Fput:
  001b0	80 39 7f	 cmp	 BYTE PTR [ecx], 127	; 0000007fH
  001b3	0f 84 52 01 00
	00		 je	 $LN111@Fput
  001b9	83 fa 10	 cmp	 edx, 16			; 00000010H
  001bc	73 04		 jae	 SHORT $LN84@Fput
  001be	8d 44 24 64	 lea	 eax, DWORD PTR __Grouping$[esp+144]
$LN84@Fput:
  001c2	80 38 00	 cmp	 BYTE PTR [eax], 0
  001c5	0f 8e 40 01 00
	00		 jle	 $LN111@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  001cb	53		 push	 ebx
  001cc	56		 push	 esi
  001cd	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001d1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  001d6	85 ed		 test	 ebp, ebp
  001d8	75 19		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  001da	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+136]
  001e1	6a 30		 push	 48			; 00000030H
  001e3	50		 push	 eax
  001e4	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001e8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ed	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f1	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001f3	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f7	85 db		 test	 ebx, ebx
  001f9	75 1a		 jne	 SHORT $LN12@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001fb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+136]
  00202	6a 30		 push	 48			; 00000030H
  00204	51		 push	 ecx
  00205	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  00209	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  0020e	89 9c 24 ac 00
	00 00		 mov	 DWORD PTR __Beforepoint$[esp+136], ebx
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00215	8b 94 24 b4 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+136]
  0021c	6a 30		 push	 48			; 00000030H
  0021e	52		 push	 edx
  0021f	2b ee		 sub	 ebp, esi
  00221	55		 push	 ebp
  00222	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00226	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  0022b	6a 30		 push	 48			; 00000030H
  0022d	85 db		 test	 ebx, ebx
  0022f	75 13		 jne	 SHORT $LN11@Fput
  00231	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+140]
  00238	50		 push	 eax
  00239	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  0023d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  00242	eb 36		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00244	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+140]
  0024b	2b de		 sub	 ebx, esi
  0024d	51		 push	 ecx
  0024e	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  00251	52		 push	 edx
  00252	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00256	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  0025b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]
  00262	6a 30		 push	 48			; 00000030H
  00264	50		 push	 eax
  00265	53		 push	 ebx
  00266	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  0026a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  0026f	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+136], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  0027a	8b 5c 24 64	 mov	 ebx, DWORD PTR __Grouping$[esp+144]
  0027e	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  00283	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+136], 0
  0028e	39 6c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], ebp
  00292	73 04		 jae	 SHORT $LN90@Fput
  00294	8d 5c 24 64	 lea	 ebx, DWORD PTR __Grouping$[esp+144]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  00298	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0029c	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002a0	73 04		 jae	 SHORT $LN100@Fput
  002a2	8d 44 24 48	 lea	 eax, DWORD PTR __Groupstring$[esp+144]
$LN100@Fput:
  002a6	8d 4c 24 18	 lea	 ecx, DWORD PTR __Enders$[esp+140]
  002aa	51		 push	 ecx
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _strcspn
  002b1	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002b3	8a 03		 mov	 al, BYTE PTR [ebx]
  002b5	83 c4 08	 add	 esp, 8
  002b8	3c 7f		 cmp	 al, 127			; 0000007fH
  002ba	74 32		 je	 SHORT $LN8@Fput
  002bc	8d 64 24 00	 npad	 4
$LL9@Fput:
  002c0	84 c0		 test	 al, al
  002c2	7e 2a		 jle	 SHORT $LN8@Fput
  002c4	8b d6		 mov	 edx, esi
  002c6	2b 54 24 24	 sub	 edx, DWORD PTR __Prefix$[esp+140]
  002ca	0f be c0	 movsx	 eax, al
  002cd	3b c2		 cmp	 eax, edx
  002cf	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  002d1	6a 00		 push	 0
  002d3	2b f0		 sub	 esi, eax
  002d5	6a 01		 push	 1
  002d7	56		 push	 esi
  002d8	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  002dc	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  002e1	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0
  002e5	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002e7	43		 inc	 ebx
$LN7@Fput:
  002e8	8a 03		 mov	 al, BYTE PTR [ebx]
  002ea	3c 7f		 cmp	 al, 127			; 0000007fH
  002ec	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002ee	8b 74 24 48	 mov	 esi, DWORD PTR __Groupstring$[esp+144]
  002f2	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002f6	73 04		 jae	 SHORT $LN110@Fput
  002f8	8d 74 24 48	 lea	 esi, DWORD PTR __Groupstring$[esp+144]
$LN110@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002fc	8b 5c 24 58	 mov	 ebx, DWORD PTR __Groupstring$[esp+160]
  00300	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
$LN111@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0030b	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+136]
  00312	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00319	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+140]
  0031d	03 c1		 add	 eax, ecx
  0031f	03 84 24 b4 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+136]
  00326	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00329	03 c3		 add	 eax, ebx
  0032b	85 c9		 test	 ecx, ecx
  0032d	7e 0c		 jle	 SHORT $LN21@Fput
  0032f	3b c8		 cmp	 ecx, eax
  00331	76 08		 jbe	 SHORT $LN21@Fput
  00333	2b c8		 sub	 ecx, eax
  00335	89 4c 24 14	 mov	 DWORD PTR __Fillcount$[esp+140], ecx
  00339	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  0033b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+140], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  00343	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00346	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  0034b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0034e	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  00354	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00359	74 3d		 je	 SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0035b	8b 54 24 14	 mov	 edx, DWORD PTR __Fillcount$[esp+140]
  0035f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+136]
  00366	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0036d	52		 push	 edx
  0036e	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00375	50		 push	 eax
  00376	51		 push	 ecx
  00377	52		 push	 edx
  00378	8d 44 24 34	 lea	 eax, DWORD PTR $T161596[esp+156]
  0037c	50		 push	 eax
  0037d	57		 push	 edi
  0037e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  0038c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0038f	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx

; 1385 : 			_Fillcount = 0;

  00396	eb 78		 jmp	 SHORT $LN192@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00398	83 7c 24 24 00	 cmp	 DWORD PTR __Prefix$[esp+140], 0
  0039d	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0039f	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003a6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  003ad	6a 01		 push	 1
  003af	56		 push	 esi
  003b0	50		 push	 eax
  003b1	51		 push	 ecx
  003b2	8d 54 24 34	 lea	 edx, DWORD PTR $T161597[esp+156]
  003b6	52		 push	 edx
  003b7	57		 push	 edi
  003b8	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  003bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bf	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  003c6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003c9	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  003cc	46		 inc	 esi
  003cd	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  003d4	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  003d5	8b 44 24 14	 mov	 eax, DWORD PTR __Fillcount$[esp+140]
  003d9	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+136]
  003e0	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  003e7	50		 push	 eax
  003e8	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003ef	51		 push	 ecx
  003f0	52		 push	 edx
  003f1	50		 push	 eax
  003f2	8d 4c 24 34	 lea	 ecx, DWORD PTR $T161598[esp+156]
  003f6	51		 push	 ecx
  003f7	57		 push	 edi
  003f8	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  003fd	8b 10		 mov	 edx, DWORD PTR [eax]
  003ff	89 94 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], edx
  00406	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00409	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], eax
$LN192@Fput:

; 1395 : 			_Fillcount = 0;

  00410	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+164], 0
  00418	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  0041b	0f be 4c 24 18	 movsx	 ecx, BYTE PTR __Enders$[esp+140]
  00420	53		 push	 ebx
  00421	51		 push	 ecx
  00422	56		 push	 esi
  00423	e8 00 00 00 00	 call	 _memchr
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  0042b	85 c0		 test	 eax, eax
  0042d	0f 84 ea 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  00433	8b 54 24 20	 mov	 edx, DWORD PTR __Kseparator$[esp+140]
  00437	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0043e	2b c6		 sub	 eax, esi
  00440	40		 inc	 eax
  00441	52		 push	 edx
  00442	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00449	8b e8		 mov	 ebp, eax
  0044b	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  0044e	50		 push	 eax
  0044f	56		 push	 esi
  00450	51		 push	 ecx
  00451	52		 push	 edx
  00452	8d 44 24 38	 lea	 eax, DWORD PTR $T161599[esp+160]
  00456	50		 push	 eax
  00457	57		 push	 edi
  00458	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0045d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0045f	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  00466	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00469	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+164]
  00470	51		 push	 ecx
  00471	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  00478	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$161775[esp+172]
  0047c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0047f	52		 push	 edx
  00480	8b 10		 mov	 edx, DWORD PTR [eax]
  00482	51		 push	 ecx
  00483	52		 push	 edx
  00484	8d 44 24 50	 lea	 eax, DWORD PTR $T161600[esp+184]
  00488	50		 push	 eax
  00489	57		 push	 edi
  0048a	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0048f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00491	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00498	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  0049b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Punct_fac$[esp+192]
  0049f	89 94 24 d0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+192], edx
  004a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  004a8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004ab	83 c4 34	 add	 esp, 52			; 00000034H
  004ae	ff d2		 call	 edx
  004b0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  004b7	0f b7 c0	 movzx	 eax, ax
  004ba	6a 01		 push	 1
  004bc	50		 push	 eax
  004bd	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+148]
  004c4	50		 push	 eax
  004c5	51		 push	 ecx
  004c6	8d 54 24 40	 lea	 edx, DWORD PTR $T161601[esp+156]
  004ca	52		 push	 edx
  004cb	57		 push	 edi
  004cc	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  004d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d3	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004da	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  004dd	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+160]
  004e4	51		 push	 ecx
  004e5	89 94 24 b8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+168], edx
  004ec	8b 54 24 48	 mov	 edx, DWORD PTR __Wc$161775[esp+168]
  004f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f3	52		 push	 edx
  004f4	8b 10		 mov	 edx, DWORD PTR [eax]
  004f6	51		 push	 ecx
  004f7	52		 push	 edx
  004f8	8d 44 24 58	 lea	 eax, DWORD PTR $T161602[esp+180]
  004fc	50		 push	 eax
  004fd	57		 push	 edi
  004fe	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00503	8b 08		 mov	 ecx, DWORD PTR [eax]
  00505	89 8c 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], ecx
  0050c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0050f	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00512	03 f5		 add	 esi, ebp
  00514	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0051b	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  0051d	53		 push	 ebx
  0051e	6a 65		 push	 101			; 00000065H
  00520	56		 push	 esi
  00521	e8 00 00 00 00	 call	 _memchr
  00526	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  00529	85 c0		 test	 eax, eax
  0052b	0f 84 c0 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00531	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00538	2b c6		 sub	 eax, esi
  0053a	40		 inc	 eax
  0053b	8b e8		 mov	 ebp, eax
  0053d	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  00541	50		 push	 eax
  00542	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  00549	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  0054c	51		 push	 ecx
  0054d	56		 push	 esi
  0054e	52		 push	 edx
  0054f	50		 push	 eax
  00550	8d 4c 24 44	 lea	 ecx, DWORD PTR $T161603[esp+160]
  00554	51		 push	 ecx
  00555	57		 push	 edi
  00556	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0055b	8b 10		 mov	 edx, DWORD PTR [eax]
  0055d	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00564	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  00567	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+164]
  0056e	52		 push	 edx
  0056f	89 8c 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], ecx
  00576	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Wc$161775[esp+172]
  0057a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057d	8b 00		 mov	 eax, DWORD PTR [eax]
  0057f	51		 push	 ecx
  00580	52		 push	 edx
  00581	50		 push	 eax
  00582	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T161604[esp+184]
  00586	51		 push	 ecx
  00587	57		 push	 edi
  00588	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0058d	8b 10		 mov	 edx, DWORD PTR [eax]
  0058f	89 94 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], edx
  00596	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  00599	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]
  0059d	83 c4 34	 add	 esp, 52			; 00000034H
  005a0	f6 42 10 04	 test	 BYTE PTR [edx+16], 4
  005a4	89 8c 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  005ab	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
  005b6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  005bb	75 05		 jne	 SHORT $LN24@Fput
  005bd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  005c2	8b 10		 mov	 edx, DWORD PTR [eax]
  005c4	6a 01		 push	 1
  005c6	51		 push	 ecx
  005c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005ca	51		 push	 ecx
  005cb	52		 push	 edx
  005cc	8d 44 24 40	 lea	 eax, DWORD PTR $T161607[esp+156]
  005d0	50		 push	 eax
  005d1	57		 push	 edi
  005d2	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  005d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d9	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  005e0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005e3	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  005e6	03 f5		 add	 esi, ebp
  005e8	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  005ef	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005f1	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  005f5	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  005fc	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+136]
  00603	50		 push	 eax
  00604	53		 push	 ebx
  00605	56		 push	 esi
  00606	51		 push	 ecx
  00607	52		 push	 edx
  00608	8d 44 24 44	 lea	 eax, DWORD PTR $T161608[esp+160]
  0060c	50		 push	 eax
  0060d	57		 push	 edi
  0060e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00613	8b 08		 mov	 ecx, DWORD PTR [eax]
  00615	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0061c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  0061f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+164]
  00626	51		 push	 ecx
  00627	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  0062e	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$161775[esp+172]
  00632	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00635	52		 push	 edx
  00636	8b 10		 mov	 edx, DWORD PTR [eax]
  00638	51		 push	 ecx
  00639	52		 push	 edx
  0063a	8d 44 24 5c	 lea	 eax, DWORD PTR $T161609[esp+184]
  0063e	50		 push	 eax
  0063f	57		 push	 edi
  00640	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00645	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  00647	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0064b	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+192]
  0064f	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00656	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00659	33 db		 xor	 ebx, ebx
  0065b	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  0065e	8b 54 24 48	 mov	 edx, DWORD PTR __Fillcount$[esp+192]
  00662	52		 push	 edx
  00663	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+192]
  0066a	52		 push	 edx
  0066b	50		 push	 eax
  0066c	51		 push	 ecx
  0066d	56		 push	 esi
  0066e	57		 push	 edi
  0066f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+216], eax
  00676	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0067b	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00680	83 c4 4c	 add	 esp, 76			; 0000004cH
  00683	39 7c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], edi
  00687	72 0d		 jb	 SHORT $LN143@Fput
  00689	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00693	83 c4 04	 add	 esp, 4
$LN143@Fput:
  00696	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  0069e	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  006a2	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0
  006a7	39 7c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], edi
  006ab	72 0d		 jb	 SHORT $LN181@Fput
  006ad	8b 4c 24 64	 mov	 ecx, DWORD PTR __Grouping$[esp+144]
  006b1	51		 push	 ecx
  006b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006b7	83 c4 04	 add	 esp, 4
$LN181@Fput:
  006ba	8b c6		 mov	 eax, esi

; 1427 : 		}

  006bc	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+140]
  006c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006ca	59		 pop	 ecx
  006cb	5f		 pop	 edi
  006cc	5e		 pop	 esi
  006cd	5d		 pop	 ebp
  006ce	5b		 pop	 ebx
  006cf	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  006d3	33 cc		 xor	 ecx, esp
  006d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006da	83 c4 78	 add	 esp, 120		; 00000078H
  006dd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T161591[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 84	 lea	 eax, DWORD PTR [edx-124]
  0001f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
_TEXT	SEGMENT
__Lock$162170 = -84					; size = 4
$T162144 = -84						; size = 8
$T162142 = -84						; size = 8
__Prefix$ = -84						; size = 4
_this$GSCopy$ = -76					; size = 4
$T162143 = -72						; size = 8
__Pg$137204 = -72					; size = 4
__Iosbase$GSCopy$ = -64					; size = 4
___$ReturnUdt$GSCopy$ = -60				; size = 4
$T162134 = -56						; size = 4
$T162145 = -52						; size = 8
__Punct_fac$ = -52					; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 5c	 lea	 eax, DWORD PTR __$EHRec$[esp+104]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 4c 24 70	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+100]
  00036	8b 44 24 6c	 mov	 eax, DWORD PTR _this$[esp+100]
  0003a	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Buf$[esp+100]
  00041	89 4c 24 2c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+104], ecx
  00045	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Iosbase$[esp+100]
  00049	8d 54 24 30	 lea	 edx, DWORD PTR $T162134[esp+104]
  0004d	52		 push	 edx
  0004e	89 44 24 20	 mov	 DWORD PTR _this$GSCopy$[esp+108], eax
  00052	89 4c 24 2c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+108], ecx
  00056	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0005b	50		 push	 eax
  0005c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+116], 0
  00064	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00069	8b 7c 24 34	 mov	 edi, DWORD PTR $T162134[esp+108]
  0006d	83 c4 04	 add	 esp, 4
  00070	8b e8		 mov	 ebp, eax
  00072	89 6c 24 34	 mov	 DWORD PTR __Punct_fac$[esp+104], ebp
  00076	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+112], -1
  0007e	85 ff		 test	 edi, edi
  00080	74 3d		 je	 SHORT $LN22@Iput
  00082	6a 00		 push	 0
  00084	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$162170[esp+108]
  00088	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0008d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00090	85 c0		 test	 eax, eax
  00092	76 09		 jbe	 SHORT $LN24@Iput

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00094	83 f8 ff	 cmp	 eax, -1
  00097	73 04		 jae	 SHORT $LN24@Iput
  00099	48		 dec	 eax
  0009a	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN24@Iput:
  0009d	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  000a0	f7 de		 neg	 esi
  000a2	1b f6		 sbb	 esi, esi
  000a4	f7 d6		 not	 esi
  000a6	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$162170[esp+104]
  000aa	23 f7		 and	 esi, edi
  000ac	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b1	85 f6		 test	 esi, esi
  000b3	74 0a		 je	 SHORT $LN22@Iput
  000b5	8b 06		 mov	 eax, DWORD PTR [esi]
  000b7	8b 10		 mov	 edx, DWORD PTR [eax]
  000b9	6a 01		 push	 1
  000bb	8b ce		 mov	 ecx, esi
  000bd	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000bf	8d 44 24 3c	 lea	 eax, DWORD PTR __Grouping$[esp+104]
  000c3	50		 push	 eax
  000c4	8b cd		 mov	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000cb	8a 03		 mov	 al, BYTE PTR [ebx]
  000cd	b9 01 00 00 00	 mov	 ecx, 1
  000d2	89 4c 24 64	 mov	 DWORD PTR __$EHRec$[esp+112], ecx
  000d6	3c 2b		 cmp	 al, 43			; 0000002bH
  000d8	74 27		 je	 SHORT $LN10@Iput
  000da	3c 2d		 cmp	 al, 45			; 0000002dH
  000dc	74 23		 je	 SHORT $LN10@Iput
  000de	3c 30		 cmp	 al, 48			; 00000030H
  000e0	75 15		 jne	 SHORT $LN12@Iput
  000e2	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000e5	3c 78		 cmp	 al, 120			; 00000078H
  000e7	74 04		 je	 SHORT $LN11@Iput
  000e9	3c 58		 cmp	 al, 88			; 00000058H
  000eb	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000ed	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 2
  000f5	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000f7	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 0
  000ff	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  00101	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+104], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  00105	8b 4c 24 54	 mov	 ecx, DWORD PTR __Grouping$[esp+128]
  00109	8b 54 24 40	 mov	 edx, DWORD PTR __Grouping$[esp+108]
  0010d	8b c2		 mov	 eax, edx
  0010f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00112	73 04		 jae	 SHORT $LN33@Iput
  00114	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN33@Iput:
  00118	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0011b	74 7e		 je	 SHORT $LN87@Iput
  0011d	8b c2		 mov	 eax, edx
  0011f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00122	73 04		 jae	 SHORT $LN39@Iput
  00124	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN39@Iput:
  00128	80 38 00	 cmp	 BYTE PTR [eax], 0
  0012b	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  0012d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00130	72 06		 jb	 SHORT $LN44@Iput
  00132	89 54 24 20	 mov	 DWORD PTR __Pg$137204[esp+104], edx
  00136	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  00138	8d 4c 24 40	 lea	 ecx, DWORD PTR __Grouping$[esp+108]
  0013c	89 4c 24 20	 mov	 DWORD PTR __Pg$137204[esp+104], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00140	8b 54 24 20	 mov	 edx, DWORD PTR __Pg$137204[esp+104]
  00144	8a 02		 mov	 al, BYTE PTR [edx]
  00146	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
  0014d	8b f5		 mov	 esi, ebp
  0014f	3c 7f		 cmp	 al, 127			; 0000007fH
  00151	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00153	84 c0		 test	 al, al
  00155	7e 4b		 jle	 SHORT $LN5@Iput
  00157	8b ce		 mov	 ecx, esi
  00159	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+104]
  0015d	0f be c0	 movsx	 eax, al
  00160	3b c1		 cmp	 eax, ecx
  00162	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00164	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  00166	8b d5		 mov	 edx, ebp
  00168	2b d6		 sub	 edx, esi
  0016a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0016d	50		 push	 eax
  0016e	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00171	57		 push	 edi
  00172	50		 push	 eax
  00173	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  0017d	8b 44 24 30	 mov	 eax, DWORD PTR __Pg$137204[esp+120]
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	c6 07 00	 mov	 BYTE PTR [edi], 0
  00187	45		 inc	 ebp
  00188	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  0018c	7e 05		 jle	 SHORT $LN4@Iput
  0018e	40		 inc	 eax
  0018f	89 44 24 20	 mov	 DWORD PTR __Pg$137204[esp+104], eax
$LN4@Iput:
  00193	8a 00		 mov	 al, BYTE PTR [eax]
  00195	3c 7f		 cmp	 al, 127			; 0000007fH
  00197	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00199	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  0019b	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  001a2	8b 44 24 28	 mov	 eax, DWORD PTR __Iosbase$GSCopy$[esp+104]
  001a6	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  001a9	85 f6		 test	 esi, esi
  001ab	7e 08		 jle	 SHORT $LN15@Iput
  001ad	3b f5		 cmp	 esi, ebp
  001af	76 04		 jbe	 SHORT $LN15@Iput
  001b1	2b f5		 sub	 esi, ebp
  001b3	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001b5	33 f6		 xor	 esi, esi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;

  001b7	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ba	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR __Fill$[esp+100]
  001c1	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001c6	83 f8 40	 cmp	 eax, 64			; 00000040H
  001c9	0f 84 8b 00 00
	00		 je	 $LN1@Iput
  001cf	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d4	74 20		 je	 SHORT $LN85@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001d6	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  001da	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  001de	56		 push	 esi
  001df	57		 push	 edi
  001e0	51		 push	 ecx
  001e1	8b 4c 24 28	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+116]
  001e5	52		 push	 edx
  001e6	8d 44 24 24	 lea	 eax, DWORD PTR $T162142[esp+120]
  001ea	50		 push	 eax
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001f1	83 c4 18	 add	 esp, 24			; 00000018H

; 1492 : 			_Fillcount = 0;

  001f4	eb 55		 jmp	 SHORT $LN93@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001f6	8b 4c 24 14	 mov	 ecx, DWORD PTR __Prefix$[esp+104]
  001fa	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+104]
  001fe	8b 44 24 74	 mov	 eax, DWORD PTR __Dest$[esp+100]
  00202	51		 push	 ecx
  00203	53		 push	 ebx
  00204	52		 push	 edx
  00205	8b 54 24 28	 mov	 edx, DWORD PTR _this$GSCopy$[esp+116]
  00209	50		 push	 eax
  0020a	8d 4c 24 30	 lea	 ecx, DWORD PTR $T162143[esp+120]
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00215	8b 08		 mov	 ecx, DWORD PTR [eax]
  00217	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  0021e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00221	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+128]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  00225	56		 push	 esi
  00226	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0022d	8b 10		 mov	 edx, DWORD PTR [eax]
  0022f	03 d9		 add	 ebx, ecx
  00231	2b e9		 sub	 ebp, ecx
  00233	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00236	57		 push	 edi
  00237	51		 push	 ecx
  00238	8b 4c 24 40	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+140]
  0023c	52		 push	 edx
  0023d	8d 44 24 3c	 lea	 eax, DWORD PTR $T162144[esp+144]
  00241	50		 push	 eax
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00248	83 c4 30	 add	 esp, 48			; 00000030H
$LN93@Iput:
  0024b	8b 10		 mov	 edx, DWORD PTR [eax]
  0024d	89 54 24 74	 mov	 DWORD PTR __Dest$[esp+100], edx
  00251	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00254	33 f6		 xor	 esi, esi
  00256	89 44 24 78	 mov	 DWORD PTR __Dest$[esp+104], eax
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  0025a	8b 4c 24 34	 mov	 ecx, DWORD PTR __Punct_fac$[esp+104]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00263	ff d0		 call	 eax
  00265	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  00269	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  0026d	0f b7 c0	 movzx	 eax, ax
  00270	50		 push	 eax
  00271	55		 push	 ebp
  00272	53		 push	 ebx
  00273	8b 5c 24 28	 mov	 ebx, DWORD PTR _this$GSCopy$[esp+116]
  00277	51		 push	 ecx
  00278	52		 push	 edx
  00279	8d 44 24 48	 lea	 eax, DWORD PTR $T162145[esp+124]
  0027d	50		 push	 eax
  0027e	53		 push	 ebx
  0027f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00286	8b 54 24 44	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0028a	56		 push	 esi
  0028b	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+136]
  0028f	57		 push	 edi
  00290	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+136], ecx
  00297	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0029a	50		 push	 eax
  0029b	51		 push	 ecx
  0029c	56		 push	 esi
  0029d	53		 push	 ebx
  0029e	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
  002a5	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  002ac	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  002b1	83 c4 34	 add	 esp, 52			; 00000034H
  002b4	83 7c 24 54 10	 cmp	 DWORD PTR __Grouping$[esp+128], 16 ; 00000010H
  002b9	72 0d		 jb	 SHORT $LN86@Iput
  002bb	8b 44 24 40	 mov	 eax, DWORD PTR __Grouping$[esp+108]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c5	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002c8	8b c6		 mov	 eax, esi

; 1505 : 		}

  002ca	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$EHRec$[esp+104]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d5	59		 pop	 ecx
  002d6	5f		 pop	 edi
  002d7	5e		 pop	 esi
  002d8	5d		 pop	 ebp
  002d9	5b		 pop	 ebx
  002da	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+84]
  002de	33 cc		 xor	 ecx, esp
  002e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e5	83 c4 54	 add	 esp, 84			; 00000054H
  002e8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T162134[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 a8	 lea	 eax, DWORD PTR [edx-88]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  00027	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	83 c8 04	 or	 eax, 4
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00039	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003e	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00046	83 c4 04	 add	 esp, 4
  00049	5e		 pop	 esi

; 144  : 		}

  0004a	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00054	5e		 pop	 esi

; 144  : 		}

  00055	c2 08 00	 ret	 8
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN5@Destroy_ra@2
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@2:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 226  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
$T162480 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$162483 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$162483[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T162480[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T162480[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
_TEXT	SEGMENT
__Signed$136778 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@3
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@3

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@3

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$136778[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@3
$LN17@do_put@3:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$136778[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@3:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@3
$LN52@do_put@3:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@3
$LN58@do_put@3:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@3

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@3

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@3
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN73@do_put@3:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@3
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@3

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@3:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$136778[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@3

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@3:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@3
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@3
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@3:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@3
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@3
$LN67@do_put@3:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@3

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@3:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@3
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
_TEXT	SEGMENT
__Signed$136806 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@4

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@4
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@4:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@4
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@4:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@4

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@4
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$136806[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@4
$LN49@do_put@4:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@4
$LN17@do_put@4:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$136806[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@4
$LN55@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@4:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@4

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@4

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@4:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@4
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@4
$LN70@do_put@4:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@4:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@4
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@4

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@4:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$136806[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@4

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@4
$LN64@do_put@4:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@4
$LN43@do_put@4:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@4:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@4
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@4:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@4
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@4:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@4
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@4
$LN36@do_put@4:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@4
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@4
$LN34@do_put@4:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@4:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T162887 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T162887[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T162887[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T162887[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T162887[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN7@Destroy
  0000e	8b ff		 npad	 2
$LL9@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL9@Destroy
$LN7@Destroy:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1120 : 		}

  00023	c2 08 00	 ret	 8
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
_TEXT	ENDS
PUBLIC	??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z
_TEXT	SEGMENT
$T163249 = -4						; size = 1
__Cat$163253 = 8					; size = 1
$T163251 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@3
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@3
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@3
$LN11@erase@3:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@3:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@3
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@3
$LN30@erase@3:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@3:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@3
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@3
$LN47@erase@3:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@3:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4f		 je	 SHORT $LN89@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T163249[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T163249[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$163253[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T163251[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 12		 je	 SHORT $LN75@erase@3
  0008f	90		 npad	 1
$LL77@erase@3:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00097	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0009d	3b fd		 cmp	 edi, ebp
  0009f	75 ef		 jne	 SHORT $LL77@erase@3
$LN75@erase@3:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000a1	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a5	5d		 pop	 ebp
  000a6	5f		 pop	 edi
  000a7	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000ac	59		 pop	 ecx
  000ad	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@3:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000b2	8b c3		 mov	 eax, ebx
  000b4	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b5	59		 pop	 ecx
  000b6	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN22@Tidy@4
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 11		 je	 SHORT $LN10@Tidy@4
$LL12@Tidy@4:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0001a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL12@Tidy@4
$LN10@Tidy@4:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00024	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	5f		 pop	 edi
$LN22@Tidy@4:
  00031	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00032	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00039	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00040	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00047	5b		 pop	 ebx

; 1135 : 		}

  00048	c3		 ret	 0
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
$T163449 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T163449[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T163449[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
  00088	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  0008c	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008f	75 12		 jne	 SHORT $LN31@basic_iost
  00091	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00094	83 c8 04	 or	 eax, 4
  00097	83 c8 04	 or	 eax, 4
  0009a	53		 push	 ebx
  0009b	50		 push	 eax
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a6	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 915  : 		}

  000c0	8b c7		 mov	 eax, edi
  000c2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T163449[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T163449[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@2

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1@sentry@2:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@2
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@2:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T163796 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T163935 = 8						; size = 1
__Cat$163939 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@2
$LN19@vector@2:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00049	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0004c	2b 4b 0c	 sub	 ecx, DWORD PTR [ebx+12]
  0004f	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00054	f7 e9		 imul	 ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	b8 00 00 00 00	 mov	 eax, 0
  00060	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00063	03 fa		 add	 edi, edx
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00072	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00075	74 6d		 je	 SHORT $LN8@vector@2
  00077	81 ff e1 e1 e1
	01		 cmp	 edi, 31580641		; 01e1e1e1H
  0007d	76 05		 jbe	 SHORT $LN46@vector@2
  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN46@vector@2:
  00084	50		 push	 eax
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0008b	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00091	03 f8		 add	 edi, eax
  00093	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00096	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00099	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  0009c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0009f	83 c4 08	 add	 esp, 8
  000a2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a6	89 45 ec	 mov	 DWORD PTR $T163796[ebp], eax
  000a9	39 43 0c	 cmp	 DWORD PTR [ebx+12], eax
  000ac	76 05		 jbe	 SHORT $LN63@vector@2
  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN63@vector@2:
  000b3	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  000b6	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  000b9	76 05		 jbe	 SHORT $LN80@vector@2
  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@vector@2:
  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	c6 45 08 00	 mov	 BYTE PTR $T163935[ebp], 0
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR $T163935[ebp]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Cat$163939[ebp]
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	8b 55 ec	 mov	 edx, DWORD PTR $T163796[ebp]
  000d2	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	52		 push	 edx
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@2:

; 507  : 			_CATCH_END
; 508  : 		}

  000e4	8b c6		 mov	 eax, esi
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 506  : 			_RERAISE;

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN114@vector@2:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 827  : 	{	// insert NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 828  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 829  : 	ios_base::iostate _State = ios_base::goodbit;
; 830  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL134@operator@16:
  00036	66 8b 08	 mov	 cx, WORD PTR [eax]
  00039	83 c0 02	 add	 eax, 2
  0003c	66 3b cb	 cmp	 cx, bx
  0003f	75 f5		 jne	 SHORT $LL134@operator@16

; 831  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 832  : 		? 0 : _Ostr.width() - _Count;

  00041	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	8b f8		 mov	 edi, eax
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004f	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  00053	3b c3		 cmp	 eax, ebx
  00055	7e 0d		 jle	 SHORT $LN17@operator@16
  00057	3b c7		 cmp	 eax, edi
  00059	7e 09		 jle	 SHORT $LN17@operator@16
  0005b	2b c7		 sub	 eax, edi
  0005d	8b d8		 mov	 ebx, eax
  0005f	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  00062	eb 03		 jmp	 SHORT $LN18@operator@16
$LN17@operator@16:
  00064	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@16:

; 833  : 	const typename _Myos::sentry _Ok(_Ostr);

  00067	56		 push	 esi
  00068	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 834  : 
; 835  : 	if (!_Ok)

  00070	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007b	75 0a		 jne	 SHORT $LN14@operator@16

; 836  : 		_State |= ios_base::badbit;

  0007d	ba 04 00 00 00	 mov	 edx, 4

; 837  : 	else

  00082	e9 ab 00 00 00	 jmp	 $LN22@operator@16
$LN14@operator@16:

; 838  : 		{	// state okay, insert
; 839  : 		_TRY_IO_BEGIN
; 840  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00087	8b 16		 mov	 edx, DWORD PTR [esi]
  00089	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008c	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  00090	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00095	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00099	83 f8 40	 cmp	 eax, 64			; 00000040H
  0009c	74 63		 je	 SHORT $LN132@operator@16
  0009e	8b ff		 npad	 2
$LL10@operator@16:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000a0	85 db		 test	 ebx, ebx
  000a2	7e 57		 jle	 SHORT $LN8@operator@16

; 842  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 843  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a9	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000ad	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  000b0	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  000b4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000b7	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ba	74 1f		 je	 SHORT $LN42@operator@16
  000bc	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c2	7e 17		 jle	 SHORT $LN42@operator@16
  000c4	ff 08		 dec	 DWORD PTR [eax]
  000c6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000ce	89 19		 mov	 DWORD PTR [ecx], ebx
  000d0	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000d3	66 89 10	 mov	 WORD PTR [eax], dx
  000d6	0f b7 c2	 movzx	 eax, dx
  000d9	eb 0e		 jmp	 SHORT $LN43@operator@16
$LN42@operator@16:
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	52		 push	 edx
  000de	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e1	ff d2		 call	 edx
  000e3	0f b7 c0	 movzx	 eax, ax
  000e6	0f b7 c0	 movzx	 eax, ax
$LN43@operator@16:
  000e9	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000ee	66 3b c8	 cmp	 cx, ax
  000f1	0f 85 7f 00 00
	00		 jne	 $LN9@operator@16

; 844  : 					{	// insertion failed, quit
; 845  : 					_State |= ios_base::badbit;

  000f7	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@16:

; 846  : 					break;
; 847  : 					}
; 848  : 
; 849  : 		if (_State == ios_base::goodbit
; 850  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000fb	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000ff	75 1f		 jne	 SHORT $LN2@operator@16
$LN132@operator@16:
  00101	8b 16		 mov	 edx, DWORD PTR [esi]
  00103	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00106	8b 4c 30 28	 mov	 ecx, DWORD PTR [eax+esi+40]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0010f	57		 push	 edi
  00110	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00113	ff d0		 call	 eax
  00115	3b c7		 cmp	 eax, edi
  00117	74 67		 je	 SHORT $LL133@operator@16

; 851  : 			_State |= ios_base::badbit;

  00119	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@16:

; 860  : 					}
; 861  : 		_Ostr.width(0);

  00120	8b 06		 mov	 eax, DWORD PTR [esi]
  00122	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00125	03 c6		 add	 eax, esi
  00127	33 c9		 xor	 ecx, ecx
  00129	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0012c	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@16:
  0012f	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@16:

; 863  : 		}
; 864  : 
; 865  : 	_Ostr.setstate(_State);

  00132	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00134	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00137	03 ce		 add	 ecx, esi
  00139	85 d2		 test	 edx, edx
  0013b	74 16		 je	 SHORT $LN125@operator@16
  0013d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00140	0b c2		 or	 eax, edx
  00142	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00146	75 03		 jne	 SHORT $LN127@operator@16
  00148	83 c8 04	 or	 eax, 4
$LN127@operator@16:
  0014b	6a 00		 push	 0
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@16:

; 866  : 	return (_Ostr);

  00153	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0015d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00162	8b c6		 mov	 eax, esi

; 867  : 	}

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
$LN9@operator@16:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00176	4b		 dec	 ebx
  00177	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  0017a	e9 21 ff ff ff	 jmp	 $LL10@operator@16
  0017f	90		 npad	 1
$LL133@operator@16:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00180	85 db		 test	 ebx, ebx
  00182	7e 9c		 jle	 SHORT $LN2@operator@16

; 855  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 856  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00184	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00186	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00189	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  0018d	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00190	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  00194	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00197	83 38 00	 cmp	 DWORD PTR [eax], 0
  0019a	74 1c		 je	 SHORT $LN68@operator@16
  0019c	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0019f	83 38 00	 cmp	 DWORD PTR [eax], 0
  001a2	7e 14		 jle	 SHORT $LN68@operator@16
  001a4	ff 08		 dec	 DWORD PTR [eax]
  001a6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ab	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  001ae	89 39		 mov	 DWORD PTR [ecx], edi
  001b0	66 89 10	 mov	 WORD PTR [eax], dx
  001b3	0f b7 c2	 movzx	 eax, dx
  001b6	eb 0e		 jmp	 SHORT $LN69@operator@16
$LN68@operator@16:
  001b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ba	52		 push	 edx
  001bb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001be	ff d2		 call	 edx
  001c0	0f b7 c0	 movzx	 eax, ax
  001c3	0f b7 c0	 movzx	 eax, ax
$LN69@operator@16:
  001c6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001cb	66 3b c8	 cmp	 cx, ax
  001ce	75 09		 jne	 SHORT $LN3@operator@16

; 857  : 					{	// insertion failed, quit
; 858  : 					_State |= ios_base::badbit;

  001d0	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 859  : 					break;

  001d4	e9 47 ff ff ff	 jmp	 $LN2@operator@16
$LN3@operator@16:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001d9	4b		 dec	 ebx
  001da	eb a4		 jmp	 SHORT $LL133@operator@16
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0:

; 862  : 		_CATCH_IO_(_Ostr)

  001dc	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001df	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e4	03 c1		 add	 eax, ecx
  001e6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e9	83 c9 04	 or	 ecx, 4
  001ec	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001f0	75 03		 jne	 SHORT $LN93@operator@16
  001f2	83 c9 04	 or	 ecx, 4
$LN93@operator@16:
  001f5	83 e1 17	 and	 ecx, 23			; 00000017H
  001f8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001fb	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001fe	75 15		 jne	 SHORT $LN102@operator@16
  00200	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00207	b8 00 00 00 00	 mov	 eax, $LN23@operator@16
  0020c	c3		 ret	 0
$LN23@operator@16:
  0020d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00210	e9 1a ff ff ff	 jmp	 $LN141@operator@16
$LN102@operator@16:
  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@16:
  0021e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocat'
	DB	'or@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF
$LN12@ContainerF:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF
$LN29@ContainerF:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@17
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@17
$LN19@operator@17:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@17
$LN15@operator@17:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@17:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@17
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@17:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	81 46 04 88 00
	00 00		 add	 DWORD PTR [esi+4], 136	; 00000088H

; 126  : 		return (*this);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 127  : 		}

  00031	c3		 ret	 0
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next
$LN21@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next
$LN17@Next:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next:
  00029	81 46 2c 88 00
	00 00		 add	 DWORD PTR [esi+44], 136	; 00000088H
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@24
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@24:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1SystemDriveConfiguration@CipherShed@@QAE@XZ	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
; Function compile flags: /Ogtpy
;	COMDAT ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SystemDriveConfiguration@CipherShed@@QAE@XZ PROC	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0000b	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00010	8d be d0 00 00
	00		 lea	 edi, DWORD PTR [esi+208]
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	33 db		 xor	 ebx, ebx
  0002a	51		 push	 ecx
  0002b	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00039	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0003e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00043	39 7e 34	 cmp	 DWORD PTR [esi+52], edi
  00046	72 0c		 jb	 SHORT $LN46@SystemDriv
  00048	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
$LN46@SystemDriv:
  00054	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  0005b	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0005e	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00061	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00064	72 0c		 jb	 SHORT $LN72@SystemDriv
  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN72@SystemDriv:
  00072	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00075	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007c	5f		 pop	 edi
  0007d	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
??1SystemDriveConfiguration@CipherShed@@QAE@XZ ENDP	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ:PROC ; CipherShed::BootEncryption::GetSystemDriveConfiguration
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffe68H
	DD	FLAT:__catch$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$0
__tryblocktable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$4
__unwindtable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?CheckGapBetweenSysAndHiddenOS@@YAHXZ
_TEXT	SEGMENT
$T164829 = -540						; size = 128
_e$132232 = -408					; size = 4
_sysDriveCfg$132228 = -404				; size = 384
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?CheckGapBetweenSysAndHiddenOS@@YAHXZ PROC		; CheckGapBetweenSysAndHiddenOS, COMDAT

; 1722 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1723 : 	try
; 1724 : 	{
; 1725 : 		SystemDriveConfiguration sysDriveCfg = BootEncObj->GetSystemDriveConfiguration();

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00037	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _sysDriveCfg$132228[ebp]
  0003d	33 f6		 xor	 esi, esi
  0003f	50		 push	 eax
  00040	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00043	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration

; 1726 : 
; 1727 : 		return (sysDriveCfg.SystemPartition.Info.StartingOffset.QuadPart 
; 1728 : 			+ sysDriveCfg.SystemPartition.Info.PartitionLength.QuadPart
; 1729 : 			+ 64 * BYTES_PER_MB
; 1730 : 			+ 128 * BYTES_PER_KB
; 1731 : 			<= BootEncObj->GetPartitionForHiddenOS().Info.StartingOffset.QuadPart);

  00048	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T164829[ebp]
  0004e	51		 push	 ecx
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00059	e8 00 00 00 00	 call	 ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
  0005e	8b 55 84	 mov	 edx, DWORD PTR _sysDriveCfg$132228[ebp+280]
  00061	03 95 7c ff ff
	ff		 add	 edx, DWORD PTR _sysDriveCfg$132228[ebp+272]
  00067	8b 4d 88	 mov	 ecx, DWORD PTR _sysDriveCfg$132228[ebp+284]
  0006a	13 4d 80	 adc	 ecx, DWORD PTR _sysDriveCfg$132228[ebp+276]
  0006d	81 c2 00 00 02
	04		 add	 edx, 67239936		; 04020000H
  00073	13 ce		 adc	 ecx, esi
  00075	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00078	7f 0c		 jg	 SHORT $LN4@CheckGapBe
  0007a	7c 05		 jl	 SHORT $LN13@CheckGapBe
  0007c	3b 50 20	 cmp	 edx, DWORD PTR [eax+32]
  0007f	77 05		 ja	 SHORT $LN4@CheckGapBe
$LN13@CheckGapBe:
  00081	be 01 00 00 00	 mov	 esi, 1
$LN4@CheckGapBe:
  00086	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T164829[ebp]
  0008c	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00091	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _sysDriveCfg$132228[ebp]
  00097	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  0009c	8b c6		 mov	 eax, esi
  0009e	eb 1a		 jmp	 SHORT $LN2@CheckGapBe
__catch$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$0:

; 1732 : 	}
; 1733 : 	catch (Exception &e)
; 1734 : 	{
; 1735 : 		e.Show (MainDlg);

  000a0	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR _e$132232[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ad	8b 12		 mov	 edx, DWORD PTR [edx]
  000af	50		 push	 eax
  000b0	ff d2		 call	 edx

; 1736 : 	}

  000b2	b8 00 00 00 00	 mov	 eax, $LN11@CheckGapBe
  000b7	c3		 ret	 0
$LN11@CheckGapBe:

; 1737 : 
; 1738 : 	return FALSE;

  000b8	33 c0		 xor	 eax, eax
$LN2@CheckGapBe:

; 1739 : }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$2:
  00000	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _sysDriveCfg$132228[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__ehhandler$?CheckGapBetweenSysAndHiddenOS@@YAHXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-544]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckGapBetweenSysAndHiddenOS@@YAHXZ ENDP		; CheckGapBetweenSysAndHiddenOS
PUBLIC	??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$0
__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$10
__ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
_TEXT	SEGMENT
$T164852 = -48						; size = 8
__Ok$ = -40						; size = 8
$T164872 = -32						; size = 4
$T164849 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T164853 = 8						; size = 8
__Val$ = 8						; size = 8
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<, COMDAT
; _this$ = ecx

; 350  : 		{	// insert a long long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 351  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 352  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 353  : 
; 354  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 79		 je	 SHORT $LN12@operator@18

; 355  : 			{	// state okay, use facet to insert
; 356  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T164849[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T164849[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 357  : 
; 358  : 			_TRY_IO_BEGIN
; 359  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 360  : 				_Myios::fill(), _Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	0f b7 51 30	 movzx	 edx, WORD PTR [ecx+48]
  0007e	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00081	89 4d e0	 mov	 DWORD PTR $T164872[ebp], ecx
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp+4]
  00087	51		 push	 ecx
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	8b 55 e0	 mov	 edx, DWORD PTR $T164872[ebp]
  00090	03 c6		 add	 eax, esi
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	88 5d d0	 mov	 BYTE PTR $T164852[ebp], bl
  00097	8b 45 d0	 mov	 eax, DWORD PTR $T164852[ebp]
  0009a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0009c	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0009f	50		 push	 eax
  000a0	8d 4d 08	 lea	 ecx, DWORD PTR $T164853[ebp]
  000a3	51		 push	 ecx
  000a4	8b cf		 mov	 ecx, edi
  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000aa	ff d2		 call	 edx
  000ac	80 7d 08 00	 cmp	 BYTE PTR $T164853[ebp], 0

; 361  : 				_State |= ios_base::badbit;

  000b0	bf 04 00 00 00	 mov	 edi, 4
  000b5	75 03		 jne	 SHORT $LN1@operator@18
  000b7	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@18:
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@18:

; 363  : 			}
; 364  : 
; 365  : 		_Myios::setstate(_State);

  000c1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c6	03 ce		 add	 ecx, esi
  000c8	85 ff		 test	 edi, edi
  000ca	74 16		 je	 SHORT $LN65@operator@18
  000cc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000cf	0b c7		 or	 eax, edi
  000d1	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d5	75 03		 jne	 SHORT $LN67@operator@18
  000d7	83 c8 04	 or	 eax, 4
$LN67@operator@18:
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@18:

; 366  : 		return (*this);

  000e2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ec	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  000f1	8b c6		 mov	 eax, esi

; 367  : 		}

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$0:

; 362  : 			_CATCH_IO_END

  00107	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c1		 add	 eax, ecx
  00111	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00114	83 c9 04	 or	 ecx, 4
  00117	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0011b	75 03		 jne	 SHORT $LN33@operator@18
  0011d	83 c9 04	 or	 ecx, 4
$LN33@operator@18:
  00120	83 e1 17	 and	 ecx, 23			; 00000017H
  00123	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00126	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00129	75 15		 jne	 SHORT $LN42@operator@18
  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00132	b8 00 00 00 00	 mov	 eax, $LN13@operator@18
  00137	c3		 ret	 0
$LN13@operator@18:
  00138	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013b	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013e	eb 81		 jmp	 SHORT $LN12@operator@18
$LN42@operator@18:
  00140	6a 00		 push	 0
  00142	6a 00		 push	 0
  00144	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@18:
  00149	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T164849[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
PUBLIC	?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T165039 = -8						; size = 8
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@4
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@4:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@4
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@4:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T165039[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
_TEXT	ENDS
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T165188 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T165188[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@6
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T165188[esp+32], 1
$LN1@basic_stri@6:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T165188[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@6
  0000c	83 65 ec fe	 and	 DWORD PTR $T165188[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri@6:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2
__ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0HostDevice@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0HostDevice@@QAE@ABU0@@Z PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@ABU0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00031	88 06		 mov	 BYTE PTR [esi], al
  00033	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00037	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0003a	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  0003e	88 56 02	 mov	 BYTE PTR [esi+2], dl
  00041	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00045	88 46 03	 mov	 BYTE PTR [esi+3], al
  00048	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0004c	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  0004f	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  00053	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00056	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  0005a	88 46 06	 mov	 BYTE PTR [esi+6], al
  0005d	33 db		 xor	 ebx, ebx
  0005f	6a ff		 push	 -1
  00061	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00064	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00067	53		 push	 ebx
  00068	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006f	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00072	50		 push	 eax
  00073	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00076	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007b	6a ff		 push	 -1
  0007d	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00080	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00083	53		 push	 ebx
  00084	33 d2		 xor	 edx, edx
  00086	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0008d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00090	50		 push	 eax
  00091	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  00095	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	6a ff		 push	 -1
  000a0	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a3	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000a6	53		 push	 ebx
  000a7	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000ae	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b1	50		 push	 eax
  000b2	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  000b7	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bf	0f b6 47 5c	 movzx	 eax, BYTE PTR [edi+92]
  000c3	88 46 5c	 mov	 BYTE PTR [esi+92], al
  000c6	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  000c9	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  000cc	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  000cf	89 56 64	 mov	 DWORD PTR [esi+100], edx
  000d2	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  000d5	83 c7 6c	 add	 edi, 108		; 0000006cH
  000d8	57		 push	 edi
  000d9	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000dc	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  000e1	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000e4	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  000e9	8b c6		 mov	 eax, esi
  000eb	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@ABU0@@Z ENDP				; HostDevice::HostDevice
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T165572 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T165572[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
$T165577 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z PROC ; std::_Construct<HostDevice,HostDevice>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T165577[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@Construct:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T165577[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ENDP ; std::_Construct<HostDevice,HostDevice>
PUBLIC	?GetSystemPartitionSize@@YA_JXZ			; GetSystemPartitionSize
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$?GetSystemPartitionSize@@YA_JXZ$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?GetSystemPartitionSize@@YA_JXZ$0
__unwindtable$?GetSystemPartitionSize@@YA_JXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetSystemPartitionSize@@YA_JXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetSystemPartitionSize@@YA_JXZ$3
__ehfuncinfo$?GetSystemPartitionSize@@YA_JXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetSystemPartitionSize@@YA_JXZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetSystemPartitionSize@@YA_JXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetSystemPartitionSize@@YA_JXZ
_TEXT	SEGMENT
$T165593 = -408						; size = 384
_e$132013 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?GetSystemPartitionSize@@YA_JXZ PROC			; GetSystemPartitionSize, COMDAT

; 1159 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSystemPartitionSize@@YA_JXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1160 : 	try
; 1161 : 	{
; 1162 : 		return BootEncObj->GetSystemDriveConfiguration().SystemPartition.Info.PartitionLength.QuadPart;

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T165593[ebp]
  0003a	50		 push	 eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00047	8b b0 18 01 00
	00		 mov	 esi, DWORD PTR [eax+280]
  0004d	8b b8 1c 01 00
	00		 mov	 edi, DWORD PTR [eax+284]
  00053	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T165593[ebp]
  00059	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  0005e	8b c6		 mov	 eax, esi
  00060	8b d7		 mov	 edx, edi

; 1168 : 	}
; 1169 : }

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
__catch$?GetSystemPartitionSize@@YA_JXZ$0:

; 1163 : 	}
; 1164 : 	catch (Exception &e)
; 1165 : 	{
; 1166 : 		e.Show (MainDlg);

  00074	8b 4d ec	 mov	 ecx, DWORD PTR _e$132013[ebp]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0007e	8b 12		 mov	 edx, DWORD PTR [edx]
  00080	50		 push	 eax
  00081	ff d2		 call	 edx

; 1167 : 		return 0;

  00083	b8 00 00 00 00	 mov	 eax, $LN8@GetSystemP
  00088	c3		 ret	 0
$LN8@GetSystemP:
  00089	33 c0		 xor	 eax, eax
  0008b	33 d2		 xor	 edx, edx

; 1168 : 	}
; 1169 : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetSystemPartitionSize@@YA_JXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 64 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-412]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSystemPartitionSize@@YA_JXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSystemPartitionSize@@YA_JXZ ENDP			; GetSystemPartitionSize
PUBLIC	??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@	; `string'
PUBLIC	??_C@_0L@EDOIAICP@isoburning?$AA@		; `string'
PUBLIC	??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@	; `string'
PUBLIC	??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@	; `string'
PUBLIC	??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ ; `string'
PUBLIC	??_C@_06OACPEFAM@Floppy?$AA@			; `string'
PUBLIC	??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@		; `string'
PUBLIC	??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ ; `string'
PUBLIC	??_C@_0P@BELAJGNG@hashalgorithms?$AA@		; `string'
PUBLIC	??_C@_08GJKBFMAA@cascades?$AA@			; `string'
PUBLIC	??_C@_07MJGFOBBE@twofish?$AA@			; `string'
PUBLIC	??_C@_07NLFGMEEL@serpent?$AA@			; `string'
PUBLIC	??_C@_03BHCPJDHL@aes?$AA@			; `string'
PUBLIC	??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@		; `string'
PUBLIC	??_C@_0N@NEKIIEOI@hiddenvolume?$AA@		; `string'
PUBLIC	??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@	; `string'
PUBLIC	??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@ ; `string'
PUBLIC	??_C@_0N@LFKKAENK@hiddensysenc?$AA@		; `string'
PUBLIC	??_C@_0M@FEPBHLEO@introsysenc?$AA@		; `string'
PUBLIC	??_C@_0P@JBBMPDEB@introcontainer?$AA@		; `string'
PUBLIC	??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_04LEEAJJHO@WIPE?$AA@			; `string'
PUBLIC	??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@	; `string'
PUBLIC	??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@ ; `string'
PUBLIC	??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@		; `string'
PUBLIC	??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@ ; `string'
PUBLIC	??_C@_0BE@BGBILLEP@PageDialogProc?34535?$AA@	; `string'
PUBLIC	??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@ ; `string'
PUBLIC	??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@	; `string'
PUBLIC	??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@ ; `string'
PUBLIC	??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@ ; `string'
PUBLIC	??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_06DPGELLJH@FORMAT?$AA@			; `string'
PUBLIC	??_C@_03JMFMNIFM@?9?9?9?$AA@			; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE?$AA@			; `string'
PUBLIC	??_C@_02LODOGJEL@KB?$AA@			; `string'
PUBLIC	??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@	; `string'
PUBLIC	??_C@_07MGCPDNLD@DEFAULT?$AA@			; `string'
PUBLIC	??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@		; `string'
PUBLIC	??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@		; `string'
PUBLIC	??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@		; `string'
PUBLIC	??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@	; `string'
PUBLIC	??_C@_08MFKGCNCO@FINALIZE?$AA@			; `string'
PUBLIC	??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@ ; `string'
PUBLIC	??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@ ; `string'
PUBLIC	??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@ ; `string'
PUBLIC	??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0L@POBGFBLK@DECRYPTION?$AA@		; `string'
PUBLIC	??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@		; `string'
PUBLIC	??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@ ; `string'
PUBLIC	??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@ ; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST?$AA@			; `string'
PUBLIC	??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@ ; `string'
PUBLIC	??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_05JLPDBANI@START?$AA@			; `string'
PUBLIC	??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@ ; `string'
PUBLIC	??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@	; `string'
PUBLIC	??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@	; `string'
PUBLIC	??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@ ; `string'
PUBLIC	??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@ ; `string'
PUBLIC	??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@	; `string'
PUBLIC	??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@		; `string'
PUBLIC	??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@ ; `string'
PUBLIC	??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@ ; `string'
PUBLIC	??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@		; `string'
PUBLIC	??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@ ; `string'
PUBLIC	??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@		; `string'
PUBLIC	??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@	; `string'
PUBLIC	??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@ ; `string'
PUBLIC	??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@ ; `string'
PUBLIC	??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@	; `string'
PUBLIC	??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ ; `string'
PUBLIC	??_C@_08OKJEGFFL@00000409?$AA@			; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X?$AA@			; `string'
PUBLIC	??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_08KENNMKEI@PASSWORD?$AA@			; `string'
PUBLIC	??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@ ; `string'
PUBLIC	??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@ ; `string'
PUBLIC	??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@	; `string'
PUBLIC	??_C@_05OINFJHGD@?$CFI64u?$AA@			; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@	; `string'
PUBLIC	??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@ ; `string'
PUBLIC	??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@ ; `string'
PUBLIC	??_C@_09BEBIICBL@SIZE_HELP?$AA@			; `string'
PUBLIC	??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@	; `string'
PUBLIC	??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@	; `string'
PUBLIC	??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@ ; `string'
PUBLIC	??_C@_04GOLNGIJ@EXIT?$AA@			; `string'
PUBLIC	??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@ ; `string'
PUBLIC	??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@	; `string'
PUBLIC	??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@		; `string'
PUBLIC	??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@ ; `string'
PUBLIC	??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@ ; `string'
PUBLIC	??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@ ; `string'
PUBLIC	??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@ ; `string'
PUBLIC	??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@		; `string'
PUBLIC	??_C@_09GPELPABL@FILE_HELP?$AA@			; `string'
PUBLIC	??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@		; `string'
PUBLIC	??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@ ; `string'
PUBLIC	??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@		; `string'
PUBLIC	??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@	; `string'
PUBLIC	??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@ ; `string'
PUBLIC	??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@ ; `string'
PUBLIC	??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ ; `string'
PUBLIC	??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ ; `string'
PUBLIC	??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@ ; `string'
PUBLIC	??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@ ; `string'
PUBLIC	??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ ; `string'
PUBLIC	??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ ; `string'
PUBLIC	??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@		; `string'
PUBLIC	??_C@_09BCPPDPEL@DIGIT_ONE?$AA@			; `string'
PUBLIC	??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@ ; `string'
PUBLIC	??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@ ; `string'
PUBLIC	??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@ ; `string'
PUBLIC	??_C@_08HBBNJJLH@IDC_EXIT?$AA@			; `string'
PUBLIC	??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@ ; `string'
PUBLIC	??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@ ; `string'
PUBLIC	??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@ ; `string'
PUBLIC	??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@ ; `string'
PUBLIC	??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@ ; `string'
PUBLIC	??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ ; `string'
PUBLIC	??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ ; `string'
PUBLIC	??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@		; `string'
PUBLIC	??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_PageDialogProc@16
EXTRN	_ClearHistory:PROC
EXTRN	_AskWarnNoYes:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	_AskWarnYesNo:PROC
EXTRN	_RawDevicesDlgProc@16:PROC
EXTRN	_BrowseFiles:PROC
EXTRN	_KeyFilesDlgProc@16:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	_GetCheckBox:PROC
EXTRN	_UpdateComboOrder:PROC
EXTRN	_bRandmixEnabled:DWORD
EXTRN	_bFastPollEnabled:DWORD
EXTRN	_BenchmarkDlgProc@16:PROC
EXTRN	_CipherTestDialogProc@16:PROC
EXTRN	_OpenVolumeExplorerWindow:PROC
EXTRN	_GetDeviceSize:PROC
EXTRN	_Applink:PROC
EXTRN	_OpenPageHelp:PROC
EXTRN	_GetWipeModeName:PROC
EXTRN	_ReportUnexpectedState:PROC
EXTRN	_AddComboPairW:PROC
EXTRN	_PopulateWipeModeCombo:PROC
EXTRN	_LaunchWindowsIsoBurner:PROC
EXTRN	_IsWindowsIsoBurnerAvailable:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	_hFixedDigitFont:DWORD
EXTRN	_VerifyPasswordAndUpdate:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__LoadKeyboardLayoutA@8:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	_ToBootPwdField:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_KeyFilesEnable:DWORD
EXTRN	_hBoldFont:DWORD
EXTRN	_wcsncpy:PROC
EXTRN	_HashGetName:PROC
EXTRN	_HashIsDeprecated:PROC
EXTRN	_RandGetHashFunction:PROC
EXTRN	_RandSetHashFunction:PROC
EXTRN	_SelectAlgo:PROC
EXTRN	_EAGetNext:PROC
EXTRN	_AddComboPair:PROC
EXTRN	_EAIsFormatEnabled:PROC
EXTRN	_EAGetFirst:PROC
EXTRN	_FileSystemAppearsEmpty:PROC
EXTRN	_CheckRequirementsForNonSysInPlaceEnc:PROC
EXTRN	_AddComboItem:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_CheckButton:PROC
EXTRN	_ToHyperlink:PROC
EXTRN	_hUserBoldFont:DWORD
EXTRN	_LocalizeDialog:PROC
;	COMDAT ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
_BSS	SEGMENT
?PageDebugId@?1??PageDialogProc@@9@16@4PADA DB 080H DUP (?) ; `PageDialogProc'::`2'::PageDebugId
_BSS	ENDS
;	COMDAT ??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@
CONST	SEGMENT
??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@ DB 'CONFIRM_WIPE_ABORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDOIAICP@isoburning?$AA@
CONST	SEGMENT
??_C@_0L@EDOIAICP@isoburning?$AA@ DB 'isoburning', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'                                                             '
	DB	'                ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@
CONST	SEGMENT
??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@ DB 'WARN_QUICK_FORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@
CONST	SEGMENT
??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@ DB 'CONFIRM_SPARSE_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
CONST	SEGMENT
??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ DB 'ALGO_NOT_SUPPORTE'
	DB	'D_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OACPEFAM@Floppy?$AA@
CONST	SEGMENT
??_C@_06OACPEFAM@Floppy?$AA@ DB 'Floppy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@ DB 'OPEN_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
CONST	SEGMENT
??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ DB 'KEYFILES_NOT_SUP'
	DB	'PORTED_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BELAJGNG@hashalgorithms?$AA@
CONST	SEGMENT
??_C@_0P@BELAJGNG@hashalgorithms?$AA@ DB 'hashalgorithms', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GJKBFMAA@cascades?$AA@
CONST	SEGMENT
??_C@_08GJKBFMAA@cascades?$AA@ DB 'cascades', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJGFOBBE@twofish?$AA@
CONST	SEGMENT
??_C@_07MJGFOBBE@twofish?$AA@ DB 'twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLFGMEEL@serpent?$AA@
CONST	SEGMENT
??_C@_07NLFGMEEL@serpent?$AA@ DB 'serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHCPJDHL@aes?$AA@
CONST	SEGMENT
??_C@_03BHCPJDHL@aes?$AA@ DB 'aes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
CONST	SEGMENT
??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@ DB 'FORMAT_ABORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEKIIEOI@hiddenvolume?$AA@
CONST	SEGMENT
??_C@_0N@NEKIIEOI@hiddenvolume?$AA@ DB 'hiddenvolume', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@
CONST	SEGMENT
??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@ DB 'sysencprogressinfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@
CONST	SEGMENT
??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@ DB 'FILESYS_PAGE_HEL'
	DB	'P_EXPLANATION_HIDVOL_CONFIRM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
CONST	SEGMENT
??_C@_0N@LFKKAENK@hiddensysenc?$AA@ DB 'hiddensysenc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEPBHLEO@introsysenc?$AA@
CONST	SEGMENT
??_C@_0M@FEPBHLEO@introsysenc?$AA@ DB 'introsysenc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JBBMPDEB@introcontainer?$AA@
CONST	SEGMENT
??_C@_0P@JBBMPDEB@introcontainer?$AA@ DB 'introcontainer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@ DB ' ', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEEAJJHO@WIPE?$AA@
CONST	SEGMENT
??_C@_04LEEAJJHO@WIPE?$AA@ DB 'WIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@ DB 'DEVICE_WIPE_PAGE_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@
CONST	SEGMENT
??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@ DB 'DEVICE_WIPE_PAGE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@
CONST	SEGMENT
??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@ DB 'DEVICE_WIPE_P'
	DB	'AGE_INFO_HIDDEN_OS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@ DB 'WIPE_MODE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@ DB 'SYSENC_HIDDEN_OS_W'
	DB	'IPE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@
CONST	SEGMENT
??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@ DB 'SYSENC_HIDDEN_OS'
	DB	'_WIPE_INFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BGBILLEP@PageDialogProc?34535?$AA@
CONST	SEGMENT
??_C@_0BE@BGBILLEP@PageDialogProc?34535?$AA@ DB 'PageDialogProc:4535', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@
CONST	SEGMENT
??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@ DB 'FIRST_HIDDEN_OS_BOO'
	DB	'T_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@
CONST	SEGMENT
??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@ DB 'SYSENC_HIDDEN_OS'
	DB	'_INITIAL_INFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@ DB 'FORMAT_FINISHED_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@ DB 'HIDVOL_FORMAT_FI'
	DB	'NISHED_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@
CONST	SEGMENT
??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@ DB 'FORMAT_FINISHED_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@
CONST	SEGMENT
??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@ DB 'SYSENC_HIDDEN_VO'
	DB	'L_FORMAT_FINISHED_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@ DB 'HIDVOL_HOST_FILLING'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@
CONST	SEGMENT
??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@ DB 'HIDVOL_HOST_FILLING_'
	DB	'HELP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@
CONST	SEGMENT
??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@ DB 'HIDVOL_HOST_F'
	DB	'ILLING_HELP_SYSENC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPGELLJH@FORMAT?$AA@
CONST	SEGMENT
??_C@_06DPGELLJH@FORMAT?$AA@ DB 'FORMAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMFMNIFM@?9?9?9?$AA@
CONST	SEGMENT
??_C@_03JMFMNIFM@?9?9?9?$AA@ DB '---', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE?$AA@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE?$AA@ DB 'NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LODOGJEL@KB?$AA@
CONST	SEGMENT
??_C@_02LODOGJEL@KB?$AA@ DB 'KB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@
CONST	SEGMENT
??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@ DB '0', 00H, '.', 00H, '5', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGCPDNLD@DEFAULT?$AA@
CONST	SEGMENT
??_C@_07MGCPDNLD@DEFAULT?$AA@ DB 'DEFAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*******************************                              '
	DB	'                ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
CONST	SEGMENT
??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@ DB 'IDC_QUICKFORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
CONST	SEGMENT
??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@ DB 'SPARSE_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@
CONST	SEGMENT
??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@ DB 'FORMAT_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@ DB 'FORMAT_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@ DB 'FORMAT_HIDVOL_HOST_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@
CONST	SEGMENT
??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@ DB 'FORMAT_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@ DB 'FORMAT_HIDVOL_HOST_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFKGCNCO@FINALIZE?$AA@
CONST	SEGMENT
??_C@_08MFKGCNCO@FINALIZE?$AA@ DB 'FINALIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@
CONST	SEGMENT
??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@ DB 'NONSYS_INPLACE_E'
	DB	'NC_FINISHED_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@
CONST	SEGMENT
??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@ DB 'NONSYS_INPLACE_E'
	DB	'NC_ENCRYPTION_PAGE_INFO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@
CONST	SEGMENT
??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@ DB 'NONSYS_INPLACE_E'
	DB	'NC_RESUME_VOL_SELECT_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@
CONST	SEGMENT
??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@ DB 'SYSENC_ENCRYPTION'
	DB	'_PAGE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POBGFBLK@DECRYPTION?$AA@
CONST	SEGMENT
??_C@_0L@POBGFBLK@DECRYPTION?$AA@ DB 'DECRYPTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
CONST	SEGMENT
??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@ DB 'ENCRYPTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@
CONST	SEGMENT
??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_RESULT_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@
CONST	SEGMENT
??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_RESULT_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST?$AA@ DB 'TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@
CONST	SEGMENT
??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@ DB 'SYS_ENCRYPTION_PR'
	DB	'ETEST_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLPDBANI@START?$AA@
CONST	SEGMENT
??_C@_05JLPDBANI@START?$AA@ DB 'START', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@
CONST	SEGMENT
??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@ DB 'HIDDEN_OS_CRE'
	DB	'ATION_PREINFO_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@
CONST	SEGMENT
??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_PREINFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@ DB 'INPLACE_ENC_WIPE_M'
	DB	'ODE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@ DB 'WIPE_MODE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@
CONST	SEGMENT
??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@ DB 'RESCUE_DISK_VERIFIE'
	DB	'D_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@ DB 'RESCUE_DISK_D'
	DB	'ISK_VERIFIED_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@
CONST	SEGMENT
??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@ DB 'LAUNCH_WIN_ISOBURN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@
CONST	SEGMENT
??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@ DB 'RESCUE_DISK_BURN_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@
CONST	SEGMENT
??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@ DB 'RESCUE_DISK_BU'
	DB	'RN_INFO_NO_CHECK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@
CONST	SEGMENT
??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@ DB 'RESCUE_DISK_BURN'
	DB	'_INFO_NONWIN_ISO_BURNER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@
CONST	SEGMENT
??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@ DB 'RESCUE_DISK_RECOR'
	DB	'DING_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@ DB 'RESCUE_DISK_CREATED'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@
CONST	SEGMENT
??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@ DB 'RESCUE_DISK_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@
CONST	SEGMENT
??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@ DB 'RESCUE_DISK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@
CONST	SEGMENT
??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@ DB 'KEYS_GEN_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@ DB 'COLLECTING_RANDO'
	DB	'M_DATA_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
CONST	SEGMENT
??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@ DB 'FILESYS_PAGE_HEL'
	DB	'P_EXPLANATION_HIDVOL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@
CONST	SEGMENT
??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@ DB 'FILESYS_PAGE_HE'
	DB	'LP_EXPLANATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
CONST	SEGMENT
??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@ DB 'NOTE_BEGINNING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@
CONST	SEGMENT
??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@ DB 'FILESYS_PAGE_HELP_Q'
	DB	'UESTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@ DB 'FILESYS_PAGE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@
CONST	SEGMENT
??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@ DB 'PASSWORD_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@ DB 'PASSWORD_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@ DB 'PASSWORD_HIDDEN_OS_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
CONST	SEGMENT
??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@ DB 'PASSWORD_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@ DB 'PASSWORD_HIDDENVOL_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@ DB 'PASSWORD_HIDDEN_OS_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@
CONST	SEGMENT
??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@ DB 'PASSWORD_HIDDENV'
	DB	'OL_HOST_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@ DB 'PASSWORD_SYSENC'
	DB	'_OUTERVOL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@
CONST	SEGMENT
??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@ DB 'CANNOT_SET_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
CONST	SEGMENT
??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ DB 'CANT_CHANGE_KEYB'
	DB	'_LAYOUT_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OKJEGFFL@00000409?$AA@
CONST	SEGMENT
??_C@_08OKJEGFFL@00000409?$AA@ DB '00000409', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X?$AA@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@ DB 'PASSWORD_HIDVOL_HO'
	DB	'ST_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08KENNMKEI@PASSWORD?$AA@
CONST	SEGMENT
??_C@_08KENNMKEI@PASSWORD?$AA@ DB 'PASSWORD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@
CONST	SEGMENT
??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@ DB 'PASSWORD_HIDDENV'
	DB	'OL_HOST_DIRECT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@
CONST	SEGMENT
??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@ DB 'NONSYS_INPLACE_E'
	DB	'NC_RESUME_PASSWORD_PAGE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@ DB 'SIZE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@ DB 'SIZE_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@ DB 'SIZE_HIDVOL_HOST_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05OINFJHGD@?$CFI64u?$AA@
CONST	SEGMENT
??_C@_05OINFJHGD@?$CFI64u?$AA@ DB '%I64u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN?$AA@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN?$AA@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@
CONST	SEGMENT
??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@ DB 'SIZE_PARTITION_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@
CONST	SEGMENT
??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@ DB 'SIZE_PARTITION_H'
	DB	'IDDEN_SYSENC_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@ DB 'SIZE_PARTITION'
	DB	'_HIDDEN_VOL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEBIICBL@SIZE_HELP?$AA@
CONST	SEGMENT
??_C@_09BEBIICBL@SIZE_HELP?$AA@ DB 'SIZE_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@
CONST	SEGMENT
??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@ DB 'SIZE_HELP_HIDDEN_VOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'SIZE_HELP_HIDDEN_HO'
	DB	'ST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@ DB 'CIPHER_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@ DB 'CIPHER_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@ DB 'CIPHER_HIDVOL_HOST_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@ DB 'HIDVOL_PRE_CIPHER_HELP'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@ DB 'HIDDEN_OS_PRE_CIPHE'
	DB	'R_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOLNGIJ@EXIT?$AA@
CONST	SEGMENT
??_C@_04GOLNGIJ@EXIT?$AA@ DB 'EXIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@
CONST	SEGMENT
??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@ DB 'HIDDEN_VOLUME_TO'
	DB	'O_SMALL_FOR_OS_CLONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@ DB 'HIDVOL_PRE_CIPHER_TIT'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
CONST	SEGMENT
??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@ DB 'INVALID_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@ DB 'HIDVOL_HOST_PRE_C'
	DB	'IPHER_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@
CONST	SEGMENT
??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@ DB 'HIDVOL_HOST_PRE_'
	DB	'CIPHER_HELP_SYSENC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@ DB 'HIDVOL_HOST_PRE_'
	DB	'CIPHER_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@
CONST	SEGMENT
??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@ DB 'DEVICE_TRANSFORM'
	DB	'_MODE_PAGE_INPLACE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@
CONST	SEGMENT
??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@ DB 'DEVICE_TRANSFORM'
	DB	'_MODE_PAGE_FORMAT_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@
CONST	SEGMENT
??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@ DB 'DEVICE_TRANSFORM_'
	DB	'MODE_PAGE_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@ DB 'FILE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPELPABL@FILE_HELP?$AA@
CONST	SEGMENT
??_C@_09GPELPABL@FILE_HELP?$AA@ DB 'FILE_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'FILE_HELP_HIDDEN_HO'
	DB	'ST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@
CONST	SEGMENT
??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@ DB 'DEVICE_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'DEVICE_HELP_HIDDE'
	DB	'N_HOST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@
CONST	SEGMENT
??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@ DB 'FILE_HELP_HIDDEN'
	DB	'_HOST_VOL_DIRECT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@
CONST	SEGMENT
??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@ DB 'IDC_SELECT_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@
CONST	SEGMENT
??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@ DB 'IDC_SELECT_DEVICE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@
CONST	SEGMENT
??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_DIRECT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@
CONST	SEGMENT
??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_NORMAL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@ DB 'NORMAL_VOLUME_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@ DB 'HIDDEN_VOLUME_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@ DB 'VOLUME_TYPE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@ DB 'SYSENC_MULTI_'
	DB	'BOOT_OUTCOME_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
CONST	SEGMENT
??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NONWIN_BOOT_LOADER_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
CONST	SEGMENT
??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NONWIN_BOOT_LOADER_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@
CONST	SEGMENT
??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@ DB 'SYSENC_MULTI_BOO'
	DB	'T_ADJACENT_SYS_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@
CONST	SEGMENT
??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@ DB 'SYSENC_MULTI_BOOT'
	DB	'_ADJACENT_SYS_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
CONST	SEGMENT
??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NBR_SYS_DRIVES_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
CONST	SEGMENT
??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NBR_SYS_DRIVES_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@
CONST	SEGMENT
??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@ DB 'TWO_OR_MORE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCPPDPEL@DIGIT_ONE?$AA@
CONST	SEGMENT
??_C@_09BCPPDPEL@DIGIT_ONE?$AA@ DB 'DIGIT_ONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@
CONST	SEGMENT
??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@ DB 'SYSENC_MULTI_BOOT'
	DB	'_SYS_EQ_BOOT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@
CONST	SEGMENT
??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@ DB 'SYSENC_MULTI_BOO'
	DB	'T_SYS_EQ_BOOT_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@ DB 'SYS_MULTI_BOOT_MODE'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBBNJJLH@IDC_EXIT?$AA@
CONST	SEGMENT
??_C@_08HBBNJJLH@IDC_EXIT?$AA@ DB 'IDC_EXIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@
CONST	SEGMENT
??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@ DB 'RETRY_HIDDEN_SE'
	DB	'CTOR_DETECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@
CONST	SEGMENT
??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@ DB 'SKIP_HIDDEN_SECT'
	DB	'OR_DETECTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@
CONST	SEGMENT
??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@ DB 'HIDDEN_SECTOR_DE'
	DB	'TECTION_FAILED_PREVIOUSLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@ DB 'SYSENC_DRIVE_ANALY'
	DB	'SIS_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@ DB 'SYSENC_DRIVE_ANAL'
	DB	'YSIS_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@
CONST	SEGMENT
??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@ DB 'SYSENC_PRE_DRI'
	DB	'VE_ANALYSIS_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@ DB 'SYSENC_PRE_DR'
	DB	'IVE_ANALYSIS_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@
CONST	SEGMENT
??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@ DB 'SYS_ENCRYPTION_S'
	DB	'PAN_WHOLE_SYS_DRIVE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@ DB 'SYS_ENCRYPTION_SPAN'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
CONST	SEGMENT
??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ DB 'SYSENC_HIDDEN_OS'
	DB	'_REQ_CHECK_PAGE_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
CONST	SEGMENT
??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ DB 'SYSENC_HIDDEN_OS'
	DB	'_REQ_CHECK_PAGE_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@ DB 'SYSENC_NORMAL_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@ DB 'SYSENC_HIDDEN_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@ DB 'SYSENC_TYPE_PAGE_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@
CONST	SEGMENT
??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@ DB 'INTRO_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@ DB 'FORMAT_PAGE_%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
CONST	SEGMENT
??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@ DB 'IDD_VOL_CREATION_'
	DB	'WIZARD_DLG', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_PageDialogProc@16$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa4H
	DD	FLAT:__catch$_PageDialogProc@16$4
__catchsym$_PageDialogProc@16$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$_PageDialogProc@16$2
__catchsym$_PageDialogProc@16$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa8H
	DD	FLAT:__catch$_PageDialogProc@16$0
__ehfuncinfo$_PageDialogProc@16 DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$_PageDialogProc@16
	DD	03H
	DD	FLAT:__tryblocktable$_PageDialogProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_PageDialogProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$13
	DD	07H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$14
__unwindtable$_PageDialogProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$10
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT _PageDialogProc@16
_TEXT	SEGMENT
$T165654 = -980						; size = 384
$T165705 = -596						; size = 94
$T165656 = -502						; size = 94
_s$133703 = -408					; size = 136
$T165692 = -272						; size = 28
$T165702 = -244						; size = 28
$T165703 = -216						; size = 28
_locBootEncStatus$133862 = -188				; size = 94
_$S1$133476 = -144					; size = 48
_e$133872 = -92						; size = 4
_e$133318 = -88						; size = 4
_e$133328 = -84						; size = 4
_tmpStr$133075 = -80					; size = 24
_tmpbDevice$133886 = -56				; size = 4
_param$133958 = -52					; size = 8
_savedWipeAlgorithm$133513 = -44			; size = 4
_fileSystemFlags$133544 = -40				; size = 4
_bFATallowed$133522 = -36				; size = 4
tv6454 = -32						; size = 8
_dataAreaSize$133741 = -32				; size = 8
tv5015 = -24						; size = 4
tv4736 = -24						; size = 4
_hw$ = -24						; size = 2
_bNoFSallowed$133523 = -24				; size = 4
_device$133480 = -24					; size = 4
_hwndDlg$GSCopy$ = -20					; size = 4
_bNTFSallowed$133521 = -20				; size = 4
_nID$133131 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_finalMsg$133313 = 0					; size = 16048
_msg$133763 = 16048					; size = 8192
_szTmp$133266 = 24240					; size = 16384
_szTmp$133856 = 40624					; size = 8192
_szTmp$133290 = 48816					; size = 16384
_str$133191 = 65200					; size = 2000
_str$133232 = 67200					; size = 2000
_tmpszRescueDiskISO$134032 = 69200			; size = 261
_root$133543 = 69464					; size = 260
_buf$133174 = 69724					; size = 100
_szMaxRecomOuterVolFillSize$133765 = 69824		; size = 200
_name$133928 = 70024					; size = 100
_szTmp$133219 = 70124					; size = 32
__$ArrayPad$ = 70156					; size = 4
_hwndDlg$ = 70168					; size = 4
_uMsg$ = 70172						; size = 4
_wParam$ = 70176					; size = 4
_lParam$ = 70180					; size = 4
_PageDialogProc@16 PROC					; COMDAT

; 3294 : {

  00000	55		 push	 ebp
  00001	8d ac 24 f0 ed
	fe ff		 lea	 ebp, DWORD PTR [esp-70160]
  00008	b8 10 12 01 00	 mov	 eax, 70160		; 00011210H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_PageDialogProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	81 ec c8 03 00
	00		 sub	 esp, 968		; 000003c8H
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 85 0c 12 01
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 3295 : 	static char PageDebugId[128];
; 3296 : 	WORD lw = LOWORD (wParam);
; 3297 : 	WORD hw = HIWORD (wParam);

  00043	8b bd 20 12 01
	00		 mov	 edi, DWORD PTR _wParam$[ebp]
  00049	8b 9d 18 12 01
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]

; 3298 : 
; 3299 : 	hCurPage = hwndDlg;
; 3300 : 
; 3301 : 	switch (uMsg)

  0004f	8b 85 1c 12 01
	00		 mov	 eax, DWORD PTR _uMsg$[ebp]
  00055	8b b5 24 12 01
	00		 mov	 esi, DWORD PTR _lParam$[ebp]
  0005b	8b d7		 mov	 edx, edi
  0005d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00060	89 5d ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00063	89 55 e8	 mov	 DWORD PTR _hw$[ebp], edx
  00066	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
  0006c	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  00071	0f 87 e3 50 00
	00		 ja	 $LN432@PageDialog
  00077	0f 84 e2 3a 00
	00		 je	 $LN155@PageDialog
  0007d	83 f8 53	 cmp	 eax, 83			; 00000053H
  00080	0f 84 bd 3a 00
	00		 je	 $LN157@PageDialog
  00086	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0008b	0f 85 af 06 00
	00		 jne	 $LN446@PageDialog

; 3302 : 	{
; 3303 : 	case WM_INITDIALOG:
; 3304 : 		LocalizeDialog (hwndDlg, "IDD_VOL_CREATION_WIZARD_DLG");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  00096	53		 push	 ebx
  00097	e8 00 00 00 00	 call	 _LocalizeDialog

; 3305 : 
; 3306 : 		sprintf (PageDebugId, "FORMAT_PAGE_%d", nCurPageNo);

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@
  000a7	68 00 00 00 00	 push	 OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  000ac	e8 00 00 00 00	 call	 _sprintf

; 3307 : 		LastDialogId = PageDebugId;
; 3308 : 
; 3309 : 		switch (nCurPageNo)

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000b6	83 c4 14	 add	 esp, 20			; 00000014H
  000b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  000c3	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  000c6	0f 87 60 29 00
	00		 ja	 $LN328@PageDialog
  000cc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN715@PageDialog[eax*4]
$LN327@PageDialog:

; 3310 : 		{
; 3311 : 		case INTRO_PAGE:
; 3312 : 
; 3313 : 			SendMessage (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  000d9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000df	6a 01		 push	 1
  000e1	51		 push	 ecx
  000e2	6a 30		 push	 48			; 00000030H
  000e4	68 25 04 00 00	 push	 1061			; 00000425H
  000e9	53		 push	 ebx
  000ea	ff d6		 call	 esi
  000ec	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  000f2	50		 push	 eax
  000f3	ff d7		 call	 edi

; 3314 : 			SendMessage (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  000f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  000fb	6a 01		 push	 1
  000fd	52		 push	 edx
  000fe	6a 30		 push	 48			; 00000030H
  00100	68 26 04 00 00	 push	 1062			; 00000426H
  00105	53		 push	 ebx
  00106	ff d6		 call	 esi
  00108	50		 push	 eax
  00109	ff d7		 call	 edi

; 3315 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_DEVICE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00110	6a 01		 push	 1
  00112	50		 push	 eax
  00113	6a 30		 push	 48			; 00000030H
  00115	68 27 04 00 00	 push	 1063			; 00000427H
  0011a	53		 push	 ebx
  0011b	ff d6		 call	 esi
  0011d	50		 push	 eax
  0011e	ff d7		 call	 edi

; 3316 : 
; 3317 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("INTRO_TITLE"));

  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@
  00125	e8 00 00 00 00	 call	 _GetString
  0012a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00130	83 c4 04	 add	 esp, 4
  00133	50		 push	 eax
  00134	68 e8 03 00 00	 push	 1000			; 000003e8H
  00139	53		 push	 ebx
  0013a	ff d7		 call	 edi
  0013c	50		 push	 eax
  0013d	ff d6		 call	 esi
  0013f	50		 push	 eax
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3318 : 
; 3319 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_CONTAINERS);

  00146	68 33 04 00 00	 push	 1075			; 00000433H
  0014b	53		 push	 ebx
  0014c	e8 00 00 00 00	 call	 _ToHyperlink

; 3320 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_SYS_ENCRYPTION);

  00151	68 31 04 00 00	 push	 1073			; 00000431H
  00156	53		 push	 ebx
  00157	e8 00 00 00 00	 call	 _ToHyperlink
  0015c	83 c4 10	 add	 esp, 16			; 00000010H

; 3321 : 
; 3322 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_STD_VOL), TRUE);

  0015f	6a 01		 push	 1
  00161	68 07 04 00 00	 push	 1031			; 00000407H
  00166	53		 push	 ebx
  00167	ff d6		 call	 esi
  00169	50		 push	 eax
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3323 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDDEN_VOL), TRUE);

  00170	6a 01		 push	 1
  00172	68 08 04 00 00	 push	 1032			; 00000408H
  00177	53		 push	 ebx
  00178	ff d6		 call	 esi
  0017a	50		 push	 eax
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3324 : 
; 3325 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00181	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00186	e8 00 00 00 00	 call	 _GetString
  0018b	83 c4 04	 add	 esp, 4
  0018e	50		 push	 eax
  0018f	68 10 04 00 00	 push	 1040			; 00000410H
  00194	53		 push	 ebx
  00195	ff d7		 call	 edi
  00197	50		 push	 eax
  00198	ff d6		 call	 esi
  0019a	50		 push	 eax
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3326 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  001a6	e8 00 00 00 00	 call	 _GetString
  001ab	83 c4 04	 add	 esp, 4
  001ae	50		 push	 eax
  001af	68 11 04 00 00	 push	 1041			; 00000411H
  001b4	53		 push	 ebx
  001b5	ff d7		 call	 edi
  001b7	50		 push	 eax
  001b8	ff d6		 call	 esi
  001ba	50		 push	 eax
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3327 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  001c1	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  001c6	e8 00 00 00 00	 call	 _GetString
  001cb	83 c4 04	 add	 esp, 4
  001ce	50		 push	 eax
  001cf	6a 02		 push	 2
  001d1	53		 push	 ebx
  001d2	ff d7		 call	 edi
  001d4	50		 push	 eax
  001d5	ff d6		 call	 esi
  001d7	50		 push	 eax
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3328 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  001de	6a 01		 push	 1
  001e0	68 10 04 00 00	 push	 1040			; 00000410H
  001e5	53		 push	 ebx
  001e6	ff d7		 call	 edi
  001e8	50		 push	 eax
  001e9	ff d6		 call	 esi
  001eb	50		 push	 eax
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3329 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  001f2	6a 00		 push	 0
  001f4	68 11 04 00 00	 push	 1041			; 00000411H
  001f9	53		 push	 ebx
  001fa	ff d7		 call	 edi
  001fc	50		 push	 eax
  001fd	ff d6		 call	 esi
  001ff	50		 push	 eax
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3330 : 
; 3331 : 			UpdateWizardModeControls (hwndDlg, WizardMode);

  00206	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _WizardMode
  0020c	8b fb		 mov	 edi, ebx
  0020e	e8 00 00 00 00	 call	 ?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z ; UpdateWizardModeControls

; 4230 : 				return 0;

  00213	33 c0		 xor	 eax, eax
  00215	e9 59 4f 00 00	 jmp	 $LN333@PageDialog
$LN326@PageDialog:

; 3332 : 			break;
; 3333 : 
; 3334 : 		case SYSENC_TYPE_PAGE:
; 3335 : 
; 3336 : 			bHiddenVolHost = bHiddenVol = bHiddenOS;

  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00220	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, ecx ; bHiddenVol
  00226	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0022c	89 15 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, edx

; 3337 : 
; 3338 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_TYPE_PAGE_TITLE"));

  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@
  00237	e8 00 00 00 00	 call	 _GetString
  0023c	83 c4 04	 add	 esp, 4
  0023f	50		 push	 eax
  00240	68 e8 03 00 00	 push	 1000			; 000003e8H
  00245	53		 push	 ebx
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0024c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00252	50		 push	 eax
  00253	ff d6		 call	 esi
  00255	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0025b	50		 push	 eax
  0025c	ff d7		 call	 edi

; 3339 : 
; 3340 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYSENC_HIDDEN), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00263	6a 01		 push	 1
  00265	50		 push	 eax
  00266	6a 30		 push	 48			; 00000030H
  00268	68 49 04 00 00	 push	 1097			; 00000449H
  0026d	53		 push	 ebx
  0026e	ff d6		 call	 esi
  00270	50		 push	 eax
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3341 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYSENC_NORMAL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  0027d	6a 01		 push	 1
  0027f	51		 push	 ecx
  00280	6a 30		 push	 48			; 00000030H
  00282	68 48 04 00 00	 push	 1096			; 00000448H
  00287	53		 push	 ebx
  00288	ff d6		 call	 esi
  0028a	50		 push	 eax
  0028b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3342 : 
; 3343 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenOS ? IDC_SYSENC_HIDDEN : IDC_SYSENC_NORMAL));

  00291	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00297	f7 da		 neg	 edx
  00299	1b d2		 sbb	 edx, edx
  0029b	f7 da		 neg	 edx
  0029d	81 c2 48 04 00
	00		 add	 edx, 1096		; 00000448H
  002a3	52		 push	 edx
  002a4	53		 push	 ebx
  002a5	ff d6		 call	 esi
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 _CheckButton

; 3344 : 
; 3345 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_TYPE_HELP"));

  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@
  002b2	e8 00 00 00 00	 call	 _GetString
  002b7	83 c4 08	 add	 esp, 8
  002ba	50		 push	 eax
  002bb	68 eb 03 00 00	 push	 1003			; 000003ebH
  002c0	53		 push	 ebx
  002c1	ff d6		 call	 esi
  002c3	50		 push	 eax
  002c4	ff d7		 call	 edi

; 3346 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP_SYSENC_NORMAL), GetString ("SYSENC_NORMAL_TYPE_HELP"));

  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@
  002cb	e8 00 00 00 00	 call	 _GetString
  002d0	83 c4 04	 add	 esp, 4
  002d3	50		 push	 eax
  002d4	68 4a 04 00 00	 push	 1098			; 0000044aH
  002d9	53		 push	 ebx
  002da	ff d6		 call	 esi
  002dc	50		 push	 eax
  002dd	ff d7		 call	 edi

; 3347 : 
; 3348 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_SYSENC_INFO_LINK);

  002df	68 4b 04 00 00	 push	 1099			; 0000044bH
  002e4	53		 push	 ebx
  002e5	e8 00 00 00 00	 call	 _ToHyperlink
  002ea	83 c4 08	 add	 esp, 8

; 3349 : 
; 3350 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  002ed	6a 01		 push	 1
  002ef	68 10 04 00 00	 push	 1040			; 00000410H
  002f4	53		 push	 ebx
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  002fb	50		 push	 eax
  002fc	ff d6		 call	 esi
  002fe	50		 push	 eax
  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3351 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bDirectSysEncMode);

  00305	33 c0		 xor	 eax, eax
  00307	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, eax ; bDirectSysEncMode
  0030d	0f 94 c0	 sete	 al
  00310	50		 push	 eax
$LN690@PageDialog:
  00311	68 11 04 00 00	 push	 1041			; 00000411H
  00316	53		 push	 ebx
  00317	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0031d	50		 push	 eax
  0031e	ff d6		 call	 esi
  00320	50		 push	 eax
  00321	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3352 : 
; 3353 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  00327	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0032c	e8 00 00 00 00	 call	 _GetString
  00331	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00337	83 c4 04	 add	 esp, 4
  0033a	50		 push	 eax
  0033b	68 10 04 00 00	 push	 1040			; 00000410H
  00340	51		 push	 ecx
  00341	ff d6		 call	 esi
  00343	50		 push	 eax
  00344	ff d7		 call	 edi

; 3354 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00346	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0034b	e8 00 00 00 00	 call	 _GetString
  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00356	83 c4 04	 add	 esp, 4
  00359	50		 push	 eax
  0035a	68 11 04 00 00	 push	 1041			; 00000411H
  0035f	52		 push	 edx
  00360	ff d6		 call	 esi
  00362	50		 push	 eax
  00363	ff d7		 call	 edi

; 3355 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  00365	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0036a	e8 00 00 00 00	 call	 _GetString
  0036f	83 c4 04	 add	 esp, 4
  00372	50		 push	 eax
  00373	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00378	6a 02		 push	 2

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0037a	50		 push	 eax
  0037b	ff d6		 call	 esi
  0037d	50		 push	 eax
  0037e	ff d7		 call	 edi
  00380	33 c0		 xor	 eax, eax
  00382	e9 ec 4d 00 00	 jmp	 $LN333@PageDialog
$LN325@PageDialog:

; 3356 : 			break;
; 3357 : 
; 3358 : 		case SYSENC_HIDDEN_OS_REQ_CHECK_PAGE:
; 3359 : 
; 3360 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_TITLE"));

  00387	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
  0038c	e8 00 00 00 00	 call	 _GetString
  00391	83 c4 04	 add	 esp, 4
  00394	50		 push	 eax
  00395	68 e8 03 00 00	 push	 1000			; 000003e8H
  0039a	53		 push	 ebx
  0039b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  003a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  003a7	50		 push	 eax
  003a8	ff d6		 call	 esi
  003aa	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  003b0	50		 push	 eax
  003b1	ff d7		 call	 edi

; 3361 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_HELP"));

  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
  003b8	e8 00 00 00 00	 call	 _GetString
  003bd	83 c4 04	 add	 esp, 4
  003c0	50		 push	 eax
  003c1	68 eb 03 00 00	 push	 1003			; 000003ebH
  003c6	53		 push	 ebx
  003c7	ff d6		 call	 esi
  003c9	50		 push	 eax
  003ca	ff d7		 call	 edi

; 3362 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  003d1	e8 00 00 00 00	 call	 _GetString
  003d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  003dc	83 c4 04	 add	 esp, 4
  003df	50		 push	 eax
  003e0	68 10 04 00 00	 push	 1040			; 00000410H
  003e5	51		 push	 ecx
  003e6	ff d6		 call	 esi
  003e8	50		 push	 eax
  003e9	ff d7		 call	 edi

; 3363 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  003eb	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  003f0	e8 00 00 00 00	 call	 _GetString
  003f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  003fb	83 c4 04	 add	 esp, 4
  003fe	50		 push	 eax
  003ff	68 11 04 00 00	 push	 1041			; 00000411H
  00404	52		 push	 edx
  00405	ff d6		 call	 esi
  00407	50		 push	 eax
  00408	ff d7		 call	 edi

; 3364 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0040f	e8 00 00 00 00	 call	 _GetString
  00414	83 c4 04	 add	 esp, 4
  00417	50		 push	 eax
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0041d	6a 02		 push	 2
  0041f	50		 push	 eax
  00420	ff d6		 call	 esi
  00422	50		 push	 eax
  00423	ff d7		 call	 edi

; 3365 : 
; 3366 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  00425	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0042b	6a 01		 push	 1
  0042d	68 10 04 00 00	 push	 1040			; 00000410H
  00432	51		 push	 ecx
  00433	ff d6		 call	 esi
  00435	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  0043b	50		 push	 eax
  0043c	ff d7		 call	 edi

; 3367 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), bDirectSysEncModeCommand != SYSENC_COMMAND_CREATE_HIDDEN_OS && bDirectSysEncModeCommand != SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV);

  0043e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDirectSysEncModeCommand@@3HA ; bDirectSysEncModeCommand
  00443	83 f8 05	 cmp	 eax, 5
  00446	74 0c		 je	 SHORT $LN335@PageDialog
  00448	83 f8 06	 cmp	 eax, 6
  0044b	74 07		 je	 SHORT $LN335@PageDialog
  0044d	b8 01 00 00 00	 mov	 eax, 1
  00452	eb 02		 jmp	 SHORT $LN336@PageDialog
$LN335@PageDialog:
  00454	33 c0		 xor	 eax, eax
$LN336@PageDialog:
  00456	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0045c	50		 push	 eax
  0045d	68 11 04 00 00	 push	 1041			; 00000411H
  00462	52		 push	 edx
  00463	ff d6		 call	 esi
  00465	50		 push	 eax
  00466	ff d7		 call	 edi

; 3368 : 
; 3369 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_SYSENC_INFO_LINK);

  00468	68 4b 04 00 00	 push	 1099			; 0000044bH
  0046d	53		 push	 ebx
  0046e	e8 00 00 00 00	 call	 _ToHyperlink
  00473	83 c4 08	 add	 esp, 8

; 4230 : 				return 0;

  00476	33 c0		 xor	 eax, eax
  00478	e9 f6 4c 00 00	 jmp	 $LN333@PageDialog
$LN324@PageDialog:

; 3370 : 			break;
; 3371 : 
; 3372 : 		case SYSENC_SPAN_PAGE:
; 3373 : 
; 3374 : 			SendMessage (GetDlgItem (hwndDlg, IDC_WHOLE_SYS_DRIVE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0047d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00482	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00488	6a 01		 push	 1
  0048a	50		 push	 eax
  0048b	6a 30		 push	 48			; 00000030H
  0048d	68 2b 04 00 00	 push	 1067			; 0000042bH
  00492	53		 push	 ebx
  00493	ff d6		 call	 esi
  00495	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0049b	50		 push	 eax
  0049c	ff d7		 call	 edi

; 3375 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_PARTITION), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0049e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  004a4	6a 01		 push	 1
  004a6	51		 push	 ecx
  004a7	6a 30		 push	 48			; 00000030H
  004a9	68 2c 04 00 00	 push	 1068			; 0000042cH
  004ae	53		 push	 ebx
  004af	ff d6		 call	 esi
  004b1	50		 push	 eax
  004b2	ff d7		 call	 edi

; 3376 : 
; 3377 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_SPAN_TITLE"));

  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@
  004b9	e8 00 00 00 00	 call	 _GetString
  004be	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  004c4	83 c4 04	 add	 esp, 4
  004c7	50		 push	 eax
  004c8	68 e8 03 00 00	 push	 1000			; 000003e8H
  004cd	53		 push	 ebx
  004ce	ff d7		 call	 edi
  004d0	50		 push	 eax
  004d1	ff d6		 call	 esi
  004d3	50		 push	 eax
  004d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3378 : 
; 3379 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_WHOLE_SYS_DRIVE), GetString ("SYS_ENCRYPTION_SPAN_WHOLE_SYS_DRIVE_HELP"));

  004da	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@
  004df	e8 00 00 00 00	 call	 _GetString
  004e4	83 c4 04	 add	 esp, 4
  004e7	50		 push	 eax
  004e8	68 2d 04 00 00	 push	 1069			; 0000042dH
  004ed	53		 push	 ebx
  004ee	ff d6		 call	 esi
  004f0	50		 push	 eax
  004f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3380 : 
; 3381 : 			CheckButton (GetDlgItem (hwndDlg, bWholeSysDrive ? IDC_WHOLE_SYS_DRIVE : IDC_SYS_PARTITION));

  004f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bWholeSysDrive@@3HA ; bWholeSysDrive
  004fd	f7 da		 neg	 edx
  004ff	1b d2		 sbb	 edx, edx
  00501	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00507	52		 push	 edx
  00508	53		 push	 ebx
  00509	ff d6		 call	 esi
  0050b	50		 push	 eax
  0050c	e8 00 00 00 00	 call	 _CheckButton

; 3382 : 
; 3383 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00511	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00516	e8 00 00 00 00	 call	 _GetString
  0051b	83 c4 08	 add	 esp, 8
$LN691@PageDialog:
  0051e	50		 push	 eax
  0051f	68 10 04 00 00	 push	 1040			; 00000410H
  00524	53		 push	 ebx
  00525	ff d7		 call	 edi
  00527	50		 push	 eax
  00528	ff d6		 call	 esi
  0052a	50		 push	 eax
  0052b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3384 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00531	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00536	e8 00 00 00 00	 call	 _GetString
  0053b	83 c4 04	 add	 esp, 4
  0053e	50		 push	 eax
  0053f	68 11 04 00 00	 push	 1041			; 00000411H
  00544	53		 push	 ebx
  00545	ff d7		 call	 edi
  00547	50		 push	 eax
  00548	ff d6		 call	 esi
  0054a	50		 push	 eax
  0054b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3385 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  00551	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00556	e8 00 00 00 00	 call	 _GetString
  0055b	83 c4 04	 add	 esp, 4
  0055e	50		 push	 eax
  0055f	6a 02		 push	 2
  00561	53		 push	 ebx
  00562	ff d7		 call	 edi
  00564	50		 push	 eax
  00565	ff d6		 call	 esi
  00567	50		 push	 eax
  00568	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3386 : 
; 3387 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0056e	6a 01		 push	 1
$LN693@PageDialog:
  00570	68 10 04 00 00	 push	 1040			; 00000410H
  00575	53		 push	 ebx
  00576	ff d7		 call	 edi
  00578	50		 push	 eax
  00579	ff d6		 call	 esi
  0057b	50		 push	 eax
  0057c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN694@PageDialog:

; 3388 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00582	6a 01		 push	 1
  00584	68 11 04 00 00	 push	 1041			; 00000411H
  00589	53		 push	 ebx
  0058a	ff d7		 call	 edi
  0058c	50		 push	 eax
  0058d	ff d6		 call	 esi
  0058f	50		 push	 eax
  00590	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4230 : 				return 0;

  00596	33 c0		 xor	 eax, eax
  00598	e9 d6 4b 00 00	 jmp	 $LN333@PageDialog
$LN323@PageDialog:

; 3389 : 			break;
; 3390 : 
; 3391 : 
; 3392 : 		case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 3393 : 
; 3394 : 			Init2RadButtonPageYesNo (SysEncDetectHiddenSectors);

  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SysEncDetectHiddenSectors@@3HA ; SysEncDetectHiddenSectors
  005a2	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3395 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_PRE_DRIVE_ANALYSIS_TITLE"));

  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@
  005ac	e8 00 00 00 00	 call	 _GetString
  005b1	83 c4 04	 add	 esp, 4
  005b4	50		 push	 eax
  005b5	68 e8 03 00 00	 push	 1000			; 000003e8H
  005ba	53		 push	 ebx
  005bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  005c1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  005c7	50		 push	 eax
  005c8	ff d6		 call	 esi
  005ca	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  005d0	50		 push	 eax
  005d1	ff d7		 call	 edi

; 3396 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_PRE_DRIVE_ANALYSIS_HELP"));

  005d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@
  005d8	e8 00 00 00 00	 call	 _GetString
  005dd	83 c4 04	 add	 esp, 4
  005e0	50		 push	 eax
  005e1	68 eb 03 00 00	 push	 1003			; 000003ebH
  005e6	53		 push	 ebx

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  005e7	ff d6		 call	 esi
  005e9	50		 push	 eax
  005ea	ff d7		 call	 edi
  005ec	33 c0		 xor	 eax, eax
  005ee	e9 80 4b 00 00	 jmp	 $LN333@PageDialog
$LN322@PageDialog:

; 3397 : 			break;
; 3398 : 
; 3399 : 
; 3400 : 		case SYSENC_DRIVE_ANALYSIS_PAGE:
; 3401 : 
; 3402 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_DRIVE_ANALYSIS_TITLE"));

  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@
  005f8	e8 00 00 00 00	 call	 _GetString
  005fd	83 c4 04	 add	 esp, 4
  00600	50		 push	 eax
  00601	68 e8 03 00 00	 push	 1000			; 000003e8H
  00606	53		 push	 ebx
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0060d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00613	50		 push	 eax
  00614	ff d6		 call	 esi
  00616	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0061c	50		 push	 eax
  0061d	ff d7		 call	 edi

; 3403 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_SYSENC_DRIVE_ANALYSIS_INFO), GetString ("SYSENC_DRIVE_ANALYSIS_INFO"));

  0061f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@
  00624	e8 00 00 00 00	 call	 _GetString
  00629	83 c4 04	 add	 esp, 4
  0062c	50		 push	 eax
  0062d	68 47 04 00 00	 push	 1095			; 00000447H
  00632	53		 push	 ebx
  00633	ff d6		 call	 esi
  00635	50		 push	 eax
  00636	ff d7		 call	 edi

; 3404 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00638	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0063d	e8 00 00 00 00	 call	 _GetString
  00642	83 c4 04	 add	 esp, 4
  00645	50		 push	 eax
  00646	68 10 04 00 00	 push	 1040			; 00000410H
  0064b	53		 push	 ebx
  0064c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00652	50		 push	 eax
  00653	ff d6		 call	 esi
  00655	50		 push	 eax
  00656	ff d7		 call	 edi

; 3405 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00658	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0065d	e8 00 00 00 00	 call	 _GetString
  00662	83 c4 04	 add	 esp, 4
  00665	50		 push	 eax
  00666	68 11 04 00 00	 push	 1041			; 00000411H
  0066b	53		 push	 ebx
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00672	50		 push	 eax
  00673	ff d6		 call	 esi
  00675	50		 push	 eax
  00676	ff d7		 call	 edi

; 3406 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  00678	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0067d	e8 00 00 00 00	 call	 _GetString
  00682	83 c4 04	 add	 esp, 4
  00685	50		 push	 eax
  00686	6a 02		 push	 2
  00688	53		 push	 ebx
  00689	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0068f	50		 push	 eax
  00690	ff d6		 call	 esi
  00692	50		 push	 eax
  00693	ff d7		 call	 edi

; 3407 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), FALSE);

  00695	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0069a	6a 00		 push	 0
  0069c	68 10 04 00 00	 push	 1040			; 00000410H
  006a1	50		 push	 eax
  006a2	ff d6		 call	 esi
  006a4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  006aa	50		 push	 eax
  006ab	ff d7		 call	 edi

; 3408 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), FALSE);

  006ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  006b3	6a 00		 push	 0
  006b5	68 11 04 00 00	 push	 1041			; 00000411H
  006ba	51		 push	 ecx
  006bb	ff d6		 call	 esi
  006bd	50		 push	 eax
  006be	ff d7		 call	 edi

; 3409 : 			EnableWindow (GetDlgItem (MainDlg, IDCANCEL), FALSE);

  006c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  006c6	6a 00		 push	 0
  006c8	6a 02		 push	 2
  006ca	52		 push	 edx
  006cb	ff d6		 call	 esi
  006cd	50		 push	 eax
  006ce	ff d7		 call	 edi

; 3410 : 
; 3411 : 			LoadSettings (hwndDlg);

  006d0	8b f3		 mov	 esi, ebx
  006d2	e8 00 00 00 00	 call	 _LoadSettings

; 3412 : 
; 3413 : 			if (HiddenSectorDetectionStatus == 1)

  006d7	be 01 00 00 00	 mov	 esi, 1
  006dc	39 35 00 00 00
	00		 cmp	 DWORD PTR _HiddenSectorDetectionStatus, esi
  006e2	75 63		 jne	 SHORT $LN319@PageDialog

; 3414 : 			{
; 3415 : 				// Detection of hidden sectors was already in progress but it did not finish successfully.
; 3416 : 				// Ask the user if he wants to try again (to prevent repeated system freezing, etc.)
; 3417 : 
; 3418 : 				char *tmpStr[] = {0, "HIDDEN_SECTOR_DETECTION_FAILED_PREVIOUSLY", "SKIP_HIDDEN_SECTOR_DETECTION", "RETRY_HIDDEN_SECTOR_DETECTION", "IDC_EXIT", 0};

  006e4	33 c0		 xor	 eax, eax

; 3419 : 				switch (AskMultiChoice ((void **) tmpStr, FALSE))

  006e6	50		 push	 eax
  006e7	89 45 b0	 mov	 DWORD PTR _tmpStr$133075[ebp], eax
  006ea	89 45 c4	 mov	 DWORD PTR _tmpStr$133075[ebp+20], eax
  006ed	8d 45 b0	 lea	 eax, DWORD PTR _tmpStr$133075[ebp]
  006f0	50		 push	 eax
  006f1	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133075[ebp+4], OFFSET ??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@
  006f8	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133075[ebp+8], OFFSET ??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@
  006ff	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133075[ebp+12], OFFSET ??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@
  00706	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133075[ebp+16], OFFSET ??_C@_08HBBNJJLH@IDC_EXIT?$AA@
  0070d	e8 00 00 00 00	 call	 _AskMultiChoice
  00712	83 c4 08	 add	 esp, 8
  00715	2b c6		 sub	 eax, esi
  00717	74 16		 je	 SHORT $LN318@PageDialog
  00719	2b c6		 sub	 eax, esi
  0071b	74 2a		 je	 SHORT $LN319@PageDialog

; 3425 : 
; 3426 : 				case 2:
; 3427 : 					// Try again
; 3428 : 					break;
; 3429 : 
; 3430 : 				default:
; 3431 : 					EndMainDlg (MainDlg);

  0071d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00723	e8 00 00 00 00	 call	 _EndMainDlg

; 3432 : 					return 0;

  00728	33 c0		 xor	 eax, eax
  0072a	e9 44 4a 00 00	 jmp	 $LN333@PageDialog
$LN318@PageDialog:

; 3420 : 				{
; 3421 : 				case 1:
; 3422 : 					// Do not try again
; 3423 : 					LoadPage (MainDlg, SYSENC_DRIVE_ANALYSIS_PAGE + 1);

  0072f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00735	6a 06		 push	 6
  00737	51		 push	 ecx
  00738	e8 00 00 00 00	 call	 _LoadPage
  0073d	83 c4 08	 add	 esp, 8
$LN446@PageDialog:

; 3424 : 					return 0;

  00740	33 c0		 xor	 eax, eax
  00742	e9 2c 4a 00 00	 jmp	 $LN333@PageDialog
$LN319@PageDialog:

; 3433 : 				}
; 3434 : 			}
; 3435 : 
; 3436 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS, TIMER_INTERVAL_SYSENC_DRIVE_ANALYSIS_PROGRESS, NULL);

  00747	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0074d	6a 00		 push	 0
  0074f	6a 64		 push	 100			; 00000064H
  00751	68 03 01 00 00	 push	 259			; 00000103H
  00756	52		 push	 edx
  00757	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 3437 : 			bSysEncDriveAnalysisInProgress = TRUE;

  0075d	89 35 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC, esi ; bSysEncDriveAnalysisInProgress

; 3438 : 			ArrowWaitCursor ();

  00763	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 3439 : 			SysEncDriveAnalysisStart = GetTickCount ();

  00768	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 3440 : 			InitProgressBar (SYSENC_DRIVE_ANALYSIS_ETA, 0, FALSE, FALSE, FALSE, TRUE);

  0076e	56		 push	 esi
  0076f	6a 00		 push	 0
  00771	6a 00		 push	 0
  00773	6a 00		 push	 0
  00775	6a 00		 push	 0
  00777	6a 00		 push	 0
  00779	6a 00		 push	 0
  0077b	68 80 a9 03 00	 push	 240000			; 0003a980H
  00780	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDriveAnalysisStart@@3HA, eax ; SysEncDriveAnalysisStart
  00785	e8 00 00 00 00	 call	 _InitProgressBar

; 3441 : 
; 3442 : 			_beginthread (sysEncDriveAnalysisThread, 0, hwndDlg);

  0078a	53		 push	 ebx
  0078b	6a 00		 push	 0
  0078d	68 00 00 00 00	 push	 OFFSET _sysEncDriveAnalysisThread
  00792	e8 00 00 00 00	 call	 __beginthread
  00797	83 c4 2c	 add	 esp, 44			; 0000002cH

; 4230 : 				return 0;

  0079a	33 c0		 xor	 eax, eax
  0079c	e9 d2 49 00 00	 jmp	 $LN333@PageDialog
$LN315@PageDialog:

; 3443 : 
; 3444 : 			break;
; 3445 : 
; 3446 : 
; 3447 : 		case SYSENC_MULTI_BOOT_MODE_PAGE:
; 3448 : 
; 3449 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SINGLE_BOOT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  007a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  007a6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  007ac	6a 01		 push	 1
  007ae	50		 push	 eax
  007af	6a 30		 push	 48			; 00000030H
  007b1	68 34 04 00 00	 push	 1076			; 00000434H
  007b6	53		 push	 ebx
  007b7	ff d7		 call	 edi
  007b9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  007bf	50		 push	 eax
  007c0	ff d6		 call	 esi

; 3450 : 			SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_BOOT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  007c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  007c8	6a 01		 push	 1
  007ca	51		 push	 ecx
  007cb	6a 30		 push	 48			; 00000030H
  007cd	68 35 04 00 00	 push	 1077			; 00000435H
  007d2	53		 push	 ebx
  007d3	ff d7		 call	 edi
  007d5	50		 push	 eax
  007d6	ff d6		 call	 esi

; 3451 : 
; 3452 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_MULTI_BOOT_MODE_TITLE"));

  007d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@
  007dd	e8 00 00 00 00	 call	 _GetString
  007e2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  007e8	83 c4 04	 add	 esp, 4
  007eb	50		 push	 eax
  007ec	68 e8 03 00 00	 push	 1000			; 000003e8H
  007f1	53		 push	 ebx
  007f2	ff d6		 call	 esi
  007f4	50		 push	 eax
  007f5	ff d7		 call	 edi
  007f7	50		 push	 eax
  007f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3453 : 
; 3454 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  007fe	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00803	e8 00 00 00 00	 call	 _GetString
  00808	83 c4 04	 add	 esp, 4
  0080b	50		 push	 eax
  0080c	68 10 04 00 00	 push	 1040			; 00000410H
  00811	53		 push	 ebx
  00812	ff d6		 call	 esi
  00814	50		 push	 eax
  00815	ff d7		 call	 edi
  00817	50		 push	 eax
  00818	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3455 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0081e	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00823	e8 00 00 00 00	 call	 _GetString
  00828	83 c4 04	 add	 esp, 4
  0082b	50		 push	 eax
  0082c	68 11 04 00 00	 push	 1041			; 00000411H
  00831	53		 push	 ebx
  00832	ff d6		 call	 esi
  00834	50		 push	 eax
  00835	ff d7		 call	 edi
  00837	50		 push	 eax
  00838	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3456 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  0083e	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00843	e8 00 00 00 00	 call	 _GetString
  00848	83 c4 04	 add	 esp, 4
  0084b	50		 push	 eax
  0084c	6a 02		 push	 2
  0084e	53		 push	 ebx
  0084f	ff d6		 call	 esi
  00851	50		 push	 eax
  00852	ff d7		 call	 edi
  00854	50		 push	 eax
  00855	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3457 : 
; 3458 : 			RefreshMultiBootControls (hwndDlg);

  0085b	8b f3		 mov	 esi, ebx
  0085d	e8 00 00 00 00	 call	 ?RefreshMultiBootControls@@YAXPAUHWND__@@@Z ; RefreshMultiBootControls

; 3459 : 
; 3460 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), nMultiBoot > 0);

  00862	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  00868	33 d2		 xor	 edx, edx
  0086a	39 15 00 00 00
	00		 cmp	 DWORD PTR ?nMultiBoot@@3HA, edx ; nMultiBoot
  00870	0f 9f c2	 setg	 dl
  00873	52		 push	 edx
  00874	68 10 04 00 00	 push	 1040			; 00000410H
  00879	53		 push	 ebx
  0087a	ff d6		 call	 esi
  0087c	50		 push	 eax
  0087d	ff d7		 call	 edi
  0087f	50		 push	 eax
  00880	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3461 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00886	6a 01		 push	 1
  00888	68 11 04 00 00	 push	 1041			; 00000411H
  0088d	53		 push	 ebx
  0088e	ff d6		 call	 esi
  00890	50		 push	 eax
  00891	ff d7		 call	 edi
  00893	50		 push	 eax
  00894	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3462 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  0089a	6a 01		 push	 1
  0089c	6a 02		 push	 2
  0089e	53		 push	 ebx
  0089f	ff d6		 call	 esi
  008a1	50		 push	 eax
  008a2	ff d7		 call	 edi
  008a4	50		 push	 eax
  008a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4230 : 				return 0;

  008ab	33 c0		 xor	 eax, eax
  008ad	e9 c1 48 00 00	 jmp	 $LN333@PageDialog
$LN314@PageDialog:

; 3463 : 			break;
; 3464 : 
; 3465 : 
; 3466 : 		case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 3467 : 
; 3468 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.SystemOnBootDrive);

  008b2	a1 10 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16
  008b7	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3469 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TITLE"));

  008bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@
  008c1	e8 00 00 00 00	 call	 _GetString
  008c6	83 c4 04	 add	 esp, 4
  008c9	50		 push	 eax
  008ca	68 e8 03 00 00	 push	 1000			; 000003e8H
  008cf	53		 push	 ebx
  008d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  008d6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  008dc	50		 push	 eax
  008dd	ff d6		 call	 esi
  008df	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  008e5	50		 push	 eax
  008e6	ff d7		 call	 edi

; 3470 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HELP"));

  008e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@
  008ed	e8 00 00 00 00	 call	 _GetString
  008f2	83 c4 04	 add	 esp, 4
  008f5	50		 push	 eax
  008f6	68 eb 03 00 00	 push	 1003			; 000003ebH
  008fb	53		 push	 ebx

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  008fc	ff d6		 call	 esi
  008fe	50		 push	 eax
  008ff	ff d7		 call	 edi
  00901	33 c0		 xor	 eax, eax
  00903	e9 6b 48 00 00	 jmp	 $LN333@PageDialog
$LN313@PageDialog:

; 3471 : 			break;
; 3472 : 
; 3473 : 
; 3474 : 		case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 3475 : 
; 3476 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE1), GetString ("DIGIT_ONE"));

  00908	68 00 00 00 00	 push	 OFFSET ??_C@_09BCPPDPEL@DIGIT_ONE?$AA@
  0090d	e8 00 00 00 00	 call	 _GetString
  00912	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00918	83 c4 04	 add	 esp, 4
  0091b	50		 push	 eax
  0091c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00921	68 dd 13 00 00	 push	 5085			; 000013ddH
  00926	50		 push	 eax
  00927	ff d6		 call	 esi
  00929	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0092f	50		 push	 eax
  00930	ff d7		 call	 edi

; 3477 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE2), GetString ("TWO_OR_MORE"));

  00932	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@
  00937	e8 00 00 00 00	 call	 _GetString
  0093c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00942	83 c4 04	 add	 esp, 4
  00945	50		 push	 eax
  00946	68 df 13 00 00	 push	 5087			; 000013dfH
  0094b	51		 push	 ecx
  0094c	ff d6		 call	 esi
  0094e	50		 push	 eax
  0094f	ff d7		 call	 edi

; 3478 : 
; 3479 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  00951	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00956	e8 00 00 00 00	 call	 _GetString
  0095b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00961	83 c4 04	 add	 esp, 4
  00964	50		 push	 eax
  00965	68 10 04 00 00	 push	 1040			; 00000410H
  0096a	52		 push	 edx
  0096b	ff d6		 call	 esi
  0096d	50		 push	 eax
  0096e	ff d7		 call	 edi

; 3480 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00970	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00975	e8 00 00 00 00	 call	 _GetString
  0097a	83 c4 04	 add	 esp, 4
  0097d	50		 push	 eax
  0097e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00983	68 11 04 00 00	 push	 1041			; 00000411H
  00988	50		 push	 eax
  00989	ff d6		 call	 esi
  0098b	50		 push	 eax
  0098c	ff d7		 call	 edi

; 3481 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  0098e	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00993	e8 00 00 00 00	 call	 _GetString
  00998	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0099e	83 c4 04	 add	 esp, 4
  009a1	50		 push	 eax
  009a2	6a 02		 push	 2
  009a4	51		 push	 ecx
  009a5	ff d6		 call	 esi
  009a7	50		 push	 eax
  009a8	ff d7		 call	 edi

; 3482 : 
; 3483 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), SysEncMultiBootCfg.NumberOfSysDrives > 0);

  009aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  009af	33 d2		 xor	 edx, edx
  009b1	39 15 00 00 00
	00		 cmp	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, edx
  009b7	0f 9f c2	 setg	 dl
  009ba	52		 push	 edx
  009bb	68 10 04 00 00	 push	 1040			; 00000410H
  009c0	50		 push	 eax
  009c1	ff d6		 call	 esi
  009c3	50		 push	 eax
  009c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3484 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  009ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  009d0	6a 01		 push	 1
  009d2	68 11 04 00 00	 push	 1041			; 00000411H
  009d7	51		 push	 ecx
  009d8	ff d6		 call	 esi
  009da	50		 push	 eax
  009db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3485 : 
; 3486 : 			if (SysEncMultiBootCfg.NumberOfSysDrives == 2)

  009e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A

; 3487 : 				Update2RadButtonPage (0); // 2 or more drives contain an OS

  009e6	6a 00		 push	 0
  009e8	83 f8 02	 cmp	 eax, 2
  009eb	75 32		 jne	 SHORT $LN312@PageDialog
  009ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  009f3	6a 00		 push	 0
  009f5	68 f1 00 00 00	 push	 241			; 000000f1H
  009fa	68 dd 13 00 00	 push	 5085			; 000013ddH
  009ff	52		 push	 edx
  00a00	ff d6		 call	 esi
  00a02	50		 push	 eax
  00a03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a09	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00a0e	6a 00		 push	 0
  00a10	6a 01		 push	 1
  00a12	68 f1 00 00 00	 push	 241			; 000000f1H
  00a17	68 df 13 00 00	 push	 5087			; 000013dfH
  00a1c	50		 push	 eax
  00a1d	eb 67		 jmp	 SHORT $LN674@PageDialog
$LN312@PageDialog:

; 3488 : 			else if (SysEncMultiBootCfg.NumberOfSysDrives == 1)

  00a1f	83 f8 01	 cmp	 eax, 1
  00a22	75 32		 jne	 SHORT $LN310@PageDialog

; 3489 : 				Update2RadButtonPage (1); // Only 1 drive contains an OS

  00a24	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00a2a	50		 push	 eax
  00a2b	68 f1 00 00 00	 push	 241			; 000000f1H
  00a30	68 dd 13 00 00	 push	 5085			; 000013ddH
  00a35	51		 push	 ecx
  00a36	ff d6		 call	 esi
  00a38	50		 push	 eax
  00a39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a3f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00a45	6a 00		 push	 0
  00a47	6a 00		 push	 0
  00a49	68 f1 00 00 00	 push	 241			; 000000f1H
  00a4e	68 df 13 00 00	 push	 5087			; 000013dfH
  00a53	52		 push	 edx

; 3490 : 			else

  00a54	eb 30		 jmp	 SHORT $LN674@PageDialog
$LN310@PageDialog:

; 3491 : 				Update2RadButtonPage (-1);

  00a56	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00a5b	6a 00		 push	 0
  00a5d	68 f1 00 00 00	 push	 241			; 000000f1H
  00a62	68 dd 13 00 00	 push	 5085			; 000013ddH
  00a67	50		 push	 eax
  00a68	ff d6		 call	 esi
  00a6a	50		 push	 eax
  00a6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00a77	6a 00		 push	 0
  00a79	6a 00		 push	 0
  00a7b	68 f1 00 00 00	 push	 241			; 000000f1H
  00a80	68 df 13 00 00	 push	 5087			; 000013dfH
  00a85	51		 push	 ecx
$LN674@PageDialog:
  00a86	ff d6		 call	 esi
  00a88	50		 push	 eax
  00a89	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3492 : 
; 3493 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_TITLE"));

  00a8f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
  00a94	e8 00 00 00 00	 call	 _GetString
  00a99	83 c4 04	 add	 esp, 4
  00a9c	50		 push	 eax
  00a9d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00aa2	53		 push	 ebx
  00aa3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00aa9	50		 push	 eax
  00aaa	ff d6		 call	 esi
  00aac	50		 push	 eax
  00aad	ff d7		 call	 edi

; 3494 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_HELP"));

  00aaf	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
  00ab4	e8 00 00 00 00	 call	 _GetString
  00ab9	83 c4 04	 add	 esp, 4
  00abc	50		 push	 eax
  00abd	68 eb 03 00 00	 push	 1003			; 000003ebH
  00ac2	53		 push	 ebx

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00ac3	ff d6		 call	 esi
  00ac5	50		 push	 eax
  00ac6	ff d7		 call	 edi
  00ac8	33 c0		 xor	 eax, eax
  00aca	e9 a4 46 00 00	 jmp	 $LN333@PageDialog
$LN308@PageDialog:

; 3495 : 			break;
; 3496 : 
; 3497 : 
; 3498 : 		case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 3499 : 
; 3500 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.MultipleSystemsOnDrive);

  00acf	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4
  00ad4	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3501 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_ADJACENT_SYS_TITLE"));

  00ad9	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@
  00ade	e8 00 00 00 00	 call	 _GetString
  00ae3	83 c4 04	 add	 esp, 4
  00ae6	50		 push	 eax
  00ae7	68 e8 03 00 00	 push	 1000			; 000003e8H
  00aec	53		 push	 ebx
  00aed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00af3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00af9	50		 push	 eax
  00afa	ff d6		 call	 esi
  00afc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00b02	50		 push	 eax
  00b03	ff d7		 call	 edi

; 3502 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_ADJACENT_SYS_HELP"));

  00b05	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@
  00b0a	e8 00 00 00 00	 call	 _GetString
  00b0f	83 c4 04	 add	 esp, 4
  00b12	50		 push	 eax
  00b13	68 eb 03 00 00	 push	 1003			; 000003ebH
  00b18	53		 push	 ebx

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00b19	ff d6		 call	 esi
  00b1b	50		 push	 eax
  00b1c	ff d7		 call	 edi
  00b1e	33 c0		 xor	 eax, eax
  00b20	e9 4e 46 00 00	 jmp	 $LN333@PageDialog
$LN307@PageDialog:

; 3503 : 			break;
; 3504 : 
; 3505 : 
; 3506 : 		case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 3507 : 
; 3508 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.BootLoaderBrand);

  00b25	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12
  00b2a	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3509 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_TITLE"));

  00b2f	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
  00b34	e8 00 00 00 00	 call	 _GetString
  00b39	83 c4 04	 add	 esp, 4
  00b3c	50		 push	 eax
  00b3d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00b42	53		 push	 ebx
  00b43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00b49	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00b4f	50		 push	 eax
  00b50	ff d6		 call	 esi
  00b52	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00b58	50		 push	 eax
  00b59	ff d7		 call	 edi

; 3510 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_HELP"));

  00b5b	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
  00b60	e8 00 00 00 00	 call	 _GetString
  00b65	83 c4 04	 add	 esp, 4
  00b68	50		 push	 eax
  00b69	68 eb 03 00 00	 push	 1003			; 000003ebH
  00b6e	53		 push	 ebx

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00b6f	ff d6		 call	 esi
  00b71	50		 push	 eax
  00b72	ff d7		 call	 edi
  00b74	33 c0		 xor	 eax, eax
  00b76	e9 f8 45 00 00	 jmp	 $LN333@PageDialog
$LN306@PageDialog:

; 3511 : 			break;
; 3512 : 
; 3513 : 
; 3514 : 		case SYSENC_MULTI_BOOT_OUTCOME_PAGE:
; 3515 : 
; 3516 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_OUTCOME_TITLE"));

  00b7b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@
  00b80	e8 00 00 00 00	 call	 _GetString
  00b85	83 c4 04	 add	 esp, 4
  00b88	50		 push	 eax
  00b89	68 e8 03 00 00	 push	 1000			; 000003e8H
  00b8e	53		 push	 ebx
  00b8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00b95	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00b9b	50		 push	 eax
  00b9c	ff d6		 call	 esi
  00b9e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00ba4	50		 push	 eax
  00ba5	ff d7		 call	 edi

; 3517 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), SysEncMultiBootCfgOutcome);

  00ba7	68 00 00 00 00	 push	 OFFSET ?SysEncMultiBootCfgOutcome@@3PA_WA ; SysEncMultiBootCfgOutcome
  00bac	68 eb 03 00 00	 push	 1003			; 000003ebH
  00bb1	53		 push	 ebx
  00bb2	ff d6		 call	 esi
  00bb4	50		 push	 eax
  00bb5	ff d7		 call	 edi

; 3518 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  00bb7	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00bbc	e8 00 00 00 00	 call	 _GetString
  00bc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00bc7	83 c4 04	 add	 esp, 4
  00bca	50		 push	 eax
  00bcb	68 10 04 00 00	 push	 1040			; 00000410H
  00bd0	52		 push	 edx
  00bd1	ff d6		 call	 esi
  00bd3	50		 push	 eax
  00bd4	ff d7		 call	 edi

; 3519 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00bd6	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00bdb	e8 00 00 00 00	 call	 _GetString
  00be0	83 c4 04	 add	 esp, 4
  00be3	50		 push	 eax
  00be4	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00be9	68 11 04 00 00	 push	 1041			; 00000411H
  00bee	50		 push	 eax
  00bef	ff d6		 call	 esi
  00bf1	50		 push	 eax
  00bf2	ff d7		 call	 edi

; 3520 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  00bf4	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00bf9	e8 00 00 00 00	 call	 _GetString
  00bfe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00c04	83 c4 04	 add	 esp, 4
  00c07	50		 push	 eax
  00c08	6a 02		 push	 2
  00c0a	51		 push	 ecx
  00c0b	ff d6		 call	 esi
  00c0d	50		 push	 eax
  00c0e	ff d7		 call	 edi

; 3521 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  00c10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00c16	6a 01		 push	 1
  00c18	68 10 04 00 00	 push	 1040			; 00000410H
  00c1d	52		 push	 edx
  00c1e	ff d6		 call	 esi
  00c20	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  00c26	50		 push	 eax
  00c27	ff d7		 call	 edi

; 3522 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  00c29	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00c2e	6a 01		 push	 1
  00c30	68 11 04 00 00	 push	 1041			; 00000411H

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00c35	50		 push	 eax
  00c36	ff d6		 call	 esi
  00c38	50		 push	 eax
  00c39	ff d7		 call	 edi
  00c3b	33 c0		 xor	 eax, eax
  00c3d	e9 31 45 00 00	 jmp	 $LN333@PageDialog
$LN305@PageDialog:

; 3523 : 			break;
; 3524 : 
; 3525 : 
; 3526 : 		case VOLUME_TYPE_PAGE:
; 3527 : 
; 3528 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("VOLUME_TYPE_TITLE"));

  00c42	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@
  00c47	e8 00 00 00 00	 call	 _GetString
  00c4c	83 c4 04	 add	 esp, 4
  00c4f	50		 push	 eax
  00c50	68 e8 03 00 00	 push	 1000			; 000003e8H
  00c55	53		 push	 ebx
  00c56	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00c5c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00c62	50		 push	 eax
  00c63	ff d6		 call	 esi
  00c65	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00c6b	50		 push	 eax
  00c6c	ff d7		 call	 edi

; 3529 : 
; 3530 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDDEN_VOL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00c6e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  00c74	6a 01		 push	 1
  00c76	51		 push	 ecx
  00c77	6a 30		 push	 48			; 00000030H
  00c79	68 08 04 00 00	 push	 1032			; 00000408H
  00c7e	53		 push	 ebx
  00c7f	ff d6		 call	 esi
  00c81	50		 push	 eax
  00c82	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3531 : 			SendMessage (GetDlgItem (hwndDlg, IDC_STD_VOL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00c88	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  00c8e	6a 01		 push	 1
  00c90	52		 push	 edx
  00c91	6a 30		 push	 48			; 00000030H
  00c93	68 07 04 00 00	 push	 1031			; 00000407H
  00c98	53		 push	 ebx
  00c99	ff d6		 call	 esi
  00c9b	50		 push	 eax
  00c9c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3532 : 
; 3533 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenVol ? IDC_HIDDEN_VOL : IDC_STD_VOL));

  00ca2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00ca7	f7 d8		 neg	 eax
  00ca9	1b c0		 sbb	 eax, eax
  00cab	f7 d8		 neg	 eax
  00cad	05 07 04 00 00	 add	 eax, 1031		; 00000407H
  00cb2	50		 push	 eax
  00cb3	53		 push	 ebx
  00cb4	ff d6		 call	 esi
  00cb6	50		 push	 eax
  00cb7	e8 00 00 00 00	 call	 _CheckButton

; 3534 : 
; 3535 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOLUME_TYPE_HELP"));

  00cbc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@
  00cc1	e8 00 00 00 00	 call	 _GetString
  00cc6	83 c4 08	 add	 esp, 8
  00cc9	50		 push	 eax
  00cca	68 eb 03 00 00	 push	 1003			; 000003ebH
  00ccf	53		 push	 ebx
  00cd0	ff d6		 call	 esi
  00cd2	50		 push	 eax
  00cd3	ff d7		 call	 edi

; 3536 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP_NORMAL_VOL), GetString ("NORMAL_VOLUME_TYPE_HELP"));

  00cd5	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@
  00cda	e8 00 00 00 00	 call	 _GetString
  00cdf	83 c4 04	 add	 esp, 4
  00ce2	50		 push	 eax
  00ce3	68 44 04 00 00	 push	 1092			; 00000444H
  00ce8	53		 push	 ebx
  00ce9	ff d6		 call	 esi
  00ceb	50		 push	 eax
  00cec	ff d7		 call	 edi

; 3537 : 
; 3538 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_VOL_HELP);

  00cee	68 09 04 00 00	 push	 1033			; 00000409H
  00cf3	53		 push	 ebx
  00cf4	e8 00 00 00 00	 call	 _ToHyperlink
  00cf9	83 c4 08	 add	 esp, 8

; 3539 : 
; 3540 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00cfc	6a 01		 push	 1
  00cfe	68 10 04 00 00	 push	 1040			; 00000410H
  00d03	53		 push	 ebx
  00d04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00d0a	50		 push	 eax
  00d0b	ff d6		 call	 esi
  00d0d	50		 push	 eax
  00d0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3541 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00d14	6a 01		 push	 1

; 3542 : 
; 3543 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));
; 3544 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));
; 3545 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));
; 3546 : 			break;

  00d16	e9 f6 f5 ff ff	 jmp	 $LN690@PageDialog
$LN304@PageDialog:

; 3547 : 
; 3548 : 		case HIDDEN_VOL_WIZARD_MODE_PAGE:
; 3549 : 
; 3550 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDDEN_VOL_WIZARD_MODE_TITLE"));

  00d1b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@
  00d20	e8 00 00 00 00	 call	 _GetString
  00d25	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00d2b	83 c4 04	 add	 esp, 4
  00d2e	50		 push	 eax
  00d2f	68 e8 03 00 00	 push	 1000			; 000003e8H
  00d34	53		 push	 ebx
  00d35	ff d7		 call	 edi
  00d37	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00d3d	50		 push	 eax
  00d3e	ff d6		 call	 esi
  00d40	50		 push	 eax
  00d41	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3551 : 
; 3552 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_DIRECT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00d47	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  00d4d	6a 01		 push	 1
  00d4f	51		 push	 ecx
  00d50	6a 30		 push	 48			; 00000030H
  00d52	68 0c 04 00 00	 push	 1036			; 0000040cH
  00d57	53		 push	 ebx
  00d58	ff d6		 call	 esi
  00d5a	50		 push	 eax
  00d5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3553 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_FULL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00d61	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  00d67	6a 01		 push	 1
  00d69	52		 push	 edx
  00d6a	6a 30		 push	 48			; 00000030H
  00d6c	68 0b 04 00 00	 push	 1035			; 0000040bH
  00d71	53		 push	 ebx
  00d72	ff d6		 call	 esi
  00d74	50		 push	 eax
  00d75	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3554 : 
; 3555 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenVolDirect ? IDC_HIDVOL_WIZ_MODE_DIRECT : IDC_HIDVOL_WIZ_MODE_FULL));

  00d7b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolDirect
  00d80	f7 d8		 neg	 eax
  00d82	1b c0		 sbb	 eax, eax
  00d84	f7 d8		 neg	 eax
  00d86	05 0b 04 00 00	 add	 eax, 1035		; 0000040bH
  00d8b	50		 push	 eax
  00d8c	53		 push	 ebx
  00d8d	ff d6		 call	 esi
  00d8f	50		 push	 eax
  00d90	e8 00 00 00 00	 call	 _CheckButton

; 3556 : 
; 3557 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOL_WIZARD_MODE_NORMAL_HELP"));

  00d95	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@
  00d9a	e8 00 00 00 00	 call	 _GetString
  00d9f	83 c4 08	 add	 esp, 8
  00da2	50		 push	 eax
  00da3	68 eb 03 00 00	 push	 1003			; 000003ebH
  00da8	53		 push	 ebx
  00da9	ff d6		 call	 esi
  00dab	50		 push	 eax
  00dac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3558 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString ("HIDDEN_VOL_WIZARD_MODE_DIRECT_HELP"));

  00db2	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@
  00db7	e8 00 00 00 00	 call	 _GetString
  00dbc	83 c4 04	 add	 esp, 4
  00dbf	50		 push	 eax
  00dc0	68 ee 03 00 00	 push	 1006			; 000003eeH
  00dc5	53		 push	 ebx
  00dc6	ff d6		 call	 esi
  00dc8	50		 push	 eax
  00dc9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3559 : 
; 3560 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_DIRECT), TRUE);

  00dcf	6a 01		 push	 1
  00dd1	68 0c 04 00 00	 push	 1036			; 0000040cH
  00dd6	53		 push	 ebx
  00dd7	ff d6		 call	 esi
  00dd9	50		 push	 eax
  00dda	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3561 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_FULL), TRUE);

  00de0	6a 01		 push	 1
  00de2	68 0b 04 00 00	 push	 1035			; 0000040bH
  00de7	53		 push	 ebx
  00de8	ff d6		 call	 esi
  00dea	50		 push	 eax
  00deb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3562 : 
; 3563 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00df1	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00df6	e8 00 00 00 00	 call	 _GetString
  00dfb	83 c4 04	 add	 esp, 4

; 3564 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));
; 3565 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));
; 3566 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 3567 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 3568 : 
; 3569 : 			break;

  00dfe	e9 1b f7 ff ff	 jmp	 $LN691@PageDialog
$LN303@PageDialog:

; 3570 : 
; 3571 : 		case VOLUME_LOCATION_PAGE:
; 3572 : 			{
; 3573 : 				char *nID;
; 3574 : 
; 3575 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_SELECT_VOLUME_LOCATION),
; 3576 : 					GetString (bDevice ? "IDC_SELECT_DEVICE" : "IDC_SELECT_FILE"));

  00e03	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00e0a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@
  00e0f	75 05		 jne	 SHORT $LN338@PageDialog
  00e11	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@
$LN338@PageDialog:
  00e16	50		 push	 eax
  00e17	e8 00 00 00 00	 call	 _GetString
  00e1c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00e22	83 c4 04	 add	 esp, 4
  00e25	50		 push	 eax
  00e26	68 0f 04 00 00	 push	 1039			; 0000040fH
  00e2b	53		 push	 ebx
  00e2c	ff d6		 call	 esi
  00e2e	50		 push	 eax
  00e2f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3577 : 
; 3578 : 				if (bHiddenVolDirect && bHiddenVolHost)

  00e35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  00e3b	85 c9		 test	 ecx, ecx
  00e3d	74 13		 je	 SHORT $LN302@PageDialog
  00e3f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00e45	85 d2		 test	 edx, edx
  00e47	74 09		 je	 SHORT $LN302@PageDialog

; 3579 : 				{
; 3580 : 					nID = "FILE_HELP_HIDDEN_HOST_VOL_DIRECT";

  00e49	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133131[ebp], OFFSET ??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@

; 3581 : 				}
; 3582 : 				else

  00e50	eb 3c		 jmp	 SHORT $LN342@PageDialog
$LN302@PageDialog:

; 3583 : 				{
; 3584 : 					if (bDevice)

  00e52	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00e59	74 1b		 je	 SHORT $LN300@PageDialog

; 3585 : 						nID = bHiddenVolHost ? "DEVICE_HELP_HIDDEN_HOST_VOL" : "DEVICE_HELP";

  00e5b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00e60	85 c0		 test	 eax, eax
  00e62	74 09		 je	 SHORT $LN339@PageDialog
  00e64	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133131[ebp], OFFSET ??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@
  00e6b	eb 21		 jmp	 SHORT $LN342@PageDialog
$LN339@PageDialog:
  00e6d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133131[ebp], OFFSET ??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@

; 3586 : 					else

  00e74	eb 18		 jmp	 SHORT $LN342@PageDialog
$LN300@PageDialog:

; 3587 : 						nID = bHiddenVolHost ? "FILE_HELP_HIDDEN_HOST_VOL" : "FILE_HELP";

  00e76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00e7c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133131[ebp], OFFSET ??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@
  00e83	85 c9		 test	 ecx, ecx
  00e85	75 07		 jne	 SHORT $LN342@PageDialog
  00e87	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133131[ebp], OFFSET ??_C@_09GPELPABL@FILE_HELP?$AA@
$LN342@PageDialog:

; 3588 : 				}
; 3589 : 
; 3590 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_RESETCONTENT, 0, 0);

  00e8e	6a 00		 push	 0
  00e90	6a 00		 push	 0
  00e92	68 4b 01 00 00	 push	 331			; 0000014bH
  00e97	68 ea 03 00 00	 push	 1002			; 000003eaH
  00e9c	53		 push	 ebx
  00e9d	ff d6		 call	 esi
  00e9f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00ea5	50		 push	 eax
  00ea6	ff d7		 call	 edi

; 3591 : 
; 3592 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_LIMITTEXT, TC_MAX_PATH, 0);

  00ea8	6a 00		 push	 0
  00eaa	68 04 01 00 00	 push	 260			; 00000104H
  00eaf	68 41 01 00 00	 push	 321			; 00000141H
  00eb4	68 ea 03 00 00	 push	 1002			; 000003eaH
  00eb9	53		 push	 ebx
  00eba	ff d6		 call	 esi
  00ebc	50		 push	 eax
  00ebd	ff d7		 call	 edi

; 3593 : 
; 3594 : 				LoadCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  00ebf	68 ea 03 00 00	 push	 1002			; 000003eaH
  00ec4	53		 push	 ebx
  00ec5	ff d6		 call	 esi
  00ec7	50		 push	 eax
  00ec8	e8 00 00 00 00	 call	 _LoadCombo
  00ecd	83 c4 04	 add	 esp, 4

; 3595 : 
; 3596 : 				SendMessage (GetDlgItem (hwndDlg, IDC_NO_HISTORY), BM_SETCHECK, bHistory ? BST_UNCHECKED : BST_CHECKED, 0);

  00ed0	33 d2		 xor	 edx, edx
  00ed2	39 15 00 00 00
	00		 cmp	 DWORD PTR _bHistory, edx
  00ed8	6a 00		 push	 0
  00eda	0f 94 c2	 sete	 dl
  00edd	52		 push	 edx
  00ede	68 f1 00 00 00	 push	 241			; 000000f1H
  00ee3	68 f4 03 00 00	 push	 1012			; 000003f4H
  00ee8	53		 push	 ebx
  00ee9	ff d6		 call	 esi
  00eeb	50		 push	 eax
  00eec	ff d7		 call	 edi

; 3597 : 
; 3598 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILE_TITLE"));

  00eee	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
  00ef3	e8 00 00 00 00	 call	 _GetString
  00ef8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00efe	83 c4 04	 add	 esp, 4
  00f01	50		 push	 eax
  00f02	68 e8 03 00 00	 push	 1000			; 000003e8H
  00f07	53		 push	 ebx
  00f08	ff d7		 call	 edi
  00f0a	50		 push	 eax
  00f0b	ff d6		 call	 esi
  00f0d	50		 push	 eax
  00f0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3599 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (nID));

  00f14	8b 45 ec	 mov	 eax, DWORD PTR _nID$133131[ebp]
  00f17	50		 push	 eax
  00f18	e8 00 00 00 00	 call	 _GetString
  00f1d	83 c4 04	 add	 esp, 4
  00f20	50		 push	 eax
  00f21	68 eb 03 00 00	 push	 1003			; 000003ebH
  00f26	53		 push	 ebx
  00f27	ff d6		 call	 esi
  00f29	50		 push	 eax
  00f2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3600 : 
; 3601 : 				SetFocus (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  00f30	68 ea 03 00 00	 push	 1002			; 000003eaH
  00f35	53		 push	 ebx
  00f36	ff d6		 call	 esi
  00f38	50		 push	 eax
  00f39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3602 : 
; 3603 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00f3f	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00f44	e8 00 00 00 00	 call	 _GetString
  00f49	83 c4 04	 add	 esp, 4
  00f4c	50		 push	 eax
  00f4d	68 10 04 00 00	 push	 1040			; 00000410H
  00f52	53		 push	 ebx
  00f53	ff d7		 call	 edi
  00f55	50		 push	 eax
  00f56	ff d6		 call	 esi
  00f58	50		 push	 eax
  00f59	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3604 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00f5f	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00f64	e8 00 00 00 00	 call	 _GetString
  00f69	83 c4 04	 add	 esp, 4
  00f6c	50		 push	 eax
  00f6d	68 11 04 00 00	 push	 1041			; 00000411H
  00f72	53		 push	 ebx
  00f73	ff d7		 call	 edi
  00f75	50		 push	 eax
  00f76	ff d6		 call	 esi
  00f78	50		 push	 eax
  00f79	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3605 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00f7f	6a 01		 push	 1
  00f81	68 11 04 00 00	 push	 1041			; 00000411H
  00f86	53		 push	 ebx
  00f87	ff d7		 call	 edi
  00f89	50		 push	 eax
  00f8a	ff d6		 call	 esi
  00f8c	50		 push	 eax
  00f8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3606 : 
; 3607 : 				AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  00f93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  00f99	51		 push	 ecx
  00f9a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00f9f	68 ea 03 00 00	 push	 1002			; 000003eaH
  00fa4	53		 push	 ebx
  00fa5	ff d6		 call	 esi
  00fa7	50		 push	 eax
  00fa8	e8 00 00 00 00	 call	 _AddComboItem
  00fad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3608 : 
; 3609 : 				EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 3610 : 				GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  00fb0	68 10 04 00 00	 push	 1040			; 00000410H
  00fb5	53		 push	 ebx
  00fb6	ff d7		 call	 edi
  00fb8	50		 push	 eax
  00fb9	ff d6		 call	 esi
  00fbb	50		 push	 eax
  00fbc	68 ea 03 00 00	 push	 1002			; 000003eaH
  00fc1	53		 push	 ebx
  00fc2	ff d6		 call	 esi
  00fc4	50		 push	 eax
  00fc5	e8 00 00 00 00	 call	 _EnableDisableFileNext
  00fca	83 c4 08	 add	 esp, 8

; 4230 : 				return 0;

  00fcd	33 c0		 xor	 eax, eax
  00fcf	e9 9f 41 00 00	 jmp	 $LN333@PageDialog
$LN298@PageDialog:

; 3611 : 
; 3612 : 			}
; 3613 : 			break;
; 3614 : 
; 3615 : 		case DEVICE_TRANSFORM_MODE_PAGE:
; 3616 : 
; 3617 : 			if (!bDeviceTransformModeChoiceMade && !bInPlaceEncNonSys)

  00fd4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, 0 ; bDeviceTransformModeChoiceMade
  00fdb	75 39		 jne	 SHORT $LN296@PageDialog
  00fdd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  00fe3	85 d2		 test	 edx, edx
  00fe5	75 2f		 jne	 SHORT $LN296@PageDialog

; 3618 : 			{
; 3619 : 				// The user has not chosen whether to perform in-place encryption or format yet.
; 3620 : 				// We will preselect in-place encryption if the requirements are met and if the
; 3621 : 				// filesystem does not appear empty.
; 3622 : 
; 3623 : 				WaitCursor();

  00fe7	e8 00 00 00 00	 call	 _WaitCursor

; 3624 : 
; 3625 : 				if (CheckRequirementsForNonSysInPlaceEnc (szDiskFile, TRUE))

  00fec	6a 01		 push	 1
  00fee	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00ff3	e8 00 00 00 00	 call	 _CheckRequirementsForNonSysInPlaceEnc
  00ff8	83 c4 08	 add	 esp, 8
  00ffb	85 c0		 test	 eax, eax
  00ffd	74 17		 je	 SHORT $LN296@PageDialog

; 3626 : 				{
; 3627 : 					bInPlaceEncNonSys = (FileSystemAppearsEmpty (szDiskFile) == 0);

  00fff	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01004	e8 00 00 00 00	 call	 _FileSystemAppearsEmpty
  01009	83 c4 04	 add	 esp, 4
  0100c	f7 d8		 neg	 eax
  0100e	1b c0		 sbb	 eax, eax
  01010	40		 inc	 eax
  01011	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
$LN296@PageDialog:

; 3628 : 				}
; 3629 : 			}
; 3630 : 
; 3631 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("DEVICE_TRANSFORM_MODE_PAGE_TITLE"));

  01016	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@
  0101b	e8 00 00 00 00	 call	 _GetString
  01020	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  01026	83 c4 04	 add	 esp, 4
  01029	50		 push	 eax
  0102a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0102f	53		 push	 ebx
  01030	ff d7		 call	 edi
  01032	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01038	50		 push	 eax
  01039	ff d6		 call	 esi
  0103b	50		 push	 eax
  0103c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3632 : 
; 3633 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICE_TRANSFORM_MODE_INPLACE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  01042	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  01047	6a 01		 push	 1
  01049	50		 push	 eax
  0104a	6a 30		 push	 48			; 00000030H
  0104c	68 4e 04 00 00	 push	 1102			; 0000044eH
  01051	53		 push	 ebx
  01052	ff d6		 call	 esi
  01054	50		 push	 eax
  01055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3634 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICE_TRANSFORM_MODE_FORMAT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0105b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  01061	6a 01		 push	 1
  01063	51		 push	 ecx
  01064	6a 30		 push	 48			; 00000030H
  01066	68 4d 04 00 00	 push	 1101			; 0000044dH
  0106b	53		 push	 ebx
  0106c	ff d6		 call	 esi
  0106e	50		 push	 eax
  0106f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3635 : 
; 3636 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_TRANSFORM_MODE_PAGE_FORMAT_HELP"));

  01075	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@
  0107a	e8 00 00 00 00	 call	 _GetString
  0107f	83 c4 04	 add	 esp, 4
  01082	50		 push	 eax
  01083	68 eb 03 00 00	 push	 1003			; 000003ebH
  01088	53		 push	 ebx
  01089	ff d6		 call	 esi
  0108b	50		 push	 eax
  0108c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3637 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString ("DEVICE_TRANSFORM_MODE_PAGE_INPLACE_HELP"));

  01092	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@
  01097	e8 00 00 00 00	 call	 _GetString
  0109c	83 c4 04	 add	 esp, 4
  0109f	50		 push	 eax
  010a0	68 ee 03 00 00	 push	 1006			; 000003eeH
  010a5	53		 push	 ebx
  010a6	ff d6		 call	 esi
  010a8	50		 push	 eax
  010a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3638 : 
; 3639 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  010af	6a 01		 push	 1
  010b1	68 10 04 00 00	 push	 1040			; 00000410H
  010b6	53		 push	 ebx
  010b7	ff d7		 call	 edi
  010b9	50		 push	 eax
  010ba	ff d6		 call	 esi
  010bc	50		 push	 eax
  010bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3640 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  010c3	6a 01		 push	 1
  010c5	68 11 04 00 00	 push	 1041			; 00000411H
  010ca	53		 push	 ebx
  010cb	ff d7		 call	 edi
  010cd	50		 push	 eax
  010ce	ff d6		 call	 esi
  010d0	50		 push	 eax
  010d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3641 : 
; 3642 : 			CheckButton (GetDlgItem (hwndDlg, bInPlaceEncNonSys ? IDC_DEVICE_TRANSFORM_MODE_INPLACE : IDC_DEVICE_TRANSFORM_MODE_FORMAT));

  010d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  010dd	f7 da		 neg	 edx
  010df	1b d2		 sbb	 edx, edx
  010e1	f7 da		 neg	 edx
  010e3	81 c2 4d 04 00
	00		 add	 edx, 1101		; 0000044dH
  010e9	52		 push	 edx
  010ea	53		 push	 ebx
  010eb	ff d6		 call	 esi
  010ed	50		 push	 eax
  010ee	e8 00 00 00 00	 call	 _CheckButton
  010f3	83 c4 04	 add	 esp, 4

; 3643 : 
; 3644 : 			NormalCursor();

  010f6	e8 00 00 00 00	 call	 _NormalCursor

; 4230 : 				return 0;

  010fb	33 c0		 xor	 eax, eax
  010fd	e9 71 40 00 00	 jmp	 $LN333@PageDialog
$LN295@PageDialog:

; 3645 : 
; 3646 : 			break;
; 3647 : 
; 3648 : 		case HIDDEN_VOL_HOST_PRE_CIPHER_PAGE:
; 3649 : 			{
; 3650 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_HOST_PRE_CIPHER_TITLE"));

  01102	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@
  01107	e8 00 00 00 00	 call	 _GetString
  0110c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  01112	83 c4 04	 add	 esp, 4
  01115	50		 push	 eax
  01116	68 e8 03 00 00	 push	 1000			; 000003e8H
  0111b	53		 push	 ebx
  0111c	ff d7		 call	 edi
  0111e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01124	50		 push	 eax
  01125	ff d6		 call	 esi
  01127	50		 push	 eax
  01128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3651 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bHiddenOS ? "HIDVOL_HOST_PRE_CIPHER_HELP_SYSENC" : "HIDVOL_HOST_PRE_CIPHER_HELP"));

  0112e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01133	85 c0		 test	 eax, eax
  01135	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@
  0113a	75 05		 jne	 SHORT $LN344@PageDialog
  0113c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@
$LN344@PageDialog:
  01141	50		 push	 eax
  01142	e8 00 00 00 00	 call	 _GetString
  01147	83 c4 04	 add	 esp, 4
  0114a	50		 push	 eax
  0114b	68 eb 03 00 00	 push	 1003			; 000003ebH
  01150	53		 push	 ebx
  01151	ff d6		 call	 esi
  01153	50		 push	 eax
  01154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3652 : 
; 3653 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0115a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0115f	e8 00 00 00 00	 call	 _GetString
  01164	83 c4 04	 add	 esp, 4
  01167	50		 push	 eax
  01168	68 10 04 00 00	 push	 1040			; 00000410H
  0116d	53		 push	 ebx
  0116e	ff d7		 call	 edi
  01170	50		 push	 eax
  01171	ff d6		 call	 esi
  01173	50		 push	 eax
  01174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3654 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0117a	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0117f	e8 00 00 00 00	 call	 _GetString
  01184	83 c4 04	 add	 esp, 4
  01187	50		 push	 eax
  01188	68 11 04 00 00	 push	 1041			; 00000411H
  0118d	53		 push	 ebx
  0118e	ff d7		 call	 edi
  01190	50		 push	 eax
  01191	ff d6		 call	 esi
  01193	50		 push	 eax
  01194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3655 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0119a	6a 01		 push	 1
  0119c	68 10 04 00 00	 push	 1040			; 00000410H
  011a1	53		 push	 ebx
  011a2	ff d7		 call	 edi
  011a4	50		 push	 eax
  011a5	ff d6		 call	 esi
  011a7	50		 push	 eax
  011a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3656 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  011ae	6a 01		 push	 1
  011b0	68 11 04 00 00	 push	 1041			; 00000411H
  011b5	53		 push	 ebx
  011b6	ff d7		 call	 edi
  011b8	50		 push	 eax
  011b9	ff d6		 call	 esi
  011bb	50		 push	 eax
  011bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3657 : 
; 3658 : 				if (bHiddenOS)

  011c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  011c8	85 c9		 test	 ecx, ecx
  011ca	0f 84 5c 18 00
	00		 je	 $LN328@PageDialog

; 3659 : 				{
; 3660 : 					if (!GetDevicePathForHiddenOS())

  011d0	e8 00 00 00 00	 call	 ?GetDevicePathForHiddenOS@@YAHXZ ; GetDevicePathForHiddenOS
  011d5	85 c0		 test	 eax, eax
  011d7	0f 85 4f 18 00
	00		 jne	 $LN328@PageDialog

; 3661 : 						AbortProcess ("INVALID_PATH");

  011dd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
  011e2	e8 00 00 00 00	 call	 _AbortProcess
  011e7	83 c4 04	 add	 esp, 4

; 4230 : 				return 0;

  011ea	33 c0		 xor	 eax, eax
  011ec	e9 82 3f 00 00	 jmp	 $LN333@PageDialog
$LN292@PageDialog:

; 3662 : 				}
; 3663 : 			}
; 3664 : 			break;
; 3665 : 
; 3666 : 		case HIDDEN_VOL_PRE_CIPHER_PAGE:
; 3667 : 			{
; 3668 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  011f1	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  011f6	e8 00 00 00 00	 call	 _GetString
  011fb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  01201	83 c4 04	 add	 esp, 4
  01204	50		 push	 eax
  01205	68 10 04 00 00	 push	 1040			; 00000410H
  0120a	53		 push	 ebx
  0120b	ff d7		 call	 edi
  0120d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01213	50		 push	 eax
  01214	ff d6		 call	 esi
  01216	50		 push	 eax
  01217	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3669 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0121d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01222	e8 00 00 00 00	 call	 _GetString
  01227	83 c4 04	 add	 esp, 4
  0122a	50		 push	 eax
  0122b	68 11 04 00 00	 push	 1041			; 00000411H
  01230	53		 push	 ebx
  01231	ff d7		 call	 edi
  01233	50		 push	 eax
  01234	ff d6		 call	 esi
  01236	50		 push	 eax
  01237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3670 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0123d	6a 01		 push	 1
  0123f	68 10 04 00 00	 push	 1040			; 00000410H
  01244	53		 push	 ebx
  01245	ff d7		 call	 edi
  01247	50		 push	 eax
  01248	ff d6		 call	 esi
  0124a	50		 push	 eax
  0124b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3671 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  01251	6a 00		 push	 0
  01253	68 11 04 00 00	 push	 1041			; 00000411H
  01258	53		 push	 ebx
  01259	ff d7		 call	 edi
  0125b	50		 push	 eax
  0125c	ff d6		 call	 esi
  0125e	50		 push	 eax
  0125f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3672 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_PRE_CIPHER_TITLE"));

  01265	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@
  0126a	e8 00 00 00 00	 call	 _GetString
  0126f	83 c4 04	 add	 esp, 4
  01272	50		 push	 eax
  01273	68 e8 03 00 00	 push	 1000			; 000003e8H
  01278	53		 push	 ebx
  01279	ff d7		 call	 edi
  0127b	50		 push	 eax
  0127c	ff d6		 call	 esi
  0127e	50		 push	 eax
  0127f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3673 : 
; 3674 : 				if (bHiddenOS)

  01285	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0128b	85 d2		 test	 edx, edx
  0128d	0f 84 d3 00 00
	00		 je	 $LN291@PageDialog

; 3675 : 				{
; 3676 : 					// Verify whether the clone of the OS fits in the hidden volume (the hidden
; 3677 : 					// volume is to host a hidden OS).
; 3678 : 					if (nMaximumHiddenVolSize - TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE_HIGH < GetSystemPartitionSize())

  01293	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  01298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  0129e	81 e9 00 00 02
	00		 sub	 ecx, 131072		; 00020000H
  012a4	89 4d e0	 mov	 DWORD PTR tv6454[ebp], ecx
  012a7	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  012ad	83 d9 00	 sbb	 ecx, 0
  012b0	3b ca		 cmp	 ecx, edx
  012b2	0f 8f 8f 00 00
	00		 jg	 $LN290@PageDialog
  012b8	7c 09		 jl	 SHORT $LN584@PageDialog
  012ba	39 45 e0	 cmp	 DWORD PTR tv6454[ebp], eax
  012bd	0f 83 84 00 00
	00		 jae	 $LN290@PageDialog
$LN584@PageDialog:

; 3679 : 					{
; 3680 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOLUME_TOO_SMALL_FOR_OS_CLONE"));

  012c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@
  012c8	e8 00 00 00 00	 call	 _GetString
  012cd	83 c4 04	 add	 esp, 4
  012d0	50		 push	 eax
  012d1	68 eb 03 00 00	 push	 1003			; 000003ebH
  012d6	53		 push	 ebx
  012d7	ff d6		 call	 esi
  012d9	50		 push	 eax
  012da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3681 : 
; 3682 : 						SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  012e0	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  012e5	e8 00 00 00 00	 call	 _GetString
  012ea	83 c4 04	 add	 esp, 4
  012ed	50		 push	 eax
  012ee	6a 02		 push	 2
  012f0	53		 push	 ebx
  012f1	ff d7		 call	 edi
  012f3	50		 push	 eax
  012f4	ff d6		 call	 esi
  012f6	50		 push	 eax
  012f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3683 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  012fd	6a 01		 push	 1
  012ff	6a 02		 push	 2
  01301	53		 push	 ebx
  01302	ff d7		 call	 edi
  01304	50		 push	 eax
  01305	ff d6		 call	 esi
  01307	50		 push	 eax
  01308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3684 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  0130e	6a 00		 push	 0
  01310	68 10 04 00 00	 push	 1040			; 00000410H
  01315	53		 push	 ebx
  01316	ff d7		 call	 edi
  01318	50		 push	 eax
  01319	ff d6		 call	 esi
  0131b	50		 push	 eax
  0131c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3685 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  01322	6a 00		 push	 0
  01324	68 11 04 00 00	 push	 1041			; 00000411H
  01329	53		 push	 ebx
  0132a	ff d7		 call	 edi
  0132c	50		 push	 eax
  0132d	ff d6		 call	 esi
  0132f	50		 push	 eax
  01330	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3686 : 
; 3687 : 						bConfirmQuit = FALSE;

  01336	33 c0		 xor	 eax, eax
  01338	a3 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, eax ; bConfirmQuit

; 3688 : 						bConfirmQuitSysEncPretest = FALSE;

  0133d	a3 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuitSysEncPretest@@3HC, eax ; bConfirmQuitSysEncPretest

; 4230 : 				return 0;

  01342	e9 2c 3e 00 00	 jmp	 $LN333@PageDialog
$LN290@PageDialog:

; 3689 : 					}
; 3690 : 					else
; 3691 : 					{
; 3692 : 						// The hidden volume must be as large as the system partition
; 3693 : 						nVolumeSize = GetSystemPartitionSize() + TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE_HIGH;	

  01347	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  0134c	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  01351	83 d2 00	 adc	 edx, 0
  01354	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  01359	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx

; 3694 : 
; 3695 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_OS_PRE_CIPHER_HELP"));

  0135f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@

; 3696 : 					}
; 3697 : 				}
; 3698 : 				else

  01364	eb 05		 jmp	 SHORT $LN695@PageDialog
$LN291@PageDialog:

; 3699 : 				{
; 3700 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDVOL_PRE_CIPHER_HELP"));

  01366	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@
$LN695@PageDialog:
  0136b	e8 00 00 00 00	 call	 _GetString
  01370	83 c4 04	 add	 esp, 4
  01373	50		 push	 eax
  01374	68 eb 03 00 00	 push	 1003			; 000003ebH
  01379	53		 push	 ebx
  0137a	ff d6		 call	 esi
  0137c	50		 push	 eax
  0137d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4230 : 				return 0;

  01383	33 c0		 xor	 eax, eax
  01385	e9 e9 3d 00 00	 jmp	 $LN333@PageDialog
$LN287@PageDialog:

; 3701 : 				}
; 3702 : 			}
; 3703 : 			break;
; 3704 : 
; 3705 : 		case CIPHER_PAGE:
; 3706 : 			{
; 3707 : 				int ea, hid;
; 3708 : 				char buf[100];
; 3709 : 
; 3710 : 				// Encryption algorithms
; 3711 : 
; 3712 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_RESETCONTENT, 0, 0);

  0138a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01390	6a 00		 push	 0
  01392	6a 00		 push	 0
  01394	68 4b 01 00 00	 push	 331			; 0000014bH
  01399	68 ea 03 00 00	 push	 1002			; 000003eaH
  0139e	53		 push	 ebx
  0139f	ff d6		 call	 esi
  013a1	50		 push	 eax
  013a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3713 : 
; 3714 : 				if (bHiddenVol)

  013a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  013ad	85 c0		 test	 eax, eax
  013af	74 17		 je	 SHORT $LN286@PageDialog

; 3715 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "CIPHER_HIDVOL_HOST_TITLE" : "CIPHER_HIDVOL_TITLE"));

  013b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  013b7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@
  013bc	85 c9		 test	 ecx, ecx
  013be	75 05		 jne	 SHORT $LN346@PageDialog
  013c0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@
$LN346@PageDialog:
  013c5	50		 push	 eax

; 3716 : 				else

  013c6	eb 05		 jmp	 SHORT $LN675@PageDialog
$LN286@PageDialog:

; 3717 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("CIPHER_TITLE"));

  013c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@
$LN675@PageDialog:
  013cd	e8 00 00 00 00	 call	 _GetString
  013d2	83 c4 04	 add	 esp, 4
  013d5	50		 push	 eax
  013d6	68 e8 03 00 00	 push	 1000			; 000003e8H
  013db	53		 push	 ebx
  013dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  013e2	50		 push	 eax
  013e3	ff d6		 call	 esi
  013e5	50		 push	 eax
  013e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3718 : 
; 3719 : 				for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  013ec	e8 00 00 00 00	 call	 _EAGetFirst
  013f1	8b f8		 mov	 edi, eax
  013f3	85 ff		 test	 edi, edi
  013f5	74 3f		 je	 SHORT $LN282@PageDialog
$LL284@PageDialog:

; 3720 : 				{
; 3721 : 					if (EAIsFormatEnabled (ea))

  013f7	57		 push	 edi
  013f8	e8 00 00 00 00	 call	 _EAIsFormatEnabled
  013fd	83 c4 04	 add	 esp, 4
  01400	85 c0		 test	 eax, eax
  01402	74 23		 je	 SHORT $LN283@PageDialog

; 3722 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_COMBO_BOX), EAGetName (buf, ea), ea);

  01404	57		 push	 edi
  01405	8d 95 5c 10 01
	00		 lea	 edx, DWORD PTR _buf$133174[ebp]
  0140b	57		 push	 edi
  0140c	52		 push	 edx
  0140d	e8 00 00 00 00	 call	 _EAGetName
  01412	83 c4 08	 add	 esp, 8
  01415	50		 push	 eax
  01416	68 ea 03 00 00	 push	 1002			; 000003eaH
  0141b	53		 push	 ebx
  0141c	ff d6		 call	 esi
  0141e	50		 push	 eax
  0141f	e8 00 00 00 00	 call	 _AddComboPair
  01424	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN283@PageDialog:
  01427	57		 push	 edi
  01428	e8 00 00 00 00	 call	 _EAGetNext
  0142d	8b f8		 mov	 edi, eax
  0142f	83 c4 04	 add	 esp, 4
  01432	85 ff		 test	 edi, edi
  01434	75 c1		 jne	 SHORT $LL284@PageDialog
$LN282@PageDialog:

; 3723 : 				}
; 3724 : 
; 3725 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX), &nVolumeEA);

  01436	68 00 00 00 00	 push	 OFFSET ?nVolumeEA@@3HA	; nVolumeEA
  0143b	68 ea 03 00 00	 push	 1002			; 000003eaH
  01440	53		 push	 ebx
  01441	ff d6		 call	 esi
  01443	50		 push	 eax
  01444	e8 00 00 00 00	 call	 _SelectAlgo

; 3726 : 				ComboSelChangeEA (hwndDlg);

  01449	53		 push	 ebx
  0144a	e8 00 00 00 00	 call	 _ComboSelChangeEA
  0144f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3727 : 				SetFocus (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  01452	68 ea 03 00 00	 push	 1002			; 000003eaH
  01457	53		 push	 ebx
  01458	ff d6		 call	 esi
  0145a	50		 push	 eax
  0145b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3728 : 
; 3729 : 				ToHyperlink (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER);

  01461	68 21 04 00 00	 push	 1057			; 00000421H
  01466	53		 push	 ebx
  01467	e8 00 00 00 00	 call	 _ToHyperlink
  0146c	83 c4 08	 add	 esp, 8

; 3730 : 
; 3731 : 				// Hash algorithms
; 3732 : 
; 3733 : 				if (SysEncInEffect ())

  0146f	e8 00 00 00 00	 call	 _SysEncInEffect
  01474	85 c0		 test	 eax, eax
  01476	74 16		 je	 SHORT $LN280@PageDialog

; 3734 : 				{
; 3735 : 					hash_algo = DEFAULT_HASH_ALGORITHM_BOOT;
; 3736 : 					RandSetHashFunction (DEFAULT_HASH_ALGORITHM_BOOT);

  01478	6a 01		 push	 1
  0147a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, 1 ; hash_algo
  01484	e8 00 00 00 00	 call	 _RandSetHashFunction
  01489	83 c4 04	 add	 esp, 4

; 3737 : 				}
; 3738 : 				else

  0148c	eb 0a		 jmp	 SHORT $LN279@PageDialog
$LN280@PageDialog:

; 3739 : 					hash_algo = RandGetHashFunction();

  0148e	e8 00 00 00 00	 call	 _RandGetHashFunction
  01493	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
$LN279@PageDialog:

; 3740 : 
; 3741 : 				for (hid = FIRST_PRF_ID; hid <= LAST_PRF_ID; hid++)

  01498	bf 01 00 00 00	 mov	 edi, 1
  0149d	8d 49 00	 npad	 3
$LL278@PageDialog:

; 3742 : 				{
; 3743 : 					if (!HashIsDeprecated (hid))

  014a0	57		 push	 edi
  014a1	e8 00 00 00 00	 call	 _HashIsDeprecated
  014a6	83 c4 04	 add	 esp, 4
  014a9	85 c0		 test	 eax, eax
  014ab	75 1c		 jne	 SHORT $LN277@PageDialog

; 3744 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), HashGetName(hid), hid);

  014ad	57		 push	 edi
  014ae	57		 push	 edi
  014af	e8 00 00 00 00	 call	 _HashGetName
  014b4	83 c4 04	 add	 esp, 4
  014b7	50		 push	 eax
  014b8	68 f0 03 00 00	 push	 1008			; 000003f0H
  014bd	53		 push	 ebx
  014be	ff d6		 call	 esi
  014c0	50		 push	 eax
  014c1	e8 00 00 00 00	 call	 _AddComboPair
  014c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN277@PageDialog:
  014c9	47		 inc	 edi
  014ca	83 ff 04	 cmp	 edi, 4
  014cd	7e d1		 jle	 SHORT $LL278@PageDialog

; 3745 : 				}
; 3746 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), &hash_algo);

  014cf	68 00 00 00 00	 push	 OFFSET ?hash_algo@@3HA	; hash_algo
  014d4	68 f0 03 00 00	 push	 1008			; 000003f0H
  014d9	53		 push	 ebx
  014da	ff d6		 call	 esi
  014dc	50		 push	 eax
  014dd	e8 00 00 00 00	 call	 _SelectAlgo

; 3747 : 
; 3748 : 				ToHyperlink (hwndDlg, IDC_LINK_HASH_INFO);

  014e2	68 22 04 00 00	 push	 1058			; 00000422H
  014e7	53		 push	 ebx
  014e8	e8 00 00 00 00	 call	 _ToHyperlink

; 3749 : 
; 3750 : 				// Wizard buttons
; 3751 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  014ed	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  014f2	e8 00 00 00 00	 call	 _GetString
  014f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  014fd	83 c4 14	 add	 esp, 20			; 00000014H
$LN714@PageDialog:
  01500	50		 push	 eax
  01501	68 10 04 00 00	 push	 1040			; 00000410H
  01506	53		 push	 ebx
  01507	ff d7		 call	 edi
  01509	50		 push	 eax
  0150a	ff d6		 call	 esi
  0150c	50		 push	 eax
  0150d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3752 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01513	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01518	e8 00 00 00 00	 call	 _GetString
  0151d	83 c4 04	 add	 esp, 4
  01520	50		 push	 eax
  01521	68 11 04 00 00	 push	 1041			; 00000411H
  01526	53		 push	 ebx
  01527	ff d7		 call	 edi
  01529	50		 push	 eax
  0152a	ff d6		 call	 esi
  0152c	50		 push	 eax
  0152d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3753 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01533	6a 01		 push	 1
  01535	68 11 04 00 00	 push	 1041			; 00000411H
  0153a	53		 push	 ebx
  0153b	ff d7		 call	 edi
  0153d	50		 push	 eax
  0153e	ff d6		 call	 esi
  01540	50		 push	 eax
  01541	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN712@PageDialog:

; 3754 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  01547	6a 01		 push	 1
  01549	68 10 04 00 00	 push	 1040			; 00000410H
  0154e	53		 push	 ebx
  0154f	ff d7		 call	 edi
  01551	50		 push	 eax
  01552	ff d6		 call	 esi
  01554	50		 push	 eax
  01555	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4230 : 				return 0;

  0155b	33 c0		 xor	 eax, eax
  0155d	e9 11 3c 00 00	 jmp	 $LN333@PageDialog
$LN274@PageDialog:

; 3755 : 			}
; 3756 : 			break;
; 3757 : 
; 3758 : 		case SIZE_PAGE:
; 3759 : 			{
; 3760 : 				wchar_t str[1000];
; 3761 : 
; 3762 : 				if (bHiddenVolHost)

  01562	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01567	85 c0		 test	 eax, eax
  01569	74 1c		 je	 SHORT $LN273@PageDialog

; 3763 : 				{
; 3764 : 					wcsncpy (str, GetString ("SIZE_HELP_HIDDEN_HOST_VOL"), sizeof (str) / 2);

  0156b	68 e8 03 00 00	 push	 1000			; 000003e8H
  01570	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@
  01575	e8 00 00 00 00	 call	 _GetString
  0157a	83 c4 04	 add	 esp, 4
  0157d	50		 push	 eax
  0157e	8d 8d b0 fe 00
	00		 lea	 ecx, DWORD PTR _str$133191[ebp]
  01584	51		 push	 ecx

; 3765 : 				}
; 3766 : 				else

  01585	eb 2a		 jmp	 SHORT $LN676@PageDialog
$LN273@PageDialog:

; 3767 : 				{
; 3768 : 					wcsncpy (str, GetString (bHiddenVol ? "SIZE_HELP_HIDDEN_VOL" : "SIZE_HELP"), sizeof (str) / 2);

  01587	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0158d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@
  01592	85 d2		 test	 edx, edx
  01594	75 05		 jne	 SHORT $LN348@PageDialog
  01596	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09BEBIICBL@SIZE_HELP?$AA@
$LN348@PageDialog:
  0159b	68 e8 03 00 00	 push	 1000			; 000003e8H
  015a0	50		 push	 eax
  015a1	e8 00 00 00 00	 call	 _GetString
  015a6	83 c4 04	 add	 esp, 4
  015a9	50		 push	 eax
  015aa	8d 85 b0 fe 00
	00		 lea	 eax, DWORD PTR _str$133191[ebp]
  015b0	50		 push	 eax
$LN676@PageDialog:
  015b1	e8 00 00 00 00	 call	 _wcsncpy
  015b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3769 : 				}
; 3770 : 
; 3771 : 				if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  015b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  015c0	74 7d		 je	 SHORT $LN271@PageDialog
  015c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  015c8	85 c9		 test	 ecx, ecx
  015ca	74 0a		 je	 SHORT $LN270@PageDialog
  015cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  015d2	85 d2		 test	 edx, edx
  015d4	74 69		 je	 SHORT $LN271@PageDialog
$LN270@PageDialog:

; 3772 : 				{
; 3773 : 					_snwprintf (str, sizeof str / 2, L"%s%s",
; 3774 : 						GetString ((bHiddenOS && bHiddenVol) ? "SIZE_PARTITION_HIDDEN_SYSENC_HELP" : "SIZE_PARTITION_HELP"),
; 3775 : 						 (bHiddenVolHost && !bHiddenOS) ? GetString ("SIZE_PARTITION_HIDDEN_VOL_HELP") : L"");

  015d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  015db	85 c0		 test	 eax, eax
  015dd	74 19		 je	 SHORT $LN349@PageDialog
  015df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  015e5	85 c9		 test	 ecx, ecx
  015e7	75 0f		 jne	 SHORT $LN349@PageDialog
  015e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@
  015ee	e8 00 00 00 00	 call	 _GetString
  015f3	83 c4 04	 add	 esp, 4
  015f6	eb 05		 jmp	 SHORT $LN350@PageDialog
$LN349@PageDialog:
  015f8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN350@PageDialog:
  015fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01603	85 d2		 test	 edx, edx
  01605	74 0f		 je	 SHORT $LN351@PageDialog
  01607	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0160d	85 c9		 test	 ecx, ecx
  0160f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@
  01614	75 05		 jne	 SHORT $LN352@PageDialog
$LN351@PageDialog:
  01616	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@
$LN352@PageDialog:
  0161b	50		 push	 eax
  0161c	51		 push	 ecx
  0161d	e8 00 00 00 00	 call	 _GetString
  01622	83 c4 04	 add	 esp, 4
  01625	50		 push	 eax
  01626	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  0162b	8d 95 b0 fe 00
	00		 lea	 edx, DWORD PTR _str$133191[ebp]
  01631	68 e8 03 00 00	 push	 1000			; 000003e8H
  01636	52		 push	 edx
  01637	e8 00 00 00 00	 call	 __snwprintf
  0163c	83 c4 14	 add	 esp, 20			; 00000014H
$LN271@PageDialog:

; 3776 : 				}
; 3777 : 
; 3778 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SPACE_LEFT), WM_SETFONT, (WPARAM) hBoldFont, (LPARAM) TRUE);

  0163f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hBoldFont
  01644	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0164a	6a 01		 push	 1
  0164c	50		 push	 eax
  0164d	6a 30		 push	 48			; 00000030H
  0164f	68 f1 03 00 00	 push	 1009			; 000003f1H
  01654	53		 push	 ebx
  01655	ff d6		 call	 esi
  01657	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0165d	50		 push	 eax
  0165e	ff d7		 call	 edi

; 3779 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SIZEBOX), EM_LIMITTEXT, 12, 0);

  01660	6a 00		 push	 0
  01662	6a 0c		 push	 12			; 0000000cH
  01664	68 c5 00 00 00	 push	 197			; 000000c5H
  01669	68 0e 04 00 00	 push	 1038			; 0000040eH
  0166e	53		 push	 ebx
  0166f	ff d6		 call	 esi
  01671	50		 push	 eax
  01672	ff d7		 call	 edi

; 3780 : 
; 3781 : 				if(!QueryFreeSpace (hwndDlg, GetDlgItem (hwndDlg, IDC_SPACE_LEFT), TRUE))

  01674	6a 01		 push	 1
  01676	68 f1 03 00 00	 push	 1009			; 000003f1H
  0167b	53		 push	 ebx
  0167c	ff d6		 call	 esi
  0167e	50		 push	 eax
  0167f	53		 push	 ebx
  01680	e8 00 00 00 00	 call	 _QueryFreeSpace
  01685	83 c4 0c	 add	 esp, 12			; 0000000cH
  01688	85 c0		 test	 eax, eax
  0168a	75 67		 jne	 SHORT $LN269@PageDialog

; 3782 : 				{
; 3783 : 					nUIVolumeSize=0;

  0168c	33 ff		 xor	 edi, edi

; 3784 : 					nVolumeSize=0;
; 3785 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_SIZEBOX), GetString ("UNKNOWN"));

  0168e	68 00 00 00 00	 push	 OFFSET ??_C@_07NFANNNEC@UNKNOWN?$AA@
  01693	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, edi
  01699	89 3d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, edi
  0169f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, edi
  016a5	89 3d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edi
  016ab	e8 00 00 00 00	 call	 _GetString
  016b0	83 c4 04	 add	 esp, 4
  016b3	50		 push	 eax
  016b4	68 0e 04 00 00	 push	 1038			; 0000040eH
  016b9	53		 push	 ebx
  016ba	ff d6		 call	 esi
  016bc	50		 push	 eax
  016bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3786 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), FALSE);

  016c3	57		 push	 edi
$LN678@PageDialog:
  016c4	68 0e 04 00 00	 push	 1038			; 0000040eH
  016c9	53		 push	 ebx
  016ca	ff d6		 call	 esi
  016cc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  016d2	50		 push	 eax
  016d3	ff d7		 call	 edi

; 3787 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), FALSE);

  016d5	6a 00		 push	 0
  016d7	68 f3 03 00 00	 push	 1011			; 000003f3H
  016dc	53		 push	 ebx
  016dd	ff d6		 call	 esi
  016df	50		 push	 eax
  016e0	ff d7		 call	 edi

; 3788 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), FALSE);

  016e2	6a 00		 push	 0
  016e4	68 f5 03 00 00	 push	 1013			; 000003f5H
  016e9	53		 push	 ebx
  016ea	ff d6		 call	 esi
  016ec	50		 push	 eax
  016ed	ff d7		 call	 edi

; 3789 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), FALSE);

  016ef	6a 00		 push	 0
  016f1	eb 50		 jmp	 SHORT $LN677@PageDialog
$LN269@PageDialog:

; 3790 : 
; 3791 : 				}
; 3792 : 				else if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  016f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  016fa	74 18		 je	 SHORT $LN267@PageDialog
  016fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01702	85 c9		 test	 ecx, ecx
  01704	74 0a		 je	 SHORT $LN266@PageDialog
  01706	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0170c	85 d2		 test	 edx, edx
  0170e	74 04		 je	 SHORT $LN267@PageDialog
$LN266@PageDialog:

; 3793 : 				{
; 3794 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), FALSE);

  01710	6a 00		 push	 0

; 3795 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), FALSE);
; 3796 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), FALSE);
; 3797 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), FALSE);
; 3798 : 				}
; 3799 : 				else

  01712	eb b0		 jmp	 SHORT $LN678@PageDialog
$LN267@PageDialog:

; 3800 : 				{
; 3801 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), TRUE);

  01714	6a 01		 push	 1
  01716	68 0e 04 00 00	 push	 1038			; 0000040eH
  0171b	53		 push	 ebx
  0171c	ff d6		 call	 esi
  0171e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  01724	50		 push	 eax
  01725	ff d7		 call	 edi

; 3802 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), TRUE);

  01727	6a 01		 push	 1
  01729	68 f3 03 00 00	 push	 1011			; 000003f3H
  0172e	53		 push	 ebx
  0172f	ff d6		 call	 esi
  01731	50		 push	 eax
  01732	ff d7		 call	 edi

; 3803 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), TRUE);

  01734	6a 01		 push	 1
  01736	68 f5 03 00 00	 push	 1013			; 000003f5H
  0173b	53		 push	 ebx
  0173c	ff d6		 call	 esi
  0173e	50		 push	 eax
  0173f	ff d7		 call	 edi

; 3804 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), TRUE);

  01741	6a 01		 push	 1
$LN677@PageDialog:
  01743	68 f7 03 00 00	 push	 1015			; 000003f7H
  01748	53		 push	 ebx
  01749	ff d6		 call	 esi
  0174b	50		 push	 eax
  0174c	ff d7		 call	 edi

; 3805 : 				}
; 3806 : 
; 3807 : 				SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_UNCHECKED, 0);

  0174e	6a 00		 push	 0
  01750	6a 00		 push	 0
  01752	68 f1 00 00 00	 push	 241			; 000000f1H
  01757	68 f3 03 00 00	 push	 1011			; 000003f3H
  0175c	53		 push	 ebx
  0175d	ff d6		 call	 esi
  0175f	50		 push	 eax
  01760	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3808 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_UNCHECKED, 0);

  01766	6a 00		 push	 0
  01768	6a 00		 push	 0
  0176a	68 f1 00 00 00	 push	 241			; 000000f1H
  0176f	68 f5 03 00 00	 push	 1013			; 000003f5H
  01774	53		 push	 ebx
  01775	ff d6		 call	 esi
  01777	50		 push	 eax
  01778	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3809 : 				SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_UNCHECKED, 0);

  0177e	6a 00		 push	 0
  01780	6a 00		 push	 0
  01782	68 f1 00 00 00	 push	 241			; 000000f1H
  01787	68 f7 03 00 00	 push	 1015			; 000003f7H
  0178c	53		 push	 ebx
  0178d	ff d6		 call	 esi
  0178f	50		 push	 eax
  01790	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3810 : 
; 3811 : 				switch (nMultiplier)

  01796	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  0179b	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  017a0	74 2e		 je	 SHORT $LN262@PageDialog
  017a2	3d 00 00 10 00	 cmp	 eax, 1048576		; 00100000H
  017a7	74 17		 je	 SHORT $LN261@PageDialog
  017a9	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  017ae	75 38		 jne	 SHORT $LN263@PageDialog

; 3819 : 				case BYTES_PER_GB:
; 3820 : 					SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_CHECKED, 0);

  017b0	6a 00		 push	 0
  017b2	6a 01		 push	 1
  017b4	68 f1 00 00 00	 push	 241			; 000000f1H
  017b9	68 f7 03 00 00	 push	 1015			; 000003f7H

; 3821 : 					break;

  017be	eb 1e		 jmp	 SHORT $LN679@PageDialog
$LN261@PageDialog:

; 3815 : 					break;
; 3816 : 				case BYTES_PER_MB:
; 3817 : 					SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_CHECKED, 0);

  017c0	6a 00		 push	 0
  017c2	6a 01		 push	 1
  017c4	68 f1 00 00 00	 push	 241			; 000000f1H
  017c9	68 f5 03 00 00	 push	 1013			; 000003f5H

; 3818 : 					break;

  017ce	eb 0e		 jmp	 SHORT $LN679@PageDialog
$LN262@PageDialog:

; 3812 : 				{
; 3813 : 				case BYTES_PER_KB:
; 3814 : 					SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_CHECKED, 0);

  017d0	6a 00		 push	 0
  017d2	6a 01		 push	 1
  017d4	68 f1 00 00 00	 push	 241			; 000000f1H
  017d9	68 f3 03 00 00	 push	 1011			; 000003f3H
$LN679@PageDialog:
  017de	53		 push	 ebx
  017df	ff d6		 call	 esi
  017e1	50		 push	 eax
  017e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN263@PageDialog:

; 3822 : 				}
; 3823 : 
; 3824 : 				if (nUIVolumeSize != 0)

  017e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nUIVolumeSize@@3_KA
  017ed	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  017f3	8b d0		 mov	 edx, eax
  017f5	0b d1		 or	 edx, ecx
  017f7	74 2c		 je	 SHORT $LN259@PageDialog

; 3825 : 				{
; 3826 : 					char szTmp[32];
; 3827 : 					sprintf (szTmp, "%I64u", nUIVolumeSize);

  017f9	51		 push	 ecx
  017fa	50		 push	 eax
  017fb	8d 85 ec 11 01
	00		 lea	 eax, DWORD PTR _szTmp$133219[ebp]
  01801	68 00 00 00 00	 push	 OFFSET ??_C@_05OINFJHGD@?$CFI64u?$AA@
  01806	50		 push	 eax
  01807	e8 00 00 00 00	 call	 _sprintf
  0180c	83 c4 10	 add	 esp, 16			; 00000010H

; 3828 : 					SetWindowText (GetDlgItem (hwndDlg, IDC_SIZEBOX), szTmp);

  0180f	8d 8d ec 11 01
	00		 lea	 ecx, DWORD PTR _szTmp$133219[ebp]
  01815	51		 push	 ecx
  01816	68 0e 04 00 00	 push	 1038			; 0000040eH
  0181b	53		 push	 ebx
  0181c	ff d6		 call	 esi
  0181e	50		 push	 eax
  0181f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN259@PageDialog:

; 3829 : 				}
; 3830 : 
; 3831 : 				SetFocus (GetDlgItem (hwndDlg, IDC_SIZEBOX));

  01825	68 0e 04 00 00	 push	 1038			; 0000040eH
  0182a	53		 push	 ebx
  0182b	ff d6		 call	 esi
  0182d	50		 push	 eax
  0182e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3832 : 
; 3833 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), str);

  01834	8d 95 b0 fe 00
	00		 lea	 edx, DWORD PTR _str$133191[ebp]
  0183a	52		 push	 edx
  0183b	68 eb 03 00 00	 push	 1003			; 000003ebH
  01840	53		 push	 ebx
  01841	ff d6		 call	 esi
  01843	50		 push	 eax
  01844	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3834 : 
; 3835 : 				if (bHiddenVol)

  0184a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0184f	85 c0		 test	 eax, eax
  01851	74 17		 je	 SHORT $LN258@PageDialog

; 3836 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "SIZE_HIDVOL_HOST_TITLE" : "SIZE_HIDVOL_TITLE"));

  01853	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01859	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@
  0185e	85 c9		 test	 ecx, ecx
  01860	75 05		 jne	 SHORT $LN354@PageDialog
  01862	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@
$LN354@PageDialog:
  01867	50		 push	 eax

; 3837 : 				else

  01868	eb 05		 jmp	 SHORT $LN680@PageDialog
$LN258@PageDialog:

; 3838 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SIZE_TITLE"));

  0186a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@
$LN680@PageDialog:
  0186f	e8 00 00 00 00	 call	 _GetString
  01874	83 c4 04	 add	 esp, 4
  01877	50		 push	 eax
  01878	68 e8 03 00 00	 push	 1000			; 000003e8H
  0187d	53		 push	 ebx
  0187e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01884	50		 push	 eax
  01885	ff d6		 call	 esi
  01887	50		 push	 eax
  01888	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3839 : 
; 3840 : 
; 3841 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0188e	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01893	e8 00 00 00 00	 call	 _GetString
  01898	83 c4 04	 add	 esp, 4
  0189b	50		 push	 eax
  0189c	68 10 04 00 00	 push	 1040			; 00000410H
  018a1	53		 push	 ebx
  018a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  018a8	50		 push	 eax
  018a9	ff d6		 call	 esi
  018ab	50		 push	 eax
  018ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3842 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  018b2	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  018b7	e8 00 00 00 00	 call	 _GetString
  018bc	83 c4 04	 add	 esp, 4
  018bf	50		 push	 eax
  018c0	68 11 04 00 00	 push	 1041			; 00000411H
  018c5	53		 push	 ebx
  018c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  018cc	50		 push	 eax
  018cd	ff d6		 call	 esi
  018cf	50		 push	 eax
  018d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3843 : 
; 3844 : 
; 3845 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  018d6	6a 01		 push	 1
  018d8	68 11 04 00 00	 push	 1041			; 00000411H
  018dd	53		 push	 ebx
  018de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  018e4	50		 push	 eax
  018e5	ff d6		 call	 esi
  018e7	50		 push	 eax
  018e8	ff d7		 call	 edi

; 3846 : 
; 3847 : 				VerifySizeAndUpdate (hwndDlg, FALSE);

  018ea	6a 00		 push	 0
  018ec	8b cb		 mov	 ecx, ebx
  018ee	e8 00 00 00 00	 call	 _VerifySizeAndUpdate
  018f3	83 c4 04	 add	 esp, 4

; 4230 : 				return 0;

  018f6	33 c0		 xor	 eax, eax
  018f8	e9 76 38 00 00	 jmp	 $LN333@PageDialog
$LN256@PageDialog:

; 3848 : 			}
; 3849 : 			break;
; 3850 : 
; 3851 : 		case HIDDEN_VOL_HOST_PASSWORD_PAGE:
; 3852 : 		case NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE:
; 3853 : 
; 3854 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), EM_LIMITTEXT, MAX_PASSWORD, 0);

  018fd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01903	6a 00		 push	 0
  01905	6a 40		 push	 64			; 00000040H
  01907	68 c5 00 00 00	 push	 197			; 000000c5H
  0190c	68 0d 04 00 00	 push	 1037			; 0000040dH
  01911	53		 push	 ebx
  01912	ff d6		 call	 esi
  01914	50		 push	 eax
  01915	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3855 : 
; 3856 : 			SetWindowText (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), szRawPassword);

  0191b	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  01920	68 0d 04 00 00	 push	 1037			; 0000040dH
  01925	53		 push	 ebx
  01926	ff d6		 call	 esi
  01928	50		 push	 eax
  01929	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 3857 : 
; 3858 : 			SetFocus (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT));

  0192f	68 0d 04 00 00	 push	 1037			; 0000040dH
  01934	53		 push	 ebx
  01935	ff d6		 call	 esi
  01937	50		 push	 eax
  01938	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3859 : 
; 3860 : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  0193e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  01944	52		 push	 edx
  01945	68 c5 13 00 00	 push	 5061			; 000013c5H
  0194a	53		 push	 ebx
  0194b	e8 00 00 00 00	 call	 _SetCheckBox

; 3861 : 
; 3862 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE_HELP" : "PASSWORD_HIDDENVOL_HOST_DIRECT_HELP"));

  01950	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  01955	83 c4 0c	 add	 esp, 12			; 0000000cH
  01958	85 c0		 test	 eax, eax
  0195a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@
  0195f	75 05		 jne	 SHORT $LN356@PageDialog
  01961	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@
$LN356@PageDialog:
  01966	50		 push	 eax
  01967	e8 00 00 00 00	 call	 _GetString
  0196c	83 c4 04	 add	 esp, 4
  0196f	50		 push	 eax
  01970	68 eb 03 00 00	 push	 1003			; 000003ebH
  01975	53		 push	 ebx
  01976	ff d6		 call	 esi
  01978	50		 push	 eax
  01979	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3863 : 
; 3864 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bInPlaceEncNonSys ? "PASSWORD" : "PASSWORD_HIDVOL_HOST_TITLE"));

  0197f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01985	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08KENNMKEI@PASSWORD?$AA@
  0198a	85 c9		 test	 ecx, ecx
  0198c	75 05		 jne	 SHORT $LN358@PageDialog
  0198e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
$LN358@PageDialog:
  01993	50		 push	 eax
  01994	e8 00 00 00 00	 call	 _GetString
  01999	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0199f	83 c4 04	 add	 esp, 4
  019a2	50		 push	 eax
  019a3	68 e8 03 00 00	 push	 1000			; 000003e8H
  019a8	53		 push	 ebx
  019a9	ff d7		 call	 edi
  019ab	50		 push	 eax
  019ac	ff d6		 call	 esi
  019ae	50		 push	 eax
  019af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3865 : 
; 3866 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  019b5	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  019ba	e8 00 00 00 00	 call	 _GetString
  019bf	83 c4 04	 add	 esp, 4
  019c2	50		 push	 eax
  019c3	68 10 04 00 00	 push	 1040			; 00000410H
  019c8	53		 push	 ebx
  019c9	ff d7		 call	 edi
  019cb	50		 push	 eax
  019cc	ff d6		 call	 esi
  019ce	50		 push	 eax
  019cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3867 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  019d5	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  019da	e8 00 00 00 00	 call	 _GetString
  019df	83 c4 04	 add	 esp, 4
  019e2	50		 push	 eax
  019e3	68 11 04 00 00	 push	 1041			; 00000411H
  019e8	53		 push	 ebx
  019e9	ff d7		 call	 edi
  019eb	50		 push	 eax
  019ec	ff d6		 call	 esi
  019ee	50		 push	 eax
  019ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3868 : 
; 3869 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bInPlaceEncNonSys);

  019f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  019fb	f7 da		 neg	 edx
  019fd	1b d2		 sbb	 edx, edx
  019ff	42		 inc	 edx
  01a00	52		 push	 edx
  01a01	68 11 04 00 00	 push	 1041			; 00000411H
  01a06	53		 push	 ebx
  01a07	ff d7		 call	 edi
  01a09	50		 push	 eax
  01a0a	ff d6		 call	 esi
  01a0c	50		 push	 eax
  01a0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3870 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  01a13	6a 01		 push	 1
  01a15	68 10 04 00 00	 push	 1040			; 00000410H
  01a1a	53		 push	 ebx
  01a1b	ff d7		 call	 edi
  01a1d	50		 push	 eax
  01a1e	ff d6		 call	 esi
  01a20	50		 push	 eax
  01a21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4230 : 				return 0;

  01a27	33 c0		 xor	 eax, eax
  01a29	e9 45 37 00 00	 jmp	 $LN333@PageDialog
$LN255@PageDialog:

; 3871 : 
; 3872 : 			break;
; 3873 : 
; 3874 : 		case PASSWORD_PAGE:
; 3875 : 			{
; 3876 : 				wchar_t str[1000];
; 3877 : 
; 3878 : 				hPasswordInputField = GetDlgItem (hwndDlg, IDC_PASSWORD);

  01a2e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01a34	68 ec 03 00 00	 push	 1004			; 000003ecH
  01a39	53		 push	 ebx
  01a3a	ff d6		 call	 esi

; 3879 : 				hVerifyPasswordInputField = GetDlgItem (hwndDlg, IDC_VERIFY);

  01a3c	68 f2 03 00 00	 push	 1010			; 000003f2H
  01a41	a3 00 00 00 00	 mov	 DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A, eax ; hPasswordInputField
  01a46	53		 push	 ebx
  01a47	ff d6		 call	 esi
  01a49	a3 00 00 00 00	 mov	 DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A, eax ; hVerifyPasswordInputField

; 3880 : 
; 3881 : 				if (SysEncInEffect ())

  01a4e	e8 00 00 00 00	 call	 _SysEncInEffect
  01a53	85 c0		 test	 eax, eax
  01a55	0f 84 c4 00 00
	00		 je	 $LN251@PageDialog

; 3882 : 				{
; 3883 : 					ToBootPwdField (hwndDlg, IDC_PASSWORD);

  01a5b	68 ec 03 00 00	 push	 1004			; 000003ecH
  01a60	53		 push	 ebx
  01a61	e8 00 00 00 00	 call	 _ToBootPwdField

; 3884 : 					ToBootPwdField (hwndDlg, IDC_VERIFY);

  01a66	68 f2 03 00 00	 push	 1010			; 000003f2H
  01a6b	53		 push	 ebx
  01a6c	e8 00 00 00 00	 call	 _ToBootPwdField

; 3885 : 
; 3886 : 					sprintf (OrigKeyboardLayout, "%08X", (DWORD) GetKeyboardLayout (NULL) & 0xFFFF);

  01a71	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetKeyboardLayout@4
  01a77	83 c4 10	 add	 esp, 16			; 00000010H
  01a7a	6a 00		 push	 0
  01a7c	ff d7		 call	 edi
  01a7e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01a83	50		 push	 eax
  01a84	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X?$AA@
  01a89	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  01a8e	e8 00 00 00 00	 call	 _sprintf
  01a93	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3887 : 
; 3888 : 					if ((DWORD) GetKeyboardLayout (NULL) != 0x00000409 && (DWORD) GetKeyboardLayout (NULL) != 0x04090409)

  01a96	6a 00		 push	 0
  01a98	ff d7		 call	 edi
  01a9a	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  01a9f	74 4d		 je	 SHORT $LN253@PageDialog
  01aa1	6a 00		 push	 0
  01aa3	ff d7		 call	 edi
  01aa5	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  01aaa	74 42		 je	 SHORT $LN253@PageDialog

; 3889 : 					{
; 3890 : 						DWORD keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  01aac	6a 01		 push	 1
  01aae	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  01ab3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 3891 : 
; 3892 : 						if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  01ab9	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  01abe	74 24		 je	 SHORT $LN252@PageDialog
  01ac0	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  01ac5	74 1d		 je	 SHORT $LN252@PageDialog

; 3893 : 						{
; 3894 : 							Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  01ac7	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
$LN702@PageDialog:
  01acc	e8 00 00 00 00	 call	 _Error

; 3895 : 							EndMainDlg (MainDlg);

  01ad1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  01ad7	83 c4 04	 add	 esp, 4
  01ada	e8 00 00 00 00	 call	 _EndMainDlg

; 3896 : 							return 1;

  01adf	e9 8a 36 00 00	 jmp	 $LN681@PageDialog
$LN252@PageDialog:

; 3897 : 						}
; 3898 : 						bKeyboardLayoutChanged = TRUE;

  01ae4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
$LN253@PageDialog:

; 3899 : 					}
; 3900 : 
; 3901 : 					ShowWindow(GetDlgItem(hwndDlg, IDC_SHOW_PASSWORD), SW_HIDE);

  01aee	6a 00		 push	 0
  01af0	68 20 04 00 00	 push	 1056			; 00000420H
  01af5	53		 push	 ebx
  01af6	ff d6		 call	 esi
  01af8	50		 push	 eax
  01af9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 3902 : 
; 3903 : 					if (SetTimer (MainDlg, TIMER_ID_KEYB_LAYOUT_GUARD, TIMER_INTERVAL_KEYB_LAYOUT_GUARD, NULL) == 0)

  01aff	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  01b04	6a 00		 push	 0
  01b06	6a 0a		 push	 10			; 0000000aH
  01b08	68 04 01 00 00	 push	 260			; 00000104H
  01b0d	50		 push	 eax
  01b0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  01b14	85 c0		 test	 eax, eax
  01b16	75 07		 jne	 SHORT $LN251@PageDialog

; 3904 : 					{
; 3905 : 						Error ("CANNOT_SET_TIMER");

  01b18	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@

; 3906 : 						EndMainDlg (MainDlg);
; 3907 : 						return 1;

  01b1d	eb ad		 jmp	 SHORT $LN702@PageDialog
$LN251@PageDialog:

; 3908 : 					}
; 3909 : 				}
; 3910 : 
; 3911 : 				if (bHiddenVolHost)

  01b1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01b25	85 c9		 test	 ecx, ecx
  01b27	74 2c		 je	 SHORT $LN250@PageDialog

; 3912 : 				{
; 3913 : 					wcsncpy (str, GetString (bHiddenOS ? "PASSWORD_SYSENC_OUTERVOL_HELP" : "PASSWORD_HIDDENVOL_HOST_HELP"), sizeof (str) / 2);

  01b29	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01b2f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@
  01b34	85 d2		 test	 edx, edx
  01b36	75 05		 jne	 SHORT $LN360@PageDialog
  01b38	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@
$LN360@PageDialog:
  01b3d	68 e8 03 00 00	 push	 1000			; 000003e8H
  01b42	50		 push	 eax
  01b43	e8 00 00 00 00	 call	 _GetString
  01b48	83 c4 04	 add	 esp, 4
  01b4b	50		 push	 eax
  01b4c	8d 85 80 06 01
	00		 lea	 eax, DWORD PTR _str$133232[ebp]
  01b52	50		 push	 eax
  01b53	eb 6b		 jmp	 SHORT $LN682@PageDialog
$LN250@PageDialog:

; 3914 : 				}
; 3915 : 				else if (bHiddenVol)

  01b55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01b5b	85 c9		 test	 ecx, ecx
  01b5d	74 47		 je	 SHORT $LN248@PageDialog

; 3916 : 				{
; 3917 : 					_snwprintf (str, sizeof str / 2, L"%s%s",
; 3918 : 						GetString (bHiddenOS ? "PASSWORD_HIDDEN_OS_HELP" : "PASSWORD_HIDDENVOL_HELP"),
; 3919 : 						GetString ("PASSWORD_HELP"));

  01b5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01b65	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@
  01b6a	85 d2		 test	 edx, edx
  01b6c	75 05		 jne	 SHORT $LN362@PageDialog
  01b6e	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@
$LN362@PageDialog:
  01b73	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
  01b78	e8 00 00 00 00	 call	 _GetString
  01b7d	83 c4 04	 add	 esp, 4
  01b80	50		 push	 eax
  01b81	57		 push	 edi
  01b82	e8 00 00 00 00	 call	 _GetString
  01b87	83 c4 04	 add	 esp, 4
  01b8a	50		 push	 eax
  01b8b	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  01b90	8d 85 80 06 01
	00		 lea	 eax, DWORD PTR _str$133232[ebp]
  01b96	68 e8 03 00 00	 push	 1000			; 000003e8H
  01b9b	50		 push	 eax
  01b9c	e8 00 00 00 00	 call	 __snwprintf
  01ba1	83 c4 14	 add	 esp, 20			; 00000014H

; 3920 : 				}
; 3921 : 				else

  01ba4	eb 22		 jmp	 SHORT $LN247@PageDialog
$LN248@PageDialog:

; 3922 : 				{
; 3923 : 					wcsncpy (str, GetString ("PASSWORD_HELP"), sizeof (str) / 2);

  01ba6	68 e8 03 00 00	 push	 1000			; 000003e8H
  01bab	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
  01bb0	e8 00 00 00 00	 call	 _GetString
  01bb5	83 c4 04	 add	 esp, 4
  01bb8	50		 push	 eax
  01bb9	8d 8d 80 06 01
	00		 lea	 ecx, DWORD PTR _str$133232[ebp]
  01bbf	51		 push	 ecx
$LN682@PageDialog:
  01bc0	e8 00 00 00 00	 call	 _wcsncpy
  01bc5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN247@PageDialog:

; 3924 : 				}
; 3925 : 
; 3926 : 				SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD), EM_LIMITTEXT, MAX_PASSWORD, 0);

  01bc8	6a 00		 push	 0
  01bca	6a 40		 push	 64			; 00000040H
  01bcc	68 c5 00 00 00	 push	 197			; 000000c5H
  01bd1	68 ec 03 00 00	 push	 1004			; 000003ecH
  01bd6	53		 push	 ebx
  01bd7	ff d6		 call	 esi
  01bd9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  01bdf	50		 push	 eax
  01be0	ff d7		 call	 edi

; 3927 : 				SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY), EM_LIMITTEXT, MAX_PASSWORD, 0);

  01be2	6a 00		 push	 0
  01be4	6a 40		 push	 64			; 00000040H
  01be6	68 c5 00 00 00	 push	 197			; 000000c5H
  01beb	68 f2 03 00 00	 push	 1010			; 000003f2H
  01bf0	53		 push	 ebx
  01bf1	ff d6		 call	 esi
  01bf3	50		 push	 eax
  01bf4	ff d7		 call	 edi

; 3928 : 
; 3929 : 				SetWindowText (GetDlgItem (hwndDlg, IDC_PASSWORD), szRawPassword);

  01bf6	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  01bfb	68 ec 03 00 00	 push	 1004			; 000003ecH
  01c00	53		 push	 ebx
  01c01	ff d6		 call	 esi
  01c03	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  01c09	50		 push	 eax
  01c0a	ff d7		 call	 edi

; 3930 : 				SetWindowText (GetDlgItem (hwndDlg, IDC_VERIFY), szVerify);

  01c0c	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  01c11	68 f2 03 00 00	 push	 1010			; 000003f2H
  01c16	53		 push	 ebx
  01c17	ff d6		 call	 esi
  01c19	50		 push	 eax
  01c1a	ff d7		 call	 edi

; 3931 : 
; 3932 : 				SetFocus (GetDlgItem (hwndDlg, IDC_PASSWORD));

  01c1c	68 ec 03 00 00	 push	 1004			; 000003ecH
  01c21	53		 push	 ebx
  01c22	ff d6		 call	 esi
  01c24	50		 push	 eax
  01c25	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3933 : 
; 3934 : 				SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable && !SysEncInEffect());

  01c2b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  01c32	74 10		 je	 SHORT $LN363@PageDialog
  01c34	e8 00 00 00 00	 call	 _SysEncInEffect
  01c39	85 c0		 test	 eax, eax
  01c3b	75 07		 jne	 SHORT $LN363@PageDialog
  01c3d	b8 01 00 00 00	 mov	 eax, 1
  01c42	eb 02		 jmp	 SHORT $LN364@PageDialog
$LN363@PageDialog:
  01c44	33 c0		 xor	 eax, eax
$LN364@PageDialog:
  01c46	50		 push	 eax
  01c47	68 c5 13 00 00	 push	 5061			; 000013c5H
  01c4c	53		 push	 ebx
  01c4d	e8 00 00 00 00	 call	 _SetCheckBox

; 3935 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  01c52	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  01c58	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c5b	52		 push	 edx
  01c5c	68 02 04 00 00	 push	 1026			; 00000402H
  01c61	53		 push	 ebx
  01c62	ff d6		 call	 esi
  01c64	50		 push	 eax
  01c65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3936 : 
; 3937 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), str);

  01c6b	8d 85 80 06 01
	00		 lea	 eax, DWORD PTR _str$133232[ebp]
  01c71	50		 push	 eax
  01c72	68 eb 03 00 00	 push	 1003			; 000003ebH
  01c77	53		 push	 ebx
  01c78	ff d6		 call	 esi
  01c7a	50		 push	 eax
  01c7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3938 : 
; 3939 : 				if (CreatingHiddenSysVol())

  01c81	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  01c86	85 c0		 test	 eax, eax
  01c88	74 07		 je	 SHORT $LN246@PageDialog

; 3940 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD_HIDDEN_OS_TITLE"));

  01c8a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@
  01c8f	eb 37		 jmp	 SHORT $LN683@PageDialog
$LN246@PageDialog:

; 3941 : 				else if (bHiddenVol)

  01c91	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01c97	85 c9		 test	 ecx, ecx
  01c99	74 17		 je	 SHORT $LN244@PageDialog

; 3942 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "PASSWORD_HIDVOL_HOST_TITLE" : "PASSWORD_HIDVOL_TITLE"));

  01c9b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  01ca1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
  01ca6	85 d2		 test	 edx, edx
  01ca8	75 05		 jne	 SHORT $LN366@PageDialog
  01caa	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@
$LN366@PageDialog:
  01caf	50		 push	 eax
  01cb0	eb 16		 jmp	 SHORT $LN683@PageDialog
$LN244@PageDialog:

; 3943 : 				else if (WizardMode == WIZARD_MODE_SYS_DEVICE)

  01cb2	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  01cb7	83 f8 02	 cmp	 eax, 2
  01cba	75 07		 jne	 SHORT $LN242@PageDialog

; 3944 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD"));

  01cbc	68 00 00 00 00	 push	 OFFSET ??_C@_08KENNMKEI@PASSWORD?$AA@

; 3945 : 				else

  01cc1	eb 05		 jmp	 SHORT $LN683@PageDialog
$LN242@PageDialog:

; 3946 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD_TITLE"));

  01cc3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@
$LN683@PageDialog:
  01cc8	e8 00 00 00 00	 call	 _GetString
  01ccd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  01cd3	83 c4 04	 add	 esp, 4
  01cd6	50		 push	 eax
  01cd7	68 e8 03 00 00	 push	 1000			; 000003e8H
  01cdc	53		 push	 ebx
  01cdd	ff d7		 call	 edi
  01cdf	50		 push	 eax
  01ce0	ff d6		 call	 esi
  01ce2	50		 push	 eax
  01ce3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3947 : 
; 3948 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  01ce9	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01cee	e8 00 00 00 00	 call	 _GetString
  01cf3	83 c4 04	 add	 esp, 4
  01cf6	50		 push	 eax
  01cf7	68 10 04 00 00	 push	 1040			; 00000410H
  01cfc	53		 push	 ebx
  01cfd	ff d7		 call	 edi
  01cff	50		 push	 eax
  01d00	ff d6		 call	 esi
  01d02	50		 push	 eax
  01d03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3949 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01d09	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01d0e	e8 00 00 00 00	 call	 _GetString
  01d13	83 c4 04	 add	 esp, 4
  01d16	50		 push	 eax
  01d17	68 11 04 00 00	 push	 1041			; 00000411H
  01d1c	53		 push	 ebx
  01d1d	ff d7		 call	 edi
  01d1f	50		 push	 eax
  01d20	ff d6		 call	 esi
  01d22	50		 push	 eax
  01d23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3950 : 
; 3951 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01d29	6a 01		 push	 1
  01d2b	68 11 04 00 00	 push	 1041			; 00000411H
  01d30	53		 push	 ebx
  01d31	ff d7		 call	 edi
  01d33	50		 push	 eax
  01d34	ff d6		 call	 esi
  01d36	50		 push	 eax
  01d37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3952 : 
; 3953 : 				VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 3954 : 					 GetDlgItem (hwndDlg, IDC_PASSWORD),
; 3955 : 					   GetDlgItem (hwndDlg, IDC_VERIFY),
; 3956 : 						      NULL,
; 3957 : 							  NULL,
; 3958 : 							  KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  01d3d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  01d44	74 19		 je	 SHORT $LN367@PageDialog
  01d46	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  01d4d	74 10		 je	 SHORT $LN367@PageDialog
  01d4f	e8 00 00 00 00	 call	 _SysEncInEffect
  01d54	85 c0		 test	 eax, eax
  01d56	75 07		 jne	 SHORT $LN367@PageDialog
  01d58	b8 01 00 00 00	 mov	 eax, 1
  01d5d	eb 02		 jmp	 SHORT $LN368@PageDialog
$LN367@PageDialog:
  01d5f	33 c0		 xor	 eax, eax
$LN368@PageDialog:
  01d61	50		 push	 eax
  01d62	6a 00		 push	 0
  01d64	6a 00		 push	 0
  01d66	68 f2 03 00 00	 push	 1010			; 000003f2H
  01d6b	53		 push	 ebx
  01d6c	ff d6		 call	 esi
  01d6e	50		 push	 eax
  01d6f	68 ec 03 00 00	 push	 1004			; 000003ecH
  01d74	53		 push	 ebx
  01d75	ff d6		 call	 esi
  01d77	50		 push	 eax
  01d78	68 10 04 00 00	 push	 1040			; 00000410H
  01d7d	53		 push	 ebx
  01d7e	ff d7		 call	 edi
  01d80	50		 push	 eax
  01d81	ff d6		 call	 esi
  01d83	50		 push	 eax
  01d84	53		 push	 ebx
  01d85	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate

; 3959 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  01d8a	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  01d8f	83 c4 1c	 add	 esp, 28			; 0000001cH
  01d92	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL585@PageDialog:
  01d95	8a 08		 mov	 cl, BYTE PTR [eax]
  01d97	40		 inc	 eax
  01d98	84 c9		 test	 cl, cl
  01d9a	75 f9		 jne	 SHORT $LL585@PageDialog
  01d9c	2b c2		 sub	 eax, edx
  01d9e	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 4230 : 				return 0;

  01da3	33 c0		 xor	 eax, eax
  01da5	e9 c9 33 00 00	 jmp	 $LN333@PageDialog
$LN240@PageDialog:

; 3960 : 			}
; 3961 : 			break;
; 3962 : 
; 3963 : 		case FILESYS_PAGE:
; 3964 : 			{
; 3965 : 				wchar_t szTmp[8192];
; 3966 : 
; 3967 : 				Init2RadButtonPageYesNo (nNeedToStoreFilesOver4GB);

  01daa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA ; nNeedToStoreFilesOver4GB
  01daf	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3968 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILESYS_PAGE_TITLE"));

  01db4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@
  01db9	e8 00 00 00 00	 call	 _GetString
  01dbe	83 c4 04	 add	 esp, 4
  01dc1	50		 push	 eax
  01dc2	68 e8 03 00 00	 push	 1000			; 000003e8H
  01dc7	53		 push	 ebx
  01dc8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01dce	50		 push	 eax
  01dcf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01dd5	50		 push	 eax
  01dd6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3969 : 
; 3970 : 				wcscpy (szTmp, GetString ("FILESYS_PAGE_HELP_QUESTION"));

  01ddc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@
  01de1	e8 00 00 00 00	 call	 _GetString
  01de6	83 c4 04	 add	 esp, 4
  01de9	8d 95 b0 5e 00
	00		 lea	 edx, DWORD PTR _szTmp$133266[ebp]
  01def	90		 npad	 1
$LL369@PageDialog:
  01df0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  01df3	66 89 0a	 mov	 WORD PTR [edx], cx
  01df6	83 c0 02	 add	 eax, 2
  01df9	83 c2 02	 add	 edx, 2
  01dfc	66 85 c9	 test	 cx, cx
  01dff	75 ef		 jne	 SHORT $LL369@PageDialog

; 3971 : 
; 3972 : 				if (bHiddenVolHost)

  01e01	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost

; 3973 : 					wcscat (szTmp, L"\n\n");

  01e07	8d 85 b0 5e 00
	00		 lea	 eax, DWORD PTR _szTmp$133266[ebp]
  01e0d	83 c0 fe	 add	 eax, -2			; fffffffeH
  01e10	85 c9		 test	 ecx, ecx
  01e12	74 21		 je	 SHORT $LL587@PageDialog
$LL586@PageDialog:
  01e14	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  01e18	83 c0 02	 add	 eax, 2
  01e1b	66 85 c9	 test	 cx, cx
  01e1e	75 f4		 jne	 SHORT $LL586@PageDialog
  01e20	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01e26	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  01e2d	89 10		 mov	 DWORD PTR [eax], edx
  01e2f	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 3974 : 				else

  01e33	eb 67		 jmp	 SHORT $LN238@PageDialog
$LL587@PageDialog:

; 3975 : 				{
; 3976 : 					wcscat (szTmp, L"\n\n\n");

  01e35	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  01e39	83 c0 02	 add	 eax, 2
  01e3c	66 85 c9	 test	 cx, cx
  01e3f	75 f4		 jne	 SHORT $LL587@PageDialog
  01e41	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
  01e47	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@+4
  01e4d	89 10		 mov	 DWORD PTR [eax], edx

; 3977 : 					wcscat (szTmp, GetString ("NOTE_BEGINNING"));

  01e4f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  01e54	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  01e57	e8 00 00 00 00	 call	 _GetString
  01e5c	83 c4 04	 add	 esp, 4
  01e5f	8b d0		 mov	 edx, eax
$LL588@PageDialog:
  01e61	66 8b 08	 mov	 cx, WORD PTR [eax]
  01e64	83 c0 02	 add	 eax, 2
  01e67	66 85 c9	 test	 cx, cx
  01e6a	75 f5		 jne	 SHORT $LL588@PageDialog
  01e6c	8d bd b0 5e 00
	00		 lea	 edi, DWORD PTR _szTmp$133266[ebp]
  01e72	2b c2		 sub	 eax, edx
  01e74	83 c7 fe	 add	 edi, -2			; fffffffeH
  01e77	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL589@PageDialog:
  01e80	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  01e84	83 c7 02	 add	 edi, 2
  01e87	66 85 c9	 test	 cx, cx
  01e8a	75 f4		 jne	 SHORT $LL589@PageDialog
  01e8c	8b c8		 mov	 ecx, eax
  01e8e	c1 e9 02	 shr	 ecx, 2
  01e91	8b f2		 mov	 esi, edx
  01e93	f3 a5		 rep movsd
  01e95	8b c8		 mov	 ecx, eax
  01e97	83 e1 03	 and	 ecx, 3
  01e9a	f3 a4		 rep movsb
$LN238@PageDialog:

; 3978 : 				}
; 3979 : 
; 3980 : 				wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION"));

  01e9c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@
  01ea1	e8 00 00 00 00	 call	 _GetString
  01ea6	83 c4 04	 add	 esp, 4
  01ea9	8b d0		 mov	 edx, eax
  01eab	eb 03 8d 49 00	 npad	 5
$LL590@PageDialog:
  01eb0	66 8b 08	 mov	 cx, WORD PTR [eax]
  01eb3	83 c0 02	 add	 eax, 2
  01eb6	66 85 c9	 test	 cx, cx
  01eb9	75 f5		 jne	 SHORT $LL590@PageDialog
  01ebb	8d bd b0 5e 00
	00		 lea	 edi, DWORD PTR _szTmp$133266[ebp]
  01ec1	2b c2		 sub	 eax, edx
  01ec3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL591@PageDialog:
  01ec6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  01eca	83 c7 02	 add	 edi, 2
  01ecd	66 85 c9	 test	 cx, cx
  01ed0	75 f4		 jne	 SHORT $LL591@PageDialog
  01ed2	8b c8		 mov	 ecx, eax
  01ed4	c1 e9 02	 shr	 ecx, 2
  01ed7	8b f2		 mov	 esi, edx

; 3981 : 
; 3982 : 				if (bHiddenVolHost)

  01ed9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  01edf	f3 a5		 rep movsd
  01ee1	8b c8		 mov	 ecx, eax
  01ee3	83 e1 03	 and	 ecx, 3
  01ee6	f3 a4		 rep movsb
  01ee8	85 d2		 test	 edx, edx
  01eea	74 60		 je	 SHORT $LN237@PageDialog

; 3983 : 				{
; 3984 : 					wcscat (szTmp, L" ");

  01eec	8d bd b0 5e 00
	00		 lea	 edi, DWORD PTR _szTmp$133266[ebp]
  01ef2	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL592@PageDialog:
  01ef5	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  01ef9	83 c7 02	 add	 edi, 2
  01efc	66 85 c0	 test	 ax, ax
  01eff	75 f4		 jne	 SHORT $LL592@PageDialog
  01f01	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@

; 3985 : 					wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL"));

  01f06	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
  01f0b	89 07		 mov	 DWORD PTR [edi], eax
  01f0d	e8 00 00 00 00	 call	 _GetString
  01f12	83 c4 04	 add	 esp, 4
  01f15	8b d0		 mov	 edx, eax
$LL593@PageDialog:
  01f17	66 8b 08	 mov	 cx, WORD PTR [eax]
  01f1a	83 c0 02	 add	 eax, 2
  01f1d	66 85 c9	 test	 cx, cx
  01f20	75 f5		 jne	 SHORT $LL593@PageDialog
  01f22	8d bd b0 5e 00
	00		 lea	 edi, DWORD PTR _szTmp$133266[ebp]
  01f28	2b c2		 sub	 eax, edx
  01f2a	83 c7 fe	 add	 edi, -2			; fffffffeH
  01f2d	8d 49 00	 npad	 3
$LL594@PageDialog:
  01f30	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  01f34	83 c7 02	 add	 edi, 2
  01f37	66 85 c9	 test	 cx, cx
  01f3a	75 f4		 jne	 SHORT $LL594@PageDialog
  01f3c	8b c8		 mov	 ecx, eax
  01f3e	c1 e9 02	 shr	 ecx, 2
  01f41	8b f2		 mov	 esi, edx
  01f43	f3 a5		 rep movsd
  01f45	8b c8		 mov	 ecx, eax
  01f47	83 e1 03	 and	 ecx, 3
  01f4a	f3 a4		 rep movsb
$LN237@PageDialog:

; 3986 : 				}
; 3987 : 
; 3988 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), szTmp);

  01f4c	8d 8d b0 5e 00
	00		 lea	 ecx, DWORD PTR _szTmp$133266[ebp]
  01f52	51		 push	 ecx
  01f53	68 eb 03 00 00	 push	 1003			; 000003ebH
  01f58	53		 push	 ebx
  01f59	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01f5f	50		 push	 eax
  01f60	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4230 : 				return 0;

  01f66	33 c0		 xor	 eax, eax
  01f68	e9 06 32 00 00	 jmp	 $LN333@PageDialog
$LN236@PageDialog:

; 3989 : 			}
; 3990 : 			break;
; 3991 : 
; 3992 : 		case SYSENC_COLLECTING_RANDOM_DATA_PAGE:
; 3993 : 		case NONSYS_INPLACE_ENC_RAND_DATA_PAGE:
; 3994 : 
; 3995 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("COLLECTING_RANDOM_DATA_TITLE"));

  01f6d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@
  01f72	e8 00 00 00 00	 call	 _GetString
  01f77	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  01f7d	83 c4 04	 add	 esp, 4
  01f80	50		 push	 eax
  01f81	68 e8 03 00 00	 push	 1000			; 000003e8H
  01f86	53		 push	 ebx
  01f87	ff d7		 call	 edi
  01f89	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01f8f	50		 push	 eax
  01f90	ff d6		 call	 esi
  01f92	50		 push	 eax
  01f93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3996 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  01f99	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01f9e	e8 00 00 00 00	 call	 _GetString
  01fa3	83 c4 04	 add	 esp, 4
  01fa6	50		 push	 eax
  01fa7	68 10 04 00 00	 push	 1040			; 00000410H
  01fac	53		 push	 ebx
  01fad	ff d7		 call	 edi
  01faf	50		 push	 eax
  01fb0	ff d6		 call	 esi
  01fb2	50		 push	 eax
  01fb3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3997 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01fb9	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01fbe	e8 00 00 00 00	 call	 _GetString
  01fc3	83 c4 04	 add	 esp, 4
  01fc6	50		 push	 eax
  01fc7	68 11 04 00 00	 push	 1041			; 00000411H
  01fcc	53		 push	 ebx
  01fcd	ff d7		 call	 edi
  01fcf	50		 push	 eax
  01fd0	ff d6		 call	 esi
  01fd2	50		 push	 eax
  01fd3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3998 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  01fd9	6a 01		 push	 1
  01fdb	68 10 04 00 00	 push	 1040			; 00000410H
  01fe0	53		 push	 ebx
  01fe1	ff d7		 call	 edi
  01fe3	50		 push	 eax
  01fe4	ff d6		 call	 esi
  01fe6	50		 push	 eax
  01fe7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3999 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01fed	6a 01		 push	 1
  01fef	68 11 04 00 00	 push	 1041			; 00000411H
  01ff4	53		 push	 ebx
  01ff5	ff d7		 call	 edi
  01ff7	50		 push	 eax
  01ff8	ff d6		 call	 esi
  01ffa	50		 push	 eax
  01ffb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4000 : 
; 4001 : 			SetTimer (GetParent (hwndDlg), TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  02001	6a 00		 push	 0
  02003	6a 1e		 push	 30			; 0000001eH
  02005	68 ff 00 00 00	 push	 255			; 000000ffH
  0200a	53		 push	 ebx
  0200b	ff d7		 call	 edi
  0200d	50		 push	 eax
  0200e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 4002 : 
; 4003 : 			hRandPoolSys = GetDlgItem (hwndDlg, IDC_SYS_POOL_CONTENTS);

  02014	68 38 04 00 00	 push	 1080			; 00000438H
  02019	53		 push	 ebx
  0201a	ff d6		 call	 esi

; 4004 : 
; 4005 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_POOL_CONTENTS), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  0201c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hFixedDigitFont
  02022	6a 01		 push	 1
  02024	52		 push	 edx
  02025	6a 30		 push	 48			; 00000030H
  02027	68 38 04 00 00	 push	 1080			; 00000438H
  0202c	53		 push	 ebx
  0202d	a3 00 00 00 00	 mov	 DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A, eax ; hRandPoolSys
  02032	ff d6		 call	 esi
  02034	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0203a	50		 push	 eax
  0203b	ff d7		 call	 edi

; 4006 : 
; 4007 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISPLAY_POOL_CONTENTS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  0203d	33 c0		 xor	 eax, eax
  0203f	39 05 00 00 00
	00		 cmp	 DWORD PTR _showKeys, eax
  02045	6a 00		 push	 0
  02047	0f 95 c0	 setne	 al
  0204a	50		 push	 eax
  0204b	68 f1 00 00 00	 push	 241			; 000000f1H
  02050	68 da 13 00 00	 push	 5082			; 000013daH
  02055	53		 push	 ebx
  02056	ff d6		 call	 esi
  02058	50		 push	 eax
  02059	ff d7		 call	 edi

; 4008 : 
; 4009 : 			DisplayRandPool (hRandPoolSys, showKeys);

  0205b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _showKeys
  02061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  02067	51		 push	 ecx
  02068	52		 push	 edx
  02069	e8 00 00 00 00	 call	 _DisplayRandPool
  0206e	83 c4 08	 add	 esp, 8

; 4230 : 				return 0;

  02071	33 c0		 xor	 eax, eax
  02073	e9 fb 30 00 00	 jmp	 $LN333@PageDialog
$LN235@PageDialog:

; 4010 : 
; 4011 : 			break;
; 4012 : 
; 4013 : 		case SYSENC_KEYS_GEN_PAGE:
; 4014 : 
; 4015 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("KEYS_GEN_TITLE"));

  02078	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@
  0207d	e8 00 00 00 00	 call	 _GetString
  02082	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  02088	83 c4 04	 add	 esp, 4
  0208b	50		 push	 eax
  0208c	68 e8 03 00 00	 push	 1000			; 000003e8H
  02091	53		 push	 ebx
  02092	ff d7		 call	 edi
  02094	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0209a	50		 push	 eax
  0209b	ff d6		 call	 esi
  0209d	50		 push	 eax
  0209e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4016 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  020a4	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  020a9	e8 00 00 00 00	 call	 _GetString
  020ae	83 c4 04	 add	 esp, 4
  020b1	50		 push	 eax
  020b2	68 10 04 00 00	 push	 1040			; 00000410H
  020b7	53		 push	 ebx
  020b8	ff d7		 call	 edi
  020ba	50		 push	 eax
  020bb	ff d6		 call	 esi
  020bd	50		 push	 eax
  020be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4017 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  020c4	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  020c9	e8 00 00 00 00	 call	 _GetString
  020ce	83 c4 04	 add	 esp, 4
  020d1	50		 push	 eax
  020d2	68 11 04 00 00	 push	 1041			; 00000411H
  020d7	53		 push	 ebx
  020d8	ff d7		 call	 edi
  020da	50		 push	 eax
  020db	ff d6		 call	 esi
  020dd	50		 push	 eax
  020de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4018 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  020e4	6a 01		 push	 1
  020e6	68 10 04 00 00	 push	 1040			; 00000410H
  020eb	53		 push	 ebx
  020ec	ff d7		 call	 edi
  020ee	50		 push	 eax
  020ef	ff d6		 call	 esi
  020f1	50		 push	 eax
  020f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4019 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  020f8	6a 01		 push	 1
  020fa	68 11 04 00 00	 push	 1041			; 00000411H
  020ff	53		 push	 ebx
  02100	ff d7		 call	 edi
  02102	50		 push	 eax
  02103	ff d6		 call	 esi
  02105	50		 push	 eax
  02106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4020 : 
; 4021 : 			hMasterKey = GetDlgItem (hwndDlg, IDC_DISK_KEY);

  0210c	68 fb 03 00 00	 push	 1019			; 000003fbH
  02111	53		 push	 ebx
  02112	ff d6		 call	 esi

; 4022 : 			hHeaderKey = GetDlgItem (hwndDlg, IDC_HEADER_KEY);

  02114	68 f9 03 00 00	 push	 1017			; 000003f9H
  02119	a3 00 00 00 00	 mov	 DWORD PTR _hMasterKey, eax
  0211e	53		 push	 ebx
  0211f	ff d6		 call	 esi

; 4023 : 
; 4024 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISK_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  02121	6a 01		 push	 1
  02123	a3 00 00 00 00	 mov	 DWORD PTR _hHeaderKey, eax
  02128	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  0212d	50		 push	 eax
  0212e	6a 30		 push	 48			; 00000030H
  02130	68 fb 03 00 00	 push	 1019			; 000003fbH
  02135	53		 push	 ebx
  02136	ff d6		 call	 esi
  02138	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0213e	50		 push	 eax
  0213f	ff d7		 call	 edi

; 4025 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HEADER_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  02141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hFixedDigitFont
  02147	6a 01		 push	 1
  02149	51		 push	 ecx
  0214a	6a 30		 push	 48			; 00000030H
  0214c	68 f9 03 00 00	 push	 1017			; 000003f9H
  02151	53		 push	 ebx
  02152	ff d6		 call	 esi
  02154	50		 push	 eax
  02155	ff d7		 call	 edi

; 4026 : 
; 4027 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISPLAY_KEYS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  02157	33 d2		 xor	 edx, edx
  02159	39 15 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edx
  0215f	6a 00		 push	 0
  02161	0f 95 c2	 setne	 dl
  02164	52		 push	 edx
  02165	68 f1 00 00 00	 push	 241			; 000000f1H
  0216a	68 40 04 00 00	 push	 1088			; 00000440H
  0216f	53		 push	 ebx
  02170	ff d6		 call	 esi
  02172	50		 push	 eax
  02173	ff d7		 call	 edi

; 4028 : 
; 4029 : 			DisplayPortionsOfKeys (hHeaderKey, hMasterKey, HeaderKeyGUIView, MasterKeyGUIView, !showKeys);

  02175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hMasterKey
  0217b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hHeaderKey
  02181	33 c0		 xor	 eax, eax
  02183	39 05 00 00 00
	00		 cmp	 DWORD PTR _showKeys, eax
  02189	0f 94 c0	 sete	 al
  0218c	50		 push	 eax
  0218d	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  02192	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  02197	51		 push	 ecx
  02198	52		 push	 edx
  02199	e8 00 00 00 00	 call	 _DisplayPortionsOfKeys
  0219e	83 c4 14	 add	 esp, 20			; 00000014H

; 4230 : 				return 0;

  021a1	33 c0		 xor	 eax, eax
  021a3	e9 cb 2f 00 00	 jmp	 $LN333@PageDialog
$LN234@PageDialog:

; 4030 : 
; 4031 : 			break;
; 4032 : 
; 4033 : 		case SYSENC_RESCUE_DISK_CREATION_PAGE:
; 4034 : 
; 4035 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK"));

  021a8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@
  021ad	e8 00 00 00 00	 call	 _GetString
  021b2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  021b8	83 c4 04	 add	 esp, 4
  021bb	50		 push	 eax
  021bc	68 e8 03 00 00	 push	 1000			; 000003e8H
  021c1	53		 push	 ebx
  021c2	ff d7		 call	 edi
  021c4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  021ca	50		 push	 eax
  021cb	ff d6		 call	 esi
  021cd	50		 push	 eax
  021ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4036 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  021d4	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  021d9	e8 00 00 00 00	 call	 _GetString
  021de	83 c4 04	 add	 esp, 4
  021e1	50		 push	 eax
  021e2	68 10 04 00 00	 push	 1040			; 00000410H
  021e7	53		 push	 ebx
  021e8	ff d7		 call	 edi
  021ea	50		 push	 eax
  021eb	ff d6		 call	 esi
  021ed	50		 push	 eax
  021ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4037 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  021f4	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  021f9	e8 00 00 00 00	 call	 _GetString
  021fe	83 c4 04	 add	 esp, 4
  02201	50		 push	 eax
  02202	68 11 04 00 00	 push	 1041			; 00000411H
  02207	53		 push	 ebx
  02208	ff d7		 call	 edi
  0220a	50		 push	 eax
  0220b	ff d6		 call	 esi
  0220d	50		 push	 eax
  0220e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4038 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_RESCUE_DISK_INFO), GetString ("RESCUE_DISK_INFO"));

  02214	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@
  02219	e8 00 00 00 00	 call	 _GetString
  0221e	83 c4 04	 add	 esp, 4
  02221	50		 push	 eax
  02222	68 2f 04 00 00	 push	 1071			; 0000042fH
  02227	53		 push	 ebx
  02228	ff d6		 call	 esi
  0222a	50		 push	 eax
  0222b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4039 : 			SetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO);

  02231	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  02236	68 e9 03 00 00	 push	 1001			; 000003e9H
  0223b	53		 push	 ebx
  0223c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 4040 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), (GetWindowTextLength (GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  02242	68 e9 03 00 00	 push	 1001			; 000003e9H
  02247	53		 push	 ebx
  02248	ff d6		 call	 esi
  0224a	50		 push	 eax
  0224b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  02251	33 c9		 xor	 ecx, ecx
  02253	83 f8 01	 cmp	 eax, 1
  02256	0f 9f c1	 setg	 cl
  02259	51		 push	 ecx

; 4041 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 4042 : 
; 4043 : 			break;

  0225a	e9 11 e3 ff ff	 jmp	 $LN693@PageDialog
$LN233@PageDialog:

; 4044 : 
; 4045 : 		case SYSENC_RESCUE_DISK_BURN_PAGE:
; 4046 : 			{
; 4047 : 				wchar_t szTmp[8192];
; 4048 : 
; 4049 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bDontVerifyRescueDisk ? "RESCUE_DISK_CREATED_TITLE" : "RESCUE_DISK_RECORDING_TITLE"));

  0225f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  02266	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@
  0226b	75 05		 jne	 SHORT $LN371@PageDialog
  0226d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@
$LN371@PageDialog:
  02272	50		 push	 eax
  02273	e8 00 00 00 00	 call	 _GetString
  02278	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0227e	83 c4 04	 add	 esp, 4
  02281	50		 push	 eax
  02282	68 e8 03 00 00	 push	 1000			; 000003e8H
  02287	53		 push	 ebx
  02288	ff d7		 call	 edi
  0228a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02290	50		 push	 eax
  02291	ff d6		 call	 esi
  02293	50		 push	 eax
  02294	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4050 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0229a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0229f	e8 00 00 00 00	 call	 _GetString
  022a4	83 c4 04	 add	 esp, 4
  022a7	50		 push	 eax
  022a8	68 10 04 00 00	 push	 1040			; 00000410H
  022ad	53		 push	 ebx
  022ae	ff d7		 call	 edi
  022b0	50		 push	 eax
  022b1	ff d6		 call	 esi
  022b3	50		 push	 eax
  022b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4051 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  022ba	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  022bf	e8 00 00 00 00	 call	 _GetString
  022c4	83 c4 04	 add	 esp, 4
  022c7	50		 push	 eax
  022c8	68 11 04 00 00	 push	 1041			; 00000411H
  022cd	53		 push	 ebx
  022ce	ff d7		 call	 edi
  022d0	50		 push	 eax
  022d1	ff d6		 call	 esi
  022d3	50		 push	 eax
  022d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4052 : 
; 4053 : 				_snwprintf (szTmp, sizeof szTmp / 2,
; 4054 : 					GetString (bDontVerifyRescueDisk ? "RESCUE_DISK_BURN_INFO_NO_CHECK" : "RESCUE_DISK_BURN_INFO"),
; 4055 : 					szRescueDiskISO, IsWindowsIsoBurnerAvailable() ? L"" : GetString ("RESCUE_DISK_BURN_INFO_NONWIN_ISO_BURNER"));

  022da	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  022df	85 c0		 test	 eax, eax
  022e1	74 07		 je	 SHORT $LN372@PageDialog
  022e3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  022e8	eb 0d		 jmp	 SHORT $LN373@PageDialog
$LN372@PageDialog:
  022ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@
  022ef	e8 00 00 00 00	 call	 _GetString
  022f4	83 c4 04	 add	 esp, 4
$LN373@PageDialog:
  022f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  022fe	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@
  02303	75 05		 jne	 SHORT $LN375@PageDialog
  02305	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@
$LN375@PageDialog:
  0230a	50		 push	 eax
  0230b	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  02310	51		 push	 ecx
  02311	e8 00 00 00 00	 call	 _GetString
  02316	83 c4 04	 add	 esp, 4
  02319	50		 push	 eax
  0231a	8d 95 b0 be 00
	00		 lea	 edx, DWORD PTR _szTmp$133290[ebp]
  02320	68 00 20 00 00	 push	 8192			; 00002000H
  02325	52		 push	 edx
  02326	e8 00 00 00 00	 call	 __snwprintf
  0232b	83 c4 14	 add	 esp, 20			; 00000014H

; 4056 : 
; 4057 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDT_RESCUE_DISK_BURN_INFO), szTmp);

  0232e	8d 85 b0 be 00
	00		 lea	 eax, DWORD PTR _szTmp$133290[ebp]
  02334	50		 push	 eax
  02335	68 3b 04 00 00	 push	 1083			; 0000043bH
  0233a	53		 push	 ebx
  0233b	ff d6		 call	 esi
  0233d	50		 push	 eax
  0233e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4058 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02344	6a 01		 push	 1
  02346	68 10 04 00 00	 push	 1040			; 00000410H
  0234b	53		 push	 ebx
  0234c	ff d7		 call	 edi
  0234e	50		 push	 eax
  0234f	ff d6		 call	 esi
  02351	50		 push	 eax
  02352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4059 : 
; 4060 : 				/* The 'Back' button must be disabled now because the user could burn a Rescue Disk, then go back, and
; 4061 : 				generate a different master key, which would cause the Rescue Disk verification to fail (the result
; 4062 : 				would be confusion and bug reports). */
; 4063 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  02358	6a 00		 push	 0
  0235a	68 11 04 00 00	 push	 1041			; 00000411H
  0235f	53		 push	 ebx
  02360	ff d7		 call	 edi
  02362	50		 push	 eax
  02363	ff d6		 call	 esi
  02365	50		 push	 eax
  02366	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4064 : 
; 4065 : 				if (IsWindowsIsoBurnerAvailable())

  0236c	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  02371	85 c0		 test	 eax, eax
  02373	74 1d		 je	 SHORT $LN232@PageDialog

; 4066 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_DOWNLOAD_CD_BURN_SOFTWARE), GetString ("LAUNCH_WIN_ISOBURN"));

  02375	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@
  0237a	e8 00 00 00 00	 call	 _GetString
  0237f	83 c4 04	 add	 esp, 4
  02382	50		 push	 eax
  02383	68 3a 04 00 00	 push	 1082			; 0000043aH
  02388	53		 push	 ebx
  02389	ff d6		 call	 esi
  0238b	50		 push	 eax
  0238c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN232@PageDialog:

; 4067 : 
; 4068 : 				ToHyperlink (hwndDlg, IDC_DOWNLOAD_CD_BURN_SOFTWARE);

  02392	68 3a 04 00 00	 push	 1082			; 0000043aH
  02397	53		 push	 ebx
  02398	e8 00 00 00 00	 call	 _ToHyperlink
  0239d	83 c4 08	 add	 esp, 8

; 4069 : 
; 4070 : 				if (IsWindowsIsoBurnerAvailable() && !bDontVerifyRescueDisk)

  023a0	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  023a5	85 c0		 test	 eax, eax
  023a7	0f 84 7f 06 00
	00		 je	 $LN328@PageDialog
  023ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  023b4	0f 85 72 06 00
	00		 jne	 $LN328@PageDialog

; 4071 : 					LaunchWindowsIsoBurner (hwndDlg, szRescueDiskISO);

  023ba	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  023bf	53		 push	 ebx
  023c0	e8 00 00 00 00	 call	 _LaunchWindowsIsoBurner
  023c5	83 c4 08	 add	 esp, 8

; 4230 : 				return 0;

  023c8	33 c0		 xor	 eax, eax
  023ca	e9 a4 2d 00 00	 jmp	 $LN333@PageDialog
$LN230@PageDialog:

; 4072 : 			}
; 4073 : 			break;
; 4074 : 
; 4075 : 		case SYSENC_RESCUE_DISK_VERIFIED_PAGE:
; 4076 : 
; 4077 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK_DISK_VERIFIED_TITLE"));

  023cf	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@
  023d4	e8 00 00 00 00	 call	 _GetString
  023d9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  023df	83 c4 04	 add	 esp, 4
  023e2	50		 push	 eax
  023e3	68 e8 03 00 00	 push	 1000			; 000003e8H
  023e8	53		 push	 ebx
  023e9	ff d7		 call	 edi
  023eb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  023f1	50		 push	 eax
  023f2	ff d6		 call	 esi
  023f4	50		 push	 eax
  023f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4078 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("RESCUE_DISK_VERIFIED_INFO"));

  023fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@
  02400	e8 00 00 00 00	 call	 _GetString
  02405	83 c4 04	 add	 esp, 4
  02408	50		 push	 eax
  02409	68 eb 03 00 00	 push	 1003			; 000003ebH
  0240e	53		 push	 ebx
  0240f	ff d6		 call	 esi
  02411	50		 push	 eax
  02412	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4079 : 
; 4080 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02418	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0241d	e8 00 00 00 00	 call	 _GetString
  02422	83 c4 04	 add	 esp, 4
  02425	50		 push	 eax
  02426	68 10 04 00 00	 push	 1040			; 00000410H
  0242b	53		 push	 ebx
  0242c	ff d7		 call	 edi
  0242e	50		 push	 eax
  0242f	ff d6		 call	 esi
  02431	50		 push	 eax
  02432	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4081 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02438	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0243d	e8 00 00 00 00	 call	 _GetString
  02442	83 c4 04	 add	 esp, 4
  02445	50		 push	 eax
  02446	68 11 04 00 00	 push	 1041			; 00000411H
  0244b	53		 push	 ebx
  0244c	ff d7		 call	 edi
  0244e	50		 push	 eax
  0244f	ff d6		 call	 esi
  02451	50		 push	 eax
  02452	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4082 : 
; 4083 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02458	6a 01		 push	 1
  0245a	68 10 04 00 00	 push	 1040			; 00000410H
  0245f	53		 push	 ebx
  02460	ff d7		 call	 edi
  02462	50		 push	 eax
  02463	ff d6		 call	 esi
  02465	50		 push	 eax
  02466	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4084 : 
; 4085 : 			// Rescue Disk has been verified, no need to go back
; 4086 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  0246c	6a 00		 push	 0
  0246e	68 11 04 00 00	 push	 1041			; 00000411H
  02473	53		 push	 ebx
  02474	ff d7		 call	 edi
  02476	50		 push	 eax
  02477	ff d6		 call	 esi
  02479	50		 push	 eax
  0247a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4087 : 
; 4088 : 			// Prevent losing the burned rescue disk by inadvertent exit
; 4089 : 			bConfirmQuit = TRUE;

  02480	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 1 ; bConfirmQuit

; 4230 : 				return 0;

  0248a	33 c0		 xor	 eax, eax
  0248c	e9 e2 2c 00 00	 jmp	 $LN333@PageDialog
$LN229@PageDialog:

; 4090 : 
; 4091 : 			break;
; 4092 : 
; 4093 : 		case SYSENC_WIPE_MODE_PAGE:
; 4094 : 		case NONSYS_INPLACE_ENC_WIPE_MODE_PAGE:
; 4095 : 			{
; 4096 : 				if (nWipeMode == TC_WIPE_1_RAND)

  02491	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _nWipeMode, 100 ; 00000064H
  02498	75 0a		 jne	 SHORT $LN228@PageDialog

; 4097 : 					nWipeMode = TC_WIPE_NONE;

  0249a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nWipeMode, 0
$LN228@PageDialog:

; 4098 : 
; 4099 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("WIPE_MODE_TITLE"));

  024a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
  024a9	e8 00 00 00 00	 call	 _GetString
  024ae	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  024b4	83 c4 04	 add	 esp, 4
  024b7	50		 push	 eax
  024b8	68 e8 03 00 00	 push	 1000			; 000003e8H
  024bd	53		 push	 ebx
  024be	ff d7		 call	 edi
  024c0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  024c6	50		 push	 eax
  024c7	ff d6		 call	 esi
  024c9	50		 push	 eax
  024ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4100 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDT_WIPE_MODE_INFO), GetString ("INPLACE_ENC_WIPE_MODE_INFO"));

  024d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@
  024d5	e8 00 00 00 00	 call	 _GetString
  024da	83 c4 04	 add	 esp, 4
  024dd	50		 push	 eax
  024de	68 3c 04 00 00	 push	 1084			; 0000043cH
  024e3	53		 push	 ebx
  024e4	ff d6		 call	 esi
  024e6	50		 push	 eax
  024e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4101 : 
; 4102 : 				PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), 
; 4103 : 					SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING && !bInPlaceEncNonSys,
; 4104 : 					TRUE);

  024ed	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  024f7	75 0f		 jne	 SHORT $LN376@PageDialog
  024f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  024ff	85 c9		 test	 ecx, ecx
  02501	75 05		 jne	 SHORT $LN376@PageDialog
  02503	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  02506	eb 02		 jmp	 SHORT $LN377@PageDialog
$LN376@PageDialog:
  02508	33 c0		 xor	 eax, eax
$LN377@PageDialog:
  0250a	6a 01		 push	 1
  0250c	50		 push	 eax
  0250d	68 3d 04 00 00	 push	 1085			; 0000043dH
  02512	53		 push	 ebx
  02513	ff d6		 call	 esi
  02515	50		 push	 eax
  02516	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  0251b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4105 : 
; 4106 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  0251e	68 00 00 00 00	 push	 OFFSET _nWipeMode
  02523	68 3d 04 00 00	 push	 1085			; 0000043dH
  02528	53		 push	 ebx
  02529	ff d6		 call	 esi
  0252b	50		 push	 eax
  0252c	e8 00 00 00 00	 call	 _SelectAlgo

; 4107 : 
; 4108 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02531	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  02536	e8 00 00 00 00	 call	 _GetString
  0253b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4109 : 
; 4110 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));
; 4111 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 4112 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4113 : 			}
; 4114 : 			break;

  0253e	e9 bd ef ff ff	 jmp	 $LN714@PageDialog
$LN227@PageDialog:

; 4115 : 
; 4116 : 		case SYSENC_PRETEST_INFO_PAGE:
; 4117 : 
; 4118 : 			if (bHiddenOS)

  02543	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02549	85 d2		 test	 edx, edx
  0254b	74 70		 je	 SHORT $LN226@PageDialog

; 4119 : 			{
; 4120 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDDEN_OS_CREATION_PREINFO_TITLE"));

  0254d	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@
  02552	e8 00 00 00 00	 call	 _GetString
  02557	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0255d	83 c4 04	 add	 esp, 4
  02560	50		 push	 eax
  02561	68 e8 03 00 00	 push	 1000			; 000003e8H
  02566	53		 push	 ebx
  02567	ff d7		 call	 edi
  02569	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0256f	50		 push	 eax
  02570	ff d6		 call	 esi
  02572	50		 push	 eax
  02573	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4121 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_OS_CREATION_PREINFO_HELP"));

  02579	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@
  0257e	e8 00 00 00 00	 call	 _GetString
  02583	83 c4 04	 add	 esp, 4
  02586	50		 push	 eax
  02587	68 eb 03 00 00	 push	 1003			; 000003ebH
  0258c	53		 push	 ebx
  0258d	ff d6		 call	 esi
  0258f	50		 push	 eax
  02590	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4122 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("START"));

  02596	68 00 00 00 00	 push	 OFFSET ??_C@_05JLPDBANI@START?$AA@
  0259b	e8 00 00 00 00	 call	 _GetString
  025a0	83 c4 04	 add	 esp, 4
  025a3	50		 push	 eax
  025a4	68 10 04 00 00	 push	 1040			; 00000410H
  025a9	53		 push	 ebx
  025aa	ff d7		 call	 edi
  025ac	50		 push	 eax
  025ad	ff d6		 call	 esi
  025af	50		 push	 eax
  025b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4123 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  025b6	6a 00		 push	 0

; 4124 : 			}
; 4125 : 			else

  025b8	e9 b9 00 00 00	 jmp	 $LN684@PageDialog
$LN226@PageDialog:

; 4126 : 			{
; 4127 : 				wchar_t finalMsg[8024] = {0};

  025bd	33 c0		 xor	 eax, eax
  025bf	68 ae 3e 00 00	 push	 16046			; 00003eaeH
  025c4	50		 push	 eax
  025c5	8d 4d 02	 lea	 ecx, DWORD PTR _finalMsg$133313[ebp+2]
  025c8	51		 push	 ecx
  025c9	66 89 45 00	 mov	 WORD PTR _finalMsg$133313[ebp], ax
  025cd	e8 00 00 00 00	 call	 _memset

; 4128 : 
; 4129 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_PRETEST_TITLE"));

  025d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@
  025d7	e8 00 00 00 00	 call	 _GetString
  025dc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  025e2	83 c4 10	 add	 esp, 16			; 00000010H
  025e5	50		 push	 eax
  025e6	68 e8 03 00 00	 push	 1000			; 000003e8H
  025eb	53		 push	 ebx
  025ec	ff d7		 call	 edi
  025ee	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  025f4	50		 push	 eax
  025f5	ff d6		 call	 esi
  025f7	50		 push	 eax
  025f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4130 : 
; 4131 : 				try
; 4132 : 				{
; 4133 : 					wsprintfW (finalMsg, 
; 4134 : 						GetString ("SYS_ENCRYPTION_PRETEST_INFO"), 
; 4135 : 						BootEncObj->GetSystemDriveConfiguration().DriveNumber);

  025fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  02604	8d 95 2c fc ff
	ff		 lea	 edx, DWORD PTR $T165654[ebp]
  0260a	52		 push	 edx
  0260b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  02612	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  02617	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0261a	50		 push	 eax
  0261b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@
  02620	e8 00 00 00 00	 call	 _GetString
  02625	83 c4 04	 add	 esp, 4
  02628	50		 push	 eax
  02629	8d 4d 00	 lea	 ecx, DWORD PTR _finalMsg$133313[ebp]
  0262c	51		 push	 ecx
  0262d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  02633	83 c4 0c	 add	 esp, 12			; 0000000cH
  02636	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T165654[ebp]
  0263c	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 4142 : 				}
; 4143 : 
; 4144 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), finalMsg);

  02641	8d 55 00	 lea	 edx, DWORD PTR _finalMsg$133313[ebp]
  02644	52		 push	 edx
  02645	68 eb 03 00 00	 push	 1003			; 000003ebH
  0264a	53		 push	 ebx
  0264b	ff d6		 call	 esi
  0264d	50		 push	 eax
  0264e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4145 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("TEST"));

  02654	68 00 00 00 00	 push	 OFFSET ??_C@_04OIKJMBFP@TEST?$AA@
  02659	e8 00 00 00 00	 call	 _GetString
  0265e	83 c4 04	 add	 esp, 4
  02661	50		 push	 eax
  02662	68 10 04 00 00	 push	 1040			; 00000410H
  02667	53		 push	 ebx
  02668	ff d7		 call	 edi
  0266a	50		 push	 eax
  0266b	ff d6		 call	 esi
  0266d	50		 push	 eax
  0266e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4146 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  02674	6a 01		 push	 1
$LN684@PageDialog:
  02676	68 11 04 00 00	 push	 1041			; 00000411H
  0267b	53		 push	 ebx
  0267c	ff d7		 call	 edi
  0267e	50		 push	 eax
  0267f	ff d6		 call	 esi
  02681	50		 push	 eax
  02682	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4147 : 			}
; 4148 : 
; 4149 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02688	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0268d	e8 00 00 00 00	 call	 _GetString
  02692	83 c4 04	 add	 esp, 4
  02695	50		 push	 eax
  02696	68 11 04 00 00	 push	 1041			; 00000411H
  0269b	53		 push	 ebx
  0269c	ff d7		 call	 edi
  0269e	50		 push	 eax
  0269f	ff d6		 call	 esi
  026a1	50		 push	 eax
  026a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4150 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4151 : 
; 4152 : 			break;

  026a8	e9 9a ee ff ff	 jmp	 $LN712@PageDialog
__catch$_PageDialogProc@16$0:

; 4136 : 				}
; 4137 : 				catch (Exception &e)
; 4138 : 				{
; 4139 : 					e.Show (hwndDlg);

  026ad	8b 4d a8	 mov	 ecx, DWORD PTR _e$133318[ebp]
  026b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  026b2	8b 55 ec	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  026b5	8b 00		 mov	 eax, DWORD PTR [eax]
  026b7	52		 push	 edx
  026b8	ff d0		 call	 eax

; 4140 : 					EndMainDlg (MainDlg);

  026ba	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  026c0	e8 00 00 00 00	 call	 _EndMainDlg

; 4141 : 					return 0;

  026c5	b8 00 00 00 00	 mov	 eax, $LN446@PageDialog
  026ca	c3		 ret	 0
$LN223@PageDialog:

; 4153 : 
; 4154 : 		case SYSENC_PRETEST_RESULT_PAGE:
; 4155 : 
; 4156 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_PRETEST_RESULT_TITLE"));

  026cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@
  026d0	e8 00 00 00 00	 call	 _GetString
  026d5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  026db	83 c4 04	 add	 esp, 4
  026de	50		 push	 eax
  026df	68 e8 03 00 00	 push	 1000			; 000003e8H
  026e4	53		 push	 ebx
  026e5	ff d7		 call	 edi
  026e7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  026ed	50		 push	 eax
  026ee	ff d6		 call	 esi
  026f0	50		 push	 eax
  026f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4157 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYS_ENCRYPTION_PRETEST_RESULT_INFO"));

  026f7	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@
  026fc	e8 00 00 00 00	 call	 _GetString
  02701	83 c4 04	 add	 esp, 4
  02704	50		 push	 eax
  02705	68 eb 03 00 00	 push	 1003			; 000003ebH
  0270a	53		 push	 ebx
  0270b	ff d6		 call	 esi
  0270d	50		 push	 eax
  0270e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4158 : 
; 4159 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("ENCRYPT"));

  02714	68 00 00 00 00	 push	 OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  02719	e8 00 00 00 00	 call	 _GetString
  0271e	83 c4 04	 add	 esp, 4
  02721	50		 push	 eax
  02722	68 10 04 00 00	 push	 1040			; 00000410H
  02727	53		 push	 ebx
  02728	ff d7		 call	 edi
  0272a	50		 push	 eax
  0272b	ff d6		 call	 esi
  0272d	50		 push	 eax
  0272e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4160 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02734	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02739	e8 00 00 00 00	 call	 _GetString
  0273e	83 c4 04	 add	 esp, 4
  02741	50		 push	 eax
  02742	68 11 04 00 00	 push	 1041			; 00000411H
  02747	53		 push	 ebx
  02748	ff d7		 call	 edi
  0274a	50		 push	 eax
  0274b	ff d6		 call	 esi
  0274d	50		 push	 eax
  0274e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4161 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));

  02754	68 00 00 00 00	 push	 OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  02759	e8 00 00 00 00	 call	 _GetString
  0275e	83 c4 04	 add	 esp, 4
  02761	50		 push	 eax
  02762	6a 02		 push	 2
  02764	53		 push	 ebx
  02765	ff d7		 call	 edi
  02767	50		 push	 eax
  02768	ff d6		 call	 esi
  0276a	50		 push	 eax
  0276b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4162 : 
; 4163 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02771	6a 01		 push	 1
  02773	68 10 04 00 00	 push	 1040			; 00000410H
  02778	53		 push	 ebx
  02779	ff d7		 call	 edi
  0277b	50		 push	 eax
  0277c	ff d6		 call	 esi
  0277e	50		 push	 eax
  0277f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4164 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  02785	6a 00		 push	 0
  02787	68 11 04 00 00	 push	 1041			; 00000411H
$LN713@PageDialog:
  0278c	53		 push	 ebx
  0278d	ff d7		 call	 edi
  0278f	50		 push	 eax
  02790	ff d6		 call	 esi
  02792	50		 push	 eax
  02793	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4165 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  02799	6a 01		 push	 1
  0279b	6a 02		 push	 2
  0279d	53		 push	 ebx
  0279e	ff d7		 call	 edi
  027a0	50		 push	 eax
  027a1	ff d6		 call	 esi
  027a3	50		 push	 eax
  027a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4230 : 				return 0;

  027aa	33 c0		 xor	 eax, eax
  027ac	e9 c2 29 00 00	 jmp	 $LN333@PageDialog
$LN222@PageDialog:

; 4166 : 
; 4167 : 			break;
; 4168 : 
; 4169 : 		case SYSENC_ENCRYPTION_PAGE:
; 4170 : 
; 4171 : 			if (CreateSysEncMutex ())

  027b1	e8 00 00 00 00	 call	 _CreateSysEncMutex
  027b6	85 c0		 test	 eax, eax
  027b8	0f 84 56 02 00
	00		 je	 $LN221@PageDialog

; 4172 : 			{
; 4173 : 				try
; 4174 : 				{
; 4175 : 					BootEncStatus = BootEncObj->GetStatus();

  027be	8d 8d 0a fe ff
	ff		 lea	 ecx, DWORD PTR $T165656[ebp]
  027c4	51		 push	 ecx
  027c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  027cb	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  027d2	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 4184 : 				}
; 4185 : 
; 4186 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE),
; 4187 : 					GetString (SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING ? "ENCRYPTION" : "DECRYPTION"));

  027d7	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  027e1	8b f0		 mov	 esi, eax
  027e3	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  027e8	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  027ed	f3 a5		 rep movsd
  027ef	66 a5		 movsw
  027f1	8b 15 3e 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
  027f7	89 15 00 00 00
	00		 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, edx ; bSystemEncryptionInProgress
  027fd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
  02802	75 05		 jne	 SHORT $LN379@PageDialog
  02804	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@POBGFBLK@DECRYPTION?$AA@
$LN379@PageDialog:
  02809	50		 push	 eax
  0280a	e8 00 00 00 00	 call	 _GetString
  0280f	83 c4 04	 add	 esp, 4
  02812	50		 push	 eax
  02813	68 e8 03 00 00	 push	 1000			; 000003e8H
  02818	53		 push	 ebx
  02819	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0281f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02825	50		 push	 eax
  02826	ff d6		 call	 esi
  02828	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0282e	50		 push	 eax
  0282f	ff d7		 call	 edi

; 4188 : 
; 4189 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_ENCRYPTION_PAGE_INFO"));

  02831	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@
  02836	e8 00 00 00 00	 call	 _GetString
  0283b	83 c4 04	 add	 esp, 4
  0283e	50		 push	 eax
  0283f	68 eb 03 00 00	 push	 1003			; 000003ebH
  02844	53		 push	 ebx
  02845	ff d6		 call	 esi
  02847	50		 push	 eax
  02848	ff d7		 call	 edi

; 4190 : 
; 4191 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));

  0284a	68 00 00 00 00	 push	 OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  0284f	e8 00 00 00 00	 call	 _GetString
  02854	83 c4 04	 add	 esp, 4
  02857	50		 push	 eax
  02858	6a 02		 push	 2
  0285a	53		 push	 ebx
  0285b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02861	50		 push	 eax
  02862	ff d6		 call	 esi
  02864	50		 push	 eax
  02865	ff d7		 call	 edi

; 4192 : 
; 4193 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02867	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0286c	e8 00 00 00 00	 call	 _GetString
  02871	83 c4 04	 add	 esp, 4
  02874	50		 push	 eax
  02875	68 11 04 00 00	 push	 1041			; 00000411H
  0287a	53		 push	 ebx
  0287b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02881	50		 push	 eax
  02882	ff d6		 call	 esi
  02884	50		 push	 eax
  02885	ff d7		 call	 edi

; 4194 : 
; 4195 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 4196 : 					GetString (SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING ? "ENCRYPT" : "DECRYPT"));

  02887	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  02891	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  02896	75 05		 jne	 SHORT $LN381@PageDialog
  02898	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07OOEIKEPO@DECRYPT?$AA@
$LN381@PageDialog:
  0289d	50		 push	 eax
  0289e	e8 00 00 00 00	 call	 _GetString
  028a3	83 c4 04	 add	 esp, 4
  028a6	50		 push	 eax
  028a7	68 10 04 00 00	 push	 1040			; 00000410H
  028ac	53		 push	 ebx
  028ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  028b3	50		 push	 eax
  028b4	ff d6		 call	 esi
  028b6	50		 push	 eax
  028b7	ff d7		 call	 edi

; 4197 : 
; 4198 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_PAUSE),
; 4199 : 					GetString (bSystemEncryptionInProgress ? "IDC_PAUSE" : "RESUME"));

  028b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  028c0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  028c5	75 05		 jne	 SHORT $LN383@PageDialog
  028c7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
$LN383@PageDialog:
  028cc	50		 push	 eax
  028cd	e8 00 00 00 00	 call	 _GetString
  028d2	83 c4 04	 add	 esp, 4
  028d5	50		 push	 eax
  028d6	68 41 04 00 00	 push	 1089			; 00000441H
  028db	53		 push	 ebx
  028dc	ff d6		 call	 esi
  028de	50		 push	 eax
  028df	ff d7		 call	 edi

; 4200 : 
; 4201 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PAUSE), BootEncStatus.DriveEncrypted);

  028e1	a1 0e 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14
  028e6	50		 push	 eax
  028e7	68 41 04 00 00	 push	 1089			; 00000441H
  028ec	53		 push	 ebx
  028ed	ff d6		 call	 esi
  028ef	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  028f5	50		 push	 eax
  028f6	ff d7		 call	 edi

; 4202 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  028f8	6a 00		 push	 0
  028fa	68 11 04 00 00	 push	 1041			; 00000411H
  028ff	53		 push	 ebx
  02900	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02906	50		 push	 eax
  02907	ff d6		 call	 esi
  02909	50		 push	 eax
  0290a	ff d7		 call	 edi

; 4203 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), !BootEncStatus.SetupInProgress);

  0290c	33 c9		 xor	 ecx, ecx
  0290e	39 0d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ecx
  02914	0f 94 c1	 sete	 cl
  02917	51		 push	 ecx
  02918	68 10 04 00 00	 push	 1040			; 00000410H
  0291d	53		 push	 ebx
  0291e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02924	50		 push	 eax
  02925	ff d6		 call	 esi
  02927	50		 push	 eax
  02928	ff d7		 call	 edi

; 4204 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  0292a	6a 01		 push	 1
  0292c	6a 02		 push	 2
  0292e	53		 push	 ebx
  0292f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02935	50		 push	 eax
  02936	ff d6		 call	 esi
  02938	50		 push	 eax
  02939	ff d7		 call	 edi

; 4205 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  0293b	6a 01		 push	 1
  0293d	6a 09		 push	 9
  0293f	53		 push	 ebx
  02940	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02946	50		 push	 eax
  02947	ff d6		 call	 esi
  02949	50		 push	 eax
  0294a	ff d7		 call	 edi

; 4206 : 
; 4207 : 				ToHyperlink (hwndDlg, IDC_MORE_INFO_SYS_ENCRYPTION);

  0294c	68 43 04 00 00	 push	 1091			; 00000443H
  02951	53		 push	 ebx
  02952	e8 00 00 00 00	 call	 _ToHyperlink
  02957	83 c4 08	 add	 esp, 8

; 4208 : 
; 4209 : 				if (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  0295a	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  02964	75 2a		 jne	 SHORT $LN219@PageDialog

; 4210 : 				{
; 4211 : 					nWipeMode = TC_WIPE_NONE;
; 4212 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE);

  02966	6a 00		 push	 0
  02968	68 3d 04 00 00	 push	 1085			; 0000043dH
  0296d	53		 push	 ebx
  0296e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nWipeMode, 0
  02978	ff d6		 call	 esi
  0297a	50		 push	 eax
  0297b	ff d7		 call	 edi

; 4213 : 					EnableWindow (GetDlgItem (hwndDlg, IDT_WIPE_MODE), FALSE);

  0297d	6a 00		 push	 0
  0297f	68 42 04 00 00	 push	 1090			; 00000442H
  02984	53		 push	 ebx
  02985	ff d6		 call	 esi
  02987	50		 push	 eax
  02988	ff d7		 call	 edi

; 4214 : 					PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), TRUE, TRUE);

  0298a	6a 01		 push	 1
  0298c	6a 01		 push	 1

; 4215 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);
; 4216 : 				}
; 4217 : 				else

  0298e	eb 1b		 jmp	 SHORT $LN685@PageDialog
$LN219@PageDialog:

; 4218 : 				{
; 4219 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), !bSystemEncryptionInProgress);

  02990	33 d2		 xor	 edx, edx
  02992	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, edx ; bSystemEncryptionInProgress
  02998	0f 94 c2	 sete	 dl
  0299b	52		 push	 edx
  0299c	68 3d 04 00 00	 push	 1085			; 0000043dH
  029a1	53		 push	 ebx
  029a2	ff d6		 call	 esi
  029a4	50		 push	 eax
  029a5	ff d7		 call	 edi

; 4220 : 					PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, TRUE);

  029a7	6a 01		 push	 1
  029a9	6a 00		 push	 0
$LN685@PageDialog:
  029ab	68 3d 04 00 00	 push	 1085			; 0000043dH
  029b0	53		 push	 ebx
  029b1	ff d6		 call	 esi
  029b3	50		 push	 eax
  029b4	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  029b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4221 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  029bc	68 00 00 00 00	 push	 OFFSET _nWipeMode
  029c1	68 3d 04 00 00	 push	 1085			; 0000043dH
  029c6	53		 push	 ebx
  029c7	ff d6		 call	 esi
  029c9	50		 push	 eax
  029ca	e8 00 00 00 00	 call	 _SelectAlgo
  029cf	83 c4 08	 add	 esp, 8

; 4222 : 				}
; 4223 : 
; 4224 : 				PostMessage (hwndDlg, TC_APPMSG_PERFORM_POST_SYSENC_WMINIT_TASKS, 0, 0);

  029d2	6a 00		 push	 0
  029d4	6a 00		 push	 0
  029d6	68 31 81 00 00	 push	 33073			; 00008131H
  029db	53		 push	 ebx
  029dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 4231 : 			}
; 4232 : 			return 0;

  029e2	33 c0		 xor	 eax, eax
  029e4	e9 8a 27 00 00	 jmp	 $LN333@PageDialog
__catch$_PageDialogProc@16$2:

; 4176 : 					bSystemEncryptionInProgress = BootEncStatus.SetupInProgress;
; 4177 : 				}
; 4178 : 				catch (Exception &e)
; 4179 : 				{
; 4180 : 					e.Show (hwndDlg);

  029e9	8b 4d ac	 mov	 ecx, DWORD PTR _e$133328[ebp]
  029ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  029ee	8b 55 ec	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  029f1	8b 00		 mov	 eax, DWORD PTR [eax]
  029f3	52		 push	 edx
  029f4	ff d0		 call	 eax

; 4181 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  029f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  029fb	e8 00 00 00 00	 call	 _Error

; 4182 : 					EndMainDlg (MainDlg);

  02a00	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  02a06	83 c4 04	 add	 esp, 4
  02a09	e8 00 00 00 00	 call	 _EndMainDlg

; 4183 : 					return 0;

  02a0e	b8 00 00 00 00	 mov	 eax, $LN446@PageDialog
  02a13	c3		 ret	 0
$LN221@PageDialog:

; 4225 : 			}
; 4226 : 			else
; 4227 : 			{
; 4228 : 				Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  02a14	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02a19	e8 00 00 00 00	 call	 _Error
$LN710@PageDialog:

; 4229 : 				EndMainDlg (MainDlg);

  02a1e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  02a24	83 c4 04	 add	 esp, 4
  02a27	e8 00 00 00 00	 call	 _EndMainDlg
$LN328@PageDialog:

; 4230 : 				return 0;

  02a2c	33 c0		 xor	 eax, eax
  02a2e	e9 40 27 00 00	 jmp	 $LN333@PageDialog
$LN216@PageDialog:

; 4233 : 
; 4234 : 		case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 4235 : 
; 4236 : 			{
; 4237 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILE_TITLE"));

  02a33	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
  02a38	e8 00 00 00 00	 call	 _GetString
  02a3d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  02a43	83 c4 04	 add	 esp, 4
  02a46	50		 push	 eax
  02a47	68 e8 03 00 00	 push	 1000			; 000003e8H
  02a4c	53		 push	 ebx
  02a4d	ff d7		 call	 edi
  02a4f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02a55	50		 push	 eax
  02a56	ff d6		 call	 esi
  02a58	50		 push	 eax
  02a59	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4238 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_RESUME_VOL_SELECT_HELP"));

  02a5f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@
  02a64	e8 00 00 00 00	 call	 _GetString
  02a69	83 c4 04	 add	 esp, 4
  02a6c	50		 push	 eax
  02a6d	68 eb 03 00 00	 push	 1003			; 000003ebH
  02a72	53		 push	 ebx
  02a73	ff d6		 call	 esi
  02a75	50		 push	 eax
  02a76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4239 : 
; 4240 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  02a7c	6a 01		 push	 1
  02a7e	68 11 04 00 00	 push	 1041			; 00000411H
  02a83	53		 push	 ebx
  02a84	ff d7		 call	 edi
  02a86	50		 push	 eax
  02a87	ff d6		 call	 esi
  02a89	50		 push	 eax
  02a8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4241 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  02a90	6a 00		 push	 0
  02a92	68 10 04 00 00	 push	 1040			; 00000410H
  02a97	53		 push	 ebx
  02a98	ff d7		 call	 edi
  02a9a	50		 push	 eax
  02a9b	ff d6		 call	 esi
  02a9d	50		 push	 eax
  02a9e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4242 : 				
; 4243 : 				foreach (const HostDevice &device, DeferredNonSysInPlaceEncDevices)

  02aa4	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  02aaa	68 00 00 00 00	 push	 OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  02aaf	51		 push	 ecx
  02ab0	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  02ab5	83 c4 08	 add	 esp, 8
  02ab8	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133476[ebp]
  02abe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02ac1	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  02ac7	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  02ace	ff d0		 call	 eax
  02ad0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  02ad6	84 c0		 test	 al, al
  02ad8	0f 84 8b 00 00
	00		 je	 $LN213@PageDialog
  02ade	8b ff		 npad	 2
$LL215@PageDialog:
  02ae0	8d 4d 98	 lea	 ecx, DWORD PTR _$S1$133476[ebp+40]
  02ae3	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
  02ae8	80 bd 75 ff ff
	ff 00		 cmp	 BYTE PTR _$S1$133476[ebp+5], 0
  02aef	89 45 e8	 mov	 DWORD PTR _device$133480[ebp], eax
  02af2	0f 94 c0	 sete	 al
  02af5	88 85 75 ff ff
	ff		 mov	 BYTE PTR _$S1$133476[ebp+5], al
  02afb	84 c0		 test	 al, al
  02afd	74 40		 je	 SHORT $LN214@PageDialog
  02aff	90		 npad	 1
$LL523@PageDialog:

; 4244 : 				{
; 4245 : 					SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_ADDSTRING, 0, (LPARAM) device.Path.c_str());

  02b00	8b 45 e8	 mov	 eax, DWORD PTR _device$133480[ebp]
  02b03	83 78 58 10	 cmp	 DWORD PTR [eax+88], 16	; 00000010H
  02b07	72 05		 jb	 SHORT $LN531@PageDialog
  02b09	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  02b0c	eb 03		 jmp	 SHORT $LN532@PageDialog
$LN531@PageDialog:
  02b0e	83 c0 44	 add	 eax, 68			; 00000044H
$LN532@PageDialog:
  02b11	50		 push	 eax
  02b12	6a 00		 push	 0
  02b14	68 80 01 00 00	 push	 384			; 00000180H
  02b19	68 fa 03 00 00	 push	 1018			; 000003faH
  02b1e	53		 push	 ebx
  02b1f	ff d6		 call	 esi
  02b21	50		 push	 eax
  02b22	ff d7		 call	 edi
  02b24	80 bd 75 ff ff
	ff 00		 cmp	 BYTE PTR _$S1$133476[ebp+5], 0
  02b2b	c6 85 74 ff ff
	ff 01		 mov	 BYTE PTR _$S1$133476[ebp+4], 1
  02b32	0f 94 c0	 sete	 al
  02b35	88 85 75 ff ff
	ff		 mov	 BYTE PTR _$S1$133476[ebp+5], al
  02b3b	84 c0		 test	 al, al
  02b3d	75 c1		 jne	 SHORT $LL523@PageDialog
$LN214@PageDialog:

; 4242 : 				
; 4243 : 				foreach (const HostDevice &device, DeferredNonSysInPlaceEncDevices)

  02b3f	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133476[ebp]
  02b45	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  02b48	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  02b4e	ff d0		 call	 eax
  02b50	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133476[ebp]
  02b56	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02b59	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  02b5f	ff d0		 call	 eax
  02b61	84 c0		 test	 al, al
  02b63	0f 85 77 ff ff
	ff		 jne	 $LL215@PageDialog
$LN213@PageDialog:

; 4246 : 				}

  02b69	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  02b6f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02b76	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 4247 : 				 
; 4248 : 				// Deselect all
; 4249 : 				SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_SETCURSEL, (WPARAM) -1, 0);

  02b7b	6a 00		 push	 0
  02b7d	6a ff		 push	 -1
  02b7f	68 86 01 00 00	 push	 390			; 00000186H
  02b84	68 fa 03 00 00	 push	 1018			; 000003faH
  02b89	53		 push	 ebx
  02b8a	ff d6		 call	 esi
  02b8c	50		 push	 eax
  02b8d	ff d7		 call	 edi
  02b8f	33 c0		 xor	 eax, eax
  02b91	e9 dd 25 00 00	 jmp	 $LN333@PageDialog
$LN209@PageDialog:

; 4250 : 			}
; 4251 : 
; 4252 : 			break;
; 4253 : 
; 4254 : 		case NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 4255 : 
; 4256 : 			if (bInPlaceEncNonSysResumed)

  02b96	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  02b9c	85 c9		 test	 ecx, ecx
  02b9e	74 1f		 je	 SHORT $LN207@PageDialog

; 4257 : 			{
; 4258 : 				WipeAlgorithmId savedWipeAlgorithm = TC_WIPE_NONE;
; 4259 : 
; 4260 : 				if (LoadNonSysInPlaceEncSettings (&savedWipeAlgorithm) != 0)

  02ba0	8d 55 d4	 lea	 edx, DWORD PTR _savedWipeAlgorithm$133513[ebp]
  02ba3	52		 push	 edx
  02ba4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _savedWipeAlgorithm$133513[ebp], 0
  02bab	e8 00 00 00 00	 call	 _LoadNonSysInPlaceEncSettings
  02bb0	83 c4 04	 add	 esp, 4
  02bb3	85 c0		 test	 eax, eax
  02bb5	74 08		 je	 SHORT $LN207@PageDialog

; 4261 : 					nWipeMode = savedWipeAlgorithm;

  02bb7	8b 45 d4	 mov	 eax, DWORD PTR _savedWipeAlgorithm$133513[ebp]
  02bba	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax
$LN207@PageDialog:

; 4262 : 			}
; 4263 : 
; 4264 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("ENCRYPTION"));

  02bbf	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
  02bc4	e8 00 00 00 00	 call	 _GetString
  02bc9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  02bcf	83 c4 04	 add	 esp, 4
  02bd2	50		 push	 eax
  02bd3	68 e8 03 00 00	 push	 1000			; 000003e8H
  02bd8	53		 push	 ebx
  02bd9	ff d7		 call	 edi
  02bdb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02be1	50		 push	 eax
  02be2	ff d6		 call	 esi
  02be4	50		 push	 eax
  02be5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4265 : 
; 4266 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_ENCRYPTION_PAGE_INFO"));

  02beb	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@
  02bf0	e8 00 00 00 00	 call	 _GetString
  02bf5	83 c4 04	 add	 esp, 4
  02bf8	50		 push	 eax
  02bf9	68 eb 03 00 00	 push	 1003			; 000003ebH
  02bfe	53		 push	 ebx
  02bff	ff d6		 call	 esi
  02c01	50		 push	 eax
  02c02	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4267 : 
; 4268 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString (bInPlaceEncNonSysResumed ? "DEFER" : "CANCEL"));

  02c08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  02c0e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  02c13	85 c9		 test	 ecx, ecx
  02c15	75 05		 jne	 SHORT $LN387@PageDialog
  02c17	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
$LN387@PageDialog:
  02c1c	50		 push	 eax
  02c1d	e8 00 00 00 00	 call	 _GetString
  02c22	83 c4 04	 add	 esp, 4
  02c25	50		 push	 eax
  02c26	6a 02		 push	 2
  02c28	53		 push	 ebx
  02c29	ff d7		 call	 edi
  02c2b	50		 push	 eax
  02c2c	ff d6		 call	 esi
  02c2e	50		 push	 eax
  02c2f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4269 : 
; 4270 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02c35	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02c3a	e8 00 00 00 00	 call	 _GetString
  02c3f	83 c4 04	 add	 esp, 4
  02c42	50		 push	 eax
  02c43	68 11 04 00 00	 push	 1041			; 00000411H
  02c48	53		 push	 ebx
  02c49	ff d7		 call	 edi
  02c4b	50		 push	 eax
  02c4c	ff d6		 call	 esi
  02c4e	50		 push	 eax
  02c4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4271 : 
; 4272 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString (bInPlaceEncNonSysResumed ? "RESUME" : "ENCRYPT"));

  02c55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSysResumed
  02c5b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
  02c60	85 d2		 test	 edx, edx
  02c62	75 05		 jne	 SHORT $LN389@PageDialog
  02c64	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
$LN389@PageDialog:
  02c69	50		 push	 eax
  02c6a	e8 00 00 00 00	 call	 _GetString
  02c6f	83 c4 04	 add	 esp, 4
  02c72	50		 push	 eax
  02c73	68 10 04 00 00	 push	 1040			; 00000410H
  02c78	53		 push	 ebx
  02c79	ff d7		 call	 edi
  02c7b	50		 push	 eax
  02c7c	ff d6		 call	 esi
  02c7e	50		 push	 eax
  02c7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4273 : 
; 4274 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_PAUSE), GetString ("IDC_PAUSE"));

  02c85	68 00 00 00 00	 push	 OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  02c8a	e8 00 00 00 00	 call	 _GetString
  02c8f	83 c4 04	 add	 esp, 4
  02c92	50		 push	 eax
  02c93	68 41 04 00 00	 push	 1089			; 00000441H
  02c98	53		 push	 ebx
  02c99	ff d6		 call	 esi
  02c9b	50		 push	 eax
  02c9c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4275 : 
; 4276 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bInPlaceEncNonSysResumed);

  02ca2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  02ca7	f7 d8		 neg	 eax
  02ca9	1b c0		 sbb	 eax, eax
  02cab	40		 inc	 eax
  02cac	50		 push	 eax
  02cad	68 11 04 00 00	 push	 1041			; 00000411H
  02cb2	53		 push	 ebx
  02cb3	ff d7		 call	 edi
  02cb5	50		 push	 eax
  02cb6	ff d6		 call	 esi
  02cb8	50		 push	 eax
  02cb9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4277 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02cbf	6a 01		 push	 1
  02cc1	68 10 04 00 00	 push	 1040			; 00000410H
  02cc6	53		 push	 ebx
  02cc7	ff d7		 call	 edi
  02cc9	50		 push	 eax
  02cca	ff d6		 call	 esi
  02ccc	50		 push	 eax
  02ccd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4278 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  02cd3	6a 01		 push	 1
  02cd5	6a 02		 push	 2
  02cd7	53		 push	 ebx
  02cd8	ff d7		 call	 edi
  02cda	50		 push	 eax
  02cdb	ff d6		 call	 esi
  02cdd	50		 push	 eax
  02cde	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4279 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  02ce4	6a 01		 push	 1
  02ce6	6a 09		 push	 9
  02ce8	53		 push	 ebx
  02ce9	ff d7		 call	 edi
  02ceb	50		 push	 eax
  02cec	ff d6		 call	 esi
  02cee	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  02cf4	50		 push	 eax
  02cf5	ff d7		 call	 edi

; 4280 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PAUSE), FALSE);

  02cf7	6a 00		 push	 0
  02cf9	68 41 04 00 00	 push	 1089			; 00000441H
  02cfe	53		 push	 ebx
  02cff	ff d6		 call	 esi
  02d01	50		 push	 eax
  02d02	ff d7		 call	 edi

; 4281 : 
; 4282 : 			ShowWindow (GetDlgItem (hwndDlg, IDC_MORE_INFO_SYS_ENCRYPTION), SW_HIDE);

  02d04	6a 00		 push	 0
  02d06	68 43 04 00 00	 push	 1091			; 00000443H
  02d0b	53		 push	 ebx
  02d0c	ff d6		 call	 esi
  02d0e	50		 push	 eax
  02d0f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 4283 : 
; 4284 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), TRUE);

  02d15	6a 01		 push	 1
  02d17	68 3d 04 00 00	 push	 1085			; 0000043dH
  02d1c	53		 push	 ebx
  02d1d	ff d6		 call	 esi
  02d1f	50		 push	 eax
  02d20	ff d7		 call	 edi

; 4285 : 			PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, TRUE);

  02d22	6a 01		 push	 1
  02d24	6a 00		 push	 0
  02d26	68 3d 04 00 00	 push	 1085			; 0000043dH
  02d2b	53		 push	 ebx
  02d2c	ff d6		 call	 esi
  02d2e	50		 push	 eax
  02d2f	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  02d34	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4286 : 			SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  02d37	68 00 00 00 00	 push	 OFFSET _nWipeMode
  02d3c	68 3d 04 00 00	 push	 1085			; 0000043dH
  02d41	53		 push	 ebx
  02d42	ff d6		 call	 esi
  02d44	50		 push	 eax
  02d45	e8 00 00 00 00	 call	 _SelectAlgo
  02d4a	83 c4 08	 add	 esp, 8
  02d4d	33 c0		 xor	 eax, eax
  02d4f	e9 1f 24 00 00	 jmp	 $LN333@PageDialog
$LN206@PageDialog:

; 4287 : 
; 4288 : 			break;
; 4289 : 
; 4290 : 		case NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE:
; 4291 : 
; 4292 : 			bConfirmQuit = FALSE;
; 4293 : 
; 4294 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("NONSYS_INPLACE_ENC_FINISHED_TITLE"));

  02d54	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@
  02d59	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 0 ; bConfirmQuit
  02d63	e8 00 00 00 00	 call	 _GetString
  02d68	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  02d6e	83 c4 04	 add	 esp, 4
  02d71	50		 push	 eax
  02d72	68 e8 03 00 00	 push	 1000			; 000003e8H
  02d77	53		 push	 ebx
  02d78	ff d7		 call	 edi
  02d7a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02d80	50		 push	 eax
  02d81	ff d6		 call	 esi
  02d83	50		 push	 eax
  02d84	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4295 : 
; 4296 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_FINISHED_INFO"));

  02d8a	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  02d8f	e8 00 00 00 00	 call	 _GetString
  02d94	83 c4 04	 add	 esp, 4
  02d97	50		 push	 eax
  02d98	68 eb 03 00 00	 push	 1003			; 000003ebH
  02d9d	53		 push	 ebx
  02d9e	ff d6		 call	 esi
  02da0	50		 push	 eax
  02da1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4297 : 
; 4298 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02da7	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02dac	e8 00 00 00 00	 call	 _GetString
  02db1	83 c4 04	 add	 esp, 4
  02db4	50		 push	 eax
  02db5	68 11 04 00 00	 push	 1041			; 00000411H
  02dba	53		 push	 ebx
  02dbb	ff d7		 call	 edi
  02dbd	50		 push	 eax
  02dbe	ff d6		 call	 esi
  02dc0	50		 push	 eax
  02dc1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4299 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("FINALIZE"));

  02dc7	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  02dcc	e8 00 00 00 00	 call	 _GetString
  02dd1	83 c4 04	 add	 esp, 4
  02dd4	50		 push	 eax
  02dd5	68 10 04 00 00	 push	 1040			; 00000410H
  02dda	53		 push	 ebx
  02ddb	ff d7		 call	 edi
  02ddd	50		 push	 eax
  02dde	ff d6		 call	 esi
  02de0	50		 push	 eax
  02de1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4300 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  02de7	6a 00		 push	 0
  02de9	68 11 04 00 00	 push	 1041			; 00000411H
  02dee	53		 push	 ebx
  02def	ff d7		 call	 edi
  02df1	50		 push	 eax
  02df2	ff d6		 call	 esi
  02df4	50		 push	 eax
  02df5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4301 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02dfb	6a 01		 push	 1
  02dfd	68 10 04 00 00	 push	 1040			; 00000410H
  02e02	53		 push	 ebx
  02e03	ff d7		 call	 edi
  02e05	50		 push	 eax
  02e06	ff d6		 call	 esi
  02e08	50		 push	 eax
  02e09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4302 : 
; 4303 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  02e0f	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  02e14	e8 00 00 00 00	 call	 _GetString
  02e19	83 c4 04	 add	 esp, 4
  02e1c	50		 push	 eax
  02e1d	6a 02		 push	 2
  02e1f	53		 push	 ebx
  02e20	ff d7		 call	 edi
  02e22	50		 push	 eax
  02e23	ff d6		 call	 esi
  02e25	50		 push	 eax
  02e26	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4304 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  02e2c	6a 00		 push	 0
  02e2e	6a 02		 push	 2
  02e30	53		 push	 ebx
  02e31	ff d7		 call	 edi
  02e33	50		 push	 eax
  02e34	ff d6		 call	 esi
  02e36	50		 push	 eax
  02e37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  02e3d	33 c0		 xor	 eax, eax

; 4230 : 				return 0;

  02e3f	e9 2f 23 00 00	 jmp	 $LN333@PageDialog
$LN205@PageDialog:

; 4305 : 
; 4306 : 			break;
; 4307 : 
; 4308 : 		case FORMAT_PAGE:
; 4309 : 			{
; 4310 : 				BOOL bNTFSallowed = FALSE;
; 4311 : 				BOOL bFATallowed = FALSE;
; 4312 : 				BOOL bNoFSallowed = FALSE;
; 4313 : 
; 4314 : 				SetTimer (GetParent (hwndDlg), TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  02e44	6a 00		 push	 0
  02e46	6a 1e		 push	 30			; 0000001eH
  02e48	68 ff 00 00 00	 push	 255			; 000000ffH
  02e4d	53		 push	 ebx
  02e4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02e54	50		 push	 eax
  02e55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 4315 : 
; 4316 : 				hMasterKey = GetDlgItem (hwndDlg, IDC_DISK_KEY);

  02e5b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02e61	68 fb 03 00 00	 push	 1019			; 000003fbH
  02e66	53		 push	 ebx
  02e67	ff d6		 call	 esi

; 4317 : 				hHeaderKey = GetDlgItem (hwndDlg, IDC_HEADER_KEY);

  02e69	68 f9 03 00 00	 push	 1017			; 000003f9H
  02e6e	a3 00 00 00 00	 mov	 DWORD PTR _hMasterKey, eax
  02e73	53		 push	 ebx
  02e74	ff d6		 call	 esi

; 4318 : 				hRandPool = GetDlgItem (hwndDlg, IDC_RANDOM_BYTES);

  02e76	68 fc 03 00 00	 push	 1020			; 000003fcH
  02e7b	a3 00 00 00 00	 mov	 DWORD PTR _hHeaderKey, eax
  02e80	53		 push	 ebx
  02e81	ff d6		 call	 esi

; 4319 : 
; 4320 : 				SendMessage (GetDlgItem (hwndDlg, IDC_RANDOM_BYTES), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  02e83	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hFixedDigitFont
  02e89	6a 01		 push	 1
  02e8b	51		 push	 ecx
  02e8c	6a 30		 push	 48			; 00000030H
  02e8e	68 fc 03 00 00	 push	 1020			; 000003fcH
  02e93	a3 00 00 00 00	 mov	 DWORD PTR ?hRandPool@@3RAUHWND__@@A, eax ; hRandPool
  02e98	53		 push	 ebx
  02e99	ff d6		 call	 esi
  02e9b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  02ea1	50		 push	 eax
  02ea2	ff d7		 call	 edi

; 4321 : 				SendMessage (GetDlgItem (hwndDlg, IDC_DISK_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  02ea4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hFixedDigitFont
  02eaa	6a 01		 push	 1
  02eac	52		 push	 edx
  02ead	6a 30		 push	 48			; 00000030H
  02eaf	68 fb 03 00 00	 push	 1019			; 000003fbH
  02eb4	53		 push	 ebx
  02eb5	ff d6		 call	 esi
  02eb7	50		 push	 eax
  02eb8	ff d7		 call	 edi

; 4322 : 				SendMessage (GetDlgItem (hwndDlg, IDC_HEADER_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  02eba	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  02ebf	6a 01		 push	 1
  02ec1	50		 push	 eax
  02ec2	6a 30		 push	 48			; 00000030H
  02ec4	68 f9 03 00 00	 push	 1017			; 000003f9H
  02ec9	53		 push	 ebx
  02eca	ff d6		 call	 esi
  02ecc	50		 push	 eax
  02ecd	ff d7		 call	 edi

; 4323 : 
; 4324 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP),
; 4325 : 					GetString (bHiddenVolHost ? "FORMAT_HIDVOL_HOST_HELP" : "FORMAT_HELP"));

  02ecf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  02ed5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@
  02eda	85 c9		 test	 ecx, ecx
  02edc	75 05		 jne	 SHORT $LN391@PageDialog
  02ede	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@
$LN391@PageDialog:
  02ee3	50		 push	 eax
  02ee4	e8 00 00 00 00	 call	 _GetString
  02ee9	83 c4 04	 add	 esp, 4
  02eec	50		 push	 eax
  02eed	68 eb 03 00 00	 push	 1003			; 000003ebH
  02ef2	53		 push	 ebx
  02ef3	ff d6		 call	 esi
  02ef5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  02efb	50		 push	 eax
  02efc	ff d7		 call	 edi

; 4326 : 
; 4327 : 				if (bHiddenVol)

  02efe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02f04	85 d2		 test	 edx, edx
  02f06	74 16		 je	 SHORT $LN204@PageDialog

; 4328 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "FORMAT_HIDVOL_HOST_TITLE" : "FORMAT_HIDVOL_TITLE"));

  02f08	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  02f0d	85 c0		 test	 eax, eax
  02f0f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@
  02f14	75 05		 jne	 SHORT $LN393@PageDialog
  02f16	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@
$LN393@PageDialog:
  02f1b	50		 push	 eax

; 4329 : 				else

  02f1c	eb 05		 jmp	 SHORT $LN686@PageDialog
$LN204@PageDialog:

; 4330 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FORMAT_TITLE"));

  02f1e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@
$LN686@PageDialog:
  02f23	e8 00 00 00 00	 call	 _GetString
  02f28	83 c4 04	 add	 esp, 4
  02f2b	50		 push	 eax
  02f2c	68 e8 03 00 00	 push	 1000			; 000003e8H
  02f31	53		 push	 ebx
  02f32	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02f38	50		 push	 eax
  02f39	ff d6		 call	 esi
  02f3b	50		 push	 eax
  02f3c	ff d7		 call	 edi

; 4331 : 
; 4332 : 				/* Quick/Dynamic */
; 4333 : 
; 4334 : 				if (bHiddenVol)

  02f3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02f44	85 c9		 test	 ecx, ecx
  02f46	0f 84 87 00 00
	00		 je	 $LN202@PageDialog

; 4335 : 				{
; 4336 : 					quickFormat = !bHiddenVolHost;

  02f4c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  02f52	f7 da		 neg	 edx
  02f54	1b d2		 sbb	 edx, edx
  02f56	42		 inc	 edx
  02f57	89 15 00 00 00
	00		 mov	 DWORD PTR ?quickFormat@@3HC, edx ; quickFormat

; 4337 : 					bSparseFileSwitch = FALSE;

  02f5d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch

; 4338 : 
; 4339 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, quickFormat);

  02f67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?quickFormat@@3HC ; quickFormat
  02f6c	50		 push	 eax
  02f6d	68 ff 03 00 00	 push	 1023			; 000003ffH
  02f72	53		 push	 ebx
  02f73	e8 00 00 00 00	 call	 _SetCheckBox
  02f78	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4340 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString ((bDevice || !bHiddenVolHost) ? "IDC_QUICKFORMAT" : "SPARSE_FILE"));

  02f7b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  02f82	75 0f		 jne	 SHORT $LN394@PageDialog
  02f84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  02f8a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
  02f8f	85 c9		 test	 ecx, ecx
  02f91	75 05		 jne	 SHORT $LN395@PageDialog
$LN394@PageDialog:
  02f93	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
$LN395@PageDialog:
  02f98	50		 push	 eax
  02f99	e8 00 00 00 00	 call	 _GetString
  02f9e	83 c4 04	 add	 esp, 4
  02fa1	50		 push	 eax
  02fa2	68 ff 03 00 00	 push	 1023			; 000003ffH
  02fa7	53		 push	 ebx
  02fa8	ff d6		 call	 esi
  02faa	50		 push	 eax
  02fab	ff d7		 call	 edi

; 4341 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bDevice && bHiddenVolHost);

  02fad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  02fb4	74 15		 je	 SHORT $LN396@PageDialog
  02fb6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  02fbc	85 d2		 test	 edx, edx
  02fbe	74 0b		 je	 SHORT $LN396@PageDialog
  02fc0	b8 01 00 00 00	 mov	 eax, 1
  02fc5	50		 push	 eax

; 4342 : 				}
; 4343 : 				else

  02fc6	e9 b1 00 00 00	 jmp	 $LN687@PageDialog
$LN396@PageDialog:

; 4341 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bDevice && bHiddenVolHost);

  02fcb	33 c0		 xor	 eax, eax
  02fcd	50		 push	 eax

; 4342 : 				}
; 4343 : 				else

  02fce	e9 a9 00 00 00	 jmp	 $LN687@PageDialog
$LN202@PageDialog:

; 4344 : 				{
; 4345 : 					if (bDevice)

  02fd3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  02fda	74 2a		 je	 SHORT $LN200@PageDialog

; 4346 : 					{
; 4347 : 						bSparseFileSwitch = FALSE;
; 4348 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString("IDC_QUICKFORMAT"));

  02fdc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
  02fe1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch
  02feb	e8 00 00 00 00	 call	 _GetString
  02ff0	83 c4 04	 add	 esp, 4
  02ff3	50		 push	 eax
  02ff4	68 ff 03 00 00	 push	 1023			; 000003ffH
  02ff9	53		 push	 ebx
  02ffa	ff d6		 call	 esi
  02ffc	50		 push	 eax
  02ffd	ff d7		 call	 edi

; 4349 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), TRUE);

  02fff	6a 01		 push	 1

; 4350 : 					}
; 4351 : 					else

  03001	e9 76 00 00 00	 jmp	 $LN687@PageDialog
$LN200@PageDialog:

; 4352 : 					{
; 4353 : 						char root[TC_MAX_PATH];
; 4354 : 						DWORD fileSystemFlags = 0;
; 4355 : 
; 4356 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString("SPARSE_FILE"));

  03006	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
  0300b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _fileSystemFlags$133544[ebp], 0
  03012	e8 00 00 00 00	 call	 _GetString
  03017	83 c4 04	 add	 esp, 4
  0301a	50		 push	 eax
  0301b	68 ff 03 00 00	 push	 1023			; 000003ffH
  03020	53		 push	 ebx
  03021	ff d6		 call	 esi
  03023	50		 push	 eax
  03024	ff d7		 call	 edi

; 4357 : 
; 4358 : 						/* Check if the host file system supports sparse files */
; 4359 : 
; 4360 : 						if (GetVolumePathName (szFileName, root, sizeof (root)))

  03026	68 04 01 00 00	 push	 260			; 00000104H
  0302b	8d 85 58 0f 01
	00		 lea	 eax, DWORD PTR _root$133543[ebp]
  03031	50		 push	 eax
  03032	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  0303d	85 c0		 test	 eax, eax
  0303f	74 2a		 je	 SHORT $LN198@PageDialog

; 4361 : 						{
; 4362 : 							GetVolumeInformation (root, NULL, 0, NULL, NULL, &fileSystemFlags, NULL, 0);

  03041	6a 00		 push	 0
  03043	6a 00		 push	 0
  03045	8d 4d d8	 lea	 ecx, DWORD PTR _fileSystemFlags$133544[ebp]
  03048	51		 push	 ecx
  03049	6a 00		 push	 0
  0304b	6a 00		 push	 0
  0304d	6a 00		 push	 0
  0304f	6a 00		 push	 0
  03051	8d 95 58 0f 01
	00		 lea	 edx, DWORD PTR _root$133543[ebp]
  03057	52		 push	 edx
  03058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32

; 4363 : 							bSparseFileSwitch = fileSystemFlags & FILE_SUPPORTS_SPARSE_FILES;

  0305e	8b 45 d8	 mov	 eax, DWORD PTR _fileSystemFlags$133544[ebp]
  03061	83 e0 40	 and	 eax, 64			; 00000040H
  03064	a3 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, eax ; bSparseFileSwitch

; 4364 : 						}
; 4365 : 						else

  03069	eb 0a		 jmp	 SHORT $LN197@PageDialog
$LN198@PageDialog:

; 4366 : 							bSparseFileSwitch = FALSE;

  0306b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch
$LN197@PageDialog:

; 4367 : 
; 4368 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bSparseFileSwitch);

  03075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  0307b	51		 push	 ecx
$LN687@PageDialog:
  0307c	68 ff 03 00 00	 push	 1023			; 000003ffH
  03081	53		 push	 ebx
  03082	ff d6		 call	 esi
  03084	50		 push	 eax
  03085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4369 : 					}
; 4370 : 				}
; 4371 : 
; 4372 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SHOW_KEYS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  0308b	33 d2		 xor	 edx, edx
  0308d	39 15 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edx
  03093	6a 00		 push	 0
  03095	0f 95 c2	 setne	 dl
  03098	52		 push	 edx
  03099	68 f1 00 00 00	 push	 241			; 000000f1H
  0309e	68 06 04 00 00	 push	 1030			; 00000406H
  030a3	53		 push	 ebx
  030a4	ff d6		 call	 esi
  030a6	50		 push	 eax
  030a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4373 : 				SetWindowText (GetDlgItem (hwndDlg, IDC_RANDOM_BYTES), showKeys ? "" : "********************************                                              ");

  030ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  030b4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  030b9	75 05		 jne	 SHORT $LN399@PageDialog
  030bb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN399@PageDialog:
  030c0	50		 push	 eax
  030c1	68 fc 03 00 00	 push	 1020			; 000003fcH
  030c6	53		 push	 ebx
  030c7	ff d6		 call	 esi
  030c9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  030cf	50		 push	 eax
  030d0	ff d7		 call	 edi

; 4374 : 				SetWindowText (GetDlgItem (hwndDlg, IDC_HEADER_KEY), showKeys ? "" : "********************************                                              ");

  030d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  030d9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  030de	75 05		 jne	 SHORT $LN401@PageDialog
  030e0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN401@PageDialog:
  030e5	50		 push	 eax
  030e6	68 f9 03 00 00	 push	 1017			; 000003f9H
  030eb	53		 push	 ebx
  030ec	ff d6		 call	 esi
  030ee	50		 push	 eax
  030ef	ff d7		 call	 edi

; 4375 : 				SetWindowText (GetDlgItem (hwndDlg, IDC_DISK_KEY), showKeys ? "" : "********************************                                              ");

  030f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  030f8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  030fd	75 05		 jne	 SHORT $LN403@PageDialog
  030ff	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN403@PageDialog:
  03104	50		 push	 eax
  03105	68 fb 03 00 00	 push	 1019			; 000003fbH
  0310a	53		 push	 ebx
  0310b	ff d6		 call	 esi
  0310d	50		 push	 eax
  0310e	ff d7		 call	 edi

; 4376 : 
; 4377 : 				SendMessage (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), CB_RESETCONTENT, 0, 0);

  03110	6a 00		 push	 0
  03112	6a 00		 push	 0
  03114	68 4b 01 00 00	 push	 331			; 0000014bH
  03119	68 04 04 00 00	 push	 1028			; 00000404H
  0311e	53		 push	 ebx
  0311f	ff d6		 call	 esi
  03121	50		 push	 eax
  03122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4378 : 				AddComboPairW (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), GetString ("DEFAULT"), 0);

  03128	6a 00		 push	 0
  0312a	68 00 00 00 00	 push	 OFFSET ??_C@_07MGCPDNLD@DEFAULT?$AA@
  0312f	e8 00 00 00 00	 call	 _GetString
  03134	83 c4 04	 add	 esp, 4
  03137	50		 push	 eax
  03138	68 04 04 00 00	 push	 1028			; 00000404H
  0313d	53		 push	 ebx
  0313e	ff d6		 call	 esi
  03140	50		 push	 eax
  03141	e8 00 00 00 00	 call	 _AddComboPairW
  03146	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4379 : 
; 4380 : 				for (int i = 1; i <= 128; i *= 2)

  03149	bf 01 00 00 00	 mov	 edi, 1
  0314e	8b ff		 npad	 2
$LL196@PageDialog:

; 4381 : 				{
; 4382 : 					wstringstream s;

  03150	6a 01		 push	 1
  03152	6a 03		 push	 3
  03154	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp]
  0315a	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0315f	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5

; 4383 : 					int size = GetFormatSectorSize() * i;

  03166	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0316b	0f af c7	 imul	 eax, edi

; 4384 : 
; 4385 : 					if (size > TC_MAX_FAT_CLUSTER_SIZE)

  0316e	3d 00 00 04 00	 cmp	 eax, 262144		; 00040000H
  03173	0f 8f c4 00 00
	00		 jg	 $LN572@PageDialog

; 4387 : 
; 4388 : 					if (size == 512)

  03179	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  0317e	75 16		 jne	 SHORT $LN192@PageDialog

; 4389 : 						s << L"0.5";

  03180	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _s$133703[ebp+8]
  03186	68 00 00 00 00	 push	 OFFSET ??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@
  0318b	50		 push	 eax
  0318c	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  03191	83 c4 08	 add	 esp, 8

; 4390 : 					else

  03194	eb 1c		 jmp	 SHORT $LN191@PageDialog
$LN192@PageDialog:

; 4391 : 						s << size / BYTES_PER_KB;

  03196	6a 00		 push	 0
  03198	99		 cdq
  03199	68 00 04 00 00	 push	 1024			; 00000400H
  0319e	52		 push	 edx
  0319f	50		 push	 eax
  031a0	e8 00 00 00 00	 call	 __alldiv
  031a5	52		 push	 edx
  031a6	50		 push	 eax
  031a7	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp+8]
  031ad	e8 00 00 00 00	 call	 ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
$LN191@PageDialog:

; 4392 : 
; 4393 : 					s << L" " << GetString ("KB");

  031b2	68 00 00 00 00	 push	 OFFSET ??_C@_02LODOGJEL@KB?$AA@
  031b7	e8 00 00 00 00	 call	 _GetString
  031bc	83 c4 04	 add	 esp, 4
  031bf	50		 push	 eax
  031c0	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp+8]
  031c6	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  031cb	51		 push	 ecx
  031cc	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  031d1	83 c4 08	 add	 esp, 8
  031d4	50		 push	 eax
  031d5	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  031da	83 c4 08	 add	 esp, 8

; 4394 : 
; 4395 : 					AddComboPairW (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), s.str().c_str(), i);

  031dd	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T165692[ebp]
  031e3	52		 push	 edx
  031e4	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp]
  031ea	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  031ef	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  031f3	72 05		 jb	 SHORT $LN537@PageDialog
  031f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  031f8	eb 03		 jmp	 SHORT $LN538@PageDialog
$LN537@PageDialog:
  031fa	83 c0 04	 add	 eax, 4
$LN538@PageDialog:
  031fd	57		 push	 edi
  031fe	50		 push	 eax
  031ff	68 04 04 00 00	 push	 1028			; 00000404H
  03204	53		 push	 ebx
  03205	ff d6		 call	 esi
  03207	50		 push	 eax
  03208	e8 00 00 00 00	 call	 _AddComboPairW
  0320d	83 c4 0c	 add	 esp, 12			; 0000000cH
  03210	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T165692[ebp]
  03216	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4396 : 				}

  0321b	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp]
  03221	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  03228	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  0322d	03 ff		 add	 edi, edi
  0322f	81 ff 80 00 00
	00		 cmp	 edi, 128		; 00000080H
  03235	0f 8e 15 ff ff
	ff		 jle	 $LL196@PageDialog

; 4384 : 
; 4385 : 					if (size > TC_MAX_FAT_CLUSTER_SIZE)

  0323b	eb 12		 jmp	 SHORT $LN194@PageDialog
$LN572@PageDialog:

; 4386 : 						break;

  0323d	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp]
  03243	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0324a	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
$LN194@PageDialog:

; 4397 : 
; 4398 : 				SendMessage (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), CB_SETCURSEL, 0, 0);

  0324f	6a 00		 push	 0
  03251	6a 00		 push	 0
  03253	68 4e 01 00 00	 push	 334			; 0000014eH
  03258	68 04 04 00 00	 push	 1028			; 00000404H
  0325d	53		 push	 ebx
  0325e	ff d6		 call	 esi
  03260	50		 push	 eax
  03261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4399 : 
; 4400 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), TRUE);

  03267	6a 01		 push	 1
  03269	68 04 04 00 00	 push	 1028			; 00000404H
  0326e	53		 push	 ebx
  0326f	ff d6		 call	 esi
  03271	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  03277	50		 push	 eax
  03278	ff d7		 call	 edi

; 4401 : 
; 4402 : 				/* Filesystems */
; 4403 : 
; 4404 : 				bNTFSallowed = FALSE;

  0327a	33 c0		 xor	 eax, eax

; 4405 : 				bFATallowed = FALSE;
; 4406 : 				bNoFSallowed = FALSE;
; 4407 : 
; 4408 : 				SendMessage (GetDlgItem (hwndDlg, IDC_FILESYS), CB_RESETCONTENT, 0, 0);

  0327c	50		 push	 eax
  0327d	50		 push	 eax
  0327e	68 4b 01 00 00	 push	 331			; 0000014bH
  03283	68 05 04 00 00	 push	 1029			; 00000405H
  03288	53		 push	 ebx
  03289	89 45 ec	 mov	 DWORD PTR _bNTFSallowed$133521[ebp], eax
  0328c	89 45 dc	 mov	 DWORD PTR _bFATallowed$133522[ebp], eax
  0328f	89 45 e8	 mov	 DWORD PTR _bNoFSallowed$133523[ebp], eax
  03292	ff d6		 call	 esi
  03294	50		 push	 eax
  03295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4409 : 
; 4410 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_FILESYS), TRUE);

  0329b	6a 01		 push	 1
  0329d	68 05 04 00 00	 push	 1029			; 00000405H
  032a2	53		 push	 ebx
  032a3	ff d6		 call	 esi
  032a5	50		 push	 eax
  032a6	ff d7		 call	 edi

; 4411 : 
; 4412 : 				uint64 dataAreaSize = GetVolumeDataAreaSize (bHiddenVol && !bHiddenVolHost, nVolumeSize);

  032a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  032ad	85 c0		 test	 eax, eax
  032af	74 0f		 je	 SHORT $LN408@PageDialog
  032b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  032b7	85 c9		 test	 ecx, ecx
  032b9	75 05		 jne	 SHORT $LN408@PageDialog
  032bb	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  032be	eb 02		 jmp	 SHORT $LN409@PageDialog
$LN408@PageDialog:
  032c0	33 c0		 xor	 eax, eax
$LN409@PageDialog:
  032c2	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  032c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  032ce	52		 push	 edx
  032cf	51		 push	 ecx
  032d0	50		 push	 eax
  032d1	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  032d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  032d9	89 45 e0	 mov	 DWORD PTR _dataAreaSize$133741[ebp], eax
  032dc	89 55 e4	 mov	 DWORD PTR _dataAreaSize$133741[ebp+4], edx

; 4413 : 
; 4414 : 				if (!CreatingHiddenSysVol())	

  032df	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  032e4	85 c0		 test	 eax, eax
  032e6	0f 85 8b 00 00
	00		 jne	 $LN190@PageDialog

; 4415 : 				{
; 4416 : 					if (dataAreaSize >= TC_MIN_NTFS_FS_SIZE && dataAreaSize <= TC_MAX_NTFS_FS_SIZE)

  032ec	8b 4d e0	 mov	 ecx, DWORD PTR _dataAreaSize$133741[ebp]
  032ef	8b 7d e4	 mov	 edi, DWORD PTR _dataAreaSize$133741[ebp+4]
  032f2	81 c1 00 c0 c8
	ff		 add	 ecx, -3620864		; ffc8c000H
  032f8	8b c7		 mov	 eax, edi
  032fa	83 d0 ff	 adc	 eax, -1
  032fd	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  03302	77 29		 ja	 SHORT $LN189@PageDialog
  03304	72 08		 jb	 SHORT $LN595@PageDialog
  03306	81 f9 00 c0 c8
	ff		 cmp	 ecx, -3620864		; ffc8c000H
  0330c	77 1f		 ja	 SHORT $LN189@PageDialog
$LN595@PageDialog:

; 4417 : 					{
; 4418 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "NTFS", FILESYS_NTFS);

  0330e	6a 02		 push	 2
  03310	68 00 00 00 00	 push	 OFFSET ??_C@_04HPPAIJNK@NTFS?$AA@
  03315	68 05 04 00 00	 push	 1029			; 00000405H
  0331a	53		 push	 ebx
  0331b	ff d6		 call	 esi
  0331d	50		 push	 eax
  0331e	e8 00 00 00 00	 call	 _AddComboPair
  03323	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4419 : 						bNTFSallowed = TRUE;

  03326	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bNTFSallowed$133521[ebp], 1
$LN189@PageDialog:

; 4420 : 					}
; 4421 : 
; 4422 : 					if (dataAreaSize >= TC_MIN_FAT_FS_SIZE && dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  0332d	85 ff		 test	 edi, edi
  0332f	77 09		 ja	 SHORT $LN596@PageDialog
  03331	81 7d e0 00 90
	00 00		 cmp	 DWORD PTR _dataAreaSize$133741[ebp], 36864 ; 00009000H
  03338	72 57		 jb	 SHORT $LN187@PageDialog
$LN596@PageDialog:
  0333a	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0333f	6a 01		 push	 1
  03341	99		 cdq
  03342	6a 00		 push	 0
  03344	52		 push	 edx
  03345	50		 push	 eax
  03346	e8 00 00 00 00	 call	 __allmul
  0334b	3b fa		 cmp	 edi, edx
  0334d	77 42		 ja	 SHORT $LN187@PageDialog
  0334f	72 05		 jb	 SHORT $LN597@PageDialog
  03351	39 45 e0	 cmp	 DWORD PTR _dataAreaSize$133741[ebp], eax
  03354	77 3b		 ja	 SHORT $LN187@PageDialog
$LN597@PageDialog:

; 4423 : 					{
; 4424 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "FAT", FILESYS_FAT);

  03356	6a 01		 push	 1
  03358	68 00 00 00 00	 push	 OFFSET ??_C@_03MPELFIKF@FAT?$AA@
  0335d	68 05 04 00 00	 push	 1029			; 00000405H
  03362	53		 push	 ebx
  03363	ff d6		 call	 esi
  03365	50		 push	 eax
  03366	e8 00 00 00 00	 call	 _AddComboPair
  0336b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4425 : 						bFATallowed = TRUE;

  0336e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bFATallowed$133522[ebp], 1

; 4426 : 					}
; 4427 : 				}
; 4428 : 				else

  03375	eb 1a		 jmp	 SHORT $LN187@PageDialog
$LN190@PageDialog:

; 4429 : 				{
; 4430 : 					// We're creating a hidden volume for a hidden OS, so we don't need to format it with
; 4431 : 					// any filesystem (the entire OS will be copied to the hidden volume sector by sector).
; 4432 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_FILESYS), FALSE);

  03377	6a 00		 push	 0
  03379	68 05 04 00 00	 push	 1029			; 00000405H
  0337e	53		 push	 ebx
  0337f	ff d6		 call	 esi
  03381	50		 push	 eax
  03382	ff d7		 call	 edi

; 4433 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), FALSE);

  03384	6a 00		 push	 0
  03386	68 04 04 00 00	 push	 1028			; 00000404H
  0338b	53		 push	 ebx
  0338c	ff d6		 call	 esi
  0338e	50		 push	 eax
  0338f	ff d7		 call	 edi
$LN187@PageDialog:

; 4434 : 				}
; 4435 : 
; 4436 : 				if (!bHiddenVolHost)

  03391	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03397	85 d2		 test	 edx, edx
  03399	75 27		 jne	 SHORT $LN186@PageDialog

; 4437 : 				{
; 4438 : 					AddComboPairW (GetDlgItem (hwndDlg, IDC_FILESYS), GetString ("NONE"), FILESYS_NONE);

  0339b	52		 push	 edx
  0339c	68 00 00 00 00	 push	 OFFSET ??_C@_04OKGDLNCL@NONE?$AA@
  033a1	e8 00 00 00 00	 call	 _GetString
  033a6	83 c4 04	 add	 esp, 4
  033a9	50		 push	 eax
  033aa	68 05 04 00 00	 push	 1029			; 00000405H
  033af	53		 push	 ebx
  033b0	ff d6		 call	 esi
  033b2	50		 push	 eax
  033b3	e8 00 00 00 00	 call	 _AddComboPairW
  033b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4439 : 					bNoFSallowed = TRUE;

  033bb	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bNoFSallowed$133523[ebp], 1
$LN186@PageDialog:

; 4440 : 				}
; 4441 : 
; 4442 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  033c2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  033c8	6a 01		 push	 1
  033ca	68 10 04 00 00	 push	 1040			; 00000410H
  033cf	53		 push	 ebx
  033d0	ff d7		 call	 edi
  033d2	50		 push	 eax
  033d3	ff d6		 call	 esi
  033d5	50		 push	 eax
  033d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4443 : 
; 4444 : 				if (fileSystem == FILESYS_NONE)	// If no file system has been previously selected

  033dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  033e1	85 c0		 test	 eax, eax
  033e3	75 6f		 jne	 SHORT $LN178@PageDialog

; 4445 : 				{
; 4446 : 					// Set default file system
; 4447 : 
; 4448 : 					if (bFATallowed && !(nNeedToStoreFilesOver4GB == 1 && bNTFSallowed))

  033e5	39 45 dc	 cmp	 DWORD PTR _bFATallowed$133522[ebp], eax
  033e8	74 1a		 je	 SHORT $LN184@PageDialog
  033ea	b8 01 00 00 00	 mov	 eax, 1
  033ef	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  033f5	75 06		 jne	 SHORT $LN183@PageDialog
  033f7	83 7d ec 00	 cmp	 DWORD PTR _bNTFSallowed$133521[ebp], 0
  033fb	75 0d		 jne	 SHORT $LN580@PageDialog
$LN183@PageDialog:

; 4449 : 						fileSystem = FILESYS_FAT;

  033fd	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem
  03402	eb 50		 jmp	 SHORT $LN178@PageDialog
$LN184@PageDialog:

; 4450 : 					else if (bNTFSallowed)

  03404	83 7d ec 00	 cmp	 DWORD PTR _bNTFSallowed$133521[ebp], 0
  03408	74 0c		 je	 SHORT $LN181@PageDialog
$LN580@PageDialog:

; 4451 : 						fileSystem = FILESYS_NTFS;

  0340a	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 2 ; fileSystem
  03414	eb 3e		 jmp	 SHORT $LN178@PageDialog
$LN181@PageDialog:

; 4452 : 					else if (bNoFSallowed)

  03416	83 7d e8 00	 cmp	 DWORD PTR _bNoFSallowed$133523[ebp], 0
  0341a	74 0c		 je	 SHORT $LN179@PageDialog

; 4453 : 						fileSystem = FILESYS_NONE;

  0341c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem

; 4454 : 					else

  03426	eb 2c		 jmp	 SHORT $LN178@PageDialog
$LN179@PageDialog:

; 4455 : 					{
; 4456 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "---", 0);

  03428	6a 00		 push	 0
  0342a	68 00 00 00 00	 push	 OFFSET ??_C@_03JMFMNIFM@?9?9?9?$AA@
  0342f	68 05 04 00 00	 push	 1029			; 00000405H
  03434	53		 push	 ebx
  03435	ff d6		 call	 esi
  03437	50		 push	 eax
  03438	e8 00 00 00 00	 call	 _AddComboPair
  0343d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4457 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  03440	6a 00		 push	 0
  03442	68 10 04 00 00	 push	 1040			; 00000410H
  03447	53		 push	 ebx
  03448	ff d7		 call	 edi
  0344a	50		 push	 eax
  0344b	ff d6		 call	 esi
  0344d	50		 push	 eax
  0344e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN178@PageDialog:

; 4458 : 					}
; 4459 : 				}
; 4460 : 
; 4461 : 				SendMessage (GetDlgItem (hwndDlg, IDC_FILESYS), CB_SETCURSEL, 0, 0);

  03454	6a 00		 push	 0
  03456	6a 00		 push	 0
  03458	68 4e 01 00 00	 push	 334			; 0000014eH
  0345d	68 05 04 00 00	 push	 1029			; 00000405H
  03462	53		 push	 ebx
  03463	ff d6		 call	 esi
  03465	50		 push	 eax
  03466	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4462 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_FILESYS), (int *) &fileSystem);

  0346c	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  03471	68 05 04 00 00	 push	 1029			; 00000405H
  03476	53		 push	 ebx
  03477	ff d6		 call	 esi
  03479	50		 push	 eax
  0347a	e8 00 00 00 00	 call	 _SelectAlgo
  0347f	83 c4 08	 add	 esp, 8

; 4463 : 
; 4464 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ABORT_BUTTON), FALSE);

  03482	6a 00		 push	 0
  03484	68 f8 03 00 00	 push	 1016			; 000003f8H
  03489	53		 push	 ebx
  0348a	ff d6		 call	 esi
  0348c	50		 push	 eax
  0348d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4465 : 
; 4466 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("FORMAT"));

  03493	68 00 00 00 00	 push	 OFFSET ??_C@_06DPGELLJH@FORMAT?$AA@
  03498	e8 00 00 00 00	 call	 _GetString
  0349d	83 c4 04	 add	 esp, 4
  034a0	50		 push	 eax
  034a1	68 10 04 00 00	 push	 1040			; 00000410H
  034a6	53		 push	 ebx
  034a7	ff d7		 call	 edi
  034a9	50		 push	 eax
  034aa	ff d6		 call	 esi
  034ac	50		 push	 eax
  034ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4467 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  034b3	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  034b8	e8 00 00 00 00	 call	 _GetString
  034bd	83 c4 04	 add	 esp, 4
  034c0	50		 push	 eax
  034c1	68 11 04 00 00	 push	 1041			; 00000411H
  034c6	53		 push	 ebx
  034c7	ff d7		 call	 edi
  034c9	50		 push	 eax
  034ca	ff d6		 call	 esi
  034cc	50		 push	 eax
  034cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4468 : 
; 4469 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  034d3	6a 01		 push	 1
  034d5	68 11 04 00 00	 push	 1041			; 00000411H
  034da	53		 push	 ebx
  034db	ff d7		 call	 edi
  034dd	50		 push	 eax
  034de	ff d6		 call	 esi
  034e0	50		 push	 eax
  034e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4470 : 
; 4471 : 				SetFocus (GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  034e7	68 10 04 00 00	 push	 1040			; 00000410H
  034ec	53		 push	 ebx
  034ed	ff d7		 call	 edi
  034ef	50		 push	 eax
  034f0	ff d6		 call	 esi
  034f2	50		 push	 eax
  034f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  034f9	33 c0		 xor	 eax, eax
  034fb	e9 73 1c 00 00	 jmp	 $LN333@PageDialog
$LN177@PageDialog:

; 4472 : 			}
; 4473 : 			break;
; 4474 : 
; 4475 : 		case FORMAT_FINISHED_PAGE:
; 4476 : 			{
; 4477 : 				if (!bHiddenVolHost && bHiddenVol && !bHiddenVolFinished)

  03500	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  03506	85 c9		 test	 ecx, ecx
  03508	0f 85 04 01 00
	00		 jne	 $LN176@PageDialog
  0350e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03514	85 d2		 test	 edx, edx
  03516	0f 84 f6 00 00
	00		 je	 $LN176@PageDialog
  0351c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  03521	85 c0		 test	 eax, eax
  03523	0f 85 e9 00 00
	00		 jne	 $LN176@PageDialog

; 4478 : 				{
; 4479 : 					wchar_t msg[4096];
; 4480 : 
; 4481 : 					nNeedToStoreFilesOver4GB = -1;
; 4482 : 
; 4483 : 					if (bHiddenOS)

  03529	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0352f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, -1 ; nNeedToStoreFilesOver4GB
  03539	85 c9		 test	 ecx, ecx
  0353b	0f 84 84 00 00
	00		 je	 $LN175@PageDialog

; 4484 : 					{
; 4485 : 						wchar_t szMaxRecomOuterVolFillSize[100];
; 4486 : 
; 4487 : 						__int64 maxRecomOuterVolFillSize = 0;
; 4488 : 
; 4489 : 						// Determine the maximum recommended total size of files that can be copied to the outer volume
; 4490 : 						// while leaving enough space for the hidden volume, which must contain a clone of the OS
; 4491 : 
; 4492 : 						maxRecomOuterVolFillSize = nVolumeSize - GetSystemPartitionSize(); 

  03541	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  03546	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  0354c	2b c8		 sub	 ecx, eax
  0354e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4

; 4493 : 
; 4494 : 						// -50% reserve for filesystem "peculiarities"
; 4495 : 						maxRecomOuterVolFillSize /= 2;	

  03553	6a 00		 push	 0
  03555	6a 02		 push	 2
  03557	1b c2		 sbb	 eax, edx
  03559	50		 push	 eax
  0355a	51		 push	 ecx
  0355b	e8 00 00 00 00	 call	 __alldiv

; 4496 : 
; 4497 : 						swprintf (szMaxRecomOuterVolFillSize, L"%I64d %s", maxRecomOuterVolFillSize / BYTES_PER_MB, GetString ("MB"));

  03560	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  03565	8b f0		 mov	 esi, eax
  03567	8b fa		 mov	 edi, edx
  03569	e8 00 00 00 00	 call	 _GetString
  0356e	83 c4 04	 add	 esp, 4
  03571	50		 push	 eax
  03572	6a 00		 push	 0
  03574	68 00 00 10 00	 push	 1048576			; 00100000H
  03579	57		 push	 edi
  0357a	56		 push	 esi
  0357b	e8 00 00 00 00	 call	 __alldiv
  03580	52		 push	 edx
  03581	50		 push	 eax
  03582	8d 8d c0 10 01
	00		 lea	 ecx, DWORD PTR _szMaxRecomOuterVolFillSize$133765[ebp]
  03588	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  0358d	51		 push	 ecx
  0358e	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 4498 : 
; 4499 : 						swprintf (msg, GetString ("HIDVOL_HOST_FILLING_HELP_SYSENC"), hiddenVolHostDriveNo + 'A', szMaxRecomOuterVolFillSize);			

  03593	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03598	83 c4 14	 add	 esp, 20			; 00000014H
  0359b	8d 95 c0 10 01
	00		 lea	 edx, DWORD PTR _szMaxRecomOuterVolFillSize$133765[ebp]
  035a1	52		 push	 edx
  035a2	83 c0 41	 add	 eax, 65			; 00000041H
  035a5	50		 push	 eax
  035a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@
  035ab	e8 00 00 00 00	 call	 _GetString
  035b0	83 c4 04	 add	 esp, 4
  035b3	50		 push	 eax
  035b4	8d 8d b0 3e 00
	00		 lea	 ecx, DWORD PTR _msg$133763[ebp]
  035ba	51		 push	 ecx
  035bb	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  035c0	83 c4 10	 add	 esp, 16			; 00000010H

; 4500 : 					}
; 4501 : 					else

  035c3	eb 27		 jmp	 SHORT $LN174@PageDialog
$LN175@PageDialog:

; 4502 : 						swprintf (msg, GetString ("HIDVOL_HOST_FILLING_HELP"), hiddenVolHostDriveNo + 'A');

  035c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  035cb	83 c2 41	 add	 edx, 65			; 00000041H
  035ce	52		 push	 edx
  035cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@
  035d4	e8 00 00 00 00	 call	 _GetString
  035d9	83 c4 04	 add	 esp, 4
  035dc	50		 push	 eax
  035dd	8d 85 b0 3e 00
	00		 lea	 eax, DWORD PTR _msg$133763[ebp]
  035e3	50		 push	 eax
  035e4	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  035e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN174@PageDialog:

; 4503 : 
; 4504 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), msg);

  035ec	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  035f2	8d 8d b0 3e 00
	00		 lea	 ecx, DWORD PTR _msg$133763[ebp]
  035f8	51		 push	 ecx
  035f9	68 eb 03 00 00	 push	 1003			; 000003ebH
  035fe	53		 push	 ebx
  035ff	ff d6		 call	 esi
  03601	50		 push	 eax
  03602	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4505 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_HOST_FILLING_TITLE"));

  03608	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@

; 4506 : 				}
; 4507 : 				else 

  0360d	e9 80 00 00 00	 jmp	 $LN688@PageDialog
$LN176@PageDialog:

; 4508 : 				{
; 4509 : 					if (bHiddenOS)

  03612	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03618	85 d2		 test	 edx, edx
  0361a	74 25		 je	 SHORT $LN172@PageDialog

; 4510 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_VOL_FORMAT_FINISHED_HELP"));

  0361c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@
  03621	e8 00 00 00 00	 call	 _GetString
  03626	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0362c	83 c4 04	 add	 esp, 4
  0362f	50		 push	 eax
  03630	68 eb 03 00 00	 push	 1003			; 000003ebH
  03635	53		 push	 ebx
  03636	ff d6		 call	 esi
  03638	50		 push	 eax
  03639	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4511 : 					else

  0363f	eb 3c		 jmp	 SHORT $LN171@PageDialog
$LN172@PageDialog:

; 4512 : 					{
; 4513 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_FINISHED_INFO" : "FORMAT_FINISHED_HELP"));

  03641	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  03646	85 c0		 test	 eax, eax
  03648	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  0364d	75 05		 jne	 SHORT $LN411@PageDialog
  0364f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@
$LN411@PageDialog:
  03654	50		 push	 eax
  03655	e8 00 00 00 00	 call	 _GetString
  0365a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03660	83 c4 04	 add	 esp, 4
  03663	50		 push	 eax
  03664	68 eb 03 00 00	 push	 1003			; 000003ebH
  03669	53		 push	 ebx
  0366a	ff d6		 call	 esi
  0366c	50		 push	 eax
  0366d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4514 : 						bConfirmQuit = FALSE;

  03673	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 0 ; bConfirmQuit
$LN171@PageDialog:

; 4515 : 					}
; 4516 : 
; 4517 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVol ? "HIDVOL_FORMAT_FINISHED_TITLE" : "FORMAT_FINISHED_TITLE"));

  0367d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03683	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@
  03688	85 c9		 test	 ecx, ecx
  0368a	75 05		 jne	 SHORT $LN413@PageDialog
  0368c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@
$LN413@PageDialog:
  03691	50		 push	 eax
$LN688@PageDialog:
  03692	e8 00 00 00 00	 call	 _GetString
  03697	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0369d	83 c4 04	 add	 esp, 4
  036a0	50		 push	 eax
  036a1	68 e8 03 00 00	 push	 1000			; 000003e8H
  036a6	53		 push	 ebx
  036a7	ff d7		 call	 edi
  036a9	50		 push	 eax
  036aa	ff d6		 call	 esi
  036ac	50		 push	 eax
  036ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4518 : 				}
; 4519 : 
; 4520 : 
; 4521 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  036b3	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  036b8	e8 00 00 00 00	 call	 _GetString
  036bd	83 c4 04	 add	 esp, 4
  036c0	50		 push	 eax
  036c1	68 10 04 00 00	 push	 1040			; 00000410H
  036c6	53		 push	 ebx
  036c7	ff d7		 call	 edi
  036c9	50		 push	 eax
  036ca	ff d6		 call	 esi
  036cc	50		 push	 eax
  036cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4522 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  036d3	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  036d8	e8 00 00 00 00	 call	 _GetString
  036dd	83 c4 04	 add	 esp, 4
  036e0	50		 push	 eax
  036e1	68 11 04 00 00	 push	 1041			; 00000411H
  036e6	53		 push	 ebx
  036e7	ff d7		 call	 edi
  036e9	50		 push	 eax
  036ea	ff d6		 call	 esi
  036ec	50		 push	 eax
  036ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4523 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  036f3	6a 01		 push	 1
  036f5	68 10 04 00 00	 push	 1040			; 00000410H
  036fa	53		 push	 ebx
  036fb	ff d7		 call	 edi
  036fd	50		 push	 eax
  036fe	ff d6		 call	 esi
  03700	50		 push	 eax
  03701	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4524 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), (!bHiddenVol || bHiddenVolFinished) && !bHiddenOS && !bInPlaceEncNonSys);

  03707	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0370d	85 d2		 test	 edx, edx
  0370f	74 09		 je	 SHORT $LN414@PageDialog
  03711	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  03716	85 c0		 test	 eax, eax
  03718	74 19		 je	 SHORT $LN415@PageDialog
$LN414@PageDialog:
  0371a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03720	85 c9		 test	 ecx, ecx
  03722	75 0f		 jne	 SHORT $LN415@PageDialog
  03724	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  0372a	85 d2		 test	 edx, edx
  0372c	75 05		 jne	 SHORT $LN415@PageDialog
  0372e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  03731	eb 02		 jmp	 SHORT $LN416@PageDialog
$LN415@PageDialog:
  03733	33 c0		 xor	 eax, eax
$LN416@PageDialog:
  03735	50		 push	 eax
  03736	68 11 04 00 00	 push	 1041			; 00000411H
  0373b	53		 push	 ebx
  0373c	ff d7		 call	 edi
  0373e	50		 push	 eax
  0373f	ff d6		 call	 esi
  03741	50		 push	 eax
  03742	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4525 : 
; 4526 : 				if ((!bHiddenVol || bHiddenVolFinished) && !bHiddenOS)

  03748	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0374d	85 c0		 test	 eax, eax
  0374f	74 0e		 je	 SHORT $LN169@PageDialog
  03751	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  03757	85 c9		 test	 ecx, ecx
  03759	0f 84 cd f2 ff
	ff		 je	 $LN328@PageDialog
$LN169@PageDialog:
  0375f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03765	85 d2		 test	 edx, edx
  03767	0f 85 bf f2 ff
	ff		 jne	 $LN328@PageDialog

; 4527 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  0376d	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  03772	e8 00 00 00 00	 call	 _GetString
  03777	83 c4 04	 add	 esp, 4
  0377a	50		 push	 eax
  0377b	6a 02		 push	 2
  0377d	53		 push	 ebx
  0377e	ff d7		 call	 edi
  03780	50		 push	 eax
  03781	ff d6		 call	 esi
  03783	50		 push	 eax
  03784	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0378a	33 c0		 xor	 eax, eax
  0378c	e9 e2 19 00 00	 jmp	 $LN333@PageDialog
$LN168@PageDialog:

; 4528 : 			}
; 4529 : 			break;
; 4530 : 
; 4531 : 		case SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE:
; 4532 : 
; 4533 : 			if (!IsHiddenOSRunning() || !bHiddenOS)

  03791	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  03796	85 c0		 test	 eax, eax
  03798	0f 84 f3 00 00
	00		 je	 $LN166@PageDialog
  0379e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  037a3	85 c0		 test	 eax, eax
  037a5	0f 84 e6 00 00
	00		 je	 $LN166@PageDialog

; 4538 : 			}
; 4539 : 
; 4540 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_INITIAL_INFO_TITLE"));

  037ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@
  037b0	e8 00 00 00 00	 call	 _GetString
  037b5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  037bb	83 c4 04	 add	 esp, 4
  037be	50		 push	 eax
  037bf	68 e8 03 00 00	 push	 1000			; 000003e8H
  037c4	53		 push	 ebx
  037c5	ff d7		 call	 edi
  037c7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  037cd	50		 push	 eax
  037ce	ff d6		 call	 esi
  037d0	50		 push	 eax
  037d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4541 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("FIRST_HIDDEN_OS_BOOT_INFO"));

  037d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@
  037dc	e8 00 00 00 00	 call	 _GetString
  037e1	83 c4 04	 add	 esp, 4
  037e4	50		 push	 eax
  037e5	68 eb 03 00 00	 push	 1003			; 000003ebH
  037ea	53		 push	 ebx
  037eb	ff d6		 call	 esi
  037ed	50		 push	 eax
  037ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4542 : 
; 4543 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  037f4	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  037f9	e8 00 00 00 00	 call	 _GetString
  037fe	83 c4 04	 add	 esp, 4
  03801	50		 push	 eax
  03802	68 10 04 00 00	 push	 1040			; 00000410H
  03807	53		 push	 ebx
  03808	ff d7		 call	 edi
  0380a	50		 push	 eax
  0380b	ff d6		 call	 esi
  0380d	50		 push	 eax
  0380e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4544 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  03814	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  03819	e8 00 00 00 00	 call	 _GetString
  0381e	83 c4 04	 add	 esp, 4
  03821	50		 push	 eax
  03822	68 11 04 00 00	 push	 1041			; 00000411H
  03827	53		 push	 ebx
  03828	ff d7		 call	 edi
  0382a	50		 push	 eax
  0382b	ff d6		 call	 esi
  0382d	50		 push	 eax
  0382e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4545 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));

  03834	68 00 00 00 00	 push	 OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  03839	e8 00 00 00 00	 call	 _GetString
  0383e	83 c4 04	 add	 esp, 4
  03841	50		 push	 eax
  03842	6a 02		 push	 2
  03844	53		 push	 ebx
  03845	ff d7		 call	 edi
  03847	50		 push	 eax
  03848	ff d6		 call	 esi
  0384a	50		 push	 eax
  0384b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4546 : 
; 4547 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  03851	6a 01		 push	 1
  03853	68 10 04 00 00	 push	 1040			; 00000410H
  03858	53		 push	 ebx
  03859	ff d7		 call	 edi
  0385b	50		 push	 eax
  0385c	ff d6		 call	 esi
  0385e	50		 push	 eax
  0385f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4548 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  03865	6a 00		 push	 0
  03867	68 11 04 00 00	 push	 1041			; 00000411H
  0386c	53		 push	 ebx
  0386d	ff d7		 call	 edi
  0386f	50		 push	 eax
  03870	ff d6		 call	 esi
  03872	50		 push	 eax
  03873	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4549 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  03879	6a 01		 push	 1
  0387b	6a 02		 push	 2
  0387d	53		 push	 ebx
  0387e	ff d7		 call	 edi
  03880	50		 push	 eax
  03881	ff d6		 call	 esi
  03883	50		 push	 eax
  03884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0388a	33 c0		 xor	 eax, eax
  0388c	e9 e2 18 00 00	 jmp	 $LN333@PageDialog
$LN166@PageDialog:

; 4534 : 			{
; 4535 : 				ReportUnexpectedState (SRC_POS);

  03891	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BGBILLEP@PageDialogProc?34535?$AA@
  03896	e8 00 00 00 00	 call	 _ReportUnexpectedState

; 4536 : 				EndMainDlg (MainDlg);
; 4537 : 				return 0;

  0389b	e9 7e f1 ff ff	 jmp	 $LN710@PageDialog
$LN165@PageDialog:

; 4550 : 			break;
; 4551 : 
; 4552 : 		case SYSENC_HIDDEN_OS_WIPE_INFO_PAGE:
; 4553 : 
; 4554 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_WIPE_INFO_TITLE"));

  038a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@
  038a5	e8 00 00 00 00	 call	 _GetString
  038aa	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  038b0	83 c4 04	 add	 esp, 4
  038b3	50		 push	 eax
  038b4	68 e8 03 00 00	 push	 1000			; 000003e8H
  038b9	53		 push	 ebx
  038ba	ff d7		 call	 edi
  038bc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  038c2	50		 push	 eax
  038c3	ff d6		 call	 esi
  038c5	50		 push	 eax
  038c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4555 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_OS_WIPE_INFO"));

  038cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@
  038d1	e8 00 00 00 00	 call	 _GetString
  038d6	83 c4 04	 add	 esp, 4
  038d9	50		 push	 eax
  038da	68 eb 03 00 00	 push	 1003			; 000003ebH
  038df	53		 push	 ebx
  038e0	ff d6		 call	 esi
  038e2	50		 push	 eax
  038e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4556 : 
; 4557 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 4558 : 
; 4559 : 			break;

  038e9	e9 94 cc ff ff	 jmp	 $LN694@PageDialog
$LN164@PageDialog:

; 4560 : 
; 4561 : 		case DEVICE_WIPE_MODE_PAGE:
; 4562 : 
; 4563 : 			if (nWipeMode == TC_WIPE_NONE)

  038ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nWipeMode, 0
  038f5	75 0a		 jne	 SHORT $LN163@PageDialog

; 4564 : 				nWipeMode = TC_WIPE_1_RAND;

  038f7	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR _nWipeMode, 100 ; 00000064H
$LN163@PageDialog:

; 4565 : 
; 4566 : 			if (bHiddenOS && IsHiddenOSRunning())

  03901	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03907	85 c9		 test	 ecx, ecx
  03909	74 39		 je	 SHORT $LN162@PageDialog
  0390b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  03910	85 c0		 test	 eax, eax
  03912	74 30		 je	 SHORT $LN162@PageDialog

; 4567 : 			{
; 4568 : 				// Decoy system partition wipe
; 4569 : 
; 4570 : 				WipeAbort(); // In case the GUI previously crashed and the driver is still wiping

  03914	e8 00 00 00 00	 call	 _WipeAbort

; 4571 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  03919	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0391e	e8 00 00 00 00	 call	 _GetString
  03923	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  03929	83 c4 04	 add	 esp, 4
  0392c	50		 push	 eax
  0392d	6a 02		 push	 2
  0392f	53		 push	 ebx
  03930	ff d7		 call	 edi
  03932	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03938	50		 push	 eax
  03939	ff d6		 call	 esi
  0393b	50		 push	 eax
  0393c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4572 : 			}
; 4573 : 			else

  03942	eb 32		 jmp	 SHORT $LN161@PageDialog
$LN162@PageDialog:

; 4574 : 			{
; 4575 : 				// Regular device wipe (not decoy system partition wipe)
; 4576 : 
; 4577 : 				// Title bar
; 4578 : 				SetWindowText (MainDlg, TC_APP_NAME);

  03944	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0394a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  0394f	52		 push	 edx
  03950	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4579 : 
; 4580 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  03956	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0395c	6a 00		 push	 0
  0395e	68 11 04 00 00	 push	 1041			; 00000411H
  03963	53		 push	 ebx
  03964	ff d7		 call	 edi
  03966	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0396c	50		 push	 eax
  0396d	ff d6		 call	 esi
  0396f	50		 push	 eax
  03970	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN161@PageDialog:

; 4581 : 			}
; 4582 : 
; 4583 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("WIPE_MODE_TITLE"));

  03976	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
  0397b	e8 00 00 00 00	 call	 _GetString
  03980	83 c4 04	 add	 esp, 4
  03983	50		 push	 eax
  03984	68 e8 03 00 00	 push	 1000			; 000003e8H
  03989	53		 push	 ebx
  0398a	ff d7		 call	 edi
  0398c	50		 push	 eax
  0398d	ff d6		 call	 esi
  0398f	50		 push	 eax
  03990	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4584 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_WIPE_MODE_INFO), GetString ("WIPE_MODE_INFO"));

  03996	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@
  0399b	e8 00 00 00 00	 call	 _GetString
  039a0	83 c4 04	 add	 esp, 4
  039a3	50		 push	 eax
  039a4	68 3c 04 00 00	 push	 1084			; 0000043cH
  039a9	53		 push	 ebx
  039aa	ff d6		 call	 esi
  039ac	50		 push	 eax
  039ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4585 : 
; 4586 : 			PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, FALSE);

  039b3	6a 00		 push	 0
  039b5	6a 00		 push	 0
  039b7	68 3d 04 00 00	 push	 1085			; 0000043dH
  039bc	53		 push	 ebx
  039bd	ff d6		 call	 esi
  039bf	50		 push	 eax
  039c0	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  039c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4587 : 
; 4588 : 			SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  039c8	68 00 00 00 00	 push	 OFFSET _nWipeMode
  039cd	68 3d 04 00 00	 push	 1085			; 0000043dH
  039d2	53		 push	 ebx
  039d3	ff d6		 call	 esi
  039d5	50		 push	 eax
  039d6	e8 00 00 00 00	 call	 _SelectAlgo

; 4589 : 
; 4590 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  039db	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  039e0	e8 00 00 00 00	 call	 _GetString
  039e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  039e8	50		 push	 eax
  039e9	68 10 04 00 00	 push	 1040			; 00000410H
  039ee	53		 push	 ebx
  039ef	ff d7		 call	 edi
  039f1	50		 push	 eax
  039f2	ff d6		 call	 esi
  039f4	50		 push	 eax
  039f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4591 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  039fb	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  03a00	e8 00 00 00 00	 call	 _GetString
  03a05	83 c4 04	 add	 esp, 4
  03a08	50		 push	 eax
  03a09	68 11 04 00 00	 push	 1041			; 00000411H
  03a0e	53		 push	 ebx
  03a0f	ff d7		 call	 edi
  03a11	50		 push	 eax
  03a12	ff d6		 call	 esi
  03a14	50		 push	 eax
  03a15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4592 : 
; 4593 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  03a1b	6a 01		 push	 1
  03a1d	68 10 04 00 00	 push	 1040			; 00000410H

; 4594 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);
; 4595 : 
; 4596 : 			break;

  03a22	e9 65 ed ff ff	 jmp	 $LN713@PageDialog
$LN160@PageDialog:

; 4597 : 
; 4598 : 		case DEVICE_WIPE_PAGE:
; 4599 : 
; 4600 : 			if (bHiddenOS && IsHiddenOSRunning())

  03a27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03a2c	85 c0		 test	 eax, eax
  03a2e	74 10		 je	 SHORT $LN159@PageDialog
  03a30	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  03a35	85 c0		 test	 eax, eax
  03a37	74 07		 je	 SHORT $LN159@PageDialog

; 4601 : 			{
; 4602 : 				// Decoy system partition wipe
; 4603 : 
; 4604 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_WIPE_PAGE_INFO_HIDDEN_OS"));

  03a39	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@

; 4605 : 			}
; 4606 : 			else

  03a3e	eb 05		 jmp	 SHORT $LN689@PageDialog
$LN159@PageDialog:

; 4607 : 			{
; 4608 : 				// Regular device wipe (not decoy system partition wipe)
; 4609 : 
; 4610 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_WIPE_PAGE_INFO"));

  03a40	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@
$LN689@PageDialog:
  03a45	e8 00 00 00 00	 call	 _GetString
  03a4a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03a50	83 c4 04	 add	 esp, 4
  03a53	50		 push	 eax
  03a54	68 eb 03 00 00	 push	 1003			; 000003ebH
  03a59	53		 push	 ebx
  03a5a	ff d6		 call	 esi
  03a5c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  03a62	50		 push	 eax
  03a63	ff d7		 call	 edi

; 4611 : 			}
; 4612 : 
; 4613 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("DEVICE_WIPE_PAGE_TITLE"));

  03a65	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@
  03a6a	e8 00 00 00 00	 call	 _GetString
  03a6f	83 c4 04	 add	 esp, 4
  03a72	50		 push	 eax
  03a73	68 e8 03 00 00	 push	 1000			; 000003e8H
  03a78	53		 push	 ebx
  03a79	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03a7f	50		 push	 eax
  03a80	ff d6		 call	 esi
  03a82	50		 push	 eax
  03a83	ff d7		 call	 edi

; 4614 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("WIPE"));

  03a85	68 00 00 00 00	 push	 OFFSET ??_C@_04LEEAJJHO@WIPE?$AA@
  03a8a	e8 00 00 00 00	 call	 _GetString
  03a8f	83 c4 04	 add	 esp, 4
  03a92	50		 push	 eax
  03a93	68 10 04 00 00	 push	 1040			; 00000410H
  03a98	53		 push	 ebx
  03a99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03a9f	50		 push	 eax
  03aa0	ff d6		 call	 esi
  03aa2	50		 push	 eax
  03aa3	ff d7		 call	 edi

; 4615 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_WIPE_MODE), (wstring (L"  ") + GetWipeModeName (nWipeMode)).c_str());

  03aa5	68 00 00 00 00	 push	 OFFSET ??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@
  03aaa	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T165702[ebp]
  03ab0	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03ab5	89 45 e8	 mov	 DWORD PTR tv5015[ebp], eax
  03ab8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nWipeMode
  03abe	51		 push	 ecx
  03abf	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  03ac6	e8 00 00 00 00	 call	 _GetWipeModeName
  03acb	8b 55 e8	 mov	 edx, DWORD PTR tv5015[ebp]
  03ace	50		 push	 eax
  03acf	52		 push	 edx
  03ad0	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T165703[ebp]
  03ad6	50		 push	 eax
  03ad7	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03adc	83 c4 10	 add	 esp, 16			; 00000010H
  03adf	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  03ae3	72 05		 jb	 SHORT $LN543@PageDialog
  03ae5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03ae8	eb 03		 jmp	 SHORT $LN544@PageDialog
$LN543@PageDialog:
  03aea	83 c0 04	 add	 eax, 4
$LN544@PageDialog:
  03aed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03af3	50		 push	 eax
  03af4	68 3d 04 00 00	 push	 1085			; 0000043dH
  03af9	51		 push	 ecx
  03afa	ff d6		 call	 esi
  03afc	50		 push	 eax
  03afd	ff d7		 call	 edi
  03aff	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T165703[ebp]
  03b05	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03b0a	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T165702[ebp]
  03b10	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4616 : 
; 4617 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_ABORT_BUTTON), FALSE);

  03b15	6a 00		 push	 0
  03b17	68 f8 03 00 00	 push	 1016			; 000003f8H
  03b1c	53		 push	 ebx
  03b1d	ff d6		 call	 esi
  03b1f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  03b25	50		 push	 eax
  03b26	ff d7		 call	 edi

; 4618 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  03b28	6a 01		 push	 1
  03b2a	68 11 04 00 00	 push	 1041			; 00000411H
  03b2f	53		 push	 ebx
  03b30	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03b36	50		 push	 eax
  03b37	ff d6		 call	 esi
  03b39	50		 push	 eax
  03b3a	ff d7		 call	 edi
  03b3c	33 c0		 xor	 eax, eax
  03b3e	e9 30 16 00 00	 jmp	 $LN333@PageDialog
$LN157@PageDialog:

; 4619 : 
; 4620 : 			break;
; 4621 : 		}
; 4622 : 		return 0;
; 4623 : 
; 4624 : 	case WM_HELP:
; 4625 : 		OpenPageHelp (GetParent (hwndDlg), nCurPageNo);

  03b43	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03b49	52		 push	 edx
  03b4a	53		 push	 ebx
  03b4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03b51	50		 push	 eax
  03b52	e8 00 00 00 00	 call	 _OpenPageHelp
  03b57	83 c4 08	 add	 esp, 8

; 4626 : 		return 1;

  03b5a	e9 0f 16 00 00	 jmp	 $LN681@PageDialog
$LN155@PageDialog:

; 4631 : 
; 4632 : 	case WM_COMMAND:
; 4633 : 
; 4634 : 		if (nCurPageNo == INTRO_PAGE)

  03b5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03b65	85 c9		 test	 ecx, ecx
  03b67	0f 85 28 01 00
	00		 jne	 $LN152@PageDialog

; 4635 : 		{
; 4636 : 			switch (lw)

  03b6d	0f b7 c7	 movzx	 eax, di
  03b70	05 db fb ff ff	 add	 eax, -1061		; fffffbdbH
  03b75	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  03b78	0f 87 1e 02 00
	00		 ja	 $LN132@PageDialog
  03b7e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN598@PageDialog[eax]
  03b85	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN716@PageDialog[eax*4]
$LN151@PageDialog:

; 4637 : 			{
; 4638 : 			case IDC_FILE_CONTAINER:
; 4639 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_FILE_CONTAINER);

  03b8c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03b92	6a 00		 push	 0
  03b94	6a 01		 push	 1
  03b96	68 f1 00 00 00	 push	 241			; 000000f1H
  03b9b	68 25 04 00 00	 push	 1061			; 00000425H
  03ba0	53		 push	 ebx
  03ba1	ff d6		 call	 esi
  03ba3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03ba9	50		 push	 eax
  03baa	ff d7		 call	 edi
  03bac	6a 00		 push	 0
  03bae	6a 00		 push	 0
  03bb0	68 f1 00 00 00	 push	 241			; 000000f1H
  03bb5	68 26 04 00 00	 push	 1062			; 00000426H
  03bba	53		 push	 ebx
  03bbb	ff d6		 call	 esi
  03bbd	50		 push	 eax
  03bbe	ff d7		 call	 edi
  03bc0	6a 00		 push	 0
  03bc2	6a 00		 push	 0
$LN703@PageDialog:
  03bc4	68 f1 00 00 00	 push	 241			; 000000f1H
  03bc9	68 27 04 00 00	 push	 1063			; 00000427H
  03bce	53		 push	 ebx
  03bcf	ff d6		 call	 esi
  03bd1	50		 push	 eax
  03bd2	ff d7		 call	 edi

; 4640 : 				return 1;

  03bd4	e9 95 15 00 00	 jmp	 $LN681@PageDialog
$LN150@PageDialog:

; 4641 : 
; 4642 : 			case IDC_NONSYS_DEVICE:
; 4643 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_NONSYS_DEVICE);

  03bd9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03bdf	6a 00		 push	 0
  03be1	6a 00		 push	 0
  03be3	68 f1 00 00 00	 push	 241			; 000000f1H
  03be8	68 25 04 00 00	 push	 1061			; 00000425H
  03bed	53		 push	 ebx
  03bee	ff d6		 call	 esi
  03bf0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03bf6	50		 push	 eax
  03bf7	ff d7		 call	 edi
  03bf9	6a 00		 push	 0
  03bfb	6a 01		 push	 1
  03bfd	68 f1 00 00 00	 push	 241			; 000000f1H
  03c02	68 26 04 00 00	 push	 1062			; 00000426H
  03c07	53		 push	 ebx
  03c08	ff d6		 call	 esi
  03c0a	50		 push	 eax
  03c0b	ff d7		 call	 edi
  03c0d	6a 00		 push	 0
  03c0f	6a 00		 push	 0
  03c11	68 f1 00 00 00	 push	 241			; 000000f1H
  03c16	68 27 04 00 00	 push	 1063			; 00000427H
  03c1b	53		 push	 ebx
  03c1c	ff d6		 call	 esi
  03c1e	50		 push	 eax
  03c1f	ff d7		 call	 edi

; 4644 : 				return 1;

  03c21	e9 48 15 00 00	 jmp	 $LN681@PageDialog
$LN149@PageDialog:

; 4645 : 
; 4646 : 			case IDC_SYS_DEVICE:
; 4647 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_SYS_DEVICE);

  03c26	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03c2c	6a 00		 push	 0
  03c2e	6a 00		 push	 0
  03c30	68 f1 00 00 00	 push	 241			; 000000f1H
  03c35	68 25 04 00 00	 push	 1061			; 00000425H
  03c3a	53		 push	 ebx
  03c3b	ff d6		 call	 esi
  03c3d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03c43	50		 push	 eax
  03c44	ff d7		 call	 edi
  03c46	6a 00		 push	 0
  03c48	6a 00		 push	 0
  03c4a	68 f1 00 00 00	 push	 241			; 000000f1H
  03c4f	68 26 04 00 00	 push	 1062			; 00000426H
  03c54	53		 push	 ebx
  03c55	ff d6		 call	 esi
  03c57	50		 push	 eax
  03c58	ff d7		 call	 edi
  03c5a	6a 00		 push	 0
  03c5c	6a 01		 push	 1

; 4648 : 				return 1;

  03c5e	e9 61 ff ff ff	 jmp	 $LN703@PageDialog
$LN148@PageDialog:

; 4649 : 
; 4650 : 			case IDC_MORE_INFO_ON_CONTAINERS:
; 4651 : 				Applink ("introcontainer", TRUE, "");

  03c63	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03c68	6a 01		 push	 1
  03c6a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JBBMPDEB@introcontainer?$AA@
  03c6f	e8 00 00 00 00	 call	 _Applink
  03c74	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4652 : 				return 1;

  03c77	e9 f2 14 00 00	 jmp	 $LN681@PageDialog
$LN147@PageDialog:

; 4653 : 
; 4654 : 			case IDC_MORE_INFO_ON_SYS_ENCRYPTION:
; 4655 : 				Applink ("introsysenc", TRUE, "");

  03c7c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03c81	6a 01		 push	 1
  03c83	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FEPBHLEO@introsysenc?$AA@
  03c88	e8 00 00 00 00	 call	 _Applink
  03c8d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4656 : 				return 1;

  03c90	e9 d9 14 00 00	 jmp	 $LN681@PageDialog
$LN152@PageDialog:

; 4657 : 			}
; 4658 : 		}
; 4659 : 
; 4660 : 		if (nCurPageNo == SYSENC_TYPE_PAGE)

  03c95	83 f9 01	 cmp	 ecx, 1
  03c98	75 5e		 jne	 SHORT $LN144@PageDialog

; 4661 : 		{
; 4662 : 			switch (lw)

  03c9a	0f b7 c7	 movzx	 eax, di
  03c9d	2d 48 04 00 00	 sub	 eax, 1096		; 00000448H
  03ca2	74 3e		 je	 SHORT $LN142@PageDialog
  03ca4	2b c1		 sub	 eax, ecx
  03ca6	74 21		 je	 SHORT $LN143@PageDialog
  03ca8	83 e8 02	 sub	 eax, 2
  03cab	0f 85 a0 00 00
	00		 jne	 $LN137@PageDialog

; 4675 : 
; 4676 : 			case IDC_HIDDEN_SYSENC_INFO_LINK:
; 4677 : 				Applink ("hiddensysenc", TRUE, "");

  03cb1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03cb6	51		 push	 ecx
  03cb7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
  03cbc	e8 00 00 00 00	 call	 _Applink
  03cc1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4678 : 				return 1;

  03cc4	e9 a5 14 00 00	 jmp	 $LN681@PageDialog
$LN143@PageDialog:

; 4663 : 			{
; 4664 : 			case IDC_SYSENC_HIDDEN:
; 4665 : 				bHiddenOS = TRUE;

  03cc9	b8 01 00 00 00	 mov	 eax, 1
  03cce	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, eax ; bHiddenOS

; 4666 : 				bHiddenVol = TRUE;

  03cd3	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4667 : 				bHiddenVolHost = TRUE;

  03cd8	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4668 : 				return 1;

  03cdd	e9 91 14 00 00	 jmp	 $LN333@PageDialog
$LN142@PageDialog:

; 4669 : 
; 4670 : 			case IDC_SYSENC_NORMAL:
; 4671 : 				bHiddenOS = FALSE;

  03ce2	33 c0		 xor	 eax, eax
  03ce4	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, eax ; bHiddenOS

; 4672 : 				bHiddenVol = FALSE;

  03ce9	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4673 : 				bHiddenVolHost = FALSE;

  03cee	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4674 : 				return 1;

  03cf3	e9 76 14 00 00	 jmp	 $LN681@PageDialog
$LN144@PageDialog:

; 4679 : 			}
; 4680 : 		}
; 4681 : 
; 4682 : 		if (nCurPageNo == SYSENC_HIDDEN_OS_REQ_CHECK_PAGE && lw == IDC_HIDDEN_SYSENC_INFO_LINK)

  03cf8	83 f9 02	 cmp	 ecx, 2
  03cfb	75 27		 jne	 SHORT $LN140@PageDialog
  03cfd	b8 4b 04 00 00	 mov	 eax, 1099		; 0000044bH
  03d02	66 3b f8	 cmp	 di, ax
  03d05	0f 85 91 00 00
	00		 jne	 $LN132@PageDialog

; 4683 : 		{
; 4684 : 			Applink ("hiddensysenc", TRUE, "");

  03d0b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03d10	6a 01		 push	 1
  03d12	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
  03d17	e8 00 00 00 00	 call	 _Applink
  03d1c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4685 : 			return 1;

  03d1f	e9 4a 14 00 00	 jmp	 $LN681@PageDialog
$LN140@PageDialog:

; 4686 : 		}
; 4687 : 
; 4688 : 		if (nCurPageNo == SYSENC_SPAN_PAGE)

  03d24	83 f9 03	 cmp	 ecx, 3
  03d27	75 28		 jne	 SHORT $LN137@PageDialog

; 4689 : 		{
; 4690 : 			switch (lw)

  03d29	0f b7 c7	 movzx	 eax, di
  03d2c	2d 2b 04 00 00	 sub	 eax, 1067		; 0000042bH
  03d31	74 0f		 je	 SHORT $LN136@PageDialog
  03d33	83 e8 01	 sub	 eax, 1
  03d36	75 64		 jne	 SHORT $LN132@PageDialog

; 4695 : 			case IDC_SYS_PARTITION:
; 4696 : 				bWholeSysDrive = FALSE;

  03d38	a3 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive

; 4697 : 				return 1;

  03d3d	e9 2c 14 00 00	 jmp	 $LN681@PageDialog
$LN136@PageDialog:

; 4691 : 			{
; 4692 : 			case IDC_WHOLE_SYS_DRIVE:
; 4693 : 				bWholeSysDrive = TRUE;

  03d42	b8 01 00 00 00	 mov	 eax, 1
  03d47	a3 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive

; 4694 : 				return 1;

  03d4c	e9 22 14 00 00	 jmp	 $LN333@PageDialog
$LN137@PageDialog:

; 4698 : 			}
; 4699 : 
; 4700 : 		}
; 4701 : 
; 4702 : 		if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  03d51	83 f9 06	 cmp	 ecx, 6
  03d54	75 46		 jne	 SHORT $LN132@PageDialog

; 4703 : 		{
; 4704 : 			switch (lw)

  03d56	0f b7 c7	 movzx	 eax, di
  03d59	2d 34 04 00 00	 sub	 eax, 1076		; 00000434H
  03d5e	74 30		 je	 SHORT $LN131@PageDialog
  03d60	83 e8 01	 sub	 eax, 1
  03d63	75 37		 jne	 SHORT $LN132@PageDialog

; 4710 : 			case IDC_MULTI_BOOT:
; 4711 : 				nMultiBoot = 2;

  03d65	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?nMultiBoot@@3HA, 2 ; nMultiBoot
$LN704@PageDialog:

; 4712 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  03d6f	6a 01		 push	 1
  03d71	68 10 04 00 00	 push	 1040			; 00000410H
  03d76	53		 push	 ebx
  03d77	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03d7d	50		 push	 eax
  03d7e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03d84	50		 push	 eax
  03d85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4713 : 				return 1;

  03d8b	e9 de 13 00 00	 jmp	 $LN681@PageDialog
$LN131@PageDialog:

; 4705 : 			{
; 4706 : 			case IDC_SINGLE_BOOT:
; 4707 : 				nMultiBoot = 1;

  03d90	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot

; 4708 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4709 : 				return 1;

  03d9a	eb d3		 jmp	 SHORT $LN704@PageDialog
$LN132@PageDialog:

; 4714 : 			}
; 4715 : 		}
; 4716 : 
; 4717 : 		// Dual choice pages
; 4718 : 		switch (nCurPageNo)

  03d9c	83 f9 04	 cmp	 ecx, 4
  03d9f	74 08		 je	 SHORT $LN127@PageDialog
  03da1	8d 41 f9	 lea	 eax, DWORD PTR [ecx-7]
  03da4	83 f8 03	 cmp	 eax, 3
  03da7	77 14		 ja	 SHORT $LN126@PageDialog
$LN127@PageDialog:

; 4719 : 		{
; 4720 : 		case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 4721 : 		case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 4722 : 		case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 4723 : 		case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 4724 : 		case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 4725 : 
; 4726 : 			if (lw == IDC_CHOICE1 || lw == IDC_CHOICE2)

  03da9	b8 dd 13 00 00	 mov	 eax, 5085		; 000013ddH
  03dae	66 3b f8	 cmp	 di, ax
  03db1	74 bc		 je	 SHORT $LN704@PageDialog
  03db3	b8 df 13 00 00	 mov	 eax, 5087		; 000013dfH
  03db8	66 3b f8	 cmp	 di, ax
  03dbb	74 b2		 je	 SHORT $LN704@PageDialog
$LN126@PageDialog:

; 4727 : 			{
; 4728 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4729 : 				return 1;
; 4730 : 			}
; 4731 : 			break;
; 4732 : 		}
; 4733 : 
; 4734 : 		if (nCurPageNo == FILESYS_PAGE && (lw == IDC_CHOICE1 || lw == IDC_CHOICE2))

  03dbd	83 f9 16	 cmp	 ecx, 22			; 00000016H
  03dc0	0f 85 1a 01 00
	00		 jne	 $LN124@PageDialog
  03dc6	b8 dd 13 00 00	 mov	 eax, 5085		; 000013ddH
  03dcb	66 3b f8	 cmp	 di, ax
  03dce	74 0e		 je	 SHORT $LN123@PageDialog
  03dd0	b8 df 13 00 00	 mov	 eax, 5087		; 000013dfH
  03dd5	66 3b f8	 cmp	 di, ax
  03dd8	0f 85 02 01 00
	00		 jne	 $LN124@PageDialog
$LN123@PageDialog:

; 4735 : 		{
; 4736 : 			if (bWarnOuterVolSuitableFileSys && lw == IDC_CHOICE1 && bHiddenVolHost)

  03dde	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWarnOuterVolSuitableFileSys@@3HA, 0 ; bWarnOuterVolSuitableFileSys
  03de5	74 88		 je	 SHORT $LN704@PageDialog
  03de7	b9 dd 13 00 00	 mov	 ecx, 5085		; 000013ddH
  03dec	66 39 8d 20 12
	01 00		 cmp	 WORD PTR _wParam$[ebp], cx
  03df3	0f 85 76 ff ff
	ff		 jne	 $LN704@PageDialog
  03df9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03dff	85 d2		 test	 edx, edx
  03e01	0f 84 68 ff ff
	ff		 je	 $LN704@PageDialog

; 4737 : 			{
; 4738 : 				wchar_t szTmp [4096];
; 4739 : 
; 4740 : 				bWarnOuterVolSuitableFileSys = FALSE;	// Do not show this warning anymore (this also prevents potential endless repetition due to some race conditions)
; 4741 : 
; 4742 : 				wcscpy (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL"));

  03e07	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
  03e0c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWarnOuterVolSuitableFileSys@@3HA, 0 ; bWarnOuterVolSuitableFileSys
  03e16	e8 00 00 00 00	 call	 _GetString
  03e1b	83 c4 04	 add	 esp, 4
  03e1e	8d 95 b0 9e 00
	00		 lea	 edx, DWORD PTR _szTmp$133856[ebp]
$LL417@PageDialog:
  03e24	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  03e27	66 89 0a	 mov	 WORD PTR [edx], cx
  03e2a	83 c0 02	 add	 eax, 2
  03e2d	83 c2 02	 add	 edx, 2
  03e30	66 85 c9	 test	 cx, cx
  03e33	75 ef		 jne	 SHORT $LL417@PageDialog

; 4743 : 				wcscat (szTmp, L"\n\n");

  03e35	8d 85 b0 9e 00
	00		 lea	 eax, DWORD PTR _szTmp$133856[ebp]
  03e3b	83 c0 fe	 add	 eax, -2			; fffffffeH
  03e3e	8b ff		 npad	 2
$LL599@PageDialog:
  03e40	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  03e44	83 c0 02	 add	 eax, 2
  03e47	66 85 c9	 test	 cx, cx
  03e4a	75 f4		 jne	 SHORT $LL599@PageDialog
  03e4c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  03e52	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  03e59	89 08		 mov	 DWORD PTR [eax], ecx

; 4744 : 				wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL_CONFIRM"));

  03e5b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@
  03e60	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  03e64	e8 00 00 00 00	 call	 _GetString
  03e69	83 c4 04	 add	 esp, 4
  03e6c	8b d0		 mov	 edx, eax
  03e6e	8b ff		 npad	 2
$LL600@PageDialog:
  03e70	66 8b 08	 mov	 cx, WORD PTR [eax]
  03e73	83 c0 02	 add	 eax, 2
  03e76	66 85 c9	 test	 cx, cx
  03e79	75 f5		 jne	 SHORT $LL600@PageDialog
  03e7b	8d bd b0 9e 00
	00		 lea	 edi, DWORD PTR _szTmp$133856[ebp]
  03e81	2b c2		 sub	 eax, edx
  03e83	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL601@PageDialog:
  03e86	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  03e8a	83 c7 02	 add	 edi, 2
  03e8d	66 85 c9	 test	 cx, cx
  03e90	75 f4		 jne	 SHORT $LL601@PageDialog
  03e92	8b c8		 mov	 ecx, eax
  03e94	c1 e9 02	 shr	 ecx, 2
  03e97	8b f2		 mov	 esi, edx

; 4745 : 
; 4746 : 				if (MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON2) == IDNO)

  03e99	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  03e9f	f3 a5		 rep movsd
  03ea1	8b c8		 mov	 ecx, eax
  03ea3	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  03ea8	83 e1 03	 and	 ecx, 3
  03eab	68 34 01 00 00	 push	 308			; 00000134H
  03eb0	f3 a4		 rep movsb
  03eb2	50		 push	 eax
  03eb3	8d 8d b0 9e 00
	00		 lea	 ecx, DWORD PTR _szTmp$133856[ebp]
  03eb9	51		 push	 ecx
  03eba	52		 push	 edx
  03ebb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  03ec1	83 f8 07	 cmp	 eax, 7
  03ec4	0f 85 a5 fe ff
	ff		 jne	 $LN704@PageDialog

; 4747 : 				{
; 4748 : 					nNeedToStoreFilesOver4GB = 0;
; 4749 : 					Init2RadButtonPageYesNo (nNeedToStoreFilesOver4GB);

  03eca	33 c0		 xor	 eax, eax
  03ecc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, 0 ; nNeedToStoreFilesOver4GB
  03ed6	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 4750 : 				}
; 4751 : 			}
; 4752 : 
; 4753 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4754 : 			return 1;

  03edb	e9 8f fe ff ff	 jmp	 $LN704@PageDialog
$LN124@PageDialog:

; 4755 : 		}
; 4756 : 
; 4757 : 		if (lw == IDC_HIDDEN_VOL && nCurPageNo == VOLUME_TYPE_PAGE)

  03ee0	b8 08 04 00 00	 mov	 eax, 1032		; 00000408H
  03ee5	66 3b f8	 cmp	 di, ax
  03ee8	75 23		 jne	 SHORT $LN120@PageDialog
  03eea	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  03eed	75 3e		 jne	 SHORT $LN119@PageDialog

; 4758 : 		{
; 4759 : 			bHiddenVol = TRUE;

  03eef	b8 01 00 00 00	 mov	 eax, 1
  03ef4	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4760 : 			bHiddenVolHost = TRUE;

  03ef9	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4761 : 			bInPlaceEncNonSys = FALSE;

  03efe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0

; 4762 : 			return 1;

  03f08	e9 66 12 00 00	 jmp	 $LN333@PageDialog
$LN120@PageDialog:

; 4763 : 		}
; 4764 : 
; 4765 : 		if (lw == IDC_STD_VOL && nCurPageNo == VOLUME_TYPE_PAGE)

  03f0d	b8 07 04 00 00	 mov	 eax, 1031		; 00000407H
  03f12	66 3b f8	 cmp	 di, ax
  03f15	75 16		 jne	 SHORT $LN119@PageDialog
  03f17	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  03f1a	75 11		 jne	 SHORT $LN119@PageDialog

; 4766 : 		{
; 4767 : 			bHiddenVol = FALSE;

  03f1c	33 c0		 xor	 eax, eax
  03f1e	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4768 : 			bHiddenVolHost = FALSE;

  03f23	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4769 : 			return 1;

  03f28	e9 41 12 00 00	 jmp	 $LN681@PageDialog
$LN119@PageDialog:

; 4770 : 		}
; 4771 : 
; 4772 : 		if (nCurPageNo == SYSENC_ENCRYPTION_PAGE)

  03f2d	83 f9 1f	 cmp	 ecx, 31			; 0000001fH
  03f30	0f 85 d4 00 00
	00		 jne	 $LN110@PageDialog

; 4773 : 		{
; 4774 : 			BootEncryptionStatus locBootEncStatus;
; 4775 : 
; 4776 : 			switch (lw)

  03f36	0f b7 c7	 movzx	 eax, di
  03f39	2d 3d 04 00 00	 sub	 eax, 1085		; 0000043dH
  03f3e	0f 84 7e 00 00
	00		 je	 $LN111@PageDialog
  03f44	83 e8 04	 sub	 eax, 4
  03f47	74 22		 je	 SHORT $LN115@PageDialog
  03f49	83 e8 02	 sub	 eax, 2
  03f4c	0f 85 b8 00 00
	00		 jne	 $LN110@PageDialog

; 4803 : 				}
; 4804 : 				break;
; 4805 : 
; 4806 : 			case IDC_MORE_INFO_SYS_ENCRYPTION:
; 4807 : 				Applink ("sysencprogressinfo", TRUE, "");

  03f52	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03f57	6a 01		 push	 1
  03f59	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@
  03f5e	e8 00 00 00 00	 call	 _Applink
  03f63	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4808 : 				return 1;

  03f66	e9 03 12 00 00	 jmp	 $LN681@PageDialog
$LN115@PageDialog:

; 4777 : 			{
; 4778 : 			case IDC_PAUSE:
; 4779 : 				try
; 4780 : 				{
; 4781 : 					locBootEncStatus = BootEncObj->GetStatus();

  03f6b	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T165705[ebp]
  03f71	51		 push	 ecx
  03f72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  03f78	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  03f7f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  03f84	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  03f89	8b f0		 mov	 esi, eax
  03f8b	8d bd 44 ff ff
	ff		 lea	 edi, DWORD PTR _locBootEncStatus$133862[ebp]
  03f91	f3 a5		 rep movsd
  03f93	66 a5		 movsw

; 4782 : 
; 4783 : 					if (locBootEncStatus.SetupInProgress)

  03f95	83 7d 82 00	 cmp	 DWORD PTR _locBootEncStatus$133862[ebp+62], 0
  03f99	74 0a		 je	 SHORT $LN113@PageDialog

; 4784 : 						SysEncPause ();

  03f9b	e8 00 00 00 00	 call	 ?SysEncPause@@YAXXZ	; SysEncPause

; 4785 : 					else

  03fa0	e9 c9 11 00 00	 jmp	 $LN681@PageDialog
$LN113@PageDialog:

; 4786 : 						SysEncResume ();

  03fa5	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
  03faa	e9 bf 11 00 00	 jmp	 $LN681@PageDialog
__catch$_PageDialogProc@16$4:

; 4787 : 				}
; 4788 : 				catch (Exception &e)
; 4789 : 				{
; 4790 : 					e.Show (hwndDlg);

  03faf	8b 4d a4	 mov	 ecx, DWORD PTR _e$133872[ebp]
  03fb2	8b 11		 mov	 edx, DWORD PTR [ecx]
  03fb4	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  03fb7	8b 12		 mov	 edx, DWORD PTR [edx]
  03fb9	50		 push	 eax
  03fba	ff d2		 call	 edx

; 4791 : 				}

  03fbc	b8 00 00 00 00	 mov	 eax, $LN681@PageDialog
  03fc1	c3		 ret	 0
$LN111@PageDialog:

; 4792 : 				return 1;
; 4793 : 
; 4794 : 			case IDC_WIPE_MODE:
; 4795 : 				if (hw == CBN_SELCHANGE)

  03fc2	66 83 fa 01	 cmp	 dx, 1
  03fc6	75 42		 jne	 SHORT $LN110@PageDialog

; 4796 : 				{
; 4797 : 					nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 4798 : 						CB_GETITEMDATA, 
; 4799 : 						SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 4800 : 						0);

  03fc8	6a 00		 push	 0
  03fca	6a 00		 push	 0
  03fcc	6a 00		 push	 0
  03fce	68 47 01 00 00	 push	 327			; 00000147H
  03fd3	68 3d 04 00 00	 push	 1085			; 0000043dH
  03fd8	53		 push	 ebx
$LN706@PageDialog:
  03fd9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03fdf	ff d6		 call	 esi
  03fe1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  03fe7	50		 push	 eax
  03fe8	ff d3		 call	 ebx
  03fea	50		 push	 eax
  03feb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03ff0	68 50 01 00 00	 push	 336			; 00000150H
  03ff5	68 3d 04 00 00	 push	 1085			; 0000043dH
  03ffa	50		 push	 eax
  03ffb	ff d6		 call	 esi
  03ffd	50		 push	 eax
  03ffe	ff d3		 call	 ebx
  04000	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax

; 4801 : 
; 4802 : 					return 1;

  04005	e9 64 11 00 00	 jmp	 $LN681@PageDialog
$LN110@PageDialog:

; 4809 : 			}
; 4810 : 		}
; 4811 : 
; 4812 : 		if (bInPlaceEncNonSys)

  0400a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys

; 4813 : 		{
; 4814 : 			switch (nCurPageNo)

  04010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04015	85 c9		 test	 ecx, ecx
  04017	0f 84 c0 01 00
	00		 je	 $LN104@PageDialog
  0401d	83 f8 21	 cmp	 eax, 33			; 00000021H
  04020	0f 84 85 00 00
	00		 je	 $LN105@PageDialog
  04026	83 f8 24	 cmp	 eax, 36			; 00000024H
  04029	0f 85 ae 01 00
	00		 jne	 $LN104@PageDialog

; 4849 : 
; 4850 : 					return 1;
; 4851 : 				}
; 4852 : 				break;
; 4853 : 
; 4854 : 			case  NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 4855 : 				{
; 4856 : 					switch (lw)

  0402f	0f b7 cf	 movzx	 ecx, di
  04032	81 e9 3d 04 00
	00		 sub	 ecx, 1085		; 0000043dH
  04038	74 4b		 je	 SHORT $LN93@PageDialog
  0403a	83 e9 04	 sub	 ecx, 4
  0403d	0f 85 9a 01 00
	00		 jne	 $LN104@PageDialog

; 4857 : 					{
; 4858 : 					case IDC_PAUSE:
; 4859 : 
; 4860 : 						// Pause/resume non-system in-place encryption
; 4861 : 
; 4862 : 						if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  04043	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  04049	85 d2		 test	 edx, edx
  0404b	75 13		 jne	 SHORT $LN95@PageDialog
  0404d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  04052	85 c0		 test	 eax, eax
  04054	75 0a		 jne	 SHORT $LN95@PageDialog

; 4866 : 						}
; 4867 : 						else
; 4868 : 							NonSysInplaceEncResume ();

  04056	e8 00 00 00 00	 call	 _NonSysInplaceEncResume
  0405b	e9 0e 11 00 00	 jmp	 $LN681@PageDialog
$LN95@PageDialog:

; 4863 : 						{
; 4864 : 							EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  04060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04066	6a 00		 push	 0
  04068	68 41 04 00 00	 push	 1089			; 00000441H
  0406d	51		 push	 ecx
  0406e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  04074	50		 push	 eax
  04075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4865 : 							NonSysInplaceEncPause ();

  0407b	e8 00 00 00 00	 call	 _NonSysInplaceEncPause

; 4869 : 
; 4870 : 						return 1;

  04080	e9 e9 10 00 00	 jmp	 $LN681@PageDialog
$LN93@PageDialog:

; 4871 : 
; 4872 : 					case IDC_WIPE_MODE:
; 4873 : 						if (hw == CBN_SELCHANGE)

  04085	66 83 fa 01	 cmp	 dx, 1
  04089	0f 85 4e 01 00
	00		 jne	 $LN104@PageDialog

; 4874 : 						{
; 4875 : 							nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 4876 : 								CB_GETITEMDATA, 
; 4877 : 								SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 4878 : 								0);

  0408f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04095	6a 00		 push	 0
  04097	6a 00		 push	 0
  04099	6a 00		 push	 0
  0409b	68 47 01 00 00	 push	 327			; 00000147H
  040a0	68 3d 04 00 00	 push	 1085			; 0000043dH
  040a5	52		 push	 edx

; 4879 : 
; 4880 : 							return 1;

  040a6	e9 2e ff ff ff	 jmp	 $LN706@PageDialog
$LN105@PageDialog:

; 4815 : 			{
; 4816 : 			case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 4817 : 
; 4818 : 				if (lw == IDC_LIST_BOX 
; 4819 : 					&& (hw == LBN_SELCHANGE || hw == LBN_DBLCLK))

  040ab	b9 fa 03 00 00	 mov	 ecx, 1018		; 000003faH
  040b0	66 3b f9	 cmp	 di, cx
  040b3	0f 85 24 01 00
	00		 jne	 $LN104@PageDialog
  040b9	66 83 fa 01	 cmp	 dx, 1
  040bd	74 0a		 je	 SHORT $LN103@PageDialog
  040bf	66 83 fa 02	 cmp	 dx, 2
  040c3	0f 85 4b 04 00
	00		 jne	 $LN74@PageDialog
$LN103@PageDialog:

; 4820 : 				{
; 4821 : 					BOOL tmpbDevice = FALSE;
; 4822 : 
; 4823 : 					EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  040c9	6a 00		 push	 0
  040cb	68 10 04 00 00	 push	 1040			; 00000410H
  040d0	53		 push	 ebx
  040d1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _tmpbDevice$133886[ebp], 0
  040d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  040de	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  040e4	50		 push	 eax
  040e5	ff d6		 call	 esi
  040e7	50		 push	 eax
  040e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4824 : 
; 4825 : 					int selPartitionItemId = (int) SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_GETCURSEL, 0, 0);

  040ee	6a 00		 push	 0
  040f0	6a 00		 push	 0
  040f2	68 88 01 00 00	 push	 392			; 00000188H
  040f7	68 fa 03 00 00	 push	 1018			; 000003faH
  040fc	53		 push	 ebx
  040fd	ff d6		 call	 esi
  040ff	50		 push	 eax
  04100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  04106	8b f8		 mov	 edi, eax

; 4826 : 
; 4827 : 					if (selPartitionItemId == LB_ERR)

  04108	83 ff ff	 cmp	 edi, -1
  0410b	75 31		 jne	 SHORT $LN102@PageDialog

; 4828 : 					{
; 4829 : 						// Deselect all
; 4830 : 						SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_SETCURSEL, (WPARAM) -1, 0);

  0410d	6a 00		 push	 0
  0410f	50		 push	 eax
  04110	68 86 01 00 00	 push	 390			; 00000186H
  04115	68 fa 03 00 00	 push	 1018			; 000003faH
  0411a	53		 push	 ebx
  0411b	ff d6		 call	 esi
  0411d	50		 push	 eax
  0411e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4831 : 
; 4832 : 						SetFocus (GetDlgItem (MainDlg, IDC_NEXT));

  04124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0412a	68 10 04 00 00	 push	 1040			; 00000410H
  0412f	52		 push	 edx
  04130	ff d6		 call	 esi
  04132	50		 push	 eax
  04133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4833 : 						return 1;

  04139	e9 30 10 00 00	 jmp	 $LN681@PageDialog
$LN102@PageDialog:

; 4834 : 					}
; 4835 : 
; 4836 : 					SetFocus (GetDlgItem (MainDlg, IDC_NEXT));

  0413e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  04143	68 10 04 00 00	 push	 1040			; 00000410H
  04148	50		 push	 eax
  04149	ff d6		 call	 esi
  0414b	50		 push	 eax
  0414c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4837 : 
; 4838 : 					strcpy (szFileName, DeferredNonSysInPlaceEncDevices [selPartitionItemId].Path.c_str());

  04152	57		 push	 edi
  04153	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  04158	e8 00 00 00 00	 call	 ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
  0415d	83 c0 40	 add	 eax, 64			; 00000040H
  04160	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  04164	72 05		 jb	 SHORT $LN555@PageDialog
  04166	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04169	eb 03		 jmp	 SHORT $LN556@PageDialog
$LN555@PageDialog:
  0416b	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
$LN556@PageDialog:
  0416e	ba 00 00 00 00	 mov	 edx, OFFSET ?szFileName@@3PADA ; szFileName
$LL418@PageDialog:
  04173	8a 01		 mov	 al, BYTE PTR [ecx]
  04175	88 02		 mov	 BYTE PTR [edx], al
  04177	41		 inc	 ecx
  04178	42		 inc	 edx
  04179	84 c0		 test	 al, al
  0417b	75 f6		 jne	 SHORT $LL418@PageDialog

; 4839 : 					CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  0417d	8d 4d c8	 lea	 ecx, DWORD PTR _tmpbDevice$133886[ebp]
  04180	51		 push	 ecx
  04181	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04186	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0418b	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 4840 : 
; 4841 : 					nVolumeSize = GetDeviceSize (szDiskFile);

  04190	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  04195	e8 00 00 00 00	 call	 _GetDeviceSize
  0419a	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 4842 : 					if (nVolumeSize == -1)

  0419f	23 c2		 and	 eax, edx
  041a1	83 c4 10	 add	 esp, 16			; 00000010H
  041a4	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  041aa	83 f8 ff	 cmp	 eax, -1
  041ad	75 11		 jne	 SHORT $LN101@PageDialog

; 4843 : 					{
; 4844 : 						handleWin32Error (MainDlg);

  041af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  041b5	52		 push	 edx
  041b6	e8 00 00 00 00	 call	 _handleWin32Error

; 4845 : 						return 1;

  041bb	e9 ab 0f 00 00	 jmp	 $LN696@PageDialog
$LN101@PageDialog:

; 4846 : 					}
; 4847 : 
; 4848 : 					EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  041c0	6a 01		 push	 1
  041c2	68 10 04 00 00	 push	 1040			; 00000410H
  041c7	53		 push	 ebx
  041c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  041ce	50		 push	 eax
  041cf	ff d6		 call	 esi
  041d1	50		 push	 eax
  041d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  041d8	e9 91 0f 00 00	 jmp	 $LN681@PageDialog
$LN104@PageDialog:

; 4881 : 						}
; 4882 : 						break;
; 4883 : 					}
; 4884 : 				}
; 4885 : 				break;
; 4886 : 			}
; 4887 : 		}
; 4888 : 
; 4889 : 
; 4890 : 		if (lw == IDC_OPEN_OUTER_VOLUME && nCurPageNo == FORMAT_FINISHED_PAGE)

  041dd	b9 0a 04 00 00	 mov	 ecx, 1034		; 0000040aH
  041e2	66 3b f9	 cmp	 di, cx
  041e5	75 1a		 jne	 SHORT $LN91@PageDialog
  041e7	83 f8 27	 cmp	 eax, 39			; 00000027H
  041ea	0f 85 24 03 00
	00		 jne	 $LN74@PageDialog

; 4891 : 		{
; 4892 : 			OpenVolumeExplorerWindow (hiddenVolHostDriveNo);

  041f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  041f6	52		 push	 edx
  041f7	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow

; 4893 : 			return 1;

  041fc	e9 6a 0f 00 00	 jmp	 $LN696@PageDialog
$LN91@PageDialog:

; 4894 : 		}
; 4895 : 
; 4896 : 		if (lw == IDC_HIDDEN_VOL_HELP && nCurPageNo == VOLUME_TYPE_PAGE)

  04201	b9 09 04 00 00	 mov	 ecx, 1033		; 00000409H
  04206	66 3b f9	 cmp	 di, cx
  04209	75 22		 jne	 SHORT $LN90@PageDialog
  0420b	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0420e	0f 85 00 03 00
	00		 jne	 $LN74@PageDialog

; 4897 : 		{
; 4898 : 			Applink ("hiddenvolume", TRUE, "");

  04214	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  04219	6a 01		 push	 1
  0421b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEKIIEOI@hiddenvolume?$AA@
  04220	e8 00 00 00 00	 call	 _Applink
  04225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4899 : 			return 1;

  04228	e9 41 0f 00 00	 jmp	 $LN681@PageDialog
$LN90@PageDialog:

; 4900 : 		}
; 4901 : 
; 4902 : 		if (lw == IDC_ABORT_BUTTON && nCurPageNo == FORMAT_PAGE)

  0422d	b9 f8 03 00 00	 mov	 ecx, 1016		; 000003f8H
  04232	66 3b f9	 cmp	 di, cx
  04235	75 42		 jne	 SHORT $LN89@PageDialog
  04237	83 f8 26	 cmp	 eax, 38			; 00000026H
  0423a	0f 85 d4 02 00
	00		 jne	 $LN74@PageDialog

; 4903 : 		{
; 4904 : 			if (MessageBoxW (hwndDlg, GetString ("FORMAT_ABORT"), lpszTitle, MB_YESNO | MB_ICONQUESTION | MB_DEFBUTTON2 ) == IDYES)

  04240	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  04246	68 24 01 00 00	 push	 292			; 00000124H
  0424b	52		 push	 edx
  0424c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
  04251	e8 00 00 00 00	 call	 _GetString
  04256	83 c4 04	 add	 esp, 4
  04259	50		 push	 eax
  0425a	53		 push	 ebx
  0425b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  04261	83 f8 06	 cmp	 eax, 6
  04264	0f 85 04 0f 00
	00		 jne	 $LN681@PageDialog

; 4905 : 				bVolTransformThreadCancel = TRUE;

  0426a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 4906 : 			return 1;

  04274	e9 f5 0e 00 00	 jmp	 $LN681@PageDialog
$LN89@PageDialog:

; 4907 : 		}
; 4908 : 
; 4909 : 		if (lw == IDC_CIPHER_TEST && nCurPageNo == CIPHER_PAGE)

  04279	b9 fd 03 00 00	 mov	 ecx, 1021		; 000003fdH
  0427e	66 3b f9	 cmp	 di, cx
  04281	0f 85 a0 00 00
	00		 jne	 $LN87@PageDialog
  04287	83 f8 12	 cmp	 eax, 18			; 00000012H
  0428a	0f 85 84 02 00
	00		 jne	 $LN74@PageDialog

; 4910 : 		{
; 4911 : 			LPARAM nIndex;
; 4912 : 			int c;
; 4913 : 
; 4914 : 			nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  04290	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04296	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0429c	6a 00		 push	 0
  0429e	6a 00		 push	 0
  042a0	68 47 01 00 00	 push	 327			; 00000147H
  042a5	68 ea 03 00 00	 push	 1002			; 000003eaH
  042aa	52		 push	 edx
  042ab	ff d6		 call	 esi
  042ad	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  042b3	50		 push	 eax
  042b4	ff d7		 call	 edi

; 4915 : 			nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  042b6	6a 00		 push	 0
  042b8	50		 push	 eax
  042b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  042be	68 50 01 00 00	 push	 336			; 00000150H
  042c3	68 ea 03 00 00	 push	 1002			; 000003eaH
  042c8	50		 push	 eax
  042c9	ff d6		 call	 esi
  042cb	50		 push	 eax
  042cc	ff d7		 call	 edi

; 4916 : 
; 4917 : 			for (c = EAGetLastCipher (nVolumeEA); c != 0; c = EAGetPreviousCipher (nVolumeEA, c))

  042ce	50		 push	 eax
  042cf	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA
  042d4	e8 00 00 00 00	 call	 _EAGetLastCipher
  042d9	8b f0		 mov	 esi, eax
  042db	83 c4 04	 add	 esp, 4
  042de	85 f6		 test	 esi, esi
  042e0	0f 84 88 0e 00
	00		 je	 $LN681@PageDialog
  042e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  042ec	8d 64 24 00	 npad	 4
$LL86@PageDialog:

; 4918 : 			{
; 4919 : 				DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_CIPHER_TEST_DLG), 
; 4920 : 					GetParent (hwndDlg), (DLGPROC) CipherTestDialogProc, (LPARAM) c);

  042f0	56		 push	 esi
  042f1	68 00 00 00 00	 push	 OFFSET _CipherTestDialogProc@16
  042f6	53		 push	 ebx
  042f7	ff d7		 call	 edi
  042f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  042ff	50		 push	 eax
  04300	68 02 02 00 00	 push	 514			; 00000202H
  04305	51		 push	 ecx
  04306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0430c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  04312	56		 push	 esi
  04313	52		 push	 edx
  04314	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  04319	8b f0		 mov	 esi, eax
  0431b	83 c4 08	 add	 esp, 8
  0431e	85 f6		 test	 esi, esi
  04320	75 ce		 jne	 SHORT $LL86@PageDialog

; 4921 : 			}
; 4922 : 			return 1;

  04322	e9 47 0e 00 00	 jmp	 $LN681@PageDialog
$LN87@PageDialog:

; 4923 : 		}
; 4924 : 
; 4925 : 		if (lw == IDC_BENCHMARK && nCurPageNo == CIPHER_PAGE)

  04327	b9 fe 03 00 00	 mov	 ecx, 1022		; 000003feH
  0432c	66 3b f9	 cmp	 di, cx
  0432f	75 42		 jne	 SHORT $LN83@PageDialog
  04331	83 f8 12	 cmp	 eax, 18			; 00000012H
  04334	0f 85 da 01 00
	00		 jne	 $LN74@PageDialog

; 4926 : 		{
; 4927 : 			// Reduce CPU load
; 4928 : 			bFastPollEnabled = FALSE;	
; 4929 : 			bRandmixEnabled = FALSE;
; 4930 : 
; 4931 : 			DialogBoxParamW (hInst,
; 4932 : 				MAKEINTRESOURCEW (IDD_BENCHMARK_DLG), hwndDlg,
; 4933 : 				(DLGPROC) BenchmarkDlgProc, (LPARAM) NULL);

  0433a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  04340	33 c0		 xor	 eax, eax
  04342	50		 push	 eax
  04343	68 00 00 00 00	 push	 OFFSET _BenchmarkDlgProc@16
  04348	53		 push	 ebx
  04349	68 f7 01 00 00	 push	 503			; 000001f7H
  0434e	a3 00 00 00 00	 mov	 DWORD PTR _bFastPollEnabled, eax
  04353	a3 00 00 00 00	 mov	 DWORD PTR _bRandmixEnabled, eax
  04358	52		 push	 edx
  04359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 4934 : 
; 4935 : 			bFastPollEnabled = TRUE;

  0435f	b8 01 00 00 00	 mov	 eax, 1
  04364	a3 00 00 00 00	 mov	 DWORD PTR _bFastPollEnabled, eax

; 4936 : 			bRandmixEnabled = TRUE;

  04369	a3 00 00 00 00	 mov	 DWORD PTR _bRandmixEnabled, eax

; 4937 : 
; 4938 : 			return 1;

  0436e	e9 00 0e 00 00	 jmp	 $LN333@PageDialog
$LN83@PageDialog:

; 4939 : 		}
; 4940 : 
; 4941 : 		if (lw == IDC_LINK_MORE_INFO_ABOUT_CIPHER && nCurPageNo == CIPHER_PAGE)

  04373	b9 21 04 00 00	 mov	 ecx, 1057		; 00000421H
  04378	66 3b f9	 cmp	 di, cx
  0437b	0f 85 6b 01 00
	00		 jne	 $LN82@PageDialog
  04381	83 f8 12	 cmp	 eax, 18			; 00000012H
  04384	0f 85 8a 01 00
	00		 jne	 $LN74@PageDialog

; 4942 : 		{
; 4943 : 			char name[100];
; 4944 : 
; 4945 : 			int nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  0438a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04390	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04396	6a 00		 push	 0
  04398	6a 00		 push	 0
  0439a	68 47 01 00 00	 push	 327			; 00000147H
  0439f	68 ea 03 00 00	 push	 1002			; 000003eaH
  043a4	52		 push	 edx
  043a5	ff d6		 call	 esi
  043a7	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  043ad	50		 push	 eax
  043ae	ff d3		 call	 ebx

; 4946 : 			nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  043b0	6a 00		 push	 0
  043b2	50		 push	 eax
  043b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  043b8	68 50 01 00 00	 push	 336			; 00000150H
  043bd	68 ea 03 00 00	 push	 1002			; 000003eaH
  043c2	50		 push	 eax
  043c3	ff d6		 call	 esi
  043c5	50		 push	 eax
  043c6	ff d3		 call	 ebx
  043c8	8b f0		 mov	 esi, eax

; 4947 : 			EAGetName (name, nIndex);

  043ca	8d 8d 88 11 01
	00		 lea	 ecx, DWORD PTR _name$133928[ebp]
  043d0	56		 push	 esi
  043d1	51		 push	 ecx
  043d2	e8 00 00 00 00	 call	 _EAGetName
  043d7	83 c4 08	 add	 esp, 8

; 4948 : 
; 4949 : 			if (strcmp (name, "AES") == 0)

  043da	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  043df	8d 85 88 11 01
	00		 lea	 eax, DWORD PTR _name$133928[ebp]
$LL602@PageDialog:
  043e5	8a 10		 mov	 dl, BYTE PTR [eax]
  043e7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  043e9	75 1a		 jne	 SHORT $LN603@PageDialog
  043eb	84 d2		 test	 dl, dl
  043ed	74 12		 je	 SHORT $LN604@PageDialog
  043ef	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  043f2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  043f5	75 0e		 jne	 SHORT $LN603@PageDialog
  043f7	83 c0 02	 add	 eax, 2
  043fa	83 c1 02	 add	 ecx, 2
  043fd	84 d2		 test	 dl, dl
  043ff	75 e4		 jne	 SHORT $LL602@PageDialog
$LN604@PageDialog:
  04401	33 c0		 xor	 eax, eax
  04403	eb 05		 jmp	 SHORT $LN605@PageDialog
$LN603@PageDialog:
  04405	1b c0		 sbb	 eax, eax
  04407	83 d8 ff	 sbb	 eax, -1
$LN605@PageDialog:
  0440a	85 c0		 test	 eax, eax
  0440c	75 18		 jne	 SHORT $LN81@PageDialog

; 4950 : 				Applink ("aes", FALSE, "");

  0440e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  04413	50		 push	 eax
  04414	68 00 00 00 00	 push	 OFFSET ??_C@_03BHCPJDHL@aes?$AA@

; 4956 : 				Applink ("cascades", TRUE, "");

  04419	e8 00 00 00 00	 call	 _Applink
  0441e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4957 : 
; 4958 : 			return 1;

  04421	e9 48 0d 00 00	 jmp	 $LN681@PageDialog
$LN81@PageDialog:

; 4951 : 			else if (strcmp (name, "Serpent") == 0)

  04426	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  0442b	8d 85 88 11 01
	00		 lea	 eax, DWORD PTR _name$133928[ebp]
$LL606@PageDialog:
  04431	8a 10		 mov	 dl, BYTE PTR [eax]
  04433	3a 11		 cmp	 dl, BYTE PTR [ecx]
  04435	75 1a		 jne	 SHORT $LN607@PageDialog
  04437	84 d2		 test	 dl, dl
  04439	74 12		 je	 SHORT $LN608@PageDialog
  0443b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0443e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  04441	75 0e		 jne	 SHORT $LN607@PageDialog
  04443	83 c0 02	 add	 eax, 2
  04446	83 c1 02	 add	 ecx, 2
  04449	84 d2		 test	 dl, dl
  0444b	75 e4		 jne	 SHORT $LL606@PageDialog
$LN608@PageDialog:
  0444d	33 c0		 xor	 eax, eax
  0444f	eb 05		 jmp	 SHORT $LN609@PageDialog
$LN607@PageDialog:
  04451	1b c0		 sbb	 eax, eax
  04453	83 d8 ff	 sbb	 eax, -1
$LN609@PageDialog:
  04456	85 c0		 test	 eax, eax
  04458	75 18		 jne	 SHORT $LN79@PageDialog

; 4952 : 				Applink ("serpent", FALSE, "");

  0445a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0445f	50		 push	 eax
  04460	68 00 00 00 00	 push	 OFFSET ??_C@_07NLFGMEEL@serpent?$AA@

; 4956 : 				Applink ("cascades", TRUE, "");

  04465	e8 00 00 00 00	 call	 _Applink
  0446a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4957 : 
; 4958 : 			return 1;

  0446d	e9 fc 0c 00 00	 jmp	 $LN681@PageDialog
$LN79@PageDialog:

; 4953 : 			else if (strcmp (name, "Twofish") == 0)

  04472	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  04477	8d 85 88 11 01
	00		 lea	 eax, DWORD PTR _name$133928[ebp]
  0447d	8d 49 00	 npad	 3
$LL610@PageDialog:
  04480	8a 10		 mov	 dl, BYTE PTR [eax]
  04482	3a 11		 cmp	 dl, BYTE PTR [ecx]
  04484	75 1a		 jne	 SHORT $LN611@PageDialog
  04486	84 d2		 test	 dl, dl
  04488	74 12		 je	 SHORT $LN612@PageDialog
  0448a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0448d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  04490	75 0e		 jne	 SHORT $LN611@PageDialog
  04492	83 c0 02	 add	 eax, 2
  04495	83 c1 02	 add	 ecx, 2
  04498	84 d2		 test	 dl, dl
  0449a	75 e4		 jne	 SHORT $LL610@PageDialog
$LN612@PageDialog:
  0449c	33 c0		 xor	 eax, eax
  0449e	eb 05		 jmp	 SHORT $LN613@PageDialog
$LN611@PageDialog:
  044a0	1b c0		 sbb	 eax, eax
  044a2	83 d8 ff	 sbb	 eax, -1
$LN613@PageDialog:
  044a5	85 c0		 test	 eax, eax
  044a7	75 18		 jne	 SHORT $LN77@PageDialog

; 4954 : 				Applink ("twofish", FALSE, "");

  044a9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  044ae	50		 push	 eax
  044af	68 00 00 00 00	 push	 OFFSET ??_C@_07MJGFOBBE@twofish?$AA@

; 4956 : 				Applink ("cascades", TRUE, "");

  044b4	e8 00 00 00 00	 call	 _Applink
  044b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4957 : 
; 4958 : 			return 1;

  044bc	e9 ad 0c 00 00	 jmp	 $LN681@PageDialog
$LN77@PageDialog:

; 4955 : 			else if (EAGetCipherCount (nIndex) > 1)

  044c1	56		 push	 esi
  044c2	e8 00 00 00 00	 call	 _EAGetCipherCount
  044c7	83 c4 04	 add	 esp, 4
  044ca	83 f8 01	 cmp	 eax, 1
  044cd	0f 8e 9b 0c 00
	00		 jle	 $LN681@PageDialog

; 4956 : 				Applink ("cascades", TRUE, "");

  044d3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  044d8	6a 01		 push	 1
  044da	68 00 00 00 00	 push	 OFFSET ??_C@_08GJKBFMAA@cascades?$AA@
  044df	e8 00 00 00 00	 call	 _Applink
  044e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4957 : 
; 4958 : 			return 1;

  044e7	e9 82 0c 00 00	 jmp	 $LN681@PageDialog
$LN82@PageDialog:

; 4959 : 		}
; 4960 : 
; 4961 : 		if (lw == IDC_LINK_HASH_INFO && nCurPageNo == CIPHER_PAGE)

  044ec	b9 22 04 00 00	 mov	 ecx, 1058		; 00000422H
  044f1	66 3b f9	 cmp	 di, cx
  044f4	75 1e		 jne	 SHORT $LN74@PageDialog
  044f6	83 f8 12	 cmp	 eax, 18			; 00000012H
  044f9	75 19		 jne	 SHORT $LN74@PageDialog

; 4962 : 		{
; 4963 : 			Applink ("hashalgorithms", TRUE, "");

  044fb	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  04500	6a 01		 push	 1
  04502	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BELAJGNG@hashalgorithms?$AA@
  04507	e8 00 00 00 00	 call	 _Applink
  0450c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4964 : 			return 1;

  0450f	e9 5a 0c 00 00	 jmp	 $LN681@PageDialog
$LN74@PageDialog:

; 4965 : 		}
; 4966 : 
; 4967 : 		if (hw == CBN_EDITCHANGE && nCurPageNo == VOLUME_LOCATION_PAGE)

  04514	66 83 fa 05	 cmp	 dx, 5
  04518	75 53		 jne	 SHORT $LN73@PageDialog
  0451a	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0451d	0f 85 22 01 00
	00		 jne	 $LN68@PageDialog

; 4968 : 		{
; 4969 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), 
; 4970 : 				GetWindowTextLength (GetDlgItem (hCurPage, IDC_COMBO_BOX)) > 0);

  04523	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04529	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0452f	68 ea 03 00 00	 push	 1002			; 000003eaH
  04534	52		 push	 edx
  04535	ff d6		 call	 esi
  04537	50		 push	 eax
  04538	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  0453e	33 c9		 xor	 ecx, ecx
  04540	85 c0		 test	 eax, eax
  04542	0f 9f c1	 setg	 cl
  04545	51		 push	 ecx
$LN698@PageDialog:
  04546	68 10 04 00 00	 push	 1040			; 00000410H
  0454b	53		 push	 ebx
  0454c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  04552	50		 push	 eax
  04553	ff d6		 call	 esi
  04555	50		 push	 eax
  04556	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4971 : 
; 4972 : 			bDeviceTransformModeChoiceMade = FALSE;

  0455c	33 c0		 xor	 eax, eax
  0455e	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade

; 4973 : 			bInPlaceEncNonSys = FALSE;

  04563	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax

; 4974 : 
; 4975 : 			return 1;

  04568	e9 01 0c 00 00	 jmp	 $LN681@PageDialog
$LN73@PageDialog:

; 4976 : 		}
; 4977 : 		
; 4978 : 		if (hw == CBN_SELCHANGE && nCurPageNo == VOLUME_LOCATION_PAGE)

  0456d	66 83 fa 01	 cmp	 dx, 1
  04571	75 3d		 jne	 SHORT $LN72@PageDialog
  04573	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  04576	0f 85 c9 00 00
	00		 jne	 $LN68@PageDialog

; 4979 : 		{
; 4980 : 			LPARAM nIndex;
; 4981 : 
; 4982 : 			nIndex = MoveEditToCombo ((HWND) lParam, bHistory);

  0457c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  04582	52		 push	 edx
  04583	56		 push	 esi
  04584	e8 00 00 00 00	 call	 _MoveEditToCombo

; 4983 : 			nIndex = UpdateComboOrder (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  04589	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0458f	83 c4 08	 add	 esp, 8
  04592	68 ea 03 00 00	 push	 1002			; 000003eaH
  04597	53		 push	 ebx
  04598	ff d6		 call	 esi
  0459a	50		 push	 eax
  0459b	e8 00 00 00 00	 call	 _UpdateComboOrder
  045a0	83 c4 04	 add	 esp, 4

; 4984 : 
; 4985 : 			if (nIndex != CB_ERR)

  045a3	83 f8 ff	 cmp	 eax, -1
  045a6	74 04		 je	 SHORT $LN71@PageDialog

; 4986 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  045a8	6a 01		 push	 1

; 4987 : 			else

  045aa	eb 9a		 jmp	 SHORT $LN698@PageDialog
$LN71@PageDialog:

; 4988 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  045ac	6a 00		 push	 0

; 4989 : 
; 4990 : 			bDeviceTransformModeChoiceMade = FALSE;
; 4991 : 			bInPlaceEncNonSys = FALSE;
; 4992 : 
; 4993 : 			return 1;

  045ae	eb 96		 jmp	 SHORT $LN698@PageDialog
$LN72@PageDialog:

; 4994 : 		}
; 4995 : 		
; 4996 : 		if (hw == EN_CHANGE && nCurPageNo == SIZE_PAGE)

  045b0	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  045b5	66 3b d1	 cmp	 dx, cx
  045b8	0f 85 87 00 00
	00		 jne	 $LN68@PageDialog
  045be	83 f8 13	 cmp	 eax, 19			; 00000013H

; 4997 : 		{
; 4998 : 			VerifySizeAndUpdate (hwndDlg, FALSE);
; 4999 : 			return 1;

  045c1	0f 84 86 04 00
	00		 je	 $LN50@PageDialog

; 5000 : 		}
; 5001 : 		
; 5002 : 		if (hw == EN_CHANGE && nCurPageNo == PASSWORD_PAGE)

  045c7	83 f8 15	 cmp	 eax, 21			; 00000015H
  045ca	0f 85 75 00 00
	00		 jne	 $LN68@PageDialog

; 5003 : 		{
; 5004 : 			VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5005 : 				GetDlgItem (hwndDlg, IDC_PASSWORD),
; 5006 : 				GetDlgItem (hwndDlg, IDC_VERIFY),
; 5007 : 				NULL,
; 5008 : 				NULL,
; 5009 : 				KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  045d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  045d7	74 19		 je	 SHORT $LN419@PageDialog
  045d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  045e0	74 10		 je	 SHORT $LN419@PageDialog
  045e2	e8 00 00 00 00	 call	 _SysEncInEffect
  045e7	85 c0		 test	 eax, eax
  045e9	75 07		 jne	 SHORT $LN419@PageDialog
  045eb	b8 01 00 00 00	 mov	 eax, 1
  045f0	eb 02		 jmp	 SHORT $LN420@PageDialog
$LN419@PageDialog:
  045f2	33 c0		 xor	 eax, eax
$LN420@PageDialog:
  045f4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  045fa	50		 push	 eax
  045fb	6a 00		 push	 0
  045fd	6a 00		 push	 0
  045ff	68 f2 03 00 00	 push	 1010			; 000003f2H
  04604	53		 push	 ebx
  04605	ff d6		 call	 esi
  04607	50		 push	 eax
  04608	68 ec 03 00 00	 push	 1004			; 000003ecH
  0460d	53		 push	 ebx
  0460e	ff d6		 call	 esi
  04610	50		 push	 eax
  04611	68 10 04 00 00	 push	 1040			; 00000410H
  04616	53		 push	 ebx
  04617	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0461d	50		 push	 eax
  0461e	ff d6		 call	 esi
  04620	50		 push	 eax
  04621	53		 push	 ebx
  04622	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate

; 5010 : 			volumePassword.Length = strlen ((char *) volumePassword.Text);

  04627	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  0462c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0462f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL614@PageDialog:
  04632	8a 08		 mov	 cl, BYTE PTR [eax]
  04634	40		 inc	 eax
  04635	84 c9		 test	 cl, cl
  04637	75 f9		 jne	 SHORT $LL614@PageDialog
  04639	2b c2		 sub	 eax, edx
  0463b	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 5011 : 
; 5012 : 			return 1;

  04640	e9 29 0b 00 00	 jmp	 $LN681@PageDialog
$LN68@PageDialog:

; 5013 : 		}
; 5014 : 
; 5015 : 		if (lw == IDC_SHOW_PASSWORD && nCurPageNo == PASSWORD_PAGE)

  04645	b9 20 04 00 00	 mov	 ecx, 1056		; 00000420H
  0464a	66 3b f9	 cmp	 di, cx
  0464d	0f 85 90 00 00
	00		 jne	 $LN67@PageDialog
  04653	83 f8 15	 cmp	 eax, 21			; 00000015H
  04656	0f 85 8c 00 00
	00		 jne	 $LN579@PageDialog

; 5016 : 		{
; 5017 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD),
; 5018 : 						EM_SETPASSWORDCHAR,
; 5019 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD) ? 0 : '*',
; 5020 : 						0);

  0465c	6a 00		 push	 0
  0465e	51		 push	 ecx
  0465f	53		 push	 ebx
  04660	e8 00 00 00 00	 call	 _GetCheckBox
  04665	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0466b	83 c4 08	 add	 esp, 8
  0466e	f7 d8		 neg	 eax
  04670	1b c0		 sbb	 eax, eax
  04672	83 e0 d6	 and	 eax, -42		; ffffffd6H
  04675	83 c0 2a	 add	 eax, 42			; 0000002aH
  04678	50		 push	 eax
  04679	68 cc 00 00 00	 push	 204			; 000000ccH
  0467e	68 ec 03 00 00	 push	 1004			; 000003ecH
  04683	53		 push	 ebx
  04684	ff d6		 call	 esi
  04686	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0468c	50		 push	 eax
  0468d	ff d7		 call	 edi

; 5021 : 			SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY),
; 5022 : 						EM_SETPASSWORDCHAR,
; 5023 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD) ? 0 : '*',
; 5024 : 						0);

  0468f	6a 00		 push	 0
  04691	68 20 04 00 00	 push	 1056			; 00000420H
  04696	53		 push	 ebx
  04697	e8 00 00 00 00	 call	 _GetCheckBox
  0469c	83 c4 08	 add	 esp, 8
  0469f	f7 d8		 neg	 eax
  046a1	1b c0		 sbb	 eax, eax
  046a3	83 e0 d6	 and	 eax, -42		; ffffffd6H
  046a6	83 c0 2a	 add	 eax, 42			; 0000002aH
  046a9	50		 push	 eax
  046aa	68 cc 00 00 00	 push	 204			; 000000ccH
  046af	68 f2 03 00 00	 push	 1010			; 000003f2H
  046b4	53		 push	 ebx
  046b5	ff d6		 call	 esi
  046b7	50		 push	 eax
  046b8	ff d7		 call	 edi

; 5025 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL, TRUE);

  046ba	6a 01		 push	 1
  046bc	6a 00		 push	 0
  046be	68 ec 03 00 00	 push	 1004			; 000003ecH
  046c3	53		 push	 ebx
  046c4	ff d6		 call	 esi
  046c6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InvalidateRect@12
  046cc	50		 push	 eax
  046cd	ff d7		 call	 edi

; 5026 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_VERIFY), NULL, TRUE);

  046cf	6a 01		 push	 1
  046d1	6a 00		 push	 0
  046d3	68 f2 03 00 00	 push	 1010			; 000003f2H
  046d8	53		 push	 ebx
  046d9	ff d6		 call	 esi
  046db	50		 push	 eax
  046dc	ff d7		 call	 edi

; 5027 : 			return 1;

  046de	e9 8b 0a 00 00	 jmp	 $LN681@PageDialog
$LN67@PageDialog:

; 5028 : 		}
; 5029 : 		
; 5030 : 		if (nCurPageNo == PASSWORD_PAGE 
; 5031 : 			|| nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE 
; 5032 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  046e3	83 f8 15	 cmp	 eax, 21			; 00000015H
  046e6	74 0e		 je	 SHORT $LN65@PageDialog
$LN579@PageDialog:
  046e8	83 f8 14	 cmp	 eax, 20			; 00000014H
  046eb	74 09		 je	 SHORT $LN65@PageDialog
  046ed	83 f8 20	 cmp	 eax, 32			; 00000020H
  046f0	0f 85 cf 01 00
	00		 jne	 $LN59@PageDialog
$LN65@PageDialog:

; 5033 : 		{
; 5034 : 			if (lw == IDC_KEY_FILES)

  046f6	b9 02 04 00 00	 mov	 ecx, 1026		; 00000402H
  046fb	66 3b f9	 cmp	 di, cx
  046fe	0f 85 15 01 00
	00		 jne	 $LN64@PageDialog

; 5035 : 			{
; 5036 : 				if (SysEncInEffect())

  04704	e8 00 00 00 00	 call	 _SysEncInEffect
  04709	85 c0		 test	 eax, eax
  0470b	74 0f		 je	 SHORT $LN63@PageDialog

; 5037 : 				{
; 5038 : 					Warning ("KEYFILES_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  0470d	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
  04712	e8 00 00 00 00	 call	 _Warning

; 5039 : 					return 1;

  04717	e9 4f 0a 00 00	 jmp	 $LN696@PageDialog
$LN63@PageDialog:

; 5040 : 				}
; 5041 : 
; 5042 : 				KeyFilesDlgParam param;
; 5043 : 				param.EnableKeyFiles = KeyFilesEnable;

  0471c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable

; 5044 : 				param.FirstKeyFile = FirstKeyFile;

  04722	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile

; 5045 : 
; 5046 : 				if (IDOK == DialogBoxParamW (hInst,
; 5047 : 					MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 5048 : 					(DLGPROC) KeyFilesDlgProc, (LPARAM) &param))

  04727	8d 4d cc	 lea	 ecx, DWORD PTR _param$133958[ebp]
  0472a	51		 push	 ecx
  0472b	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  04730	53		 push	 ebx
  04731	89 55 cc	 mov	 DWORD PTR _param$133958[ebp], edx
  04734	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0473a	68 f9 01 00 00	 push	 505			; 000001f9H
  0473f	52		 push	 edx
  04740	89 45 d0	 mov	 DWORD PTR _param$133958[ebp+4], eax
  04743	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  04749	83 f8 01	 cmp	 eax, 1
  0474c	0f 85 1c 0a 00
	00		 jne	 $LN681@PageDialog

; 5049 : 				{
; 5050 : 					KeyFilesEnable = param.EnableKeyFiles;

  04752	8b 45 cc	 mov	 eax, DWORD PTR _param$133958[ebp]

; 5051 : 					FirstKeyFile = param.FirstKeyFile;

  04755	8b 4d d0	 mov	 ecx, DWORD PTR _param$133958[ebp+4]

; 5052 : 
; 5053 : 					SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  04758	50		 push	 eax
  04759	68 c5 13 00 00	 push	 5061			; 000013c5H
  0475e	53		 push	 ebx
  0475f	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  04764	89 0d 00 00 00
	00		 mov	 DWORD PTR _FirstKeyFile, ecx
  0476a	e8 00 00 00 00	 call	 _SetCheckBox

; 5054 : 
; 5055 : 					if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  0476f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04774	83 c4 0c	 add	 esp, 12			; 0000000cH
  04777	83 f8 14	 cmp	 eax, 20			; 00000014H
  0477a	0f 84 ee 09 00
	00		 je	 $LN681@PageDialog

; 5056 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  04780	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04786	83 f8 20	 cmp	 eax, 32			; 00000020H
  04789	74 1b		 je	 SHORT $LN61@PageDialog
  0478b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  04791	52		 push	 edx
  04792	68 02 04 00 00	 push	 1026			; 00000402H
  04797	53		 push	 ebx
  04798	ff d6		 call	 esi
  0479a	50		 push	 eax
  0479b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  047a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN61@PageDialog:

; 5057 : 
; 5058 : 					if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  047a6	83 f8 14	 cmp	 eax, 20			; 00000014H
  047a9	0f 84 bf 09 00
	00		 je	 $LN681@PageDialog
  047af	83 f8 20	 cmp	 eax, 32			; 00000020H
  047b2	0f 84 b6 09 00
	00		 je	 $LN681@PageDialog

; 5059 : 					{
; 5060 : 						VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5061 : 							GetDlgItem (hCurPage, IDC_PASSWORD),
; 5062 : 							GetDlgItem (hCurPage, IDC_VERIFY),
; 5063 : 							volumePassword.Text, szVerify, KeyFilesEnable && FirstKeyFile!=NULL);

  047b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  047bf	74 10		 je	 SHORT $LN421@PageDialog
  047c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  047c8	74 07		 je	 SHORT $LN421@PageDialog
  047ca	b8 01 00 00 00	 mov	 eax, 1
  047cf	eb 02		 jmp	 SHORT $LN422@PageDialog
$LN421@PageDialog:
  047d1	33 c0		 xor	 eax, eax
$LN422@PageDialog:
  047d3	50		 push	 eax
  047d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  047d9	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  047de	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  047e3	68 f2 03 00 00	 push	 1010			; 000003f2H
  047e8	50		 push	 eax
  047e9	ff d6		 call	 esi
  047eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  047f1	50		 push	 eax
  047f2	68 ec 03 00 00	 push	 1004			; 000003ecH
  047f7	51		 push	 ecx
  047f8	ff d6		 call	 esi
  047fa	50		 push	 eax
  047fb	68 10 04 00 00	 push	 1040			; 00000410H
  04800	53		 push	 ebx
  04801	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  04807	50		 push	 eax
  04808	ff d6		 call	 esi
  0480a	50		 push	 eax
  0480b	53		 push	 ebx
  0480c	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate
  04811	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5064 : 					}
; 5065 : 				}
; 5066 : 
; 5067 : 				return 1;

  04814	e9 55 09 00 00	 jmp	 $LN681@PageDialog
$LN64@PageDialog:

; 5068 : 			}
; 5069 : 
; 5070 : 			if (lw == IDC_KEYFILES_ENABLE)

  04819	b9 c5 13 00 00	 mov	 ecx, 5061		; 000013c5H
  0481e	66 3b f9	 cmp	 di, cx
  04821	0f 85 9e 00 00
	00		 jne	 $LN59@PageDialog

; 5071 : 			{
; 5072 : 				KeyFilesEnable = GetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE);

  04827	51		 push	 ecx
  04828	53		 push	 ebx
  04829	e8 00 00 00 00	 call	 _GetCheckBox

; 5073 : 
; 5074 : 				if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  0482e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04834	83 c4 08	 add	 esp, 8
  04837	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  0483c	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0483f	0f 84 29 09 00
	00		 je	 $LN681@PageDialog
  04845	83 f9 20	 cmp	 ecx, 32			; 00000020H
  04848	0f 84 20 09 00
	00		 je	 $LN681@PageDialog

; 5075 : 				{
; 5076 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  0484e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04854	50		 push	 eax
  04855	68 02 04 00 00	 push	 1026			; 00000402H
  0485a	53		 push	 ebx
  0485b	ff d6		 call	 esi
  0485d	50		 push	 eax
  0485e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 5077 : 
; 5078 : 					VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5079 : 						GetDlgItem (hCurPage, IDC_PASSWORD),
; 5080 : 						GetDlgItem (hCurPage, IDC_VERIFY),
; 5081 : 						volumePassword.Text, szVerify, KeyFilesEnable && FirstKeyFile!=NULL);

  04864	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  0486b	74 10		 je	 SHORT $LN423@PageDialog
  0486d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  04874	74 07		 je	 SHORT $LN423@PageDialog
  04876	b8 01 00 00 00	 mov	 eax, 1
  0487b	eb 02		 jmp	 SHORT $LN424@PageDialog
$LN423@PageDialog:
  0487d	33 c0		 xor	 eax, eax
$LN424@PageDialog:
  0487f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04885	50		 push	 eax
  04886	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  0488b	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  04890	68 f2 03 00 00	 push	 1010			; 000003f2H
  04895	52		 push	 edx
  04896	ff d6		 call	 esi
  04898	50		 push	 eax
  04899	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0489e	68 ec 03 00 00	 push	 1004			; 000003ecH
  048a3	50		 push	 eax
  048a4	ff d6		 call	 esi
  048a6	50		 push	 eax
  048a7	68 10 04 00 00	 push	 1040			; 00000410H
  048ac	53		 push	 ebx
  048ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  048b3	50		 push	 eax
  048b4	ff d6		 call	 esi
  048b6	50		 push	 eax
  048b7	53		 push	 ebx
  048b8	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate
  048bd	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5082 : 				}
; 5083 : 
; 5084 : 				return 1;

  048c0	e9 a9 08 00 00	 jmp	 $LN681@PageDialog
$LN59@PageDialog:

; 5085 : 			}
; 5086 : 		}
; 5087 : 
; 5088 : 		if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 5089 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  048c5	83 f8 14	 cmp	 eax, 20			; 00000014H
  048c8	74 09		 je	 SHORT $LN56@PageDialog
  048ca	83 f8 20	 cmp	 eax, 32			; 00000020H
  048cd	0f 85 98 00 00
	00		 jne	 $LN54@PageDialog
$LN56@PageDialog:

; 5090 : 		{
; 5091 : 			if (hw == EN_CHANGE)

  048d3	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  048d8	66 3b d1	 cmp	 dx, cx
  048db	75 3b		 jne	 SHORT $LN55@PageDialog

; 5092 : 			{
; 5093 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), (char *) volumePassword.Text, sizeof (volumePassword.Text));

  048dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  048e3	6a 41		 push	 65			; 00000041H
  048e5	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  048ea	68 0d 04 00 00	 push	 1037			; 0000040dH
  048ef	52		 push	 edx
  048f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  048f6	50		 push	 eax
  048f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 5094 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  048fd	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  04902	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL615@PageDialog:
  04905	8a 08		 mov	 cl, BYTE PTR [eax]
  04907	40		 inc	 eax
  04908	84 c9		 test	 cl, cl
  0490a	75 f9		 jne	 SHORT $LL615@PageDialog
  0490c	2b c2		 sub	 eax, edx
  0490e	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 5095 : 				return 1;

  04913	e9 56 08 00 00	 jmp	 $LN681@PageDialog
$LN55@PageDialog:

; 5096 : 			}
; 5097 : 
; 5098 : 			if (lw == IDC_SHOW_PASSWORD_SINGLE)

  04918	b9 1f 04 00 00	 mov	 ecx, 1055		; 0000041fH
  0491d	66 3b f9	 cmp	 di, cx
  04920	75 49		 jne	 SHORT $LN54@PageDialog

; 5099 : 			{
; 5100 : 				SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT),
; 5101 : 					EM_SETPASSWORDCHAR,
; 5102 : 					GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_SINGLE) ? 0 : '*',
; 5103 : 					0);

  04922	6a 00		 push	 0
  04924	51		 push	 ecx
  04925	53		 push	 ebx
  04926	e8 00 00 00 00	 call	 _GetCheckBox
  0492b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04931	83 c4 08	 add	 esp, 8
  04934	f7 d8		 neg	 eax
  04936	1b c0		 sbb	 eax, eax
  04938	83 e0 d6	 and	 eax, -42		; ffffffd6H
  0493b	83 c0 2a	 add	 eax, 42			; 0000002aH
  0493e	50		 push	 eax
  0493f	68 cc 00 00 00	 push	 204			; 000000ccH
  04944	68 0d 04 00 00	 push	 1037			; 0000040dH
  04949	53		 push	 ebx
  0494a	ff d6		 call	 esi
  0494c	50		 push	 eax
  0494d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5104 : 				InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), NULL, TRUE);

  04953	6a 01		 push	 1
  04955	6a 00		 push	 0
  04957	68 0d 04 00 00	 push	 1037			; 0000040dH
  0495c	53		 push	 ebx
  0495d	ff d6		 call	 esi
  0495f	50		 push	 eax
  04960	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 5105 : 				return 1;

  04966	e9 03 08 00 00	 jmp	 $LN681@PageDialog
$LN54@PageDialog:

; 5106 : 			}
; 5107 : 		}
; 5108 : 
; 5109 : 		if ((lw == IDC_KB || lw == IDC_MB || lw == IDC_GB) && nCurPageNo == SIZE_PAGE)

  0496b	b9 f3 03 00 00	 mov	 ecx, 1011		; 000003f3H
  04970	66 3b f9	 cmp	 di, cx
  04973	74 18		 je	 SHORT $LN52@PageDialog
  04975	b9 f5 03 00 00	 mov	 ecx, 1013		; 000003f5H
  0497a	66 3b f9	 cmp	 di, cx
  0497d	74 0e		 je	 SHORT $LN52@PageDialog
  0497f	b9 f7 03 00 00	 mov	 ecx, 1015		; 000003f7H
  04984	66 3b f9	 cmp	 di, cx
  04987	0f 85 ce 00 00
	00		 jne	 $LN53@PageDialog
$LN52@PageDialog:
  0498d	83 f8 13	 cmp	 eax, 19			; 00000013H
  04990	0f 85 c5 00 00
	00		 jne	 $LN53@PageDialog

; 5110 : 		{
; 5111 : 			SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_UNCHECKED, 0);

  04996	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0499c	6a 00		 push	 0
  0499e	6a 00		 push	 0
  049a0	68 f1 00 00 00	 push	 241			; 000000f1H
  049a5	68 f3 03 00 00	 push	 1011			; 000003f3H
  049aa	53		 push	 ebx
  049ab	ff d6		 call	 esi
  049ad	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  049b3	50		 push	 eax
  049b4	ff d7		 call	 edi

; 5112 : 			SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_UNCHECKED, 0);

  049b6	6a 00		 push	 0
  049b8	6a 00		 push	 0
  049ba	68 f1 00 00 00	 push	 241			; 000000f1H
  049bf	68 f5 03 00 00	 push	 1013			; 000003f5H
  049c4	53		 push	 ebx
  049c5	ff d6		 call	 esi
  049c7	50		 push	 eax
  049c8	ff d7		 call	 edi

; 5113 : 			SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_UNCHECKED, 0);

  049ca	6a 00		 push	 0
  049cc	6a 00		 push	 0
  049ce	68 f1 00 00 00	 push	 241			; 000000f1H
  049d3	68 f7 03 00 00	 push	 1015			; 000003f7H
  049d8	53		 push	 ebx
  049d9	ff d6		 call	 esi
  049db	50		 push	 eax
  049dc	ff d7		 call	 edi

; 5114 : 
; 5115 : 			switch (lw)

  049de	0f b7 85 20 12
	01 00		 movzx	 eax, WORD PTR _wParam$[ebp]
  049e5	2d f3 03 00 00	 sub	 eax, 1011		; 000003f3H
  049ea	74 4d		 je	 SHORT $LN49@PageDialog
  049ec	83 e8 02	 sub	 eax, 2
  049ef	74 26		 je	 SHORT $LN48@PageDialog
  049f1	83 e8 02	 sub	 eax, 2
  049f4	75 57		 jne	 SHORT $LN50@PageDialog

; 5122 : 				break;
; 5123 : 			case IDC_GB:
; 5124 : 				SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_CHECKED, 0);

  049f6	50		 push	 eax
  049f7	6a 01		 push	 1
  049f9	68 f1 00 00 00	 push	 241			; 000000f1H
  049fe	68 f7 03 00 00	 push	 1015			; 000003f7H
  04a03	53		 push	 ebx
  04a04	ff d6		 call	 esi
  04a06	50		 push	 eax
  04a07	ff d7		 call	 edi

; 5125 : 				break;
; 5126 : 			}
; 5127 : 
; 5128 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04a09	6a 00		 push	 0
  04a0b	8b cb		 mov	 ecx, ebx
  04a0d	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5129 : 			return 1;

  04a12	e9 54 07 00 00	 jmp	 $LN696@PageDialog
$LN48@PageDialog:

; 5119 : 				break;
; 5120 : 			case IDC_MB:
; 5121 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_CHECKED, 0);

  04a17	6a 00		 push	 0
  04a19	6a 01		 push	 1
  04a1b	68 f1 00 00 00	 push	 241			; 000000f1H
  04a20	68 f5 03 00 00	 push	 1013			; 000003f5H
  04a25	53		 push	 ebx
  04a26	ff d6		 call	 esi
  04a28	50		 push	 eax
  04a29	ff d7		 call	 edi

; 5125 : 				break;
; 5126 : 			}
; 5127 : 
; 5128 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04a2b	6a 00		 push	 0
  04a2d	8b cb		 mov	 ecx, ebx
  04a2f	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5129 : 			return 1;

  04a34	e9 32 07 00 00	 jmp	 $LN696@PageDialog
$LN49@PageDialog:

; 5116 : 			{
; 5117 : 			case IDC_KB:
; 5118 : 				SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_CHECKED, 0);

  04a39	6a 00		 push	 0
  04a3b	6a 01		 push	 1
  04a3d	68 f1 00 00 00	 push	 241			; 000000f1H
  04a42	68 f3 03 00 00	 push	 1011			; 000003f3H
  04a47	53		 push	 ebx
  04a48	ff d6		 call	 esi
  04a4a	50		 push	 eax
  04a4b	ff d7		 call	 edi
$LN50@PageDialog:

; 5125 : 				break;
; 5126 : 			}
; 5127 : 
; 5128 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04a4d	6a 00		 push	 0
  04a4f	8b cb		 mov	 ecx, ebx
  04a51	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5129 : 			return 1;

  04a56	e9 10 07 00 00	 jmp	 $LN696@PageDialog
$LN53@PageDialog:

; 5130 : 		}
; 5131 : 
; 5132 : 		if (lw == IDC_HIDVOL_WIZ_MODE_DIRECT && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04a5b	b9 0c 04 00 00	 mov	 ecx, 1036		; 0000040cH
  04a60	66 3b f9	 cmp	 di, cx
  04a63	75 18		 jne	 SHORT $LN46@PageDialog
  04a65	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  04a68	0f 85 b2 01 00
	00		 jne	 $LN41@PageDialog

; 5133 : 		{
; 5134 : 			bHiddenVolDirect = TRUE;

  04a6e	b8 01 00 00 00	 mov	 eax, 1
  04a73	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 5135 : 			return 1;

  04a78	e9 f6 06 00 00	 jmp	 $LN333@PageDialog
$LN46@PageDialog:

; 5136 : 		}
; 5137 : 
; 5138 : 		if (lw == IDC_HIDVOL_WIZ_MODE_FULL && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04a7d	b9 0b 04 00 00	 mov	 ecx, 1035		; 0000040bH
  04a82	66 3b f9	 cmp	 di, cx
  04a85	75 18		 jne	 SHORT $LN45@PageDialog
  04a87	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  04a8a	0f 85 90 01 00
	00		 jne	 $LN41@PageDialog
$LN709@PageDialog:

; 5139 : 		{
; 5140 : 			bHiddenVolDirect = FALSE;

  04a90	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, 0

; 5141 : 			return 1;

  04a9a	e9 cf 06 00 00	 jmp	 $LN681@PageDialog
$LN45@PageDialog:

; 5142 : 		}
; 5143 : 
; 5144 : 		if (lw == IDC_SELECT_VOLUME_LOCATION && nCurPageNo == VOLUME_LOCATION_PAGE)

  04a9f	b9 0f 04 00 00	 mov	 ecx, 1039		; 0000040fH
  04aa4	66 3b f9	 cmp	 di, cx
  04aa7	0f 85 73 01 00
	00		 jne	 $LN41@PageDialog
  04aad	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  04ab0	0f 85 6a 01 00
	00		 jne	 $LN41@PageDialog

; 5145 : 		{
; 5146 : 			if (!bDevice)

  04ab6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  04abd	0f 85 78 00 00
	00		 jne	 $LN43@PageDialog

; 5147 : 			{
; 5148 : 				// Select file
; 5149 : 
; 5150 : 				if (BrowseFiles (hwndDlg, "OPEN_TITLE", szFileName, bHistory, !bHiddenVolDirect, NULL) == FALSE)

  04ac3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolDirect
  04ac9	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  04ace	f7 da		 neg	 edx
  04ad0	6a 00		 push	 0
  04ad2	1b d2		 sbb	 edx, edx
  04ad4	42		 inc	 edx
  04ad5	52		 push	 edx
  04ad6	50		 push	 eax
  04ad7	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04adc	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  04ae1	53		 push	 ebx
  04ae2	e8 00 00 00 00	 call	 _BrowseFiles
  04ae7	83 c4 18	 add	 esp, 24			; 00000018H
  04aea	85 c0		 test	 eax, eax

; 5151 : 					return 1;

  04aec	0f 84 7c 06 00
	00		 je	 $LN681@PageDialog

; 5152 : 
; 5153 : 				AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  04af2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  04af8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04afe	51		 push	 ecx
  04aff	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04b04	68 ea 03 00 00	 push	 1002			; 000003eaH
  04b09	53		 push	 ebx
  04b0a	ff d6		 call	 esi
  04b0c	50		 push	 eax
  04b0d	e8 00 00 00 00	 call	 _AddComboItem
  04b12	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5154 : 
; 5155 : 				EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 5156 : 					GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  04b15	68 10 04 00 00	 push	 1040			; 00000410H
  04b1a	53		 push	 ebx
  04b1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  04b21	50		 push	 eax
  04b22	ff d6		 call	 esi
  04b24	50		 push	 eax
  04b25	68 ea 03 00 00	 push	 1002			; 000003eaH
  04b2a	53		 push	 ebx
  04b2b	ff d6		 call	 esi
  04b2d	50		 push	 eax
  04b2e	e8 00 00 00 00	 call	 _EnableDisableFileNext
  04b33	83 c4 08	 add	 esp, 8

; 5157 : 
; 5158 : 				return 1;

  04b36	e9 33 06 00 00	 jmp	 $LN681@PageDialog
$LN43@PageDialog:

; 5159 : 			}
; 5160 : 			else
; 5161 : 			{
; 5162 : 				// Select device
; 5163 : 
; 5164 : 				int nResult = DialogBoxParamW (hInst,
; 5165 : 					MAKEINTRESOURCEW (IDD_RAWDEVICES_DLG), GetParent (hwndDlg),
; 5166 : 					(DLGPROC) RawDevicesDlgProc, (LPARAM) & szFileName[0]);

  04b3b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  04b41	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04b46	68 00 00 00 00	 push	 OFFSET _RawDevicesDlgProc@16
  04b4b	53		 push	 ebx
  04b4c	ff d7		 call	 edi
  04b4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  04b54	50		 push	 eax
  04b55	68 fe 01 00 00	 push	 510			; 000001feH
  04b5a	52		 push	 edx
  04b5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 5167 : 
; 5168 : 				// Check administrator privileges
; 5169 : 				if (!strstr (szFileName, "Floppy") && !IsAdmin() && !IsUacSupported ())

  04b61	68 00 00 00 00	 push	 OFFSET ??_C@_06OACPEFAM@Floppy?$AA@
  04b66	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04b6b	8b f0		 mov	 esi, eax
  04b6d	e8 00 00 00 00	 call	 _strstr
  04b72	83 c4 08	 add	 esp, 8
  04b75	85 c0		 test	 eax, eax
  04b77	75 2f		 jne	 SHORT $LN40@PageDialog
  04b79	e8 00 00 00 00	 call	 _IsAdmin
  04b7e	85 c0		 test	 eax, eax
  04b80	75 26		 jne	 SHORT $LN40@PageDialog
  04b82	e8 00 00 00 00	 call	 _IsUacSupported
  04b87	85 c0		 test	 eax, eax
  04b89	75 1d		 jne	 SHORT $LN40@PageDialog

; 5170 : 					MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_DEVICES"), lpszTitle, MB_OK|MB_ICONWARNING);

  04b8b	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  04b90	6a 30		 push	 48			; 00000030H
  04b92	50		 push	 eax
  04b93	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  04b98	e8 00 00 00 00	 call	 _GetString
  04b9d	83 c4 04	 add	 esp, 4
  04ba0	50		 push	 eax
  04ba1	53		 push	 ebx
  04ba2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN40@PageDialog:

; 5171 : 
; 5172 : 				if (nResult == IDOK && strlen (szFileName) > 0)

  04ba8	83 fe 01	 cmp	 esi, 1
  04bab	0f 85 bd 05 00
	00		 jne	 $LN681@PageDialog
  04bb1	b8 00 00 00 00	 mov	 eax, OFFSET ?szFileName@@3PADA ; szFileName
  04bb6	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  04bb9	8d a4 24 00 00
	00 00		 npad	 7
$LL616@PageDialog:
  04bc0	8a 08		 mov	 cl, BYTE PTR [eax]
  04bc2	40		 inc	 eax
  04bc3	84 c9		 test	 cl, cl
  04bc5	75 f9		 jne	 SHORT $LL616@PageDialog
  04bc7	2b c2		 sub	 eax, edx
  04bc9	0f 84 9f 05 00
	00		 je	 $LN681@PageDialog

; 5173 : 				{
; 5174 : 					AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  04bcf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  04bd5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04bdb	51		 push	 ecx
  04bdc	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04be1	68 ea 03 00 00	 push	 1002			; 000003eaH
  04be6	53		 push	 ebx
  04be7	ff d6		 call	 esi
  04be9	50		 push	 eax
  04bea	e8 00 00 00 00	 call	 _AddComboItem
  04bef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5175 : 
; 5176 : 					EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 5177 : 						GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  04bf2	68 10 04 00 00	 push	 1040			; 00000410H
  04bf7	53		 push	 ebx
  04bf8	ff d7		 call	 edi
  04bfa	50		 push	 eax
  04bfb	ff d6		 call	 esi
  04bfd	50		 push	 eax
  04bfe	68 ea 03 00 00	 push	 1002			; 000003eaH
  04c03	53		 push	 ebx
  04c04	ff d6		 call	 esi
  04c06	50		 push	 eax
  04c07	e8 00 00 00 00	 call	 _EnableDisableFileNext
  04c0c	83 c4 08	 add	 esp, 8
  04c0f	33 c0		 xor	 eax, eax
  04c11	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade
  04c16	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
  04c1b	e9 4e 05 00 00	 jmp	 $LN681@PageDialog
$LN41@PageDialog:

; 5178 : 
; 5179 : 					bDeviceTransformModeChoiceMade = FALSE;
; 5180 : 					bInPlaceEncNonSys = FALSE;
; 5181 : 				}
; 5182 : 				return 1;
; 5183 : 			}
; 5184 : 		}
; 5185 : 
; 5186 : 		if (nCurPageNo == DEVICE_TRANSFORM_MODE_PAGE)

  04c20	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  04c23	75 5b		 jne	 SHORT $LN36@PageDialog

; 5187 : 		{
; 5188 : 			switch (lw)

  04c25	0f b7 cf	 movzx	 ecx, di
  04c28	81 e9 4d 04 00
	00		 sub	 ecx, 1101		; 0000044dH
  04c2e	74 37		 je	 SHORT $LN35@PageDialog
  04c30	be 01 00 00 00	 mov	 esi, 1
  04c35	2b ce		 sub	 ecx, esi
  04c37	75 47		 jne	 SHORT $LN36@PageDialog

; 5196 : 
; 5197 : 			case IDC_DEVICE_TRANSFORM_MODE_INPLACE:
; 5198 : 
; 5199 : 				bInPlaceEncNonSys = TRUE;
; 5200 : 				bDeviceTransformModeChoiceMade = TRUE;
; 5201 : 
; 5202 : 				bHiddenVol = FALSE;

  04c39	33 c0		 xor	 eax, eax
  04c3b	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  04c41	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, esi ; bDeviceTransformModeChoiceMade
  04c47	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 5203 : 				bHiddenVolDirect = FALSE;

  04c4c	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 5204 : 				bHiddenVolHost = FALSE;

  04c51	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 5205 : 				bSparseFileSwitch = FALSE;

  04c56	a3 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, eax ; bSparseFileSwitch

; 5206 : 				quickFormat = FALSE;

  04c5b	a3 00 00 00 00	 mov	 DWORD PTR ?quickFormat@@3HC, eax ; quickFormat

; 5207 : 
; 5208 : 				return 1;

  04c60	8b c6		 mov	 eax, esi
  04c62	e9 0c 05 00 00	 jmp	 $LN333@PageDialog
$LN35@PageDialog:

; 5189 : 			{
; 5190 : 			case IDC_DEVICE_TRANSFORM_MODE_FORMAT:
; 5191 : 
; 5192 : 				bInPlaceEncNonSys = FALSE;
; 5193 : 				bDeviceTransformModeChoiceMade = TRUE;

  04c67	b8 01 00 00 00	 mov	 eax, 1
  04c6c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0
  04c76	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade

; 5194 : 
; 5195 : 				return 1;

  04c7b	e9 f3 04 00 00	 jmp	 $LN333@PageDialog
$LN36@PageDialog:

; 5209 : 			}
; 5210 : 		}
; 5211 : 
; 5212 : 		if (lw == IDC_HIDVOL_WIZ_MODE_FULL && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04c80	b9 0b 04 00 00	 mov	 ecx, 1035		; 0000040bH
  04c85	66 3b f9	 cmp	 di, cx
  04c88	75 09		 jne	 SHORT $LN33@PageDialog
  04c8a	83 f8 0d	 cmp	 eax, 13			; 0000000dH

; 5213 : 		{
; 5214 : 			bHiddenVolDirect = FALSE;
; 5215 : 			return 1;

  04c8d	0f 84 fd fd ff
	ff		 je	 $LN709@PageDialog
$LN33@PageDialog:

; 5216 : 		}
; 5217 : 			
; 5218 : 		if (hw == CBN_SELCHANGE && nCurPageNo == CIPHER_PAGE)

  04c93	66 83 fa 01	 cmp	 dx, 1
  04c97	0f 85 ad 00 00
	00		 jne	 $LN32@PageDialog
  04c9d	83 f8 12	 cmp	 eax, 18			; 00000012H
  04ca0	0f 85 a4 00 00
	00		 jne	 $LN32@PageDialog

; 5219 : 		{
; 5220 : 			switch (lw)

  04ca6	0f b7 c7	 movzx	 eax, di
  04ca9	2d ea 03 00 00	 sub	 eax, 1002		; 000003eaH
  04cae	0f 84 8b 00 00
	00		 je	 $LN29@PageDialog
  04cb4	83 e8 06	 sub	 eax, 6
  04cb7	0f 85 b1 04 00
	00		 jne	 $LN681@PageDialog

; 5224 : 				break;
; 5225 : 
; 5226 : 			case IDC_COMBO_BOX_HASH_ALGO:
; 5227 : 				if (SysEncInEffect ()
; 5228 : 					&& SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, 
; 5229 : 					SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0), 0) 
; 5230 : 					!= DEFAULT_HASH_ALGORITHM_BOOT)

  04cbd	e8 00 00 00 00	 call	 _SysEncInEffect
  04cc2	85 c0		 test	 eax, eax
  04cc4	0f 84 a4 04 00
	00		 je	 $LN681@PageDialog
  04cca	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04cd0	6a 00		 push	 0
  04cd2	6a 00		 push	 0
  04cd4	6a 00		 push	 0
  04cd6	68 47 01 00 00	 push	 327			; 00000147H
  04cdb	68 f0 03 00 00	 push	 1008			; 000003f0H
  04ce0	53		 push	 ebx
  04ce1	ff d6		 call	 esi
  04ce3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  04ce9	50		 push	 eax
  04cea	ff d7		 call	 edi
  04cec	50		 push	 eax
  04ced	68 50 01 00 00	 push	 336			; 00000150H
  04cf2	68 f0 03 00 00	 push	 1008			; 000003f0H
  04cf7	53		 push	 ebx
  04cf8	ff d6		 call	 esi
  04cfa	50		 push	 eax
  04cfb	ff d7		 call	 edi
  04cfd	83 f8 01	 cmp	 eax, 1
  04d00	0f 84 68 04 00
	00		 je	 $LN681@PageDialog

; 5231 : 				{
; 5232 : 					hash_algo = DEFAULT_HASH_ALGORITHM_BOOT;
; 5233 : 					RandSetHashFunction (DEFAULT_HASH_ALGORITHM_BOOT);

  04d06	6a 01		 push	 1
  04d08	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, 1 ; hash_algo
  04d12	e8 00 00 00 00	 call	 _RandSetHashFunction

; 5234 : 					Info ("ALGO_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  04d17	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
  04d1c	e8 00 00 00 00	 call	 _Info
  04d21	83 c4 08	 add	 esp, 8

; 5235 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), &hash_algo);

  04d24	68 00 00 00 00	 push	 OFFSET ?hash_algo@@3HA	; hash_algo
  04d29	68 f0 03 00 00	 push	 1008			; 000003f0H
  04d2e	53		 push	 ebx
  04d2f	ff d6		 call	 esi
  04d31	50		 push	 eax
  04d32	e8 00 00 00 00	 call	 _SelectAlgo
  04d37	83 c4 08	 add	 esp, 8

; 5236 : 				}
; 5237 : 				break;

  04d3a	e9 2f 04 00 00	 jmp	 $LN681@PageDialog
$LN29@PageDialog:

; 5221 : 			{
; 5222 : 			case IDC_COMBO_BOX:
; 5223 : 				ComboSelChangeEA (hwndDlg);

  04d3f	53		 push	 ebx
  04d40	e8 00 00 00 00	 call	 _ComboSelChangeEA

; 5238 : 			}
; 5239 : 			return 1;

  04d45	e9 21 04 00 00	 jmp	 $LN696@PageDialog
$LN32@PageDialog:

; 5240 : 
; 5241 : 		}
; 5242 : 
; 5243 : 		if (lw == IDC_QUICKFORMAT && IsButtonChecked (GetDlgItem (hCurPage, IDC_QUICKFORMAT)))

  04d4a	b9 ff 03 00 00	 mov	 ecx, 1023		; 000003ffH
  04d4f	66 3b f9	 cmp	 di, cx
  04d52	75 5c		 jne	 SHORT $LN26@PageDialog
  04d54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04d5a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04d60	51		 push	 ecx
  04d61	52		 push	 edx
  04d62	ff d6		 call	 esi
  04d64	50		 push	 eax
  04d65	e8 00 00 00 00	 call	 _IsButtonChecked
  04d6a	83 c4 04	 add	 esp, 4
  04d6d	85 c0		 test	 eax, eax
  04d6f	0f 84 e3 01 00
	00		 je	 $LN651@PageDialog

; 5244 : 		{
; 5245 : 			if (bSparseFileSwitch)

  04d75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  04d7a	85 c0		 test	 eax, eax
  04d7c	74 07		 je	 SHORT $LN25@PageDialog

; 5246 : 			{
; 5247 : 				if (AskWarnYesNo("CONFIRM_SPARSE_FILE") == IDNO)

  04d7e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@

; 5248 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, FALSE); 
; 5249 : 			}
; 5250 : 			else

  04d83	eb 05		 jmp	 SHORT $LN701@PageDialog
$LN25@PageDialog:

; 5251 : 			{
; 5252 : 				if (AskWarnYesNo("WARN_QUICK_FORMAT") == IDNO)

  04d85	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@
$LN701@PageDialog:
  04d8a	e8 00 00 00 00	 call	 _AskWarnYesNo
  04d8f	83 c4 04	 add	 esp, 4
  04d92	83 f8 07	 cmp	 eax, 7
  04d95	0f 85 d3 03 00
	00		 jne	 $LN681@PageDialog

; 5253 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, FALSE); 

  04d9b	6a 00		 push	 0
  04d9d	68 ff 03 00 00	 push	 1023			; 000003ffH
  04da2	53		 push	 ebx
  04da3	e8 00 00 00 00	 call	 _SetCheckBox
  04da8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5254 : 			}
; 5255 : 			return 1;

  04dab	e9 be 03 00 00	 jmp	 $LN681@PageDialog
$LN26@PageDialog:

; 5256 : 		}
; 5257 : 
; 5258 : 		if (lw == IDC_FILESYS && hw == CBN_SELCHANGE)

  04db0	b9 05 04 00 00	 mov	 ecx, 1029		; 00000405H
  04db5	66 3b f9	 cmp	 di, cx
  04db8	75 4e		 jne	 SHORT $LN21@PageDialog
  04dba	66 83 fa 01	 cmp	 dx, 1
  04dbe	0f 85 9b 01 00
	00		 jne	 $LN652@PageDialog

; 5259 : 		{
; 5260 : 			fileSystem = SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETITEMDATA,
; 5261 : 				SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETCURSEL, 0, 0) , 0);

  04dc4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04dca	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04dd0	6a 00		 push	 0
  04dd2	6a 00		 push	 0
  04dd4	6a 00		 push	 0
  04dd6	68 47 01 00 00	 push	 327			; 00000147H
  04ddb	51		 push	 ecx
  04ddc	52		 push	 edx
  04ddd	ff d6		 call	 esi
  04ddf	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  04de5	50		 push	 eax
  04de6	ff d3		 call	 ebx
  04de8	50		 push	 eax
  04de9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04dee	68 50 01 00 00	 push	 336			; 00000150H
  04df3	68 05 04 00 00	 push	 1029			; 00000405H
  04df8	50		 push	 eax
  04df9	ff d6		 call	 esi
  04dfb	50		 push	 eax
  04dfc	ff d3		 call	 ebx
  04dfe	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem

; 5262 : 
; 5263 : 			return 1;

  04e03	e9 66 03 00 00	 jmp	 $LN681@PageDialog
$LN21@PageDialog:

; 5264 : 		}
; 5265 : 
; 5266 : 		if (lw == IDC_SHOW_KEYS && nCurPageNo == FORMAT_PAGE)

  04e08	b9 06 04 00 00	 mov	 ecx, 1030		; 00000406H
  04e0d	66 3b f9	 cmp	 di, cx
  04e10	0f 85 9b 00 00
	00		 jne	 $LN20@PageDialog
  04e16	83 f8 26	 cmp	 eax, 38			; 00000026H
  04e19	0f 85 40 01 00
	00		 jne	 $LN652@PageDialog

; 5267 : 		{
; 5268 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_SHOW_KEYS));

  04e1f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04e25	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04e2b	51		 push	 ecx
  04e2c	52		 push	 edx
  04e2d	ff d6		 call	 esi
  04e2f	50		 push	 eax
  04e30	e8 00 00 00 00	 call	 _IsButtonChecked
  04e35	83 c4 04	 add	 esp, 4
  04e38	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax

; 5269 : 
; 5270 : 			SetWindowText (GetDlgItem (hCurPage, IDC_RANDOM_BYTES), showKeys ? "                                                                              " : "********************************                                              ");

  04e3d	85 c0		 test	 eax, eax
  04e3f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  04e44	75 05		 jne	 SHORT $LN426@PageDialog
  04e46	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN426@PageDialog:
  04e4b	50		 push	 eax
  04e4c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04e51	68 fc 03 00 00	 push	 1020			; 000003fcH
  04e56	50		 push	 eax
  04e57	ff d6		 call	 esi
  04e59	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextA@8
  04e5f	50		 push	 eax
  04e60	ff d3		 call	 ebx

; 5271 : 			SetWindowText (GetDlgItem (hCurPage, IDC_HEADER_KEY), showKeys ? "" : "********************************                                              ");

  04e62	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  04e69	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  04e6e	75 05		 jne	 SHORT $LN428@PageDialog
  04e70	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN428@PageDialog:
  04e75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04e7b	50		 push	 eax
  04e7c	68 f9 03 00 00	 push	 1017			; 000003f9H
  04e81	51		 push	 ecx
  04e82	ff d6		 call	 esi
  04e84	50		 push	 eax
  04e85	ff d3		 call	 ebx

; 5272 : 			SetWindowText (GetDlgItem (hCurPage, IDC_DISK_KEY), showKeys ? "" : "********************************                                              ");

  04e87	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  04e8e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  04e93	75 05		 jne	 SHORT $LN430@PageDialog
  04e95	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN430@PageDialog:
  04e9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04ea0	50		 push	 eax
  04ea1	68 fb 03 00 00	 push	 1019			; 000003fbH
  04ea6	52		 push	 edx
  04ea7	ff d6		 call	 esi
  04ea9	50		 push	 eax
  04eaa	ff d3		 call	 ebx

; 5273 : 			return 1;

  04eac	e9 bd 02 00 00	 jmp	 $LN681@PageDialog
$LN20@PageDialog:

; 5274 : 		}
; 5275 : 		
; 5276 : 		if (lw == IDC_DISPLAY_POOL_CONTENTS 
; 5277 : 			&& (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE || nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE))

  04eb1	b9 da 13 00 00	 mov	 ecx, 5082		; 000013daH
  04eb6	66 3b f9	 cmp	 di, cx
  04eb9	75 3f		 jne	 SHORT $LN19@PageDialog
  04ebb	83 f8 17	 cmp	 eax, 23			; 00000017H
  04ebe	74 09		 je	 SHORT $LN18@PageDialog
  04ec0	83 f8 22	 cmp	 eax, 34			; 00000022H
  04ec3	0f 85 96 00 00
	00		 jne	 $LN652@PageDialog
$LN18@PageDialog:

; 5278 : 		{
; 5279 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_DISPLAY_POOL_CONTENTS));

  04ec9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04ecf	68 da 13 00 00	 push	 5082			; 000013daH
  04ed4	52		 push	 edx
  04ed5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  04edb	50		 push	 eax
  04edc	e8 00 00 00 00	 call	 _IsButtonChecked

; 5280 : 			DisplayRandPool (hRandPoolSys, showKeys);

  04ee1	50		 push	 eax
  04ee2	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax
  04ee7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  04eec	50		 push	 eax
  04eed	e8 00 00 00 00	 call	 _DisplayRandPool
  04ef2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5281 : 
; 5282 : 			return 1;

  04ef5	e9 74 02 00 00	 jmp	 $LN681@PageDialog
$LN19@PageDialog:

; 5283 : 		}
; 5284 : 
; 5285 : 		if (lw == IDC_DISPLAY_KEYS && nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  04efa	b9 40 04 00 00	 mov	 ecx, 1088		; 00000440H
  04eff	66 3b f9	 cmp	 di, cx
  04f02	75 5b		 jne	 SHORT $LN652@PageDialog
  04f04	83 f8 18	 cmp	 eax, 24			; 00000018H
  04f07	75 56		 jne	 SHORT $LN652@PageDialog

; 5286 : 		{
; 5287 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_DISPLAY_KEYS));

  04f09	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04f0f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04f15	51		 push	 ecx
  04f16	52		 push	 edx
  04f17	ff d6		 call	 esi
  04f19	50		 push	 eax
  04f1a	e8 00 00 00 00	 call	 _IsButtonChecked
  04f1f	83 c4 04	 add	 esp, 4

; 5288 : 
; 5289 : 			DisplayPortionsOfKeys (GetDlgItem (hwndDlg, IDC_HEADER_KEY), GetDlgItem (hwndDlg, IDC_DISK_KEY), HeaderKeyGUIView, MasterKeyGUIView, !showKeys);

  04f22	33 c9		 xor	 ecx, ecx
  04f24	85 c0		 test	 eax, eax
  04f26	0f 94 c1	 sete	 cl
  04f29	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax
  04f2e	51		 push	 ecx
  04f2f	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  04f34	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  04f39	68 fb 03 00 00	 push	 1019			; 000003fbH
  04f3e	53		 push	 ebx
  04f3f	ff d6		 call	 esi
  04f41	50		 push	 eax
  04f42	68 f9 03 00 00	 push	 1017			; 000003f9H
  04f47	53		 push	 ebx
  04f48	ff d6		 call	 esi
  04f4a	50		 push	 eax
  04f4b	e8 00 00 00 00	 call	 _DisplayPortionsOfKeys
  04f50	83 c4 14	 add	 esp, 20			; 00000014H

; 5290 : 			return 1;

  04f53	e9 16 02 00 00	 jmp	 $LN681@PageDialog
$LN651@PageDialog:
  04f58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04f5d	eb 06		 jmp	 SHORT $LN17@PageDialog
$LN652@PageDialog:
  04f5f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
$LN17@PageDialog:

; 5291 : 		}
; 5292 : 
; 5293 : 		if (nCurPageNo == SYSENC_RESCUE_DISK_CREATION_PAGE)

  04f65	83 f8 19	 cmp	 eax, 25			; 00000019H
  04f68	0f 85 df 00 00
	00		 jne	 $LN13@PageDialog

; 5294 : 		{
; 5295 : 			if (lw == IDC_BROWSE)

  04f6e	ba ed 03 00 00	 mov	 edx, 1005		; 000003edH
  04f73	66 3b fa	 cmp	 di, dx
  04f76	0f 85 7a 00 00
	00		 jne	 $LN15@PageDialog

; 5296 : 			{
; 5297 : 				char tmpszRescueDiskISO [TC_MAX_PATH+1];
; 5298 : 
; 5299 : 				if (!BrowseFiles (hwndDlg, "OPEN_TITLE", tmpszRescueDiskISO, FALSE, TRUE, NULL))

  04f7c	6a 00		 push	 0
  04f7e	6a 01		 push	 1
  04f80	6a 00		 push	 0
  04f82	8d 85 50 0e 01
	00		 lea	 eax, DWORD PTR _tmpszRescueDiskISO$134032[ebp]
  04f88	50		 push	 eax
  04f89	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  04f8e	53		 push	 ebx
  04f8f	e8 00 00 00 00	 call	 _BrowseFiles
  04f94	83 c4 18	 add	 esp, 24			; 00000018H
  04f97	85 c0		 test	 eax, eax

; 5300 : 					return 1;

  04f99	0f 84 cf 01 00
	00		 je	 $LN681@PageDialog

; 5301 : 
; 5302 : 				strcpy (szRescueDiskISO, tmpszRescueDiskISO);

  04f9f	33 c0		 xor	 eax, eax
$LL431@PageDialog:
  04fa1	8a 8c 05 50 0e
	01 00		 mov	 cl, BYTE PTR _tmpszRescueDiskISO$134032[ebp+eax]
  04fa8	88 88 00 00 00
	00		 mov	 BYTE PTR ?szRescueDiskISO@@3PADA[eax], cl
  04fae	40		 inc	 eax
  04faf	84 c9		 test	 cl, cl
  04fb1	75 ee		 jne	 SHORT $LL431@PageDialog

; 5303 : 
; 5304 : 				SetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO);

  04fb3	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  04fb8	68 e9 03 00 00	 push	 1001			; 000003e9H
  04fbd	53		 push	 ebx
  04fbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 5305 : 				EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLength (GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  04fc4	68 e9 03 00 00	 push	 1001			; 000003e9H
  04fc9	53		 push	 ebx
  04fca	ff d6		 call	 esi
  04fcc	50		 push	 eax
  04fcd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  04fd3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  04fd9	33 c9		 xor	 ecx, ecx
  04fdb	83 f8 01	 cmp	 eax, 1
  04fde	0f 9f c1	 setg	 cl
  04fe1	51		 push	 ecx
  04fe2	68 10 04 00 00	 push	 1040			; 00000410H
  04fe7	52		 push	 edx
  04fe8	ff d6		 call	 esi
  04fea	50		 push	 eax
  04feb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  04ff1	e9 78 01 00 00	 jmp	 $LN681@PageDialog
$LN15@PageDialog:

; 5306 : 				return 1;
; 5307 : 			}
; 5308 : 
; 5309 : 			if ( hw == EN_CHANGE )

  04ff6	b8 00 03 00 00	 mov	 eax, 768		; 00000300H
  04ffb	66 39 45 e8	 cmp	 WORD PTR _hw$[ebp], ax
  04fff	0f 85 11 01 00
	00		 jne	 $LN5@PageDialog

; 5310 : 			{
; 5311 : 				GetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO, sizeof(szRescueDiskISO));

  05005	68 05 01 00 00	 push	 261			; 00000105H
  0500a	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  0500f	68 e9 03 00 00	 push	 1001			; 000003e9H
  05014	53		 push	 ebx
  05015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 5312 : 				EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLength (GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  0501b	68 e9 03 00 00	 push	 1001			; 000003e9H
  05020	53		 push	 ebx
  05021	ff d6		 call	 esi
  05023	50		 push	 eax
  05024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  0502a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  05030	33 c9		 xor	 ecx, ecx
  05032	83 f8 01	 cmp	 eax, 1
  05035	0f 9f c1	 setg	 cl
  05038	51		 push	 ecx
  05039	68 10 04 00 00	 push	 1040			; 00000410H
  0503e	52		 push	 edx
  0503f	ff d6		 call	 esi
  05041	50		 push	 eax
  05042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  05048	e9 21 01 00 00	 jmp	 $LN681@PageDialog
$LN13@PageDialog:

; 5313 : 				return 1;
; 5314 : 			}
; 5315 : 		}
; 5316 : 
; 5317 : 		if (nCurPageNo == SYSENC_RESCUE_DISK_BURN_PAGE && lw == IDC_DOWNLOAD_CD_BURN_SOFTWARE)

  0504d	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  05050	75 43		 jne	 SHORT $LN12@PageDialog
  05052	b8 3a 04 00 00	 mov	 eax, 1082		; 0000043aH
  05057	66 3b f8	 cmp	 di, ax
  0505a	0f 85 b6 00 00
	00		 jne	 $LN5@PageDialog

; 5318 : 		{
; 5319 : 			if (IsWindowsIsoBurnerAvailable())

  05060	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  05065	85 c0		 test	 eax, eax
  05067	74 13		 je	 SHORT $LN11@PageDialog

; 5320 : 				LaunchWindowsIsoBurner (hwndDlg, szRescueDiskISO);

  05069	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  0506e	53		 push	 ebx
  0506f	e8 00 00 00 00	 call	 _LaunchWindowsIsoBurner
  05074	83 c4 08	 add	 esp, 8

; 5321 : 			else

  05077	e9 f2 00 00 00	 jmp	 $LN681@PageDialog
$LN11@PageDialog:

; 5322 : 				Applink ("isoburning", TRUE, "");

  0507c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  05081	6a 01		 push	 1
  05083	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EDOIAICP@isoburning?$AA@
  05088	e8 00 00 00 00	 call	 _Applink
  0508d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5323 : 
; 5324 : 			return 1;

  05090	e9 d9 00 00 00	 jmp	 $LN681@PageDialog
$LN12@PageDialog:

; 5325 : 		}
; 5326 : 
; 5327 : 		if ((nCurPageNo == SYSENC_WIPE_MODE_PAGE 
; 5328 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_WIPE_MODE_PAGE 
; 5329 : 			|| nCurPageNo == DEVICE_WIPE_MODE_PAGE)
; 5330 : 			&& hw == CBN_SELCHANGE)

  05095	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  05098	74 0a		 je	 SHORT $LN8@PageDialog
  0509a	83 f8 23	 cmp	 eax, 35			; 00000023H
  0509d	74 05		 je	 SHORT $LN8@PageDialog
  0509f	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  050a2	75 4a		 jne	 SHORT $LN9@PageDialog
$LN8@PageDialog:
  050a4	66 83 7d e8 01	 cmp	 WORD PTR _hw$[ebp], 1
  050a9	75 43		 jne	 SHORT $LN9@PageDialog

; 5331 : 		{
; 5332 : 			nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 5333 : 				CB_GETITEMDATA, 
; 5334 : 				SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 5335 : 				0);

  050ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  050b1	6a 00		 push	 0
  050b3	6a 00		 push	 0
  050b5	6a 00		 push	 0
  050b7	68 47 01 00 00	 push	 327			; 00000147H
  050bc	68 3d 04 00 00	 push	 1085			; 0000043dH
  050c1	51		 push	 ecx
  050c2	ff d6		 call	 esi
  050c4	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  050ca	50		 push	 eax
  050cb	ff d3		 call	 ebx
  050cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  050d3	50		 push	 eax
  050d4	68 50 01 00 00	 push	 336			; 00000150H
  050d9	68 3d 04 00 00	 push	 1085			; 0000043dH
  050de	52		 push	 edx
  050df	ff d6		 call	 esi
  050e1	50		 push	 eax
  050e2	ff d3		 call	 ebx
  050e4	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax
  050e9	e9 80 00 00 00	 jmp	 $LN681@PageDialog
$LN9@PageDialog:

; 5336 : 
; 5337 : 			return 1;
; 5338 : 		}
; 5339 : 
; 5340 : 		if (nCurPageNo == DEVICE_WIPE_PAGE)

  050ee	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  050f1	75 23		 jne	 SHORT $LN5@PageDialog

; 5341 : 		{
; 5342 : 			switch (lw)

  050f3	b8 f8 03 00 00	 mov	 eax, 1016		; 000003f8H
  050f8	66 3b f8	 cmp	 di, ax
  050fb	75 19		 jne	 SHORT $LN5@PageDialog

; 5343 : 			{
; 5344 : 			case IDC_ABORT_BUTTON:
; 5345 : 
; 5346 : 				if (AskWarnNoYes ("CONFIRM_WIPE_ABORT") == IDYES)

  050fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@
  05102	e8 00 00 00 00	 call	 _AskWarnNoYes
  05107	83 c4 04	 add	 esp, 4
  0510a	83 f8 06	 cmp	 eax, 6
  0510d	75 5f		 jne	 SHORT $LN681@PageDialog

; 5347 : 					WipeAbort();

  0510f	e8 00 00 00 00	 call	 _WipeAbort

; 5348 : 
; 5349 : 				return 1;

  05114	eb 58		 jmp	 SHORT $LN681@PageDialog
$LN5@PageDialog:

; 5350 : 			}
; 5351 : 		}
; 5352 : 
; 5353 : 		if (lw == IDC_NO_HISTORY)

  05116	b9 f4 03 00 00	 mov	 ecx, 1012		; 000003f4H
  0511b	66 3b f9	 cmp	 di, cx
  0511e	0f 85 1c b6 ff
	ff		 jne	 $LN446@PageDialog

; 5354 : 		{
; 5355 : 			if (!(bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY))))

  05124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0512a	51		 push	 ecx
  0512b	52		 push	 edx
  0512c	ff d6		 call	 esi
  0512e	50		 push	 eax
  0512f	e8 00 00 00 00	 call	 _IsButtonChecked
  05134	83 c4 04	 add	 esp, 4
  05137	f7 d8		 neg	 eax
  05139	1b c0		 sbb	 eax, eax
  0513b	83 c0 01	 add	 eax, 1
  0513e	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  05143	75 29		 jne	 SHORT $LN681@PageDialog

; 5356 : 				ClearHistory (GetDlgItem (hCurPage, IDC_COMBO_BOX));

  05145	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0514a	68 ea 03 00 00	 push	 1002			; 000003eaH
  0514f	50		 push	 eax
  05150	ff d6		 call	 esi
  05152	50		 push	 eax
  05153	e8 00 00 00 00	 call	 _ClearHistory

; 5357 : 
; 5358 : 			return 1;

  05158	eb 11		 jmp	 SHORT $LN696@PageDialog
$LN432@PageDialog:

; 3298 : 
; 3299 : 	hCurPage = hwndDlg;
; 3300 : 
; 3301 : 	switch (uMsg)

  0515a	3d 31 81 00 00	 cmp	 eax, 33073		; 00008131H

; 5359 : 		}
; 5360 : 
; 5361 : 		return 0;
; 5362 : 	}
; 5363 : 
; 5364 : 	return 0;

  0515f	0f 85 db b5 ff
	ff		 jne	 $LN446@PageDialog
  05165	53		 push	 ebx
  05166	e8 00 00 00 00	 call	 _AfterSysEncProgressWMInitTasks
$LN696@PageDialog:

; 4627 : 
; 4628 : 	case TC_APPMSG_PERFORM_POST_SYSENC_WMINIT_TASKS:
; 4629 : 		AfterSysEncProgressWMInitTasks (hwndDlg);

  0516b	83 c4 04	 add	 esp, 4
$LN681@PageDialog:

; 4630 : 		return 1;

  0516e	b8 01 00 00 00	 mov	 eax, 1
$LN333@PageDialog:

; 5365 : }

  05173	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  05176	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0517d	59		 pop	 ecx
  0517e	5f		 pop	 edi
  0517f	5e		 pop	 esi
  05180	5b		 pop	 ebx
  05181	8b 8d 0c 12 01
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  05187	33 cd		 xor	 ecx, ebp
  05189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0518e	81 c5 10 12 01
	00		 add	 ebp, 70160		; 00011210H
  05194	8b e5		 mov	 esp, ebp
  05196	5d		 pop	 ebp
  05197	c2 10 00	 ret	 16			; 00000010H
  0519a	8b ff		 npad	 2
$LN715@PageDialog:
  0519c	00 00 00 00	 DD	 $LN327@PageDialog
  051a0	00 00 00 00	 DD	 $LN326@PageDialog
  051a4	00 00 00 00	 DD	 $LN325@PageDialog
  051a8	00 00 00 00	 DD	 $LN324@PageDialog
  051ac	00 00 00 00	 DD	 $LN323@PageDialog
  051b0	00 00 00 00	 DD	 $LN322@PageDialog
  051b4	00 00 00 00	 DD	 $LN315@PageDialog
  051b8	00 00 00 00	 DD	 $LN314@PageDialog
  051bc	00 00 00 00	 DD	 $LN313@PageDialog
  051c0	00 00 00 00	 DD	 $LN308@PageDialog
  051c4	00 00 00 00	 DD	 $LN307@PageDialog
  051c8	00 00 00 00	 DD	 $LN306@PageDialog
  051cc	00 00 00 00	 DD	 $LN305@PageDialog
  051d0	00 00 00 00	 DD	 $LN304@PageDialog
  051d4	00 00 00 00	 DD	 $LN303@PageDialog
  051d8	00 00 00 00	 DD	 $LN298@PageDialog
  051dc	00 00 00 00	 DD	 $LN295@PageDialog
  051e0	00 00 00 00	 DD	 $LN292@PageDialog
  051e4	00 00 00 00	 DD	 $LN287@PageDialog
  051e8	00 00 00 00	 DD	 $LN274@PageDialog
  051ec	00 00 00 00	 DD	 $LN256@PageDialog
  051f0	00 00 00 00	 DD	 $LN255@PageDialog
  051f4	00 00 00 00	 DD	 $LN240@PageDialog
  051f8	00 00 00 00	 DD	 $LN236@PageDialog
  051fc	00 00 00 00	 DD	 $LN235@PageDialog
  05200	00 00 00 00	 DD	 $LN234@PageDialog
  05204	00 00 00 00	 DD	 $LN233@PageDialog
  05208	00 00 00 00	 DD	 $LN230@PageDialog
  0520c	00 00 00 00	 DD	 $LN229@PageDialog
  05210	00 00 00 00	 DD	 $LN227@PageDialog
  05214	00 00 00 00	 DD	 $LN223@PageDialog
  05218	00 00 00 00	 DD	 $LN222@PageDialog
  0521c	00 00 00 00	 DD	 $LN256@PageDialog
  05220	00 00 00 00	 DD	 $LN216@PageDialog
  05224	00 00 00 00	 DD	 $LN236@PageDialog
  05228	00 00 00 00	 DD	 $LN229@PageDialog
  0522c	00 00 00 00	 DD	 $LN209@PageDialog
  05230	00 00 00 00	 DD	 $LN206@PageDialog
  05234	00 00 00 00	 DD	 $LN205@PageDialog
  05238	00 00 00 00	 DD	 $LN177@PageDialog
  0523c	00 00 00 00	 DD	 $LN168@PageDialog
  05240	00 00 00 00	 DD	 $LN165@PageDialog
  05244	00 00 00 00	 DD	 $LN164@PageDialog
  05248	00 00 00 00	 DD	 $LN160@PageDialog
$LN716@PageDialog:
  0524c	00 00 00 00	 DD	 $LN151@PageDialog
  05250	00 00 00 00	 DD	 $LN150@PageDialog
  05254	00 00 00 00	 DD	 $LN149@PageDialog
  05258	00 00 00 00	 DD	 $LN147@PageDialog
  0525c	00 00 00 00	 DD	 $LN148@PageDialog
  05260	00 00 00 00	 DD	 $LN140@PageDialog
$LN598@PageDialog:
  05264	00		 DB	 0
  05265	01		 DB	 1
  05266	02		 DB	 2
  05267	05		 DB	 5
  05268	05		 DB	 5
  05269	05		 DB	 5
  0526a	05		 DB	 5
  0526b	05		 DB	 5
  0526c	05		 DB	 5
  0526d	05		 DB	 5
  0526e	05		 DB	 5
  0526f	05		 DB	 5
  05270	03		 DB	 3
  05271	05		 DB	 5
  05272	04		 DB	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_PageDialogProc@16$7:
  00000	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133476[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$_PageDialogProc@16$8:
  0000b	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133703[ebp]
  00011	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$_PageDialogProc@16$10:
  00016	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T165702[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_PageDialogProc@16:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a 28 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-984]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 8a 18 12 01
	00		 mov	 ecx, DWORD PTR [edx+70168]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_PageDialogProc@16
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_PageDialogProc@16 ENDP
PUBLIC	?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ; std::allocator<HostDevice>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z PROC ; std::allocator<HostDevice>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ENDP ; std::allocator<HostDevice>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T166050 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$166056 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@2:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$166056[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T166050[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@2
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop@2:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop@2
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop@2:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@2:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN35@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$166056[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T166050[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_CheckCapsLock:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__MapDialogRect@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	_bHyperLinkBeingTracked:DWORD
EXTRN	__imp__DestroyWindow@4:PROC
;	COMDAT ??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	SEGMENT
??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@ DB 'HIDDEN_OS_PRE_CI'
	DB	'PHER_WARNING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@
CONST	SEGMENT
??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@ DB 'PASSWORD_HIDDEN_OS_NO'
	DB	'TE', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadPage
_TEXT	SEGMENT
_rD$ = -104						; size = 16
_rW$ = -88						; size = 16
_tmp$132584 = -72					; size = 65
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_nPageNo$ = 12						; size = 4
_LoadPage PROC						; COMDAT

; 2580 : {

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 64	 mov	 DWORD PTR __$ArrayPad$[esp+104], eax

; 2581 : 	RECT rD, rW;
; 2582 : 
; 2583 : 	nLastPageNo = nCurPageNo;

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00013	53		 push	 ebx
  00014	55		 push	 ebp
  00015	56		 push	 esi
  00016	8b 74 24 78	 mov	 esi, DWORD PTR _hwndDlg$[esp+112]

; 2584 : 
; 2585 : 	if (hCurPage != NULL)

  0001a	33 db		 xor	 ebx, ebx
  0001c	57		 push	 edi
  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00022	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00028	74 59		 je	 SHORT $LN62@LoadPage

; 2586 : 	{
; 2587 : 		// WARNING: nCurPageNo must be set to a non-existent ID here before wiping the password fields below in
; 2588 : 		// this function, etc. Otherwise, such actions (SetWindowText) would invoke the EN_CHANGE handlers, which 
; 2589 : 		// would, if keyfiles were applied, e.g. use strlen() on a buffer full of random data, in most cases 
; 2590 : 		// not null-terminated.
; 2591 : 		nCurPageNo = -1;

  0002a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo

; 2592 : 
; 2593 : 
; 2594 : 		// Place here any actions that need to be performed at the latest possible time when leaving a wizard page
; 2595 : 		// (i.e. right before "destroying" the page). Also, code that needs to be executed both on IDC_NEXT and
; 2596 : 		// on IDC_PREV can be placed here so as to avoid code doubling. 
; 2597 : 
; 2598 : 		switch (nLastPageNo)

  00034	83 f8 15	 cmp	 eax, 21			; 00000015H
  00037	75 37		 jne	 SHORT $LN50@LoadPage

; 2599 : 		{
; 2600 : 		case PASSWORD_PAGE:
; 2601 : 			{
; 2602 : 				char tmp[MAX_PASSWORD+1];
; 2603 : 
; 2604 : 				// Attempt to wipe passwords stored in the input field buffers. This is performed here (and 
; 2605 : 				// not in the IDC_PREV or IDC_NEXT sections) in order to prevent certain race conditions
; 2606 : 				// when keyfiles are used.
; 2607 : 				memset (tmp, 'X', MAX_PASSWORD);

  00039	6a 40		 push	 64			; 00000040H
  0003b	8d 44 24 34	 lea	 eax, DWORD PTR _tmp$132584[esp+124]
  0003f	6a 58		 push	 88			; 00000058H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset

; 2608 : 				tmp [MAX_PASSWORD] = 0;
; 2609 : 				SetWindowText (hPasswordInputField, tmp);

  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0004d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$132584[esp+120]
  0005a	51		 push	 ecx
  0005b	52		 push	 edx
  0005c	88 5c 24 78	 mov	 BYTE PTR _tmp$132584[esp+192], bl
  00060	ff d7		 call	 edi

; 2610 : 				SetWindowText (hVerifyPasswordInputField, tmp);

  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00068	8d 44 24 30	 lea	 eax, DWORD PTR _tmp$132584[esp+120]
  0006c	50		 push	 eax
  0006d	51		 push	 ecx
  0006e	ff d7		 call	 edi
$LN50@LoadPage:

; 2611 : 			}
; 2612 : 			break;
; 2613 : 		}
; 2614 : 
; 2615 : 		DestroyWindow (hCurPage);

  00070	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00076	52		 push	 edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 2616 : 		hCurPage = NULL;

  0007d	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN62@LoadPage:

; 2617 : 	}
; 2618 : 
; 2619 : 	// This prevents the mouse pointer from remaining as the "hand" cursor when the user presses Enter
; 2620 : 	// while hovering over a hyperlink.
; 2621 : 	bHyperLinkBeingTracked = FALSE;

  00083	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx

; 2622 : 	NormalCursor();

  00089	e8 00 00 00 00	 call	 _NormalCursor

; 2623 : 
; 2624 : 	GetWindowRect (GetDlgItem (hwndDlg, IDC_POS_BOX), &rW);

  0008e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00094	8d 44 24 20	 lea	 eax, DWORD PTR _rW$[esp+120]
  00098	50		 push	 eax
  00099	68 23 04 00 00	 push	 1059			; 00000423H
  0009e	56		 push	 esi
  0009f	ff d7		 call	 edi
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2625 : 
; 2626 : 
; 2627 : 	nCurPageNo = nPageNo;

  000a8	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR _nPageNo$[esp+116]
  000af	89 2d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebp ; nCurPageNo

; 2628 : 
; 2629 : 
; 2630 : 	switch (nPageNo)

  000b5	83 fd 2b	 cmp	 ebp, 43			; 0000002bH
  000b8	0f 87 af 02 00
	00		 ja	 $LN47@LoadPage
  000be	ff 24 ad 00 00
	00 00		 jmp	 DWORD PTR $LN66@LoadPage[ebp*4]
$LN46@LoadPage:

; 2631 : 	{
; 2632 : 	case INTRO_PAGE:
; 2633 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INTRO_PAGE_DLG), hwndDlg,
; 2634 : 					 (DLGPROC) PageDialogProc);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000cb	53		 push	 ebx
  000cc	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000d1	56		 push	 esi
  000d2	6a 6b		 push	 107			; 0000006bH
  000d4	51		 push	 ecx

; 2635 : 		break;

  000d5	e9 88 02 00 00	 jmp	 $LN63@LoadPage
$LN45@LoadPage:

; 2636 : 
; 2637 : 	case SYSENC_TYPE_PAGE:
; 2638 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_TYPE_PAGE_DLG), hwndDlg,
; 2639 : 					 (DLGPROC) PageDialogProc);

  000da	53		 push	 ebx
  000db	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000e0	56		 push	 esi
  000e1	6a 7e		 push	 126			; 0000007eH

; 2640 : 		break;

  000e3	e9 73 02 00 00	 jmp	 $LN64@LoadPage
$LN44@LoadPage:

; 2641 : 
; 2642 : 	case SYSENC_HIDDEN_OS_REQ_CHECK_PAGE:
; 2643 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_DLG), hwndDlg,
; 2644 : 					 (DLGPROC) PageDialogProc);

  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  000ed	53		 push	 ebx
  000ee	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000f3	56		 push	 esi
  000f4	6a 7f		 push	 127			; 0000007fH
  000f6	50		 push	 eax

; 2645 : 		break;

  000f7	e9 66 02 00 00	 jmp	 $LN63@LoadPage
$LN43@LoadPage:

; 2646 : 
; 2647 : 	case SYSENC_SPAN_PAGE:
; 2648 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_SPAN_PAGE_DLG), hwndDlg,
; 2649 : 					 (DLGPROC) PageDialogProc);

  000fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00102	53		 push	 ebx
  00103	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00108	56		 push	 esi
  00109	6a 73		 push	 115			; 00000073H
  0010b	51		 push	 ecx

; 2650 : 		break;

  0010c	e9 51 02 00 00	 jmp	 $LN63@LoadPage
$LN42@LoadPage:

; 2651 : 
; 2652 : 	case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 2653 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2654 : 					 (DLGPROC) PageDialogProc);

  00111	53		 push	 ebx
  00112	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00117	56		 push	 esi
  00118	6a 7c		 push	 124			; 0000007cH

; 2655 : 		break;

  0011a	e9 3c 02 00 00	 jmp	 $LN64@LoadPage
$LN41@LoadPage:

; 2656 : 
; 2657 : 	case SYSENC_DRIVE_ANALYSIS_PAGE:
; 2658 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_DRIVE_ANALYSIS_PAGE_DLG), hwndDlg,
; 2659 : 					 (DLGPROC) PageDialogProc);

  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00124	53		 push	 ebx
  00125	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0012a	56		 push	 esi
  0012b	6a 7d		 push	 125			; 0000007dH
  0012d	50		 push	 eax

; 2660 : 		break;

  0012e	e9 2f 02 00 00	 jmp	 $LN63@LoadPage
$LN40@LoadPage:

; 2661 : 
; 2662 : 	case SYSENC_MULTI_BOOT_MODE_PAGE:
; 2663 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_MULTI_BOOT_MODE_PAGE_DLG), hwndDlg,
; 2664 : 					 (DLGPROC) PageDialogProc);

  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00139	53		 push	 ebx
  0013a	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0013f	56		 push	 esi
  00140	6a 77		 push	 119			; 00000077H
  00142	51		 push	 ecx

; 2665 : 		break;

  00143	e9 1a 02 00 00	 jmp	 $LN63@LoadPage
$LN38@LoadPage:

; 2666 : 
; 2667 : 	case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 2668 : 	case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 2669 : 	case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 2670 : 	case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 2671 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2672 : 					 (DLGPROC) PageDialogProc);
; 2673 : 		break;
; 2674 : 
; 2675 : 	case SYSENC_MULTI_BOOT_OUTCOME_PAGE:
; 2676 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2677 : 					 (DLGPROC) PageDialogProc);

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0014d	53		 push	 ebx
  0014e	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00153	56		 push	 esi
  00154	6a 6c		 push	 108			; 0000006cH
  00156	50		 push	 eax

; 2678 : 		break;

  00157	e9 06 02 00 00	 jmp	 $LN63@LoadPage
$LN37@LoadPage:

; 2679 : 
; 2680 : 	case VOLUME_TYPE_PAGE:
; 2681 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_VOLUME_TYPE_PAGE_DLG), hwndDlg,
; 2682 : 					 (DLGPROC) PageDialogProc);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00162	53		 push	 ebx
  00163	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00168	56		 push	 esi
  00169	6a 71		 push	 113			; 00000071H
  0016b	51		 push	 ecx

; 2683 : 		break;

  0016c	e9 f1 01 00 00	 jmp	 $LN63@LoadPage
$LN36@LoadPage:

; 2684 : 
; 2685 : 	case HIDDEN_VOL_WIZARD_MODE_PAGE:
; 2686 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_HIDDEN_VOL_WIZARD_MODE_PAGE_DLG), hwndDlg,
; 2687 : 					 (DLGPROC) PageDialogProc);

  00171	53		 push	 ebx
  00172	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00177	56		 push	 esi
  00178	6a 6e		 push	 110			; 0000006eH

; 2688 : 		break;

  0017a	e9 dc 01 00 00	 jmp	 $LN64@LoadPage
$LN35@LoadPage:

; 2689 : 
; 2690 : 	case VOLUME_LOCATION_PAGE:
; 2691 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_VOLUME_LOCATION_PAGE_DLG), hwndDlg,
; 2692 : 					 (DLGPROC) PageDialogProc);

  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00184	53		 push	 ebx
  00185	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0018a	56		 push	 esi
  0018b	6a 69		 push	 105			; 00000069H
  0018d	50		 push	 eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 2693 : 
; 2694 : 		EnableWindow (GetDlgItem(hCurPage, IDC_NO_HISTORY), !bHistoryCmdLine);

  00194	33 c9		 xor	 ecx, ecx
  00196	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bHistoryCmdLine@@3HA, ebx ; bHistoryCmdLine
  0019c	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  001a1	0f 94 c1	 sete	 cl
  001a4	51		 push	 ecx
  001a5	68 f4 03 00 00	 push	 1012			; 000003f4H
  001aa	50		 push	 eax
  001ab	ff d7		 call	 edi
  001ad	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  001b3	50		 push	 eax
  001b4	ff d5		 call	 ebp

; 2695 : 
; 2696 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), 
; 2697 : 			GetWindowTextLength (GetDlgItem (hCurPage, IDC_COMBO_BOX)) > 0);

  001b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001bc	68 ea 03 00 00	 push	 1002			; 000003eaH
  001c1	52		 push	 edx
  001c2	ff d7		 call	 edi
  001c4	50		 push	 eax
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  001cb	33 c9		 xor	 ecx, ecx
  001cd	85 c0		 test	 eax, eax
  001cf	0f 9f c1	 setg	 cl
  001d2	51		 push	 ecx
  001d3	68 10 04 00 00	 push	 1040			; 00000410H
  001d8	56		 push	 esi
  001d9	ff d7		 call	 edi
  001db	50		 push	 eax
  001dc	ff d5		 call	 ebp

; 2698 : 
; 2699 : 		break;

  001de	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR _nPageNo$[esp+116]
  001e5	e9 83 01 00 00	 jmp	 $LN47@LoadPage
$LN34@LoadPage:

; 2700 : 
; 2701 : 	case DEVICE_TRANSFORM_MODE_PAGE:
; 2702 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_TRANSFORM_MODE_DLG), hwndDlg,
; 2703 : 					 (DLGPROC) PageDialogProc);

  001ea	53		 push	 ebx
  001eb	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  001f0	56		 push	 esi
  001f1	68 82 00 00 00	 push	 130			; 00000082H

; 2704 : 		break;

  001f6	e9 60 01 00 00	 jmp	 $LN64@LoadPage
$LN32@LoadPage:

; 2705 : 	case HIDDEN_VOL_HOST_PRE_CIPHER_PAGE:
; 2706 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2707 : 					 (DLGPROC) PageDialogProc);
; 2708 : 		break;
; 2709 : 	case HIDDEN_VOL_PRE_CIPHER_PAGE:
; 2710 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2711 : 					 (DLGPROC) PageDialogProc);

  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00201	53		 push	 ebx
  00202	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00207	56		 push	 esi
  00208	6a 6c		 push	 108			; 0000006cH
  0020a	51		 push	 ecx

; 2712 : 		break;

  0020b	e9 52 01 00 00	 jmp	 $LN63@LoadPage
$LN31@LoadPage:

; 2713 : 	case CIPHER_PAGE:
; 2714 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_CIPHER_PAGE_DLG), hwndDlg,
; 2715 : 					 (DLGPROC) PageDialogProc);

  00210	53		 push	 ebx
  00211	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00216	56		 push	 esi
  00217	6a 66		 push	 102			; 00000066H

; 2716 : 		break;

  00219	e9 3d 01 00 00	 jmp	 $LN64@LoadPage
$LN30@LoadPage:

; 2717 : 	case SIZE_PAGE:
; 2718 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SIZE_PAGE_DLG), hwndDlg,
; 2719 : 					 (DLGPROC) PageDialogProc);

  0021e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00223	53		 push	 ebx
  00224	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00229	56		 push	 esi
  0022a	6a 67		 push	 103			; 00000067H
  0022c	50		 push	 eax

; 2720 : 		break;

  0022d	e9 30 01 00 00	 jmp	 $LN63@LoadPage
$LN29@LoadPage:

; 2721 : 	case HIDDEN_VOL_HOST_PASSWORD_PAGE:
; 2722 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_ENTRY_PAGE_DLG), hwndDlg,
; 2723 : 					 (DLGPROC) PageDialogProc);

  00232	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00238	53		 push	 ebx
  00239	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0023e	56		 push	 esi
  0023f	6a 6f		 push	 111			; 0000006fH
  00241	51		 push	 ecx

; 2724 : 		break;

  00242	e9 1b 01 00 00	 jmp	 $LN63@LoadPage
$LN28@LoadPage:

; 2725 : 	case PASSWORD_PAGE:
; 2726 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_PAGE_DLG), hwndDlg,
; 2727 : 					 (DLGPROC) PageDialogProc);

  00247	53		 push	 ebx
  00248	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0024d	56		 push	 esi
  0024e	6a 68		 push	 104			; 00000068H

; 2728 : 		break;

  00250	e9 06 01 00 00	 jmp	 $LN64@LoadPage
$LN27@LoadPage:

; 2729 : 	case FILESYS_PAGE:
; 2730 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2731 : 					 (DLGPROC) PageDialogProc);

  00255	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0025a	53		 push	 ebx
  0025b	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00260	56		 push	 esi
  00261	6a 7c		 push	 124			; 0000007cH
  00263	50		 push	 eax

; 2732 : 		break;

  00264	e9 f9 00 00 00	 jmp	 $LN63@LoadPage
$LN26@LoadPage:

; 2733 : 	case SYSENC_COLLECTING_RANDOM_DATA_PAGE:
; 2734 : 	case NONSYS_INPLACE_ENC_RAND_DATA_PAGE:
; 2735 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_COLLECTING_RANDOM_DATA_DLG), hwndDlg,
; 2736 : 					 (DLGPROC) PageDialogProc);

  00269	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0026f	53		 push	 ebx
  00270	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00275	56		 push	 esi
  00276	6a 76		 push	 118			; 00000076H
  00278	51		 push	 ecx

; 2737 : 		break;

  00279	e9 e4 00 00 00	 jmp	 $LN63@LoadPage
$LN25@LoadPage:

; 2738 : 	case SYSENC_KEYS_GEN_PAGE:
; 2739 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_KEYS_GEN_PAGE_DLG), hwndDlg,
; 2740 : 					 (DLGPROC) PageDialogProc);

  0027e	53		 push	 ebx
  0027f	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00284	56		 push	 esi
  00285	6a 7b		 push	 123			; 0000007bH

; 2741 : 		break;

  00287	e9 cf 00 00 00	 jmp	 $LN64@LoadPage
$LN24@LoadPage:

; 2742 : 	case SYSENC_RESCUE_DISK_CREATION_PAGE:
; 2743 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_RESCUE_DISK_CREATION_DLG), hwndDlg,
; 2744 : 					 (DLGPROC) PageDialogProc);

  0028c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00291	53		 push	 ebx
  00292	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00297	56		 push	 esi
  00298	6a 75		 push	 117			; 00000075H
  0029a	50		 push	 eax

; 2745 : 		break;

  0029b	e9 c2 00 00 00	 jmp	 $LN63@LoadPage
$LN23@LoadPage:

; 2746 : 	case SYSENC_RESCUE_DISK_BURN_PAGE:
; 2747 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_RESCUE_DISK_BURN_PAGE_DLG), hwndDlg,
; 2748 : 			(DLGPROC) PageDialogProc);

  002a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  002a6	53		 push	 ebx
  002a7	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002ac	56		 push	 esi
  002ad	6a 78		 push	 120			; 00000078H
  002af	51		 push	 ecx

; 2749 : 		break;

  002b0	e9 ad 00 00 00	 jmp	 $LN63@LoadPage
$LN22@LoadPage:

; 2750 : 	case SYSENC_RESCUE_DISK_VERIFIED_PAGE:
; 2751 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2752 : 					 (DLGPROC) PageDialogProc);

  002b5	53		 push	 ebx
  002b6	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002bb	56		 push	 esi
  002bc	6a 6c		 push	 108			; 0000006cH

; 2753 : 		break;

  002be	e9 98 00 00 00	 jmp	 $LN64@LoadPage
$LN21@LoadPage:

; 2754 : 	case SYSENC_WIPE_MODE_PAGE:
; 2755 : 	case NONSYS_INPLACE_ENC_WIPE_MODE_PAGE:
; 2756 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_WIPE_MODE_PAGE_DLG), hwndDlg,
; 2757 : 			(DLGPROC) PageDialogProc);

  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  002c8	53		 push	 ebx
  002c9	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002ce	56		 push	 esi
  002cf	6a 79		 push	 121			; 00000079H
  002d1	50		 push	 eax

; 2758 : 		break;

  002d2	e9 8b 00 00 00	 jmp	 $LN63@LoadPage
$LN18@LoadPage:

; 2759 : 	case SYSENC_PRETEST_INFO_PAGE:
; 2760 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2761 : 					 (DLGPROC) PageDialogProc);
; 2762 : 		break;
; 2763 : 	case SYSENC_PRETEST_RESULT_PAGE:
; 2764 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2765 : 					 (DLGPROC) PageDialogProc);
; 2766 : 		break;
; 2767 : 	case SYSENC_ENCRYPTION_PAGE:
; 2768 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INPLACE_ENCRYPTION_PAGE_DLG), hwndDlg,
; 2769 : 			(DLGPROC) PageDialogProc);

  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  002dc	53		 push	 ebx
  002dd	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002e2	56		 push	 esi
  002e3	6a 7a		 push	 122			; 0000007aH
  002e5	50		 push	 eax

; 2770 : 		break;

  002e6	eb 7a		 jmp	 SHORT $LN63@LoadPage
$LN16@LoadPage:

; 2771 : 
; 2772 : 	case NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE:
; 2773 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_ENTRY_PAGE_DLG), hwndDlg,
; 2774 : 			(DLGPROC) PageDialogProc);
; 2775 : 		break;
; 2776 : 
; 2777 : 	case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 2778 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_EXPANDED_LIST_SELECT_PAGE_DLG), hwndDlg,
; 2779 : 			(DLGPROC) PageDialogProc);

  002e8	53		 push	 ebx
  002e9	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002ee	56		 push	 esi
  002ef	68 83 00 00 00	 push	 131			; 00000083H

; 2780 : 		break;

  002f4	eb 65		 jmp	 SHORT $LN64@LoadPage
$LN13@LoadPage:

; 2781 : 
; 2782 : 	case NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 2783 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INPLACE_ENCRYPTION_PAGE_DLG), hwndDlg,
; 2784 : 			(DLGPROC) PageDialogProc);
; 2785 : 		break;
; 2786 : 
; 2787 : 	case NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE:
; 2788 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2789 : 					 (DLGPROC) PageDialogProc);
; 2790 : 		break;
; 2791 : 
; 2792 : 	case FORMAT_PAGE:
; 2793 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_FORMAT_PAGE_DLG), hwndDlg,
; 2794 : 					 (DLGPROC) PageDialogProc);

  002f6	53		 push	 ebx
  002f7	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002fc	56		 push	 esi
  002fd	6a 6a		 push	 106			; 0000006aH

; 2795 : 		break;

  002ff	eb 5a		 jmp	 SHORT $LN64@LoadPage
$LN12@LoadPage:

; 2796 : 	case FORMAT_FINISHED_PAGE:
; 2797 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW ((bHiddenVol && !bHiddenVolHost && !bHiddenVolFinished) ? IDD_HIDVOL_HOST_FILL_PAGE_DLG : IDD_INFO_PAGE_DLG), hwndDlg,
; 2798 : 					 (DLGPROC) PageDialogProc);

  00301	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00306	85 c0		 test	 eax, eax
  00308	74 17		 je	 SHORT $LN55@LoadPage
  0030a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00310	85 c9		 test	 ecx, ecx
  00312	75 0d		 jne	 SHORT $LN55@LoadPage
  00314	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0031a	8d 41 6d	 lea	 eax, DWORD PTR [ecx+109]
  0031d	85 d2		 test	 edx, edx
  0031f	74 05		 je	 SHORT $LN56@LoadPage
$LN55@LoadPage:
  00321	b8 6c 00 00 00	 mov	 eax, 108		; 0000006cH
$LN56@LoadPage:
  00326	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0032c	53		 push	 ebx
  0032d	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00332	0f b7 c0	 movzx	 eax, ax
  00335	56		 push	 esi
  00336	50		 push	 eax
  00337	51		 push	 ecx

; 2799 : 		break;

  00338	eb 28		 jmp	 SHORT $LN63@LoadPage
$LN9@LoadPage:

; 2800 : 
; 2801 : 	case SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE:
; 2802 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);
; 2803 : 		break;
; 2804 : 
; 2805 : 	case SYSENC_HIDDEN_OS_WIPE_INFO_PAGE:
; 2806 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);
; 2807 : 		break;
; 2808 : 
; 2809 : 	case DEVICE_WIPE_MODE_PAGE:
; 2810 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_WIPE_MODE_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);

  0033a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00340	53		 push	 ebx
  00341	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00346	56		 push	 esi
  00347	68 81 00 00 00	 push	 129			; 00000081H
  0034c	51		 push	 ecx

; 2811 : 		break;

  0034d	eb 13		 jmp	 SHORT $LN63@LoadPage
$LN8@LoadPage:

; 2812 : 
; 2813 : 	case DEVICE_WIPE_PAGE:
; 2814 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_WIPE_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);

  0034f	53		 push	 ebx
  00350	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00355	56		 push	 esi
  00356	68 80 00 00 00	 push	 128			; 00000080H
$LN64@LoadPage:
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00361	52		 push	 edx
$LN63@LoadPage:
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00368	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
$LN47@LoadPage:

; 2815 : 		break;
; 2816 : 	}
; 2817 : 
; 2818 : 	rD.left = 162;
; 2819 : 	rD.top = 25;
; 2820 : 	rD.right = 0;
; 2821 : 	rD.bottom = 0;
; 2822 : 	MapDialogRect (hwndDlg, &rD);

  0036d	8d 44 24 10	 lea	 eax, DWORD PTR _rD$[esp+120]
  00371	50		 push	 eax
  00372	56		 push	 esi
  00373	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$[esp+128], 162 ; 000000a2H
  0037b	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$[esp+132], 25 ; 00000019H
  00383	89 5c 24 20	 mov	 DWORD PTR _rD$[esp+136], ebx
  00387	89 5c 24 24	 mov	 DWORD PTR _rD$[esp+140], ebx
  0038b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8

; 2823 : 
; 2824 : 	if (hCurPage != NULL)

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00396	3b c3		 cmp	 eax, ebx
  00398	0f 84 81 00 00
	00		 je	 $LN1@LoadPage

; 2825 : 	{
; 2826 : 		MoveWindow (hCurPage, rD.left, rD.top, rW.right - rW.left, rW.bottom - rW.top, TRUE);

  0039e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$[esp+132]
  003a2	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$[esp+124]
  003a6	8b 54 24 28	 mov	 edx, DWORD PTR _rW$[esp+128]
  003aa	2b 54 24 20	 sub	 edx, DWORD PTR _rW$[esp+120]
  003ae	6a 01		 push	 1
  003b0	51		 push	 ecx
  003b1	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$[esp+132]
  003b5	52		 push	 edx
  003b6	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$[esp+132]
  003ba	51		 push	 ecx
  003bb	52		 push	 edx
  003bc	50		 push	 eax
  003bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 2827 : 		ShowWindow (hCurPage, SW_SHOWNORMAL);

  003c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  003c8	6a 01		 push	 1
  003ca	50		 push	 eax
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 2828 : 
; 2829 : 		// Place here any message boxes that need to be displayed as soon as a new page is displayed. This 
; 2830 : 		// ensures that the page is fully rendered (otherwise it would remain blank, until the message box
; 2831 : 		// is closed).
; 2832 : 		switch (nPageNo)

  003d1	83 fd 12	 cmp	 ebp, 18			; 00000012H
  003d4	74 1f		 je	 SHORT $LN2@LoadPage
  003d6	83 fd 15	 cmp	 ebp, 21			; 00000015H
  003d9	75 44		 jne	 SHORT $LN1@LoadPage

; 2833 : 		{
; 2834 : 		case PASSWORD_PAGE:
; 2835 : 
; 2836 : 			CheckCapsLock (hwndDlg, FALSE);

  003db	53		 push	 ebx
  003dc	56		 push	 esi
  003dd	e8 00 00 00 00	 call	 _CheckCapsLock
  003e2	83 c4 08	 add	 esp, 8

; 2837 : 
; 2838 : 			if (CreatingHiddenSysVol())

  003e5	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  003ea	85 c0		 test	 eax, eax
  003ec	74 31		 je	 SHORT $LN1@LoadPage

; 2839 : 				Warning ("PASSWORD_HIDDEN_OS_NOTE");

  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@

; 2840 : 
; 2841 : 			break;

  003f3	eb 22		 jmp	 SHORT $LN65@LoadPage
$LN2@LoadPage:

; 2842 : 
; 2843 : 		case CIPHER_PAGE:
; 2844 : 
; 2845 : 			if (CreatingHiddenSysVol())

  003f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  003fb	85 c9		 test	 ecx, ecx
  003fd	74 20		 je	 SHORT $LN1@LoadPage
  003ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00405	85 d2		 test	 edx, edx
  00407	74 16		 je	 SHORT $LN1@LoadPage
  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  0040e	85 c0		 test	 eax, eax
  00410	75 0d		 jne	 SHORT $LN1@LoadPage

; 2846 : 				Warning ("HIDDEN_OS_PRE_CIPHER_WARNING");

  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@
$LN65@LoadPage:
  00417	e8 00 00 00 00	 call	 _Warning
  0041c	83 c4 04	 add	 esp, 4
$LN1@LoadPage:

; 2847 : 
; 2848 : 			break;
; 2849 : 		}
; 2850 : 	}
; 2851 : }

  0041f	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  00423	5f		 pop	 edi
  00424	5e		 pop	 esi
  00425	5d		 pop	 ebp
  00426	5b		 pop	 ebx
  00427	33 cc		 xor	 ecx, esp
  00429	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042e	83 c4 68	 add	 esp, 104		; 00000068H
  00431	c3		 ret	 0
  00432	8b ff		 npad	 2
$LN66@LoadPage:
  00434	00 00 00 00	 DD	 $LN46@LoadPage
  00438	00 00 00 00	 DD	 $LN45@LoadPage
  0043c	00 00 00 00	 DD	 $LN44@LoadPage
  00440	00 00 00 00	 DD	 $LN43@LoadPage
  00444	00 00 00 00	 DD	 $LN42@LoadPage
  00448	00 00 00 00	 DD	 $LN41@LoadPage
  0044c	00 00 00 00	 DD	 $LN40@LoadPage
  00450	00 00 00 00	 DD	 $LN42@LoadPage
  00454	00 00 00 00	 DD	 $LN42@LoadPage
  00458	00 00 00 00	 DD	 $LN42@LoadPage
  0045c	00 00 00 00	 DD	 $LN42@LoadPage
  00460	00 00 00 00	 DD	 $LN38@LoadPage
  00464	00 00 00 00	 DD	 $LN37@LoadPage
  00468	00 00 00 00	 DD	 $LN36@LoadPage
  0046c	00 00 00 00	 DD	 $LN35@LoadPage
  00470	00 00 00 00	 DD	 $LN34@LoadPage
  00474	00 00 00 00	 DD	 $LN38@LoadPage
  00478	00 00 00 00	 DD	 $LN32@LoadPage
  0047c	00 00 00 00	 DD	 $LN31@LoadPage
  00480	00 00 00 00	 DD	 $LN30@LoadPage
  00484	00 00 00 00	 DD	 $LN29@LoadPage
  00488	00 00 00 00	 DD	 $LN28@LoadPage
  0048c	00 00 00 00	 DD	 $LN27@LoadPage
  00490	00 00 00 00	 DD	 $LN26@LoadPage
  00494	00 00 00 00	 DD	 $LN25@LoadPage
  00498	00 00 00 00	 DD	 $LN24@LoadPage
  0049c	00 00 00 00	 DD	 $LN23@LoadPage
  004a0	00 00 00 00	 DD	 $LN22@LoadPage
  004a4	00 00 00 00	 DD	 $LN21@LoadPage
  004a8	00 00 00 00	 DD	 $LN32@LoadPage
  004ac	00 00 00 00	 DD	 $LN22@LoadPage
  004b0	00 00 00 00	 DD	 $LN18@LoadPage
  004b4	00 00 00 00	 DD	 $LN29@LoadPage
  004b8	00 00 00 00	 DD	 $LN16@LoadPage
  004bc	00 00 00 00	 DD	 $LN26@LoadPage
  004c0	00 00 00 00	 DD	 $LN21@LoadPage
  004c4	00 00 00 00	 DD	 $LN18@LoadPage
  004c8	00 00 00 00	 DD	 $LN32@LoadPage
  004cc	00 00 00 00	 DD	 $LN13@LoadPage
  004d0	00 00 00 00	 DD	 $LN12@LoadPage
  004d4	00 00 00 00	 DD	 $LN22@LoadPage
  004d8	00 00 00 00	 DD	 $LN38@LoadPage
  004dc	00 00 00 00	 DD	 $LN9@LoadPage
  004e0	00 00 00 00	 DD	 $LN8@LoadPage
_LoadPage ENDP
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T166135 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$166141 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 4c		 jbe	 SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$166141[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T166135[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_fil:
  0005d	4f		 dec	 edi
  0005e	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00064	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00067	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  0006a	eb d4		 jmp	 SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  0006c	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00072	3b f7		 cmp	 esi, edi
  00074	74 11		 je	 SHORT $LN1@Uninit_fil
$LL3@Uninit_fil:

; 407  : 		_Al.destroy(_Next);

  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0007d	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00083	3b f7		 cmp	 esi, edi
  00085	75 ef		 jne	 SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

  00087	33 db		 xor	 ebx, ebx
  00089	53		 push	 ebx
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil:

; 409  : 	_CATCH_END
; 410  : 	}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN35@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$166141[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T166135[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
PUBLIC	??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T166175 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$166179 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$166179[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T166175[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T166175[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@ ; `string'
PUBLIC	??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@ ; `string'
PUBLIC	??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@	; `string'
PUBLIC	??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@ ; `string'
PUBLIC	??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@ ; `string'
PUBLIC	??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@ ; `string'
PUBLIC	??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ ; `string'
PUBLIC	??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_SwitchWizardToSysEncMode
EXTRN	_AskYesNo:PROC
EXTRN	?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
EXTRN	_IsOSAtLeast:PROC
EXTRN	_AskWarnYesNoString:PROC
EXTRN	?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
EXTRN	_bSysPartitionSelected:DWORD
EXTRN	_bSysDriveSelected:DWORD
EXTRN	?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckRequirements
EXTRN	?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
;	COMDAT ??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@ DB 'SETUP_FAILED_BOO'
	DB	'T_DRIVE_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@
CONST	SEGMENT
??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@ DB 'HIDDEN_OS_PRECLU'
	DB	'DES_SINGLE_KEY_WDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
CONST	SEGMENT
??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@ DB 'WHOLE_SYC_DEVICE_RECOM'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
CONST	SEGMENT
??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@ DB 'WDE_EXTENDED_'
	DB	'PARTITIONS_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
CONST	SEGMENT
??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@ DB 'WDE_UNSUPPORTED_'
	DB	'FOR_EXTENDED_PARTITIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
CONST	SEGMENT
??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@ DB 'ASK_ENCRYPT_PART'
	DB	'ITION_INSTEAD_OF_DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
CONST	SEGMENT
??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@ DB 'SYSDRIVE_NON_STA'
	DB	'NDARD_PARTITIONS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
CONST	SEGMENT
??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ DB 'SYS_ENCRYPTION_O'
	DB	'R_DECRYPTION_IN_PROGRESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
CONST	SEGMENT
??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_RESUME_PROMPT', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_SwitchWizardToSysEncMode$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa0H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$4
__catchsym$_SwitchWizardToSysEncMode$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa4H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$2
__catchsym$_SwitchWizardToSysEncMode$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa8H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$0
__ehfuncinfo$_SwitchWizardToSysEncMode DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$_SwitchWizardToSysEncMode
	DD	03H
	DD	FLAT:__tryblocktable$_SwitchWizardToSysEncMode
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_SwitchWizardToSysEncMode DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$13
	DD	04H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$14
__unwindtable$_SwitchWizardToSysEncMode DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$_SwitchWizardToSysEncMode$6
	DD	05H
	DD	FLAT:__unwindfunclet$_SwitchWizardToSysEncMode$7
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT _SwitchWizardToSysEncMode
_TEXT	SEGMENT
$T166203 = -274						; size = 94
$T166211 = -180						; size = 28
$T166209 = -152						; size = 28
$T166210 = -124						; size = 28
_e$131924 = -96						; size = 4
_e$131885 = -92						; size = 4
_e$131863 = -88						; size = 4
_rW$166355 = -84					; size = 16
_rW$166264 = -68					; size = 16
_rD$166263 = -52					; size = 16
_rD$166354 = -36					; size = 16
$T166208 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_tmp$166269 = 0						; size = 65
_tmp$166360 = 68					; size = 65
__$ArrayPad$ = 136					; size = 4
_SwitchWizardToSysEncMode PROC				; COMDAT

; 751  : {

  00000	55		 push	 ebp
  00001	8d ac 24 74 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-140]
  00008	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_SwitchWizardToSysEncMode
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 88 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 752  : 	WaitCursor ();

  0003f	e8 00 00 00 00	 call	 _WaitCursor

; 753  : 
; 754  : 	try
; 755  : 	{
; 756  : 		BootEncStatus = BootEncObj->GetStatus();

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0004a	8d 85 ee fe ff
	ff		 lea	 eax, DWORD PTR $T166203[ebp]
  00050	33 db		 xor	 ebx, ebx
  00052	50		 push	 eax
  00053	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00056	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0005b	8b f0		 mov	 esi, eax
  0005d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00062	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00067	f3 a5		 rep movsd

; 757  : 		bWholeSysDrive = BootEncObj->SystemPartitionCoversWholeDrive();

  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006f	66 a5		 movsw
  00071	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  00076	0f b6 c8	 movzx	 ecx, al
  00079	83 cf ff	 or	 edi, -1
  0007c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive
  00082	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi

; 765  : 	}
; 766  : 
; 767  : 	// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 768  : 	if (!CreateSysEncMutex ())

  00085	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0008a	85 c0		 test	 eax, eax
  0008c	75 0f		 jne	 SHORT $LN34@SwitchWiza

; 769  : 	{
; 770  : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00093	e8 00 00 00 00	 call	 _Warning

; 771  : 		NormalCursor ();
; 772  : 		return FALSE;

  00098	e9 e4 01 00 00	 jmp	 $LN229@SwitchWiza
$LN34@SwitchWiza:

; 773  : 	}
; 774  : 
; 775  : 	// User-mode app may have crashed and its mutex may have gotten lost, so we need to check the driver status too
; 776  : 	if (BootEncStatus.SetupInProgress)

  0009d	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  000a3	0f 84 07 02 00
	00		 je	 $LN29@SwitchWiza

; 777  : 	{
; 778  : 		if (AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  000ae	e8 00 00 00 00	 call	 _AskWarnYesNo
  000b3	83 c4 04	 add	 esp, 4
  000b6	83 f8 06	 cmp	 eax, 6
  000b9	0f 85 b3 01 00
	00		 jne	 $LN32@SwitchWiza

; 779  : 		{
; 780  : 			if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 781  : 				&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000c4	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  000c9	74 1a		 je	 SHORT $LN30@SwitchWiza
  000cb	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  000d0	74 13		 je	 SHORT $LN30@SwitchWiza

; 782  : 			{
; 783  : 				// The config file with status was lost or not written correctly
; 784  : 				if (!ResolveUnknownSysEncDirection ())

  000d2	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  000d7	85 c0		 test	 eax, eax
  000d9	75 0a		 jne	 SHORT $LN30@SwitchWiza
$LN228@SwitchWiza:

; 785  : 				{
; 786  : 					CloseSysEncMutex ();	

  000db	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 788  : 					return FALSE;

  000e0	e9 9f 01 00 00	 jmp	 $LN221@SwitchWiza
$LN30@SwitchWiza:

; 789  : 				}
; 790  : 			}
; 791  : 
; 792  : 			bDirectSysEncMode = TRUE;
; 793  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  000eb	be 02 00 00 00	 mov	 esi, 2
  000f0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  000fa	3b d6		 cmp	 edx, esi
  000fc	74 52		 je	 SHORT $LN63@SwitchWiza

; 802  : 			NormalCursor ();
; 803  : 			return FALSE;
; 804  : 		}
; 805  : 	}
; 806  : 
; 807  : 	if (BootEncStatus.DriveMounted
; 808  : 		|| BootEncStatus.DriveEncrypted
; 809  : 		|| SysEncryptionOrDecryptionRequired ())

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00103	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00108	85 c0		 test	 eax, eax
  0010a	75 0f		 jne	 SHORT $LN59@SwitchWiza
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00111	e8 00 00 00 00	 call	 _Error
  00116	83 c4 04	 add	 esp, 4
  00119	eb 47		 jmp	 SHORT $LN55@SwitchWiza

; 789  : 				}
; 790  : 			}
; 791  : 
; 792  : 			bDirectSysEncMode = TRUE;
; 793  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN59@SwitchWiza:
  0011b	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  00120	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00126	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0012c	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00132	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00138	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0013e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00144	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  0014a	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN63@SwitchWiza:
  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00156	f7 d9		 neg	 ecx
  00158	1b c9		 sbb	 ecx, ecx
  0015a	f7 d9		 neg	 ecx
  0015c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice
$LN55@SwitchWiza:

; 794  : 			LoadPage (MainDlg, SYSENC_ENCRYPTION_PAGE);

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00167	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  0016d	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00172	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00178	74 50		 je	 SHORT $LN118@SwitchWiza
  0017a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, edi ; nCurPageNo
  00180	83 f8 15	 cmp	 eax, 21			; 00000015H
  00183	75 32		 jne	 SHORT $LN116@SwitchWiza
  00185	6a 40		 push	 64			; 00000040H
  00187	8d 55 00	 lea	 edx, DWORD PTR _tmp$166269[ebp]
  0018a	6a 58		 push	 88			; 00000058H
  0018c	52		 push	 edx
  0018d	e8 00 00 00 00	 call	 _memset
  00192	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00198	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	8d 45 00	 lea	 eax, DWORD PTR _tmp$166269[ebp]
  001a4	50		 push	 eax
  001a5	51		 push	 ecx
  001a6	88 5d 40	 mov	 BYTE PTR _tmp$166269[ebp+64], bl
  001a9	ff d7		 call	 edi
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  001b0	8d 55 00	 lea	 edx, DWORD PTR _tmp$166269[ebp]
  001b3	52		 push	 edx
  001b4	50		 push	 eax
  001b5	ff d7		 call	 edi
$LN116@SwitchWiza:
  001b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001bd	51		 push	 ecx
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  001c4	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN118@SwitchWiza:
  001ca	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  001d0	e8 00 00 00 00	 call	 _NormalCursor
  001d5	8d 55 bc	 lea	 edx, DWORD PTR _rW$166264[ebp]
  001d8	52		 push	 edx
  001d9	68 23 04 00 00	 push	 1059			; 00000423H
  001de	56		 push	 esi
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001e5	50		 push	 eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  001f1	53		 push	 ebx
  001f2	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  001f7	56		 push	 esi
  001f8	6a 7a		 push	 122			; 0000007aH
  001fa	50		 push	 eax
  001fb	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0020b	8d 4d cc	 lea	 ecx, DWORD PTR _rD$166263[ebp]
  0020e	51		 push	 ecx
  0020f	56		 push	 esi
  00210	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00215	c7 45 cc a2 00
	00 00		 mov	 DWORD PTR _rD$166263[ebp], 162 ; 000000a2H
  0021c	c7 45 d0 19 00
	00 00		 mov	 DWORD PTR _rD$166263[ebp+4], 25 ; 00000019H
  00223	89 5d d4	 mov	 DWORD PTR _rD$166263[ebp+8], ebx
  00226	89 5d d8	 mov	 DWORD PTR _rD$166263[ebp+12], ebx
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00234	3b c3		 cmp	 eax, ebx
  00236	74 2e		 je	 SHORT $LN67@SwitchWiza
  00238	8b 55 c8	 mov	 edx, DWORD PTR _rW$166264[ebp+12]
  0023b	2b 55 c0	 sub	 edx, DWORD PTR _rW$166264[ebp+4]
  0023e	8b 4d c4	 mov	 ecx, DWORD PTR _rW$166264[ebp+8]
  00241	2b 4d bc	 sub	 ecx, DWORD PTR _rW$166264[ebp]
  00244	6a 01		 push	 1
  00246	52		 push	 edx
  00247	8b 55 d0	 mov	 edx, DWORD PTR _rD$166263[ebp+4]
  0024a	51		 push	 ecx
  0024b	8b 4d cc	 mov	 ecx, DWORD PTR _rD$166263[ebp]
  0024e	52		 push	 edx
  0024f	51		 push	 ecx
  00250	50		 push	 eax
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00257	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0025d	6a 01		 push	 1
  0025f	52		 push	 edx
$LN230@SwitchWiza:
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN67@SwitchWiza:

; 795  : 			NormalCursor ();

  00266	e8 00 00 00 00	 call	 _NormalCursor

; 796  : 			return TRUE;

  0026b	b8 01 00 00 00	 mov	 eax, 1
  00270	eb 19		 jmp	 SHORT $LN22@SwitchWiza
$LN32@SwitchWiza:

; 797  : 		}
; 798  : 		else
; 799  : 		{
; 800  : 			CloseSysEncMutex ();	

  00272	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 801  : 			Error ("SYS_ENCRYPTION_OR_DECRYPTION_IN_PROGRESS");

  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
$LN231@SwitchWiza:
  0027c	e8 00 00 00 00	 call	 _Error
$LN229@SwitchWiza:

; 769  : 	{
; 770  : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00281	83 c4 04	 add	 esp, 4
$LN221@SwitchWiza:

; 787  : 					NormalCursor ();

  00284	e8 00 00 00 00	 call	 _NormalCursor
$LN50@SwitchWiza:

; 764  : 		return FALSE;

  00289	33 c0		 xor	 eax, eax
$LN22@SwitchWiza:

; 944  : 
; 945  : 		NormalCursor ();
; 946  : 		return TRUE;
; 947  : 	}
; 948  : }

  0028b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0028e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00295	59		 pop	 ecx
  00296	5f		 pop	 edi
  00297	5e		 pop	 esi
  00298	5b		 pop	 ebx
  00299	8b 8d 88 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029f	33 cd		 xor	 ecx, ebp
  002a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a6	81 c5 8c 00 00
	00		 add	 ebp, 140		; 0000008cH
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c3		 ret	 0
$LN29@SwitchWiza:

; 802  : 			NormalCursor ();
; 803  : 			return FALSE;
; 804  : 		}
; 805  : 	}
; 806  : 
; 807  : 	if (BootEncStatus.DriveMounted
; 808  : 		|| BootEncStatus.DriveEncrypted
; 809  : 		|| SysEncryptionOrDecryptionRequired ())

  002b0	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  002b6	0f 85 0c 03 00
	00		 jne	 $LN27@SwitchWiza
  002bc	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  002c2	0f 85 00 03 00
	00		 jne	 $LN27@SwitchWiza
  002c8	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  002cd	85 c0		 test	 eax, eax
  002cf	0f 85 f3 02 00
	00		 jne	 $LN27@SwitchWiza

; 841  : 		}
; 842  : 	}
; 843  : 	else
; 844  : 	{
; 845  : 		// Check compliance with requirements for boot encryption
; 846  : 
; 847  : 		if (!IsAdmin())

  002d5	e8 00 00 00 00	 call	 _IsAdmin
  002da	85 c0		 test	 eax, eax
  002dc	75 16		 jne	 SHORT $LN20@SwitchWiza

; 848  : 		{
; 849  : 			if (!IsUacSupported())

  002de	e8 00 00 00 00	 call	 _IsUacSupported
  002e3	85 c0		 test	 eax, eax
  002e5	75 0d		 jne	 SHORT $LN20@SwitchWiza

; 850  : 			{
; 851  : 				Warning ("ADMIN_PRIVILEGES_WARN_DEVICES");

  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  002ec	e8 00 00 00 00	 call	 _Warning
  002f1	83 c4 04	 add	 esp, 4
$LN20@SwitchWiza:

; 852  : 			}
; 853  : 		}
; 854  : 
; 855  : 		try
; 856  : 		{
; 857  : 			BootEncObj->CheckRequirements ();

  002f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  002fa	be 02 00 00 00	 mov	 esi, 2
  002ff	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00302	e8 00 00 00 00	 call	 ?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirements

; 865  : 		}
; 866  : 
; 867  : 		if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  00307	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0030c	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0030f	3b c6		 cmp	 eax, esi
  00311	74 4e		 je	 SHORT $LN207@SwitchWiza
  00313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00319	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0031e	85 c0		 test	 eax, eax
  00320	75 0a		 jne	 SHORT $LN203@SwitchWiza
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00327	e9 50 ff ff ff	 jmp	 $LN231@SwitchWiza
$LN203@SwitchWiza:
  0032c	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  00331	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00337	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0033d	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00343	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00349	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0034f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00355	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  0035b	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN207@SwitchWiza:
  00361	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00367	f7 da		 neg	 edx
  00369	1b d2		 sbb	 edx, edx
  0036b	f7 da		 neg	 edx
  0036d	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice

; 868  : 		{
; 869  : 			NormalCursor ();
; 870  : 			return FALSE;
; 871  : 		}
; 872  : 
; 873  : 		if (bSysDriveSelected || bSysPartitionSelected)

  00373	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysDriveSelected, ebx
  00379	75 0d		 jne	 SHORT $LN220@SwitchWiza
  0037b	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysPartitionSelected, ebx
  00381	75 17		 jne	 SHORT $LN38@SwitchWiza

; 940  : 			}
; 941  : 		}
; 942  : 		else
; 943  : 			LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  00383	e9 02 02 00 00	 jmp	 $LN226@SwitchWiza
$LN220@SwitchWiza:

; 874  : 		{
; 875  : 			// The user selected the non-sys-device wizard mode but then selected a system device
; 876  : 
; 877  : 			bWholeSysDrive = (bSysDriveSelected && !bSysPartitionSelected);

  00388	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 1 ; bWholeSysDrive
  00392	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysPartitionSelected, ebx
  00398	74 06		 je	 SHORT $LN39@SwitchWiza
$LN38@SwitchWiza:
  0039a	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN39@SwitchWiza:

; 878  : 
; 879  : 			bSysDriveSelected = FALSE;
; 880  : 			bSysPartitionSelected = FALSE;
; 881  : 
; 882  : 			try
; 883  : 			{
; 884  : 				if (!bHiddenVol)

  003a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  003a6	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysDriveSelected, ebx
  003ac	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysPartitionSelected, ebx
  003b2	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  003b9	85 c9		 test	 ecx, ecx
  003bb	0f 85 2e 01 00
	00		 jne	 $LN5@SwitchWiza

; 885  : 				{
; 886  : 					if (bWholeSysDrive && !BootEncObj->SystemPartitionCoversWholeDrive())

  003c1	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  003c7	0f 84 59 01 00
	00		 je	 $LN13@SwitchWiza
  003cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  003d3	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  003d8	3a c3		 cmp	 al, bl
  003da	0f 85 46 01 00
	00		 jne	 $LN13@SwitchWiza

; 887  : 					{
; 888  : 						if (BootEncObj->SystemDriveContainsNonStandardPartitions())

  003e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  003e6	e8 00 00 00 00	 call	 ?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
  003eb	3a c3		 cmp	 al, bl
  003ed	0f 84 9b 00 00
	00		 je	 $LN11@SwitchWiza

; 889  : 						{
; 890  : 							if (AskWarnYesNoString ((wstring (GetString ("SYSDRIVE_NON_STANDARD_PARTITIONS")) + L"\n\n" + GetString ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE")).c_str()) == IDYES)

  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
  003f8	e8 00 00 00 00	 call	 _GetString
  003fd	83 c4 04	 add	 esp, 4
  00400	50		 push	 eax
  00401	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T166209[ebp]
  00407	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00411	50		 push	 eax
  00412	8d 55 84	 lea	 edx, DWORD PTR $T166210[ebp]
  00415	52		 push	 edx
  00416	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0041a	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00422	8b f0		 mov	 esi, eax
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  00429	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  0042d	e8 00 00 00 00	 call	 _GetString
  00432	50		 push	 eax
  00433	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T166211[ebp]
  00439	56		 push	 esi
  0043a	50		 push	 eax
  0043b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00440	83 c4 10	 add	 esp, 16			; 00000010H
  00443	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00447	72 05		 jb	 SHORT $LN215@SwitchWiza
  00449	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0044c	eb 03		 jmp	 SHORT $LN216@SwitchWiza
$LN215@SwitchWiza:
  0044e	83 c0 04	 add	 eax, 4
$LN216@SwitchWiza:
  00451	50		 push	 eax
  00452	e8 00 00 00 00	 call	 _AskWarnYesNoString
  00457	83 c4 04	 add	 esp, 4
  0045a	83 f8 06	 cmp	 eax, 6
  0045d	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T166211[ebp]
  00463	0f 94 45 ef	 sete	 BYTE PTR $T166208[ebp]
  00467	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0046c	8d 4d 84	 lea	 ecx, DWORD PTR $T166210[ebp]
  0046f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00474	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T166209[ebp]
  0047a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0047e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00483	38 5d ef	 cmp	 BYTE PTR $T166208[ebp], bl
  00486	74 06		 je	 SHORT $LN11@SwitchWiza

; 891  : 								bWholeSysDrive = FALSE;

  00488	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN11@SwitchWiza:

; 892  : 						}
; 893  : 
; 894  : 						if (!IsOSAtLeast (WIN_VISTA) && bWholeSysDrive)

  0048e	6a 0b		 push	 11			; 0000000bH
  00490	e8 00 00 00 00	 call	 _IsOSAtLeast
  00495	83 c4 04	 add	 esp, 4
  00498	85 c0		 test	 eax, eax
  0049a	75 53		 jne	 SHORT $LN5@SwitchWiza
  0049c	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  004a2	74 4b		 je	 SHORT $LN5@SwitchWiza

; 895  : 						{
; 896  : 							if (BootEncObj->SystemDriveContainsExtendedPartition())

  004a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  004aa	e8 00 00 00 00	 call	 ?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
  004af	3a c3		 cmp	 al, bl
  004b1	74 2f		 je	 SHORT $LN9@SwitchWiza

; 897  : 							{
; 898  : 								bWholeSysDrive = FALSE;
; 899  : 
; 900  : 								Error ("WDE_UNSUPPORTED_FOR_EXTENDED_PARTITIONS");

  004b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
  004b8	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  004be	e8 00 00 00 00	 call	 _Error

; 901  : 
; 902  : 								if (AskYesNo ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE") == IDNO)

  004c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  004c8	e8 00 00 00 00	 call	 _AskYesNo
  004cd	83 c4 08	 add	 esp, 8
  004d0	83 f8 07	 cmp	 eax, 7
  004d3	75 1a		 jne	 SHORT $LN5@SwitchWiza

; 903  : 								{
; 904  : 									ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  004d5	8d 70 fa	 lea	 esi, DWORD PTR [eax-6]
  004d8	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode

; 905  : 									return FALSE;

  004dd	e9 a7 fd ff ff	 jmp	 $LN50@SwitchWiza
$LN9@SwitchWiza:

; 906  : 								}
; 907  : 							}
; 908  : 							else
; 909  : 								Warning ("WDE_EXTENDED_PARTITIONS_WARNING");

  004e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
  004e7	e8 00 00 00 00	 call	 _Warning
  004ec	83 c4 04	 add	 esp, 4
$LN5@SwitchWiza:

; 922  : 			}
; 923  : 
; 924  : 			if (!bHiddenVol)

  004ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  004f4	85 c0		 test	 eax, eax
  004f6	75 77		 jne	 SHORT $LN4@SwitchWiza

; 925  : 			{
; 926  : 				// Skip SYSENC_SPAN_PAGE and SYSENC_TYPE_PAGE as the user already made the choice
; 927  : 				LoadPage (MainDlg, bWholeSysDrive ? SYSENC_PRE_DRIVE_ANALYSIS_PAGE : SYSENC_MULTI_BOOT_MODE_PAGE);	

  004f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  004fe	33 c9		 xor	 ecx, ecx
  00500	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  00506	0f 94 c1	 sete	 cl
  00509	8d 4c 09 04	 lea	 ecx, DWORD PTR [ecx+ecx+4]
  0050d	51		 push	 ecx
  0050e	52		 push	 edx

; 938  : 
; 939  : 				LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  0050f	e8 00 00 00 00	 call	 _LoadPage
  00514	83 c4 08	 add	 esp, 8
  00517	e8 00 00 00 00	 call	 _NormalCursor
  0051c	b8 01 00 00 00	 mov	 eax, 1
  00521	e9 65 fd ff ff	 jmp	 $LN22@SwitchWiza
$LN13@SwitchWiza:

; 910  : 						}
; 911  : 					}
; 912  : 					else if (BootEncObj->SystemPartitionCoversWholeDrive() 
; 913  : 						&& !bWholeSysDrive)

  00526	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0052c	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  00531	3a c3		 cmp	 al, bl
  00533	74 ba		 je	 SHORT $LN5@SwitchWiza
  00535	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  0053b	75 b2		 jne	 SHORT $LN5@SwitchWiza

; 914  : 						bWholeSysDrive = (AskYesNo ("WHOLE_SYC_DEVICE_RECOM") == IDYES);

  0053d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
  00542	e8 00 00 00 00	 call	 _AskYesNo
  00547	33 c9		 xor	 ecx, ecx
  00549	83 c4 04	 add	 esp, 4
  0054c	83 f8 06	 cmp	 eax, 6
  0054f	0f 94 c1	 sete	 cl
  00552	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive
  00558	eb 95		 jmp	 SHORT $LN5@SwitchWiza
__catch$_SwitchWizardToSysEncMode$4:

; 915  : 				}
; 916  : 
; 917  : 			}
; 918  : 			catch (Exception &e)
; 919  : 			{
; 920  : 				e.Show (MainDlg);

  0055a	8b 4d a0	 mov	 ecx, DWORD PTR _e$131924[ebp]
  0055d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00564	8b 12		 mov	 edx, DWORD PTR [edx]
  00566	50		 push	 eax
  00567	ff d2		 call	 edx

; 921  : 				return FALSE;

  00569	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  0056e	c3		 ret	 0
$LN4@SwitchWiza:

; 928  : 			}
; 929  : 			else
; 930  : 			{
; 931  : 				// The user selected the non-sys-device wizard mode but then selected a system device.
; 932  : 				// In addition, he selected the hidden volume mode.
; 933  : 
; 934  : 				if (bWholeSysDrive)

  0056f	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  00575	74 0d		 je	 SHORT $LN2@SwitchWiza

; 935  : 					Warning ("HIDDEN_OS_PRECLUDES_SINGLE_KEY_WDE");

  00577	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@
  0057c	e8 00 00 00 00	 call	 _Warning
  00581	83 c4 04	 add	 esp, 4
$LN2@SwitchWiza:

; 936  : 
; 937  : 				bWholeSysDrive = FALSE;

  00584	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN226@SwitchWiza:

; 938  : 
; 939  : 				LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  0058a	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0058f	6a 01		 push	 1
  00591	50		 push	 eax
  00592	e8 00 00 00 00	 call	 _LoadPage
  00597	83 c4 08	 add	 esp, 8
  0059a	e8 00 00 00 00	 call	 _NormalCursor
  0059f	b8 01 00 00 00	 mov	 eax, 1
  005a4	e9 e2 fc ff ff	 jmp	 $LN22@SwitchWiza
__catch$_SwitchWizardToSysEncMode$2:

; 858  : 		}
; 859  : 		catch (Exception &e)
; 860  : 		{
; 861  : 			CloseSysEncMutex ();	

  005a9	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 862  : 			e.Show (MainDlg);

  005ae	8b 4d a4	 mov	 ecx, DWORD PTR _e$131885[ebp]
  005b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  005b8	8b 12		 mov	 edx, DWORD PTR [edx]
  005ba	50		 push	 eax
  005bb	ff d2		 call	 edx

; 863  : 			NormalCursor ();

  005bd	e8 00 00 00 00	 call	 _NormalCursor

; 864  : 			return FALSE;

  005c2	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  005c7	c3		 ret	 0
$LN27@SwitchWiza:
  005c8	53		 push	 ebx
  005c9	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  005ce	83 c4 04	 add	 esp, 4
  005d1	85 c0		 test	 eax, eax
  005d3	0f 85 b3 01 00
	00		 jne	 $LN26@SwitchWiza
  005d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  005de	e8 00 00 00 00	 call	 _AskWarnYesNo
  005e3	83 c4 04	 add	 esp, 4
  005e6	83 f8 06	 cmp	 eax, 6
  005e9	0f 85 9d 01 00
	00		 jne	 $LN26@SwitchWiza

; 810  : 	{
; 811  : 
; 812  : 		if (!SysDriveOrPartitionFullyEncrypted (FALSE)
; 813  : 			&& AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)
; 814  : 		{
; 815  : 			if (SystemEncryptionStatus == SYSENC_STATUS_NONE)

  005ef	39 1d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, ebx
  005f5	75 0d		 jne	 SHORT $LN24@SwitchWiza

; 816  : 			{
; 817  : 				// If the config file with status was lost or not written correctly, we
; 818  : 				// don't know whether to encrypt or decrypt (but we know that encryption or
; 819  : 				// decryption is required). Ask the user to select encryption, decryption, 
; 820  : 				// or cancel
; 821  : 				if (!ResolveUnknownSysEncDirection ())

  005f7	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  005fc	85 c0		 test	 eax, eax

; 822  : 				{
; 823  : 					CloseSysEncMutex ();	
; 824  : 					NormalCursor ();
; 825  : 					return FALSE;

  005fe	0f 84 d7 fa ff
	ff		 je	 $LN228@SwitchWiza
$LN24@SwitchWiza:

; 826  : 				}
; 827  : 			}
; 828  : 
; 829  : 			bDirectSysEncMode = TRUE;
; 830  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  00604	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00609	be 02 00 00 00	 mov	 esi, 2
  0060e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  00618	3b c6		 cmp	 eax, esi
  0061a	74 53		 je	 SHORT $LN135@SwitchWiza
  0061c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00622	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00627	85 c0		 test	 eax, eax
  00629	75 0f		 jne	 SHORT $LN131@SwitchWiza
  0062b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00630	e8 00 00 00 00	 call	 _Error
  00635	83 c4 04	 add	 esp, 4
  00638	eb 47		 jmp	 SHORT $LN127@SwitchWiza
$LN131@SwitchWiza:
  0063a	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0063f	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00645	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0064b	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00651	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00657	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0065d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00663	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00669	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN135@SwitchWiza:
  0066f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00675	f7 da		 neg	 edx
  00677	1b d2		 sbb	 edx, edx
  00679	f7 da		 neg	 edx
  0067b	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
$LN127@SwitchWiza:

; 831  : 			LoadPage (MainDlg, SYSENC_ENCRYPTION_PAGE);

  00681	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00686	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  0068c	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00691	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00697	74 54		 je	 SHORT $LN190@SwitchWiza
  00699	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, edi ; nCurPageNo
  0069f	83 f8 15	 cmp	 eax, 21			; 00000015H
  006a2	75 36		 jne	 SHORT $LN188@SwitchWiza
  006a4	6a 40		 push	 64			; 00000040H
  006a6	8d 45 44	 lea	 eax, DWORD PTR _tmp$166360[ebp]
  006a9	6a 58		 push	 88			; 00000058H
  006ab	50		 push	 eax
  006ac	e8 00 00 00 00	 call	 _memset
  006b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  006b7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  006bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  006c0	8d 4d 44	 lea	 ecx, DWORD PTR _tmp$166360[ebp]
  006c3	51		 push	 ecx
  006c4	52		 push	 edx
  006c5	88 9d 84 00 00
	00		 mov	 BYTE PTR _tmp$166360[ebp+64], bl
  006cb	ff d7		 call	 edi
  006cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  006d3	8d 45 44	 lea	 eax, DWORD PTR _tmp$166360[ebp]
  006d6	50		 push	 eax
  006d7	51		 push	 ecx
  006d8	ff d7		 call	 edi
$LN188@SwitchWiza:
  006da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  006e0	52		 push	 edx
  006e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  006e7	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN190@SwitchWiza:
  006ed	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  006f3	e8 00 00 00 00	 call	 _NormalCursor
  006f8	8d 45 ac	 lea	 eax, DWORD PTR _rW$166355[ebp]
  006fb	50		 push	 eax
  006fc	68 23 04 00 00	 push	 1059			; 00000423H
  00701	56		 push	 esi
  00702	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00708	50		 push	 eax
  00709	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0070f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00715	53		 push	 ebx
  00716	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0071b	56		 push	 esi
  0071c	6a 7a		 push	 122			; 0000007aH
  0071e	51		 push	 ecx
  0071f	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0072f	8d 55 dc	 lea	 edx, DWORD PTR _rD$166354[ebp]
  00732	52		 push	 edx
  00733	56		 push	 esi
  00734	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00739	c7 45 dc a2 00
	00 00		 mov	 DWORD PTR _rD$166354[ebp], 162 ; 000000a2H
  00740	c7 45 e0 19 00
	00 00		 mov	 DWORD PTR _rD$166354[ebp+4], 25 ; 00000019H
  00747	89 5d e4	 mov	 DWORD PTR _rD$166354[ebp+8], ebx
  0074a	89 5d e8	 mov	 DWORD PTR _rD$166354[ebp+12], ebx
  0074d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00753	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00758	3b c3		 cmp	 eax, ebx
  0075a	0f 84 06 fb ff
	ff		 je	 $LN67@SwitchWiza
  00760	8b 4d b8	 mov	 ecx, DWORD PTR _rW$166355[ebp+12]
  00763	2b 4d b0	 sub	 ecx, DWORD PTR _rW$166355[ebp+4]
  00766	8b 55 b4	 mov	 edx, DWORD PTR _rW$166355[ebp+8]
  00769	2b 55 ac	 sub	 edx, DWORD PTR _rW$166355[ebp]
  0076c	6a 01		 push	 1
  0076e	51		 push	 ecx
  0076f	8b 4d e0	 mov	 ecx, DWORD PTR _rD$166354[ebp+4]
  00772	52		 push	 edx
  00773	8b 55 dc	 mov	 edx, DWORD PTR _rD$166354[ebp]
  00776	51		 push	 ecx
  00777	52		 push	 edx
  00778	50		 push	 eax
  00779	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00784	6a 01		 push	 1
  00786	50		 push	 eax

; 832  : 			NormalCursor ();
; 833  : 			return TRUE;

  00787	e9 d4 fa ff ff	 jmp	 $LN230@SwitchWiza
$LN26@SwitchWiza:

; 834  : 		}
; 835  : 		else
; 836  : 		{
; 837  : 			CloseSysEncMutex ();	

  0078c	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 838  : 			Error ("SETUP_FAILED_BOOT_DRIVE_ENCRYPTED");

  00791	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@

; 839  : 			NormalCursor ();
; 840  : 			return FALSE;

  00796	e9 e1 fa ff ff	 jmp	 $LN231@SwitchWiza
__catch$_SwitchWizardToSysEncMode$0:

; 758  : 	}
; 759  : 	catch (Exception &e)
; 760  : 	{
; 761  : 		e.Show (MainDlg);

  0079b	8b 4d a8	 mov	 ecx, DWORD PTR _e$131863[ebp]
  0079e	8b 11		 mov	 edx, DWORD PTR [ecx]
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  007a5	8b 12		 mov	 edx, DWORD PTR [edx]
  007a7	50		 push	 eax
  007a8	ff d2		 call	 edx

; 762  : 		Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  007aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  007af	e8 00 00 00 00	 call	 _Error
  007b4	83 c4 04	 add	 esp, 4

; 763  : 		NormalCursor ();

  007b7	e8 00 00 00 00	 call	 _NormalCursor

; 764  : 		return FALSE;

  007bc	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  007c1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_SwitchWizardToSysEncMode$6:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T166209[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_SwitchWizardToSysEncMode$7:
  0000b	8d 4d 84	 lea	 ecx, DWORD PTR $T166210[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_SwitchWizardToSysEncMode:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a e8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-280]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_SwitchWizardToSysEncMode
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_SwitchWizardToSysEncMode ENDP
PUBLIC	__$ArrayPad$
PUBLIC	_SwitchWizardToFileContainerMode
; Function compile flags: /Ogtpy
;	COMDAT _SwitchWizardToFileContainerMode
_TEXT	SEGMENT
_rD$166493 = -104					; size = 16
_rW$166494 = -88					; size = 16
_tmp$166499 = -72					; size = 65
__$ArrayPad$ = -4					; size = 4
_SwitchWizardToFileContainerMode PROC			; COMDAT

; 951  : {

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 64	 mov	 DWORD PTR __$ArrayPad$[esp+104], eax

; 952  : 	ChangeWizardMode (WIZARD_MODE_FILE_CONTAINER);

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00013	53		 push	 ebx
  00014	55		 push	 ebp
  00015	56		 push	 esi
  00016	33 db		 xor	 ebx, ebx
  00018	57		 push	 edi
  00019	85 c0		 test	 eax, eax
  0001b	74 40		 je	 SHORT $LN11@SwitchWiza@2
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00023	83 f9 02	 cmp	 ecx, 2
  00026	75 05		 jne	 SHORT $LN10@SwitchWiza@2
  00028	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN10@SwitchWiza@2:
  0002d	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00033	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  00039	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  0003f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00045	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0004b	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00051	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00057	89 1d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, ebx
$LN11@SwitchWiza@2:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00068	f7 da		 neg	 edx
  0006a	1b d2		 sbb	 edx, edx
  0006c	f7 da		 neg	 edx
  0006e	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  00074	85 c0		 test	 eax, eax
  00076	75 05		 jne	 SHORT $LN3@SwitchWiza@2
  00078	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN3@SwitchWiza@2:

; 953  : 
; 954  : 	LoadPage (MainDlg, VOLUME_LOCATION_PAGE);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00082	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0008d	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00093	74 57		 je	 SHORT $LN65@SwitchWiza@2
  00095	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  0009f	83 f8 15	 cmp	 eax, 21			; 00000015H
  000a2	75 36		 jne	 SHORT $LN63@SwitchWiza@2
  000a4	6a 40		 push	 64			; 00000040H
  000a6	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$166499[esp+124]
  000aa	6a 58		 push	 88			; 00000058H
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _memset
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000b7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$166499[esp+120]
  000c4	52		 push	 edx
  000c5	50		 push	 eax
  000c6	88 5c 24 78	 mov	 BYTE PTR _tmp$166499[esp+192], bl
  000ca	ff d7		 call	 edi
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  000d2	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$166499[esp+120]
  000d6	51		 push	 ecx
  000d7	52		 push	 edx
  000d8	ff d7		 call	 edi
$LN63@SwitchWiza@2:
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  000df	50		 push	 eax
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  000e6	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN65@SwitchWiza@2:
  000ec	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  000f2	e8 00 00 00 00	 call	 _NormalCursor
  000f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000fd	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$166494[esp+120]
  00101	51		 push	 ecx
  00102	68 23 04 00 00	 push	 1059			; 00000423H
  00107	56		 push	 esi
  00108	ff d7		 call	 edi
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00117	53		 push	 ebx
  00118	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0011d	56		 push	 esi
  0011e	6a 69		 push	 105			; 00000069H
  00120	52		 push	 edx
  00121	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 14 ; nCurPageNo, 0000000eH
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00131	33 c9		 xor	 ecx, ecx
  00133	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bHistoryCmdLine@@3HA, ebx ; bHistoryCmdLine
  00139	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0013e	0f 94 c1	 sete	 cl
  00141	51		 push	 ecx
  00142	68 f4 03 00 00	 push	 1012			; 000003f4H
  00147	50		 push	 eax
  00148	ff d7		 call	 edi
  0014a	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00150	50		 push	 eax
  00151	ff d5		 call	 ebp
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00159	68 ea 03 00 00	 push	 1002			; 000003eaH
  0015e	52		 push	 edx
  0015f	ff d7		 call	 edi
  00161	50		 push	 eax
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  00168	33 c9		 xor	 ecx, ecx
  0016a	85 c0		 test	 eax, eax
  0016c	0f 9f c1	 setg	 cl
  0016f	51		 push	 ecx
  00170	68 10 04 00 00	 push	 1040			; 00000410H
  00175	56		 push	 esi
  00176	ff d7		 call	 edi
  00178	50		 push	 eax
  00179	ff d5		 call	 ebp
  0017b	8d 54 24 10	 lea	 edx, DWORD PTR _rD$166493[esp+120]
  0017f	52		 push	 edx
  00180	56		 push	 esi
  00181	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$166493[esp+128], 162 ; 000000a2H
  00189	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$166493[esp+132], 25 ; 00000019H
  00191	89 5c 24 20	 mov	 DWORD PTR _rD$166493[esp+136], ebx
  00195	89 5c 24 24	 mov	 DWORD PTR _rD$166493[esp+140], ebx
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5d		 pop	 ebp
  001a7	3b c3		 cmp	 eax, ebx
  001a9	5b		 pop	 ebx
  001aa	74 33		 je	 SHORT $LN14@SwitchWiza@2
  001ac	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rW$166494[esp+116]
  001b0	2b 4c 24 14	 sub	 ecx, DWORD PTR _rW$166494[esp+108]
  001b4	8b 54 24 18	 mov	 edx, DWORD PTR _rW$166494[esp+112]
  001b8	2b 54 24 10	 sub	 edx, DWORD PTR _rW$166494[esp+104]
  001bc	6a 01		 push	 1
  001be	51		 push	 ecx
  001bf	8b 4c 24 0c	 mov	 ecx, DWORD PTR _rD$166493[esp+116]
  001c3	52		 push	 edx
  001c4	8b 54 24 0c	 mov	 edx, DWORD PTR _rD$166493[esp+116]
  001c8	51		 push	 ecx
  001c9	52		 push	 edx
  001ca	50		 push	 eax
  001cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001d6	6a 01		 push	 1
  001d8	50		 push	 eax
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN14@SwitchWiza@2:

; 955  : 
; 956  : 	NormalCursor ();

  001df	e8 00 00 00 00	 call	 _NormalCursor

; 957  : }

  001e4	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  001e8	33 cc		 xor	 ecx, esp
  001ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ef	83 c4 68	 add	 esp, 104		; 00000068H
  001f2	c3		 ret	 0
_SwitchWizardToFileContainerMode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToNonSysDeviceMode@@YAXXZ		; SwitchWizardToNonSysDeviceMode
; Function compile flags: /Ogtpy
;	COMDAT ?SwitchWizardToNonSysDeviceMode@@YAXXZ
_TEXT	SEGMENT
_rD$166586 = -108					; size = 16
_rW$166587 = -92					; size = 16
$T166563 = -76						; size = 4
_tmp$166592 = -72					; size = 65
__$ArrayPad$ = -4					; size = 4
?SwitchWizardToNonSysDeviceMode@@YAXXZ PROC		; SwitchWizardToNonSysDeviceMode, COMDAT

; 960  : {

  00000	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+108], eax

; 961  : 	ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	83 f8 01	 cmp	 eax, 1
  0001b	74 6f		 je	 SHORT $LN11@SwitchWiza@3
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00023	83 f9 02	 cmp	 ecx, 2
  00026	75 05		 jne	 SHORT $LN10@SwitchWiza@3
  00028	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN10@SwitchWiza@3:
  0002d	e8 00 00 00 00	 call	 _IsAdmin
  00032	85 c0		 test	 eax, eax
  00034	75 28		 jne	 SHORT $LN4@SwitchWiza@3
  00036	e8 00 00 00 00	 call	 _IsUacSupported
  0003b	85 c0		 test	 eax, eax
  0003d	74 1f		 je	 SHORT $LN4@SwitchWiza@3
  0003f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00042	8b cc		 mov	 ecx, esp
  00044	89 64 24 48	 mov	 DWORD PTR $T166563[esp+148], esp
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  00057	83 c4 1c	 add	 esp, 28			; 0000001cH
  0005a	3b c3		 cmp	 eax, ebx
  0005c	74 4e		 je	 SHORT $LN3@SwitchWiza@3
$LN4@SwitchWiza@3:
  0005e	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  00064	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  0006a	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00070	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  00076	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  0007c	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00082	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _WizardMode, 1
$LN11@SwitchWiza@3:
  0008c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00097	f7 da		 neg	 edx
  00099	1b d2		 sbb	 edx, edx
  0009b	f7 da		 neg	 edx
  0009d	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  000a3	85 c0		 test	 eax, eax
  000a5	75 05		 jne	 SHORT $LN3@SwitchWiza@3
  000a7	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN3@SwitchWiza@3:

; 962  : 
; 963  : 	LoadPage (MainDlg, VOLUME_TYPE_PAGE);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000b1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000bc	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  000c2	74 57		 je	 SHORT $LN66@SwitchWiza@3
  000c4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000ce	83 f8 15	 cmp	 eax, 21			; 00000015H
  000d1	75 36		 jne	 SHORT $LN64@SwitchWiza@3
  000d3	6a 40		 push	 64			; 00000040H
  000d5	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$166592[esp+124]
  000d9	6a 58		 push	 88			; 00000058H
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 _memset
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$166592[esp+120]
  000f3	52		 push	 edx
  000f4	50		 push	 eax
  000f5	88 5c 24 78	 mov	 BYTE PTR _tmp$166592[esp+192], bl
  000f9	ff d7		 call	 edi
  000fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00101	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$166592[esp+120]
  00105	51		 push	 ecx
  00106	52		 push	 edx
  00107	ff d7		 call	 edi
$LN64@SwitchWiza@3:
  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0010e	50		 push	 eax
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00115	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN66@SwitchWiza@3:
  0011b	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00121	e8 00 00 00 00	 call	 _NormalCursor
  00126	8d 4c 24 1c	 lea	 ecx, DWORD PTR _rW$166587[esp+120]
  0012a	51		 push	 ecx
  0012b	68 23 04 00 00	 push	 1059			; 00000423H
  00130	56		 push	 esi
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00144	53		 push	 ebx
  00145	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0014a	56		 push	 esi
  0014b	6a 71		 push	 113			; 00000071H
  0014d	52		 push	 edx
  0014e	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 12 ; nCurPageNo, 0000000cH
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0015e	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00163	8d 44 24 0c	 lea	 eax, DWORD PTR _rD$166586[esp+120]
  00167	50		 push	 eax
  00168	56		 push	 esi
  00169	c7 44 24 14 a2
	00 00 00	 mov	 DWORD PTR _rD$166586[esp+128], 162 ; 000000a2H
  00171	c7 44 24 18 19
	00 00 00	 mov	 DWORD PTR _rD$166586[esp+132], 25 ; 00000019H
  00179	89 5c 24 1c	 mov	 DWORD PTR _rD$166586[esp+136], ebx
  0017d	89 5c 24 20	 mov	 DWORD PTR _rD$166586[esp+140], ebx
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0018c	3b c3		 cmp	 eax, ebx
  0018e	74 33		 je	 SHORT $LN15@SwitchWiza@3
  00190	8b 4c 24 28	 mov	 ecx, DWORD PTR _rW$166587[esp+132]
  00194	2b 4c 24 20	 sub	 ecx, DWORD PTR _rW$166587[esp+124]
  00198	8b 54 24 24	 mov	 edx, DWORD PTR _rW$166587[esp+128]
  0019c	2b 54 24 1c	 sub	 edx, DWORD PTR _rW$166587[esp+120]
  001a0	6a 01		 push	 1
  001a2	51		 push	 ecx
  001a3	8b 4c 24 18	 mov	 ecx, DWORD PTR _rD$166586[esp+132]
  001a7	52		 push	 edx
  001a8	8b 54 24 18	 mov	 edx, DWORD PTR _rD$166586[esp+132]
  001ac	51		 push	 ecx
  001ad	52		 push	 edx
  001ae	50		 push	 eax
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001ba	6a 01		 push	 1
  001bc	50		 push	 eax
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN15@SwitchWiza@3:

; 964  : 
; 965  : 	NormalCursor ();

  001c3	e8 00 00 00 00	 call	 _NormalCursor

; 966  : }

  001c8	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	33 cc		 xor	 ecx, esp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	83 c4 6c	 add	 esp, 108		; 0000006cH
  001d9	c3		 ret	 0
?SwitchWizardToNonSysDeviceMode@@YAXXZ ENDP		; SwitchWizardToNonSysDeviceMode
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToHiddenOSMode@@YAHXZ		; SwitchWizardToHiddenOSMode
EXTRN	?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS
EXTRN	?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckRequirementsHiddenOS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SwitchWizardToHiddenOSMode@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$?SwitchWizardToHiddenOSMode@@YAHXZ$0
__unwindtable$?SwitchWizardToHiddenOSMode@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SwitchWizardToHiddenOSMode@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SwitchWizardToHiddenOSMode@@YAHXZ$2
__ehfuncinfo$?SwitchWizardToHiddenOSMode@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SwitchWizardToHiddenOSMode@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SwitchWizardToHiddenOSMode@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SwitchWizardToHiddenOSMode@@YAHXZ
_TEXT	SEGMENT
_e$131944 = -84						; size = 4
_rW$166746 = -80					; size = 16
_rW$166670 = -64					; size = 16
_rD$166745 = -48					; size = 16
_rD$166669 = -32					; size = 16
__$EHRec$ = -16						; size = 16
_tmp$166751 = 0						; size = 65
_tmp$166675 = 68					; size = 65
__$ArrayPad$ = 136					; size = 4
?SwitchWizardToHiddenOSMode@@YAHXZ PROC			; SwitchWizardToHiddenOSMode, COMDAT

; 969  : {

  00000	55		 push	 ebp
  00001	8d ac 24 74 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-140]
  00008	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?SwitchWizardToHiddenOSMode@@YAHXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 48	 sub	 esp, 72			; 00000048H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 88 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 970  : 	if (SwitchWizardToSysEncMode())

  0003c	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  00041	85 c0		 test	 eax, eax
  00043	0f 84 82 02 00
	00		 je	 $LN7@SwitchWiza@4

; 971  : 	{
; 972  : 		if (nCurPageNo != SYSENC_ENCRYPTION_PAGE)	// If the user did not manually choose to resume encryption or decryption of the system partition/drive

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0004e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00051	0f 84 6d 02 00
	00		 je	 $LN6@SwitchWiza@4

; 973  : 		{
; 974  : 			bHiddenOS = TRUE;

  00057	b9 01 00 00 00	 mov	 ecx, 1
  0005c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, ecx ; bHiddenOS

; 975  : 			bHiddenVol = TRUE;
; 976  : 			bHiddenVolHost = TRUE;
; 977  : 			bHiddenVolDirect = FALSE;

  00062	33 db		 xor	 ebx, ebx

; 978  : 			bWholeSysDrive = FALSE;
; 979  : 			bInPlaceEncNonSys = FALSE;
; 980  : 
; 981  : 			if (bDirectSysEncModeCommand == SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV)

  00064	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 6 ; bDirectSysEncModeCommand
  0006b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, ecx ; bHiddenVol
  00071	89 0d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, ecx
  00077	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolDirect, ebx
  0007d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  00083	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00089	0f 85 2c 01 00
	00		 jne	 $LN5@SwitchWiza@4

; 982  : 			{
; 983  : 				// Some of the requirements for hidden OS should have already been checked by the wizard process
; 984  : 				// that launched us (in order to elevate), but we must recheck them. Otherwise, an advanced user 
; 985  : 				// could bypass the checks by using the undocumented CLI switch. Moreover, some requirements
; 986  : 				// can be checked only at this point (when we are elevated).
; 987  : 				try
; 988  : 				{
; 989  : 					BootEncObj->CheckRequirementsHiddenOS ();

  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00095	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00098	e8 00 00 00 00	 call	 ?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirementsHiddenOS

; 990  : 
; 991  : 					BootEncObj->InitialSecurityChecksForHiddenOS ();

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000a3	e8 00 00 00 00	 call	 ?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS

; 997  : 				}
; 998  : 
; 999  : 				LoadPage (MainDlg, SYSENC_MULTI_BOOT_MODE_PAGE);

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000ad	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  000b3	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000b8	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  000be	74 58		 je	 SHORT $LN65@SwitchWiza@4
  000c0	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000ca	83 f8 15	 cmp	 eax, 21			; 00000015H
  000cd	75 36		 jne	 SHORT $LN63@SwitchWiza@4
  000cf	6a 40		 push	 64			; 00000040H
  000d1	8d 45 44	 lea	 eax, DWORD PTR _tmp$166675[ebp]
  000d4	6a 58		 push	 88			; 00000058H
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _memset
  000dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000e2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	8d 4d 44	 lea	 ecx, DWORD PTR _tmp$166675[ebp]
  000ee	51		 push	 ecx
  000ef	52		 push	 edx
  000f0	88 9d 84 00 00
	00		 mov	 BYTE PTR _tmp$166675[ebp+64], bl
  000f6	ff d7		 call	 edi
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  000fe	8d 45 44	 lea	 eax, DWORD PTR _tmp$166675[ebp]
  00101	50		 push	 eax
  00102	51		 push	 ecx
  00103	ff d7		 call	 edi
$LN63@SwitchWiza@4:
  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0010b	52		 push	 edx
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00112	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN65@SwitchWiza@4:
  00118	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  0011e	e8 00 00 00 00	 call	 _NormalCursor
  00123	8d 45 c0	 lea	 eax, DWORD PTR _rW$166670[ebp]
  00126	50		 push	 eax
  00127	68 23 04 00 00	 push	 1059			; 00000423H
  0012c	56		 push	 esi
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00140	53		 push	 ebx
  00141	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00146	56		 push	 esi
  00147	6a 77		 push	 119			; 00000077H
  00149	51		 push	 ecx
  0014a	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0015a	8d 55 e0	 lea	 edx, DWORD PTR _rD$166669[ebp]
  0015d	52		 push	 edx
  0015e	56		 push	 esi
  0015f	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00164	c7 45 e0 a2 00
	00 00		 mov	 DWORD PTR _rD$166669[ebp], 162 ; 000000a2H
  0016b	c7 45 e4 19 00
	00 00		 mov	 DWORD PTR _rD$166669[ebp+4], 25 ; 00000019H
  00172	89 5d e8	 mov	 DWORD PTR _rD$166669[ebp+8], ebx
  00175	89 5d ec	 mov	 DWORD PTR _rD$166669[ebp+12], ebx
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00183	3b c3		 cmp	 eax, ebx
  00185	0f 84 34 01 00
	00		 je	 $LN74@SwitchWiza@4
  0018b	8b 4d cc	 mov	 ecx, DWORD PTR _rW$166670[ebp+12]
  0018e	2b 4d c4	 sub	 ecx, DWORD PTR _rW$166670[ebp+4]
  00191	8b 55 c8	 mov	 edx, DWORD PTR _rW$166670[ebp+8]
  00194	2b 55 c0	 sub	 edx, DWORD PTR _rW$166670[ebp]
  00197	6a 01		 push	 1
  00199	51		 push	 ecx
  0019a	8b 4d e4	 mov	 ecx, DWORD PTR _rD$166669[ebp+4]
  0019d	52		 push	 edx
  0019e	8b 55 e0	 mov	 edx, DWORD PTR _rD$166669[ebp]

; 1000 : 			}
; 1001 : 			else

  001a1	e9 02 01 00 00	 jmp	 $LN137@SwitchWiza@4
__catch$?SwitchWizardToHiddenOSMode@@YAHXZ$0:

; 992  : 				}
; 993  : 				catch (Exception &e)
; 994  : 				{
; 995  : 					e.Show (MainDlg);

  001a6	8b 4d ac	 mov	 ecx, DWORD PTR _e$131944[ebp]
  001a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  001b0	8b 12		 mov	 edx, DWORD PTR [edx]
  001b2	50		 push	 eax
  001b3	ff d2		 call	 edx

; 996  : 					return FALSE;

  001b5	b8 00 00 00 00	 mov	 eax, $LN7@SwitchWiza@4
  001ba	c3		 ret	 0
$LN5@SwitchWiza@4:

; 1002 : 				LoadPage (MainDlg, SYSENC_HIDDEN_OS_REQ_CHECK_PAGE);

  001bb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  001c1	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  001c6	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  001cc	74 55		 je	 SHORT $LN125@SwitchWiza@4
  001ce	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  001d8	83 f8 15	 cmp	 eax, 21			; 00000015H
  001db	75 33		 jne	 SHORT $LN123@SwitchWiza@4
  001dd	6a 40		 push	 64			; 00000040H
  001df	8d 45 00	 lea	 eax, DWORD PTR _tmp$166751[ebp]
  001e2	6a 58		 push	 88			; 00000058H
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 _memset
  001ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  001f0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$166751[ebp]
  001fc	51		 push	 ecx
  001fd	52		 push	 edx
  001fe	88 5d 40	 mov	 BYTE PTR _tmp$166751[ebp+64], bl
  00201	ff d7		 call	 edi
  00203	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00209	8d 45 00	 lea	 eax, DWORD PTR _tmp$166751[ebp]
  0020c	50		 push	 eax
  0020d	51		 push	 ecx
  0020e	ff d7		 call	 edi
$LN123@SwitchWiza@4:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00216	52		 push	 edx
  00217	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0021d	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN125@SwitchWiza@4:
  00223	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00229	e8 00 00 00 00	 call	 _NormalCursor
  0022e	8d 45 b0	 lea	 eax, DWORD PTR _rW$166746[ebp]
  00231	50		 push	 eax
  00232	68 23 04 00 00	 push	 1059			; 00000423H
  00237	56		 push	 esi
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0023e	50		 push	 eax
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00245	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0024b	53		 push	 ebx
  0024c	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00251	56		 push	 esi
  00252	6a 7f		 push	 127			; 0000007fH
  00254	51		 push	 ecx
  00255	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 2 ; nCurPageNo
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00265	8d 55 d0	 lea	 edx, DWORD PTR _rD$166745[ebp]
  00268	52		 push	 edx
  00269	56		 push	 esi
  0026a	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0026f	c7 45 d0 a2 00
	00 00		 mov	 DWORD PTR _rD$166745[ebp], 162 ; 000000a2H
  00276	c7 45 d4 19 00
	00 00		 mov	 DWORD PTR _rD$166745[ebp+4], 25 ; 00000019H
  0027d	89 5d d8	 mov	 DWORD PTR _rD$166745[ebp+8], ebx
  00280	89 5d dc	 mov	 DWORD PTR _rD$166745[ebp+12], ebx
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00289	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0028e	3b c3		 cmp	 eax, ebx
  00290	74 2d		 je	 SHORT $LN74@SwitchWiza@4
  00292	8b 4d bc	 mov	 ecx, DWORD PTR _rW$166746[ebp+12]
  00295	2b 4d b4	 sub	 ecx, DWORD PTR _rW$166746[ebp+4]
  00298	8b 55 b8	 mov	 edx, DWORD PTR _rW$166746[ebp+8]
  0029b	2b 55 b0	 sub	 edx, DWORD PTR _rW$166746[ebp]
  0029e	6a 01		 push	 1
  002a0	51		 push	 ecx
  002a1	8b 4d d4	 mov	 ecx, DWORD PTR _rD$166745[ebp+4]
  002a4	52		 push	 edx
  002a5	8b 55 d0	 mov	 edx, DWORD PTR _rD$166745[ebp]
$LN137@SwitchWiza@4:
  002a8	51		 push	 ecx
  002a9	52		 push	 edx
  002aa	50		 push	 eax
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  002b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  002b6	6a 01		 push	 1
  002b8	50		 push	 eax
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN74@SwitchWiza@4:

; 1003 : 
; 1004 : 			NormalCursor ();

  002bf	e8 00 00 00 00	 call	 _NormalCursor
$LN6@SwitchWiza@4:

; 1011 : 
; 1012 : 	return TRUE;

  002c4	b8 01 00 00 00	 mov	 eax, 1
  002c9	eb 02		 jmp	 SHORT $LN8@SwitchWiza@4
$LN7@SwitchWiza@4:

; 1005 : 		}
; 1006 : 		else
; 1007 : 			return TRUE;
; 1008 : 	}
; 1009 : 	else
; 1010 : 		return FALSE;

  002cb	33 c0		 xor	 eax, eax
$LN8@SwitchWiza@4:

; 1013 : }

  002cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d7	59		 pop	 ecx
  002d8	5f		 pop	 edi
  002d9	5e		 pop	 esi
  002da	5b		 pop	 ebx
  002db	8b 8d 88 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e1	33 cd		 xor	 ecx, ebp
  002e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e8	81 c5 8c 00 00
	00		 add	 ebp, 140		; 0000008cH
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SwitchWizardToHiddenOSMode@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SwitchWizardToHiddenOSMode@@YAHXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SwitchWizardToHiddenOSMode@@YAHXZ ENDP			; SwitchWizardToHiddenOSMode
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ; SwitchWizardToNonSysInplaceEncResumeMode
; Function compile flags: /Ogtpy
;	COMDAT ?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ
_TEXT	SEGMENT
$T166972 = -108						; size = 4
$T166822 = -108						; size = 4
_rD$167003 = -104					; size = 16
_rW$167004 = -88					; size = 16
_tmp$167009 = -72					; size = 65
__$ArrayPad$ = -4					; size = 4
?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ PROC	; SwitchWizardToNonSysInplaceEncResumeMode, COMDAT

; 1016 : {

  00000	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+108], eax
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 1017 : 	if (!IsAdmin() && IsUacSupported())

  00011	e8 00 00 00 00	 call	 _IsAdmin
  00016	33 db		 xor	 ebx, ebx
  00018	85 c0		 test	 eax, eax
  0001a	75 3c		 jne	 SHORT $LN2@SwitchWiza@5
  0001c	e8 00 00 00 00	 call	 _IsUacSupported
  00021	85 c0		 test	 eax, eax
  00023	74 33		 je	 SHORT $LN2@SwitchWiza@5

; 1018 : 	{
; 1019 : 		if (!ElevateWholeWizardProcess ("/zinplace"))

  00025	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00028	8b cc		 mov	 ecx, esp
  0002a	89 64 24 28	 mov	 DWORD PTR $T166822[esp+148], esp
  0002e	6a 09		 push	 9
  00030	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00037	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_09FFOCOHMH@?1zinplace?$AA@
  0003f	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  0004c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0004f	3b c3		 cmp	 eax, ebx
  00051	75 05		 jne	 SHORT $LN2@SwitchWiza@5

; 1020 : 			AbortProcessSilent ();

  00053	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN2@SwitchWiza@5:

; 1021 : 	}
; 1022 : 
; 1023 : 	if (!IsAdmin())

  00058	e8 00 00 00 00	 call	 _IsAdmin
  0005d	85 c0		 test	 eax, eax
  0005f	75 0d		 jne	 SHORT $LN1@SwitchWiza@5

; 1024 : 		AbortProcess("ADMIN_PRIVILEGES_WARN_DEVICES");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  00066	e8 00 00 00 00	 call	 _AbortProcess
  0006b	83 c4 04	 add	 esp, 4
$LN1@SwitchWiza@5:

; 1025 : 
; 1026 : 	CreateNonSysInplaceEncMutex ();

  0006e	e8 00 00 00 00	 call	 _CreateNonSysInplaceEncMutex

; 1027 : 
; 1028 : 	bInPlaceEncNonSys = TRUE;

  00073	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 1

; 1029 : 	bInPlaceEncNonSysResumed = TRUE;

  0007d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSysResumed, 1

; 1030 : 
; 1031 : 	ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	74 6f		 je	 SHORT $LN51@SwitchWiza@5
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00097	83 f9 02	 cmp	 ecx, 2
  0009a	75 05		 jne	 SHORT $LN50@SwitchWiza@5
  0009c	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN50@SwitchWiza@5:
  000a1	e8 00 00 00 00	 call	 _IsAdmin
  000a6	85 c0		 test	 eax, eax
  000a8	75 28		 jne	 SHORT $LN44@SwitchWiza@5
  000aa	e8 00 00 00 00	 call	 _IsUacSupported
  000af	85 c0		 test	 eax, eax
  000b1	74 1f		 je	 SHORT $LN44@SwitchWiza@5
  000b3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000b6	8b cc		 mov	 ecx, esp
  000b8	89 64 24 28	 mov	 DWORD PTR $T166972[esp+148], esp
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  000c1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c6	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  000cb	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ce	3b c3		 cmp	 eax, ebx
  000d0	74 4e		 je	 SHORT $LN43@SwitchWiza@5
$LN44@SwitchWiza@5:
  000d2	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  000d8	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  000de	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  000e4	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  000ea	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  000f0	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  000f6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _WizardMode, 1
$LN51@SwitchWiza@5:
  00100	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0010b	f7 da		 neg	 edx
  0010d	1b d2		 sbb	 edx, edx
  0010f	f7 da		 neg	 edx
  00111	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  00117	85 c0		 test	 eax, eax
  00119	75 05		 jne	 SHORT $LN43@SwitchWiza@5
  0011b	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN43@SwitchWiza@5:

; 1032 : 
; 1033 : 	LoadPage (MainDlg, NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE);

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00125	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  0012b	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00130	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00136	74 57		 je	 SHORT $LN106@SwitchWiza@5
  00138	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00142	83 f8 15	 cmp	 eax, 21			; 00000015H
  00145	75 36		 jne	 SHORT $LN104@SwitchWiza@5
  00147	6a 40		 push	 64			; 00000040H
  00149	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$167009[esp+124]
  0014d	6a 58		 push	 88			; 00000058H
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 _memset
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0015a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
  00163	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$167009[esp+120]
  00167	52		 push	 edx
  00168	50		 push	 eax
  00169	88 5c 24 78	 mov	 BYTE PTR _tmp$167009[esp+192], bl
  0016d	ff d7		 call	 edi
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00175	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$167009[esp+120]
  00179	51		 push	 ecx
  0017a	52		 push	 edx
  0017b	ff d7		 call	 edi
$LN104@SwitchWiza@5:
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00182	50		 push	 eax
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00189	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN106@SwitchWiza@5:
  0018f	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00195	e8 00 00 00 00	 call	 _NormalCursor
  0019a	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$167004[esp+120]
  0019e	51		 push	 ecx
  0019f	68 23 04 00 00	 push	 1059			; 00000423H
  001a4	56		 push	 esi
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001ab	50		 push	 eax
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  001b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  001b8	53		 push	 ebx
  001b9	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  001be	56		 push	 esi
  001bf	6a 6f		 push	 111			; 0000006fH
  001c1	52		 push	 edx
  001c2	c7 05 00 00 00
	00 20 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 32 ; nCurPageNo, 00000020H
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  001d2	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  001d7	8d 44 24 10	 lea	 eax, DWORD PTR _rD$167003[esp+120]
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$167003[esp+128], 162 ; 000000a2H
  001e5	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$167003[esp+132], 25 ; 00000019H
  001ed	89 5c 24 20	 mov	 DWORD PTR _rD$167003[esp+136], ebx
  001f1	89 5c 24 24	 mov	 DWORD PTR _rD$167003[esp+140], ebx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00200	3b c3		 cmp	 eax, ebx
  00202	74 33		 je	 SHORT $LN55@SwitchWiza@5
  00204	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$167004[esp+132]
  00208	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$167004[esp+124]
  0020c	8b 54 24 28	 mov	 edx, DWORD PTR _rW$167004[esp+128]
  00210	2b 54 24 20	 sub	 edx, DWORD PTR _rW$167004[esp+120]
  00214	6a 01		 push	 1
  00216	51		 push	 ecx
  00217	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$167003[esp+132]
  0021b	52		 push	 edx
  0021c	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$167003[esp+132]
  00220	51		 push	 ecx
  00221	52		 push	 edx
  00222	50		 push	 eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0022e	6a 01		 push	 1
  00230	50		 push	 eax
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN55@SwitchWiza@5:

; 1034 : }

  00237	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	5b		 pop	 ebx
  0023e	33 cc		 xor	 ecx, esp
  00240	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00245	83 c4 6c	 add	 esp, 108		; 0000006cH
  00248	c3		 ret	 0
?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ENDP	; SwitchWizardToNonSysInplaceEncResumeMode
_TEXT	ENDS
PUBLIC	??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@		; `string'
PUBLIC	??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@ ; `string'
PUBLIC	??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@ ; `string'
PUBLIC	??_C@_0BG@IHLHCLIA@AfterWMInitTasks?38726?$AA@	; `string'
PUBLIC	??_C@_0BG@JHJMAFMN@AfterWMInitTasks?38861?$AA@	; `string'
PUBLIC	??_C@_0BG@GNNMJHNB@AfterWMInitTasks?38640?$AA@	; `string'
PUBLIC	??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ ; `string'
PUBLIC	??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@	; `string'
PUBLIC	??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@ ; `string'
PUBLIC	??_C@_0BG@ILBABNPD@AfterWMInitTasks?38467?$AA@	; `string'
PUBLIC	??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_AskNonSysInPlaceEncryptionResume:PROC
EXTRN	_NonSysInplaceEncInProgressElsewhere:PROC
EXTRN	_IsNonInstallMode:PROC
EXTRN	?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::RestartComputer
EXTRN	?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::RegisterBootDriver
EXTRN	_TextInfoDialogBox:PROC
;	COMDAT ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
CONST	SEGMENT
??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@ DB 'CONFIRM_RESTART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_ASK_LATER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_TERMINATE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_RETRY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_ASK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@
CONST	SEGMENT
??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@ DB 'OS_WIPING_NOT_FINI'
	DB	'SHED_ASK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@
CONST	SEGMENT
??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@ DB 'BOOT_PRETEST_FAILED'
	DB	'_RETRY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IHLHCLIA@AfterWMInitTasks?38726?$AA@
CONST	SEGMENT
??_C@_0BG@IHLHCLIA@AfterWMInitTasks?38726?$AA@ DB 'AfterWMInitTasks:8726', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JHJMAFMN@AfterWMInitTasks?38861?$AA@
CONST	SEGMENT
??_C@_0BG@JHJMAFMN@AfterWMInitTasks?38861?$AA@ DB 'AfterWMInitTasks:8861', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GNNMJHNB@AfterWMInitTasks?38640?$AA@
CONST	SEGMENT
??_C@_0BG@GNNMJHNB@AfterWMInitTasks?38640?$AA@ DB 'AfterWMInitTasks:8640', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
CONST	SEGMENT
??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ DB 'SYS_PARTITION_OR'
	DB	'_DRIVE_APPEARS_FULLY_ENCRYPTED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@
CONST	SEGMENT
??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@ DB 'NOTHING_TO_RESUME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@
CONST	SEGMENT
??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@ DB 'SYSTEM_ENCRYPTIO'
	DB	'N_SCHEDULED_BUT_PBA_FAILED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ILBABNPD@AfterWMInitTasks?38467?$AA@
CONST	SEGMENT
??_C@_0BG@ILBABNPD@AfterWMInitTasks?38467?$AA@ DB 'AfterWMInitTasks:8467', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@
CONST	SEGMENT
??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ DB 'CANNOT_DECRYPT_HIDDE'
	DB	'N_OS', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_AfterWMInitTasks$16 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff08H
	DD	FLAT:__catch$_AfterWMInitTasks$8
__catchsym$_AfterWMInitTasks$15 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff04H
	DD	FLAT:__catch$_AfterWMInitTasks$6
__catchsym$_AfterWMInitTasks$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff00H
	DD	FLAT:__catch$_AfterWMInitTasks$4
__catchsym$_AfterWMInitTasks$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff0cH
	DD	FLAT:__catch$_AfterWMInitTasks$2
__catchsym$_AfterWMInitTasks$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffefcH
	DD	FLAT:__catch$_AfterWMInitTasks$0
__ehfuncinfo$_AfterWMInitTasks DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$_AfterWMInitTasks
	DD	05H
	DD	FLAT:__tryblocktable$_AfterWMInitTasks
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_AfterWMInitTasks DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_AfterWMInitTasks DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$13
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$14
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$15
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$16
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _AfterWMInitTasks
_TEXT	SEGMENT
$T167062 = -448						; size = 94
$T167061 = -354						; size = 94
_e$135125 = -260					; size = 4
_e$135206 = -256					; size = 4
_e$135209 = -252					; size = 4
_e$135213 = -248					; size = 4
_e$135170 = -244					; size = 4
_rW$167197 = -240					; size = 16
_rW$167519 = -224					; size = 16
_rW$167362 = -208					; size = 16
_rW$167272 = -192					; size = 16
_rW$167444 = -176					; size = 16
_rW$167114 = -160					; size = 16
_tmpStr$135190 = -144					; size = 24
_rD$167196 = -120					; size = 16
_rD$167113 = -104					; size = 16
_rD$167271 = -88					; size = 16
_rD$167518 = -72					; size = 16
_rD$167361 = -56					; size = 16
_rD$167443 = -40					; size = 16
_hiddenOSCreationPhase$135167 = -24			; size = 4
_hwndDlg$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_tmp$167277 = 0						; size = 65
_tmp$167367 = 68					; size = 65
_tmp$167202 = 136					; size = 65
_tmp$167449 = 204					; size = 65
_tmp$167119 = 272					; size = 65
_tmp$167524 = 340					; size = 65
__$ArrayPad$ = 408					; size = 4
_AfterWMInitTasks PROC					; COMDAT
; _hwndDlg$ = ecx

; 8425 : {

  00000	55		 push	 ebp
  00001	8d ac 24 64 fe
	ff ff		 lea	 ebp, DWORD PTR [esp-412]
  00008	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_AfterWMInitTasks
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 98 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8426 : 	// Note that if bDirectSysEncModeCommand is not SYSENC_COMMAND_NONE, we already have the mutex.
; 8427 : 
; 8428 : 	// SYSENC_COMMAND_DECRYPT has the highest priority because it also performs uninstallation (restores the
; 8429 : 	// original contents of the first drive cylinder, etc.) so it must be attempted regardless of the phase
; 8430 : 	// or content of configuration files.
; 8431 : 	if (bDirectSysEncModeCommand == SYSENC_COMMAND_DECRYPT)

  0003f	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 4 ; bDirectSysEncModeCommand
  00046	8b f9		 mov	 edi, ecx
  00048	89 7d ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], edi
  0004b	0f 85 88 01 00
	00		 jne	 $LN83@AfterWMIni

; 8432 : 	{
; 8433 : 		if (IsHiddenOSRunning())

  00051	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00056	85 c0		 test	 eax, eax
  00058	74 12		 je	 SHORT $LN82@AfterWMIni

; 8434 : 		{
; 8435 : 			Warning ("CANNOT_DECRYPT_HIDDEN_OS");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@
  0005f	e8 00 00 00 00	 call	 _Warning
  00064	83 c4 04	 add	 esp, 4

; 8436 : 			AbortProcessSilent();

  00067	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN82@AfterWMIni:

; 8437 : 		}
; 8438 : 
; 8439 : 		// Add the wizard to the system startup sequence
; 8440 : 		ManageStartupSeqWiz (FALSE, "/acsysenc");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_09PIOBCILE@?1acsysenc?$AA@
  00071	33 db		 xor	 ebx, ebx
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00079	83 c4 08	 add	 esp, 8

; 8441 : 
; 8442 : 		ChangeSystemEncryptionStatus (SYSENC_STATUS_DECRYPTING);

  0007c	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00081	85 c0		 test	 eax, eax
  00083	75 0f		 jne	 SHORT $LN112@AfterWMIni
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0008a	e8 00 00 00 00	 call	 _Error
  0008f	83 c4 04	 add	 esp, 4
  00092	eb 1e		 jmp	 SHORT $LN108@AfterWMIni
$LN112@AfterWMIni:
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00099	c7 05 00 00 00
	00 58 02 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  000ad	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN108@AfterWMIni:

; 8443 : 		LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000bc	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  000c2	74 61		 je	 SHORT $LN166@AfterWMIni
  000c4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000ce	83 f8 15	 cmp	 eax, 21			; 00000015H
  000d1	75 3f		 jne	 SHORT $LN164@AfterWMIni
  000d3	6a 40		 push	 64			; 00000040H
  000d5	8d 85 10 01 00
	00		 lea	 eax, DWORD PTR _tmp$167119[ebp]
  000db	6a 58		 push	 88			; 00000058H
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _memset
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000e9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	8d 8d 10 01 00
	00		 lea	 ecx, DWORD PTR _tmp$167119[ebp]
  000f8	51		 push	 ecx
  000f9	52		 push	 edx
  000fa	88 9d 50 01 00
	00		 mov	 BYTE PTR _tmp$167119[ebp+64], bl
  00100	ff d6		 call	 esi
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00108	8d 85 10 01 00
	00		 lea	 eax, DWORD PTR _tmp$167119[ebp]
  0010e	50		 push	 eax
  0010f	51		 push	 ecx
  00110	ff d6		 call	 esi
$LN164@AfterWMIni:
  00112	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00118	52		 push	 edx
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0011f	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN166@AfterWMIni:
  00125	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  0012b	e8 00 00 00 00	 call	 _NormalCursor
  00130	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _rW$167114[ebp]
  00136	50		 push	 eax
  00137	68 23 04 00 00	 push	 1059			; 00000423H
  0013c	57		 push	 edi
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0014a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00150	53		 push	 ebx
  00151	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00156	57		 push	 edi
  00157	6a 7a		 push	 122			; 0000007aH
  00159	51		 push	 ecx
  0015a	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0016a	8d 55 98	 lea	 edx, DWORD PTR _rD$167113[ebp]
  0016d	52		 push	 edx
  0016e	57		 push	 edi
  0016f	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00174	c7 45 98 a2 00
	00 00		 mov	 DWORD PTR _rD$167113[ebp], 162 ; 000000a2H
  0017b	c7 45 9c 19 00
	00 00		 mov	 DWORD PTR _rD$167113[ebp+4], 25 ; 00000019H
  00182	89 5d a0	 mov	 DWORD PTR _rD$167113[ebp+8], ebx
  00185	89 5d a4	 mov	 DWORD PTR _rD$167113[ebp+12], ebx
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00193	3b c3		 cmp	 eax, ebx
  00195	0f 84 ab 0c 00
	00		 je	 $LN12@AfterWMIni
  0019b	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167114[ebp+12]
  001a1	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167114[ebp+4]
  001a7	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167114[ebp+8]
  001ad	2b 95 60 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167114[ebp]
  001b3	6a 01		 push	 1
  001b5	51		 push	 ecx
  001b6	8b 4d 9c	 mov	 ecx, DWORD PTR _rD$167113[ebp+4]
  001b9	52		 push	 edx
  001ba	8b 55 98	 mov	 edx, DWORD PTR _rD$167113[ebp]
$LN533@AfterWMIni:
  001bd	51		 push	 ecx
  001be	52		 push	 edx
  001bf	50		 push	 eax
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001cb	6a 01		 push	 1
  001cd	50		 push	 eax
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 8444 : 		return;

  001d4	e9 6d 0c 00 00	 jmp	 $LN12@AfterWMIni
$LN83@AfterWMIni:

; 8445 : 	}
; 8446 : 
; 8447 : 
; 8448 : 	if (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 8449 : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  001de	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  001e3	74 0b		 je	 SHORT $LN80@AfterWMIni
  001e5	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  001ea	0f 85 1e 01 00
	00		 jne	 $LN518@AfterWMIni
$LN80@AfterWMIni:

; 8450 : 	{
; 8451 : 		try
; 8452 : 		{
; 8453 : 			BootEncStatus = BootEncObj->GetStatus();

  001f0	8d 8d 9e fe ff
	ff		 lea	 ecx, DWORD PTR $T167061[ebp]
  001f6	51		 push	 ecx
  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  001fd	33 db		 xor	 ebx, ebx
  001ff	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00202	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00207	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0020c	8b f0		 mov	 esi, eax
  0020e	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00213	f3 a5		 rep movsd
  00215	66 a5		 movsw

; 8454 : 
; 8455 : 			if (!BootEncStatus.DriveMounted)

  00217	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  0021d	0f 85 b3 00 00
	00		 jne	 $LN75@AfterWMIni

; 8456 : 			{
; 8457 : 				if (!BootEncStatus.DeviceFilterActive)

  00223	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A, ebx
  00229	0f 85 82 00 00
	00		 jne	 $LN77@AfterWMIni

; 8458 : 				{
; 8459 : 					// This is an inconsistent state. SystemEncryptionStatus should never be SYSENC_STATUS_ENCRYPTING
; 8460 : 					// or SYSENC_STATUS_DECRYPTING when the drive filter is not active. Possible causes: 1) corrupted
; 8461 : 					// or stale config file, 2) corrupted system
; 8462 : 
; 8463 : 					// Fix the inconsistency
; 8464 : 					ManageStartupSeqWiz (TRUE, "");

  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00234	6a 01		 push	 1
  00236	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  0023b	83 c4 08	 add	 esp, 8

; 8465 : 					ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  0023e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00243	85 c0		 test	 eax, eax
  00245	75 0f		 jne	 SHORT $LN179@AfterWMIni
  00247	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0024c	e8 00 00 00 00	 call	 _Error
  00251	83 c4 04	 add	 esp, 4
  00254	eb 3e		 jmp	 SHORT $LN175@AfterWMIni
$LN179@AfterWMIni:
  00256	89 1d 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, ebx
  0025c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  00266	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0026b	85 c0		 test	 eax, eax
  0026d	75 1b		 jne	 SHORT $LN177@AfterWMIni
  0026f	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00274	3b c3		 cmp	 eax, ebx
  00276	74 0d		 je	 SHORT $LN176@AfterWMIni
  00278	53		 push	 ebx
  00279	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  0027e	83 c4 04	 add	 esp, 4
  00281	3b c3		 cmp	 eax, ebx
  00283	74 0f		 je	 SHORT $LN175@AfterWMIni
$LN176@AfterWMIni:
  00285	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN177@AfterWMIni:
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0028f	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN175@AfterWMIni:

; 8466 : 					EndMainDlg (MainDlg);

  00294	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0029a	e8 00 00 00 00	 call	 _EndMainDlg

; 8467 : 					InconsistencyResolved (SRC_POS);

  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@ILBABNPD@AfterWMInitTasks?38467?$AA@
  002a4	e8 00 00 00 00	 call	 _InconsistencyResolved
  002a9	83 c4 04	 add	 esp, 4
  002ac	e9 95 0b 00 00	 jmp	 $LN12@AfterWMIni
$LN77@AfterWMIni:

; 8468 : 					return;
; 8469 : 				}
; 8470 : 				else if (bDirectSysEncMode)

  002b1	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  002b7	74 1d		 je	 SHORT $LN75@AfterWMIni

; 8471 : 				{
; 8472 : 					// This is an inconsistent state. We have a direct system encryption command, 
; 8473 : 					// SystemEncryptionStatus is SYSENC_STATUS_ENCRYPTING or SYSENC_STATUS_DECRYPTING, the
; 8474 : 					// system drive is not 'mounted' and drive filter is active.  Possible causes: 1) The drive had
; 8475 : 					// been decrypted in the pre-boot environment. 2) The OS is not located on the lowest partition,
; 8476 : 					// the drive is to be fully encrypted, but the user rebooted before encryption reached the 
; 8477 : 					// system partition and then pressed Esc in the boot loader screen. 3) Corrupted or stale config
; 8478 : 					// file. 4) Damaged system.
; 8479 : 					
; 8480 : 					Warning ("SYSTEM_ENCRYPTION_SCHEDULED_BUT_PBA_FAILED");

  002b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@
$LN530@AfterWMIni:
  002be	e8 00 00 00 00	 call	 _Warning
  002c3	83 c4 04	 add	 esp, 4
$LN529@AfterWMIni:

; 8481 : 					EndMainDlg (MainDlg);

  002c6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
$LN19@AfterWMIni:
  002cc	e8 00 00 00 00	 call	 _EndMainDlg

; 8482 : 					return;

  002d1	e9 70 0b 00 00	 jmp	 $LN12@AfterWMIni
$LN75@AfterWMIni:
  002d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  002db	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  002de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002e5	eb 29		 jmp	 SHORT $LN99@AfterWMIni
__catch$_AfterWMInitTasks$0:

; 8483 : 				}
; 8484 : 			}
; 8485 : 		}
; 8486 : 		catch (Exception &e)
; 8487 : 		{
; 8488 : 			e.Show (MainDlg);

  002e7	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _e$135125[ebp]
  002ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  002f4	8b 12		 mov	 edx, DWORD PTR [edx]
  002f6	50		 push	 eax
  002f7	ff d2		 call	 edx

; 8489 : 		}

  002f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00300	b8 00 00 00 00	 mov	 eax, $LN517@AfterWMIni
  00305	c3		 ret	 0
$LN517@AfterWMIni:
  00306	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  0030b	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN518@AfterWMIni:
  0030e	33 db		 xor	 ebx, ebx
$LN99@AfterWMIni:

; 8490 : 	}
; 8491 : 
; 8492 : 
; 8493 : 	if (SystemEncryptionStatus != SYSENC_STATUS_PRETEST)

  00310	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00315	0f 84 04 03 00
	00		 je	 $LN72@AfterWMIni

; 8494 : 	{
; 8495 : 		// Handle system encryption command line arguments (if we're not in the Pretest phase).
; 8496 : 		// Note that if bDirectSysEncModeCommand is not SYSENC_COMMAND_NONE, we already have the mutex.
; 8497 : 		// Also note that SYSENC_COMMAND_DECRYPT is handled above.
; 8498 : 
; 8499 : 		switch (bDirectSysEncModeCommand)

  0031b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bDirectSysEncModeCommand@@3HA ; bDirectSysEncModeCommand
  00321	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00324	83 f9 05	 cmp	 ecx, 5
  00327	0f 87 f2 02 00
	00		 ja	 $LN72@AfterWMIni
  0032d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN534@AfterWMIni[ecx*4]
$LN71@AfterWMIni:

; 8500 : 		{
; 8501 : 		case SYSENC_COMMAND_RESUME:
; 8502 : 		case SYSENC_COMMAND_STARTUP_SEQ_RESUME:
; 8503 : 
; 8504 : 			if (bDirectSysEncModeCommand == SYSENC_COMMAND_STARTUP_SEQ_RESUME
; 8505 : 				&& AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDNO)

  00334	83 fa 02	 cmp	 edx, 2
  00337	75 16		 jne	 SHORT $LN70@AfterWMIni
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  0033e	e8 00 00 00 00	 call	 _AskWarnYesNo
  00343	83 c4 04	 add	 esp, 4
  00346	83 f8 07	 cmp	 eax, 7

; 8506 : 			{
; 8507 : 				EndMainDlg (MainDlg);
; 8508 : 				return;

  00349	0f 84 77 ff ff
	ff		 je	 $LN529@AfterWMIni
$LN70@AfterWMIni:

; 8509 : 			}
; 8510 : 
; 8511 : 			if (SysEncryptionOrDecryptionRequired ())

  0034f	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00354	85 c0		 test	 eax, eax
  00356	0f 84 30 01 00
	00		 je	 $LN69@AfterWMIni

; 8512 : 			{
; 8513 : 				if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 8514 : 					&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00361	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00366	74 14		 je	 SHORT $LN67@AfterWMIni
  00368	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  0036d	74 0d		 je	 SHORT $LN67@AfterWMIni

; 8515 : 				{
; 8516 : 					// If the config file with status was lost or not written correctly, we
; 8517 : 					// don't know whether to encrypt or decrypt (but we know that encryption or
; 8518 : 					// decryption is required). Ask the user to select encryption, decryption, 
; 8519 : 					// or cancel
; 8520 : 					if (!ResolveUnknownSysEncDirection ())

  0036f	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  00374	85 c0		 test	 eax, eax

; 8521 : 					{
; 8522 : 						EndMainDlg (MainDlg);
; 8523 : 						return;

  00376	0f 84 4a ff ff
	ff		 je	 $LN529@AfterWMIni
$LN67@AfterWMIni:

; 8524 : 					}
; 8525 : 				}
; 8526 : 
; 8527 : 				LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  0037c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00381	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00386	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  0038c	74 61		 je	 SHORT $LN233@AfterWMIni
  0038e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00398	83 f8 15	 cmp	 eax, 21			; 00000015H
  0039b	75 3f		 jne	 SHORT $LN231@AfterWMIni
  0039d	6a 40		 push	 64			; 00000040H
  0039f	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR _tmp$167202[ebp]
  003a5	6a 58		 push	 88			; 00000058H
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 _memset
  003ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  003b3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  003b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003bc	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR _tmp$167202[ebp]
  003c2	51		 push	 ecx
  003c3	52		 push	 edx
  003c4	88 9d c8 00 00
	00		 mov	 BYTE PTR _tmp$167202[ebp+64], bl
  003ca	ff d6		 call	 esi
  003cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  003d2	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR _tmp$167202[ebp]
  003d8	50		 push	 eax
  003d9	51		 push	 ecx
  003da	ff d6		 call	 esi
$LN231@AfterWMIni:
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  003e2	52		 push	 edx
  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  003e9	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN233@AfterWMIni:
  003ef	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  003f5	e8 00 00 00 00	 call	 _NormalCursor
  003fa	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _rW$167197[ebp]
  00400	50		 push	 eax
  00401	68 23 04 00 00	 push	 1059			; 00000423H
  00406	57		 push	 edi
  00407	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0040d	50		 push	 eax
  0040e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00414	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0041a	53		 push	 ebx
  0041b	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00420	57		 push	 edi
  00421	6a 7a		 push	 122			; 0000007aH
  00423	51		 push	 ecx
  00424	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  0042e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00434	8d 55 88	 lea	 edx, DWORD PTR _rD$167196[ebp]
  00437	52		 push	 edx
  00438	57		 push	 edi
  00439	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0043e	c7 45 88 a2 00
	00 00		 mov	 DWORD PTR _rD$167196[ebp], 162 ; 000000a2H
  00445	c7 45 8c 19 00
	00 00		 mov	 DWORD PTR _rD$167196[ebp+4], 25 ; 00000019H
  0044c	89 5d 90	 mov	 DWORD PTR _rD$167196[ebp+8], ebx
  0044f	89 5d 94	 mov	 DWORD PTR _rD$167196[ebp+12], ebx
  00452	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00458	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0045d	3b c3		 cmp	 eax, ebx
  0045f	0f 84 e1 09 00
	00		 je	 $LN12@AfterWMIni
  00465	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167197[ebp+12]
  0046b	2b 8d 14 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167197[ebp+4]
  00471	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167197[ebp+8]
  00477	2b 95 10 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167197[ebp]
  0047d	6a 01		 push	 1
  0047f	51		 push	 ecx
  00480	8b 4d 8c	 mov	 ecx, DWORD PTR _rD$167196[ebp+4]
  00483	52		 push	 edx
  00484	8b 55 88	 mov	 edx, DWORD PTR _rD$167196[ebp]

; 8528 : 				return;

  00487	e9 31 fd ff ff	 jmp	 $LN533@AfterWMIni
$LN69@AfterWMIni:

; 8529 : 			}
; 8530 : 			else
; 8531 : 			{
; 8532 : 				// Nothing to resume
; 8533 : 				Warning ("NOTHING_TO_RESUME");

  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@

; 8534 : 				EndMainDlg (MainDlg);
; 8535 : 
; 8536 : 				return;

  00491	e9 28 fe ff ff	 jmp	 $LN530@AfterWMIni
$LN65@AfterWMIni:

; 8537 : 			}
; 8538 : 			break;
; 8539 : 
; 8540 : 		case SYSENC_COMMAND_ENCRYPT:
; 8541 : 
; 8542 : 			if (SysDriveOrPartitionFullyEncrypted (FALSE))

  00496	53		 push	 ebx
  00497	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  0049c	83 c4 04	 add	 esp, 4
  0049f	85 c0		 test	 eax, eax
  004a1	74 1d		 je	 SHORT $LN64@AfterWMIni

; 8543 : 			{
; 8544 : 				Info ("SYS_PARTITION_OR_DRIVE_APPEARS_FULLY_ENCRYPTED");

  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
  004a8	e8 00 00 00 00	 call	 _Info
  004ad	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  004b3	83 c4 04	 add	 esp, 4
  004b6	e8 00 00 00 00	 call	 _EndMainDlg
  004bb	e9 86 09 00 00	 jmp	 $LN12@AfterWMIni
$LN64@AfterWMIni:

; 8545 : 				EndMainDlg (MainDlg);
; 8546 : 				return;
; 8547 : 			}
; 8548 : 
; 8549 : 			if (SysEncryptionOrDecryptionRequired ())

  004c0	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  004c5	85 c0		 test	 eax, eax
  004c7	0f 84 0c 01 00
	00		 je	 $LN63@AfterWMIni

; 8550 : 			{
; 8551 : 				// System partition/drive encryption process already initiated but is incomplete.
; 8552 : 				// If we were encrypting, resume the process directly. If we were decrypting, reverse 
; 8553 : 				// the process and start encrypting.
; 8554 : 
; 8555 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  004cd	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  004d2	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 8556 : 				LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  004d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  004dc	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  004e1	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  004e7	74 53		 je	 SHORT $LN293@AfterWMIni
  004e9	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  004f3	83 f8 15	 cmp	 eax, 21			; 00000015H
  004f6	75 32		 jne	 SHORT $LN291@AfterWMIni
  004f8	6a 40		 push	 64			; 00000040H
  004fa	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$167277[ebp]
  004fd	6a 58		 push	 88			; 00000058H
  004ff	51		 push	 ecx
  00500	e8 00 00 00 00	 call	 _memset
  00505	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0050a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  00510	83 c4 0c	 add	 esp, 12			; 0000000cH
  00513	8d 55 00	 lea	 edx, DWORD PTR _tmp$167277[ebp]
  00516	52		 push	 edx
  00517	50		 push	 eax
  00518	88 5d 40	 mov	 BYTE PTR _tmp$167277[ebp+64], bl
  0051b	ff d6		 call	 esi
  0051d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00523	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$167277[ebp]
  00526	51		 push	 ecx
  00527	52		 push	 edx
  00528	ff d6		 call	 esi
$LN291@AfterWMIni:
  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0052f	50		 push	 eax
  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00536	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN293@AfterWMIni:
  0053c	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00542	e8 00 00 00 00	 call	 _NormalCursor
  00547	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167272[ebp]
  0054d	51		 push	 ecx
  0054e	68 23 04 00 00	 push	 1059			; 00000423H
  00553	57		 push	 edi
  00554	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0055a	50		 push	 eax
  0055b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00561	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00567	53		 push	 ebx
  00568	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0056d	57		 push	 edi
  0056e	6a 7a		 push	 122			; 0000007aH
  00570	52		 push	 edx
  00571	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  0057b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00581	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00586	8d 45 a8	 lea	 eax, DWORD PTR _rD$167271[ebp]
  00589	50		 push	 eax
  0058a	57		 push	 edi
  0058b	c7 45 a8 a2 00
	00 00		 mov	 DWORD PTR _rD$167271[ebp], 162 ; 000000a2H
  00592	c7 45 ac 19 00
	00 00		 mov	 DWORD PTR _rD$167271[ebp+4], 25 ; 00000019H
  00599	89 5d b0	 mov	 DWORD PTR _rD$167271[ebp+8], ebx
  0059c	89 5d b4	 mov	 DWORD PTR _rD$167271[ebp+12], ebx
  0059f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  005a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  005aa	3b c3		 cmp	 eax, ebx
  005ac	0f 84 94 08 00
	00		 je	 $LN12@AfterWMIni
  005b2	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167272[ebp+12]
  005b8	2b 8d 44 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167272[ebp+4]
  005be	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167272[ebp+8]
  005c4	2b 95 40 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167272[ebp]
  005ca	6a 01		 push	 1
  005cc	51		 push	 ecx
  005cd	8b 4d ac	 mov	 ecx, DWORD PTR _rD$167271[ebp+4]
  005d0	52		 push	 edx
  005d1	8b 55 a8	 mov	 edx, DWORD PTR _rD$167271[ebp]

; 8557 : 				return;

  005d4	e9 e4 fb ff ff	 jmp	 $LN533@AfterWMIni
$LN63@AfterWMIni:

; 8558 : 			}
; 8559 : 			else
; 8560 : 			{
; 8561 : 				// Initiate the Pretest preparation phase
; 8562 : 				if (!SwitchWizardToSysEncMode ())

  005d9	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  005de	85 c0		 test	 eax, eax
  005e0	0f 85 60 08 00
	00		 jne	 $LN12@AfterWMIni
  005e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg

; 8563 : 				{
; 8564 : 					bDirectSysEncMode = FALSE;

  005ec	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  005f2	e8 00 00 00 00	 call	 _EndMainDlg
  005f7	e9 4a 08 00 00	 jmp	 $LN12@AfterWMIni
$LN60@AfterWMIni:

; 8565 : 					EndMainDlg (MainDlg);
; 8566 : 				}
; 8567 : 				return;
; 8568 : 			}
; 8569 : 
; 8570 : 			break;
; 8571 : 
; 8572 : 		case SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV:
; 8573 : 		case SYSENC_COMMAND_CREATE_HIDDEN_OS:
; 8574 : 
; 8575 : 			if (!SwitchWizardToHiddenOSMode ())

  005fc	e8 00 00 00 00	 call	 ?SwitchWizardToHiddenOSMode@@YAHXZ ; SwitchWizardToHiddenOSMode
  00601	85 c0		 test	 eax, eax
  00603	0f 85 3d 08 00
	00		 jne	 $LN12@AfterWMIni
  00609	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg

; 8576 : 			{
; 8577 : 				bDirectSysEncMode = FALSE;

  0060f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  00615	e8 00 00 00 00	 call	 _EndMainDlg
  0061a	e9 27 08 00 00	 jmp	 $LN12@AfterWMIni
$LN72@AfterWMIni:

; 8578 : 				EndMainDlg (MainDlg);
; 8579 : 			}
; 8580 : 			return;
; 8581 : 		}
; 8582 : 	}
; 8583 : 
; 8584 : 
; 8585 : 	if (!bDirectSysEncMode
; 8586 : 		|| bDirectSysEncMode && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  0061f	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  00625	74 07		 je	 SHORT $LN57@AfterWMIni
  00627	3b c3		 cmp	 eax, ebx

; 8587 : 	{
; 8588 : 		// Handle system encryption cases where the wizard did not start even though it
; 8589 : 		// was added to the startup sequence, as well as other weird cases and "leftovers"
; 8590 : 
; 8591 : 		if (SystemEncryptionStatus != SYSENC_STATUS_NONE
; 8592 : 			&& SystemEncryptionStatus != SYSENC_STATUS_PRETEST
; 8593 : 			&& SysEncryptionOrDecryptionRequired ())

  00629	e9 6b 02 00 00	 jmp	 $LN527@AfterWMIni
$LN57@AfterWMIni:
  0062e	3b c3		 cmp	 eax, ebx
  00630	0f 84 c1 01 00
	00		 je	 $LN56@AfterWMIni
  00636	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0063b	0f 84 c1 01 00
	00		 je	 $LN511@AfterWMIni
  00641	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00646	85 c0		 test	 eax, eax
  00648	0f 84 a4 01 00
	00		 je	 $LN519@AfterWMIni

; 8594 : 		{
; 8595 : 			// System encryption/decryption had been in progress and did not finish
; 8596 : 
; 8597 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  0064e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00653	85 c0		 test	 eax, eax
  00655	0f 84 82 02 00
	00		 je	 $LN45@AfterWMIni

; 8598 : 			{
; 8599 : 				if (AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)

  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  00660	e8 00 00 00 00	 call	 _AskWarnYesNo
  00665	83 c4 04	 add	 esp, 4
  00668	83 f8 06	 cmp	 eax, 6
  0066b	0f 85 67 02 00
	00		 jne	 $LN54@AfterWMIni

; 8600 : 				{
; 8601 : 					bDirectSysEncMode = TRUE;
; 8602 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  00671	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00677	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  00681	83 f9 02	 cmp	 ecx, 2
  00684	74 57		 je	 SHORT $LN310@AfterWMIni

; 8768 : 						{
; 8769 : 						case 1:
; 8770 : 							// User wants to restart and continue/retry
; 8771 : 							bAnswerTerminate = FALSE;
; 8772 : 							bAnswerRetry = TRUE;
; 8773 : 							break;
; 8774 : 
; 8775 : 						case 2:
; 8776 : 							// User doesn't want to retry but wants to terminate the entire process of hidden OS creation
; 8777 : 							bAnswerTerminate = TRUE;
; 8778 : 							bAnswerRetry = FALSE;
; 8779 : 							break;
; 8780 : 
; 8781 : 						default:
; 8782 : 							// User doesn't want to do anything now
; 8783 : 							bAnswerTerminate = FALSE;
; 8784 : 							bAnswerRetry = FALSE;

  00686	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  0068c	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00691	85 c0		 test	 eax, eax
  00693	75 0f		 jne	 SHORT $LN306@AfterWMIni
  00695	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0069a	e8 00 00 00 00	 call	 _Error
  0069f	83 c4 04	 add	 esp, 4
  006a2	eb 49		 jmp	 SHORT $LN302@AfterWMIni

; 8600 : 				{
; 8601 : 					bDirectSysEncMode = TRUE;
; 8602 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN306@AfterWMIni:
  006a4	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  006a9	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  006af	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  006b5	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  006bb	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  006c1	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  006c7	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  006cd	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  006d3	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
$LN310@AfterWMIni:
  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  006e2	f7 d8		 neg	 eax
  006e4	1b c0		 sbb	 eax, eax
  006e6	f7 d8		 neg	 eax
  006e8	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice
$LN302@AfterWMIni:

; 8603 : 					LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  006f2	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  006f7	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  006fd	74 56		 je	 SHORT $LN365@AfterWMIni
  006ff	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00709	83 f8 15	 cmp	 eax, 21			; 00000015H
  0070c	75 35		 jne	 SHORT $LN363@AfterWMIni
  0070e	6a 40		 push	 64			; 00000040H
  00710	8d 4d 44	 lea	 ecx, DWORD PTR _tmp$167367[ebp]
  00713	6a 58		 push	 88			; 00000058H
  00715	51		 push	 ecx
  00716	e8 00 00 00 00	 call	 _memset
  0071b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00720	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  00726	83 c4 0c	 add	 esp, 12			; 0000000cH
  00729	8d 55 44	 lea	 edx, DWORD PTR _tmp$167367[ebp]
  0072c	52		 push	 edx
  0072d	50		 push	 eax
  0072e	88 9d 84 00 00
	00		 mov	 BYTE PTR _tmp$167367[ebp+64], bl
  00734	ff d6		 call	 esi
  00736	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0073c	8d 4d 44	 lea	 ecx, DWORD PTR _tmp$167367[ebp]
  0073f	51		 push	 ecx
  00740	52		 push	 edx
  00741	ff d6		 call	 esi
$LN363@AfterWMIni:
  00743	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00748	50		 push	 eax
  00749	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0074f	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN365@AfterWMIni:
  00755	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  0075b	e8 00 00 00 00	 call	 _NormalCursor
  00760	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167362[ebp]
  00766	51		 push	 ecx
  00767	68 23 04 00 00	 push	 1059			; 00000423H
  0076c	57		 push	 edi
  0076d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00773	50		 push	 eax
  00774	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0077a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00780	53		 push	 ebx
  00781	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00786	57		 push	 edi
  00787	6a 7a		 push	 122			; 0000007aH
  00789	52		 push	 edx
  0078a	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00794	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0079a	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0079f	8d 45 c8	 lea	 eax, DWORD PTR _rD$167361[ebp]
  007a2	50		 push	 eax
  007a3	57		 push	 edi
  007a4	c7 45 c8 a2 00
	00 00		 mov	 DWORD PTR _rD$167361[ebp], 162 ; 000000a2H
  007ab	c7 45 cc 19 00
	00 00		 mov	 DWORD PTR _rD$167361[ebp+4], 25 ; 00000019H
  007b2	89 5d d0	 mov	 DWORD PTR _rD$167361[ebp+8], ebx
  007b5	89 5d d4	 mov	 DWORD PTR _rD$167361[ebp+12], ebx
  007b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  007be	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  007c3	3b c3		 cmp	 eax, ebx
  007c5	0f 84 7b 06 00
	00		 je	 $LN12@AfterWMIni
  007cb	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167362[ebp+12]
  007d1	2b 8d 34 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167362[ebp+4]
  007d7	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167362[ebp+8]
  007dd	2b 95 30 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167362[ebp]
  007e3	6a 01		 push	 1
  007e5	51		 push	 ecx
  007e6	8b 4d cc	 mov	 ecx, DWORD PTR _rD$167361[ebp+4]
  007e9	52		 push	 edx
  007ea	8b 55 c8	 mov	 edx, DWORD PTR _rD$167361[ebp]

; 8604 : 					return;

  007ed	e9 cb f9 ff ff	 jmp	 $LN533@AfterWMIni
$LN519@AfterWMIni:

; 8605 : 				}
; 8606 : 				else
; 8607 : 					CloseSysEncMutex ();
; 8608 : 			}
; 8609 : 		}

  007f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
$LN56@AfterWMIni:

; 8610 : 
; 8611 : 		else if (SystemEncryptionStatus == SYSENC_STATUS_PRETEST)

  007f7	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  007fc	0f 85 8e 00 00
	00		 jne	 $LN51@AfterWMIni
$LN511@AfterWMIni:

; 8612 : 		{
; 8613 : 			// System pretest had been in progress but we were not launched during the startup seq
; 8614 : 
; 8615 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  00802	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00807	85 c0		 test	 eax, eax
  00809	0f 84 ce 00 00
	00		 je	 $LN45@AfterWMIni

; 8616 : 			{
; 8617 : 				// The pretest has "priority handling"
; 8618 : 				bDirectSysEncMode = TRUE;
; 8619 : 				ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  0080f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00815	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  0081f	83 f9 02	 cmp	 ecx, 2
  00822	74 5a		 je	 SHORT $LN382@AfterWMIni

; 8768 : 						{
; 8769 : 						case 1:
; 8770 : 							// User wants to restart and continue/retry
; 8771 : 							bAnswerTerminate = FALSE;
; 8772 : 							bAnswerRetry = TRUE;
; 8773 : 							break;
; 8774 : 
; 8775 : 						case 2:
; 8776 : 							// User doesn't want to retry but wants to terminate the entire process of hidden OS creation
; 8777 : 							bAnswerTerminate = TRUE;
; 8778 : 							bAnswerRetry = FALSE;
; 8779 : 							break;
; 8780 : 
; 8781 : 						default:
; 8782 : 							// User doesn't want to do anything now
; 8783 : 							bAnswerTerminate = FALSE;
; 8784 : 							bAnswerRetry = FALSE;

  00824	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  0082a	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0082f	85 c0		 test	 eax, eax
  00831	75 12		 jne	 SHORT $LN378@AfterWMIni
  00833	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00838	e8 00 00 00 00	 call	 _Error
  0083d	83 c4 04	 add	 esp, 4
  00840	e9 98 00 00 00	 jmp	 $LN45@AfterWMIni

; 8616 : 			{
; 8617 : 				// The pretest has "priority handling"
; 8618 : 				bDirectSysEncMode = TRUE;
; 8619 : 				ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN378@AfterWMIni:
  00845	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0084a	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00850	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  00856	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  0085c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00862	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  00868	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  0086e	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00874	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
$LN382@AfterWMIni:
  0087e	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00883	f7 d8		 neg	 eax
  00885	1b c0		 sbb	 eax, eax
  00887	f7 d8		 neg	 eax
  00889	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice

; 8620 : 
; 8621 : 				/* Do not return yet -- the principal pretest handler is below. */
; 8622 : 			}
; 8623 : 		}
; 8624 : 
; 8625 : 		else if ((SystemEncryptionStatus == SYSENC_STATUS_NONE || SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  0088e	eb 4d		 jmp	 SHORT $LN45@AfterWMIni
$LN51@AfterWMIni:

; 8626 : 			&& !BootEncStatus.DriveEncrypted 
; 8627 : 			&& (BootEncStatus.DriveMounted || BootEncStatus.VolumeHeaderPresent))

  00890	3b c3		 cmp	 eax, ebx
  00892	74 07		 je	 SHORT $LN47@AfterWMIni
  00894	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
$LN527@AfterWMIni:
  00899	75 42		 jne	 SHORT $LN45@AfterWMIni
$LN47@AfterWMIni:
  0089b	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  008a1	75 3a		 jne	 SHORT $LN45@AfterWMIni
  008a3	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  008a9	75 08		 jne	 SHORT $LN46@AfterWMIni
  008ab	39 1d 0a 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, ebx
  008b1	74 2a		 je	 SHORT $LN45@AfterWMIni
$LN46@AfterWMIni:

; 8628 : 		{
; 8629 : 			// The pretest may have been in progress but we can't be sure (it is not in the config file).
; 8630 : 			// Another possibility is that the user had finished decrypting the drive, but the config file
; 8631 : 			// was not correctly updated. In both cases the best thing we can do is remove the header and 
; 8632 : 			// deinstall. Otherwise, the result might be some kind of deadlock.
; 8633 : 
; 8634 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  008b3	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008b8	85 c0		 test	 eax, eax
  008ba	74 21		 je	 SHORT $LN45@AfterWMIni

; 8635 : 			{
; 8636 : 				WaitCursor ();

  008bc	e8 00 00 00 00	 call	 _WaitCursor

; 8637 : 
; 8638 : 				ForceRemoveSysEnc();

  008c1	e8 00 00 00 00	 call	 ?ForceRemoveSysEnc@@YAHXZ ; ForceRemoveSysEnc

; 8639 : 
; 8640 : 				InconsistencyResolved (SRC_POS);

  008c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GNNMJHNB@AfterWMInitTasks?38640?$AA@
  008cb	e8 00 00 00 00	 call	 _InconsistencyResolved
  008d0	83 c4 04	 add	 esp, 4

; 8641 : 
; 8642 : 				NormalCursor();

  008d3	e8 00 00 00 00	 call	 _NormalCursor
$LN54@AfterWMIni:

; 8643 : 				CloseSysEncMutex ();

  008d8	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN45@AfterWMIni:

; 8644 : 			}
; 8645 : 		}
; 8646 : 	}
; 8647 : 
; 8648 : 	if (bDirectSysEncMode && CreateSysEncMutex ())

  008dd	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  008e3	0f 84 be 04 00
	00		 je	 $LN44@AfterWMIni
  008e9	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008ee	85 c0		 test	 eax, eax
  008f0	0f 84 b1 04 00
	00		 je	 $LN44@AfterWMIni

; 8649 : 	{
; 8650 : 		// We were launched either by Mount or by the system (startup sequence). Most of such cases should have 
; 8651 : 		// been handled above already. Here we handle only the pretest phase (which can also be a hidden OS 
; 8652 : 		// creation phase actually) and possible inconsistencies.
; 8653 : 
; 8654 : 		switch (SystemEncryptionStatus)

  008f6	81 3d 00 00 00
	00 c8 00 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  00900	74 30		 je	 SHORT $LN41@AfterWMIni

; 8849 : 					}
; 8850 : 				}
; 8851 : 			}
; 8852 : 			break;
; 8853 : 
; 8854 : 		default:
; 8855 : 
; 8856 : 			// Unexpected progress status -- fix the inconsistency
; 8857 : 
; 8858 : 			ManageStartupSeqWiz (TRUE, "");

  00902	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00907	6a 01		 push	 1
  00909	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 8859 : 			ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  0090e	33 f6		 xor	 esi, esi
  00910	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 8860 : 			EndMainDlg (MainDlg);

  00915	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0091b	e8 00 00 00 00	 call	 _EndMainDlg

; 8861 : 			InconsistencyResolved (SRC_POS);

  00920	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JHJMAFMN@AfterWMInitTasks?38861?$AA@
  00925	e8 00 00 00 00	 call	 _InconsistencyResolved
  0092a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8862 : 			return;

  0092d	e9 14 05 00 00	 jmp	 $LN12@AfterWMIni
$LN41@AfterWMIni:

; 8655 : 		{
; 8656 : 		case SYSENC_STATUS_PRETEST:
; 8657 : 			{
; 8658 : 				unsigned int hiddenOSCreationPhase = DetermineHiddenOSCreationPhase();

  00932	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase

; 8659 : 
; 8660 : 				bHiddenOS = (hiddenOSCreationPhase != TC_HIDDEN_OS_CREATION_PHASE_NONE);

  00937	33 c9		 xor	 ecx, ecx
  00939	3b c3		 cmp	 eax, ebx
  0093b	0f 95 c1	 setne	 cl

; 8661 : 
; 8662 : 				// Evaluate the results of the system encryption pretest (or of the hidden OS creation process)
; 8663 : 
; 8664 : 				try
; 8665 : 				{
; 8666 : 					BootEncStatus = BootEncObj->GetStatus();

  0093e	8d 95 40 fe ff
	ff		 lea	 edx, DWORD PTR $T167062[ebp]
  00944	52		 push	 edx
  00945	89 45 e8	 mov	 DWORD PTR _hiddenOSCreationPhase$135167[ebp], eax
  00948	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0094f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, ecx ; bHiddenOS
  00955	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0095b	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00960	8b f0		 mov	 esi, eax

; 8677 : 				{
; 8678 : 					/* Pretest successful or hidden OS has been booted during the process of hidden OS creation. */
; 8679 : 
; 8680 : 					switch (hiddenOSCreationPhase)

  00962	8b 45 e8	 mov	 eax, DWORD PTR _hiddenOSCreationPhase$135167[ebp]
  00965	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0096a	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0096f	f3 a5		 rep movsd
  00971	66 a5		 movsw
  00973	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 8674 : 				}
; 8675 : 
; 8676 : 				if (BootEncStatus.DriveMounted)

  0097a	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  00980	0f 84 9e 02 00
	00		 je	 $LN39@AfterWMIni

; 8677 : 				{
; 8678 : 					/* Pretest successful or hidden OS has been booted during the process of hidden OS creation. */
; 8679 : 
; 8680 : 					switch (hiddenOSCreationPhase)

  00986	2b c3		 sub	 eax, ebx
  00988	0f 84 56 01 00
	00		 je	 $LN36@AfterWMIni
  0098e	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00993	74 3c		 je	 SHORT $LN34@AfterWMIni
  00995	83 e8 40	 sub	 eax, 64			; 00000040H
  00998	74 1d		 je	 SHORT $LN33@AfterWMIni

; 8719 : 
; 8720 : 						EndMainDlg (MainDlg);
; 8721 : 						return;
; 8722 : 
; 8723 : 					default:
; 8724 : 
; 8725 : 						// Unexpected/unknown status
; 8726 : 						ReportUnexpectedState (SRC_POS);

  0099a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IHLHCLIA@AfterWMInitTasks?38726?$AA@
  0099f	e8 00 00 00 00	 call	 _ReportUnexpectedState
  009a4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  009aa	83 c4 04	 add	 esp, 4
  009ad	e8 00 00 00 00	 call	 _EndMainDlg
  009b2	e9 8f 04 00 00	 jmp	 $LN12@AfterWMIni
$LN33@AfterWMIni:

; 8713 : 
; 8714 : 					case TC_HIDDEN_OS_CREATION_PHASE_WIPED:
; 8715 : 
; 8716 : 						// Hidden OS has been booted and the original OS wiped. Now the user is required to install a new, decoy, OS.
; 8717 : 
; 8718 : 						TextInfoDialogBox (TC_TBXID_DECOY_OS_INSTRUCTIONS);

  009b7	6a 03		 push	 3
  009b9	e8 00 00 00 00	 call	 _TextInfoDialogBox
  009be	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  009c4	83 c4 04	 add	 esp, 4
  009c7	e8 00 00 00 00	 call	 _EndMainDlg
  009cc	e9 75 04 00 00	 jmp	 $LN12@AfterWMIni
$LN34@AfterWMIni:

; 8706 : 
; 8707 : 					case TC_HIDDEN_OS_CREATION_PHASE_WIPING:
; 8708 : 
; 8709 : 						// Hidden OS has been booted when we are supposed to wipe the original OS
; 8710 : 
; 8711 : 						LoadPage (hwndDlg, SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE);

  009d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  009d6	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  009db	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  009e1	74 61		 je	 SHORT $LN497@AfterWMIni
  009e3	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  009ed	83 f8 15	 cmp	 eax, 21			; 00000015H
  009f0	75 3f		 jne	 SHORT $LN495@AfterWMIni
  009f2	6a 40		 push	 64			; 00000040H
  009f4	8d 85 54 01 00
	00		 lea	 eax, DWORD PTR _tmp$167524[ebp]
  009fa	6a 58		 push	 88			; 00000058H
  009fc	50		 push	 eax
  009fd	e8 00 00 00 00	 call	 _memset
  00a02	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00a08	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  00a0e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a11	8d 8d 54 01 00
	00		 lea	 ecx, DWORD PTR _tmp$167524[ebp]
  00a17	51		 push	 ecx
  00a18	52		 push	 edx
  00a19	88 9d 94 01 00
	00		 mov	 BYTE PTR _tmp$167524[ebp+64], bl
  00a1f	ff d6		 call	 esi
  00a21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00a27	8d 85 54 01 00
	00		 lea	 eax, DWORD PTR _tmp$167524[ebp]
  00a2d	50		 push	 eax
  00a2e	51		 push	 ecx
  00a2f	ff d6		 call	 esi
$LN495@AfterWMIni:
  00a31	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00a37	52		 push	 edx
  00a38	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00a3e	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN497@AfterWMIni:
  00a44	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00a4a	e8 00 00 00 00	 call	 _NormalCursor
  00a4f	8b 75 ec	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00a52	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _rW$167519[ebp]
  00a58	50		 push	 eax
  00a59	68 23 04 00 00	 push	 1059			; 00000423H
  00a5e	56		 push	 esi
  00a5f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00a65	50		 push	 eax
  00a66	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00a6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00a72	53		 push	 ebx
  00a73	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00a78	56		 push	 esi
  00a79	6a 6c		 push	 108			; 0000006cH
  00a7b	51		 push	 ecx
  00a7c	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 40 ; nCurPageNo, 00000028H
  00a86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00a8c	8d 55 b8	 lea	 edx, DWORD PTR _rD$167518[ebp]
  00a8f	52		 push	 edx
  00a90	56		 push	 esi
  00a91	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00a96	c7 45 b8 a2 00
	00 00		 mov	 DWORD PTR _rD$167518[ebp], 162 ; 000000a2H
  00a9d	c7 45 bc 19 00
	00 00		 mov	 DWORD PTR _rD$167518[ebp+4], 25 ; 00000019H
  00aa4	89 5d c0	 mov	 DWORD PTR _rD$167518[ebp+8], ebx
  00aa7	89 5d c4	 mov	 DWORD PTR _rD$167518[ebp+12], ebx
  00aaa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00ab0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00ab5	3b c3		 cmp	 eax, ebx
  00ab7	0f 84 89 03 00
	00		 je	 $LN12@AfterWMIni
  00abd	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167519[ebp+12]
  00ac3	2b 8d 24 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167519[ebp+4]
  00ac9	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167519[ebp+8]
  00acf	2b 95 20 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167519[ebp]
  00ad5	6a 01		 push	 1
  00ad7	51		 push	 ecx
  00ad8	8b 4d bc	 mov	 ecx, DWORD PTR _rD$167518[ebp+4]
  00adb	52		 push	 edx
  00adc	8b 55 b8	 mov	 edx, DWORD PTR _rD$167518[ebp]

; 8712 : 						return;

  00adf	e9 d9 f6 ff ff	 jmp	 $LN533@AfterWMIni
$LN36@AfterWMIni:

; 8681 : 					{
; 8682 : 					case TC_HIDDEN_OS_CREATION_PHASE_NONE:
; 8683 : 
; 8684 : 						// Pretest successful (or the hidden OS has been booted for the first time since the user started installing a new decoy OS)
; 8685 : 
; 8686 : 						if (IsHiddenOSRunning())

  00ae4	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00ae9	85 c0		 test	 eax, eax
  00aeb	74 26		 je	 SHORT $LN35@AfterWMIni
$LN107@AfterWMIni:

; 8687 : 						{
; 8688 : 							// The hidden OS has been booted for the first time since the user started installing a
; 8689 : 							// new decoy OS (presumably, our MBR config flags have been erased).
; 8690 : 							
; 8691 : 							// As for things we are responsible for, the process of hidden OS creation is completed
; 8692 : 							// (the rest is up to the user).
; 8693 : 
; 8694 : 							ManageStartupSeqWiz (TRUE, "");

  00aed	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00af2	6a 01		 push	 1
  00af4	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00af9	83 c4 08	 add	 esp, 8

; 8695 : 							ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00afc	33 f6		 xor	 esi, esi
  00afe	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus
  00b03	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00b09	e8 00 00 00 00	 call	 _EndMainDlg
  00b0e	e9 33 03 00 00	 jmp	 $LN12@AfterWMIni
$LN35@AfterWMIni:

; 8696 : 
; 8697 : 							EndMainDlg (MainDlg);
; 8698 : 							
; 8699 : 							return;
; 8700 : 						}
; 8701 : 
; 8702 : 						// Pretest successful (no hidden operating system involved)
; 8703 : 
; 8704 : 						LoadPage (hwndDlg, SYSENC_PRETEST_RESULT_PAGE);

  00b13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00b18	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00b1d	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00b23	74 5f		 je	 SHORT $LN437@AfterWMIni
  00b25	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00b2f	83 f8 15	 cmp	 eax, 21			; 00000015H
  00b32	75 3e		 jne	 SHORT $LN435@AfterWMIni
  00b34	6a 40		 push	 64			; 00000040H
  00b36	8d 8d cc 00 00
	00		 lea	 ecx, DWORD PTR _tmp$167449[ebp]
  00b3c	6a 58		 push	 88			; 00000058H
  00b3e	51		 push	 ecx
  00b3f	e8 00 00 00 00	 call	 _memset
  00b44	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00b49	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  00b4f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b52	8d 95 cc 00 00
	00		 lea	 edx, DWORD PTR _tmp$167449[ebp]
  00b58	52		 push	 edx
  00b59	50		 push	 eax
  00b5a	88 9d 0c 01 00
	00		 mov	 BYTE PTR _tmp$167449[ebp+64], bl
  00b60	ff d6		 call	 esi
  00b62	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00b68	8d 8d cc 00 00
	00		 lea	 ecx, DWORD PTR _tmp$167449[ebp]
  00b6e	51		 push	 ecx
  00b6f	52		 push	 edx
  00b70	ff d6		 call	 esi
$LN435@AfterWMIni:
  00b72	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00b77	50		 push	 eax
  00b78	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00b7e	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN437@AfterWMIni:
  00b84	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00b8a	e8 00 00 00 00	 call	 _NormalCursor
  00b8f	8b 75 ec	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00b92	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167444[ebp]
  00b98	51		 push	 ecx
  00b99	68 23 04 00 00	 push	 1059			; 00000423H
  00b9e	56		 push	 esi
  00b9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00ba5	50		 push	 eax
  00ba6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00bac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00bb2	53		 push	 ebx
  00bb3	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00bb8	56		 push	 esi
  00bb9	6a 6c		 push	 108			; 0000006cH
  00bbb	52		 push	 edx
  00bbc	c7 05 00 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 30 ; nCurPageNo, 0000001eH
  00bc6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00bcc	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00bd1	8d 45 d8	 lea	 eax, DWORD PTR _rD$167443[ebp]
  00bd4	50		 push	 eax
  00bd5	56		 push	 esi
  00bd6	c7 45 d8 a2 00
	00 00		 mov	 DWORD PTR _rD$167443[ebp], 162 ; 000000a2H
  00bdd	c7 45 dc 19 00
	00 00		 mov	 DWORD PTR _rD$167443[ebp+4], 25 ; 00000019H
  00be4	89 5d e0	 mov	 DWORD PTR _rD$167443[ebp+8], ebx
  00be7	89 5d e4	 mov	 DWORD PTR _rD$167443[ebp+12], ebx
  00bea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00bf0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00bf5	3b c3		 cmp	 eax, ebx
  00bf7	0f 84 49 02 00
	00		 je	 $LN12@AfterWMIni
  00bfd	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167444[ebp+12]
  00c03	2b 8d 54 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167444[ebp+4]
  00c09	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167444[ebp+8]
  00c0f	2b 95 50 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167444[ebp]
  00c15	6a 01		 push	 1
  00c17	51		 push	 ecx
  00c18	8b 4d dc	 mov	 ecx, DWORD PTR _rD$167443[ebp+4]
  00c1b	52		 push	 edx
  00c1c	8b 55 d8	 mov	 edx, DWORD PTR _rD$167443[ebp]

; 8705 : 						return;

  00c1f	e9 99 f5 ff ff	 jmp	 $LN533@AfterWMIni
$LN39@AfterWMIni:

; 8727 : 						EndMainDlg (MainDlg);
; 8728 : 						return;
; 8729 : 					}
; 8730 : 				}
; 8731 : 				else
; 8732 : 				{
; 8733 : 					BOOL bAnswerTerminate = FALSE, bAnswerRetry = FALSE;
; 8734 : 
; 8735 : 					/* Pretest failed 
; 8736 : 					or hidden OS cloning has been interrupted (and non-hidden OS is running)
; 8737 : 					or wiping of the original OS has not been started (and non-hidden OS is running) */
; 8738 : 
; 8739 : 					if (hiddenOSCreationPhase == TC_HIDDEN_OS_CREATION_PHASE_NONE)

  00c24	3b c3		 cmp	 eax, ebx
  00c26	75 36		 jne	 SHORT $LN30@AfterWMIni

; 8740 : 					{
; 8741 : 						// Pretest failed (no hidden operating system involved)
; 8742 : 
; 8743 : 						if (AskWarnYesNo ("BOOT_PRETEST_FAILED_RETRY") == IDYES)

  00c28	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@
  00c2d	e8 00 00 00 00	 call	 _AskWarnYesNo
  00c32	83 c4 04	 add	 esp, 4
  00c35	83 f8 06	 cmp	 eax, 6
  00c38	0f 84 83 00 00
	00		 je	 $LN24@AfterWMIni
$LN514@AfterWMIni:

; 8820 : 						}
; 8821 : 
; 8822 : 						EndMainDlg (MainDlg);
; 8823 : 						return;
; 8824 : 					}
; 8825 : 					else if (bAnswerTerminate)
; 8826 : 					{
; 8827 : 						// User doesn't want to retry pretest (or OS cloning), but to terminate the entire process
; 8828 : 
; 8829 : 						try
; 8830 : 						{
; 8831 : 							BootEncObj->Deinstall (true);

  00c3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00c44	6a 01		 push	 1
  00c46	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  00c4d	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
  00c52	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00c59	e9 8f fe ff ff	 jmp	 $LN107@AfterWMIni
$LN30@AfterWMIni:

; 8744 : 						{
; 8745 : 							// User wants to retry the pretest
; 8746 : 							bAnswerTerminate = FALSE;
; 8747 : 							bAnswerRetry = TRUE;
; 8748 : 						}
; 8749 : 						else
; 8750 : 						{
; 8751 : 							// User doesn't want to retry the pretest
; 8752 : 							bAnswerTerminate = TRUE;
; 8753 : 							bAnswerRetry = FALSE;
; 8754 : 						}
; 8755 : 					}
; 8756 : 					else
; 8757 : 					{
; 8758 : 						// Hidden OS cloning was interrupted or wiping of the original OS has not been started
; 8759 : 						
; 8760 : 						char *tmpStr[] = {0,

  00c5e	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _tmpStr$135190[ebp], ebx

; 8761 : 							hiddenOSCreationPhase == TC_HIDDEN_OS_CREATION_PHASE_WIPING ? "OS_WIPING_NOT_FINISHED_ASK" : "HIDDEN_OS_CREATION_NOT_FINISHED_ASK",

  00c64	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135190[ebp+4], OFFSET ??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@
  00c6e	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00c73	74 0a		 je	 SHORT $LN87@AfterWMIni
  00c75	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135190[ebp+4], OFFSET ??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@
$LN87@AfterWMIni:

; 8762 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_RETRY",
; 8763 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_TERMINATE",
; 8764 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_ASK_LATER",
; 8765 : 							0};
; 8766 : 
; 8767 : 						switch (AskMultiChoice ((void **) tmpStr, FALSE))

  00c7f	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _tmpStr$135190[ebp]
  00c85	53		 push	 ebx
  00c86	51		 push	 ecx
  00c87	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135190[ebp+8], OFFSET ??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00c91	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135190[ebp+12], OFFSET ??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00c9b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _tmpStr$135190[ebp+16], OFFSET ??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00ca2	89 5d 84	 mov	 DWORD PTR _tmpStr$135190[ebp+20], ebx
  00ca5	e8 00 00 00 00	 call	 _AskMultiChoice
  00caa	83 c4 08	 add	 esp, 8
  00cad	83 e8 01	 sub	 eax, 1
  00cb0	74 0f		 je	 SHORT $LN24@AfterWMIni
  00cb2	83 e8 01	 sub	 eax, 1
  00cb5	74 87		 je	 SHORT $LN514@AfterWMIni
$LN16@AfterWMIni:

; 8838 : 
; 8839 : 						ManageStartupSeqWiz (TRUE, "");
; 8840 : 						ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);
; 8841 : 						EndMainDlg (MainDlg);
; 8842 : 						return;
; 8843 : 					}
; 8844 : 					else 
; 8845 : 					{
; 8846 : 						// User doesn't want to take any action now
; 8847 : 
; 8848 : 						AbortProcessSilent();

  00cb7	e8 00 00 00 00	 call	 _AbortProcessSilent

; 8863 : 		}
; 8864 : 	}
; 8865 : 	else

  00cbc	e9 85 01 00 00	 jmp	 $LN12@AfterWMIni
$LN24@AfterWMIni:

; 8785 : 						}
; 8786 : 					}
; 8787 : 
; 8788 : 
; 8789 : 					if (bAnswerRetry)
; 8790 : 					{
; 8791 : 						// User wants to restart and retry the pretest (or hidden OS creation)
; 8792 : 
; 8793 : 						// We re-register the driver for boot because the user may have selected
; 8794 : 						// "Last Known Good Configuration" from the Windows boot menu.
; 8795 : 						// Note that we need to do this even when creating a hidden OS (because 
; 8796 : 						// the hidden OS needs our boot driver and it will be a clone of this OS).
; 8797 : 						try
; 8798 : 						{
; 8799 : 							BootEncObj->RegisterBootDriver (bHiddenOS ? true : false);

  00cc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00cc7	85 d2		 test	 edx, edx
  00cc9	0f 95 c0	 setne	 al
  00ccc	0f b6 c8	 movzx	 ecx, al
  00ccf	51		 push	 ecx
  00cd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00cd6	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00cdd	e8 00 00 00 00	 call	 ?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::RegisterBootDriver
  00ce2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN103@AfterWMIni:

; 8805 : 
; 8806 : 						if (AskWarnYesNo ("CONFIRM_RESTART") == IDYES)

  00ce9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  00cee	e8 00 00 00 00	 call	 _AskWarnYesNo

; 8807 : 						{
; 8808 : 							EndMainDlg (MainDlg);

  00cf3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00cf9	83 c4 04	 add	 esp, 4
  00cfc	83 f8 06	 cmp	 eax, 6
  00cff	0f 85 c7 f5 ff
	ff		 jne	 $LN19@AfterWMIni
  00d05	e8 00 00 00 00	 call	 _EndMainDlg

; 8809 : 
; 8810 : 							try
; 8811 : 							{
; 8812 : 								BootEncObj->RestartComputer ();

  00d0a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d10	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00d17	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$LN105@AfterWMIni:

; 8818 : 
; 8819 : 							return;

  00d1c	e9 25 01 00 00	 jmp	 $LN12@AfterWMIni
__catch$_AfterWMInitTasks$4:

; 8800 : 						}
; 8801 : 						catch (Exception &e)
; 8802 : 						{
; 8803 : 							e.Show (NULL);

  00d21	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135206[ebp]
  00d27	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d29	8b 02		 mov	 eax, DWORD PTR [edx]
  00d2b	6a 00		 push	 0
  00d2d	ff d0		 call	 eax

; 8804 : 						}

  00d2f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d36	b8 00 00 00 00	 mov	 eax, $LN103@AfterWMIni
  00d3b	c3		 ret	 0
__catch$_AfterWMInitTasks$6:

; 8813 : 							}
; 8814 : 							catch (Exception &e)
; 8815 : 							{
; 8816 : 								e.Show (hwndDlg);

  00d3c	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135209[ebp]
  00d42	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d44	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00d47	8b 12		 mov	 edx, DWORD PTR [edx]
  00d49	50		 push	 eax
  00d4a	ff d2		 call	 edx

; 8817 : 							}

  00d4c	b8 00 00 00 00	 mov	 eax, $LN105@AfterWMIni
  00d51	c3		 ret	 0
__catch$_AfterWMInitTasks$8:

; 8832 : 						}
; 8833 : 						catch (Exception &e)
; 8834 : 						{
; 8835 : 							e.Show (hwndDlg);

  00d52	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135213[ebp]
  00d58	8b 01		 mov	 eax, DWORD PTR [ecx]
  00d5a	8b 55 ec	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00d5d	8b 00		 mov	 eax, DWORD PTR [eax]
  00d5f	52		 push	 edx
  00d60	ff d0		 call	 eax

; 8836 : 							AbortProcessSilent();

  00d62	e8 00 00 00 00	 call	 _AbortProcessSilent

; 8837 : 						}

  00d67	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d6e	b8 00 00 00 00	 mov	 eax, $LN107@AfterWMIni
  00d73	c3		 ret	 0
__catch$_AfterWMInitTasks$2:
  00d74	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _e$135170[ebp]
  00d7a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d7c	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00d7f	8b 12		 mov	 edx, DWORD PTR [edx]
  00d81	50		 push	 eax
  00d82	ff d2		 call	 edx
  00d84	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00d89	e8 00 00 00 00	 call	 _Error
  00d8e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00d94	83 c4 04	 add	 esp, 4
  00d97	e8 00 00 00 00	 call	 _EndMainDlg
  00d9c	b8 00 00 00 00	 mov	 eax, $LN101@AfterWMIni
  00da1	c3		 ret	 0
$LN101@AfterWMIni:

; 8667 : 				}
; 8668 : 				catch (Exception &e)
; 8669 : 				{
; 8670 : 					e.Show (hwndDlg);
; 8671 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");
; 8672 : 					EndMainDlg (MainDlg);
; 8673 : 					return;

  00da2	e9 9f 00 00 00	 jmp	 $LN12@AfterWMIni
$LN44@AfterWMIni:

; 8866 : 	{
; 8867 : 		if (DirectDeviceEncMode)

  00da7	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectDeviceEncMode@@3HA, ebx ; DirectDeviceEncMode
  00dad	74 0a		 je	 SHORT $LN11@AfterWMIni

; 8868 : 		{
; 8869 : 			SwitchWizardToNonSysDeviceMode();

  00daf	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysDeviceMode@@YAXXZ ; SwitchWizardToNonSysDeviceMode

; 8870 : 			return;

  00db4	e9 8d 00 00 00	 jmp	 $LN12@AfterWMIni
$LN11@AfterWMIni:

; 8871 : 		}
; 8872 : 
; 8873 : 		if (DirectPromptNonSysInplaceEncResumeMode
; 8874 : 			&& !bInPlaceEncNonSysPending)

  00db9	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, ebx ; DirectPromptNonSysInplaceEncResumeMode
  00dbf	74 2d		 je	 SHORT $LN10@AfterWMIni
  00dc1	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bInPlaceEncNonSysPending, ebx
  00dc7	75 25		 jne	 SHORT $LN10@AfterWMIni

; 8875 : 		{
; 8876 : 			// This instance of the wizard has been launched via the system startup sequence to prompt for resume of
; 8877 : 			// a non-system in-place encryption process. However, no config file indicates that any such process
; 8878 : 			// has been interrupted. This inconsistency may occur, for example, when the process is finished
; 8879 : 			// but the wizard is not removed from the startup sequence because system encryption is in progress.
; 8880 : 			// Therefore, we remove it from the startup sequence now if possible.
; 8881 : 
; 8882 : 			if (!IsNonInstallMode () && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00dc9	e8 00 00 00 00	 call	 _IsNonInstallMode
  00dce	85 c0		 test	 eax, eax
  00dd0	75 17		 jne	 SHORT $LN9@AfterWMIni
  00dd2	39 1d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, ebx
  00dd8	75 0f		 jne	 SHORT $LN9@AfterWMIni

; 8883 : 				ManageStartupSeqWiz (TRUE, "");

  00dda	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00ddf	6a 01		 push	 1
  00de1	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00de6	83 c4 08	 add	 esp, 8
$LN9@AfterWMIni:

; 8884 : 
; 8885 : 			AbortProcessSilent ();

  00de9	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN10@AfterWMIni:

; 8886 : 		}
; 8887 : 
; 8888 : 		if (DirectNonSysInplaceEncResumeMode)

  00dee	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectNonSysInplaceEncResumeMode@@3HA, ebx ; DirectNonSysInplaceEncResumeMode

; 8889 : 		{
; 8890 : 			SwitchWizardToNonSysInplaceEncResumeMode();

  00df4	75 24		 jne	 SHORT $LN532@AfterWMIni

; 8891 : 			return;
; 8892 : 		}
; 8893 : 		else if (DirectPromptNonSysInplaceEncResumeMode)

  00df6	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, ebx ; DirectPromptNonSysInplaceEncResumeMode
  00dfc	74 23		 je	 SHORT $LN6@AfterWMIni

; 8894 : 		{
; 8895 : 			if (NonSysInplaceEncInProgressElsewhere ())

  00dfe	e8 00 00 00 00	 call	 _NonSysInplaceEncInProgressElsewhere
  00e03	85 c0		 test	 eax, eax
  00e05	74 05		 je	 SHORT $LN5@AfterWMIni

; 8896 : 				AbortProcessSilent ();

  00e07	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN5@AfterWMIni:

; 8897 : 
; 8898 : 			if (AskNonSysInPlaceEncryptionResume() == IDYES)

  00e0c	e8 00 00 00 00	 call	 _AskNonSysInPlaceEncryptionResume
  00e11	83 f8 06	 cmp	 eax, 6
  00e14	0f 85 9d fe ff
	ff		 jne	 $LN16@AfterWMIni
$LN532@AfterWMIni:

; 8899 : 				SwitchWizardToNonSysInplaceEncResumeMode();

  00e1a	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ; SwitchWizardToNonSysInplaceEncResumeMode

; 8900 : 			else

  00e1f	eb 25		 jmp	 SHORT $LN12@AfterWMIni
$LN6@AfterWMIni:

; 8901 : 				AbortProcessSilent ();
; 8902 : 
; 8903 : 			return;
; 8904 : 		}
; 8905 : 		else if (bInPlaceEncNonSysPending
; 8906 : 			&& !NonSysInplaceEncInProgressElsewhere ()
; 8907 : 			&& AskNonSysInPlaceEncryptionResume() == IDYES)

  00e21	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bInPlaceEncNonSysPending, ebx
  00e27	74 13		 je	 SHORT $LN1@AfterWMIni
  00e29	e8 00 00 00 00	 call	 _NonSysInplaceEncInProgressElsewhere
  00e2e	85 c0		 test	 eax, eax
  00e30	75 0a		 jne	 SHORT $LN1@AfterWMIni
  00e32	e8 00 00 00 00	 call	 _AskNonSysInPlaceEncryptionResume
  00e37	83 f8 06	 cmp	 eax, 6

; 8908 : 		{
; 8909 : 			SwitchWizardToNonSysInplaceEncResumeMode();
; 8910 : 			return;

  00e3a	74 de		 je	 SHORT $LN532@AfterWMIni
$LN1@AfterWMIni:

; 8911 : 		}
; 8912 : 
; 8913 : 		LoadPage (hwndDlg, INTRO_PAGE);

  00e3c	53		 push	 ebx
  00e3d	57		 push	 edi
  00e3e	e8 00 00 00 00	 call	 _LoadPage
  00e43	83 c4 08	 add	 esp, 8
$LN12@AfterWMIni:

; 8914 : 	}
; 8915 : }

  00e46	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00e49	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00e50	59		 pop	 ecx
  00e51	5f		 pop	 edi
  00e52	5e		 pop	 esi
  00e53	5b		 pop	 ebx
  00e54	8b 8d 98 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e5a	33 cd		 xor	 ecx, ebp
  00e5c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e61	81 c5 9c 01 00
	00		 add	 ebp, 412		; 0000019cH
  00e67	8b e5		 mov	 esp, ebp
  00e69	5d		 pop	 ebp
  00e6a	c3		 ret	 0
  00e6b	90		 npad	 1
$LN534@AfterWMIni:
  00e6c	00 00 00 00	 DD	 $LN71@AfterWMIni
  00e70	00 00 00 00	 DD	 $LN71@AfterWMIni
  00e74	00 00 00 00	 DD	 $LN65@AfterWMIni
  00e78	00 00 00 00	 DD	 $LN72@AfterWMIni
  00e7c	00 00 00 00	 DD	 $LN60@AfterWMIni
  00e80	00 00 00 00	 DD	 $LN60@AfterWMIni
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_AfterWMInitTasks:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 3c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-452]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a a4 01 00
	00		 mov	 ecx, DWORD PTR [edx+420]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_AfterWMInitTasks
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_AfterWMInitTasks ENDP
PUBLIC	??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T167624 = -4						; size = 1
__Cat$167628 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T167624[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T167624[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$167628[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T167661 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$167664 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$167664[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T167661[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T167661[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T167710 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$167713 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$167713[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T167710[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T167710[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T167739 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$167742 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$167742[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T167739[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T167739[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b c6		 mov	 eax, esi
  0002c	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	03 c7		 add	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T167825 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$167828 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$167828[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T167825[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T167825[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T167887 = 8						; size = 1
__Cat$167891 = 8					; size = 1
$T167889 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 53 01 00
	00		 je	 $LN47@operator@19

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	55		 push	 ebp
  00020	c1 fa 06	 sar	 edx, 6
  00023	8b ea		 mov	 ebp, edx
  00025	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  00028	03 ea		 add	 ebp, edx
  0002a	75 0f		 jne	 SHORT $LN8@operator@19

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
  00033	5d		 pop	 ebp
  00034	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 599  : 		}

  00038	c2 04 00	 ret	 4
$LN8@operator@19:

; 573  : 			else if (_Right.size() <= size())

  0003b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003e	53		 push	 ebx
  0003f	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00042	2b cb		 sub	 ecx, ebx
  00044	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00049	f7 e9		 imul	 ecx
  0004b	c1 fa 06	 sar	 edx, 6
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx
  00055	3b e9		 cmp	 ebp, ecx
  00057	77 5d		 ja	 SHORT $LN6@operator@19

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  00059	c6 44 24 14 00	 mov	 BYTE PTR $T167887[esp+12], 0
  0005e	8b 44 24 14	 mov	 eax, DWORD PTR $T167887[esp+12]
  00062	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$167891[esp+12]
  00066	8b 54 24 14	 mov	 edx, DWORD PTR $T167889[esp+12]
  0006a	50		 push	 eax
  0006b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	53		 push	 ebx
  00071	50		 push	 eax
  00072	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	51		 push	 ecx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00090	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00095	f7 e9		 imul	 ecx
  00097	c1 fa 06	 sar	 edx, 6
  0009a	8b c2		 mov	 eax, edx
  0009c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009f	03 c2		 add	 eax, edx
  000a1	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000a7	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  000aa	5b		 pop	 ebx
  000ab	5d		 pop	 ebp

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ac	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000af	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000b0	8b c6		 mov	 eax, esi
  000b2	5e		 pop	 esi

; 599  : 		}

  000b3	c2 04 00	 ret	 4
$LN6@operator@19:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000b6	85 db		 test	 ebx, ebx
  000b8	75 04		 jne	 SHORT $LN38@operator@19
  000ba	33 c0		 xor	 eax, eax
  000bc	eb 16		 jmp	 SHORT $LN39@operator@19
$LN38@operator@19:
  000be	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c1	2b d3		 sub	 edx, ebx
  000c3	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000c8	f7 ea		 imul	 edx
  000ca	c1 fa 06	 sar	 edx, 6
  000cd	8b c2		 mov	 eax, edx
  000cf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d2	03 c2		 add	 eax, edx
$LN39@operator@19:
  000d4	3b e8		 cmp	 ebp, eax
  000d6	77 34		 ja	 SHORT $LN4@operator@19

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000db	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  000e1	03 c8		 add	 ecx, eax
  000e3	8b e9		 mov	 ebp, ecx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ed	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f0	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f6	51		 push	 ecx
  000f7	52		 push	 edx
  000f8	55		 push	 ebp
  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  00100	5b		 pop	 ebx
  00101	5d		 pop	 ebp
  00102	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00105	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00106	8b c6		 mov	 eax, esi
  00108	5e		 pop	 esi

; 599  : 		}

  00109	c2 04 00	 ret	 4
$LN4@operator@19:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0010c	85 db		 test	 ebx, ebx
  0010e	74 18		 je	 SHORT $LN42@operator@19

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00110	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00113	50		 push	 eax
  00114	53		 push	 ebx
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00125	83 c4 04	 add	 esp, 4
$LN42@operator@19:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  00128	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0012b	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0012e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00133	f7 e9		 imul	 ecx
  00135	c1 fa 06	 sar	 edx, 6
  00138	8b c2		 mov	 eax, edx
  0013a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013d	03 c2		 add	 eax, edx
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
  00147	84 c0		 test	 al, al
  00149	74 16		 je	 SHORT $LN46@operator@19

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0014b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0014e	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00151	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00154	51		 push	 ecx
  00155	52		 push	 edx
  00156	50		 push	 eax
  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  0015e	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@19:
  00161	5b		 pop	 ebx
  00162	5d		 pop	 ebp
$LN47@operator@19:
  00163	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00164	8b c6		 mov	 eax, esi
  00166	5e		 pop	 esi

; 599  : 		}

  00167	c2 04 00	 ret	 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
_TEXT	ENDS
PUBLIC	??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T168057 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$168061 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$168061[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T168057[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T168057[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4HostDevice@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4HostDevice@@QAEAAU0@ABU0@@Z PROC			; HostDevice::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00008	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000b	88 06		 mov	 BYTE PTR [esi], al
  0000d	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00011	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  00014	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  00018	88 56 02	 mov	 BYTE PTR [esi+2], dl
  0001b	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0001f	88 46 03	 mov	 BYTE PTR [esi+3], al
  00022	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00026	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00029	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  0002d	6a ff		 push	 -1
  0002f	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00032	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00036	6a 00		 push	 0
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	51		 push	 ecx
  0003c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003f	88 46 06	 mov	 BYTE PTR [esi+6], al
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	6a ff		 push	 -1
  00049	6a 00		 push	 0
  0004b	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  0004e	52		 push	 edx
  0004f	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00057	6a ff		 push	 -1
  00059	6a 00		 push	 0
  0005b	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  0005e	50		 push	 eax
  0005f	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00067	0f b6 4f 5c	 movzx	 ecx, BYTE PTR [edi+92]
  0006b	88 4e 5c	 mov	 BYTE PTR [esi+92], cl
  0006e	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00071	89 56 60	 mov	 DWORD PTR [esi+96], edx
  00074	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00077	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007a	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  0007d	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  00080	83 c7 6c	 add	 edi, 108		; 0000006cH
  00083	57		 push	 edi
  00084	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00087	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  0008c	5f		 pop	 edi
  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi
  00090	c2 04 00	 ret	 4
??4HostDevice@@QAEAAU0@ABU0@@Z ENDP			; HostDevice::operator=
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 23		 je	 SHORT $LN7@Copy_backw
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

  00013	81 ee 88 00 00
	00		 sub	 esi, 136		; 00000088H
  00019	81 ef 88 00 00
	00		 sub	 edi, 136		; 00000088H
  0001f	56		 push	 esi
  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL2@Copy_backw

; 2677 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2678 : 	}

  00030	c3		 ret	 0
$LN7@Copy_backw:

; 2677 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2678 : 	}

  00037	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::_Fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::_Fill<HostDevice *,HostDevice>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN1@Fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL3@Fill
  00025	5b		 pop	 ebx
$LN1@Fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3160 : 	}

  00028	c3		 ret	 0
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::_Fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T168115 = -8						; size = 1
$T168116 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T168117 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	83 ec 08	 sub	 esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);
; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T168117[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T168116[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T168116[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T168115[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T168115[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	8b c8		 mov	 ecx, eax
  00048	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	2b c1		 sub	 eax, ecx
  00057	5b		 pop	 ebx

; 2690 : 	return _Result;
; 2691 : 	}

  00058	83 c4 08	 add	 esp, 8
  0005b	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::fill<HostDevice *,HostDevice>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN11@fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL13@fill
  00025	5b		 pop	 ebx
$LN11@fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3188 : 	}

  00028	c3		 ret	 0
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T168159 = -4						; size = 1
__Cat$168163 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T168159[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T168159[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$168163[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T168207 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$168210 = 16					; size = 1
$T168169 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$168210[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T168169[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T168207[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T168207[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7
__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
_TEXT	SEGMENT
__Whereoff$136972 = -36					; size = 4
__Ncopied$136973 = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__Newvec$136971 = -24					; size = 4
tv592 = -20						; size = 4
$T168618 = -20						; size = 1
__Cat$168621 = -20					; size = 1
$T168441 = -20						; size = 1
__Cat$168444 = -20					; size = 1
__Val$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$136996 = 0					; size = 136
__Tmp$136986 = 136					; size = 136
__$ArrayPad$ = 272					; size = 4
__Where$ = 284						; size = 8
__Count$ = 292						; size = 4
__Val$ = 296						; size = 4
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 ec fe
	ff ff		 lea	 ebp, DWORD PTR [esp-276]
  00008	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 18	 sub	 esp, 24			; 00000018H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 10 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 ec	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 04		 jne	 SHORT $LN31@Insert_n

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	33 db		 xor	 ebx, ebx
  00053	eb 16		 jmp	 SHORT $LN32@Insert_n
$LN31@Insert_n:
  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	2b c8		 sub	 ecx, eax
  0005a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0005f	f7 e9		 imul	 ecx
  00061	c1 fa 06	 sar	 edx, 6
  00064	8b da		 mov	 ebx, edx
  00066	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00069	03 da		 add	 ebx, edx
$LN32@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0006b	8b bd 24 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00071	85 ff		 test	 edi, edi
  00073	0f 84 02 03 00
	00		 je	 $LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00079	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007c	8b d1		 mov	 edx, ecx
  0007e	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00081	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00086	f7 ea		 imul	 edx
  00088	c1 fa 06	 sar	 edx, 6
  0008b	8b c2		 mov	 eax, edx
  0008d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00090	03 c2		 add	 eax, edx
  00092	ba e1 e1 e1 01	 mov	 edx, 31580641		; 01e1e1e1H
  00097	2b d0		 sub	 edx, eax
  00099	3b d7		 cmp	 edx, edi
  0009b	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  0009d	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  000a2	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  000a5	3b da		 cmp	 ebx, edx
  000a7	0f 83 86 01 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000ad	8b c3		 mov	 eax, ebx
  000af	d1 e8		 shr	 eax, 1
  000b1	b9 e1 e1 e1 01	 mov	 ecx, 31580641		; 01e1e1e1H
  000b6	2b c8		 sub	 ecx, eax
  000b8	3b cb		 cmp	 ecx, ebx
  000ba	73 04		 jae	 SHORT $LN17@Insert_n
  000bc	33 db		 xor	 ebx, ebx
  000be	eb 02		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  000c0	03 d8		 add	 ebx, eax
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  000c2	3b da		 cmp	 ebx, edx
  000c4	73 02		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  000c6	8b da		 mov	 ebx, edx
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c8	6a 00		 push	 0
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000d0	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  000d6	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000e0	f7 ea		 imul	 edx
  000e2	c1 fa 06	 sar	 edx, 6
  000e5	8b c2		 mov	 eax, edx
  000e7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ea	03 c2		 add	 eax, edx
  000ec	89 45 dc	 mov	 DWORD PTR __Whereoff$136972[ebp], eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  000ef	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000f5	33 d2		 xor	 edx, edx
  000f7	83 c4 08	 add	 esp, 8
  000fa	89 55 e0	 mov	 DWORD PTR __Ncopied$136973[ebp], edx
  000fd	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00100	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00103	52		 push	 edx
  00104	03 c1		 add	 eax, ecx
  00106	57		 push	 edi
  00107	89 4d e8	 mov	 DWORD PTR __Newvec$136971[ebp], ecx
  0010a	50		 push	 eax
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  00112	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00115	c6 45 ec 00	 mov	 BYTE PTR $T168441[ebp], 0
  00119	8b 55 ec	 mov	 edx, DWORD PTR $T168441[ebp]
  0011c	52		 push	 edx
  0011d	8b 55 ec	 mov	 edx, DWORD PTR __Cat$168444[ebp]
  00120	52		 push	 edx
  00121	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00127	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0012a	51		 push	 ecx
  0012b	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$136971[ebp]
  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	50		 push	 eax
  00131	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR __Ncopied$136973[ebp], 1
  00138	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Whereoff$136972[ebp]
  00140	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00143	03 c7		 add	 eax, edi
  00145	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0014b	03 45 e8	 add	 eax, DWORD PTR __Newvec$136971[ebp]
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	c6 45 ec 00	 mov	 BYTE PTR $T168618[ebp], 0
  00155	8b 55 ec	 mov	 edx, DWORD PTR $T168618[ebp]
  00158	52		 push	 edx
  00159	8b 55 ec	 mov	 edx, DWORD PTR __Cat$168621[ebp]
  0015c	52		 push	 edx
  0015d	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00160	52		 push	 edx
  00161	50		 push	 eax
  00162	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00168	51		 push	 ecx
  00169	50		 push	 eax
  0016a	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR __Ncopied$136973[ebp], 2
  00171	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00176	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00179	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0017c	2b d1		 sub	 edx, ecx
  0017e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00183	f7 ea		 imul	 edx
  00185	c1 fa 06	 sar	 edx, 6
  00188	8b c2		 mov	 eax, edx
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	03 c2		 add	 eax, edx
  0018f	83 c4 18	 add	 esp, 24			; 00000018H
  00192	03 f8		 add	 edi, eax
  00194	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1195 : 			if (_Myfirst != 0)

  0019b	85 c9		 test	 ecx, ecx
  0019d	74 18		 je	 SHORT $LN115@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  0019f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001a2	52		 push	 edx
  001a3	51		 push	 ecx
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b4	83 c4 04	 add	 esp, 4
$LN115@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001b7	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$136971[ebp]
  001ba	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H

; 1206 : 			_Mylast = _Newvec + _Count;

  001c0	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  001c6	03 d8		 add	 ebx, eax
  001c8	03 f8		 add	 edi, eax
  001ca	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001cd	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 1207 : 			_Myfirst = _Newvec;

  001d0	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001d3	e9 a3 01 00 00	 jmp	 $LN1@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001d8	8b 5d e0	 mov	 ebx, DWORD PTR __Ncopied$136973[ebp]
  001db	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001de	8b 75 dc	 mov	 esi, DWORD PTR __Whereoff$136972[ebp]
  001e1	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$136971[ebp]
  001e4	7e 14		 jle	 SHORT $LN7@Insert_n
  001e6	8b ce		 mov	 ecx, esi
  001e8	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  001ee	03 cf		 add	 ecx, edi
  001f0	51		 push	 ecx
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

  001fa	85 db		 test	 ebx, ebx
  001fc	7e 23		 jle	 SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  001fe	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00204	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00207	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0020a	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00210	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00216	03 c7		 add	 eax, edi
  00218	50		 push	 eax
  00219	03 f7		 add	 esi, edi
  0021b	56		 push	 esi
  0021c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00227	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0022a	6a 00		 push	 0
  0022c	6a 00		 push	 0
  0022e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00233	2b 8d 20 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  00239	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0023e	f7 e9		 imul	 ecx
  00240	c1 fa 06	 sar	 edx, 6
  00243	8b ca		 mov	 ecx, edx
  00245	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00248	03 ca		 add	 ecx, edx
  0024a	3b cf		 cmp	 ecx, edi
  0024c	0f 83 c3 00 00
	00		 jae	 $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00252	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00255	52		 push	 edx
  00256	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$136986[ebp]
  0025c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00261	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00267	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0026a	8b df		 mov	 ebx, edi
  0026c	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H
  00272	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8b ce		 mov	 ecx, esi
  0027a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00281	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00286	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00289	8b d1		 mov	 edx, ecx
  0028b	2b 95 20 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]
  00291	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR __Tmp$136986[ebp]
  00297	50		 push	 eax
  00298	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0029d	f7 ea		 imul	 edx
  0029f	c1 fa 06	 sar	 edx, 6
  002a2	8b c2		 mov	 eax, edx
  002a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a7	03 c2		 add	 eax, edx
  002a9	2b f8		 sub	 edi, eax
  002ab	57		 push	 edi
  002ac	51		 push	 ecx
  002ad	8b ce		 mov	 ecx, esi
  002af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002b3	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002b8	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002bb	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002be	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002c4	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$136986[ebp]
  002ca	51		 push	 ecx
  002cb	2b f3		 sub	 esi, ebx
  002cd	56		 push	 esi
  002ce	52		 push	 edx
  002cf	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002d6	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  002de	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$136986[ebp]

; 1233 : 		else

  002e4	e9 86 00 00 00	 jmp	 $LN122@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  002e9	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR __Count$[ebp]
  002ef	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002f2	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  002f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002fb	03 d0		 add	 edx, eax
  002fd	52		 push	 edx
  002fe	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00304	03 c2		 add	 eax, edx
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1221 : 			_RERAISE;

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00315	8b 45 ec	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00318	50		 push	 eax
  00319	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$136996[ebp]
  0031c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  00321	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00327	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0032a	53		 push	 ebx
  0032b	8b c3		 mov	 eax, ebx
  0032d	2b c7		 sub	 eax, edi
  0032f	53		 push	 ebx
  00330	50		 push	 eax
  00331	8b ce		 mov	 ecx, esi
  00333	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  0033a	89 45 ec	 mov	 DWORD PTR tv592[ebp], eax
  0033d	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00342	8b 4d ec	 mov	 ecx, DWORD PTR tv592[ebp]
  00345	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0034b	53		 push	 ebx
  0034c	51		 push	 ecx
  0034d	52		 push	 edx
  0034e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00351	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00356	8d 45 00	 lea	 eax, DWORD PTR __Tmp$136996[ebp]
  00359	50		 push	 eax
  0035a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00360	03 f8		 add	 edi, eax
  00362	57		 push	 edi
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  00369	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0036c	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$136996[ebp]
$LN122@Insert_n:
  0036f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00376	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN1@Insert_n:

; 1250 : 		}

  0037b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00385	59		 pop	 ecx
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038f	33 cd		 xor	 ecx, ebp
  00391	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00396	81 c5 14 01 00
	00		 add	 ebp, 276		; 00000114H
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4:
  00000	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$136986[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5:
  0000b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$136996[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 8a 1c 01 00
	00		 mov	 ecx, DWORD PTR [edx+284]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
PUBLIC	?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z
_TEXT	SEGMENT
__Tmp$168920 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00009	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0000c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0000f	8b cb		 mov	 ecx, ebx
  00011	2b ce		 sub	 ecx, esi
  00013	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00018	f7 e9		 imul	 ecx
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	75 04		 jne	 SHORT $LN3@insert@2
  00026	33 f6		 xor	 esi, esi
  00028	eb 33		 jmp	 SHORT $LN4@insert@2
$LN3@insert@2:
  0002a	3b f3		 cmp	 esi, ebx
  0002c	76 05		 jbe	 SHORT $LN13@insert@2
  0002e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert@2:
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN29@insert@2
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 05		 je	 SHORT $LN28@insert@2
$LN29@insert@2:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert@2:
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  0004a	2b ce		 sub	 ecx, esi
  0004c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 06	 sar	 edx, 6
  00056	8b f2		 mov	 esi, edx
  00058	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005b	03 f2		 add	 esi, edx
$LN4@insert@2:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  0005d	8b 4c 24 28	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00061	8b 54 24 24	 mov	 edx, DWORD PTR __Where$[esp+24]
  00065	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  00069	51		 push	 ecx
  0006a	6a 01		 push	 1
  0006c	52		 push	 edx
  0006d	50		 push	 eax
  0006e	8b cf		 mov	 ecx, edi
  00070	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00075	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00078	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0007b	76 05		 jbe	 SHORT $LN43@insert@2
  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert@2:
  00082	8b 3f		 mov	 edi, DWORD PTR [edi]
  00084	8b ef		 mov	 ebp, edi
  00086	89 5c 24 14	 mov	 DWORD PTR __Tmp$168920[esp+28], ebx
  0008a	85 ff		 test	 edi, edi
  0008c	75 1c		 jne	 SHORT $LN85@insert@2
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00093	33 c0		 xor	 eax, eax
$LN76@insert@2:
  00095	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  0009b	03 f3		 add	 esi, ebx
  0009d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  000a0	77 13		 ja	 SHORT $LN63@insert@2
  000a2	85 ff		 test	 edi, edi
  000a4	74 08		 je	 SHORT $LN81@insert@2
  000a6	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a8	eb 06		 jmp	 SHORT $LN82@insert@2
$LN85@insert@2:
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	eb e7		 jmp	 SHORT $LN76@insert@2
$LN81@insert@2:
  000ae	33 ff		 xor	 edi, edi
$LN82@insert@2:
  000b0	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  000b3	73 05		 jae	 SHORT $LN62@insert@2
$LN63@insert@2:
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@insert@2:
  000ba	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000be	5f		 pop	 edi
  000bf	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000c2	5e		 pop	 esi
  000c3	89 28		 mov	 DWORD PTR [eax], ebp
  000c5	5d		 pop	 ebp
  000c6	5b		 pop	 ebx

; 879  : 		}

  000c7	83 c4 08	 add	 esp, 8
  000ca	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
_TEXT	SEGMENT
$T168983 = -8						; size = 1
$T168954 = -8						; size = 8
__Cat$168987 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00007	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000a	57		 push	 edi
  0000b	85 db		 test	 ebx, ebx
  0000d	75 04		 jne	 SHORT $LN9@push_back
  0000f	33 c9		 xor	 ecx, ecx
  00011	eb 16		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00013	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00016	2b cb		 sub	 ecx, ebx
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 06	 sar	 edx, 6
  00022	8b ca		 mov	 ecx, edx
  00024	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00027	03 ca		 add	 ecx, edx
$LN10@push_back:
  00029	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002c	8b d7		 mov	 edx, edi
  0002e	2b d3		 sub	 edx, ebx
  00030	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00035	f7 ea		 imul	 edx
  00037	c1 fa 06	 sar	 edx, 6
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
  00041	3b c1		 cmp	 eax, ecx
  00043	73 35		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00045	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$168987[esp+16]
  00049	c6 44 24 0c 00	 mov	 BYTE PTR $T168983[esp+20], 0
  0004e	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T168983[esp+20]
  00052	51		 push	 ecx
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00057	52		 push	 edx
  00058	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	6a 01		 push	 1
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 824  : 		}

  00074	83 c4 08	 add	 esp, 8
  00077	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0007a	3b df		 cmp	 ebx, edi
  0007c	76 05		 jbe	 SHORT $LN23@push_back
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@push_back:
  00083	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp+16]
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	52		 push	 edx
  0008a	57		 push	 edi
  0008b	50		 push	 eax
  0008c	8d 44 24 18	 lea	 eax, DWORD PTR $T168954[esp+32]
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 824  : 		}

  0009b	83 c4 08	 add	 esp, 8
  0009e	c2 04 00	 ret	 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@	; `string'
PUBLIC	??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@ ; `string'
PUBLIC	??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@ ; `string'
PUBLIC	??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@ ; `string'
PUBLIC	??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@ ; `string'
PUBLIC	??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@		; `string'
PUBLIC	??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@	; `string'
PUBLIC	??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@ ; `string'
PUBLIC	??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@	; `string'
PUBLIC	??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@	; `string'
PUBLIC	??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@ ; `string'
PUBLIC	??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@ ; `string'
PUBLIC	??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@ ; `string'
PUBLIC	__real@4000cccccccccccd
PUBLIC	??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@ ; `string'
PUBLIC	??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@ ; `string'
PUBLIC	??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@ ; `string'
PUBLIC	??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@	; `string'
PUBLIC	??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@ ; `string'
PUBLIC	??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@ ; `string'
PUBLIC	??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@ ; `string'
PUBLIC	??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@ ; `string'
PUBLIC	??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@ ; `string'
PUBLIC	??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@	; `string'
PUBLIC	??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@ ; `string'
PUBLIC	??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@ ; `string'
PUBLIC	??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@ ; `string'
PUBLIC	??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@ ; `string'
PUBLIC	??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ ; `string'
PUBLIC	??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@ ; `string'
PUBLIC	__real@3feb333333333333
PUBLIC	??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@ ; `string'
PUBLIC	??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@ ; `string'
PUBLIC	??_C@_05HNJNFBJJ@FAT32?$AA@			; `string'
PUBLIC	??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@ ; `string'
PUBLIC	??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@ ; `string'
PUBLIC	??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@ ; `string'
PUBLIC	??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@	; `string'
PUBLIC	??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@ ; `string'
PUBLIC	??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@		; `string'
PUBLIC	??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@ ; `string'
PUBLIC	??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@ ; `string'
PUBLIC	??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@ ; `string'
PUBLIC	??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@ ; `string'
PUBLIC	??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@ ; `string'
PUBLIC	??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@ ; `string'
PUBLIC	??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@ ; `string'
PUBLIC	??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@	; `string'
PUBLIC	??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@ ; `string'
PUBLIC	??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@ ; `string'
PUBLIC	??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@	; `string'
PUBLIC	??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@ ; `string'
PUBLIC	??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ ; `string'
PUBLIC	??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ ; `string'
PUBLIC	??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@ ; `string'
PUBLIC	??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@	; `string'
PUBLIC	??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@ ; `string'
PUBLIC	??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@ ; `string'
PUBLIC	??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ ; `string'
PUBLIC	??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ ; `string'
PUBLIC	??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@ ; `string'
PUBLIC	??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@ ; `string'
PUBLIC	??_C@_04JFFKLGJF@?$CF02X?$AA@			; `string'
PUBLIC	??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@ ; `string'
PUBLIC	??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@	; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	_lParam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_MainDialogProc@16
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
EXTRN	_AskNoYes:PROC
EXTRN	_CloseVolume:PROC
EXTRN	_OpenVolume:PROC
EXTRN	?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z:PROC ; GetAvailableHostDevices
EXTRN	?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::PrepareInstallation
EXTRN	_AskWarnOkCancel:PROC
EXTRN	?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z:PROC ; CipherShed::BootEncryption::PrepareHiddenOSCreation
EXTRN	_UacAnalyzeHiddenVolumeHost:PROC
EXTRN	_ManageStartupSeq:PROC
EXTRN	?Install@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::Install
EXTRN	_LocalizationActive:DWORD
EXTRN	_ErrorDirect:PROC
EXTRN	?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::VerifyRescueDisk
EXTRN	?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::IsCDDrivePresent
EXTRN	?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::CreateRescueIsoImage
EXTRN	_KeyFilesApply:PROC
EXTRN	_CheckPasswordLength:PROC
EXTRN	_CheckPasswordCharEncoding:PROC
EXTRN	_CheckFileExtension:PROC
EXTRN	_IsSystemDevicePath:PROC
EXTRN	_IsMountedVolume:PROC
EXTRN	_RelativePath2Absolute:PROC
EXTRN	?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties
EXTRN	_WarningDirect:PROC
EXTRN	_IsBuiltInAdmin:PROC
EXTRN	_CurrentOSMajor:DWORD
EXTRN	_AboutDlgProc@16:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	_IsDiskReadError:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp__SHGetFolderPathA@20:PROC
EXTRN	_ComServerFormat:PROC
EXTRN	_hTitleFont:DWORD
EXTRN	_LoadDefaultKeyFilesParam:PROC
EXTRN	_RenderBitmap:PROC
EXTRN	_ScreenDPI:DWORD
EXTRN	_IsCipherShedInstallerRunning:PROC
EXTRN	_InitDialog:PROC
;	COMDAT ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
_BSS	SEGMENT
?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA DB 01H DUP (?) ; `MainDialogProc'::`220'::warningConfirmed
_BSS	ENDS
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
CONST	SEGMENT
??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@ DB 'CONFIRM_EXIT_UNIVERSAL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@
CONST	SEGMENT
??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@ DB 'CONFIRM_CANCEL'
	DB	'_SYS_ENC_PRETEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@
CONST	SEGMENT
??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@ DB 'CONFIRM_CANCEL_H'
	DB	'IDDEN_OS_CREATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@ DB 'SYSTEM_DECRYP'
	DB	'TION_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@
CONST	SEGMENT
??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@ DB 'NONSYS_INPLACE_E'
	DB	'NC_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@
CONST	SEGMENT
??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@ DB 'FOUND_NO_PARTITI'
	DB	'ON_W_DEFERRED_INPLACE_ENC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@
CONST	SEGMENT
??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@ DB 'WIPE_MODE_WARN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@
CONST	SEGMENT
??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@ DB 'CONFIRM_WIPE_START', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@
CONST	SEGMENT
??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@ DB 'CONFIRM_WIPE_STA'
	DB	'RT_DECOY_SYS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@ DB 'CANT_DISMOUNT_OUTER_V'
	DB	'OL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@ DB 'FORMAT_IN_PROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@
CONST	SEGMENT
??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@ DB 'CLUSTER_TOO_SMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@
CONST	SEGMENT
??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@ DB 'CONFIRM_FAT_FO'
	DB	'R_FILES_OVER_4GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@
CONST	SEGMENT
??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@ DB 'HIDDEN_VOL_HOST_NTFS'
	DB	'_ASK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@
CONST	SEGMENT
??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@ DB 'FAT_NOT_AVAILABL'
	DB	'E_FOR_SO_LARGE_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@
CONST	SEGMENT
??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@ DB 'OUTER_VOLUME_TOO'
	DB	'_SMALL_FOR_HIDDEN_OS_NTFS', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4000cccccccccccd
CONST	SEGMENT
__real@4000cccccccccccd DQ 04000cccccccccccdr	; 2.1
CONST	ENDS
;	COMDAT ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
CONST	SEGMENT
??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@ DB 'OFFER_FAT_FORMAT'
	DB	'_ALTERNATIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
CONST	SEGMENT
??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@ DB 'CANNOT_INITIATE_'
	DB	'SYS_ENCRYPTION_PRETEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
CONST	SEGMENT
??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@ DB 'CANNOT_INITIATE_'
	DB	'HIDDEN_OS_CREATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@
CONST	SEGMENT
??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@ DB 'PREBOOT_NOT_LOCALIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@ DB 'RESCUE_DISK_CHECK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@
CONST	SEGMENT
??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@ DB 'RESCUE_DISK_CHEC'
	DB	'K_FAILED_SENTENCE_APPENDIX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@
CONST	SEGMENT
??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@ DB 'RESCUE_DISK_WIN_'
	DB	'ISOBURN_PRELAUNCH_NOTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
CONST	SEGMENT
??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@ DB 'RESCUE_DISK_BU'
	DB	'RN_NO_CHECK_WARN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@
CONST	SEGMENT
??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_STORE_ISO_INFO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@
CONST	SEGMENT
??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_STORE_ISO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@
CONST	SEGMENT
??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@ DB 'CD_BURNER_NOT_PRESENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@
CONST	SEGMENT
??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_CONNECTED_NOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@
CONST	SEGMENT
??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_CONNECT_LATER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
CONST	SEGMENT
??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@ DB 'CANNOT_CREATE_NO'
	DB	'N_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@
CONST	SEGMENT
??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@ DB 'CANNOT_SATISFY_O'
	DB	'VER_4G_FILE_SIZE_REQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
CONST	SEGMENT
??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ DB 'CANNOT_RESTORE'
	DB	'_KEYBOARD_LAYOUT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
CONST	SEGMENT
??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ DB 'UNSUPPORTED_CHARS_IN'
	DB	'_PWD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@
CONST	SEGMENT
??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@ DB 'FREE_SPACE_FOR_W'
	DB	'RITING_TO_OUTER_VOLUME', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT ??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@
CONST	SEGMENT
??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@ DB 'VOLUME_TOO_LARGE_F'
	DB	'OR_WINXP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@
CONST	SEGMENT
??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@ DB 'VOLUME_TOO_LARGE_F'
	DB	'OR_FAT32', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNJNFBJJ@FAT32?$AA@
CONST	SEGMENT
??_C@_05HNJNFBJJ@FAT32?$AA@ DB 'FAT32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@
CONST	SEGMENT
??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@ DB 'NOTE_CASCADE_'
	DB	'FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@
CONST	SEGMENT
??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@ DB 'CONFIRM_CASCADE_'
	DB	'FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@
CONST	SEGMENT
??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@ DB 'NONSYS_INPLACE_E'
	DB	'NC_CONFIRM_BACKUP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@
CONST	SEGMENT
??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@ DB 'HIDDEN_VOL_HOST_SPARSE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@ DB 'EXE_FILE_EXTENSION'
	DB	'_CONFIRM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@
CONST	SEGMENT
??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@ DB 'CONFIRM_SYSTEM'
	DB	'_ENCRYPTION_MODE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@
CONST	SEGMENT
??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@ DB 'ALREADY_MOUNTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@
CONST	SEGMENT
??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@ DB 'DEVICE_SELECTED_'
	DB	'IN_NON_DEVICE_MODE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@
CONST	SEGMENT
??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@ DB 'HIDDEN_VOL_CREAT'
	DB	'ION_UNDER_HIDDEN_OS_HOWTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@
CONST	SEGMENT
??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@ DB 'ADMIN_PRIVILEGES_'
	DB	'WARN_HIDVOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@
CONST	SEGMENT
??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@ DB 'WINDOWS_BOOT_LOADER'
	DB	'_HINTS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@
CONST	SEGMENT
??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@ DB 'CUSTOM_BOOT_MANA'
	DB	'GERS_IN_MBR_UNSUPPORTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@
CONST	SEGMENT
??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@ DB 'WDE_UNSUPPORTED_F'
	DB	'OR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@
CONST	SEGMENT
??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@ DB 'SYS_PARTITION_MUS'
	DB	'T_BE_ON_BOOT_DRIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@
CONST	SEGMENT
??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@ DB 'DECOY_OS_REQUIREMENTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@
CONST	SEGMENT
??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@ DB 'CONFIRM_HIDDEN_O'
	DB	'S_EXTRA_BOOT_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@
CONST	SEGMENT
??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@ DB 'UNSUPPORTED_HIDD'
	DB	'EN_OS_MULTI_BOOT_CFG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@
CONST	SEGMENT
??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@ DB 'HIDDEN_OS_MULTI_BOOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@
CONST	SEGMENT
??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@ DB 'MULTI_BOOT_FOR_A'
	DB	'DVANCED_ONLY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
CONST	SEGMENT
??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_EXPLANATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
CONST	SEGMENT
??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_BRIEF_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@
CONST	SEGMENT
??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@ DB 'DECOY_OS_REINSTALL'
	DB	'_WARNING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@
CONST	SEGMENT
??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@ DB 'GAP_BETWEEN_SYS_'
	DB	'AND_HIDDEN_OS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@
CONST	SEGMENT
??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@ DB 'CONTAINER_ADMIN_WARNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@
CONST	SEGMENT
??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@ DB 'DECOY_OS_VERSION_WAR'
	DB	'NING', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@
CONST	SEGMENT
??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@ DB 'WIPE_FINISHED_DE'
	DB	'COY_SYSTEM_PARTITION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@ DB 'SYS_DRIVE_SIZE_P'
	DB	'ROBE_TIMEOUT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
CONST	SEGMENT
??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ DB 'ALT_KEY_CHARS_NO'
	DB	'T_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
CONST	SEGMENT
??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ DB 'KEYB_LAYOUT_S'
	DB	'YS_ENC_EXPLANATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ DB 'KEYB_LAYOUT_CHAN'
	DB	'GE_PREVENTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@ DB 'SYSTEM_DECRYPTION_'
	DB	'FINISHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@
CONST	SEGMENT
??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@ DB 'DISCARD_UNREADAB'
	DB	'LE_ENCRYPTED_SECTORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@
CONST	SEGMENT
??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@ DB 'ENABLE_BAD_SECTOR_Z'
	DB	'EROING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X?$AA@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X?$AA@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@
CONST	SEGMENT
??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@ DB '\CipherShed R'
	DB	'escue Disk.iso', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
CONST	SEGMENT
??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@ DB 'TC_INSTALLER_IS_RUNNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_MainDialogProc@16$107 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffea8H
	DD	FLAT:__catch$_MainDialogProc@16$41
__catchsym$_MainDialogProc@16$106 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb0H
	DD	FLAT:__catch$_MainDialogProc@16$39
__catchsym$_MainDialogProc@16$105 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec0H
	DD	FLAT:__catch$_MainDialogProc@16$37
__catchsym$_MainDialogProc@16$104 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb8H
	DD	FLAT:__catch$_MainDialogProc@16$35
__catchsym$_MainDialogProc@16$103 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec8H
	DD	FLAT:__catch$_MainDialogProc@16$33
__catchsym$_MainDialogProc@16$102 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed0H
	DD	FLAT:__catch$_MainDialogProc@16$31
__catchsym$_MainDialogProc@16$101 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee4H
	DD	FLAT:__catch$_MainDialogProc@16$29
__catchsym$_MainDialogProc@16$100 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed8H
	DD	FLAT:__catch$_MainDialogProc@16$27
__catchsym$_MainDialogProc@16$99 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee0H
	DD	FLAT:__catch$_MainDialogProc@16$25
__catchsym$_MainDialogProc@16$98 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeecH
	DD	FLAT:__catch$_MainDialogProc@16$23
__catchsym$_MainDialogProc@16$97 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee8H
	DD	FLAT:__catch$_MainDialogProc@16$21
__catchsym$_MainDialogProc@16$96 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec4H
	DD	FLAT:__catch$_MainDialogProc@16$19
__catchsym$_MainDialogProc@16$95 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed4H
	DD	FLAT:__catch$_MainDialogProc@16$17
__catchsym$_MainDialogProc@16$94 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef4H
	DD	FLAT:__catch$_MainDialogProc@16$13
__catchsym$_MainDialogProc@16$93 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffebcH
	DD	FLAT:__catch$_MainDialogProc@16$14
__catchsym$_MainDialogProc@16$92 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef0H
	DD	FLAT:__catch$_MainDialogProc@16$11
__catchsym$_MainDialogProc@16$91 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb4H
	DD	FLAT:__catch$_MainDialogProc@16$9
__catchsym$_MainDialogProc@16$89 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffedcH
	DD	FLAT:__catch$_MainDialogProc@16$2
__catchsym$_MainDialogProc@16$88 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef8H
	DD	FLAT:__catch$_MainDialogProc@16$3
__catchsym$_MainDialogProc@16$87 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeacH
	DD	FLAT:__catch$_MainDialogProc@16$0
__catchsym$_MainDialogProc@16$90 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	0ffffffc8H
	DD	FLAT:__catch$_MainDialogProc@16$6
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeccH
	DD	FLAT:__catch$_MainDialogProc@16$7
__ehfuncinfo$_MainDialogProc@16 DD 019930522H
	DD	047H
	DD	FLAT:__unwindtable$_MainDialogProc@16
	DD	015H
	DD	FLAT:__tryblocktable$_MainDialogProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_MainDialogProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$87
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$88
	DD	04H
	DD	04H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$89
	DD	08H
	DD	08H
	DD	09H
	DD	02H
	DD	FLAT:__catchsym$_MainDialogProc@16$90
	DD	0aH
	DD	0aH
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$91
	DD	0cH
	DD	0cH
	DD	0dH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$92
	DD	010H
	DD	010H
	DD	011H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$93
	DD	0eH
	DD	0eH
	DD	011H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$94
	DD	012H
	DD	012H
	DD	013H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$95
	DD	014H
	DD	014H
	DD	015H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$96
	DD	016H
	DD	016H
	DD	017H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$97
	DD	01aH
	DD	01aH
	DD	01bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$98
	DD	01cH
	DD	01eH
	DD	01fH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$99
	DD	020H
	DD	020H
	DD	021H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$100
	DD	031H
	DD	032H
	DD	033H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$101
	DD	034H
	DD	035H
	DD	036H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$102
	DD	038H
	DD	038H
	DD	039H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$103
	DD	03aH
	DD	03aH
	DD	03bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$104
	DD	03cH
	DD	03cH
	DD	03dH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$105
	DD	03eH
	DD	03eH
	DD	03fH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$106
	DD	045H
	DD	045H
	DD	046H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$107
__unwindtable$_MainDialogProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$45
	DD	02H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$46
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	05H
	DD	00H
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0fH
	DD	00H
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$49
	DD	018H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$50
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01cH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$53
	DD	01dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$54
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$57
	DD	022H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$58
	DD	023H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$59
	DD	024H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$60
	DD	025H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$61
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$63
	DD	027H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$64
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$64
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$66
	DD	02aH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$67
	DD	02bH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$68
	DD	02cH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$69
	DD	02dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$70
	DD	02eH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$71
	DD	02fH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$72
	DD	0ffffffffH
	DD	00H
	DD	031H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$74
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	034H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$75
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$76
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$78
	DD	040H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$79
	DD	041H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$80
	DD	042H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$81
	DD	043H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$82
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _MainDialogProc@16
_TEXT	SEGMENT
$T169105 = -2628					; size = 384
$T169082 = -2244					; size = 384
$T169072 = -1858					; size = 94
$T169079 = -1764					; size = 94
$T169090 = -1670					; size = 94
$T169089 = -1576					; size = 94
$T169067 = -1482					; size = 94
$T169121 = -1388					; size = 24
_volume$134557 = -1364					; size = 56
$T169078 = -1308					; size = 16
$T169131 = -1292					; size = 28
$T169145 = -1264					; size = 28
$T169108 = -1236					; size = 28
$T169096 = -1208					; size = 28
$T169109 = -1180					; size = 28
$T169149 = -1152					; size = 28
$T169110 = -1124					; size = 28
$T169071 = -1096					; size = 28
$T169111 = -1068					; size = 28
$T169147 = -1040					; size = 28
$T169112 = -1012					; size = 28
$T169129 = -984						; size = 28
$T169113 = -956						; size = 28
$T169070 = -928						; size = 28
$T169100 = -900						; size = 28
$T169144 = -872						; size = 28
$T169137 = -844						; size = 28
$T169146 = -816						; size = 28
$T169124 = -788						; size = 28
$T169148 = -760						; size = 28
$T169126 = -732						; size = 28
$T169130 = -704						; size = 28
$T169128 = -676						; size = 28
$T169125 = -648						; size = 28
$T169101 = -620						; size = 28
$T169127 = -592						; size = 28
$T169102 = -564						; size = 28
$T169094 = -536						; size = 28
$T169095 = -508						; size = 28
$T169116 = -480						; size = 24
$T169136 = -456						; size = 28
$T169132 = -428						; size = 28
$T169134 = -400						; size = 28
$T169069 = -372						; size = 28
_e$134726 = -344					; size = 4
_e$134079 = -340					; size = 4
_e$134666 = -336					; size = 4
_e$134170 = -332					; size = 4
_e$134648 = -328					; size = 4
_e$134207 = -324					; size = 4
_e$134659 = -320					; size = 4
_e$134254 = -316					; size = 4
_e$134633 = -312					; size = 4
_e$134159 = -308					; size = 4
_e$134595 = -304					; size = 4
_e$134213 = -300					; size = 4
_e$134335 = -296					; size = 4
_e$134138 = -292					; size = 4
_e$134328 = -288					; size = 4
_e$134586 = -284					; size = 4
_e$134296 = -280					; size = 4
_e$134311 = -276					; size = 4
_e$134175 = -272					; size = 4
_e$134205 = -268					; size = 4
_e$134140 = -264					; size = 4
_multiChoiceStr$134599 = -260				; size = 24
_rW$169759 = -236					; size = 16
_rW$169484 = -220					; size = 16
_$S2$134542 = -204					; size = 48
_rW$169417 = -156					; size = 16
_rW$169342 = -140					; size = 16
_rD$169416 = -124					; size = 16
_rD$169483 = -108					; size = 16
_rD$169341 = -92					; size = 16
_rD$169758 = -76					; size = 16
_tmpbDevice$134796 = -60				; size = 4
$T169097 = -60						; size = 4
_e$134148 = -56						; size = 4
_lParam$GSCopy$ = -52					; size = 4
_tmpbDevice$134401 = -52				; size = 4
tv5953 = -48						; size = 8
tv5950 = -48						; size = 8
tv5924 = -48						; size = 8
_tmpbDevice$134538 = -44				; size = 4
tv5753 = -40						; size = 8
tv5700 = -40						; size = 8
tv5697 = -40						; size = 8
tv5683 = -40						; size = 8
tv5649 = -40						; size = 8
tv5571 = -40						; size = 8
$T169211 = -36						; size = 4
tv5035 = -32						; size = 8
_hwndDlg$GSCopy$ = -28					; size = 4
$T169104 = -21						; size = 1
$T169099 = -21						; size = 1
_nNewPageNo$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_msg$134610 = 0						; size = 16384
_szTmp$134630 = 16384					; size = 16000
_szTmp$134186 = 32384					; size = 8192
_szTmp$134191 = 40576					; size = 8192
_tmp$134841 = 48768					; size = 641
_tmp$134223 = 49412					; size = 641
_root$134458 = 50056					; size = 260
_szFileSystemNameBuffer$134456 = 50316			; size = 256
_tmp$134582 = 50572					; size = 371
_tmp$134832 = 50944					; size = 371
_tmp$134835 = 51316					; size = 65
_tmp$134590 = 51384					; size = 65
_tmp$169422 = 51452					; size = 65
_tmp$169489 = 51520					; size = 65
_tmp$169764 = 51588					; size = 65
_tmp$169347 = 51656					; size = 65
_tmp2$134104 = 51724					; size = 43
_tmp$134103 = 51768					; size = 17
_decoySysPartitionWipeStatus$134201 = 51788		; size = 16
_tmp3$134110 = 51796					; size = 8
__$ArrayPad$ = 51804					; size = 4
_hwndDlg$ = 51816					; size = 4
_uMsg$ = 51820						; size = 4
_wParam$ = 51824					; size = 4
_lParam$ = 51828					; size = 4
_MainDialogProc@16 PROC					; COMDAT

; 5370 : {

  00000	55		 push	 ebp
  00001	8d ac 24 a0 35
	ff ff		 lea	 ebp, DWORD PTR [esp-51808]
  00008	b8 60 ca 00 00	 mov	 eax, 51808		; 0000ca60H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_MainDialogProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	81 ec 38 0a 00
	00		 sub	 esp, 2616		; 00000a38H
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 85 5c ca 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	8b 85 74 ca 00
	00		 mov	 eax, DWORD PTR _lParam$[ebp]

; 5371 : 	WORD lw = LOWORD (wParam);
; 5372 : 
; 5373 : 	int nNewPageNo = nCurPageNo;
; 5374 : 
; 5375 : 	switch (uMsg)

  00049	8b 8d 6c ca 00
	00		 mov	 ecx, DWORD PTR _uMsg$[ebp]
  0004f	8b 9d 68 ca 00
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00055	89 45 cc	 mov	 DWORD PTR _lParam$GSCopy$[ebp], eax
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0005d	33 ff		 xor	 edi, edi
  0005f	8b f0		 mov	 esi, eax
  00061	89 5d e4	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00064	89 7d dc	 mov	 DWORD PTR $T169211[ebp], edi
  00067	89 75 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], esi
  0006a	81 f9 10 01 00
	00		 cmp	 ecx, 272		; 00000110H
  00070	0f 87 0c 02 00
	00		 ja	 $LN538@MainDialog
  00076	74 6e		 je	 SHORT $LN509@MainDialog
  00078	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0007b	74 54		 je	 SHORT $LN1@MainDialog
  0007d	83 f9 16	 cmp	 ecx, 22			; 00000016H
  00080	74 16		 je	 SHORT $LN2@MainDialog
  00082	83 f9 53	 cmp	 ecx, 83			; 00000053H
  00085	75 21		 jne	 SHORT $LN510@MainDialog
$LN1227@MainDialog:

; 5925 : 		return 1;
; 5926 : 
; 5927 : 	case WM_HELP:
; 5928 : 
; 5929 : 		OpenPageHelp (hwndDlg, nCurPageNo);

  00087	50		 push	 eax
  00088	53		 push	 ebx
  00089	e8 00 00 00 00	 call	 _OpenPageHelp
  0008e	83 c4 08	 add	 esp, 8
  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	eb 12		 jmp	 SHORT $LN512@MainDialog
$LN2@MainDialog:

; 7754 : 
; 7755 : 			return 1;
; 7756 : 		}
; 7757 : 
; 7758 : 		return 0;
; 7759 : 
; 7760 : 	case WM_ENDSESSION:
; 7761 : 		EndMainDlg (MainDlg);

  00098	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0009e	e8 00 00 00 00	 call	 _EndMainDlg

; 7762 : 		localcleanup ();

  000a3	e8 00 00 00 00	 call	 _localcleanup
$LN510@MainDialog:

; 7767 : 		return 1;
; 7768 : 	}
; 7769 : 
; 7770 : 	return 0;

  000a8	33 c0		 xor	 eax, eax
$LN512@MainDialog:

; 7771 : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b 8d 5c ca 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	81 c5 60 ca 00
	00		 add	 ebp, 51808		; 0000ca60H
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 10 00	 ret	 16			; 00000010H
$LN1@MainDialog:

; 7763 : 		return 0;
; 7764 : 
; 7765 : 	case WM_CLOSE:
; 7766 : 		PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  000d1	57		 push	 edi
  000d2	57		 push	 edi
  000d3	68 2f 81 00 00	 push	 33071			; 0000812fH
  000d8	53		 push	 ebx
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  000df	b8 01 00 00 00	 mov	 eax, 1
  000e4	eb c4		 jmp	 SHORT $LN512@MainDialog
$LN509@MainDialog:

; 5376 : 	{
; 5377 : 	case WM_INITDIALOG:
; 5378 : 		{
; 5379 : 			MainDlg = hwndDlg;
; 5380 : 			InitDialog (hwndDlg);

  000e6	53		 push	 ebx
  000e7	89 1d 00 00 00
	00		 mov	 DWORD PTR _MainDlg, ebx
  000ed	e8 00 00 00 00	 call	 _InitDialog

; 5381 : 			LocalizeDialog (hwndDlg, "IDD_VOL_CREATION_WIZARD_DLG");

  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  000f7	53		 push	 ebx
  000f8	e8 00 00 00 00	 call	 _LocalizeDialog
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5382 : 
; 5383 : 			if (IsCipherShedInstallerRunning())

  00100	e8 00 00 00 00	 call	 _IsCipherShedInstallerRunning
  00105	85 c0		 test	 eax, eax
  00107	74 0d		 je	 SHORT $LN508@MainDialog

; 5384 : 				AbortProcess ("TC_INSTALLER_IS_RUNNING");

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
  0010e	e8 00 00 00 00	 call	 _AbortProcess
  00113	83 c4 04	 add	 esp, 4
$LN508@MainDialog:

; 5385 : 
; 5386 : 			// Resize the bitmap if the user has a non-default DPI 
; 5387 : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  00116	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0011d	74 22		 je	 SHORT $LN507@MainDialog

; 5388 : 			{
; 5389 : 				hbmWizardBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_WIZARD),
; 5390 : 					GetDlgItem (hwndDlg, IDC_BITMAP_WIZARD),
; 5391 : 					0, 0, 0, 0, FALSE, FALSE);

  0011f	57		 push	 edi
  00120	57		 push	 edi
  00121	57		 push	 edi
  00122	57		 push	 edi
  00123	57		 push	 edi
  00124	57		 push	 edi
  00125	68 24 04 00 00	 push	 1060			; 00000424H
  0012a	53		 push	 ebx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00131	50		 push	 eax
  00132	6a 74		 push	 116			; 00000074H
  00134	e8 00 00 00 00	 call	 _RenderBitmap
  00139	83 c4 20	 add	 esp, 32			; 00000020H
  0013c	a3 00 00 00 00	 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, eax ; hbmWizardBitmapRescaled
$LN507@MainDialog:

; 5392 : 			}
; 5393 : 
; 5394 : 			LoadSettings (hwndDlg);

  00141	8b f3		 mov	 esi, ebx
  00143	e8 00 00 00 00	 call	 _LoadSettings

; 5395 : 
; 5396 : 			LoadDefaultKeyFilesParam ();

  00148	e8 00 00 00 00	 call	 _LoadDefaultKeyFilesParam

; 5397 : 			RestoreDefaultKeyFilesParam ();

  0014d	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 5398 : 
; 5399 : 			SysEncMultiBootCfg.NumberOfSysDrives = -1;

  00152	83 c8 ff	 or	 eax, -1

; 5400 : 			SysEncMultiBootCfg.MultipleSystemsOnDrive = -1;
; 5401 : 			SysEncMultiBootCfg.BootLoaderLocation = -1;
; 5402 : 			SysEncMultiBootCfg.BootLoaderBrand = -1;
; 5403 : 			SysEncMultiBootCfg.SystemOnBootDrive = -1;
; 5404 : 
; 5405 : 			try
; 5406 : 			{
; 5407 : 				BootEncStatus = BootEncObj->GetStatus();

  00155	8d 8d 36 fa ff
	ff		 lea	 ecx, DWORD PTR $T169067[ebp]
  0015b	51		 push	 ecx
  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, eax
  00167	a3 04 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4, eax
  0016c	a3 08 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+8, eax
  00171	a3 0c 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12, eax
  00176	a3 10 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16, eax
  0017b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0017e	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 5415 : 			}
; 5416 : 
; 5417 : 			SendMessage (GetDlgItem (hwndDlg, IDC_BOX_TITLE), WM_SETFONT, (WPARAM) hTitleFont, (LPARAM) TRUE);

  00183	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hTitleFont
  00189	8b f0		 mov	 esi, eax
  0018b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00190	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00195	f3 a5		 rep movsd
  00197	6a 01		 push	 1
  00199	52		 push	 edx
  0019a	6a 30		 push	 48			; 00000030H
  0019c	68 e8 03 00 00	 push	 1000			; 000003e8H
  001a1	53		 push	 ebx
  001a2	66 a5		 movsw
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001aa	50		 push	 eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5418 : 			SetWindowTextW (hwndDlg, lpszTitle);

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  001b6	50		 push	 eax
  001b7	53		 push	 ebx
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5419 : 
; 5420 : 			ExtractCommandLine (hwndDlg, (char *) lParam);

  001be	8b 4d cc	 mov	 ecx, DWORD PTR _lParam$GSCopy$[ebp]
  001c1	51		 push	 ecx
  001c2	53		 push	 ebx
  001c3	e8 00 00 00 00	 call	 _ExtractCommandLine
  001c8	83 c4 08	 add	 esp, 8

; 5421 : 
; 5422 : 			if (ComServerMode)

  001cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ComServerMode@@3HA, 0 ; ComServerMode
  001d2	74 26		 je	 SHORT $LN505@MainDialog

; 5423 : 			{
; 5424 : 				InitDialog (hwndDlg);

  001d4	53		 push	 ebx
  001d5	e8 00 00 00 00	 call	 _InitDialog
  001da	83 c4 04	 add	 esp, 4

; 5425 : 
; 5426 : 				if (!ComServerFormat ())

  001dd	e8 00 00 00 00	 call	 _ComServerFormat
  001e2	85 c0		 test	 eax, eax
  001e4	0f 85 94 0e 00
	00		 jne	 $LN504@MainDialog

; 5427 : 				{
; 5428 : 					handleWin32Error (hwndDlg);

  001ea	53		 push	 ebx
  001eb	e8 00 00 00 00	 call	 _handleWin32Error
  001f0	83 c4 04	 add	 esp, 4

; 5429 : 					exit (1);

  001f3	6a 01		 push	 1
  001f5	e8 00 00 00 00	 call	 _exit
$LN505@MainDialog:

; 5430 : 				}
; 5431 : 				exit (0);
; 5432 : 			}
; 5433 : 
; 5434 : 			SHGetFolderPath (NULL, CSIDL_MYDOCUMENTS, NULL, 0, szRescueDiskISO);

  001fa	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	6a 05		 push	 5
  00205	6a 00		 push	 0
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20

; 5435 : 			strcat (szRescueDiskISO, "\\CipherShed Rescue Disk.iso");

  0020d	bf 00 00 00 00	 mov	 edi, OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  00212	4f		 dec	 edi
$LL1120@MainDialog:
  00213	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00216	47		 inc	 edi
  00217	84 c0		 test	 al, al
  00219	75 f8		 jne	 SHORT $LL1120@MainDialog
  0021b	b9 07 00 00 00	 mov	 ecx, 7
  00220	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@

; 5436 : 
; 5437 : 			if (IsOSAtLeast (WIN_VISTA))

  00225	6a 0b		 push	 11			; 0000000bH
  00227	f3 a5		 rep movsd
  00229	e8 00 00 00 00	 call	 _IsOSAtLeast
  0022e	83 c4 04	 add	 esp, 4
  00231	85 c0		 test	 eax, eax
  00233	74 0a		 je	 SHORT $LN503@MainDialog

; 5438 : 			{
; 5439 : 				// Availability of in-place encryption (which is pre-selected by default whenever
; 5440 : 				// possible) makes partition-hosted volume creation safer.
; 5441 : 				bWarnDeviceFormatAdvanced = FALSE;	

  00235	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bWarnDeviceFormatAdvanced, 0
$LN503@MainDialog:

; 5442 : 			}
; 5443 : 
; 5444 : #ifdef _DEBUG
; 5445 : 			// For faster testing
; 5446 : 			strcpy (szVerify, "q");
; 5447 : 			strcpy (szRawPassword, "q");
; 5448 : #endif
; 5449 : 
; 5450 : 			PostMessage (hwndDlg, TC_APPMSG_PERFORM_POST_WMINIT_TASKS, 0, 0);

  0023f	6a 00		 push	 0
  00241	6a 00		 push	 0
  00243	68 30 81 00 00	 push	 33072			; 00008130H
  00248	53		 push	 ebx
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 5451 : 		}
; 5452 : 		return 0;

  0024f	e9 54 fe ff ff	 jmp	 $LN510@MainDialog
__catch$_MainDialogProc@16$0:

; 5408 : 			}
; 5409 : 			catch (Exception &e)
; 5410 : 			{
; 5411 : 				e.Show (hwndDlg);

  00254	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _e$134079[ebp]
  0025a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025c	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0025f	8b 12		 mov	 edx, DWORD PTR [edx]
  00261	50		 push	 eax
  00262	ff d2		 call	 edx

; 5412 : 				Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00264	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00269	e8 00 00 00 00	 call	 _Error

; 5413 : 				EndMainDlg (MainDlg);

  0026e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00274	83 c4 04	 add	 esp, 4
  00277	e8 00 00 00 00	 call	 _EndMainDlg

; 5414 : 				return 0;

  0027c	b8 00 00 00 00	 mov	 eax, $LN510@MainDialog
  00281	c3		 ret	 0
$LN538@MainDialog:

; 5371 : 	WORD lw = LOWORD (wParam);
; 5372 : 
; 5373 : 	int nNewPageNo = nCurPageNo;
; 5374 : 
; 5375 : 	switch (uMsg)

  00282	81 f9 2d 81 00
	00		 cmp	 ecx, 33069		; 0000812dH
  00288	0f 87 6f 41 00
	00		 ja	 $LN539@MainDialog
  0028e	0f 84 52 40 00
	00		 je	 $LN428@MainDialog
  00294	81 e9 11 01 00
	00		 sub	 ecx, 273		; 00000111H
  0029a	0f 84 cb 0c 00
	00		 je	 $LN397@MainDialog
  002a0	83 e9 01	 sub	 ecx, 1
  002a3	0f 84 8d 0c 00
	00		 je	 $LN502@MainDialog
  002a9	83 e9 01	 sub	 ecx, 1
  002ac	0f 85 f6 fd ff
	ff		 jne	 $LN510@MainDialog

; 5453 : 
; 5454 : 	case WM_SYSCOMMAND:
; 5455 : 		if (lw == IDC_ABOUT)
; 5456 : 		{
; 5457 : 			DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);
; 5458 : 			return 1;
; 5459 : 		}
; 5460 : 		return 0;
; 5461 : 
; 5462 : 	case WM_TIMER:
; 5463 : 
; 5464 : 		switch (wParam)

  002b2	8b 85 70 ca 00
	00		 mov	 eax, DWORD PTR _wParam$[ebp]
  002b8	05 01 ff ff ff	 add	 eax, -255		; ffffff01H
  002bd	83 f8 05	 cmp	 eax, 5
  002c0	0f 87 e2 fd ff
	ff		 ja	 $LN510@MainDialog
  002c6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1232@MainDialog[eax*4]
$LN497@MainDialog:

; 5465 : 		{
; 5466 : 		case TIMER_ID_RANDVIEW:
; 5467 : 
; 5468 : 			if (WizardMode == WIZARD_MODE_SYS_DEVICE
; 5469 : 				|| bInPlaceEncNonSys)

  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  002d2	83 f8 02	 cmp	 eax, 2
  002d5	0f 84 77 01 00
	00		 je	 $LN495@MainDialog
  002db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  002e1	85 c9		 test	 ecx, ecx
  002e3	0f 85 69 01 00
	00		 jne	 $LN495@MainDialog

; 5472 : 			}
; 5473 : 			else
; 5474 : 			{
; 5475 : 				unsigned char tmp[17];
; 5476 : 				char tmp2[43];
; 5477 : 				int i;
; 5478 : 
; 5479 : 				if (!showKeys) 

  002e9	39 3d 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edi

; 5480 : 					return 1;

  002ef	0f 84 73 01 00
	00		 je	 $LN482@MainDialog

; 5481 : 
; 5482 : 				RandpeekBytes (tmp, sizeof (tmp));

  002f5	8d 95 38 ca 00
	00		 lea	 edx, DWORD PTR _tmp$134103[ebp]
  002fb	6a 11		 push	 17			; 00000011H
  002fd	52		 push	 edx
  002fe	e8 00 00 00 00	 call	 _RandpeekBytes
  00303	83 c4 08	 add	 esp, 8

; 5483 : 
; 5484 : 				tmp2[0] = 0;

  00306	c6 85 0c ca 00
	00 00		 mov	 BYTE PTR _tmp2$134104[ebp], 0

; 5485 : 
; 5486 : 				for (i = 0; i < sizeof (tmp); i++)

  0030d	33 db		 xor	 ebx, ebx
  0030f	90		 npad	 1
$LL492@MainDialog:

; 5487 : 				{
; 5488 : 					char tmp3[8];
; 5489 : 					sprintf (tmp3, "%02X", (int) (unsigned char) tmp[i]);

  00310	0f b6 84 1d 38
	ca 00 00	 movzx	 eax, BYTE PTR _tmp$134103[ebp+ebx]
  00318	50		 push	 eax
  00319	8d 8d 54 ca 00
	00		 lea	 ecx, DWORD PTR _tmp3$134110[ebp]
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _sprintf

; 5490 : 					strcat (tmp2, tmp3);

  0032a	8d 85 54 ca 00
	00		 lea	 eax, DWORD PTR _tmp3$134110[ebp]
  00330	83 c4 0c	 add	 esp, 12			; 0000000cH
  00333	8b c8		 mov	 ecx, eax
$LL1121@MainDialog:
  00335	8a 10		 mov	 dl, BYTE PTR [eax]
  00337	40		 inc	 eax
  00338	84 d2		 test	 dl, dl
  0033a	75 f9		 jne	 SHORT $LL1121@MainDialog
  0033c	8d bd 0c ca 00
	00		 lea	 edi, DWORD PTR _tmp2$134104[ebp]
  00342	2b c1		 sub	 eax, ecx
  00344	8b f1		 mov	 esi, ecx
  00346	4f		 dec	 edi
$LL1122@MainDialog:
  00347	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0034a	47		 inc	 edi
  0034b	84 c9		 test	 cl, cl
  0034d	75 f8		 jne	 SHORT $LL1122@MainDialog
  0034f	8b c8		 mov	 ecx, eax
  00351	c1 e9 02	 shr	 ecx, 2
  00354	f3 a5		 rep movsd
  00356	8b c8		 mov	 ecx, eax
  00358	83 e1 03	 and	 ecx, 3
  0035b	43		 inc	 ebx
  0035c	f3 a4		 rep movsb
  0035e	83 fb 11	 cmp	 ebx, 17			; 00000011H
  00361	72 ad		 jb	 SHORT $LL492@MainDialog

; 5491 : 				}
; 5492 : 
; 5493 : 				tmp2[32] = 0;
; 5494 : 
; 5495 : 				SetWindowTextW (GetDlgItem (hCurPage, IDC_RANDOM_BYTES), (SingleStringToWide (tmp2) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00363	8d 95 0c ca 00
	00		 lea	 edx, DWORD PTR _tmp2$134104[ebp]
  00369	52		 push	 edx
  0036a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169069[ebp]
  00370	c6 85 2c ca 00
	00 00		 mov	 BYTE PTR _tmp2$134104[ebp+32], 0
  00377	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037c	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T169069[ebp]
  00382	50		 push	 eax
  00383	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T169070[ebp]
  00389	51		 push	 ecx
  0038a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00391	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00396	8b f0		 mov	 esi, eax
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  0039d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  003a1	e8 00 00 00 00	 call	 _GetString
  003a6	50		 push	 eax
  003a7	8d 95 b8 fb ff
	ff		 lea	 edx, DWORD PTR $T169071[ebp]
  003ad	56		 push	 esi
  003ae	52		 push	 edx
  003af	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003b4	83 c4 18	 add	 esp, 24			; 00000018H
  003b7	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  003bb	72 05		 jb	 SHORT $LN678@MainDialog
  003bd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c0	eb 03		 jmp	 SHORT $LN679@MainDialog
$LN678@MainDialog:
  003c2	83 c0 04	 add	 eax, 4
$LN679@MainDialog:
  003c5	50		 push	 eax
  003c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  003cb	68 fc 03 00 00	 push	 1020			; 000003fcH
  003d0	50		 push	 eax
  003d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003d7	50		 push	 eax
  003d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  003de	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR $T169071[ebp]
  003e4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003e9	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T169070[ebp]
  003ef	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003f4	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169069[ebp]
  003fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5496 : 
; 5497 : 				burn (tmp, sizeof(tmp));

  003ff	8d 95 38 ca 00
	00		 lea	 edx, DWORD PTR _tmp$134103[ebp]
  00405	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0040a	8b f1		 mov	 esi, ecx
  0040c	8b c2		 mov	 eax, edx
  0040e	8b ff		 npad	 2
$LL681@MainDialog:
  00410	c6 00 00	 mov	 BYTE PTR [eax], 0
  00413	40		 inc	 eax
  00414	83 ee 01	 sub	 esi, 1
  00417	75 f7		 jne	 SHORT $LL681@MainDialog
  00419	8d a4 24 00 00
	00 00		 npad	 7
$LL486@MainDialog:
  00420	49		 dec	 ecx
  00421	c6 02 00	 mov	 BYTE PTR [edx], 0
  00424	42		 inc	 edx
  00425	85 c9		 test	 ecx, ecx
  00427	75 f7		 jne	 SHORT $LL486@MainDialog

; 5498 : 				burn (tmp2, sizeof(tmp2));

  00429	8d 95 0c ca 00
	00		 lea	 edx, DWORD PTR _tmp2$134104[ebp]
  0042f	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00434	8b f1		 mov	 esi, ecx
  00436	8b c2		 mov	 eax, edx
$LL685@MainDialog:
  00438	c6 00 00	 mov	 BYTE PTR [eax], 0
  0043b	40		 inc	 eax
  0043c	83 ee 01	 sub	 esi, 1
  0043f	75 f7		 jne	 SHORT $LL685@MainDialog
$LL481@MainDialog:
  00441	49		 dec	 ecx
  00442	c6 02 00	 mov	 BYTE PTR [edx], 0
  00445	42		 inc	 edx
  00446	85 c9		 test	 ecx, ecx
  00448	75 f7		 jne	 SHORT $LL481@MainDialog
$ovf_end$134758:

; 5499 : 			}
; 5500 : 			return 1;

  0044a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0044d	e9 58 fc ff ff	 jmp	 $LN512@MainDialog
$LN495@MainDialog:

; 5470 : 			{
; 5471 : 				DisplayRandPool (hRandPoolSys, showKeys);

  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _showKeys
  00458	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  0045e	51		 push	 ecx
  0045f	52		 push	 edx
  00460	e8 00 00 00 00	 call	 _DisplayRandPool
  00465	83 c4 08	 add	 esp, 8
$LN482@MainDialog:
$ovf_end_1$134758:

; 5499 : 			}
; 5500 : 			return 1;

  00468	b8 01 00 00 00	 mov	 eax, 1
  0046d	e9 38 fc ff ff	 jmp	 $LN512@MainDialog
$LN479@MainDialog:

; 5501 : 
; 5502 : 		case TIMER_ID_SYSENC_PROGRESS:
; 5503 : 			{
; 5504 : 				// Manage system encryption/decryption and update related GUI
; 5505 : 
; 5506 : 				try
; 5507 : 				{
; 5508 : 					BootEncStatus = BootEncObj->GetStatus();

  00472	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00478	8d 85 be f8 ff
	ff		 lea	 eax, DWORD PTR $T169072[ebp]
  0047e	50		 push	 eax
  0047f	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00486	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0048b	8b f0		 mov	 esi, eax
  0048d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00492	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00497	f3 a5		 rep movsd
  00499	66 a5		 movsw

; 5527 : 				}
; 5528 : 
; 5529 : 				if (BootEncStatus.SetupInProgress)

  0049b	a1 3e 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
  004a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  004a7	85 c0		 test	 eax, eax
  004a9	74 0a		 je	 SHORT $LN476@MainDialog

; 5530 : 					UpdateSysEncProgressBar ();

  004ab	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar
  004b0	a1 3e 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
$LN476@MainDialog:

; 5531 : 
; 5532 : 				if (bSystemEncryptionInProgress != BootEncStatus.SetupInProgress)

  004b5	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, eax ; bSystemEncryptionInProgress
  004bb	74 ab		 je	 SHORT $LN482@MainDialog

; 5533 : 				{
; 5534 : 					bSystemEncryptionInProgress = BootEncStatus.SetupInProgress;

  004bd	a3 00 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, eax ; bSystemEncryptionInProgress

; 5535 : 
; 5536 : 					UpdateSysEncProgressBar ();

  004c2	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 5537 : 					UpdateSysEncControls ();

  004c7	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 5538 : 
; 5539 : 					if (!bSystemEncryptionInProgress)

  004cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  004d3	75 93		 jne	 SHORT $LN482@MainDialog

; 5540 : 					{
; 5541 : 						// The driver stopped encrypting/decrypting
; 5542 : 
; 5543 : 						// Allow the OS to enter Sleep mode when idle
; 5544 : 						SetThreadExecutionState (ES_CONTINUOUS);

  004d5	68 00 00 00 80	 push	 -2147483648		; 80000000H
  004da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 5545 : 
; 5546 : 						KillTimer (hwndDlg, TIMER_ID_SYSENC_PROGRESS);

  004e0	68 00 01 00 00	 push	 256			; 00000100H
  004e5	53		 push	 ebx
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5547 : 
; 5548 : 						try
; 5549 : 						{
; 5550 : 							if (BootEncStatus.DriveMounted)	// If we had been really encrypting/decrypting (not just proceeding to deinstall)

  004ec	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  004f3	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  004fa	74 0b		 je	 SHORT $LN472@MainDialog

; 5551 : 								BootEncObj->CheckEncryptionSetupResult();

  004fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00502	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
$LN472@MainDialog:
  00507	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN638@MainDialog:

; 5586 : 
; 5587 : 						switch (SystemEncryptionStatus)

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00513	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00518	0f 84 0b 02 00
	00		 je	 $LN464@MainDialog
  0051e	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00523	0f 85 3f ff ff
	ff		 jne	 $LN482@MainDialog

; 5588 : 						{
; 5589 : 						case SYSENC_STATUS_ENCRYPTING:
; 5590 : 
; 5591 : 							if (BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 5592 : 								&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd)
; 5593 : 							{
; 5594 : 								// The partition/drive has been fully encrypted
; 5595 : 
; 5596 : 								ManageStartupSeqWiz (TRUE, "");
; 5597 : 
; 5598 : 								SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));
; 5599 : 								EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);
; 5600 : 								EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);
; 5601 : 								EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), FALSE);
; 5602 : 								EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);
; 5603 : 
; 5604 : 								WipeHiddenOSCreationConfig();	// For extra conservative security
; 5605 : 
; 5606 : 								ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);
; 5607 : 
; 5608 : 								Info ("SYSTEM_ENCRYPTION_FINISHED");
; 5609 : 								return 1;
; 5610 : 							}
; 5611 : 							break;
; 5612 : 
; 5613 : 						case SYSENC_STATUS_DECRYPTING:
; 5614 : 
; 5615 : 							if (!BootEncStatus.DriveEncrypted)

  00529	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00530	0f 85 32 ff ff
	ff		 jne	 $LN482@MainDialog

; 5616 : 							{
; 5617 : 								// The partition/drive has been fully decrypted
; 5618 : 
; 5619 : 								try
; 5620 : 								{
; 5621 : 									// Finalize the process
; 5622 : 									BootEncObj->Deinstall ();

  00536	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0053c	6a 00		 push	 0
  0053e	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00545	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
  0054a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00551	e9 11 01 00 00	 jmp	 $LN641@MainDialog
__catch$_MainDialogProc@16$6:

; 5552 : 						}
; 5553 : 						catch (SystemException &e)
; 5554 : 						{
; 5555 : 							if (!bTryToCorrectReadErrors
; 5556 : 								&& SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 5557 : 								&& (IsDiskReadError (e.ErrorCode)))

  00556	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0055c	85 c9		 test	 ecx, ecx
  0055e	75 4f		 jne	 SHORT $LN471@MainDialog
  00560	81 3d 00 00 00
	00 90 01 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 400 ; 00000190H
  0056a	75 43		 jne	 SHORT $LN471@MainDialog
  0056c	8b 55 c8	 mov	 edx, DWORD PTR _e$134148[ebp]
  0056f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 _IsDiskReadError
  00578	83 c4 04	 add	 esp, 4
  0057b	85 c0		 test	 eax, eax
  0057d	74 30		 je	 SHORT $LN471@MainDialog

; 5558 : 							{
; 5559 : 								bTryToCorrectReadErrors = (AskWarnYesNo ("ENABLE_BAD_SECTOR_ZEROING") == IDYES);

  0057f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@
  00584	e8 00 00 00 00	 call	 _AskWarnYesNo
  00589	33 c9		 xor	 ecx, ecx
  0058b	83 c4 04	 add	 esp, 4
  0058e	83 f8 06	 cmp	 eax, 6
  00591	0f 94 c1	 sete	 cl
  00594	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bTryToCorrectReadErrors@@3HC, ecx ; bTryToCorrectReadErrors

; 5560 : 
; 5561 : 								if (bTryToCorrectReadErrors)

  0059a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  005a0	85 d2		 test	 edx, edx
  005a2	74 62		 je	 SHORT $LN1168@MainDialog

; 5562 : 								{
; 5563 : 									SysEncResume();

  005a4	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume

; 5564 : 									return 1;

  005a9	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  005ae	c3		 ret	 0
$LN471@MainDialog:

; 5565 : 								}
; 5566 : 							}
; 5567 : 							else if (!DiscardUnreadableEncryptedSectors
; 5568 : 								&& SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 5569 : 								&& (IsDiskReadError (e.ErrorCode)))

  005af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  005b4	85 c0		 test	 eax, eax
  005b6	75 4e		 jne	 SHORT $LN1168@MainDialog
  005b8	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  005c2	75 42		 jne	 SHORT $LN1168@MainDialog
  005c4	8b 75 c8	 mov	 esi, DWORD PTR _e$134148[ebp]
  005c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  005ca	51		 push	 ecx
  005cb	e8 00 00 00 00	 call	 _IsDiskReadError
  005d0	83 c4 04	 add	 esp, 4
  005d3	85 c0		 test	 eax, eax
  005d5	74 32		 je	 SHORT $LN467@MainDialog

; 5570 : 							{
; 5571 : 								DiscardUnreadableEncryptedSectors = (AskWarnYesNo ("DISCARD_UNREADABLE_ENCRYPTED_SECTORS") == IDYES);

  005d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@
  005dc	e8 00 00 00 00	 call	 _AskWarnYesNo
  005e1	33 d2		 xor	 edx, edx
  005e3	83 c4 04	 add	 esp, 4
  005e6	83 f8 06	 cmp	 eax, 6
  005e9	0f 94 c2	 sete	 dl
  005ec	89 15 00 00 00
	00		 mov	 DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC, edx ; DiscardUnreadableEncryptedSectors

; 5572 : 
; 5573 : 								if (DiscardUnreadableEncryptedSectors)

  005f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  005f7	85 c0		 test	 eax, eax
  005f9	74 0b		 je	 SHORT $LN1168@MainDialog

; 5574 : 								{
; 5575 : 									SysEncResume();

  005fb	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume

; 5576 : 									return 1;

  00600	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  00605	c3		 ret	 0
$LN1168@MainDialog:
  00606	8b 75 c8	 mov	 esi, DWORD PTR _e$134148[ebp]
$LN467@MainDialog:

; 5577 : 								}
; 5578 : 							}
; 5579 : 
; 5580 : 							e.Show (hwndDlg);

  00609	8b 16		 mov	 edx, DWORD PTR [esi]
  0060b	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0060e	8b 12		 mov	 edx, DWORD PTR [edx]
  00610	50		 push	 eax
  00611	8b ce		 mov	 ecx, esi
  00613	ff d2		 call	 edx

; 5581 : 						}

  00615	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0061c	b8 00 00 00 00	 mov	 eax, $LN637@MainDialog
  00621	c3		 ret	 0
$LN637@MainDialog:
  00622	8b 5d e4	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00625	e9 e4 fe ff ff	 jmp	 $LN638@MainDialog
__catch$_MainDialogProc@16$7:

; 5582 : 						catch (Exception &e)
; 5583 : 						{
; 5584 : 							e.Show (hwndDlg);

  0062a	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134159[ebp]
  00630	8b 01		 mov	 eax, DWORD PTR [ecx]
  00632	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00635	8b 00		 mov	 eax, DWORD PTR [eax]
  00637	52		 push	 edx
  00638	ff d0		 call	 eax

; 5585 : 						}

  0063a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00641	b8 00 00 00 00	 mov	 eax, $LN637@MainDialog
  00646	c3		 ret	 0
__catch$_MainDialogProc@16$9:

; 5623 : 								}
; 5624 : 								catch (Exception &e)
; 5625 : 								{
; 5626 : 									e.Show (hwndDlg);

  00647	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134170[ebp]
  0064d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0064f	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00652	8b 12		 mov	 edx, DWORD PTR [edx]
  00654	50		 push	 eax
  00655	ff d2		 call	 edx

; 5627 : 								}

  00657	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0065e	b8 00 00 00 00	 mov	 eax, $LN1169@MainDialog
  00663	c3		 ret	 0
$LN1169@MainDialog:
  00664	8b 5d e4	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN641@MainDialog:

; 5628 : 					
; 5629 : 								ManageStartupSeqWiz (TRUE, "");

  00667	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0066c	6a 01		 push	 1
  0066e	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 5630 : 								ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00673	33 f6		 xor	 esi, esi
  00675	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 5631 : 
; 5632 : 								SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  0067a	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  0067f	e8 00 00 00 00	 call	 _GetString
  00684	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0068a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0068d	50		 push	 eax
  0068e	68 10 04 00 00	 push	 1040			; 00000410H
  00693	53		 push	 ebx
  00694	ff d6		 call	 esi
  00696	50		 push	 eax
  00697	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5633 : 								EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  0069d	6a 01		 push	 1
  0069f	68 10 04 00 00	 push	 1040			; 00000410H
  006a4	53		 push	 ebx
  006a5	ff d6		 call	 esi
  006a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  006ad	50		 push	 eax
  006ae	ff d7		 call	 edi

; 5634 : 								EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  006b0	6a 00		 push	 0
  006b2	6a 02		 push	 2
  006b4	53		 push	 ebx
  006b5	ff d6		 call	 esi
  006b7	50		 push	 eax
  006b8	ff d7		 call	 edi

; 5635 : 								EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  006ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  006bf	6a 00		 push	 0
  006c1	68 41 04 00 00	 push	 1089			; 00000441H
  006c6	50		 push	 eax
  006c7	ff d6		 call	 esi
  006c9	50		 push	 eax
  006ca	ff d7		 call	 edi

; 5636 : 
; 5637 : 								Info ("SYSTEM_DECRYPTION_FINISHED");

  006cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@
  006d1	e8 00 00 00 00	 call	 _Info

; 5638 : 
; 5639 : 								// Reboot is required to enable uninstallation and hibernation
; 5640 : 								if (AskWarnYesNo ("CONFIRM_RESTART") == IDYES)

  006d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  006db	e8 00 00 00 00	 call	 _AskWarnYesNo
  006e0	83 c4 08	 add	 esp, 8
  006e3	83 f8 06	 cmp	 eax, 6
  006e6	0f 85 7c fd ff
	ff		 jne	 $LN482@MainDialog

; 5641 : 								{
; 5642 : 									EndMainDlg (MainDlg);

  006ec	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  006f2	e8 00 00 00 00	 call	 _EndMainDlg

; 5643 : 
; 5644 : 									try
; 5645 : 									{
; 5646 : 										BootEncObj->RestartComputer();

  006f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  006fd	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  00704	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$ovf_end_2$134758:
  00709	b8 01 00 00 00	 mov	 eax, 1
  0070e	e9 97 f9 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$11:

; 5647 : 									}
; 5648 : 									catch (Exception &e)
; 5649 : 									{
; 5650 : 										e.Show (hwndDlg);

  00713	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134175[ebp]
  00719	8b 11		 mov	 edx, DWORD PTR [ecx]
  0071b	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0071e	8b 12		 mov	 edx, DWORD PTR [edx]
  00720	50		 push	 eax
  00721	ff d2		 call	 edx

; 5651 : 									}

  00723	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  00728	c3		 ret	 0
$LN464@MainDialog:
  00729	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  0072e	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  00734	0f 85 2e fd ff
	ff		 jne	 $LN482@MainDialog
  0073a	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  00740	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  00746	0f 85 1c fd ff
	ff		 jne	 $LN482@MainDialog
  0074c	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00752	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00758	0f 85 0a fd ff
	ff		 jne	 $LN482@MainDialog
  0075e	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00763	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  00769	0f 85 f9 fc ff
	ff		 jne	 $LN482@MainDialog
  0076f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00774	6a 01		 push	 1
  00776	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  0077b	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  00780	e8 00 00 00 00	 call	 _GetString
  00785	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0078b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0078e	50		 push	 eax
  0078f	68 10 04 00 00	 push	 1040			; 00000410H
  00794	53		 push	 ebx
  00795	ff d6		 call	 esi
  00797	50		 push	 eax
  00798	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0079e	6a 01		 push	 1
  007a0	68 10 04 00 00	 push	 1040			; 00000410H
  007a5	53		 push	 ebx
  007a6	ff d6		 call	 esi
  007a8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  007ae	50		 push	 eax
  007af	ff d7		 call	 edi
  007b1	6a 00		 push	 0
  007b3	6a 02		 push	 2
  007b5	53		 push	 ebx
  007b6	ff d6		 call	 esi
  007b8	50		 push	 eax
  007b9	ff d7		 call	 edi
  007bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  007c1	6a 00		 push	 0
  007c3	68 3d 04 00 00	 push	 1085			; 0000043dH
  007c8	51		 push	 ecx
  007c9	ff d6		 call	 esi
  007cb	50		 push	 eax
  007cc	ff d7		 call	 edi
  007ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  007d4	6a 00		 push	 0
  007d6	68 41 04 00 00	 push	 1089			; 00000441H
  007db	52		 push	 edx
  007dc	ff d6		 call	 esi
  007de	50		 push	 eax
  007df	ff d7		 call	 edi
  007e1	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
  007e6	33 f6		 xor	 esi, esi
  007e8	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus
  007ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
  007f2	e8 00 00 00 00	 call	 _Info
  007f7	83 c4 04	 add	 esp, 4
  007fa	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  007fd	e9 a8 f8 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$2:

; 5509 : 				}
; 5510 : 				catch (Exception &e)
; 5511 : 				{
; 5512 : 					KillTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS);

  00802	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00807	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0080a	68 00 01 00 00	 push	 256			; 00000100H
  0080f	50		 push	 eax
  00810	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5513 : 
; 5514 : 					try
; 5515 : 					{
; 5516 : 						BootEncObj->AbortSetup ();

  00816	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0081c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00820	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup
  00825	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
$LN629@MainDialog:

; 5517 : 					}
; 5518 : 					catch (Exception &e)
; 5519 : 					{
; 5520 : 						e.Show (hwndDlg);
; 5521 : 					}
; 5522 : 
; 5523 : 					e.Show (hwndDlg);

  0082c	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134138[ebp]
  00832	8b 01		 mov	 eax, DWORD PTR [ecx]
  00834	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00837	8b 00		 mov	 eax, DWORD PTR [eax]
  00839	52		 push	 edx
  0083a	ff d0		 call	 eax

; 5524 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  0083c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00841	e8 00 00 00 00	 call	 _Error

; 5525 : 					EndMainDlg (MainDlg);

  00846	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0084c	83 c4 04	 add	 esp, 4
  0084f	e8 00 00 00 00	 call	 _EndMainDlg

; 5526 : 					return 1;

  00854	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  00859	c3		 ret	 0
__catch$_MainDialogProc@16$3:
  0085a	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134140[ebp]
  00860	8b 11		 mov	 edx, DWORD PTR [ecx]
  00862	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00865	8b 12		 mov	 edx, DWORD PTR [edx]
  00867	50		 push	 eax
  00868	ff d2		 call	 edx
  0086a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00871	b8 00 00 00 00	 mov	 eax, $LN629@MainDialog
  00876	c3		 ret	 0
$LN457@MainDialog:

; 5652 : 								}
; 5653 : 
; 5654 : 								return 1;
; 5655 : 							}
; 5656 : 							break;
; 5657 : 						}
; 5658 : 					}
; 5659 : 				}
; 5660 : 			}
; 5661 : 			return 1;
; 5662 : 
; 5663 : 		case TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS:
; 5664 : 
; 5665 : 			if (bInPlaceEncNonSys)

  00877	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0087d	85 c9		 test	 ecx, ecx
  0087f	74 24		 je	 SHORT $LN456@MainDialog

; 5666 : 			{
; 5667 : 				// Non-system in-place encryption
; 5668 : 
; 5669 : 				if (!bVolTransformThreadRunning && !bVolTransformThreadToRun)

  00881	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00887	85 d2		 test	 edx, edx
  00889	75 15		 jne	 SHORT $LN455@MainDialog
  0088b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00890	85 c0		 test	 eax, eax
  00892	75 0c		 jne	 SHORT $LN455@MainDialog

; 5670 : 				{
; 5671 : 					KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  00894	68 01 01 00 00	 push	 257			; 00000101H
  00899	53		 push	 ebx
  0089a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN455@MainDialog:

; 5672 : 				}
; 5673 : 
; 5674 : 				UpdateNonSysInPlaceEncControls ();

  008a0	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls
$LN456@MainDialog:

; 5675 : 			}
; 5676 : 			return 1;

  008a5	b8 01 00 00 00	 mov	 eax, 1
  008aa	e9 fb f7 ff ff	 jmp	 $LN512@MainDialog
$LN454@MainDialog:

; 5677 : 
; 5678 : 		case TIMER_ID_KEYB_LAYOUT_GUARD:
; 5679 : 			if (SysEncInEffect ())

  008af	e8 00 00 00 00	 call	 _SysEncInEffect
  008b4	85 c0		 test	 eax, eax
  008b6	0f 84 55 02 00
	00		 je	 $LN449@MainDialog

; 5680 : 			{
; 5681 : 				DWORD keybLayout = (DWORD) GetKeyboardLayout (NULL);

  008bc	57		 push	 edi
  008bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4

; 5682 : 
; 5683 : 				/* Watch the keyboard layout */
; 5684 : 
; 5685 : 				if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  008c3	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  008c8	0f 84 55 01 00
	00		 je	 $LN452@MainDialog
  008ce	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  008d3	0f 84 4a 01 00
	00		 je	 $LN452@MainDialog

; 5686 : 				{
; 5687 : 					// Keyboard layout is not standard US
; 5688 : 
; 5689 : 					WipePasswordsAndKeyfiles ();

  008d9	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 5690 : 
; 5691 : 					SetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword);

  008de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  008e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  008ea	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  008ef	68 ec 03 00 00	 push	 1004			; 000003ecH
  008f4	51		 push	 ecx
  008f5	ff d6		 call	 esi
  008f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  008fd	50		 push	 eax
  008fe	ff d7		 call	 edi

; 5692 : 					SetWindowText (GetDlgItem (hCurPage, IDC_VERIFY), szVerify);

  00900	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00906	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  0090b	68 f2 03 00 00	 push	 1010			; 000003f2H
  00910	52		 push	 edx
  00911	ff d6		 call	 esi
  00913	50		 push	 eax
  00914	ff d7		 call	 edi

; 5693 : 
; 5694 : 					keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  00916	6a 01		 push	 1
  00918	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  0091d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 5695 : 
; 5696 : 					if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  00923	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00928	74 35		 je	 SHORT $LN451@MainDialog
  0092a	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  0092f	74 2e		 je	 SHORT $LN451@MainDialog

; 5697 : 					{
; 5698 : 						KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  00931	68 04 01 00 00	 push	 260			; 00000104H
  00936	53		 push	 ebx
  00937	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5699 : 						Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  0093d	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
  00942	e8 00 00 00 00	 call	 _Error
  00947	83 c4 04	 add	 esp, 4
$LN1093@MainDialog:

; 5700 : 						EndMainDlg (MainDlg);

  0094a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00950	e8 00 00 00 00	 call	 _EndMainDlg

; 5701 : 						return 1;

  00955	b8 01 00 00 00	 mov	 eax, 1
  0095a	e9 4b f7 ff ff	 jmp	 $LN512@MainDialog
$LN451@MainDialog:

; 5702 : 					}
; 5703 : 
; 5704 : 					bKeyboardLayoutChanged = TRUE;
; 5705 : 
; 5706 : 					wchar_t szTmp [4096];
; 5707 : 					wcscpy (szTmp, GetString ("KEYB_LAYOUT_CHANGE_PREVENTED"));

  0095f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
  00964	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
  0096e	e8 00 00 00 00	 call	 _GetString
  00973	83 c4 04	 add	 esp, 4
  00976	8d 95 80 7e 00
	00		 lea	 edx, DWORD PTR _szTmp$134186[ebp]
  0097c	8d 64 24 00	 npad	 4
$LL514@MainDialog:
  00980	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00983	66 89 0a	 mov	 WORD PTR [edx], cx
  00986	83 c0 02	 add	 eax, 2
  00989	83 c2 02	 add	 edx, 2
  0098c	66 85 c9	 test	 cx, cx
  0098f	75 ef		 jne	 SHORT $LL514@MainDialog

; 5708 : 					wcscat (szTmp, L"\n\n");

  00991	8d 85 80 7e 00
	00		 lea	 eax, DWORD PTR _szTmp$134186[ebp]
  00997	83 c0 fe	 add	 eax, -2			; fffffffeH
  0099a	8d 9b 00 00 00
	00		 npad	 6
$LL1123@MainDialog:
  009a0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  009a4	83 c0 02	 add	 eax, 2
  009a7	66 85 c9	 test	 cx, cx
  009aa	75 f4		 jne	 SHORT $LL1123@MainDialog
  009ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  009b2	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  009b9	89 08		 mov	 DWORD PTR [eax], ecx

; 5709 : 					wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  009bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  009c0	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  009c4	e8 00 00 00 00	 call	 _GetString
  009c9	83 c4 04	 add	 esp, 4
  009cc	8b d0		 mov	 edx, eax
  009ce	8b ff		 npad	 2
$LL1124@MainDialog:
  009d0	66 8b 08	 mov	 cx, WORD PTR [eax]
  009d3	83 c0 02	 add	 eax, 2
  009d6	66 85 c9	 test	 cx, cx
  009d9	75 f5		 jne	 SHORT $LL1124@MainDialog
  009db	8d bd 80 7e 00
	00		 lea	 edi, DWORD PTR _szTmp$134186[ebp]
  009e1	2b c2		 sub	 eax, edx
  009e3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL1125@MainDialog:
  009e6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  009ea	83 c7 02	 add	 edi, 2
  009ed	66 85 c9	 test	 cx, cx
  009f0	75 f4		 jne	 SHORT $LL1125@MainDialog
  009f2	8b c8		 mov	 ecx, eax
  009f4	c1 e9 02	 shr	 ecx, 2
  009f7	8b f2		 mov	 esi, edx

; 5710 : 					MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  009f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  009ff	f3 a5		 rep movsd
  00a01	8b c8		 mov	 ecx, eax
  00a03	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00a08	83 e1 03	 and	 ecx, 3
  00a0b	68 30 00 05 00	 push	 327728			; 00050030H
  00a10	f3 a4		 rep movsb
  00a12	50		 push	 eax
  00a13	8d 8d 80 7e 00
	00		 lea	 ecx, DWORD PTR _szTmp$134186[ebp]
  00a19	51		 push	 ecx
  00a1a	52		 push	 edx
  00a1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00a21	33 ff		 xor	 edi, edi
$LN452@MainDialog:

; 5711 : 				}
; 5712 : 
; 5713 : 				/* Watch the right Alt key (which is used to enter various characters on non-US keyboards) */
; 5714 : 
; 5715 : 				if (bKeyboardLayoutChanged && !bKeybLayoutAltKeyWarningShown)

  00a23	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, edi ; bKeyboardLayoutChanged
  00a29	0f 84 e2 00 00
	00		 je	 $LN449@MainDialog
  00a2f	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, edi ; bKeybLayoutAltKeyWarningShown
  00a35	0f 85 d6 00 00
	00		 jne	 $LN449@MainDialog

; 5716 : 				{
; 5717 : 					if (GetAsyncKeyState (VK_RMENU) < 0)

  00a3b	68 a5 00 00 00	 push	 165			; 000000a5H
  00a40	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00a46	66 85 c0	 test	 ax, ax
  00a49	0f 8d c2 00 00
	00		 jge	 $LN449@MainDialog

; 5718 : 					{
; 5719 : 						bKeybLayoutAltKeyWarningShown = TRUE;
; 5720 : 
; 5721 : 						wchar_t szTmp [4096];
; 5722 : 						wcscpy (szTmp, GetString ("ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYPTION"));

  00a4f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
  00a54	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, 1 ; bKeybLayoutAltKeyWarningShown
  00a5e	e8 00 00 00 00	 call	 _GetString
  00a63	83 c4 04	 add	 esp, 4
  00a66	8d 95 80 9e 00
	00		 lea	 edx, DWORD PTR _szTmp$134191[ebp]
  00a6c	8d 64 24 00	 npad	 4
$LL515@MainDialog:
  00a70	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00a73	66 89 0a	 mov	 WORD PTR [edx], cx
  00a76	83 c0 02	 add	 eax, 2
  00a79	83 c2 02	 add	 edx, 2
  00a7c	66 3b cf	 cmp	 cx, di
  00a7f	75 ef		 jne	 SHORT $LL515@MainDialog

; 5723 : 						wcscat (szTmp, L"\n\n");

  00a81	8d 85 80 9e 00
	00		 lea	 eax, DWORD PTR _szTmp$134191[ebp]
  00a87	83 c0 fe	 add	 eax, -2			; fffffffeH
  00a8a	8d 9b 00 00 00
	00		 npad	 6
$LL1126@MainDialog:
  00a90	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00a94	83 c0 02	 add	 eax, 2
  00a97	66 3b cf	 cmp	 cx, di
  00a9a	75 f4		 jne	 SHORT $LL1126@MainDialog
  00a9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00aa2	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  00aa9	89 08		 mov	 DWORD PTR [eax], ecx

; 5724 : 						wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  00aab	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  00ab0	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  00ab4	e8 00 00 00 00	 call	 _GetString
  00ab9	83 c4 04	 add	 esp, 4
  00abc	8b d0		 mov	 edx, eax
  00abe	8b ff		 npad	 2
$LL1127@MainDialog:
  00ac0	66 8b 08	 mov	 cx, WORD PTR [eax]
  00ac3	83 c0 02	 add	 eax, 2
  00ac6	66 3b cf	 cmp	 cx, di
  00ac9	75 f5		 jne	 SHORT $LL1127@MainDialog
  00acb	8d bd 80 9e 00
	00		 lea	 edi, DWORD PTR _szTmp$134191[ebp]
  00ad1	2b c2		 sub	 eax, edx
  00ad3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL1128@MainDialog:
  00ad6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00ada	83 c7 02	 add	 edi, 2
  00add	66 85 c9	 test	 cx, cx
  00ae0	75 f4		 jne	 SHORT $LL1128@MainDialog
  00ae2	8b c8		 mov	 ecx, eax
  00ae4	c1 e9 02	 shr	 ecx, 2
  00ae7	8b f2		 mov	 esi, edx

; 5725 : 						MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONINFORMATION  | MB_SETFOREGROUND | MB_TOPMOST);

  00ae9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00aef	f3 a5		 rep movsd
  00af1	8b c8		 mov	 ecx, eax
  00af3	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00af8	83 e1 03	 and	 ecx, 3
  00afb	68 40 00 05 00	 push	 327744			; 00050040H
  00b00	f3 a4		 rep movsb
  00b02	50		 push	 eax
  00b03	8d 8d 80 9e 00
	00		 lea	 ecx, DWORD PTR _szTmp$134191[ebp]
  00b09	51		 push	 ecx
  00b0a	52		 push	 edx
  00b0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN449@MainDialog:

; 5726 : 					}
; 5727 : 				}
; 5728 : 			}
; 5729 : 			return 1;

  00b11	b8 01 00 00 00	 mov	 eax, 1
  00b16	e9 8f f5 ff ff	 jmp	 $LN512@MainDialog
$LN448@MainDialog:

; 5730 : 
; 5731 : 		case TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS:
; 5732 : 
; 5733 : 			if (bSysEncDriveAnalysisInProgress)

  00b1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC ; bSysEncDriveAnalysisInProgress
  00b20	85 c0		 test	 eax, eax
  00b22	74 52		 je	 SHORT $LN447@MainDialog

; 5734 : 			{
; 5735 : 				UpdateProgressBarProc (GetTickCount() - SysEncDriveAnalysisStart);

  00b24	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00b2a	ff d6		 call	 esi
  00b2c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?SysEncDriveAnalysisStart@@3HA ; SysEncDriveAnalysisStart
  00b32	57		 push	 edi
  00b33	50		 push	 eax
  00b34	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  00b39	83 c4 08	 add	 esp, 8

; 5736 : 
; 5737 : 				if (GetTickCount() - SysEncDriveAnalysisStart > SYSENC_DRIVE_ANALYSIS_ETA)

  00b3c	ff d6		 call	 esi
  00b3e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?SysEncDriveAnalysisStart@@3HA ; SysEncDriveAnalysisStart
  00b44	3d 80 a9 03 00	 cmp	 eax, 240000		; 0003a980H
  00b49	76 1c		 jbe	 SHORT $LN446@MainDialog

; 5738 : 				{
; 5739 : 					// It's taking longer than expected -- reinit the progress bar
; 5740 : 					SysEncDriveAnalysisStart = GetTickCount ();

  00b4b	ff d6		 call	 esi

; 5741 : 					InitProgressBar (SYSENC_DRIVE_ANALYSIS_ETA, 0, FALSE, FALSE, FALSE, TRUE);

  00b4d	6a 01		 push	 1
  00b4f	57		 push	 edi
  00b50	57		 push	 edi
  00b51	57		 push	 edi
  00b52	57		 push	 edi
  00b53	57		 push	 edi
  00b54	57		 push	 edi
  00b55	68 80 a9 03 00	 push	 240000			; 0003a980H
  00b5a	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDriveAnalysisStart@@3HA, eax ; SysEncDriveAnalysisStart
  00b5f	e8 00 00 00 00	 call	 _InitProgressBar
  00b64	83 c4 20	 add	 esp, 32			; 00000020H
$LN446@MainDialog:

; 5742 : 				}
; 5743 : 
; 5744 : 				ArrowWaitCursor ();

  00b67	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 5756 : 			}
; 5757 : 			return 1;

  00b6c	b8 01 00 00 00	 mov	 eax, 1
  00b71	e9 34 f5 ff ff	 jmp	 $LN512@MainDialog
$LN447@MainDialog:

; 5745 : 			}
; 5746 : 			else
; 5747 : 			{
; 5748 : 				KillTimer (hwndDlg, TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS);

  00b76	68 03 01 00 00	 push	 259			; 00000103H
  00b7b	53		 push	 ebx
  00b7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5749 : 				UpdateProgressBarProc (SYSENC_DRIVE_ANALYSIS_ETA);

  00b82	57		 push	 edi
  00b83	68 80 a9 03 00	 push	 240000			; 0003a980H
  00b88	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  00b8d	83 c4 08	 add	 esp, 8

; 5750 : 				Sleep (1500);	// User-friendly GUI

  00b90	68 dc 05 00 00	 push	 1500			; 000005dcH
  00b95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 5751 : 
; 5752 : 				if (bSysEncDriveAnalysisTimeOutOccurred)

  00b9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC ; bSysEncDriveAnalysisTimeOutOccurred
  00ba1	85 c9		 test	 ecx, ecx
  00ba3	74 0d		 je	 SHORT $LN444@MainDialog

; 5753 : 					Warning ("SYS_DRIVE_SIZE_PROBE_TIMEOUT");

  00ba5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@
  00baa	e8 00 00 00 00	 call	 _Warning
  00baf	83 c4 04	 add	 esp, 4
$LN444@MainDialog:

; 5754 : 
; 5755 : 				LoadPage (hwndDlg, SYSENC_DRIVE_ANALYSIS_PAGE + 1);

  00bb2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00bb7	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00bbc	39 3d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, edi
  00bc2	74 61		 je	 SHORT $LN739@MainDialog
  00bc4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00bce	83 f8 15	 cmp	 eax, 21			; 00000015H
  00bd1	75 3f		 jne	 SHORT $LN737@MainDialog
  00bd3	6a 40		 push	 64			; 00000040H
  00bd5	8d 95 c8 c9 00
	00		 lea	 edx, DWORD PTR _tmp$169347[ebp]
  00bdb	6a 58		 push	 88			; 00000058H
  00bdd	52		 push	 edx
  00bde	e8 00 00 00 00	 call	 _memset
  00be3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00be9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  00bef	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bf2	8d 85 c8 c9 00
	00		 lea	 eax, DWORD PTR _tmp$169347[ebp]
  00bf8	50		 push	 eax
  00bf9	51		 push	 ecx
  00bfa	c6 85 08 ca 00
	00 00		 mov	 BYTE PTR _tmp$169347[ebp+64], 0
  00c01	ff d6		 call	 esi
  00c03	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00c08	8d 95 c8 c9 00
	00		 lea	 edx, DWORD PTR _tmp$169347[ebp]
  00c0e	52		 push	 edx
  00c0f	50		 push	 eax
  00c10	ff d6		 call	 esi
$LN737@MainDialog:
  00c12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00c18	51		 push	 ecx
  00c19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00c1f	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
$LN739@MainDialog:
  00c25	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  00c2b	e8 00 00 00 00	 call	 _NormalCursor
  00c30	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _rW$169342[ebp]
  00c36	52		 push	 edx
  00c37	68 23 04 00 00	 push	 1059			; 00000423H
  00c3c	53		 push	 ebx
  00c3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00c43	50		 push	 eax
  00c44	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00c4a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00c4f	57		 push	 edi
  00c50	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00c55	53		 push	 ebx
  00c56	6a 77		 push	 119			; 00000077H
  00c58	50		 push	 eax
  00c59	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  00c63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00c69	8d 4d a4	 lea	 ecx, DWORD PTR _rD$169341[ebp]
  00c6c	51		 push	 ecx
  00c6d	53		 push	 ebx
  00c6e	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00c73	c7 45 a4 a2 00
	00 00		 mov	 DWORD PTR _rD$169341[ebp], 162 ; 000000a2H
  00c7a	c7 45 a8 19 00
	00 00		 mov	 DWORD PTR _rD$169341[ebp+4], 25 ; 00000019H
  00c81	89 7d ac	 mov	 DWORD PTR _rD$169341[ebp+8], edi
  00c84	89 7d b0	 mov	 DWORD PTR _rD$169341[ebp+12], edi
  00c87	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00c8d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00c92	3b c7		 cmp	 eax, edi
  00c94	74 37		 je	 SHORT $LN688@MainDialog
  00c96	8b 55 80	 mov	 edx, DWORD PTR _rW$169342[ebp+12]
  00c99	2b 95 78 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169342[ebp+4]
  00c9f	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169342[ebp+8]
  00ca5	2b 8d 74 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169342[ebp]
  00cab	6a 01		 push	 1
  00cad	52		 push	 edx
  00cae	8b 55 a8	 mov	 edx, DWORD PTR _rD$169341[ebp+4]
  00cb1	51		 push	 ecx
  00cb2	8b 4d a4	 mov	 ecx, DWORD PTR _rD$169341[ebp]
  00cb5	52		 push	 edx
  00cb6	51		 push	 ecx
  00cb7	50		 push	 eax
  00cb8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00cbe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00cc4	6a 01		 push	 1
  00cc6	52		 push	 edx
  00cc7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN688@MainDialog:

; 5756 : 			}
; 5757 : 			return 1;

  00ccd	b8 01 00 00 00	 mov	 eax, 1
  00cd2	e9 d3 f3 ff ff	 jmp	 $LN512@MainDialog
$LN443@MainDialog:

; 5758 : 
; 5759 : 		case TIMER_ID_WIPE_PROGRESS:
; 5760 : 
; 5761 : 			// Manage device wipe and update related GUI
; 5762 : 
; 5763 : 			if (bHiddenOS && IsHiddenOSRunning())

  00cd7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00cdc	85 c0		 test	 eax, eax
  00cde	0f 84 84 f7 ff
	ff		 je	 $LN482@MainDialog
  00ce4	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00ce9	85 c0		 test	 eax, eax
  00ceb	0f 84 77 f7 ff
	ff		 je	 $LN482@MainDialog

; 5764 : 			{
; 5765 : 				// Decoy system partition wipe 
; 5766 : 
; 5767 : 				DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 5768 : 
; 5769 : 				try
; 5770 : 				{
; 5771 : 					decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00cf1	8d 8d e4 fa ff
	ff		 lea	 ecx, DWORD PTR $T169078[ebp]
  00cf7	51		 push	 ecx
  00cf8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00cfe	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  00d05	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00d0a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d0d	8b 10		 mov	 edx, DWORD PTR [eax]
  00d0f	89 8d 50 ca 00
	00		 mov	 DWORD PTR _decoySysPartitionWipeStatus$134201[ebp+4], ecx
  00d15	89 95 4c ca 00
	00		 mov	 DWORD PTR _decoySysPartitionWipeStatus$134201[ebp], edx
  00d1b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00d1e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 5772 : 					BootEncStatus = BootEncObj->GetStatus();

  00d21	8d 8d 1c f9 ff
	ff		 lea	 ecx, DWORD PTR $T169079[ebp]
  00d27	51		 push	 ecx
  00d28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d2e	89 95 54 ca 00
	00		 mov	 DWORD PTR _decoySysPartitionWipeStatus$134201[ebp+8], edx
  00d34	89 85 58 ca 00
	00		 mov	 DWORD PTR _decoySysPartitionWipeStatus$134201[ebp+12], eax
  00d3a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00d3f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00d44	8b f0		 mov	 esi, eax
  00d46	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00d4b	f3 a5		 rep movsd
  00d4d	66 a5		 movsw
  00d4f	83 ce ff	 or	 esi, -1

; 5790 : 				}
; 5791 : 
; 5792 : 				if (decoySysPartitionWipeStatus.WipeInProgress)

  00d52	83 bd 4c ca 00
	00 00		 cmp	 DWORD PTR _decoySysPartitionWipeStatus$134201[ebp], 0
  00d59	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00d5c	74 0a		 je	 SHORT $LN439@MainDialog

; 5793 : 				{
; 5794 : 					ArrowWaitCursor ();

  00d5e	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 5795 : 
; 5796 : 					UpdateWipeProgressBar ();

  00d63	e8 00 00 00 00	 call	 _UpdateWipeProgressBar
$LN439@MainDialog:

; 5797 : 				}
; 5798 : 
; 5799 : 				if (bDeviceWipeInProgress != decoySysPartitionWipeStatus.WipeInProgress)

  00d68	8b 95 4c ca 00
	00		 mov	 edx, DWORD PTR _decoySysPartitionWipeStatus$134201[ebp]
  00d6e	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, edx ; bDeviceWipeInProgress
  00d74	0f 84 ee f6 ff
	ff		 je	 $LN482@MainDialog

; 5800 : 				{
; 5801 : 					bDeviceWipeInProgress = decoySysPartitionWipeStatus.WipeInProgress;

  00d7a	8b c2		 mov	 eax, edx
  00d7c	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, eax ; bDeviceWipeInProgress

; 5802 : 
; 5803 : 					UpdateWipeProgressBar ();

  00d81	e8 00 00 00 00	 call	 _UpdateWipeProgressBar

; 5804 : 					UpdateWipeControls ();

  00d86	e8 00 00 00 00	 call	 _UpdateWipeControls

; 5805 : 
; 5806 : 					if (!bDeviceWipeInProgress)

  00d8b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  00d92	0f 85 d0 f6 ff
	ff		 jne	 $LN482@MainDialog

; 5807 : 					{
; 5808 : 						// The driver stopped wiping
; 5809 : 
; 5810 : 						KillTimer (hwndDlg, TIMER_ID_WIPE_PROGRESS);

  00d98	68 02 01 00 00	 push	 258			; 00000102H
  00d9d	53		 push	 ebx
  00d9e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5811 : 
; 5812 : 						try
; 5813 : 						{
; 5814 : 							BootEncObj->CheckDecoyOSWipeResult();

  00da4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00daa	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 18 ; 00000012H
  00db1	e8 00 00 00 00	 call	 ?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
  00db6	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
$LN649@MainDialog:

; 5821 : 
; 5822 : 						if (BootEncStatus.ConfiguredEncryptedAreaEnd == decoySysPartitionWipeStatus.WipedAreaEnd)

  00db9	a1 22 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00dbe	3b 85 54 ca 00
	00		 cmp	 eax, DWORD PTR _decoySysPartitionWipeStatus$134201[ebp+8]
  00dc4	0f 85 9e f6 ff
	ff		 jne	 $LN482@MainDialog
  00dca	8b 0d 26 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00dd0	3b 8d 58 ca 00
	00		 cmp	 ecx, DWORD PTR _decoySysPartitionWipeStatus$134201[ebp+12]
  00dd6	0f 85 8c f6 ff
	ff		 jne	 $LN482@MainDialog

; 5823 : 						{
; 5824 : 							// Decoy system partition has been fully wiped
; 5825 : 
; 5826 : 							ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_WIPED);

  00ddc	68 c0 00 00 00	 push	 192			; 000000c0H
  00de1	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase

; 5827 : 
; 5828 : 							SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("EXIT"));

  00de6	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  00deb	e8 00 00 00 00	 call	 _GetString
  00df0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00df6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00dfc	83 c4 08	 add	 esp, 8
  00dff	50		 push	 eax
  00e00	6a 02		 push	 2
  00e02	52		 push	 edx
  00e03	ff d6		 call	 esi
  00e05	50		 push	 eax
  00e06	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5829 : 							EnableWindow (GetDlgItem (MainDlg, IDCANCEL), TRUE);

  00e0c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00e11	6a 01		 push	 1
  00e13	6a 02		 push	 2
  00e15	50		 push	 eax
  00e16	ff d6		 call	 esi
  00e18	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  00e1e	50		 push	 eax
  00e1f	ff d7		 call	 edi

; 5830 : 							EnableWindow (GetDlgItem (MainDlg, IDC_PREV), FALSE);

  00e21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00e27	6a 00		 push	 0
  00e29	68 11 04 00 00	 push	 1041			; 00000411H
  00e2e	51		 push	 ecx
  00e2f	ff d6		 call	 esi
  00e31	50		 push	 eax
  00e32	ff d7		 call	 edi

; 5831 : 							EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), FALSE);

  00e34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00e3a	6a 00		 push	 0
  00e3c	68 10 04 00 00	 push	 1040			; 00000410H
  00e41	52		 push	 edx
  00e42	ff d6		 call	 esi
  00e44	50		 push	 eax
  00e45	ff d7		 call	 edi

; 5832 : 							EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  00e47	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00e4c	6a 00		 push	 0
  00e4e	68 f8 03 00 00	 push	 1016			; 000003f8H
  00e53	50		 push	 eax
  00e54	ff d6		 call	 esi
  00e56	50		 push	 eax
  00e57	ff d7		 call	 edi

; 5833 : 
; 5834 : 							Info ("WIPE_FINISHED_DECOY_SYSTEM_PARTITION");

  00e59	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@
  00e5e	e8 00 00 00 00	 call	 _Info

; 5835 : 
; 5836 : 							TextInfoDialogBox (TC_TBXID_DECOY_OS_INSTRUCTIONS);

  00e63	6a 03		 push	 3
  00e65	e8 00 00 00 00	 call	 _TextInfoDialogBox
  00e6a	83 c4 08	 add	 esp, 8

; 5837 : 
; 5838 : 							if (BootEncObj->GetSystemDriveConfiguration().ExtraBootPartitionPresent)

  00e6d	8d 8d 3c f7 ff
	ff		 lea	 ecx, DWORD PTR $T169082[ebp]
  00e73	51		 push	 ecx
  00e74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00e7a	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00e7f	8a 98 c0 00 00
	00		 mov	 bl, BYTE PTR [eax+192]
  00e85	8d 8d 3c f7 ff
	ff		 lea	 ecx, DWORD PTR $T169082[ebp]
  00e8b	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00e90	84 db		 test	 bl, bl
  00e92	74 0d		 je	 SHORT $LN434@MainDialog

; 5839 : 								Warning ("DECOY_OS_VERSION_WARNING");

  00e94	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@
  00e99	e8 00 00 00 00	 call	 _Warning
  00e9e	83 c4 04	 add	 esp, 4
$LN434@MainDialog:

; 5840 : 
; 5841 : 							return 1;

  00ea1	b8 01 00 00 00	 mov	 eax, 1
  00ea6	e9 ff f1 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$17:

; 5815 : 						}
; 5816 : 						catch (Exception &e)
; 5817 : 						{
; 5818 : 							e.Show (hwndDlg);

  00eab	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134213[ebp]
  00eb1	8b 11		 mov	 edx, DWORD PTR [ecx]
  00eb3	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00eb6	8b 12		 mov	 edx, DWORD PTR [edx]
  00eb8	50		 push	 eax
  00eb9	ff d2		 call	 edx

; 5819 : 							AbortProcessSilent();

  00ebb	e8 00 00 00 00	 call	 _AbortProcessSilent

; 5820 : 						}

  00ec0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00ec7	b8 00 00 00 00	 mov	 eax, $LN649@MainDialog
  00ecc	c3		 ret	 0
__catch$_MainDialogProc@16$13:
  00ecd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00ed3	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00ed6	68 02 01 00 00	 push	 258			; 00000102H
  00edb	52		 push	 edx
  00edc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
  00ee2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00ee8	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  00eec	e8 00 00 00 00	 call	 ?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortDecoyOSWipe
  00ef1	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 15 ; 0000000fH
$LN645@MainDialog:

; 5773 : 				}
; 5774 : 				catch (Exception &e)
; 5775 : 				{
; 5776 : 					KillTimer (MainDlg, TIMER_ID_WIPE_PROGRESS);
; 5777 : 
; 5778 : 					try
; 5779 : 					{
; 5780 : 						BootEncObj->AbortDecoyOSWipe ();
; 5781 : 					}
; 5782 : 					catch (Exception &e)
; 5783 : 					{
; 5784 : 						e.Show (hwndDlg);
; 5785 : 					}
; 5786 : 
; 5787 : 					e.Show (hwndDlg);

  00ef8	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134205[ebp]
  00efe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f00	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00f03	8b 12		 mov	 edx, DWORD PTR [edx]
  00f05	50		 push	 eax
  00f06	ff d2		 call	 edx

; 5788 : 					EndMainDlg (MainDlg);

  00f08	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00f0e	e8 00 00 00 00	 call	 _EndMainDlg

; 5789 : 					return 1;

  00f13	b8 00 00 00 00	 mov	 eax, $LN748@MainDialog
  00f18	c3		 ret	 0
__catch$_MainDialogProc@16$14:
  00f19	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134207[ebp]
  00f1f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00f21	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00f24	8b 00		 mov	 eax, DWORD PTR [eax]
  00f26	52		 push	 edx
  00f27	ff d0		 call	 eax
  00f29	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 15 ; 0000000fH
  00f30	b8 00 00 00 00	 mov	 eax, $LN645@MainDialog
  00f35	c3		 ret	 0
$LN502@MainDialog:
  00f36	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00f3b	66 39 85 70 ca
	00 00		 cmp	 WORD PTR _wParam$[ebp], ax
  00f42	0f 85 60 f1 ff
	ff		 jne	 $LN510@MainDialog
  00f48	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00f4e	57		 push	 edi
  00f4f	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  00f54	53		 push	 ebx
  00f55	68 fc 01 00 00	 push	 508			; 000001fcH
  00f5a	51		 push	 ecx
  00f5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
$ovf_end_3$134758:
  00f61	b8 01 00 00 00	 mov	 eax, 1
  00f66	e9 3f f1 ff ff	 jmp	 $LN512@MainDialog
$LN397@MainDialog:

; 6022 : 		return 1;
; 6023 : 
; 6024 : 
; 6025 : 	case WM_COMMAND:
; 6026 : 
; 6027 : 		if (lw == IDHELP)

  00f6b	8b 8d 70 ca 00
	00		 mov	 ecx, DWORD PTR _wParam$[ebp]
  00f71	66 83 f9 09	 cmp	 cx, 9

; 6028 : 		{
; 6029 : 			OpenPageHelp (hwndDlg, nCurPageNo);
; 6030 : 			return 1;

  00f75	0f 84 0c f1 ff
	ff		 je	 $LN1227@MainDialog

; 6031 : 		}
; 6032 : 		else if (lw == IDCANCEL)

  00f7b	bf 02 00 00 00	 mov	 edi, 2
  00f80	66 3b cf	 cmp	 cx, di
  00f83	75 1a		 jne	 SHORT $LN394@MainDialog
$LN141@MainDialog:

; 6033 : 		{
; 6034 : 			PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  00f85	6a 00		 push	 0
  00f87	6a 00		 push	 0
  00f89	68 2f 81 00 00	 push	 33071			; 0000812fH
  00f8e	53		 push	 ebx
  00f8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00f95	b8 01 00 00 00	 mov	 eax, 1
  00f9a	e9 0b f1 ff ff	 jmp	 $LN512@MainDialog
$LN394@MainDialog:

; 6035 : 			return 1;
; 6036 : 		}
; 6037 : 		else if (lw == IDC_NEXT)

  00f9f	ba 10 04 00 00	 mov	 edx, 1040		; 00000410H
  00fa4	66 3b ca	 cmp	 cx, dx
  00fa7	0f 85 ce 2b 00
	00		 jne	 $LN392@MainDialog

; 6038 : 		{
; 6039 : 			if (nCurPageNo == INTRO_PAGE)

  00fad	33 c9		 xor	 ecx, ecx
  00faf	3b c1		 cmp	 eax, ecx
  00fb1	0f 85 7a 01 00
	00		 jne	 $LN391@MainDialog

; 6040 : 			{
; 6041 : 				switch (GetSelectedWizardMode (hCurPage))

  00fb7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  00fbd	e8 00 00 00 00	 call	 ?GetSelectedWizardMode@@YAHPAUHWND__@@@Z ; GetSelectedWizardMode
  00fc2	83 e8 00	 sub	 eax, 0
  00fc5	74 70		 je	 SHORT $LN388@MainDialog
  00fc7	83 e8 01	 sub	 eax, 1
  00fca	74 29		 je	 SHORT $LN384@MainDialog
  00fcc	83 e8 01	 sub	 eax, 1
  00fcf	0f 85 8e 2b 00
	00		 jne	 $LN204@MainDialog

; 6078 : 					break;
; 6079 : 
; 6080 : 				case WIZARD_MODE_SYS_DEVICE:
; 6081 : 
; 6082 : 					WaitCursor ();

  00fd5	e8 00 00 00 00	 call	 _WaitCursor

; 6083 : 					bHiddenVol = FALSE;

  00fda	33 c0		 xor	 eax, eax
  00fdc	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 6084 : 					bInPlaceEncNonSys = FALSE;

  00fe1	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax

; 6085 : 					SwitchWizardToSysEncMode ();

  00fe6	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  00feb	b8 01 00 00 00	 mov	 eax, 1
  00ff0	e9 b5 f0 ff ff	 jmp	 $LN512@MainDialog
$LN384@MainDialog:

; 6063 : 					break;
; 6064 : 
; 6065 : 				case WIZARD_MODE_NONSYS_DEVICE:
; 6066 : 
; 6067 : 					WaitCursor ();

  00ff5	e8 00 00 00 00	 call	 _WaitCursor

; 6068 : 					CloseSysEncMutex ();

  00ffa	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6069 : 
; 6070 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  00fff	be 01 00 00 00	 mov	 esi, 1
  01004	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  01009	85 c0		 test	 eax, eax

; 6071 : 					{
; 6072 : 						NormalCursor ();
; 6073 : 						return 1;

  0100b	0f 84 0b 06 00
	00		 je	 $LN1219@MainDialog

; 6074 : 					}
; 6075 : 
; 6076 : 					bHiddenOS = FALSE;
; 6077 : 					nNewPageNo = VOLUME_TYPE_PAGE - 1;	// Skip irrelevant pages

  01011	c7 45 ec 0b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 11 ; 0000000bH

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01018	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0101b	40		 inc	 eax
  0101c	50		 push	 eax
  0101d	53		 push	 ebx
  0101e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, 0 ; bHiddenOS
  01028	e8 00 00 00 00	 call	 _LoadPage
  0102d	83 c4 08	 add	 esp, 8
  01030	8b c6		 mov	 eax, esi
  01032	e9 73 f0 ff ff	 jmp	 $LN512@MainDialog
$LN388@MainDialog:

; 6042 : 				{
; 6043 : 				case WIZARD_MODE_FILE_CONTAINER:
; 6044 : 
; 6045 : 					if (CurrentOSMajor >= 6 && IsUacSupported() && IsAdmin() && !IsBuiltInAdmin() && !IsNonInstallMode())

  01037	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  0103e	7c 4c		 jl	 SHORT $LN386@MainDialog
  01040	e8 00 00 00 00	 call	 _IsUacSupported
  01045	85 c0		 test	 eax, eax
  01047	74 43		 je	 SHORT $LN386@MainDialog
  01049	e8 00 00 00 00	 call	 _IsAdmin
  0104e	85 c0		 test	 eax, eax
  01050	74 3a		 je	 SHORT $LN386@MainDialog
  01052	e8 00 00 00 00	 call	 _IsBuiltInAdmin
  01057	85 c0		 test	 eax, eax
  01059	75 31		 jne	 SHORT $LN386@MainDialog
  0105b	e8 00 00 00 00	 call	 _IsNonInstallMode
  01060	85 c0		 test	 eax, eax
  01062	75 28		 jne	 SHORT $LN386@MainDialog

; 6046 : 					{
; 6047 : 						static bool warningConfirmed = false;
; 6048 : 						if (!warningConfirmed)

  01064	38 05 00 00 00
	00		 cmp	 BYTE PTR ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA, al
  0106a	75 20		 jne	 SHORT $LN386@MainDialog

; 6049 : 						{
; 6050 : 							if (AskWarnYesNo ("CONTAINER_ADMIN_WARNING") == IDYES)

  0106c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@
  01071	e8 00 00 00 00	 call	 _AskWarnYesNo
  01076	83 c4 04	 add	 esp, 4
  01079	83 f8 06	 cmp	 eax, 6
  0107c	75 07		 jne	 SHORT $LN385@MainDialog
$LN504@MainDialog:

; 6051 : 								exit (0);

  0107e	6a 00		 push	 0
  01080	e8 00 00 00 00	 call	 _exit
$LN385@MainDialog:

; 6052 : 
; 6053 : 							warningConfirmed = true;

  01085	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA, 1
$LN386@MainDialog:

; 6054 : 						}
; 6055 : 					}
; 6056 : 
; 6057 : 					WaitCursor ();

  0108c	e8 00 00 00 00	 call	 _WaitCursor

; 6058 : 					CloseSysEncMutex ();

  01091	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6059 : 					ChangeWizardMode (WIZARD_MODE_FILE_CONTAINER);

  01096	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0109b	85 c0		 test	 eax, eax
  0109d	74 45		 je	 SHORT $LN1211@MainDialog
  0109f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  010a5	3b cf		 cmp	 ecx, edi
  010a7	75 05		 jne	 SHORT $LN875@MainDialog
  010a9	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN875@MainDialog:
  010ae	33 f6		 xor	 esi, esi
  010b0	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  010b6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0
  010bd	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0
  010c4	89 35 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, esi
  010ca	89 35 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, esi
  010d0	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  010d6	89 35 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, esi
  010dc	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
  010e2	eb 02		 jmp	 SHORT $LN876@MainDialog
$LN1211@MainDialog:
  010e4	33 f6		 xor	 esi, esi
$LN876@MainDialog:
  010e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  010ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  010f1	f7 da		 neg	 edx
  010f3	1b d2		 sbb	 edx, edx
  010f5	f7 da		 neg	 edx
  010f7	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  010fd	85 c0		 test	 eax, eax
  010ff	75 05		 jne	 SHORT $LN868@MainDialog
  01101	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN868@MainDialog:

; 6060 : 					bHiddenOS = FALSE;
; 6061 : 					bInPlaceEncNonSys = FALSE;
; 6062 : 					nNewPageNo = VOLUME_TYPE_PAGE - 1;	// Skip irrelevant pages

  01106	c7 45 ec 0b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 11 ; 0000000bH

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0110d	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01110	40		 inc	 eax
  01111	50		 push	 eax
  01112	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, esi ; bHiddenOS
  01118	53		 push	 ebx
  01119	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  0111f	e8 00 00 00 00	 call	 _LoadPage
  01124	83 c4 08	 add	 esp, 8
  01127	b8 01 00 00 00	 mov	 eax, 1
  0112c	e9 79 ef ff ff	 jmp	 $LN512@MainDialog
$LN391@MainDialog:

; 6086 : 					return 1;
; 6087 : 				}
; 6088 : 			}
; 6089 : 			else if (nCurPageNo == SYSENC_TYPE_PAGE)

  01131	be 01 00 00 00	 mov	 esi, 1
  01136	3b c6		 cmp	 eax, esi
  01138	75 3d		 jne	 SHORT $LN380@MainDialog

; 6090 : 			{
; 6091 : 				if (bHiddenOS)

  0113a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01140	85 d2		 test	 edx, edx
  01142	74 0c		 je	 SHORT $LN379@MainDialog

; 6092 : 				{
; 6093 : 					bWholeSysDrive = FALSE;

  01144	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive

; 6094 : 					bHiddenVolDirect = FALSE;

  0114a	89 0d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolDirect, ecx
$LN379@MainDialog:

; 6095 : 				}
; 6096 : 
; 6097 : 				if (!bHiddenOS)

  01150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01155	85 c0		 test	 eax, eax
  01157	0f 85 06 2a 00
	00		 jne	 $LN204@MainDialog

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0115d	8b c7		 mov	 eax, edi
  0115f	40		 inc	 eax
  01160	50		 push	 eax
  01161	53		 push	 ebx
  01162	89 7d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edi
  01165	e8 00 00 00 00	 call	 _LoadPage
  0116a	83 c4 08	 add	 esp, 8
  0116d	b8 01 00 00 00	 mov	 eax, 1
  01172	e9 33 ef ff ff	 jmp	 $LN512@MainDialog
$LN380@MainDialog:

; 6098 : 					nNewPageNo = SYSENC_SPAN_PAGE - 1;	// Skip irrelevant pages
; 6099 : 			}
; 6100 : 			else if (nCurPageNo == SYSENC_HIDDEN_OS_REQ_CHECK_PAGE)

  01177	3b c7		 cmp	 eax, edi
  01179	0f 85 a2 01 00
	00		 jne	 $LN376@MainDialog

; 6101 : 			{
; 6102 : 				WaitCursor ();

  0117f	e8 00 00 00 00	 call	 _WaitCursor

; 6103 : 				try
; 6104 : 				{
; 6105 : 					BootEncObj->CheckRequirementsHiddenOS ();

  01184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0118a	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 22 ; 00000016H
  01191	e8 00 00 00 00	 call	 ?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirementsHiddenOS

; 6106 : 
; 6107 : 					if (CheckGapBetweenSysAndHiddenOS ())

  01196	e8 00 00 00 00	 call	 ?CheckGapBetweenSysAndHiddenOS@@YAHXZ ; CheckGapBetweenSysAndHiddenOS
  0119b	85 c0		 test	 eax, eax
  0119d	74 0d		 je	 SHORT $LN374@MainDialog

; 6108 : 						Warning ("GAP_BETWEEN_SYS_AND_HIDDEN_OS_PARTITION");

  0119f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@
  011a4	e8 00 00 00 00	 call	 _Warning
  011a9	83 c4 04	 add	 esp, 4
$LN374@MainDialog:
  011ac	83 cf ff	 or	 edi, -1

; 6109 : 				}
; 6110 : 				catch (Exception &e)
; 6111 : 				{
; 6112 : 					e.Show (hwndDlg);
; 6113 : 					NormalCursor ();
; 6114 : 					return 1;
; 6115 : 				}
; 6116 : 
; 6117 : 				if (AskWarnYesNo ("DECOY_OS_REINSTALL_WARNING") == IDNO)

  011af	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@
  011b4	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  011b7	e8 00 00 00 00	 call	 _AskWarnYesNo
  011bc	83 c4 04	 add	 esp, 4
  011bf	83 f8 07	 cmp	 eax, 7

; 6118 : 				{
; 6119 : 					NormalCursor ();
; 6120 : 					return 1;

  011c2	0f 84 54 04 00
	00		 je	 $LN1219@MainDialog

; 6121 : 				}
; 6122 : 
; 6123 : 				WarningDirect ((wstring (GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO"))
; 6124 : 					+ L"\n\n"
; 6125 : 					+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  011c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  011cd	e8 00 00 00 00	 call	 _GetString
  011d2	83 c4 04	 add	 esp, 4
  011d5	50		 push	 eax
  011d6	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T169094[ebp]
  011dc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  011e1	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  011e6	50		 push	 eax
  011e7	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169095[ebp]
  011ed	51		 push	 ecx
  011ee	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 24 ; 00000018H
  011f5	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  011fa	8b f0		 mov	 esi, eax
  011fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  01201	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+12], 25 ; 00000019H
  01205	e8 00 00 00 00	 call	 _GetString
  0120a	50		 push	 eax
  0120b	8d 95 48 fb ff
	ff		 lea	 edx, DWORD PTR $T169096[ebp]
  01211	56		 push	 esi
  01212	52		 push	 edx
  01213	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01218	83 c4 1c	 add	 esp, 28			; 0000001cH
  0121b	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0121f	72 05		 jb	 SHORT $LN884@MainDialog
  01221	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01224	eb 03		 jmp	 SHORT $LN885@MainDialog
$LN884@MainDialog:
  01226	83 c0 04	 add	 eax, 4
$LN885@MainDialog:
  01229	50		 push	 eax
  0122a	e8 00 00 00 00	 call	 _WarningDirect
  0122f	83 c4 04	 add	 esp, 4
  01232	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR $T169096[ebp]
  01238	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0123d	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169095[ebp]
  01243	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01248	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T169094[ebp]
  0124e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  01251	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6126 : 
; 6127 : 				if (!IsAdmin() && IsUacSupported())

  01256	e8 00 00 00 00	 call	 _IsAdmin
  0125b	85 c0		 test	 eax, eax
  0125d	75 55		 jne	 SHORT $LN371@MainDialog
  0125f	e8 00 00 00 00	 call	 _IsUacSupported
  01264	85 c0		 test	 eax, eax
  01266	74 4c		 je	 SHORT $LN371@MainDialog

; 6128 : 				{
; 6129 : 					// If UAC elevation is needed, we need to elevate the complete wizard process here, because
; 6130 : 					// we will need to switch to the non-sys-device mode, which requires the whole wizard process
; 6131 : 					// to have admin rights.
; 6132 : 
; 6133 : 					CloseSysEncMutex ();

  01268	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6134 : 
; 6135 : 					if (!ElevateWholeWizardProcess ("/r"))

  0126d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01270	8b cc		 mov	 ecx, esp
  01272	89 65 c4	 mov	 DWORD PTR $T169097[ebp], esp
  01275	68 00 00 00 00	 push	 OFFSET ??_C@_02COKGDMEE@?1r?$AA@
  0127a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0127f	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  01284	83 c4 1c	 add	 esp, 28			; 0000001cH
  01287	85 c0		 test	 eax, eax
  01289	75 29		 jne	 SHORT $LN371@MainDialog

; 6136 : 					{
; 6137 : 						// Failed to obtain admin rights
; 6138 : 
; 6139 : 						NormalCursor ();

  0128b	e8 00 00 00 00	 call	 _NormalCursor

; 6140 : 
; 6141 : 						if (!CreateSysEncMutex ())

  01290	e8 00 00 00 00	 call	 _CreateSysEncMutex
  01295	85 c0		 test	 eax, eax
  01297	0f 85 04 fc ff
	ff		 jne	 $LN434@MainDialog

; 6142 : 							AbortProcess ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0129d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  012a2	e8 00 00 00 00	 call	 _AbortProcess
  012a7	83 c4 04	 add	 esp, 4
  012aa	b8 01 00 00 00	 mov	 eax, 1
  012af	e9 f6 ed ff ff	 jmp	 $LN512@MainDialog
$LN371@MainDialog:

; 6143 : 
; 6144 : 						return 1;
; 6145 : 					}
; 6146 : 				}
; 6147 : 
; 6148 : 				// This check requires admin rights
; 6149 : 				try
; 6150 : 				{
; 6151 : 					BootEncObj->InitialSecurityChecksForHiddenOS ();

  012b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  012ba	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 26 ; 0000001aH
  012c1	e8 00 00 00 00	 call	 ?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS

; 6158 : 				}
; 6159 : 
; 6160 : 				nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE - 1;	// Skip irrelevant pages

  012c6	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  012cd	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  012d0	40		 inc	 eax
  012d1	50		 push	 eax
  012d2	53		 push	 ebx
  012d3	e8 00 00 00 00	 call	 _LoadPage
  012d8	83 c4 08	 add	 esp, 8
  012db	b8 01 00 00 00	 mov	 eax, 1
  012e0	e9 c5 ed ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$23:

; 6152 : 				}
; 6153 : 				catch (Exception &e)
; 6154 : 				{
; 6155 : 					e.Show (hwndDlg);

  012e5	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _e$134311[ebp]
  012eb	8b 01		 mov	 eax, DWORD PTR [ecx]
  012ed	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  012f0	8b 00		 mov	 eax, DWORD PTR [eax]
  012f2	52		 push	 edx
  012f3	ff d0		 call	 eax

; 6156 : 					EndMainDlg (MainDlg);	// Some of the checks need the wizard to be restarted (results are cached until exit and the checks would fail even if the issues were rectified).

  012f5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  012fb	e8 00 00 00 00	 call	 _EndMainDlg

; 6157 : 					return 1;

  01300	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  01305	c3		 ret	 0
__catch$_MainDialogProc@16$21:
  01306	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134296[ebp]
  0130c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0130e	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  01311	8b 12		 mov	 edx, DWORD PTR [edx]
  01313	50		 push	 eax
  01314	ff d2		 call	 edx
  01316	e8 00 00 00 00	 call	 _NormalCursor
  0131b	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  01320	c3		 ret	 0
$LN376@MainDialog:

; 6161 : 			}
; 6162 : 			else if (nCurPageNo == SYSENC_SPAN_PAGE)

  01321	83 f8 03	 cmp	 eax, 3
  01324	0f 85 bb 01 00
	00		 jne	 $LN367@MainDialog

; 6163 : 			{
; 6164 : 				try
; 6165 : 				{

  0132a	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 28 ; 0000001cH

; 6166 : 					if (bWholeSysDrive && !BootEncObj->SystemPartitionCoversWholeDrive())

  01331	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive
  01337	0f 84 37 01 00
	00		 je	 $LN1098@MainDialog
  0133d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01343	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  01348	84 c0		 test	 al, al
  0134a	0f 85 17 01 00
	00		 jne	 $LN359@MainDialog

; 6167 : 					{
; 6168 : 						if (BootEncObj->SystemDriveContainsNonStandardPartitions())

  01350	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01356	e8 00 00 00 00	 call	 ?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
  0135b	84 c0		 test	 al, al
  0135d	0f 84 a6 00 00
	00		 je	 $LN363@MainDialog

; 6169 : 						{
; 6170 : 							if (AskWarnYesNoString ((wstring (GetString ("SYSDRIVE_NON_STANDARD_PARTITIONS")) + L"\n\n" + GetString ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE")).c_str()) == IDYES)

  01363	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
  01368	e8 00 00 00 00	 call	 _GetString
  0136d	83 c4 04	 add	 esp, 4
  01370	50		 push	 eax
  01371	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169100[ebp]
  01377	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0137c	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01381	50		 push	 eax
  01382	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR $T169101[ebp]
  01388	50		 push	 eax
  01389	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+12], 29 ; 0000001dH
  0138d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01392	83 c4 0c	 add	 esp, 12			; 0000000cH
  01395	8b f0		 mov	 esi, eax
  01397	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  0139c	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+12], 30 ; 0000001eH
  013a0	e8 00 00 00 00	 call	 _GetString
  013a5	50		 push	 eax
  013a6	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T169102[ebp]
  013ac	56		 push	 esi
  013ad	51		 push	 ecx
  013ae	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013b3	83 c4 10	 add	 esp, 16			; 00000010H
  013b6	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  013ba	72 05		 jb	 SHORT $LN890@MainDialog
  013bc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  013bf	eb 03		 jmp	 SHORT $LN891@MainDialog
$LN890@MainDialog:
  013c1	83 c0 04	 add	 eax, 4
$LN891@MainDialog:
  013c4	50		 push	 eax
  013c5	e8 00 00 00 00	 call	 _AskWarnYesNoString
  013ca	83 c4 04	 add	 esp, 4
  013cd	83 f8 06	 cmp	 eax, 6
  013d0	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T169102[ebp]
  013d6	0f 94 45 eb	 sete	 BYTE PTR $T169099[ebp]
  013da	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013df	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T169101[ebp]
  013e5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013ea	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169100[ebp]
  013f0	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+12], 28 ; 0000001cH
  013f4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013f9	80 7d eb 00	 cmp	 BYTE PTR $T169099[ebp], 0
  013fd	74 0a		 je	 SHORT $LN363@MainDialog

; 6171 : 								bWholeSysDrive = FALSE;

  013ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
$LN363@MainDialog:

; 6172 : 						}
; 6173 : 
; 6174 : 						if (!IsOSAtLeast (WIN_VISTA) && bWholeSysDrive)

  01409	6a 0b		 push	 11			; 0000000bH
  0140b	e8 00 00 00 00	 call	 _IsOSAtLeast
  01410	83 c4 04	 add	 esp, 4
  01413	85 c0		 test	 eax, eax
  01415	75 50		 jne	 SHORT $LN359@MainDialog
  01417	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive
  0141d	74 55		 je	 SHORT $LN1098@MainDialog

; 6175 : 						{
; 6176 : 							if (BootEncObj->SystemDriveContainsExtendedPartition())

  0141f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01425	e8 00 00 00 00	 call	 ?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
  0142a	84 c0		 test	 al, al
  0142c	74 2c		 je	 SHORT $LN361@MainDialog

; 6177 : 							{
; 6178 : 								Error ("WDE_UNSUPPORTED_FOR_EXTENDED_PARTITIONS");

  0142e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
  01433	e8 00 00 00 00	 call	 _Error

; 6179 : 
; 6180 : 								if (AskYesNo ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE") == IDNO)

  01438	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  0143d	e8 00 00 00 00	 call	 _AskYesNo
  01442	83 c4 08	 add	 esp, 8
  01445	83 f8 07	 cmp	 eax, 7

; 6181 : 									return 1;

  01448	0f 84 1a f0 ff
	ff		 je	 $LN482@MainDialog

; 6182 : 
; 6183 : 								bWholeSysDrive = FALSE;

  0144e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive

; 6184 : 							}
; 6185 : 							else

  01458	eb 1a		 jmp	 SHORT $LN1098@MainDialog
$LN361@MainDialog:

; 6186 : 								Warning ("WDE_EXTENDED_PARTITIONS_WARNING");

  0145a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
  0145f	e8 00 00 00 00	 call	 _Warning
  01464	83 c4 04	 add	 esp, 4
$LN359@MainDialog:

; 6187 : 						}
; 6188 : 					}
; 6189 : 
; 6190 : 					if (!bWholeSysDrive && BootEncObj->SystemPartitionCoversWholeDrive())

  01467	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  0146e	0f 85 ef 26 00
	00		 jne	 $LN204@MainDialog
$LN1098@MainDialog:
  01474	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0147a	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  0147f	84 c0		 test	 al, al
  01481	74 1b		 je	 SHORT $LN358@MainDialog

; 6191 : 						bWholeSysDrive = (AskYesNo ("WHOLE_SYC_DEVICE_RECOM") == IDYES);

  01483	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
  01488	e8 00 00 00 00	 call	 _AskYesNo
  0148d	33 d2		 xor	 edx, edx
  0148f	83 c4 04	 add	 esp, 4
  01492	83 f8 06	 cmp	 eax, 6
  01495	0f 94 c2	 sete	 dl
  01498	89 15 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, edx ; bWholeSysDrive
$LN358@MainDialog:

; 6198 : 				}
; 6199 : 
; 6200 : 				if (!bWholeSysDrive)

  0149e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  014a5	0f 85 b8 26 00
	00		 jne	 $LN204@MainDialog

; 6201 : 					nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE - 1;	// Skip irrelevant pages

  014ab	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  014b2	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  014b5	40		 inc	 eax
  014b6	50		 push	 eax
  014b7	53		 push	 ebx
  014b8	e8 00 00 00 00	 call	 _LoadPage
  014bd	83 c4 08	 add	 esp, 8
  014c0	b8 01 00 00 00	 mov	 eax, 1
  014c5	e9 e0 eb ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$25:

; 6192 : 				}
; 6193 : 				catch (Exception &e)
; 6194 : 				{
; 6195 : 					e.Show (hwndDlg);

  014ca	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134328[ebp]
  014d0	8b 01		 mov	 eax, DWORD PTR [ecx]
  014d2	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  014d5	8b 00		 mov	 eax, DWORD PTR [eax]
  014d7	52		 push	 edx
  014d8	ff d0		 call	 eax

; 6196 : 					NormalCursor ();

  014da	e8 00 00 00 00	 call	 _NormalCursor

; 6197 : 					return 1;

  014df	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  014e4	c3		 ret	 0
$LN367@MainDialog:

; 6202 : 			}
; 6203 : 			else if (nCurPageNo == SYSENC_PRE_DRIVE_ANALYSIS_PAGE)

  014e5	83 f8 04	 cmp	 eax, 4
  014e8	75 67		 jne	 SHORT $LN355@MainDialog

; 6204 : 			{
; 6205 : 				if ((SysEncDetectHiddenSectors = Get2RadButtonPageAnswer()) != 1)

  014ea	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  014ef	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDetectHiddenSectors@@3HA, eax ; SysEncDetectHiddenSectors
  014f4	3b c6		 cmp	 eax, esi
  014f6	0f 84 67 26 00
	00		 je	 $LN204@MainDialog

; 6206 : 				{
; 6207 : 					// Skip drive analysis
; 6208 : 					nNewPageNo = SYSENC_DRIVE_ANALYSIS_PAGE;
; 6209 : 
; 6210 : 					// If the user had already searched for hidden sectors, we must clear (invalidate) the
; 6211 : 					// result because now he changed his mind and no longer wishes to encrypt the hidden sectors.
; 6212 : 					try
; 6213 : 					{
; 6214 : 						BootEncObj->InvalidateCachedSysDriveProperties ();

  014fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01502	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5
  01509	c7 45 fc 20 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 32 ; 00000020H
  01510	e8 00 00 00 00	 call	 ?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01515	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01518	40		 inc	 eax
  01519	50		 push	 eax
  0151a	53		 push	 ebx
  0151b	e8 00 00 00 00	 call	 _LoadPage
  01520	83 c4 08	 add	 esp, 8
  01523	b8 01 00 00 00	 mov	 eax, 1
  01528	e9 7d eb ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$27:

; 6215 : 					}
; 6216 : 					catch (Exception &e)
; 6217 : 					{
; 6218 : 						e.Show (MainDlg);

  0152d	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134335[ebp]
  01533	8b 11		 mov	 edx, DWORD PTR [ecx]
  01535	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0153a	8b 12		 mov	 edx, DWORD PTR [edx]
  0153c	50		 push	 eax
  0153d	ff d2		 call	 edx

; 6219 : 						EndMainDlg (MainDlg);

  0153f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  01545	e8 00 00 00 00	 call	 _EndMainDlg

; 6220 : 						exit(0);

  0154a	6a 00		 push	 0
  0154c	e8 00 00 00 00	 call	 _exit
$LN355@MainDialog:

; 6221 : 					}
; 6222 : 				}
; 6223 : 			}
; 6224 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  01551	83 f8 06	 cmp	 eax, 6
  01554	0f 85 33 01 00
	00		 jne	 $LN351@MainDialog

; 6225 : 			{
; 6226 : 				if (nMultiBoot > 1)

  0155a	39 35 00 00 00
	00		 cmp	 DWORD PTR ?nMultiBoot@@3HA, esi ; nMultiBoot
  01560	7e 45		 jle	 SHORT $LN347@MainDialog

; 6227 : 				{
; 6228 : 					// Multi-boot 
; 6229 : 
; 6230 : 					if (AskWarnNoYes ("MULTI_BOOT_FOR_ADVANCED_ONLY") == IDNO)

  01562	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@
  01567	e8 00 00 00 00	 call	 _AskWarnNoYes
  0156c	83 c4 04	 add	 esp, 4
  0156f	83 f8 07	 cmp	 eax, 7

; 6231 : 						return 1;

  01572	0f 84 a9 00 00
	00		 je	 $LN1220@MainDialog

; 6232 : 
; 6233 : 					if (bHiddenOS)

  01578	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0157d	85 c0		 test	 eax, eax
  0157f	74 26		 je	 SHORT $LN347@MainDialog

; 6234 : 					{
; 6235 : 						if (AskWarnNoYes ("HIDDEN_OS_MULTI_BOOT") == IDNO)

  01581	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@
  01586	e8 00 00 00 00	 call	 _AskWarnNoYes
  0158b	83 c4 04	 add	 esp, 4
  0158e	83 f8 07	 cmp	 eax, 7
  01591	75 14		 jne	 SHORT $LN347@MainDialog

; 6236 : 						{
; 6237 : 							Error ("UNSUPPORTED_HIDDEN_OS_MULTI_BOOT_CFG");

  01593	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@
  01598	e8 00 00 00 00	 call	 _Error
  0159d	83 c4 04	 add	 esp, 4
$LN1221@MainDialog:

; 6238 : 							return 1;

  015a0	8b c6		 mov	 eax, esi
  015a2	e9 03 eb ff ff	 jmp	 $LN512@MainDialog
$LN347@MainDialog:

; 6239 : 						}
; 6240 : 					}
; 6241 : 				}
; 6242 : 
; 6243 : 				if (bHiddenOS)

  015a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  015ad	85 c9		 test	 ecx, ecx
  015af	0f 84 ad 00 00
	00		 je	 $LN346@MainDialog

; 6244 : 				{
; 6245 : 					if (IsOSAtLeast (WIN_7)
; 6246 : 						&& BootEncObj->GetSystemDriveConfiguration().ExtraBootPartitionPresent
; 6247 : 						&& AskWarnYesNo ("CONFIRM_HIDDEN_OS_EXTRA_BOOT_PARTITION") == IDNO)

  015b5	6a 0d		 push	 13			; 0000000dH
  015b7	e8 00 00 00 00	 call	 _IsOSAtLeast
  015bc	83 c4 04	 add	 esp, 4
  015bf	85 c0		 test	 eax, eax
  015c1	74 34		 je	 SHORT $LN524@MainDialog
  015c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  015c9	8d 95 bc f5 ff
	ff		 lea	 edx, DWORD PTR $T169105[ebp]
  015cf	52		 push	 edx
  015d0	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  015d5	80 b8 c0 00 00
	00 00		 cmp	 BYTE PTR [eax+192], 0
  015dc	89 75 dc	 mov	 DWORD PTR $T169211[ebp], esi
  015df	74 16		 je	 SHORT $LN524@MainDialog
  015e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@
  015e6	e8 00 00 00 00	 call	 _AskWarnYesNo
  015eb	83 c4 04	 add	 esp, 4
  015ee	c6 45 eb 01	 mov	 BYTE PTR $T169104[ebp], 1
  015f2	83 f8 07	 cmp	 eax, 7
  015f5	74 04		 je	 SHORT $LN525@MainDialog
$LN524@MainDialog:
  015f7	c6 45 eb 00	 mov	 BYTE PTR $T169104[ebp], 0
$LN525@MainDialog:
  015fb	f6 45 dc 01	 test	 BYTE PTR $T169211[ebp], 1
  015ff	74 0b		 je	 SHORT $LN596@MainDialog
  01601	8d 8d bc f5 ff
	ff		 lea	 ecx, DWORD PTR $T169105[ebp]
  01607	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
$LN596@MainDialog:
  0160c	80 7d eb 00	 cmp	 BYTE PTR $T169104[ebp], 0
  01610	74 16		 je	 SHORT $LN345@MainDialog

; 6248 : 					{
; 6249 : 						TextInfoDialogBox (TC_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS);

  01612	6a 04		 push	 4
  01614	e8 00 00 00 00	 call	 _TextInfoDialogBox
  01619	83 c4 04	 add	 esp, 4
$LN1219@MainDialog:

; 6250 : 						NormalCursor ();

  0161c	e8 00 00 00 00	 call	 _NormalCursor
$LN1220@MainDialog:

; 6251 : 						return 1;

  01621	8b c6		 mov	 eax, esi
  01623	e9 82 ea ff ff	 jmp	 $LN512@MainDialog
$LN345@MainDialog:

; 6252 : 					}
; 6253 : 
; 6254 : 					if (AskWarnYesNo ("DECOY_OS_REQUIREMENTS") == IDNO)

  01628	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@
  0162d	e8 00 00 00 00	 call	 _AskWarnYesNo
  01632	83 c4 04	 add	 esp, 4
  01635	83 f8 07	 cmp	 eax, 7

; 6255 : 					{
; 6256 : 						NormalCursor ();
; 6257 : 						return 1;

  01638	74 e2		 je	 SHORT $LN1219@MainDialog

; 6258 : 					}
; 6259 : 
; 6260 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  0163a	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  0163f	85 c0		 test	 eax, eax

; 6261 : 					{
; 6262 : 						NormalCursor ();
; 6263 : 						return 1;

  01641	74 d9		 je	 SHORT $LN1219@MainDialog
$LN343@MainDialog:

; 6264 : 					}
; 6265 : 
; 6266 : 					// Skip irrelevant pages
; 6267 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE - 1;

  01643	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 15 ; 0000000fH

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0164a	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0164d	40		 inc	 eax
  0164e	50		 push	 eax
  0164f	53		 push	 ebx
  01650	e8 00 00 00 00	 call	 _LoadPage
  01655	83 c4 08	 add	 esp, 8
  01658	b8 01 00 00 00	 mov	 eax, 1
  0165d	e9 48 ea ff ff	 jmp	 $LN512@MainDialog
$LN346@MainDialog:

; 6268 : 				}
; 6269 : 				else if (nMultiBoot <= 1)

  01662	39 35 00 00 00
	00		 cmp	 DWORD PTR ?nMultiBoot@@3HA, esi ; nMultiBoot
  01668	0f 8f f5 24 00
	00		 jg	 $LN204@MainDialog

; 6270 : 				{
; 6271 : 					// Single-boot (not creating a hidden OS)
; 6272 : 					
; 6273 : 					// Skip irrelevant pages
; 6274 : 					nNewPageNo = CIPHER_PAGE - 1;

  0166e	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01675	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01678	40		 inc	 eax
  01679	50		 push	 eax
  0167a	53		 push	 ebx
  0167b	e8 00 00 00 00	 call	 _LoadPage
  01680	83 c4 08	 add	 esp, 8
  01683	b8 01 00 00 00	 mov	 eax, 1
  01688	e9 1d ea ff ff	 jmp	 $LN512@MainDialog
$LN351@MainDialog:

; 6275 : 				}
; 6276 : 			}
; 6277 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE)

  0168d	83 f8 07	 cmp	 eax, 7
  01690	75 31		 jne	 SHORT $LN339@MainDialog

; 6278 : 			{
; 6279 : 				SysEncMultiBootCfg.SystemOnBootDrive = Get2RadButtonPageAnswer ();

  01692	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  01697	a3 10 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16, eax

; 6280 : 
; 6281 : 				if (!SysEncMultiBootCfg.SystemOnBootDrive)

  0169c	85 c0		 test	 eax, eax
  0169e	0f 85 bf 24 00
	00		 jne	 $LN204@MainDialog

; 6282 : 				{
; 6283 : 					Error ("SYS_PARTITION_MUST_BE_ON_BOOT_DRIVE");

  016a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@
$LN1222@MainDialog:
  016a9	e8 00 00 00 00	 call	 _Error

; 6284 : 					EndMainDlg (MainDlg);

  016ae	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  016b4	83 c4 04	 add	 esp, 4
  016b7	e8 00 00 00 00	 call	 _EndMainDlg
$LN1223@MainDialog:

; 6285 : 					return 1;

  016bc	8b c6		 mov	 eax, esi
  016be	e9 e7 e9 ff ff	 jmp	 $LN512@MainDialog
$LN339@MainDialog:

; 6286 : 				}
; 6287 : 			}
; 6288 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE)

  016c3	bf 08 00 00 00	 mov	 edi, 8
  016c8	3b c7		 cmp	 eax, edi
  016ca	75 65		 jne	 SHORT $LN336@MainDialog

; 6289 : 			{
; 6290 : 				if (Get2RadButtonPageAnswer () == 0)

  016cc	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  016d1	85 c0		 test	 eax, eax
  016d3	75 20		 jne	 SHORT $LN335@MainDialog

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  016d5	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  016d8	40		 inc	 eax
  016d9	50		 push	 eax
  016da	53		 push	 ebx
  016db	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, 2
  016e5	e8 00 00 00 00	 call	 _LoadPage
  016ea	83 c4 08	 add	 esp, 8
  016ed	8d 47 f9	 lea	 eax, DWORD PTR [edi-7]
  016f0	e9 b5 e9 ff ff	 jmp	 $LN512@MainDialog
$LN335@MainDialog:

; 6291 : 				{
; 6292 : 					// 2 or more drives contain an OS
; 6293 : 
; 6294 : 					SysEncMultiBootCfg.NumberOfSysDrives = 2;		
; 6295 : 				}
; 6296 : 				else if (Get2RadButtonPageAnswer () == 1)

  016f5	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  016fa	83 f8 01	 cmp	 eax, 1
  016fd	0f 85 60 24 00
	00		 jne	 $LN204@MainDialog

; 6297 : 				{
; 6298 : 					// Only 1 drive contains an OS
; 6299 : 
; 6300 : 					SysEncMultiBootCfg.NumberOfSysDrives = 1;		
; 6301 : 
; 6302 : 					if (bWholeSysDrive)

  01703	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  0170a	89 35 00 00 00
	00		 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, esi

; 6303 : 					{
; 6304 : 						// Whole-system-drive encryption is currently not supported if the drive contains
; 6305 : 						// more than one system
; 6306 : 						Error ("WDE_UNSUPPORTED_FOR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE");
; 6307 : 						return 1;

  01710	75 43		 jne	 SHORT $LN1224@MainDialog

; 6308 : 					}
; 6309 : 
; 6310 : 					// Ask whether there is a non-Windows boot loader in the MBR
; 6311 : 					nNewPageNo = SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE - 1;

  01712	c7 45 ec 09 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 9

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01719	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0171c	40		 inc	 eax
  0171d	50		 push	 eax
  0171e	53		 push	 ebx
  0171f	e8 00 00 00 00	 call	 _LoadPage
  01724	83 c4 08	 add	 esp, 8
  01727	b8 01 00 00 00	 mov	 eax, 1
  0172c	e9 79 e9 ff ff	 jmp	 $LN512@MainDialog
$LN336@MainDialog:

; 6312 : 				}
; 6313 : 			}
; 6314 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE)

  01731	83 f8 09	 cmp	 eax, 9
  01734	75 33		 jne	 SHORT $LN330@MainDialog

; 6315 : 			{
; 6316 : 				SysEncMultiBootCfg.MultipleSystemsOnDrive = Get2RadButtonPageAnswer ();

  01736	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  0173b	a3 04 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4, eax

; 6317 : 
; 6318 : 				if (SysEncMultiBootCfg.MultipleSystemsOnDrive && bWholeSysDrive)

  01740	85 c0		 test	 eax, eax
  01742	0f 84 1b 24 00
	00		 je	 $LN204@MainDialog
  01748	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  0174f	0f 84 0e 24 00
	00		 je	 $LN204@MainDialog
$LN1224@MainDialog:

; 6319 : 				{
; 6320 : 					// Whole-system-drive encryption is currently not supported if the drive contains
; 6321 : 					// more than one system
; 6322 : 					Error ("WDE_UNSUPPORTED_FOR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE");

  01755	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@
  0175a	e8 00 00 00 00	 call	 _Error
  0175f	83 c4 04	 add	 esp, 4

; 6323 : 					return 1;

  01762	8b c6		 mov	 eax, esi
  01764	e9 41 e9 ff ff	 jmp	 $LN512@MainDialog
$LN330@MainDialog:

; 6324 : 				}
; 6325 : 			}
; 6326 : 
; 6327 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE)

  01769	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0176c	75 4d		 jne	 SHORT $LN327@MainDialog

; 6328 : 			{
; 6329 : 				SysEncMultiBootCfg.BootLoaderBrand = Get2RadButtonPageAnswer ();

  0176e	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  01773	a3 0c 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12, eax

; 6330 : 
; 6331 : 				if (SysEncMultiBootCfg.BootLoaderBrand)

  01778	85 c0		 test	 eax, eax
  0177a	74 0a		 je	 SHORT $LN326@MainDialog

; 6332 : 				{
; 6333 : 					// A non-Windows boot manager in the MBR
; 6334 : 					Error ("CUSTOM_BOOT_MANAGERS_IN_MBR_UNSUPPORTED");

  0177c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@

; 6335 : 					EndMainDlg (MainDlg);
; 6336 : 					return 1;

  01781	e9 23 ff ff ff	 jmp	 $LN1222@MainDialog
$LN326@MainDialog:

; 6337 : 				}
; 6338 : 				else
; 6339 : 				{
; 6340 : 					// Either a standard Windows boot manager or no boot manager
; 6341 : 					wcscpy_s (SysEncMultiBootCfgOutcome, sizeof(SysEncMultiBootCfgOutcome) / 2, GetString ("WINDOWS_BOOT_LOADER_HINTS"));

  01786	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@
  0178b	e8 00 00 00 00	 call	 _GetString
  01790	50		 push	 eax
  01791	68 00 10 00 00	 push	 4096			; 00001000H
  01796	68 00 00 00 00	 push	 OFFSET ?SysEncMultiBootCfgOutcome@@3PA_WA ; SysEncMultiBootCfgOutcome
  0179b	e8 00 00 00 00	 call	 _wcscpy_s

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  017a0	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  017a3	83 c4 10	 add	 esp, 16			; 00000010H
  017a6	40		 inc	 eax
  017a7	50		 push	 eax
  017a8	53		 push	 ebx
  017a9	e8 00 00 00 00	 call	 _LoadPage
  017ae	83 c4 08	 add	 esp, 8
  017b1	b8 01 00 00 00	 mov	 eax, 1
  017b6	e9 ef e8 ff ff	 jmp	 $LN512@MainDialog
$LN327@MainDialog:

; 6342 : 				}
; 6343 : 			}
; 6344 : 
; 6345 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_OUTCOME_PAGE)

  017bb	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  017be	75 26		 jne	 SHORT $LN323@MainDialog

; 6346 : 			{
; 6347 : 				if (bHiddenOS)

  017c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  017c5	85 c0		 test	 eax, eax
  017c7	0f 84 9a 05 00
	00		 je	 $LN276@MainDialog

; 6348 : 				{
; 6349 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  017cd	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  017d2	85 c0		 test	 eax, eax
  017d4	0f 85 69 fe ff
	ff		 jne	 $LN343@MainDialog

; 6350 : 					{
; 6351 : 						NormalCursor ();

  017da	e8 00 00 00 00	 call	 _NormalCursor
  017df	8b c6		 mov	 eax, esi
  017e1	e9 c4 e8 ff ff	 jmp	 $LN512@MainDialog
$LN323@MainDialog:

; 6352 : 						return 1;
; 6353 : 					}
; 6354 : 
; 6355 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE - 1;		// Skip irrelevant pages
; 6356 : 				}
; 6357 : 				else
; 6358 : 					nNewPageNo = CIPHER_PAGE - 1;	// Skip irrelevant pages
; 6359 : 			}
; 6360 : 
; 6361 : 			else if (nCurPageNo == VOLUME_TYPE_PAGE)

  017e6	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  017e9	0f 85 b9 00 00
	00		 jne	 $LN318@MainDialog

; 6362 : 			{
; 6363 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDDEN_VOL)))

  017ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  017f5	68 08 04 00 00	 push	 1032			; 00000408H
  017fa	51		 push	 ecx
  017fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01801	50		 push	 eax
  01802	e8 00 00 00 00	 call	 _IsButtonChecked
  01807	83 c4 04	 add	 esp, 4
  0180a	85 c0		 test	 eax, eax
  0180c	74 6a		 je	 SHORT $LN317@MainDialog

; 6364 : 				{
; 6365 : 					if (!IsAdmin() && !IsUacSupported ()
; 6366 : 						&& IDNO == MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_HIDVOL"),
; 6367 : 						lpszTitle, MB_ICONWARNING|MB_YESNO|MB_DEFBUTTON2))

  0180e	e8 00 00 00 00	 call	 _IsAdmin
  01813	85 c0		 test	 eax, eax
  01815	75 33		 jne	 SHORT $LN316@MainDialog
  01817	e8 00 00 00 00	 call	 _IsUacSupported
  0181c	85 c0		 test	 eax, eax
  0181e	75 2a		 jne	 SHORT $LN316@MainDialog
  01820	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  01826	68 34 01 00 00	 push	 308			; 00000134H
  0182b	52		 push	 edx
  0182c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@
  01831	e8 00 00 00 00	 call	 _GetString
  01836	83 c4 04	 add	 esp, 4
  01839	50		 push	 eax
  0183a	53		 push	 ebx
  0183b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  01841	83 f8 07	 cmp	 eax, 7

; 6368 : 					{
; 6369 : 						return 1;

  01844	0f 84 56 fd ff
	ff		 je	 $LN1221@MainDialog
$LN316@MainDialog:

; 6370 : 					}
; 6371 : 					else
; 6372 : 					{
; 6373 : 						bHiddenVol = TRUE;

  0184a	8b c6		 mov	 eax, esi
  0184c	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 6374 : 						bHiddenVolHost = TRUE;

  01851	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01856	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01859	40		 inc	 eax
  0185a	50		 push	 eax
  0185b	53		 push	 ebx
  0185c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0
  01866	e8 00 00 00 00	 call	 _LoadPage
  0186b	83 c4 08	 add	 esp, 8
  0186e	b8 01 00 00 00	 mov	 eax, 1
  01873	e9 32 e8 ff ff	 jmp	 $LN512@MainDialog
$LN317@MainDialog:

; 6375 : 						bInPlaceEncNonSys = FALSE;
; 6376 : 					}
; 6377 : 				}
; 6378 : 				else
; 6379 : 				{
; 6380 : 					bHiddenVol = FALSE;

  01878	33 c0		 xor	 eax, eax
  0187a	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 6381 : 					bHiddenVolHost = FALSE;

  0187f	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 6382 : 					bHiddenVolDirect = FALSE;

  01884	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 6383 : 					nNewPageNo = VOLUME_LOCATION_PAGE - 1;		// Skip the hidden volume creation wizard mode selection

  01889	c7 45 ec 0d 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 13 ; 0000000dH

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01890	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01893	40		 inc	 eax
  01894	50		 push	 eax
  01895	53		 push	 ebx
  01896	e8 00 00 00 00	 call	 _LoadPage
  0189b	83 c4 08	 add	 esp, 8
  0189e	b8 01 00 00 00	 mov	 eax, 1
  018a3	e9 02 e8 ff ff	 jmp	 $LN512@MainDialog
$LN318@MainDialog:

; 6384 : 				}
; 6385 : 			}
; 6386 : 
; 6387 : 			else if (nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  018a8	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  018ab	0f 85 77 01 00
	00		 jne	 $LN312@MainDialog

; 6388 : 			{
; 6389 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDVOL_WIZ_MODE_DIRECT)))

  018b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  018b6	68 0c 04 00 00	 push	 1036			; 0000040cH
  018bb	50		 push	 eax
  018bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  018c2	50		 push	 eax
  018c3	e8 00 00 00 00	 call	 _IsButtonChecked
  018c8	83 c4 04	 add	 esp, 4
  018cb	85 c0		 test	 eax, eax
  018cd	74 1e		 je	 SHORT $LN311@MainDialog

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  018cf	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  018d2	40		 inc	 eax
  018d3	50		 push	 eax
  018d4	53		 push	 ebx
  018d5	89 35 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolDirect, esi
  018db	e8 00 00 00 00	 call	 _LoadPage
  018e0	83 c4 08	 add	 esp, 8
  018e3	b8 01 00 00 00	 mov	 eax, 1
  018e8	e9 bd e7 ff ff	 jmp	 $LN512@MainDialog
$LN311@MainDialog:

; 6390 : 					bHiddenVolDirect = TRUE;
; 6391 : 				else
; 6392 : 				{
; 6393 : 					if (IsHiddenOSRunning())

  018ed	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  018f2	85 c0		 test	 eax, eax
  018f4	0f 84 0c 01 00
	00		 je	 $LN309@MainDialog

; 6394 : 					{
; 6395 : 						WarningDirect ((wstring (GetString ("HIDDEN_VOL_CREATION_UNDER_HIDDEN_OS_HOWTO"))
; 6396 : 							+ L"\n\n"
; 6397 : 							+ GetString ("NOTE_BEGINNING")
; 6398 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 6399 : 							+ L" "
; 6400 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  018fa	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@
  018ff	e8 00 00 00 00	 call	 _GetString
  01904	83 c4 04	 add	 esp, 4
  01907	50		 push	 eax
  01908	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169108[ebp]
  0190e	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01913	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01918	50		 push	 eax
  01919	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR $T169109[ebp]
  0191f	51		 push	 ecx
  01920	c7 45 fc 22 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 34 ; 00000022H
  01927	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0192c	8b f0		 mov	 esi, eax
  0192e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  01933	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+12], 35 ; 00000023H
  01937	e8 00 00 00 00	 call	 _GetString
  0193c	50		 push	 eax
  0193d	8d 95 9c fb ff
	ff		 lea	 edx, DWORD PTR $T169110[ebp]
  01943	56		 push	 esi
  01944	52		 push	 edx
  01945	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0194a	8b f0		 mov	 esi, eax
  0194c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  01951	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+12], 36 ; 00000024H
  01955	e8 00 00 00 00	 call	 _GetString
  0195a	50		 push	 eax
  0195b	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR $T169111[ebp]
  01961	56		 push	 esi
  01962	50		 push	 eax
  01963	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01968	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  0196d	50		 push	 eax
  0196e	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T169112[ebp]
  01974	51		 push	 ecx
  01975	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+12], 37 ; 00000025H
  01979	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0197e	8b f0		 mov	 esi, eax
  01980	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  01985	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+12], 38 ; 00000026H
  01989	e8 00 00 00 00	 call	 _GetString
  0198e	50		 push	 eax
  0198f	8d 95 44 fc ff
	ff		 lea	 edx, DWORD PTR $T169113[ebp]
  01995	56		 push	 esi
  01996	52		 push	 edx
  01997	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0199c	83 c4 48	 add	 esp, 72			; 00000048H
  0199f	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  019a2	72 05		 jb	 SHORT $LN896@MainDialog
  019a4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  019a7	eb 03		 jmp	 SHORT $LN897@MainDialog
$LN896@MainDialog:
  019a9	83 c0 04	 add	 eax, 4
$LN897@MainDialog:
  019ac	50		 push	 eax
  019ad	e8 00 00 00 00	 call	 _WarningDirect
  019b2	83 c4 04	 add	 esp, 4
  019b5	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR $T169113[ebp]
  019bb	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019c0	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T169112[ebp]
  019c6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019cb	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T169111[ebp]
  019d1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019d6	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T169110[ebp]
  019dc	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019e1	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR $T169109[ebp]
  019e7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019ec	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169108[ebp]
  019f2	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6401 : 						NormalCursor ();

  019f7	e8 00 00 00 00	 call	 _NormalCursor
  019fc	b8 01 00 00 00	 mov	 eax, 1
  01a01	e9 a4 e6 ff ff	 jmp	 $LN512@MainDialog
$LN309@MainDialog:

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01a06	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01a09	40		 inc	 eax
  01a0a	50		 push	 eax
  01a0b	53		 push	 ebx
  01a0c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, 0
  01a16	e8 00 00 00 00	 call	 _LoadPage
  01a1b	83 c4 08	 add	 esp, 8
  01a1e	b8 01 00 00 00	 mov	 eax, 1
  01a23	e9 82 e6 ff ff	 jmp	 $LN512@MainDialog
$LN312@MainDialog:

; 6402 : 						return 1;
; 6403 : 					}
; 6404 : 
; 6405 : 					bHiddenVolDirect = FALSE;
; 6406 : 				}
; 6407 : 			}
; 6408 : 
; 6409 : 			else if (nCurPageNo == VOLUME_LOCATION_PAGE)

  01a28	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  01a2b	0f 85 b0 02 00
	00		 jne	 $LN307@MainDialog

; 6410 : 			{
; 6411 : 				BOOL tmpbDevice;
; 6412 : 
; 6413 : 				WaitCursor();

  01a31	e8 00 00 00 00	 call	 _WaitCursor

; 6414 : 
; 6415 : 				GetWindowText (GetDlgItem (hCurPage, IDC_COMBO_BOX), szFileName, sizeof (szFileName));

  01a36	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01a3b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  01a41	68 05 01 00 00	 push	 261			; 00000105H
  01a46	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a4b	68 ea 03 00 00	 push	 1002			; 000003eaH
  01a50	50		 push	 eax
  01a51	ff d7		 call	 edi
  01a53	50		 push	 eax
  01a54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6416 : 				RelativePath2Absolute (szFileName);

  01a5a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a5f	e8 00 00 00 00	 call	 _RelativePath2Absolute

; 6417 : 				CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  01a64	8d 4d cc	 lea	 ecx, DWORD PTR _tmpbDevice$134401[ebp]
  01a67	51		 push	 ecx
  01a68	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a6d	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01a72	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 6418 : 
; 6419 : 				if (tmpbDevice != bDevice)

  01a77	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDevice@@3HA ; bDevice
  01a7c	83 c4 10	 add	 esp, 16			; 00000010H
  01a7f	39 45 cc	 cmp	 DWORD PTR _tmpbDevice$134401[ebp], eax
  01a82	74 44		 je	 SHORT $LN304@MainDialog

; 6420 : 				{
; 6421 : 					if (bDevice)

  01a84	85 c0		 test	 eax, eax
  01a86	74 19		 je	 SHORT $LN305@MainDialog

; 6422 : 					{
; 6423 : 						// Not a valid device path
; 6424 : 						Error ("CANNOT_CALC_SPACE");

  01a88	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  01a8d	e8 00 00 00 00	 call	 _Error
  01a92	83 c4 04	 add	 esp, 4

; 6425 : 						NormalCursor ();

  01a95	e8 00 00 00 00	 call	 _NormalCursor
  01a9a	8b c6		 mov	 eax, esi
  01a9c	e9 09 e6 ff ff	 jmp	 $LN512@MainDialog
$LN305@MainDialog:

; 6426 : 						return 1;
; 6427 : 					}
; 6428 : 					else
; 6429 : 					{
; 6430 : 						if (AskWarnYesNo ("DEVICE_SELECTED_IN_NON_DEVICE_MODE") == IDNO)

  01aa1	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@
  01aa6	e8 00 00 00 00	 call	 _AskWarnYesNo
  01aab	83 c4 04	 add	 esp, 4
  01aae	83 f8 07	 cmp	 eax, 7

; 6431 : 						{
; 6432 : 							NormalCursor ();
; 6433 : 							return 1;

  01ab1	0f 84 65 fb ff
	ff		 je	 $LN1219@MainDialog

; 6434 : 						}
; 6435 : 
; 6436 : 						SwitchWizardToNonSysDeviceMode ();

  01ab7	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysDeviceMode@@YAXXZ ; SwitchWizardToNonSysDeviceMode

; 6437 : 						NormalCursor ();

  01abc	e8 00 00 00 00	 call	 _NormalCursor
  01ac1	8b c6		 mov	 eax, esi
  01ac3	e9 e2 e5 ff ff	 jmp	 $LN512@MainDialog
$LN304@MainDialog:

; 6438 : 						return 1;
; 6439 : 					}
; 6440 : 				}
; 6441 : 
; 6442 : 				MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  01ac8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  01ace	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01ad3	52		 push	 edx
  01ad4	68 ea 03 00 00	 push	 1002			; 000003eaH
  01ad9	50		 push	 eax
  01ada	ff d7		 call	 edi
  01adc	50		 push	 eax
  01add	e8 00 00 00 00	 call	 _MoveEditToCombo

; 6443 : 
; 6444 : 				if (IsMountedVolume (szDiskFile))

  01ae2	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01ae7	e8 00 00 00 00	 call	 _IsMountedVolume
  01aec	83 c4 0c	 add	 esp, 12			; 0000000cH
  01aef	85 c0		 test	 eax, eax
  01af1	74 19		 je	 SHORT $LN302@MainDialog

; 6445 : 				{
; 6446 : 					Error ("ALREADY_MOUNTED");

  01af3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@
  01af8	e8 00 00 00 00	 call	 _Error
  01afd	83 c4 04	 add	 esp, 4

; 6447 : 					NormalCursor ();

  01b00	e8 00 00 00 00	 call	 _NormalCursor
  01b05	8b c6		 mov	 eax, esi
  01b07	e9 9e e5 ff ff	 jmp	 $LN512@MainDialog
$LN302@MainDialog:

; 6448 : 					return 1;
; 6449 : 				}
; 6450 : 
; 6451 : 				if (bDevice)

  01b0c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01b13	74 51		 je	 SHORT $LN301@MainDialog

; 6452 : 				{
; 6453 : 					switch (IsSystemDevicePath (szDiskFile, hCurPage, TRUE))

  01b15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01b1b	6a 01		 push	 1
  01b1d	51		 push	 ecx
  01b1e	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01b23	e8 00 00 00 00	 call	 _IsSystemDevicePath
  01b28	48		 dec	 eax
  01b29	83 c4 0c	 add	 esp, 12			; 0000000cH
  01b2c	83 f8 02	 cmp	 eax, 2
  01b2f	77 5c		 ja	 SHORT $LN294@MainDialog

; 6454 : 					{
; 6455 : 					case 1:
; 6456 : 					case 2:
; 6457 : 					case 3:
; 6458 : 						if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)

  01b31	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@
  01b36	e8 00 00 00 00	 call	 _AskYesNo
  01b3b	83 c4 04	 add	 esp, 4
  01b3e	83 f8 07	 cmp	 eax, 7

; 6459 : 						{
; 6460 : 							NormalCursor ();
; 6461 : 							return 1;

  01b41	0f 84 d5 fa ff
	ff		 je	 $LN1219@MainDialog

; 6462 : 						}
; 6463 : 						szFileName[0] = 0;

  01b47	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0

; 6464 : 						szDiskFile[0] = 0;

  01b4e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0

; 6465 : 						SwitchWizardToSysEncMode ();

  01b55	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode

; 6466 : 						NormalCursor ();

  01b5a	e8 00 00 00 00	 call	 _NormalCursor
  01b5f	8b c6		 mov	 eax, esi
  01b61	e9 44 e5 ff ff	 jmp	 $LN512@MainDialog
$LN301@MainDialog:

; 6467 : 						return 1;
; 6468 : 
; 6469 : 					case -1:
; 6470 : 						// In some environments (such as PE), the system volume is not located on a hard drive.
; 6471 : 						// Therefore, we must interpret this return code as "Not a system device path" (otherwise,
; 6472 : 						// non-system devices could not be TC-formatted in such environments). Note that this is
; 6473 : 						// rather safe, because bReliableRequired is set to TRUE.
; 6474 : 
; 6475 : 						// NOP
; 6476 : 						break;
; 6477 : 					}
; 6478 : 				}
; 6479 : 				else
; 6480 : 				{
; 6481 : 					if (CheckFileExtension(szFileName) 
; 6482 : 						&& AskWarnNoYes ("EXE_FILE_EXTENSION_CONFIRM") == IDNO)

  01b66	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01b6b	e8 00 00 00 00	 call	 _CheckFileExtension
  01b70	83 c4 04	 add	 esp, 4
  01b73	85 c0		 test	 eax, eax
  01b75	74 16		 je	 SHORT $LN294@MainDialog
  01b77	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@
  01b7c	e8 00 00 00 00	 call	 _AskWarnNoYes
  01b81	83 c4 04	 add	 esp, 4
  01b84	83 f8 07	 cmp	 eax, 7

; 6483 : 					{
; 6484 : 						NormalCursor ();
; 6485 : 						return 1;

  01b87	0f 84 8f fa ff
	ff		 je	 $LN1219@MainDialog
$LN294@MainDialog:

; 6486 : 					}
; 6487 : 				}
; 6488 : 
; 6489 : 				bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY));

  01b8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01b93	68 f4 03 00 00	 push	 1012			; 000003f4H
  01b98	52		 push	 edx
  01b99	ff d7		 call	 edi
  01b9b	50		 push	 eax
  01b9c	e8 00 00 00 00	 call	 _IsButtonChecked

; 6490 : 
; 6491 : 				SaveSettings (hCurPage);

  01ba1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  01ba7	83 c4 04	 add	 esp, 4
  01baa	f7 d8		 neg	 eax
  01bac	1b c0		 sbb	 eax, eax
  01bae	40		 inc	 eax
  01baf	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  01bb4	e8 00 00 00 00	 call	 _SaveSettings

; 6492 : 
; 6493 : 				if (bHiddenVolDirect && bHiddenVolHost)

  01bb9	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolDirect
  01bbe	85 c0		 test	 eax, eax
  01bc0	0f 84 d4 00 00
	00		 je	 $LN293@MainDialog
  01bc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01bcc	85 c9		 test	 ecx, ecx
  01bce	0f 84 c6 00 00
	00		 je	 $LN293@MainDialog

; 6494 : 				{
; 6495 : 					nNewPageNo = HIDDEN_VOL_HOST_PASSWORD_PAGE - 1;
; 6496 : 
; 6497 : 					if (bDevice)

  01bd4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01bdb	c7 45 ec 13 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 19 ; 00000013H
  01be2	74 73		 je	 SHORT $LN292@MainDialog

; 6498 : 					{
; 6499 : 						if(!QueryFreeSpace (hwndDlg, GetDlgItem (hwndDlg, IDC_SPACE_LEFT), FALSE))

  01be4	6a 00		 push	 0
  01be6	68 f1 03 00 00	 push	 1009			; 000003f1H
  01beb	53		 push	 ebx
  01bec	ff d7		 call	 edi
  01bee	50		 push	 eax
  01bef	53		 push	 ebx
  01bf0	e8 00 00 00 00	 call	 _QueryFreeSpace
  01bf5	83 c4 0c	 add	 esp, 12			; 0000000cH
  01bf8	85 c0		 test	 eax, eax
  01bfa	75 2d		 jne	 SHORT $LN291@MainDialog

; 6500 : 						{
; 6501 : 							MessageBoxW (hwndDlg, GetString ("CANT_GET_VOLSIZE"), lpszTitle, ICON_HAND);

  01bfc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  01c02	6a 10		 push	 16			; 00000010H
  01c04	52		 push	 edx
  01c05	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  01c0a	e8 00 00 00 00	 call	 _GetString
  01c0f	83 c4 04	 add	 esp, 4
  01c12	50		 push	 eax
  01c13	53		 push	 ebx
  01c14	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 6502 : 							NormalCursor ();

  01c1a	e8 00 00 00 00	 call	 _NormalCursor
  01c1f	b8 01 00 00 00	 mov	 eax, 1
  01c24	e9 81 e4 ff ff	 jmp	 $LN512@MainDialog
$LN291@MainDialog:

; 6503 : 							return 1;
; 6504 : 						}
; 6505 : 						else
; 6506 : 							nHiddenVolHostSize = nVolumeSize;

  01c29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  01c2e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  01c34	a3 00 00 00 00	 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA, eax

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01c39	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01c3c	40		 inc	 eax
  01c3d	50		 push	 eax
  01c3e	53		 push	 ebx
  01c3f	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA+4, ecx
  01c45	e8 00 00 00 00	 call	 _LoadPage
  01c4a	83 c4 08	 add	 esp, 8
  01c4d	b8 01 00 00 00	 mov	 eax, 1
  01c52	e9 53 e4 ff ff	 jmp	 $LN512@MainDialog
$LN292@MainDialog:

; 6507 : 					}
; 6508 : 					else
; 6509 : 					{
; 6510 : 						if (!GetFileVolSize (hwndDlg, &nHiddenVolHostSize))

  01c57	68 00 00 00 00	 push	 OFFSET ?nHiddenVolHostSize@@3_KA ; nHiddenVolHostSize
  01c5c	53		 push	 ebx
  01c5d	e8 00 00 00 00	 call	 _GetFileVolSize
  01c62	83 c4 08	 add	 esp, 8
  01c65	85 c0		 test	 eax, eax

; 6511 : 						{
; 6512 : 							NormalCursor ();
; 6513 : 							return 1;

  01c67	0f 84 81 27 00
	00		 je	 $LN426@MainDialog

; 6514 : 						}
; 6515 : 						else if (IsSparseFile (hwndDlg))

  01c6d	53		 push	 ebx
  01c6e	e8 00 00 00 00	 call	 _IsSparseFile
  01c73	83 c4 04	 add	 esp, 4
  01c76	85 c0		 test	 eax, eax
  01c78	0f 84 e5 1e 00
	00		 je	 $LN204@MainDialog

; 6516 : 						{
; 6517 : 							// Hidden volumes must not be created within sparse file containers
; 6518 : 							Warning ("HIDDEN_VOL_HOST_SPARSE");

  01c7e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@
  01c83	e8 00 00 00 00	 call	 _Warning
  01c88	83 c4 04	 add	 esp, 4

; 6519 : 							NormalCursor ();

  01c8b	e8 00 00 00 00	 call	 _NormalCursor
  01c90	b8 01 00 00 00	 mov	 eax, 1
  01c95	e9 10 e4 ff ff	 jmp	 $LN512@MainDialog
$LN293@MainDialog:

; 6520 : 							return 1;
; 6521 : 						}
; 6522 : 					}
; 6523 : 				}
; 6524 : 				else
; 6525 : 				{
; 6526 : 					if (!bHiddenVol && !bDevice)

  01c9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01ca0	85 d2		 test	 edx, edx
  01ca2	75 0c		 jne	 SHORT $LN284@MainDialog
  01ca4	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, edx ; bDevice

; 6527 : 						nNewPageNo = CIPHER_PAGE - 1;

  01caa	0f 84 b7 00 00
	00		 je	 $LN276@MainDialog
$LN284@MainDialog:

; 6528 : 					else if (bHiddenVol)

  01cb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01cb5	85 c0		 test	 eax, eax
  01cb7	0f 84 a6 1e 00
	00		 je	 $LN204@MainDialog

; 6529 : 						nNewPageNo = (bHiddenVolHost ? HIDDEN_VOL_HOST_PRE_CIPHER_PAGE : HIDDEN_VOL_PRE_CIPHER_PAGE) - 1;

  01cbd	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01cc2	f7 d8		 neg	 eax
  01cc4	1b c0		 sbb	 eax, eax
  01cc6	83 c0 10	 add	 eax, 16			; 00000010H
  01cc9	89 45 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], eax

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01ccc	40		 inc	 eax
  01ccd	50		 push	 eax
  01cce	53		 push	 ebx
  01ccf	e8 00 00 00 00	 call	 _LoadPage
  01cd4	83 c4 08	 add	 esp, 8
  01cd7	b8 01 00 00 00	 mov	 eax, 1
  01cdc	e9 c9 e3 ff ff	 jmp	 $LN512@MainDialog
$LN307@MainDialog:

; 6530 : 				}
; 6531 : 			}
; 6532 : 
; 6533 : 			else if (nCurPageNo == DEVICE_TRANSFORM_MODE_PAGE)

  01ce1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  01ce4	75 6f		 jne	 SHORT $LN280@MainDialog

; 6534 : 			{
; 6535 : 				if (bInPlaceEncNonSys)

  01ce6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01cec	85 c9		 test	 ecx, ecx
  01cee	74 77		 je	 SHORT $LN276@MainDialog

; 6536 : 				{
; 6537 : 					// Check requirements for non-system in-place encryption
; 6538 : 
; 6539 : 					if (!CheckRequirementsForNonSysInPlaceEnc (szDiskFile, FALSE))

  01cf0	6a 00		 push	 0
  01cf2	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01cf7	e8 00 00 00 00	 call	 _CheckRequirementsForNonSysInPlaceEnc
  01cfc	83 c4 08	 add	 esp, 8
  01cff	85 c0		 test	 eax, eax

; 6540 : 					{
; 6541 : 						return 1;

  01d01	0f 84 99 f8 ff
	ff		 je	 $LN1221@MainDialog

; 6542 : 					}
; 6543 : 
; 6544 : 					// We are going to skip the Size page so we must get the size here
; 6545 : 					nVolumeSize = GetDeviceSize (szDiskFile);

  01d07	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01d0c	e8 00 00 00 00	 call	 _GetDeviceSize
  01d11	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 6546 : 
; 6547 : 					if (nVolumeSize == -1)

  01d16	23 c2		 and	 eax, edx
  01d18	83 c4 04	 add	 esp, 4
  01d1b	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  01d21	83 f8 ff	 cmp	 eax, -1
  01d24	75 16		 jne	 SHORT $LN277@MainDialog

; 6548 : 					{
; 6549 : 						handleWin32Error (MainDlg);

  01d26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  01d2c	52		 push	 edx
  01d2d	e8 00 00 00 00	 call	 _handleWin32Error
  01d32	83 c4 04	 add	 esp, 4
  01d35	8b c6		 mov	 eax, esi
  01d37	e9 6e e3 ff ff	 jmp	 $LN512@MainDialog
$LN277@MainDialog:

; 6550 : 						return 1;
; 6551 : 					}
; 6552 : 
; 6553 : 					if (AskWarnYesNo ("NONSYS_INPLACE_ENC_CONFIRM_BACKUP") == IDNO)

  01d3c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@
  01d41	e8 00 00 00 00	 call	 _AskWarnYesNo
  01d46	83 c4 04	 add	 esp, 4
  01d49	83 f8 07	 cmp	 eax, 7
  01d4c	75 19		 jne	 SHORT $LN276@MainDialog

; 6285 : 					return 1;

  01d4e	8b c6		 mov	 eax, esi
  01d50	e9 55 e3 ff ff	 jmp	 $LN512@MainDialog
$LN280@MainDialog:

; 6554 : 						return 1;
; 6555 : 				}
; 6556 : 				nNewPageNo = CIPHER_PAGE - 1;
; 6557 : 			}
; 6558 : 
; 6559 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PRE_CIPHER_PAGE)

  01d55	83 f8 10	 cmp	 eax, 16			; 00000010H
  01d58	75 2c		 jne	 SHORT $LN274@MainDialog

; 6560 : 			{
; 6561 : 				if (bHiddenVolHost)

  01d5a	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01d5f	85 c0		 test	 eax, eax
  01d61	0f 84 fc 1d 00
	00		 je	 $LN204@MainDialog
$LN276@MainDialog:

; 6562 : 					nNewPageNo = CIPHER_PAGE - 1;		// Skip the info on the hiddem volume

  01d67	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01d6e	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01d71	40		 inc	 eax
  01d72	50		 push	 eax
  01d73	53		 push	 ebx
  01d74	e8 00 00 00 00	 call	 _LoadPage
  01d79	83 c4 08	 add	 esp, 8
  01d7c	b8 01 00 00 00	 mov	 eax, 1
  01d81	e9 24 e3 ff ff	 jmp	 $LN512@MainDialog
$LN274@MainDialog:

; 6563 : 			}
; 6564 : 
; 6565 : 			else if (nCurPageNo == CIPHER_PAGE)

  01d86	83 f8 12	 cmp	 eax, 18			; 00000012H
  01d89	0f 85 03 01 00
	00		 jne	 $LN271@MainDialog

; 6566 : 			{
; 6567 : 				LPARAM nIndex;
; 6568 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  01d8f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01d95	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01d9b	6a 00		 push	 0
  01d9d	6a 00		 push	 0
  01d9f	68 47 01 00 00	 push	 327			; 00000147H
  01da4	68 ea 03 00 00	 push	 1002			; 000003eaH
  01da9	51		 push	 ecx
  01daa	ff d6		 call	 esi
  01dac	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  01db2	50		 push	 eax
  01db3	ff d7		 call	 edi

; 6569 : 				nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  01db5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01dbb	6a 00		 push	 0
  01dbd	50		 push	 eax
  01dbe	68 50 01 00 00	 push	 336			; 00000150H
  01dc3	68 ea 03 00 00	 push	 1002			; 000003eaH
  01dc8	52		 push	 edx
  01dc9	ff d6		 call	 esi
  01dcb	50		 push	 eax
  01dcc	ff d7		 call	 edi
  01dce	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA

; 6570 : 
; 6571 : 				if (SysEncInEffect ()
; 6572 : 					&& EAGetCipherCount (nVolumeEA) > 1)		// Cascade?

  01dd3	e8 00 00 00 00	 call	 _SysEncInEffect
  01dd8	85 c0		 test	 eax, eax
  01dda	74 40		 je	 SHORT $LN268@MainDialog
  01ddc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  01de1	50		 push	 eax
  01de2	e8 00 00 00 00	 call	 _EAGetCipherCount
  01de7	83 c4 04	 add	 esp, 4
  01dea	83 f8 01	 cmp	 eax, 1
  01ded	7e 2d		 jle	 SHORT $LN268@MainDialog

; 6573 : 				{
; 6574 : 					if (AskWarnNoYes ("CONFIRM_CASCADE_FOR_SYS_ENCRYPTION") == IDNO)

  01def	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@
  01df4	e8 00 00 00 00	 call	 _AskWarnNoYes
  01df9	83 c4 04	 add	 esp, 4
  01dfc	83 f8 07	 cmp	 eax, 7

; 6575 : 						return 1;

  01dff	0f 84 63 e6 ff
	ff		 je	 $LN482@MainDialog

; 6576 : 
; 6577 : 					if (!bHiddenOS)

  01e05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01e0b	85 c9		 test	 ecx, ecx
  01e0d	75 0d		 jne	 SHORT $LN268@MainDialog

; 6578 : 						Info ("NOTE_CASCADE_FOR_SYS_ENCRYPTION");

  01e0f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@
  01e14	e8 00 00 00 00	 call	 _Info
  01e19	83 c4 04	 add	 esp, 4
$LN268@MainDialog:

; 6579 : 				}
; 6580 : 
; 6581 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0);

  01e1c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01e22	6a 00		 push	 0
  01e24	6a 00		 push	 0
  01e26	68 47 01 00 00	 push	 327			; 00000147H
  01e2b	68 f0 03 00 00	 push	 1008			; 000003f0H
  01e30	52		 push	 edx
  01e31	ff d6		 call	 esi
  01e33	50		 push	 eax
  01e34	ff d7		 call	 edi

; 6582 : 				hash_algo = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, nIndex, 0);

  01e36	6a 00		 push	 0
  01e38	50		 push	 eax
  01e39	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01e3e	68 50 01 00 00	 push	 336			; 00000150H
  01e43	68 f0 03 00 00	 push	 1008			; 000003f0H
  01e48	50		 push	 eax
  01e49	ff d6		 call	 esi
  01e4b	50		 push	 eax
  01e4c	ff d7		 call	 edi

; 6583 : 
; 6584 : 				RandSetHashFunction (hash_algo);

  01e4e	50		 push	 eax
  01e4f	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
  01e54	e8 00 00 00 00	 call	 _RandSetHashFunction
  01e59	83 c4 04	 add	 esp, 4

; 6585 : 
; 6586 : 				if (SysEncInEffect () || bInPlaceEncNonSys)

  01e5c	e8 00 00 00 00	 call	 _SysEncInEffect
  01e61	85 c0		 test	 eax, eax
  01e63	75 0e		 jne	 SHORT $LN266@MainDialog
  01e65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01e6b	85 c9		 test	 ecx, ecx
  01e6d	0f 84 f0 1c 00
	00		 je	 $LN204@MainDialog
$LN266@MainDialog:

; 6587 : 					nNewPageNo = PASSWORD_PAGE - 1;			// Skip irrelevant pages

  01e73	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 20 ; 00000014H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01e7a	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01e7d	40		 inc	 eax
  01e7e	50		 push	 eax
  01e7f	53		 push	 ebx
  01e80	e8 00 00 00 00	 call	 _LoadPage
  01e85	83 c4 08	 add	 esp, 8
  01e88	b8 01 00 00 00	 mov	 eax, 1
  01e8d	e9 18 e2 ff ff	 jmp	 $LN512@MainDialog
$LN271@MainDialog:

; 6588 : 			}
; 6589 : 
; 6590 : 			else if (nCurPageNo == SIZE_PAGE)

  01e92	83 f8 13	 cmp	 eax, 19			; 00000013H
  01e95	0f 85 c7 01 00
	00		 jne	 $LN264@MainDialog

; 6591 : 			{
; 6592 : 				char szFileSystemNameBuffer[256];
; 6593 : 
; 6594 : 				VerifySizeAndUpdate (hCurPage, TRUE);

  01e9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01ea1	6a 01		 push	 1
  01ea3	e8 00 00 00 00	 call	 _VerifySizeAndUpdate
  01ea8	83 c4 04	 add	 esp, 4

; 6595 : 
; 6596 : 				if (!bDevice)

  01eab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01eb2	0f 85 de 00 00
	00		 jne	 $LN260@MainDialog

; 6597 : 				{
; 6598 : 					/* Verify that the volume would not be too large for the host file system */
; 6599 : 
; 6600 : 					char root[TC_MAX_PATH];
; 6601 : 
; 6602 : 					if (GetVolumePathName (szDiskFile, root, sizeof (root))
; 6603 : 						&& GetVolumeInformation (root, NULL, 0, NULL, NULL, NULL, szFileSystemNameBuffer, sizeof(szFileSystemNameBuffer))
; 6604 : 						&& !strncmp (szFileSystemNameBuffer, "FAT32", 5))

  01eb8	68 04 01 00 00	 push	 260			; 00000104H
  01ebd	8d 95 88 c3 00
	00		 lea	 edx, DWORD PTR _root$134458[ebp]
  01ec3	52		 push	 edx
  01ec4	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01ec9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  01ecf	85 c0		 test	 eax, eax
  01ed1	0f 84 7b 00 00
	00		 je	 $LN261@MainDialog
  01ed7	68 00 01 00 00	 push	 256			; 00000100H
  01edc	8d 85 8c c4 00
	00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$134456[ebp]
  01ee2	50		 push	 eax
  01ee3	6a 00		 push	 0
  01ee5	6a 00		 push	 0
  01ee7	6a 00		 push	 0
  01ee9	6a 00		 push	 0
  01eeb	6a 00		 push	 0
  01eed	8d 8d 88 c3 00
	00		 lea	 ecx, DWORD PTR _root$134458[ebp]
  01ef3	51		 push	 ecx
  01ef4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  01efa	85 c0		 test	 eax, eax
  01efc	74 54		 je	 SHORT $LN261@MainDialog
  01efe	6a 05		 push	 5
  01f00	8d 95 8c c4 00
	00		 lea	 edx, DWORD PTR _szFileSystemNameBuffer$134456[ebp]
  01f06	68 00 00 00 00	 push	 OFFSET ??_C@_05HNJNFBJJ@FAT32?$AA@
  01f0b	52		 push	 edx
  01f0c	e8 00 00 00 00	 call	 _strncmp
  01f11	83 c4 0c	 add	 esp, 12			; 0000000cH
  01f14	85 c0		 test	 eax, eax
  01f16	75 3a		 jne	 SHORT $LN261@MainDialog

; 6605 : 					{
; 6606 : 						// The host file system is FAT32
; 6607 : 						if (nUIVolumeSize * nMultiplier >= 4 * BYTES_PER_GB)

  01f18	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01f1e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01f23	51		 push	 ecx
  01f24	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01f2a	99		 cdq
  01f2b	51		 push	 ecx
  01f2c	52		 push	 edx
  01f2d	50		 push	 eax
  01f2e	e8 00 00 00 00	 call	 __allmul
  01f33	83 fa 01	 cmp	 edx, 1
  01f36	72 1a		 jb	 SHORT $LN261@MainDialog
  01f38	77 04		 ja	 SHORT $LN1129@MainDialog
  01f3a	85 c0		 test	 eax, eax
  01f3c	72 14		 jb	 SHORT $LN261@MainDialog
$LN1129@MainDialog:

; 6608 : 						{
; 6609 : 							Error ("VOLUME_TOO_LARGE_FOR_FAT32");

  01f3e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@
  01f43	e8 00 00 00 00	 call	 _Error
  01f48	83 c4 04	 add	 esp, 4
  01f4b	8b c6		 mov	 eax, esi
  01f4d	e9 58 e1 ff ff	 jmp	 $LN512@MainDialog
$LN261@MainDialog:

; 6610 : 							return 1;
; 6611 : 						}
; 6612 : 					}
; 6613 : 
; 6614 : 					/* Verify that the volume would not be too large for the operating system */
; 6615 : 
; 6616 : 					if (!IsOSAtLeast (WIN_VISTA)
; 6617 : 						&& nUIVolumeSize * nMultiplier > 2 * BYTES_PER_TB)

  01f52	6a 0b		 push	 11			; 0000000bH
  01f54	e8 00 00 00 00	 call	 _IsOSAtLeast
  01f59	83 c4 04	 add	 esp, 4
  01f5c	85 c0		 test	 eax, eax
  01f5e	75 36		 jne	 SHORT $LN260@MainDialog
  01f60	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01f66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01f6b	51		 push	 ecx
  01f6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01f72	99		 cdq
  01f73	51		 push	 ecx
  01f74	52		 push	 edx
  01f75	50		 push	 eax
  01f76	e8 00 00 00 00	 call	 __allmul
  01f7b	81 fa 00 02 00
	00		 cmp	 edx, 512		; 00000200H
  01f81	72 13		 jb	 SHORT $LN260@MainDialog
  01f83	77 04		 ja	 SHORT $LN1130@MainDialog
  01f85	85 c0		 test	 eax, eax
  01f87	76 0d		 jbe	 SHORT $LN260@MainDialog
$LN1130@MainDialog:

; 6618 : 					{
; 6619 : 						Warning ("VOLUME_TOO_LARGE_FOR_WINXP");

  01f89	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@
  01f8e	e8 00 00 00 00	 call	 _Warning
  01f93	83 c4 04	 add	 esp, 4
$LN260@MainDialog:

; 6620 : 					}
; 6621 : 				}
; 6622 : 
; 6623 : 				if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  01f96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01f9c	85 d2		 test	 edx, edx
  01f9e	0f 84 87 00 00
	00		 je	 $LN257@MainDialog
  01fa4	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01fa9	85 c0		 test	 eax, eax
  01fab	0f 85 7a 00 00
	00		 jne	 $LN257@MainDialog

; 6624 : 				{
; 6625 : 					/* Ask for confirmation if the hidden volume is too large for the user to be
; 6626 : 					able to write much more data to the outer volume. */
; 6627 : 
; 6628 : 					if (((double) nUIVolumeSize / (nMaximumHiddenVolSize / nMultiplier)) > 0.85)	// 85%

  01fb1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01fb7	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01fbc	89 4d d0	 mov	 DWORD PTR tv5953[ebp], ecx
  01fbf	8b c8		 mov	 ecx, eax
  01fc1	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  01fc6	89 45 d4	 mov	 DWORD PTR tv5953[ebp+4], eax
  01fc9	df 6d d0	 fild	 QWORD PTR tv5953[ebp]
  01fcc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01fd1	99		 cdq
  01fd2	52		 push	 edx
  01fd3	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  01fd9	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  01fdf	89 4d d4	 mov	 DWORD PTR tv5950[ebp+4], ecx
  01fe2	50		 push	 eax
  01fe3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  01fe8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv5950[ebp], 0
  01fef	df 6d d0	 fild	 QWORD PTR tv5950[ebp]
  01ff2	52		 push	 edx
  01ff3	50		 push	 eax
  01ff4	d9 e0		 fchs
  01ff6	de c1		 faddp	 ST(1), ST(0)
  01ff8	e8 00 00 00 00	 call	 __alldiv
  01ffd	89 45 d0	 mov	 DWORD PTR tv5924[ebp], eax
  02000	89 55 d4	 mov	 DWORD PTR tv5924[ebp+4], edx
  02003	df 6d d0	 fild	 QWORD PTR tv5924[ebp]
  02006	de f9		 fdivp	 ST(1), ST(0)
  02008	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3feb333333333333
  0200e	df e0		 fnstsw	 ax
  02010	f6 c4 41	 test	 ah, 65			; 00000041H
  02013	75 16		 jne	 SHORT $LN257@MainDialog

; 6629 : 					{
; 6630 : 						if (AskWarnNoYes ("FREE_SPACE_FOR_WRITING_TO_OUTER_VOLUME") == IDNO)

  02015	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@
  0201a	e8 00 00 00 00	 call	 _AskWarnNoYes
  0201f	83 c4 04	 add	 esp, 4
  02022	83 f8 07	 cmp	 eax, 7

; 6631 : 							return 1;

  02025	0f 84 75 f5 ff
	ff		 je	 $LN1221@MainDialog
$LN257@MainDialog:

; 6632 : 					}
; 6633 : 				}
; 6634 : 
; 6635 : 				if (!(bHiddenVolDirect && bHiddenVolHost))

  0202b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  02031	85 c9		 test	 ecx, ecx
  02033	74 0e		 je	 SHORT $LN255@MainDialog
  02035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0203b	85 d2		 test	 edx, edx
  0203d	0f 85 20 1b 00
	00		 jne	 $LN204@MainDialog
$LN255@MainDialog:

; 6636 : 					nNewPageNo = PASSWORD_PAGE - 1;

  02043	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 20 ; 00000014H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0204a	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0204d	40		 inc	 eax
  0204e	50		 push	 eax
  0204f	53		 push	 ebx
  02050	e8 00 00 00 00	 call	 _LoadPage
  02055	83 c4 08	 add	 esp, 8
  02058	b8 01 00 00 00	 mov	 eax, 1
  0205d	e9 48 e0 ff ff	 jmp	 $LN512@MainDialog
$LN264@MainDialog:

; 6637 : 			}
; 6638 : 
; 6639 : 			else if (nCurPageNo == PASSWORD_PAGE)

  02062	83 f8 15	 cmp	 eax, 21			; 00000015H
  02065	0f 85 dc 01 00
	00		 jne	 $LN253@MainDialog

; 6640 : 			{
; 6641 : 				VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (MainDlg, IDC_NEXT),
; 6642 : 					GetDlgItem (hCurPage, IDC_PASSWORD),
; 6643 : 					GetDlgItem (hCurPage, IDC_VERIFY),
; 6644 : 					volumePassword.Text,
; 6645 : 					szVerify,
; 6646 : 					KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  0206b	39 0d 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, ecx
  02071	74 15		 je	 SHORT $LN526@MainDialog
  02073	39 0d 00 00 00
	00		 cmp	 DWORD PTR _FirstKeyFile, ecx
  02079	74 0d		 je	 SHORT $LN526@MainDialog
  0207b	e8 00 00 00 00	 call	 _SysEncInEffect
  02080	85 c0		 test	 eax, eax
  02082	75 04		 jne	 SHORT $LN526@MainDialog
  02084	8b c6		 mov	 eax, esi
  02086	eb 02		 jmp	 SHORT $LN527@MainDialog
$LN526@MainDialog:
  02088	33 c0		 xor	 eax, eax
$LN527@MainDialog:
  0208a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02090	50		 push	 eax
  02091	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02096	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  0209b	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  020a0	68 f2 03 00 00	 push	 1010			; 000003f2H
  020a5	50		 push	 eax
  020a6	ff d6		 call	 esi
  020a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  020ae	50		 push	 eax
  020af	68 ec 03 00 00	 push	 1004			; 000003ecH
  020b4	51		 push	 ecx
  020b5	ff d6		 call	 esi
  020b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  020bd	50		 push	 eax
  020be	68 10 04 00 00	 push	 1040			; 00000410H
  020c3	52		 push	 edx
  020c4	ff d6		 call	 esi
  020c6	50		 push	 eax
  020c7	53		 push	 ebx
  020c8	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate

; 6647 : 
; 6648 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  020cd	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  020d2	83 c4 1c	 add	 esp, 28			; 0000001cH
  020d5	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1131@MainDialog:
  020d8	8a 08		 mov	 cl, BYTE PTR [eax]
  020da	40		 inc	 eax
  020db	84 c9		 test	 cl, cl
  020dd	75 f9		 jne	 SHORT $LL1131@MainDialog
  020df	2b c2		 sub	 eax, edx
  020e1	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 6649 : 
; 6650 : 				if (volumePassword.Length > 0)

  020e6	74 5d		 je	 SHORT $LN249@MainDialog

; 6651 : 				{
; 6652 : 					// Password character encoding
; 6653 : 					if (!CheckPasswordCharEncoding (GetDlgItem (hCurPage, IDC_PASSWORD), NULL))

  020e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  020ed	6a 00		 push	 0
  020ef	68 ec 03 00 00	 push	 1004			; 000003ecH
  020f4	50		 push	 eax
  020f5	ff d6		 call	 esi
  020f7	50		 push	 eax
  020f8	e8 00 00 00 00	 call	 _CheckPasswordCharEncoding
  020fd	83 c4 08	 add	 esp, 8
  02100	85 c0		 test	 eax, eax
  02102	75 17		 jne	 SHORT $LN251@MainDialog

; 6654 : 					{
; 6655 : 						Error ("UNSUPPORTED_CHARS_IN_PWD");

  02104	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
  02109	e8 00 00 00 00	 call	 _Error
  0210e	83 c4 04	 add	 esp, 4
  02111	b8 01 00 00 00	 mov	 eax, 1
  02116	e9 8f df ff ff	 jmp	 $LN512@MainDialog
$LN251@MainDialog:

; 6656 : 						return 1;
; 6657 : 					}
; 6658 : 					// Check password length (do not check if it's for an outer volume).
; 6659 : 					else if (!bHiddenVolHost
; 6660 : 						&& !CheckPasswordLength (hwndDlg, GetDlgItem (hCurPage, IDC_PASSWORD)))

  0211b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  02121	85 c9		 test	 ecx, ecx
  02123	75 20		 jne	 SHORT $LN249@MainDialog
  02125	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0212b	68 ec 03 00 00	 push	 1004			; 000003ecH
  02130	52		 push	 edx
  02131	ff d6		 call	 esi
  02133	50		 push	 eax
  02134	53		 push	 ebx
  02135	e8 00 00 00 00	 call	 _CheckPasswordLength
  0213a	83 c4 08	 add	 esp, 8
  0213d	85 c0		 test	 eax, eax

; 6661 : 					{
; 6662 : 						return 1;

  0213f	0f 84 23 e3 ff
	ff		 je	 $LN482@MainDialog
$LN249@MainDialog:

; 6663 : 					}
; 6664 : 				}
; 6665 : 
; 6666 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 6667 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword, sizeof (szRawPassword));

  02145	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0214a	6a 41		 push	 65			; 00000041H
  0214c	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  02151	68 ec 03 00 00	 push	 1004			; 000003ecH
  02156	50		 push	 eax
  02157	ff d6		 call	 esi
  02159	50		 push	 eax
  0215a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6668 : 
; 6669 : 				if (!SysEncInEffect ()) 

  02160	e8 00 00 00 00	 call	 _SysEncInEffect
  02165	85 c0		 test	 eax, eax
  02167	75 30		 jne	 SHORT $LN248@MainDialog

; 6670 : 				{
; 6671 : 					if (KeyFilesEnable)

  02169	39 05 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, eax
  0216f	74 6e		 je	 SHORT $LN245@MainDialog

; 6672 : 					{
; 6673 : 						WaitCursor ();

  02171	e8 00 00 00 00	 call	 _WaitCursor

; 6674 : 
; 6675 : 						if (!KeyFilesApply (&volumePassword, FirstKeyFile))

  02176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _FirstKeyFile
  0217c	51		 push	 ecx
  0217d	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  02182	e8 00 00 00 00	 call	 _KeyFilesApply
  02187	83 c4 08	 add	 esp, 8
  0218a	85 c0		 test	 eax, eax

; 6676 : 						{
; 6677 : 							NormalCursor ();
; 6678 : 							return 1;

  0218c	0f 84 5c 22 00
	00		 je	 $LN426@MainDialog

; 6679 : 						}
; 6680 : 
; 6681 : 						NormalCursor ();

  02192	e8 00 00 00 00	 call	 _NormalCursor

; 6682 : 					}
; 6683 : 
; 6684 : 				}
; 6685 : 				else

  02197	eb 46		 jmp	 SHORT $LN245@MainDialog
$LN248@MainDialog:

; 6686 : 				{
; 6687 : 					KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  02199	68 04 01 00 00	 push	 260			; 00000104H
  0219e	53		 push	 ebx
  0219f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 6688 : 
; 6689 : 					if (bKeyboardLayoutChanged)

  021a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  021ac	74 2a		 je	 SHORT $LN242@MainDialog

; 6690 : 					{
; 6691 : 						// Restore the original keyboard layout
; 6692 : 						if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  021ae	6a 03		 push	 3
  021b0	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  021b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  021bb	85 c0		 test	 eax, eax
  021bd	75 0f		 jne	 SHORT $LN243@MainDialog

; 6693 : 							Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  021bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  021c4	e8 00 00 00 00	 call	 _Warning
  021c9	83 c4 04	 add	 esp, 4

; 6694 : 						else

  021cc	eb 0a		 jmp	 SHORT $LN242@MainDialog
$LN243@MainDialog:

; 6695 : 							bKeyboardLayoutChanged = FALSE;

  021ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
$LN242@MainDialog:

; 6696 : 					}
; 6697 : 
; 6698 : 					nNewPageNo = SYSENC_COLLECTING_RANDOM_DATA_PAGE - 1;	// Skip irrelevant pages

  021d8	c7 45 ec 16 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 22 ; 00000016H
$LN245@MainDialog:

; 6699 : 				}
; 6700 : 
; 6701 : 				if (bInPlaceEncNonSys)

  021df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  021e5	85 d2		 test	 edx, edx
  021e7	74 1f		 je	 SHORT $LN241@MainDialog

; 6702 : 				{
; 6703 : 					nNewPageNo = NONSYS_INPLACE_ENC_RAND_DATA_PAGE - 1;		// Skip irrelevant pages

  021e9	c7 45 ec 21 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 33 ; 00000021H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  021f0	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  021f3	40		 inc	 eax
  021f4	50		 push	 eax
  021f5	53		 push	 ebx
  021f6	e8 00 00 00 00	 call	 _LoadPage
  021fb	83 c4 08	 add	 esp, 8
  021fe	b8 01 00 00 00	 mov	 eax, 1
  02203	e9 a2 de ff ff	 jmp	 $LN512@MainDialog
$LN241@MainDialog:

; 6704 : 				}
; 6705 : 				else if (WizardMode != WIZARD_MODE_SYS_DEVICE
; 6706 : 					&& !FileSize4GBLimitQuestionNeeded () 
; 6707 : 					|| CreatingHiddenSysVol())		// If we're creating a hidden volume for a hidden OS, we don't need to format it with any filesystem (the entire OS will be copied to the hidden volume sector by sector).

  02208	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0220d	83 f8 02	 cmp	 eax, 2
  02210	74 09		 je	 SHORT $LN237@MainDialog
  02212	e8 00 00 00 00	 call	 ?FileSize4GBLimitQuestionNeeded@@YAHXZ ; FileSize4GBLimitQuestionNeeded
  02217	85 c0		 test	 eax, eax
  02219	74 0d		 je	 SHORT $LN238@MainDialog
$LN237@MainDialog:
  0221b	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  02220	85 c0		 test	 eax, eax
  02222	0f 84 3b 19 00
	00		 je	 $LN204@MainDialog
$LN238@MainDialog:

; 6708 : 				{
; 6709 : 					nNewPageNo = FORMAT_PAGE - 1;				// Skip irrelevant pages

  02228	c7 45 ec 25 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 37 ; 00000025H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0222f	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02232	40		 inc	 eax
  02233	50		 push	 eax
  02234	53		 push	 ebx
  02235	e8 00 00 00 00	 call	 _LoadPage
  0223a	83 c4 08	 add	 esp, 8
  0223d	b8 01 00 00 00	 mov	 eax, 1
  02242	e9 63 de ff ff	 jmp	 $LN512@MainDialog
$LN253@MainDialog:

; 6710 : 				}
; 6711 : 			}
; 6712 : 
; 6713 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 6714 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  02247	83 f8 14	 cmp	 eax, 20			; 00000014H
  0224a	0f 84 b8 13 00
	00		 je	 $LN234@MainDialog
  02250	83 f8 20	 cmp	 eax, 32			; 00000020H
  02253	0f 84 af 13 00
	00		 je	 $LN234@MainDialog

; 6903 : 				}
; 6904 : 
; 6905 : 			}
; 6906 : 
; 6907 : 			else if (nCurPageNo == FILESYS_PAGE)

  02259	83 f8 16	 cmp	 eax, 22			; 00000016H
  0225c	0f 85 bd 01 00
	00		 jne	 $LN188@MainDialog

; 6908 : 			{
; 6909 : 				if (!bHiddenVol && IsHiddenOSRunning() && Get2RadButtonPageAnswer() == 1)

  02262	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02268	85 c9		 test	 ecx, ecx
  0226a	0f 85 6f 01 00
	00		 jne	 $LN187@MainDialog
  02270	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  02275	85 c0		 test	 eax, eax
  02277	0f 84 62 01 00
	00		 je	 $LN187@MainDialog
  0227d	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  02282	83 f8 01	 cmp	 eax, 1
  02285	0f 85 54 01 00
	00		 jne	 $LN187@MainDialog

; 6910 : 				{
; 6911 : 					// The user wants to store files larger than 4GB on the non-hidden volume about to be created and a hidden OS is running
; 6912 : 
; 6913 : 					WarningDirect ((wstring (GetString ("CANNOT_SATISFY_OVER_4G_FILE_SIZE_REQ"))
; 6914 : 						+ L" "
; 6915 : 						+ GetString ("CANNOT_CREATE_NON_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS")
; 6916 : 						+ L"\n\n"
; 6917 : 						+ GetString ("NOTE_BEGINNING")
; 6918 : 						+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 6919 : 						+ L" "
; 6920 : 						+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  0228b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@
  02290	e8 00 00 00 00	 call	 _GetString
  02295	83 c4 04	 add	 esp, 4
  02298	50		 push	 eax
  02299	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169124[ebp]
  0229f	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022a4	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  022a9	50		 push	 eax
  022aa	8d 95 78 fd ff
	ff		 lea	 edx, DWORD PTR $T169125[ebp]
  022b0	52		 push	 edx
  022b1	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 42 ; 0000002aH
  022b8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022bd	8b f0		 mov	 esi, eax
  022bf	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
  022c4	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+12], 43 ; 0000002bH
  022c8	e8 00 00 00 00	 call	 _GetString
  022cd	50		 push	 eax
  022ce	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T169126[ebp]
  022d4	56		 push	 esi
  022d5	50		 push	 eax
  022d6	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022db	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  022e0	50		 push	 eax
  022e1	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169127[ebp]
  022e7	51		 push	 ecx
  022e8	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+12], 44 ; 0000002cH
  022ec	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022f1	8b f0		 mov	 esi, eax
  022f3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  022f8	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+12], 45 ; 0000002dH
  022fc	e8 00 00 00 00	 call	 _GetString
  02301	50		 push	 eax
  02302	8d 95 5c fd ff
	ff		 lea	 edx, DWORD PTR $T169128[ebp]
  02308	56		 push	 esi
  02309	52		 push	 edx
  0230a	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0230f	8b f0		 mov	 esi, eax
  02311	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  02316	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+12], 46 ; 0000002eH
  0231a	e8 00 00 00 00	 call	 _GetString
  0231f	50		 push	 eax
  02320	8d 85 28 fc ff
	ff		 lea	 eax, DWORD PTR $T169129[ebp]
  02326	56		 push	 esi
  02327	50		 push	 eax
  02328	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0232d	83 c4 48	 add	 esp, 72			; 00000048H
  02330	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  02335	50		 push	 eax
  02336	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T169130[ebp]
  0233c	51		 push	 ecx
  0233d	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+12], 47 ; 0000002fH
  02341	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02346	8b f0		 mov	 esi, eax
  02348	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  0234d	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+12], 48 ; 00000030H
  02351	e8 00 00 00 00	 call	 _GetString
  02356	50		 push	 eax
  02357	8d 95 f4 fa ff
	ff		 lea	 edx, DWORD PTR $T169131[ebp]
  0235d	56		 push	 esi
  0235e	52		 push	 edx
  0235f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02364	83 c4 1c	 add	 esp, 28			; 0000001cH
  02367	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0236a	72 05		 jb	 SHORT $LN930@MainDialog
  0236c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0236f	eb 03		 jmp	 SHORT $LN931@MainDialog
$LN930@MainDialog:
  02371	83 c0 04	 add	 eax, 4
$LN931@MainDialog:
  02374	50		 push	 eax
  02375	e8 00 00 00 00	 call	 _WarningDirect
  0237a	83 c4 04	 add	 esp, 4
  0237d	8d 8d f4 fa ff
	ff		 lea	 ecx, DWORD PTR $T169131[ebp]
  02383	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02388	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T169130[ebp]
  0238e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02393	8d 8d 28 fc ff
	ff		 lea	 ecx, DWORD PTR $T169129[ebp]
  02399	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0239e	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T169128[ebp]
  023a4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023a9	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169127[ebp]
  023af	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023b4	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T169126[ebp]
  023ba	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023bf	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T169125[ebp]
  023c5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023ca	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169124[ebp]
  023d0	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023d5	b8 01 00 00 00	 mov	 eax, 1
  023da	e9 cb dc ff ff	 jmp	 $LN512@MainDialog
$LN187@MainDialog:

; 6921 : 
; 6922 : 					return 1;
; 6923 : 				}
; 6924 : 
; 6925 : 				if (nNeedToStoreFilesOver4GB != Get2RadButtonPageAnswer())

  023df	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  023e4	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  023ea	74 0a		 je	 SHORT $LN186@MainDialog

; 6926 : 					fileSystem = FILESYS_NONE;	// The user may have gone back and changed the answer, so default file system must be reselected

  023ec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem
$LN186@MainDialog:

; 6927 : 	
; 6928 : 				nNeedToStoreFilesOver4GB = Get2RadButtonPageAnswer();

  023f6	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  023fb	a3 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB

; 6929 : 
; 6930 : 				nNewPageNo = FORMAT_PAGE - 1;	// Skip irrelevant pages

  02400	c7 45 ec 25 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 37 ; 00000025H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02407	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0240a	40		 inc	 eax
  0240b	50		 push	 eax
  0240c	53		 push	 ebx
  0240d	e8 00 00 00 00	 call	 _LoadPage
  02412	83 c4 08	 add	 esp, 8
  02415	b8 01 00 00 00	 mov	 eax, 1
  0241a	e9 8b dc ff ff	 jmp	 $LN512@MainDialog
$LN188@MainDialog:

; 6931 : 			}
; 6932 : 
; 6933 : 			else if (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE
; 6934 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE)

  0241f	83 f8 17	 cmp	 eax, 23			; 00000017H
  02422	0f 84 15 11 00
	00		 je	 $LN183@MainDialog
  02428	83 f8 22	 cmp	 eax, 34			; 00000022H
  0242b	0f 84 0c 11 00
	00		 je	 $LN183@MainDialog

; 6963 : 			}
; 6964 : 
; 6965 : 			else if (nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  02431	83 f8 18	 cmp	 eax, 24			; 00000018H
  02434	75 58		 jne	 SHORT $LN179@MainDialog

; 6966 : 			{
; 6967 : 				char tmp[KEY_GUI_VIEW_SIZE+1];
; 6968 : 
; 6969 : 				// Attempt to wipe the GUI fields showing portions of the master and header keys
; 6970 : 				memset (tmp, 'X', sizeof(tmp));

  02436	6a 41		 push	 65			; 00000041H
  02438	8d 85 b8 c8 00
	00		 lea	 eax, DWORD PTR _tmp$134590[ebp]
  0243e	6a 58		 push	 88			; 00000058H
  02440	50		 push	 eax
  02441	e8 00 00 00 00	 call	 _memset

; 6971 : 				tmp [sizeof(tmp)-1] = 0;
; 6972 : 				SetWindowText (hMasterKey, tmp);

  02446	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  0244c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  02452	83 c4 0c	 add	 esp, 12			; 0000000cH
  02455	8d 8d b8 c8 00
	00		 lea	 ecx, DWORD PTR _tmp$134590[ebp]
  0245b	51		 push	 ecx
  0245c	52		 push	 edx
  0245d	c6 85 f8 c8 00
	00 00		 mov	 BYTE PTR _tmp$134590[ebp+64], 0
  02464	ff d6		 call	 esi

; 6973 : 				SetWindowText (hHeaderKey, tmp);

  02466	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  0246c	8d 85 b8 c8 00
	00		 lea	 eax, DWORD PTR _tmp$134590[ebp]
  02472	50		 push	 eax
  02473	51		 push	 ecx
  02474	ff d6		 call	 esi

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02476	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02479	40		 inc	 eax
  0247a	50		 push	 eax
  0247b	53		 push	 ebx
  0247c	e8 00 00 00 00	 call	 _LoadPage
  02481	83 c4 08	 add	 esp, 8
  02484	b8 01 00 00 00	 mov	 eax, 1
  02489	e9 1c dc ff ff	 jmp	 $LN512@MainDialog
$LN179@MainDialog:

; 6974 : 			}
; 6975 : 
; 6976 : 			else if (nCurPageNo == SYSENC_RESCUE_DISK_CREATION_PAGE)

  0248e	83 f8 19	 cmp	 eax, 25			; 00000019H
  02491	0f 85 e4 01 00
	00		 jne	 $LN177@MainDialog

; 6977 : 			{
; 6978 : 				/* Generate rescue disk for boot encryption */
; 6979 : 
; 6980 : 				GetWindowText (GetDlgItem (hCurPage, IDC_RESCUE_DISK_ISO_PATH), szRescueDiskISO, sizeof (szRescueDiskISO));

  02497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0249d	68 05 01 00 00	 push	 261			; 00000105H
  024a2	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  024a7	68 e9 03 00 00	 push	 1001			; 000003e9H
  024ac	52		 push	 edx
  024ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  024b3	50		 push	 eax
  024b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6981 : 
; 6982 : 				try
; 6983 : 				{

  024ba	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 52 ; 00000034H

; 6984 : 					WaitCursor();

  024c1	e8 00 00 00 00	 call	 _WaitCursor

; 6985 : 					BootEncObj->CreateRescueIsoImage (true, szRescueDiskISO);

  024c6	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  024cb	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169134[ebp]
  024d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  024d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  024dc	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T169134[ebp]
  024e2	50		 push	 eax
  024e3	6a 01		 push	 1
  024e5	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+12], 53 ; 00000035H
  024e9	e8 00 00 00 00	 call	 ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
  024ee	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169134[ebp]
  024f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6993 : 				}
; 6994 : 
; 6995 : retryCDDriveCheck:
; 6996 : 				if (!bDontVerifyRescueDisk && !BootEncObj->IsCDDrivePresent())

  024f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  02500	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02507	0f 85 27 01 00
	00		 jne	 $LN173@MainDialog
  0250d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@
  02512	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@
  02517	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$retryCDDriveCheck$134597:
  02520	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  02526	e8 00 00 00 00	 call	 ?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsCDDrivePresent
  0252b	84 c0		 test	 al, al
  0252d	0f 85 01 01 00
	00		 jne	 $LN173@MainDialog

; 6997 : 				{
; 6998 : 					char *multiChoiceStr[] = { 0, "CD_BURNER_NOT_PRESENT",

  02533	33 c0		 xor	 eax, eax

; 6999 : 						"CD_BURNER_NOT_PRESENT_WILL_STORE_ISO",
; 7000 : 						"CD_BURNER_NOT_PRESENT_WILL_CONNECT_LATER",
; 7001 : 						"CD_BURNER_NOT_PRESENT_CONNECTED_NOW",
; 7002 : 						0 };
; 7003 : 
; 7004 : 					switch (AskMultiChoice ((void **) multiChoiceStr, FALSE))

  02535	50		 push	 eax
  02536	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _multiChoiceStr$134599[ebp]
  0253c	51		 push	 ecx
  0253d	89 85 fc fe ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134599[ebp], eax
  02543	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _multiChoiceStr$134599[ebp+4], OFFSET ??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@
  0254d	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _multiChoiceStr$134599[ebp+8], OFFSET ??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@
  02557	89 bd 08 ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134599[ebp+12], edi
  0255d	89 b5 0c ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134599[ebp+16], esi
  02563	89 85 10 ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134599[ebp+20], eax
  02569	e8 00 00 00 00	 call	 _AskMultiChoice
  0256e	83 c4 08	 add	 esp, 8
  02571	83 e8 01	 sub	 eax, 1
  02574	74 26		 je	 SHORT $LN172@MainDialog
  02576	83 e8 01	 sub	 eax, 1
  02579	74 17		 je	 SHORT $LN171@MainDialog
  0257b	83 e8 01	 sub	 eax, 1
  0257e	0f 84 b0 00 00
	00		 je	 $LN173@MainDialog

; 6993 : 				}
; 6994 : 
; 6995 : retryCDDriveCheck:
; 6996 : 				if (!bDontVerifyRescueDisk && !BootEncObj->IsCDDrivePresent())

  02584	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  0258b	74 93		 je	 SHORT $retryCDDriveCheck$134597

; 6820 : 									{
; 6821 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  0258d	e9 a2 00 00 00	 jmp	 $LN173@MainDialog
$LN171@MainDialog:

; 7014 : 						break;
; 7015 : 
; 7016 : 					case 2:
; 7017 : 						AbortProcessSilent();

  02592	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7018 : 
; 7019 : 					case 3:
; 7020 : 						break;

  02597	e9 98 00 00 00	 jmp	 $LN173@MainDialog
$LN172@MainDialog:

; 7005 : 					{
; 7006 : 					case 1:
; 7007 : 						wchar_t msg[8192];
; 7008 : 						swprintf_s (msg, array_capacity (msg), GetString ("CD_BURNER_NOT_PRESENT_WILL_STORE_ISO_INFO"), SingleStringToWide (szRescueDiskISO).c_str());

  0259c	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  025a1	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169136[ebp]
  025a7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  025ac	8d 95 38 fe ff
	ff		 lea	 edx, DWORD PTR $T169136[ebp]
  025b2	52		 push	 edx
  025b3	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR $T169137[ebp]
  025b9	50		 push	 eax
  025ba	c7 45 fc 37 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 55 ; 00000037H
  025c1	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  025c6	83 c4 08	 add	 esp, 8
  025c9	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  025cd	72 05		 jb	 SHORT $LN936@MainDialog
  025cf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  025d2	eb 03		 jmp	 SHORT $LN937@MainDialog
$LN936@MainDialog:
  025d4	83 c0 04	 add	 eax, 4
$LN937@MainDialog:
  025d7	50		 push	 eax
  025d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@
  025dd	e8 00 00 00 00	 call	 _GetString
  025e2	83 c4 04	 add	 esp, 4
  025e5	50		 push	 eax
  025e6	8d 4d 00	 lea	 ecx, DWORD PTR _msg$134610[ebp]
  025e9	68 00 20 00 00	 push	 8192			; 00002000H
  025ee	51		 push	 ecx
  025ef	e8 00 00 00 00	 call	 _swprintf_s
  025f4	83 c4 10	 add	 esp, 16			; 00000010H
  025f7	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T169137[ebp]
  025fd	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02602	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169136[ebp]
  02608	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 7009 : 						WarningDirect (msg);

  0260d	8d 55 00	 lea	 edx, DWORD PTR _msg$134610[ebp]
  02610	52		 push	 edx
  02611	e8 00 00 00 00	 call	 _WarningDirect

; 7010 : 
; 7011 : 						Warning ("RESCUE_DISK_BURN_NO_CHECK_WARN");

  02616	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
  0261b	e8 00 00 00 00	 call	 _Warning
  02620	83 c4 08	 add	 esp, 8

; 7012 : 						bDontVerifyRescueDisk = TRUE;

  02623	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 1 ; bDontVerifyRescueDisk

; 7013 : 						nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;

  0262d	c7 45 ec 1b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 27 ; 0000001bH
$LN173@MainDialog:

; 7021 : 
; 7022 : 					default:
; 7023 : 						goto retryCDDriveCheck;
; 7024 : 					}
; 7025 : 				}
; 7026 : 
; 7027 : 				if (IsWindowsIsoBurnerAvailable() && !bDontVerifyRescueDisk)

  02634	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  02639	85 c0		 test	 eax, eax
  0263b	0f 84 1d 15 00
	00		 je	 $LN191@MainDialog
  02641	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  02648	0f 85 10 15 00
	00		 jne	 $LN191@MainDialog

; 7028 : 					Info ("RESCUE_DISK_WIN_ISOBURN_PRELAUNCH_NOTE");

  0264e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@
  02653	e8 00 00 00 00	 call	 _Info
  02658	83 c4 04	 add	 esp, 4

; 7029 : 
; 7030 : 				NormalCursor ();

  0265b	e9 fe 14 00 00	 jmp	 $LN191@MainDialog
__catch$_MainDialogProc@16$31:

; 6986 : 
; 6987 : 				}
; 6988 : 				catch (Exception &e)
; 6989 : 				{
; 6990 : 					e.Show (hwndDlg);

  02660	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134595[ebp]
  02666	8b 01		 mov	 eax, DWORD PTR [ecx]
  02668	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0266b	8b 00		 mov	 eax, DWORD PTR [eax]
  0266d	52		 push	 edx
  0266e	ff d0		 call	 eax

; 6991 : 					NormalCursor ();

  02670	e8 00 00 00 00	 call	 _NormalCursor

; 6992 : 					return 1;

  02675	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  0267a	c3		 ret	 0
$LN177@MainDialog:

; 7031 : 			}
; 7032 : 
; 7033 : 			else if (nCurPageNo == SYSENC_RESCUE_DISK_BURN_PAGE)

  0267b	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0267e	0f 85 c8 00 00
	00		 jne	 $LN166@MainDialog

; 7034 : 			{
; 7035 : 				if (!bDontVerifyRescueDisk)

  02684	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, ecx ; bDontVerifyRescueDisk
  0268a	0f 85 90 00 00
	00		 jne	 $LN165@MainDialog

; 7036 : 				{
; 7037 : 					/* Verify that the rescue disk has been written correctly */
; 7038 : 
; 7039 : 					try
; 7040 : 					{

  02690	c7 45 fc 38 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 56 ; 00000038H

; 7041 : 						WaitCursor();

  02697	e8 00 00 00 00	 call	 _WaitCursor

; 7042 : 						if (!BootEncObj->VerifyRescueDisk ())

  0269c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  026a2	e8 00 00 00 00	 call	 ?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::VerifyRescueDisk
  026a7	84 c0		 test	 al, al
  026a9	0f 85 af 14 00
	00		 jne	 $LN191@MainDialog

; 7043 : 						{
; 7044 : 							wchar_t szTmp[8000];
; 7045 : 
; 7046 : 							swprintf (szTmp, GetString ("RESCUE_DISK_CHECK_FAILED"), 
; 7047 : 								IsWindowsIsoBurnerAvailable () ? L"" : GetString ("RESCUE_DISK_CHECK_FAILED_SENTENCE_APPENDIX"));

  026af	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  026b4	85 c0		 test	 eax, eax
  026b6	74 07		 je	 SHORT $LN530@MainDialog
  026b8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  026bd	eb 0d		 jmp	 SHORT $LN531@MainDialog
$LN530@MainDialog:
  026bf	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@
  026c4	e8 00 00 00 00	 call	 _GetString
  026c9	83 c4 04	 add	 esp, 4
$LN531@MainDialog:
  026cc	50		 push	 eax
  026cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@
  026d2	e8 00 00 00 00	 call	 _GetString
  026d7	83 c4 04	 add	 esp, 4
  026da	50		 push	 eax
  026db	8d 8d 00 40 00
	00		 lea	 ecx, DWORD PTR _szTmp$134630[ebp]
  026e1	51		 push	 ecx
  026e2	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 7048 : 
; 7049 : 							ErrorDirect (szTmp);

  026e7	8d 95 00 40 00
	00		 lea	 edx, DWORD PTR _szTmp$134630[ebp]
  026ed	52		 push	 edx
  026ee	e8 00 00 00 00	 call	 _ErrorDirect
  026f3	83 c4 10	 add	 esp, 16			; 00000010H

; 7050 : 
; 7051 : 							NormalCursor ();

  026f6	e8 00 00 00 00	 call	 _NormalCursor
  026fb	b8 01 00 00 00	 mov	 eax, 1
  02700	e9 a5 d9 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$33:

; 7052 : #ifndef _DEBUG
; 7053 : 							return 1;
; 7054 : #endif
; 7055 : 						}
; 7056 : 					}
; 7057 : 					catch (Exception &e)
; 7058 : 					{
; 7059 : 						e.Show (hwndDlg);

  02705	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134633[ebp]
  0270b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0270d	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02710	8b 00		 mov	 eax, DWORD PTR [eax]
  02712	52		 push	 edx
  02713	ff d0		 call	 eax

; 7060 : 						NormalCursor ();

  02715	e8 00 00 00 00	 call	 _NormalCursor

; 7061 : 						return 1;

  0271a	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  0271f	c3		 ret	 0
$LN165@MainDialog:

; 7062 : 					}
; 7063 : 					NormalCursor ();
; 7064 : 				}
; 7065 : 				else
; 7066 : 				{
; 7067 : 					Warning ("RESCUE_DISK_BURN_NO_CHECK_WARN");

  02720	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
  02725	e8 00 00 00 00	 call	 _Warning

; 7068 : 					nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;		// Skip irrelevant pages

  0272a	c7 45 ec 1b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 27 ; 0000001bH

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02731	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02734	83 c4 04	 add	 esp, 4
  02737	40		 inc	 eax
  02738	50		 push	 eax
  02739	53		 push	 ebx
  0273a	e8 00 00 00 00	 call	 _LoadPage
  0273f	83 c4 08	 add	 esp, 8
  02742	b8 01 00 00 00	 mov	 eax, 1
  02747	e9 5e d9 ff ff	 jmp	 $LN512@MainDialog
$LN166@MainDialog:

; 7069 : 				}
; 7070 : 			}
; 7071 : 
; 7072 : 			else if (nCurPageNo == SYSENC_WIPE_MODE_PAGE
; 7073 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_WIPE_MODE_PAGE)

  0274c	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  0274f	0f 84 bf 0d 00
	00		 je	 $LN159@MainDialog
  02755	83 f8 23	 cmp	 eax, 35			; 00000023H
  02758	0f 84 b6 0d 00
	00		 je	 $LN159@MainDialog

; 7077 : 					return 1;
; 7078 : 			}
; 7079 : 
; 7080 : 			else if (nCurPageNo == SYSENC_PRETEST_INFO_PAGE)

  0275e	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  02761	0f 85 d2 01 00
	00		 jne	 $LN156@MainDialog

; 7081 : 			{
; 7082 : 				if (LocalizationActive
; 7083 : 					&& AskWarnYesNo ("PREBOOT_NOT_LOCALIZED") == IDNO)

  02767	39 0d 00 00 00
	00		 cmp	 DWORD PTR _LocalizationActive, ecx
  0276d	74 16		 je	 SHORT $LN155@MainDialog
  0276f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@
  02774	e8 00 00 00 00	 call	 _AskWarnYesNo
  02779	83 c4 04	 add	 esp, 4
  0277c	83 f8 07	 cmp	 eax, 7

; 7084 : 					return 1;

  0277f	0f 84 1b ee ff
	ff		 je	 $LN1221@MainDialog
$LN155@MainDialog:

; 7085 : 
; 7086 : 				bConfirmQuitSysEncPretest = TRUE;

  02785	89 35 00 00 00
	00		 mov	 DWORD PTR ?bConfirmQuitSysEncPretest@@3HC, esi ; bConfirmQuitSysEncPretest

; 7087 : 				
; 7088 : 				if (!bHiddenOS)	// This text is not tailored to hidden OS

  0278b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02791	85 c9		 test	 ecx, ecx
  02793	75 0a		 jne	 SHORT $LN154@MainDialog

; 7089 : 					TextInfoDialogBox (TC_TBXID_SYS_ENCRYPTION_PRETEST);

  02795	6a 01		 push	 1
  02797	e8 00 00 00 00	 call	 _TextInfoDialogBox
  0279c	83 c4 04	 add	 esp, 4
$LN154@MainDialog:

; 7090 : 
; 7091 : 				if (AskWarnYesNo ("CONFIRM_RESTART") == IDNO)

  0279f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  027a4	e8 00 00 00 00	 call	 _AskWarnYesNo
  027a9	83 c4 04	 add	 esp, 4
  027ac	83 f8 07	 cmp	 eax, 7

; 7092 : 					return 1;

  027af	0f 84 eb ed ff
	ff		 je	 $LN1221@MainDialog

; 7093 : 
; 7094 : 				/* Install the pre-boot authentication component and initiate the system encryption pretest.
; 7095 : 				   If we are creating a hidden OS, pretest is omitted and OS cloning will follow. */
; 7096 : 
; 7097 : 				try
; 7098 : 				{

  027b5	c7 45 fc 3a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 58 ; 0000003aH

; 7099 : 					WaitCursor();

  027bc	e8 00 00 00 00	 call	 _WaitCursor

; 7100 : 
; 7101 : #if 0
; 7102 : 					// Make sure the Rescue Disk is not in the drive
; 7103 : 					while (BootEncObj->VerifyRescueDisk ())
; 7104 : 					{
; 7105 : 						Error ("REMOVE_RESCUE_DISK_FROM_DRIVE");
; 7106 : 					}
; 7107 : #endif
; 7108 : 
; 7109 : 					BootEncObj->Install (bHiddenOS ? true : false);

  027c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  027c7	85 d2		 test	 edx, edx
  027c9	0f 95 c0	 setne	 al
  027cc	0f b6 c8	 movzx	 ecx, al
  027cf	51		 push	 ecx
  027d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  027d6	e8 00 00 00 00	 call	 ?Install@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Install

; 7117 : 				}
; 7118 : 
; 7119 : 
; 7120 : 				/* Add the main CipherShed app to the system startup sequence (the CipherShed Background Task), which
; 7121 : 				we need e.g. for notifications about prevented hibernation, about hidden OS leak protection, about 
; 7122 : 				inconsistent hidden OS installs (CipherShed upgraded in the decoy system but not in the hidden one), etc.
; 7123 : 				Note that this must be done before calling ChangeSystemEncryptionStatus(), which broadcasts the change,
; 7124 : 				so that the main app (if it's running with different cached settings) will not overwrite our new
; 7125 : 				settings when it exits. */
; 7126 : 				bStartOnLogon = TRUE;

  027db	bf 01 00 00 00	 mov	 edi, 1

; 7127 : 				SaveSettings (NULL);

  027e0	33 f6		 xor	 esi, esi
  027e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 7117 : 				}
; 7118 : 
; 7119 : 
; 7120 : 				/* Add the main CipherShed app to the system startup sequence (the CipherShed Background Task), which
; 7121 : 				we need e.g. for notifications about prevented hibernation, about hidden OS leak protection, about 
; 7122 : 				inconsistent hidden OS installs (CipherShed upgraded in the decoy system but not in the hidden one), etc.
; 7123 : 				Note that this must be done before calling ChangeSystemEncryptionStatus(), which broadcasts the change,
; 7124 : 				so that the main app (if it's running with different cached settings) will not overwrite our new
; 7125 : 				settings when it exits. */
; 7126 : 				bStartOnLogon = TRUE;

  027e9	89 3d 00 00 00
	00		 mov	 DWORD PTR _bStartOnLogon, edi

; 7127 : 				SaveSettings (NULL);

  027ef	e8 00 00 00 00	 call	 _SaveSettings

; 7128 : 				ManageStartupSeq ();

  027f4	e8 00 00 00 00	 call	 _ManageStartupSeq

; 7129 : 
; 7130 : 
; 7131 : 				if (bHiddenOS)

  027f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  027ff	85 d2		 test	 edx, edx
  02801	74 64		 je	 SHORT $LN151@MainDialog

; 7132 : 				{
; 7133 : 					/* When we are going to create a hidden OS, the system encryption status is set
; 7134 : 					to SYSENC_STATUS_PRETEST (not to any special hidden-OS status), in case the XML 
; 7135 : 					configuration file and its properties somehow leaks somewhere outside the system
; 7136 : 					partition (which will be wiped later on) indicating that a hidden OS has been created
; 7137 : 					on the computer. Instead, we update our raw config flags in the master boot record
; 7138 : 					(which is also altered when our boot loader is installed). */
; 7139 : 
; 7140 : 					if (!ChangeSystemEncryptionStatus (SYSENC_STATUS_PRETEST)
; 7141 : 						|| !ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_CLONING))

  02803	e8 00 00 00 00	 call	 _CreateSysEncMutex
  02808	85 c0		 test	 eax, eax
  0280a	75 0f		 jne	 SHORT $LN942@MainDialog
  0280c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02811	e8 00 00 00 00	 call	 _Error
  02816	83 c4 04	 add	 esp, 4
  02819	eb 2c		 jmp	 SHORT $LN149@MainDialog
$LN942@MainDialog:
  0281b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  02820	c7 05 00 00 00
	00 c8 00 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  0282a	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSystemEncryptionStatusChanged, edi
  02830	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  02835	85 c0		 test	 eax, eax
  02837	74 0e		 je	 SHORT $LN149@MainDialog
  02839	6a 40		 push	 64			; 00000040H
  0283b	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  02840	83 c4 04	 add	 esp, 4
  02843	85 c0		 test	 eax, eax
  02845	75 6f		 jne	 SHORT $LN147@MainDialog
$LN149@MainDialog:

; 7142 : 					{
; 7143 : 						ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  02847	33 f6		 xor	 esi, esi
  02849	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 7144 : 						Error ("CANNOT_INITIATE_HIDDEN_OS_CREATION");

  0284e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
  02853	e8 00 00 00 00	 call	 _Error
  02858	83 c4 04	 add	 esp, 4

; 7145 : 						NormalCursor ();

  0285b	e8 00 00 00 00	 call	 _NormalCursor

; 7146 : 						return 1;

  02860	8b c7		 mov	 eax, edi
  02862	e9 43 d8 ff ff	 jmp	 $LN512@MainDialog
$LN151@MainDialog:

; 7147 : 					}
; 7148 : 				}
; 7149 : 				else if (!ChangeSystemEncryptionStatus (SYSENC_STATUS_PRETEST))

  02867	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0286c	85 c0		 test	 eax, eax
  0286e	75 0f		 jne	 SHORT $LN949@MainDialog
  02870	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02875	e8 00 00 00 00	 call	 _Error
  0287a	83 c4 04	 add	 esp, 4
  0287d	eb 1e		 jmp	 SHORT $LN1102@MainDialog
$LN949@MainDialog:
  0287f	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  02884	c7 05 00 00 00
	00 c8 00 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  0288e	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSystemEncryptionStatusChanged, edi
  02894	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  02899	85 c0		 test	 eax, eax
  0289b	75 19		 jne	 SHORT $LN147@MainDialog
$LN1102@MainDialog:

; 7150 : 				{
; 7151 : 					Error ("CANNOT_INITIATE_SYS_ENCRYPTION_PRETEST");

  0289d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
  028a2	e8 00 00 00 00	 call	 _Error
  028a7	83 c4 04	 add	 esp, 4

; 7152 : 					NormalCursor ();

  028aa	e8 00 00 00 00	 call	 _NormalCursor

; 7153 : 					return 1;

  028af	8b c7		 mov	 eax, edi
  028b1	e9 f4 d7 ff ff	 jmp	 $LN512@MainDialog
$LN147@MainDialog:

; 7154 : 				}
; 7155 : 
; 7156 : 				// Add the wizard to the system startup sequence
; 7157 : 				ManageStartupSeqWiz (FALSE, "/acsysenc");

  028b6	68 00 00 00 00	 push	 OFFSET ??_C@_09PIOBCILE@?1acsysenc?$AA@
  028bb	6a 00		 push	 0
  028bd	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 7158 : 
; 7159 : 				EndMainDlg (MainDlg);

  028c2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  028c8	83 c4 08	 add	 esp, 8
  028cb	e8 00 00 00 00	 call	 _EndMainDlg

; 7160 : 
; 7161 : 				try
; 7162 : 				{
; 7163 : 					BootEncObj->RestartComputer ();

  028d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  028d6	c7 45 fc 3c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 60 ; 0000003cH
  028dd	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$ovf_end_4$134758:
  028e2	b8 01 00 00 00	 mov	 eax, 1
  028e7	e9 be d7 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$37:

; 7164 : 				}
; 7165 : 				catch (Exception &e)
; 7166 : 				{
; 7167 : 					e.Show (hwndDlg);

  028ec	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134659[ebp]
  028f2	8b 01		 mov	 eax, DWORD PTR [ecx]
  028f4	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  028f7	8b 00		 mov	 eax, DWORD PTR [eax]
  028f9	52		 push	 edx
  028fa	ff d0		 call	 eax

; 7168 : 				}

  028fc	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  02901	c3		 ret	 0
__catch$_MainDialogProc@16$35:
  02902	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134648[ebp]
  02908	8b 11		 mov	 edx, DWORD PTR [ecx]
  0290a	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0290d	8b 12		 mov	 edx, DWORD PTR [edx]
  0290f	50		 push	 eax
  02910	ff d2		 call	 edx
  02912	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02917	85 c0		 test	 eax, eax
  02919	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
  0291e	75 05		 jne	 SHORT $LN533@MainDialog

; 7110 : 				}
; 7111 : 				catch (Exception &e)
; 7112 : 				{
; 7113 : 					e.Show (hwndDlg);
; 7114 : 					Error (bHiddenOS ? "CANNOT_INITIATE_HIDDEN_OS_CREATION" : "CANNOT_INITIATE_SYS_ENCRYPTION_PRETEST");

  02920	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
$LN533@MainDialog:
  02925	50		 push	 eax
  02926	e8 00 00 00 00	 call	 _Error
  0292b	83 c4 04	 add	 esp, 4

; 7115 : 					NormalCursor ();

  0292e	e8 00 00 00 00	 call	 _NormalCursor

; 7116 : 					return 1;

  02933	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  02938	c3		 ret	 0
$LN156@MainDialog:

; 7169 : 
; 7170 : 				return 1;
; 7171 : 			}
; 7172 : 
; 7173 : 			else if (nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)

  02939	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0293c	75 2c		 jne	 SHORT $LN144@MainDialog

; 7174 : 			{
; 7175 : 				TextInfoDialogBox (TC_TBXID_SYS_ENC_RESCUE_DISK);

  0293e	6a 02		 push	 2
  02940	e8 00 00 00 00	 call	 _TextInfoDialogBox
  02945	83 c4 04	 add	 esp, 4

; 7176 : 
; 7177 : 				// Begin the actual encryption process
; 7178 : 
; 7179 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  02948	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  0294d	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02952	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02955	40		 inc	 eax
  02956	50		 push	 eax
  02957	53		 push	 ebx
  02958	e8 00 00 00 00	 call	 _LoadPage
  0295d	83 c4 08	 add	 esp, 8
  02960	b8 01 00 00 00	 mov	 eax, 1
  02965	e9 40 d7 ff ff	 jmp	 $LN512@MainDialog
$LN144@MainDialog:

; 7180 : 			}
; 7181 : 
; 7182 : 			else if (nCurPageNo == SYSENC_ENCRYPTION_PAGE
; 7183 : 				&& CreateSysEncMutex ())

  0296a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0296d	75 47		 jne	 SHORT $LN142@MainDialog
  0296f	e8 00 00 00 00	 call	 _CreateSysEncMutex
  02974	85 c0		 test	 eax, eax
  02976	74 39		 je	 SHORT $LN1181@MainDialog

; 7184 : 			{
; 7185 : 				// The 'Next' button functions as Finish or Resume
; 7186 : 
; 7187 : 				if (SystemEncryptionStatus != SYSENC_STATUS_NONE)

  02978	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SystemEncryptionStatus, 0
  0297f	0f 84 00 e6 ff
	ff		 je	 $LN141@MainDialog

; 7188 : 				{
; 7189 : 					try
; 7190 : 					{

  02985	c7 45 fc 3e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 62 ; 0000003eH

; 7191 : 						// Resume
; 7192 : 						SysEncResume ();

  0298c	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
$LN671@MainDialog:

; 5885 : 		}
; 5886 : 		return 1;

  02991	b8 01 00 00 00	 mov	 eax, 1
  02996	e9 0f d7 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$39:

; 7193 : 					}
; 7194 : 					catch (Exception &e)
; 7195 : 					{
; 7196 : 						e.Show (hwndDlg);

  0299b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134666[ebp]
  029a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  029a3	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  029a6	8b 12		 mov	 edx, DWORD PTR [edx]
  029a8	50		 push	 eax
  029a9	ff d2		 call	 edx

; 7197 : 					}

  029ab	b8 00 00 00 00	 mov	 eax, $LN671@MainDialog
  029b0	c3		 ret	 0
$LN1181@MainDialog:

; 7198 : 				}
; 7199 : 				else
; 7200 : 				{
; 7201 : 					// Finish
; 7202 : 					PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);
; 7203 : 				}
; 7204 : 
; 7205 : 				return 1;

  029b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN142@MainDialog:

; 7206 : 			}
; 7207 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE)

  029b6	83 f8 21	 cmp	 eax, 33			; 00000021H
  029b9	75 1f		 jne	 SHORT $LN137@MainDialog

; 7208 : 			{
; 7209 : 				nNewPageNo = NONSYS_INPLACE_ENC_ENCRYPTION_PAGE - 1;	// Skip irrelevant pages

  029bb	c7 45 ec 23 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 35 ; 00000023H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  029c2	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  029c5	40		 inc	 eax
  029c6	50		 push	 eax
  029c7	53		 push	 ebx
  029c8	e8 00 00 00 00	 call	 _LoadPage
  029cd	83 c4 08	 add	 esp, 8
  029d0	b8 01 00 00 00	 mov	 eax, 1
  029d5	e9 d0 d6 ff ff	 jmp	 $LN512@MainDialog
$LN137@MainDialog:

; 7210 : 			}
; 7211 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_PAGE)

  029da	83 f8 24	 cmp	 eax, 36			; 00000024H
  029dd	75 0c		 jne	 SHORT $LN135@MainDialog

; 7212 : 			{
; 7213 : 				/* In-place encryption start  (the 'Next' button has been clicked) */
; 7214 : 
; 7215 : 				NonSysInplaceEncResume ();

  029df	e8 00 00 00 00	 call	 _NonSysInplaceEncResume
  029e4	8b c6		 mov	 eax, esi
  029e6	e9 bf d6 ff ff	 jmp	 $LN512@MainDialog
$LN135@MainDialog:

; 7216 : 				return 1;
; 7217 : 			}
; 7218 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE)

  029eb	83 f8 25	 cmp	 eax, 37			; 00000025H
  029ee	75 17		 jne	 SHORT $LN133@MainDialog

; 7219 : 			{
; 7220 : 				PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  029f0	6a 00		 push	 0
  029f2	6a 00		 push	 0
  029f4	68 2f 81 00 00	 push	 33071			; 0000812fH
  029f9	53		 push	 ebx
  029fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  02a00	8b c6		 mov	 eax, esi
  02a02	e9 a3 d6 ff ff	 jmp	 $LN512@MainDialog
$LN133@MainDialog:

; 7221 : 				return 1;
; 7222 : 			}
; 7223 : 			else if (nCurPageNo == FORMAT_PAGE)

  02a07	83 f8 26	 cmp	 eax, 38			; 00000026H
  02a0a	0f 85 07 06 00
	00		 jne	 $LN131@MainDialog

; 7224 : 			{
; 7225 : 				/* Format start  (the 'Next' button has been clicked on the Format page) */
; 7226 : 
; 7227 : 				if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  02a10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  02a15	85 c0		 test	 eax, eax
  02a17	0f 85 83 eb ff
	ff		 jne	 $LN1221@MainDialog
  02a1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  02a23	85 c9		 test	 ecx, ecx
  02a25	0f 85 75 eb ff
	ff		 jne	 $LN1221@MainDialog

; 7228 : 					return 1;
; 7229 : 				
; 7230 : 				bVolTransformThreadCancel = FALSE;
; 7231 : 
; 7232 : 				bVolTransformThreadToRun = TRUE;
; 7233 : 
; 7234 : 				fileSystem = SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETITEMDATA,
; 7235 : 					SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETCURSEL, 0, 0) , 0);

  02a2b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02a31	51		 push	 ecx
  02a32	51		 push	 ecx
  02a33	51		 push	 ecx
  02a34	68 47 01 00 00	 push	 327			; 00000147H
  02a39	89 0d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ecx
  02a3f	89 35 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, esi ; bVolTransformThreadToRun
  02a45	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02a4b	68 05 04 00 00	 push	 1029			; 00000405H
  02a50	52		 push	 edx
  02a51	ff d6		 call	 esi
  02a53	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  02a59	50		 push	 eax
  02a5a	ff d7		 call	 edi
  02a5c	50		 push	 eax
  02a5d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02a62	68 50 01 00 00	 push	 336			; 00000150H
  02a67	68 05 04 00 00	 push	 1029			; 00000405H
  02a6c	50		 push	 eax
  02a6d	ff d6		 call	 esi
  02a6f	50		 push	 eax
  02a70	ff d7		 call	 edi

; 7236 : 
; 7237 : 				clusterSize = SendMessage (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), CB_GETITEMDATA,
; 7238 : 					SendMessage (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), CB_GETCURSEL, 0, 0) , 0);

  02a72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02a78	6a 00		 push	 0
  02a7a	6a 00		 push	 0
  02a7c	6a 00		 push	 0
  02a7e	68 47 01 00 00	 push	 327			; 00000147H
  02a83	68 04 04 00 00	 push	 1028			; 00000404H
  02a88	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem
  02a8d	51		 push	 ecx
  02a8e	ff d6		 call	 esi
  02a90	50		 push	 eax
  02a91	ff d7		 call	 edi
  02a93	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02a99	50		 push	 eax
  02a9a	68 50 01 00 00	 push	 336			; 00000150H
  02a9f	68 04 04 00 00	 push	 1028			; 00000404H
  02aa4	52		 push	 edx
  02aa5	ff d6		 call	 esi
  02aa7	50		 push	 eax
  02aa8	ff d7		 call	 edi
  02aaa	a3 00 00 00 00	 mov	 DWORD PTR ?clusterSize@@3HC, eax ; clusterSize

; 7239 : 
; 7240 : 				quickFormat = IsButtonChecked (GetDlgItem (hCurPage, IDC_QUICKFORMAT));

  02aaf	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02ab4	68 ff 03 00 00	 push	 1023			; 000003ffH
  02ab9	50		 push	 eax
  02aba	ff d6		 call	 esi
  02abc	50		 push	 eax
  02abd	e8 00 00 00 00	 call	 _IsButtonChecked
  02ac2	a3 00 00 00 00	 mov	 DWORD PTR ?quickFormat@@3HC, eax ; quickFormat

; 7241 : 
; 7242 : 
; 7243 : 				if (!bHiddenVol && IsHiddenOSRunning())

  02ac7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02acd	83 c4 04	 add	 esp, 4
  02ad0	85 c9		 test	 ecx, ecx
  02ad2	0f 85 9d 01 00
	00		 jne	 $LN125@MainDialog
  02ad8	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  02add	85 c0		 test	 eax, eax
  02adf	0f 84 90 01 00
	00		 je	 $LN125@MainDialog

; 7244 : 				{
; 7245 : 					// Creating a non-hidden volume under a hidden OS
; 7246 : 
; 7247 : 					if (fileSystem == FILESYS_NTFS)	

  02ae5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02aeb	83 fa 02	 cmp	 edx, 2
  02aee	0f 85 81 01 00
	00		 jne	 $LN125@MainDialog

; 7248 : 					{
; 7249 : 						WarningDirect ((wstring (GetString ("CANNOT_CREATE_NON_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS"))
; 7250 : 							+ L"\n\n"
; 7251 : 							+ GetString ("NOTE_BEGINNING")
; 7252 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 7253 : 							+ L" "
; 7254 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  02af4	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
  02af9	e8 00 00 00 00	 call	 _GetString
  02afe	83 c4 04	 add	 esp, 4
  02b01	50		 push	 eax
  02b02	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169144[ebp]
  02b08	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b0d	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  02b12	50		 push	 eax
  02b13	8d 85 10 fb ff
	ff		 lea	 eax, DWORD PTR $T169145[ebp]
  02b19	50		 push	 eax
  02b1a	c7 45 fc 40 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 64 ; 00000040H
  02b21	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b26	8b f8		 mov	 edi, eax
  02b28	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  02b2d	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+12], 65 ; 00000041H
  02b31	e8 00 00 00 00	 call	 _GetString
  02b36	50		 push	 eax
  02b37	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169146[ebp]
  02b3d	57		 push	 edi
  02b3e	51		 push	 ecx
  02b3f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b44	8b f8		 mov	 edi, eax
  02b46	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  02b4b	c6 45 fc 42	 mov	 BYTE PTR __$EHRec$[ebp+12], 66 ; 00000042H
  02b4f	e8 00 00 00 00	 call	 _GetString
  02b54	50		 push	 eax
  02b55	8d 95 f0 fb ff
	ff		 lea	 edx, DWORD PTR $T169147[ebp]
  02b5b	57		 push	 edi
  02b5c	52		 push	 edx
  02b5d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b62	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  02b67	50		 push	 eax
  02b68	8d 85 08 fd ff
	ff		 lea	 eax, DWORD PTR $T169148[ebp]
  02b6e	50		 push	 eax
  02b6f	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+12], 67 ; 00000043H
  02b73	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b78	8b f8		 mov	 edi, eax
  02b7a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  02b7f	c6 45 fc 44	 mov	 BYTE PTR __$EHRec$[ebp+12], 68 ; 00000044H
  02b83	e8 00 00 00 00	 call	 _GetString
  02b88	50		 push	 eax
  02b89	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T169149[ebp]
  02b8f	57		 push	 edi
  02b90	51		 push	 ecx
  02b91	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b96	83 c4 48	 add	 esp, 72			; 00000048H
  02b99	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  02b9d	72 05		 jb	 SHORT $LN956@MainDialog
  02b9f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02ba2	eb 03		 jmp	 SHORT $LN957@MainDialog
$LN956@MainDialog:
  02ba4	83 c0 04	 add	 eax, 4
$LN957@MainDialog:
  02ba7	50		 push	 eax
  02ba8	e8 00 00 00 00	 call	 _WarningDirect
  02bad	83 c4 04	 add	 esp, 4
  02bb0	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T169149[ebp]
  02bb6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bbb	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T169148[ebp]
  02bc1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bc6	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T169147[ebp]
  02bcc	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bd1	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169146[ebp]
  02bd7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bdc	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T169145[ebp]
  02be2	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02be7	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169144[ebp]
  02bed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02bf4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 7255 : 
; 7256 : 						if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7257 : 							&& AskYesNo("OFFER_FAT_FORMAT_ALTERNATIVE") == IDYES)

  02bf9	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02bff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02c04	52		 push	 edx
  02c05	50		 push	 eax
  02c06	6a 00		 push	 0
  02c08	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02c0d	83 c4 0c	 add	 esp, 12			; 0000000cH
  02c10	89 45 d8	 mov	 DWORD PTR tv5753[ebp], eax
  02c13	8b fa		 mov	 edi, edx
  02c15	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02c1a	6a 01		 push	 1
  02c1c	99		 cdq
  02c1d	6a 00		 push	 0
  02c1f	52		 push	 edx
  02c20	50		 push	 eax
  02c21	e8 00 00 00 00	 call	 __allmul
  02c26	3b fa		 cmp	 edi, edx
  02c28	0f 87 8c 01 00
	00		 ja	 $LN126@MainDialog
  02c2e	72 09		 jb	 SHORT $LN1132@MainDialog
  02c30	39 45 d8	 cmp	 DWORD PTR tv5753[ebp], eax
  02c33	0f 87 81 01 00
	00		 ja	 $LN126@MainDialog
$LN1132@MainDialog:
  02c39	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
  02c3e	e8 00 00 00 00	 call	 _AskYesNo
  02c43	83 c4 04	 add	 esp, 4
  02c46	83 f8 06	 cmp	 eax, 6
  02c49	0f 85 6b 01 00
	00		 jne	 $LN126@MainDialog

; 7258 : 						{
; 7259 : 							fileSystem = FILESYS_FAT;
; 7260 : 							SelectAlgo (GetDlgItem (hCurPage, IDC_FILESYS), (int *) &fileSystem);

  02c4f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02c55	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  02c5a	68 05 04 00 00	 push	 1029			; 00000405H
  02c5f	51		 push	 ecx
  02c60	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 1 ; fileSystem
  02c6a	ff d6		 call	 esi
  02c6c	50		 push	 eax
  02c6d	e8 00 00 00 00	 call	 _SelectAlgo
  02c72	83 c4 08	 add	 esp, 8
$LN125@MainDialog:

; 7268 : 							return 1;
; 7269 : 						}
; 7270 : 					}
; 7271 : 				}
; 7272 : 
; 7273 : 				if (bHiddenVolHost)

  02c75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  02c7b	85 c9		 test	 ecx, ecx
  02c7d	0f 84 ec 01 00
	00		 je	 $LN123@MainDialog

; 7274 : 				{
; 7275 : 					hiddenVolHostDriveNo = -1;
; 7276 : 					nMaximumHiddenVolSize = 0;
; 7277 : 
; 7278 : 					if (fileSystem == FILESYS_NTFS)	

  02c83	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02c89	33 ff		 xor	 edi, edi
  02c8b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo
  02c95	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA, edi
  02c9b	89 3d 04 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4, edi
  02ca1	83 fa 02	 cmp	 edx, 2
  02ca4	0f 85 e0 01 00
	00		 jne	 $LN112@MainDialog

; 7279 : 					{
; 7280 : 						if (bHiddenOS
; 7281 : 							&& (double) nVolumeSize / GetSystemPartitionSize() < MIN_HIDDENOS_DECOY_PARTITION_SIZE_RATIO_NTFS)

  02caa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02caf	85 c0		 test	 eax, eax
  02cb1	0f 84 ce 00 00
	00		 je	 $LN119@MainDialog
  02cb7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  02cbd	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  02cc2	89 4d d8	 mov	 DWORD PTR tv5700[ebp], ecx
  02cc5	8b c8		 mov	 ecx, eax
  02cc7	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  02ccc	89 45 dc	 mov	 DWORD PTR tv5700[ebp+4], eax
  02ccf	df 6d d8	 fild	 QWORD PTR tv5700[ebp]
  02cd2	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  02cd8	89 4d dc	 mov	 DWORD PTR tv5697[ebp+4], ecx
  02cdb	89 7d d8	 mov	 DWORD PTR tv5697[ebp], edi
  02cde	df 6d d8	 fild	 QWORD PTR tv5697[ebp]
  02ce1	d9 e0		 fchs
  02ce3	de c1		 faddp	 ST(1), ST(0)
  02ce5	dd 5d e0	 fstp	 QWORD PTR tv5035[ebp]
  02ce8	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  02ced	89 45 d8	 mov	 DWORD PTR tv5683[ebp], eax
  02cf0	89 55 dc	 mov	 DWORD PTR tv5683[ebp+4], edx
  02cf3	df 6d d8	 fild	 QWORD PTR tv5683[ebp]
  02cf6	dc 7d e0	 fdivr	 QWORD PTR tv5035[ebp]
  02cf9	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@4000cccccccccccd
  02cff	df e0		 fnstsw	 ax
  02d01	f6 c4 05	 test	 ah, 5
  02d04	0f 8a 7b 00 00
	00		 jp	 $LN119@MainDialog

; 7282 : 						{
; 7283 : 							Error("OUTER_VOLUME_TOO_SMALL_FOR_HIDDEN_OS_NTFS");

  02d0a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@
  02d0f	e8 00 00 00 00	 call	 _Error

; 7284 : 
; 7285 : 							if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7286 : 								&& AskYesNo("OFFER_FAT_FORMAT_ALTERNATIVE") == IDYES)

  02d14	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02d1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02d1f	52		 push	 edx
  02d20	50		 push	 eax
  02d21	57		 push	 edi
  02d22	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02d27	83 c4 10	 add	 esp, 16			; 00000010H
  02d2a	89 45 d8	 mov	 DWORD PTR tv5649[ebp], eax
  02d2d	8b fa		 mov	 edi, edx
  02d2f	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02d34	6a 01		 push	 1
  02d36	99		 cdq
  02d37	6a 00		 push	 0
  02d39	52		 push	 edx
  02d3a	50		 push	 eax
  02d3b	e8 00 00 00 00	 call	 __allmul
  02d40	3b fa		 cmp	 edi, edx
  02d42	77 76		 ja	 SHORT $LN126@MainDialog
  02d44	72 05		 jb	 SHORT $LN1134@MainDialog
  02d46	39 45 d8	 cmp	 DWORD PTR tv5649[ebp], eax
  02d49	77 6f		 ja	 SHORT $LN126@MainDialog
$LN1134@MainDialog:
  02d4b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
  02d50	e8 00 00 00 00	 call	 _AskYesNo
  02d55	83 c4 04	 add	 esp, 4
  02d58	83 f8 06	 cmp	 eax, 6
  02d5b	75 5d		 jne	 SHORT $LN126@MainDialog

; 7287 : 							{
; 7288 : 								fileSystem = FILESYS_FAT;
; 7289 : 								SelectAlgo (GetDlgItem (hCurPage, IDC_FILESYS), (int *) &fileSystem);

  02d5d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02d63	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  02d68	68 05 04 00 00	 push	 1029			; 00000405H
  02d6d	51		 push	 ecx
  02d6e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 1 ; fileSystem
  02d78	ff d6		 call	 esi
  02d7a	50		 push	 eax
  02d7b	e8 00 00 00 00	 call	 _SelectAlgo
  02d80	83 c4 08	 add	 esp, 8

; 7290 : 							}
; 7291 : 							else

  02d83	33 ff		 xor	 edi, edi
$LN119@MainDialog:

; 7292 : 							{
; 7293 : 								if (GetVolumeDataAreaSize (FALSE, nVolumeSize) > TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())
; 7294 : 									Info ("FAT_NOT_AVAILABLE_FOR_SO_LARGE_VOLUME");
; 7295 : 
; 7296 : 								bVolTransformThreadToRun = FALSE;
; 7297 : 								return 1;
; 7298 : 							}
; 7299 : 						}
; 7300 : 
; 7301 : 						if (fileSystem == FILESYS_NTFS)	// The file system may have been changed in the previous block

  02d85	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02d8b	83 f9 02	 cmp	 ecx, 2
  02d8e	0f 85 f6 00 00
	00		 jne	 $LN112@MainDialog

; 7302 : 						{
; 7303 : 							if (nCurrentOS == WIN_2000)

  02d94	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  02d9b	75 74		 jne	 SHORT $LN116@MainDialog

; 7304 : 							{
; 7305 : 								Error("HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000");

  02d9d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  02da2	e8 00 00 00 00	 call	 _Error
  02da7	83 c4 04	 add	 esp, 4

; 7306 : 								bVolTransformThreadToRun = FALSE;

  02daa	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, edi ; bVolTransformThreadToRun
  02db0	b8 01 00 00 00	 mov	 eax, 1
  02db5	e9 f0 d2 ff ff	 jmp	 $LN512@MainDialog
$LN126@MainDialog:

; 7261 : 						}
; 7262 : 						else
; 7263 : 						{
; 7264 : 							if (GetVolumeDataAreaSize (FALSE, nVolumeSize) > TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  02dba	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02dc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02dc5	52		 push	 edx
  02dc6	50		 push	 eax
  02dc7	6a 00		 push	 0
  02dc9	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02dce	83 c4 0c	 add	 esp, 12			; 0000000cH
  02dd1	8b f2		 mov	 esi, edx
  02dd3	8b f8		 mov	 edi, eax
  02dd5	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02dda	6a 01		 push	 1
  02ddc	99		 cdq
  02ddd	6a 00		 push	 0
  02ddf	52		 push	 edx
  02de0	50		 push	 eax
  02de1	e8 00 00 00 00	 call	 __allmul
  02de6	3b f2		 cmp	 esi, edx
  02de8	72 13		 jb	 SHORT $LN124@MainDialog
  02dea	77 04		 ja	 SHORT $LN1133@MainDialog
  02dec	3b f8		 cmp	 edi, eax
  02dee	76 0d		 jbe	 SHORT $LN124@MainDialog
$LN1133@MainDialog:

; 7265 : 								Info ("FAT_NOT_AVAILABLE_FOR_SO_LARGE_VOLUME");

  02df0	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@
  02df5	e8 00 00 00 00	 call	 _Info
  02dfa	83 c4 04	 add	 esp, 4
$LN124@MainDialog:

; 7266 : 
; 7267 : 							bVolTransformThreadToRun = FALSE;

  02dfd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun
  02e07	b8 01 00 00 00	 mov	 eax, 1
  02e0c	e9 99 d2 ff ff	 jmp	 $LN512@MainDialog
$LN116@MainDialog:

; 7307 : 								return 1;
; 7308 : 							}
; 7309 : 							else if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7310 : 								&& AskYesNo("HIDDEN_VOL_HOST_NTFS_ASK") == IDNO)

  02e11	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02e17	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02e1c	52		 push	 edx
  02e1d	50		 push	 eax
  02e1e	6a 00		 push	 0
  02e20	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02e25	83 c4 0c	 add	 esp, 12			; 0000000cH
  02e28	89 45 d8	 mov	 DWORD PTR tv5571[ebp], eax
  02e2b	8b fa		 mov	 edi, edx
  02e2d	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02e32	6a 01		 push	 1
  02e34	99		 cdq
  02e35	6a 00		 push	 0
  02e37	52		 push	 edx
  02e38	50		 push	 eax
  02e39	e8 00 00 00 00	 call	 __allmul
  02e3e	3b fa		 cmp	 edi, edx
  02e40	77 48		 ja	 SHORT $LN112@MainDialog
  02e42	72 05		 jb	 SHORT $LN1136@MainDialog
  02e44	39 45 d8	 cmp	 DWORD PTR tv5571[ebp], eax
  02e47	77 41		 ja	 SHORT $LN112@MainDialog
$LN1136@MainDialog:
  02e49	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@
  02e4e	e8 00 00 00 00	 call	 _AskYesNo
  02e53	83 c4 04	 add	 esp, 4
  02e56	83 f8 07	 cmp	 eax, 7
  02e59	75 2f		 jne	 SHORT $LN112@MainDialog
  02e5b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun
  02e65	b8 01 00 00 00	 mov	 eax, 1
  02e6a	e9 3b d2 ff ff	 jmp	 $LN512@MainDialog
$LN123@MainDialog:

; 7311 : 							{
; 7312 : 								bVolTransformThreadToRun = FALSE;
; 7313 : 								return 1;
; 7314 : 							}
; 7315 : 						}
; 7316 : 					}
; 7317 : 				}
; 7318 : 				else if (bHiddenVol)

  02e6f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02e75	85 c9		 test	 ecx, ecx
  02e77	74 11		 je	 SHORT $LN112@MainDialog

; 7319 : 				{
; 7320 : 					// Hidden volume is always quick-formatted (if, however, the meaning of quickFormat is 
; 7321 : 					// whether to create a sparse file, it must be set to FALSE).
; 7322 : 					quickFormat = !bSparseFileSwitch;	

  02e79	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  02e7f	f7 da		 neg	 edx
  02e81	1b d2		 sbb	 edx, edx
  02e83	42		 inc	 edx
  02e84	89 15 00 00 00
	00		 mov	 DWORD PTR ?quickFormat@@3HC, edx ; quickFormat
$LN112@MainDialog:

; 7323 : 				}
; 7324 : 
; 7325 : 
; 7326 : 				if (fileSystem == FILESYS_FAT
; 7327 : 					&& nNeedToStoreFilesOver4GB == 1
; 7328 : 					&& AskWarnNoYes("CONFIRM_FAT_FOR_FILES_OVER_4GB") == IDNO)

  02e8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02e8f	83 f8 01	 cmp	 eax, 1
  02e92	75 1e		 jne	 SHORT $LN111@MainDialog
  02e94	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  02e9a	75 16		 jne	 SHORT $LN111@MainDialog
  02e9c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@
  02ea1	e8 00 00 00 00	 call	 _AskWarnNoYes
  02ea6	83 c4 04	 add	 esp, 4
  02ea9	83 f8 07	 cmp	 eax, 7

; 7329 : 				{
; 7330 : 					bVolTransformThreadToRun = FALSE;
; 7331 : 					return 1;

  02eac	0f 84 4b ff ff
	ff		 je	 $LN124@MainDialog
$LN111@MainDialog:

; 7332 : 				}
; 7333 : 
; 7334 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  02eb2	6a 00		 push	 0
  02eb4	68 11 04 00 00	 push	 1041			; 00000411H
  02eb9	53		 push	 ebx
  02eba	ff d6		 call	 esi
  02ebc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  02ec2	50		 push	 eax
  02ec3	ff d7		 call	 edi

; 7335 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);

  02ec5	6a 00		 push	 0
  02ec7	68 10 04 00 00	 push	 1040			; 00000410H
  02ecc	53		 push	 ebx
  02ecd	ff d6		 call	 esi
  02ecf	50		 push	 eax
  02ed0	ff d7		 call	 edi

; 7336 : 				EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  02ed2	6a 00		 push	 0
  02ed4	6a 09		 push	 9
  02ed6	53		 push	 ebx
  02ed7	ff d6		 call	 esi
  02ed9	50		 push	 eax
  02eda	ff d7		 call	 edi

; 7337 : 				EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  02edc	6a 00		 push	 0
  02ede	6a 02		 push	 2
  02ee0	53		 push	 ebx
  02ee1	ff d6		 call	 esi
  02ee3	50		 push	 eax
  02ee4	ff d7		 call	 edi

; 7338 : 				EnableWindow (GetDlgItem (hCurPage, IDC_QUICKFORMAT), FALSE);

  02ee6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02eec	6a 00		 push	 0
  02eee	68 ff 03 00 00	 push	 1023			; 000003ffH
  02ef3	51		 push	 ecx
  02ef4	ff d6		 call	 esi
  02ef6	50		 push	 eax
  02ef7	ff d7		 call	 edi

; 7339 : 				EnableWindow (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), FALSE);

  02ef9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02eff	6a 00		 push	 0
  02f01	68 04 04 00 00	 push	 1028			; 00000404H
  02f06	52		 push	 edx
  02f07	ff d6		 call	 esi
  02f09	50		 push	 eax
  02f0a	ff d7		 call	 edi

; 7340 : 				EnableWindow (GetDlgItem (hCurPage, IDC_FILESYS), FALSE);

  02f0c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02f11	6a 00		 push	 0
  02f13	68 05 04 00 00	 push	 1029			; 00000405H
  02f18	50		 push	 eax
  02f19	ff d6		 call	 esi
  02f1b	50		 push	 eax
  02f1c	ff d7		 call	 edi

; 7341 : 				EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  02f1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02f24	6a 01		 push	 1
  02f26	68 f8 03 00 00	 push	 1016			; 000003f8H
  02f2b	51		 push	 ecx
  02f2c	ff d6		 call	 esi
  02f2e	50		 push	 eax
  02f2f	ff d7		 call	 edi

; 7342 : 				SetFocus (GetDlgItem (hCurPage, IDC_ABORT_BUTTON));

  02f31	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02f37	68 f8 03 00 00	 push	 1016			; 000003f8H
  02f3c	52		 push	 edx
  02f3d	ff d6		 call	 esi
  02f3f	50		 push	 eax
  02f40	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 7343 : 
; 7344 : 				// Increase cluster size if it's too small for this volume size (causes size of
; 7345 : 				// free space to be 0). Note that the below constant 0x2000000 is based on
; 7346 : 				// results of tests performed under Windows XP.
; 7347 : 				if (fileSystem == FILESYS_FAT && clusterSize > 0)

  02f46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02f4b	83 f8 01	 cmp	 eax, 1
  02f4e	0f 85 94 00 00
	00		 jne	 $LN107@MainDialog
  02f54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02f5a	85 c9		 test	 ecx, ecx
  02f5c	0f 8e 86 00 00
	00		 jle	 $LN107@MainDialog

; 7348 : 				{
; 7349 : 					BOOL fixed = FALSE;
; 7350 : 					while (clusterSize < 128 
; 7351 : 						&& nVolumeSize / (clusterSize * GetFormatSectorSize()) > 0x2000000)

  02f62	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02f68	33 f6		 xor	 esi, esi
  02f6a	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  02f70	0f 8d 72 00 00
	00		 jge	 $LN107@MainDialog
$LL109@MainDialog:
  02f76	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02f7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02f81	0f af c1	 imul	 eax, ecx
  02f84	99		 cdq
  02f85	52		 push	 edx
  02f86	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02f8c	50		 push	 eax
  02f8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02f92	52		 push	 edx
  02f93	50		 push	 eax
  02f94	e8 00 00 00 00	 call	 __aulldiv
  02f99	85 d2		 test	 edx, edx
  02f9b	77 07		 ja	 SHORT $LN1137@MainDialog
  02f9d	3d 00 00 00 02	 cmp	 eax, 33554432		; 02000000H
  02fa2	76 23		 jbe	 SHORT $LN108@MainDialog
$LN1137@MainDialog:

; 7352 : 					{
; 7353 : 						clusterSize *= 2;

  02fa4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02faa	03 c9		 add	 ecx, ecx
  02fac	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clusterSize@@3HC, ecx ; clusterSize
  02fb2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02fb8	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H

; 7354 : 						fixed = TRUE;

  02fbe	be 01 00 00 00	 mov	 esi, 1
  02fc3	7c b1		 jl	 SHORT $LL109@MainDialog

; 7355 : 					}
; 7356 : 					if (fixed)

  02fc5	eb 04		 jmp	 SHORT $LN1103@MainDialog
$LN108@MainDialog:
  02fc7	85 f6		 test	 esi, esi
  02fc9	74 1d		 je	 SHORT $LN107@MainDialog
$LN1103@MainDialog:

; 7357 : 						MessageBoxW (hwndDlg, GetString ("CLUSTER_TOO_SMALL"), lpszTitle, MB_ICONWARNING);

  02fcb	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  02fd0	6a 30		 push	 48			; 00000030H
  02fd2	50		 push	 eax
  02fd3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@
  02fd8	e8 00 00 00 00	 call	 _GetString
  02fdd	83 c4 04	 add	 esp, 4
  02fe0	50		 push	 eax
  02fe1	53		 push	 ebx
  02fe2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN107@MainDialog:

; 7358 : 				}
; 7359 : 
; 7360 : 				LastDialogId = "FORMAT_IN_PROGRESS";

  02fe8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@

; 7361 : 				ArrowWaitCursor ();

  02ff2	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 7362 : 				_beginthread (volTransformThreadFunction, 0, MainDlg);

  02ff7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  02ffd	51		 push	 ecx
  02ffe	6a 00		 push	 0
  03000	68 00 00 00 00	 push	 OFFSET _volTransformThreadFunction
  03005	e8 00 00 00 00	 call	 __beginthread
  0300a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0300d	b8 01 00 00 00	 mov	 eax, 1
  03012	e9 93 d0 ff ff	 jmp	 $LN512@MainDialog
$LN131@MainDialog:

; 7363 : 
; 7364 : 				return 1;
; 7365 : 			}
; 7366 : 
; 7367 : 			else if (nCurPageNo == FORMAT_FINISHED_PAGE)

  03017	83 f8 27	 cmp	 eax, 39			; 00000027H
  0301a	0f 85 ab 04 00
	00		 jne	 $LN105@MainDialog

; 7368 : 			{
; 7369 : 				if (!bHiddenVol || bHiddenVolFinished)

  03020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03026	85 d2		 test	 edx, edx
  03028	0f 84 59 02 00
	00		 je	 $LN103@MainDialog
  0302e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  03033	85 c0		 test	 eax, eax
  03035	0f 85 4c 02 00
	00		 jne	 $LN103@MainDialog

; 7403 : 
; 7404 : 					return 1;
; 7405 : 				}
; 7406 : 				else
; 7407 : 				{
; 7408 : 					/* We're going to scan the bitmap of the hidden volume host (in the non-Direct hidden volume wizard mode) */
; 7409 : 					int retCode;
; 7410 : 					WaitCursor ();

  0303b	e8 00 00 00 00	 call	 _WaitCursor

; 7411 : 
; 7412 : 					if (hiddenVolHostDriveNo != -1)		// If the hidden volume host is mounted

  03040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03045	83 cf ff	 or	 edi, -1
  03048	3b c7		 cmp	 eax, edi
  0304a	74 67		 je	 SHORT $LN1184@MainDialog

; 7413 : 					{
; 7414 : 						BOOL tmp_result;
; 7415 : 
; 7416 : 						// Dismount the hidden volume host (in order to remount it as read-only subsequently)
; 7417 : 						CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  0304c	50		 push	 eax
  0304d	53		 push	 ebx
  0304e	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 7418 : 						while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  03053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03059	6a 01		 push	 1
  0305b	51		 push	 ecx
  0305c	53		 push	 ebx
  0305d	e8 00 00 00 00	 call	 _UnmountVolume
  03062	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  03068	83 c4 14	 add	 esp, 20			; 00000014H
  0306b	85 c0		 test	 eax, eax
  0306d	75 3c		 jne	 SHORT $LN1097@MainDialog
  0306f	90		 npad	 1
$LL96@MainDialog:

; 7419 : 						{
; 7420 : 							if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL | MB_ICONERROR | MB_SETFOREGROUND) != IDRETRY)

  03070	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  03076	68 15 00 01 00	 push	 65557			; 00010015H
  0307b	52		 push	 edx
  0307c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  03081	e8 00 00 00 00	 call	 _GetString
  03086	83 c4 04	 add	 esp, 4
  03089	50		 push	 eax
  0308a	53		 push	 ebx
  0308b	ff d6		 call	 esi
  0308d	83 f8 04	 cmp	 eax, 4
  03090	0f 85 58 13 00
	00		 jne	 $LN426@MainDialog
  03096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0309b	6a 01		 push	 1
  0309d	50		 push	 eax
  0309e	53		 push	 ebx
  0309f	e8 00 00 00 00	 call	 _UnmountVolume
  030a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  030a7	85 c0		 test	 eax, eax
  030a9	74 c5		 je	 SHORT $LL96@MainDialog
$LN1097@MainDialog:

; 7421 : 							{
; 7422 : 								// Cancel
; 7423 : 								NormalCursor();
; 7424 : 								return 1;
; 7425 : 							}
; 7426 : 						}
; 7427 : 						if (tmp_result)		// If dismounted
; 7428 : 							hiddenVolHostDriveNo = -1;

  030ab	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
  030b1	eb 06		 jmp	 SHORT $LN93@MainDialog
$LN1184@MainDialog:
  030b3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
$LN93@MainDialog:

; 7429 : 					}
; 7430 : 
; 7431 : 					if (hiddenVolHostDriveNo < 0)		// If the hidden volume host is not mounted
; 7432 : 					{
; 7433 : 						// Remount the hidden volume host as read-only (to ensure consistent and secure
; 7434 : 						// results of the volume bitmap scanning)
; 7435 : 						switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, TRUE))

  030b9	6a 01		 push	 1
  030bb	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  030c0	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  030c5	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  030ca	53		 push	 ebx
  030cb	e8 00 00 00 00	 call	 _MountHiddenVolHost
  030d0	83 c4 14	 add	 esp, 20			; 00000014H
  030d3	83 f8 18	 cmp	 eax, 24			; 00000018H
  030d6	0f 87 87 0a 00
	00		 ja	 $LN204@MainDialog
  030dc	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN1138@MainDialog[eax]
  030e3	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1233@MainDialog[ecx*4]
$LN89@MainDialog:

; 7436 : 						{
; 7437 : 						case ERR_NO_FREE_DRIVES:
; 7438 : 							MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  030ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  030f0	6a 10		 push	 16			; 00000010H
  030f2	52		 push	 edx
  030f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
  030f8	e8 00 00 00 00	 call	 _GetString
  030fd	83 c4 04	 add	 esp, 4
  03100	50		 push	 eax
  03101	53		 push	 ebx
  03102	ff d6		 call	 esi

; 7439 : 							NormalCursor ();

  03104	e8 00 00 00 00	 call	 _NormalCursor
  03109	b8 01 00 00 00	 mov	 eax, 1
  0310e	e9 97 cf ff ff	 jmp	 $LN512@MainDialog
$LN87@MainDialog:

; 7440 : 							return 1;
; 7441 : 
; 7442 : 						case ERR_VOL_MOUNT_FAILED:
; 7443 : 						case ERR_PASSWORD_WRONG:
; 7444 : 							NormalCursor ();
; 7445 : 							return 1;
; 7446 : 
; 7447 : 						case 0:
; 7448 : 
; 7449 : 							/* Hidden volume host successfully mounted as read-only */
; 7450 : 
; 7451 : 							// Verify that the outer volume contains a suitable file system, retrieve cluster size, and 
; 7452 : 							// scan the volume bitmap
; 7453 : 							if (!IsAdmin () && IsUacSupported ())

  03113	e8 00 00 00 00	 call	 _IsAdmin
  03118	85 c0		 test	 eax, eax
  0311a	75 39		 jne	 SHORT $LN86@MainDialog
  0311c	e8 00 00 00 00	 call	 _IsUacSupported
  03121	85 c0		 test	 eax, eax
  03123	74 30		 je	 SHORT $LN86@MainDialog

; 7454 : 								retCode = UacAnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03125	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0312a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03130	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  03135	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  0313a	50		 push	 eax
  0313b	51		 push	 ecx
  0313c	6a 00		 push	 0
  0313e	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  03143	83 c4 0c	 add	 esp, 12			; 0000000cH
  03146	52		 push	 edx
  03147	50		 push	 eax
  03148	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0314d	53		 push	 ebx
  0314e	e8 00 00 00 00	 call	 _UacAnalyzeHiddenVolumeHost

; 7455 : 							else

  03153	eb 2e		 jmp	 SHORT $LN1216@MainDialog
$LN86@MainDialog:

; 7456 : 								retCode = AnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03155	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0315b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03160	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  03165	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  0316a	52		 push	 edx
  0316b	50		 push	 eax
  0316c	6a 00		 push	 0
  0316e	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  03173	83 c4 0c	 add	 esp, 12			; 0000000cH
  03176	52		 push	 edx
  03177	50		 push	 eax
  03178	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0317d	53		 push	 ebx
  0317e	e8 00 00 00 00	 call	 _AnalyzeHiddenVolumeHost
$LN1216@MainDialog:
  03183	83 c4 18	 add	 esp, 24			; 00000018H

; 7457 : 
; 7458 : 							switch (retCode)

  03186	3b c7		 cmp	 eax, edi
  03188	0f 84 b4 00 00
	00		 je	 $LN82@MainDialog
  0318e	85 c0		 test	 eax, eax
  03190	0f 84 58 12 00
	00		 je	 $LN426@MainDialog
  03196	83 f8 01	 cmp	 eax, 1
  03199	0f 85 c4 09 00
	00		 jne	 $LN204@MainDialog

; 7467 : 								break;
; 7468 : 
; 7469 : 							case 0:		// Unsupported file system (or other non-fatal error which has already been reported)
; 7470 : 								NormalCursor ();
; 7471 : 								return 1;
; 7472 : 
; 7473 : 							case 1:		// Success
; 7474 : 								{
; 7475 : 									BOOL tmp_result;
; 7476 : 
; 7477 : 									// Determine the maximum possible size of the hidden volume
; 7478 : 									if (DetermineMaxHiddenVolSize (hwndDlg) < 1)

  0319f	53		 push	 ebx
  031a0	e8 00 00 00 00	 call	 _DetermineMaxHiddenVolSize
  031a5	83 c4 04	 add	 esp, 4
  031a8	83 f8 01	 cmp	 eax, 1
  031ab	7d 0f		 jge	 SHORT $LN1074@MainDialog
$LN1080@MainDialog:

; 7479 : 									{
; 7480 : 										NormalCursor ();

  031ad	e8 00 00 00 00	 call	 _NormalCursor
$ovf_end_5$134758:
  031b2	b8 01 00 00 00	 mov	 eax, 1
  031b7	e9 ee ce ff ff	 jmp	 $LN512@MainDialog
$LN1074@MainDialog:

; 7481 : 										goto ovf_end;
; 7482 : 									}
; 7483 : 
; 7484 : 									/* Maximum possible size of the hidden volume successfully determined */
; 7485 : 
; 7486 : 									// Dismount the hidden volume host
; 7487 : 									while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  031bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  031c2	6a 01		 push	 1
  031c4	51		 push	 ecx
  031c5	53		 push	 ebx
  031c6	e8 00 00 00 00	 call	 _UnmountVolume
  031cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  031ce	85 c0		 test	 eax, eax
  031d0	75 34		 jne	 SHORT $LN75@MainDialog
$LL76@MainDialog:

; 7488 : 									{
; 7489 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  031d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  031d8	6a 05		 push	 5
  031da	52		 push	 edx
  031db	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  031e0	e8 00 00 00 00	 call	 _GetString
  031e5	83 c4 04	 add	 esp, 4
  031e8	50		 push	 eax
  031e9	53		 push	 ebx
  031ea	ff d6		 call	 esi
  031ec	83 f8 04	 cmp	 eax, 4
  031ef	75 bc		 jne	 SHORT $LN1080@MainDialog
  031f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  031f6	6a 01		 push	 1
  031f8	50		 push	 eax
  031f9	53		 push	 ebx
  031fa	e8 00 00 00 00	 call	 _UnmountVolume
  031ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  03202	85 c0		 test	 eax, eax
  03204	74 cc		 je	 SHORT $LL76@MainDialog
$LN75@MainDialog:

; 7490 : 										{
; 7491 : 											// Cancel
; 7492 : 											NormalCursor ();
; 7493 : 											goto ovf_end;
; 7494 : 										}
; 7495 : 									}
; 7496 : 
; 7497 : 									// Prevent having to recreate the outer volume due to inadvertent exit
; 7498 : 									bConfirmQuit = TRUE;

  03206	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 1 ; bConfirmQuit

; 7499 : 
; 7500 : 									hiddenVolHostDriveNo = -1;

  03210	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo

; 7501 : 
; 7502 : 									nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE;

  03216	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 16 ; 00000010H

; 7503 : 
; 7504 : 									// Clear the outer volume password
; 7505 : 									WipePasswordsAndKeyfiles ();

  0321d	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 7506 : 
; 7507 : 									EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  03222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  03228	6a 01		 push	 1
  0322a	68 10 04 00 00	 push	 1040			; 00000410H
  0322f	51		 push	 ecx
  03230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03236	50		 push	 eax
  03237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 7508 : 									NormalCursor ();
; 7509 : 
; 7510 : 								}
; 7511 : 								break;

  0323d	e9 1c 09 00 00	 jmp	 $LN191@MainDialog
$LN82@MainDialog:

; 7459 : 							{
; 7460 : 							case -1:	// Fatal error
; 7461 : 								CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  03242	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03248	52		 push	 edx
  03249	53		 push	 ebx
  0324a	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 7462 : 
; 7463 : 								if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  0324f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03254	6a 01		 push	 1
  03256	50		 push	 eax
  03257	53		 push	 ebx
  03258	e8 00 00 00 00	 call	 _UnmountVolume
  0325d	83 c4 14	 add	 esp, 20			; 00000014H
  03260	85 c0		 test	 eax, eax
  03262	74 06		 je	 SHORT $LN81@MainDialog

; 7464 : 									hiddenVolHostDriveNo = -1;

  03264	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN81@MainDialog:

; 7465 : 
; 7466 : 								AbortProcessSilent ();

  0326a	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0326f	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03272	40		 inc	 eax
  03273	50		 push	 eax
  03274	53		 push	 ebx
  03275	e8 00 00 00 00	 call	 _LoadPage
  0327a	83 c4 08	 add	 esp, 8
  0327d	b8 01 00 00 00	 mov	 eax, 1
  03282	e9 23 ce ff ff	 jmp	 $LN512@MainDialog
$LN103@MainDialog:

; 7370 : 				{
; 7371 : 					/* Wizard loop restart */
; 7372 : 
; 7373 : 					if (bHiddenOS)

  03287	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0328d	85 c9		 test	 ecx, ecx
  0328f	0f 84 f2 01 00
	00		 je	 $LN102@MainDialog

; 7374 : 					{
; 7375 : 						if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  03295	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  0329b	83 fa 02	 cmp	 edx, 2
  0329e	74 61		 je	 SHORT $LN1207@MainDialog
  032a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  032a5	e8 00 00 00 00	 call	 _CreateSysEncMutex
  032aa	85 c0		 test	 eax, eax
  032ac	75 14		 jne	 SHORT $LN962@MainDialog
  032ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  032b3	e8 00 00 00 00	 call	 _Error
  032b8	83 c4 04	 add	 esp, 4
  032bb	8b c6		 mov	 eax, esi
  032bd	e9 e8 cd ff ff	 jmp	 $LN512@MainDialog
$LN962@MainDialog:
  032c2	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  032c7	33 f6		 xor	 esi, esi
  032c9	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  032cf	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0
  032d6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0
  032dd	89 35 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, esi
  032e3	89 35 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, esi
  032e9	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  032ef	89 35 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, esi
  032f5	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
  032ff	eb 02		 jmp	 SHORT $LN966@MainDialog
$LN1207@MainDialog:
  03301	33 f6		 xor	 esi, esi
$LN966@MainDialog:
  03303	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  03309	f7 d9		 neg	 ecx
  0330b	1b c9		 sbb	 ecx, ecx
  0330d	f7 d9		 neg	 ecx
  0330f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice

; 7376 : 							return 1;
; 7377 : 
; 7378 : 						// Hidden volume for hidden OS has been created. Now we will prepare our boot loader
; 7379 : 						// that will handle the OS cloning. 
; 7380 : 						try
; 7381 : 						{

  03315	c7 45 fc 45 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 69 ; 00000045H

; 7382 : 							WaitCursor();

  0331c	e8 00 00 00 00	 call	 _WaitCursor

; 7383 : 
; 7384 : 							BootEncObj->PrepareHiddenOSCreation (nVolumeEA, FIRST_MODE_OF_OPERATION_ID, hash_algo);

  03321	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hash_algo@@3HA ; hash_algo
  03327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  0332c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  03332	52		 push	 edx
  03333	6a 01		 push	 1
  03335	50		 push	 eax
  03336	e8 00 00 00 00	 call	 ?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z ; CipherShed::BootEncryption::PrepareHiddenOSCreation

; 7391 : 						}
; 7392 : 
; 7393 : 						bHiddenVol = FALSE;
; 7394 : 
; 7395 : 						LoadPage (hwndDlg, SYSENC_PRETEST_INFO_PAGE);

  0333b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03340	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, esi ; bHiddenVol
  03346	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0334b	39 35 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, esi
  03351	0f 84 62 00 00
	00		 je	 $LN1021@MainDialog
  03357	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  03361	83 f8 15	 cmp	 eax, 21			; 00000015H
  03364	75 41		 jne	 SHORT $LN1019@MainDialog
  03366	6a 40		 push	 64			; 00000040H
  03368	8d 8d 84 c9 00
	00		 lea	 ecx, DWORD PTR _tmp$169764[ebp]
  0336e	6a 58		 push	 88			; 00000058H
  03370	51		 push	 ecx
  03371	e8 00 00 00 00	 call	 _memset
  03376	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0337b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  03381	83 c4 0c	 add	 esp, 12			; 0000000cH
  03384	8d 95 84 c9 00
	00		 lea	 edx, DWORD PTR _tmp$169764[ebp]
  0338a	52		 push	 edx
  0338b	50		 push	 eax
  0338c	c6 85 c4 c9 00
	00 00		 mov	 BYTE PTR _tmp$169764[ebp+64], 0
  03393	ff d6		 call	 esi
  03395	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0339b	8d 8d 84 c9 00
	00		 lea	 ecx, DWORD PTR _tmp$169764[ebp]
  033a1	51		 push	 ecx
  033a2	52		 push	 edx
  033a3	ff d6		 call	 esi
  033a5	33 f6		 xor	 esi, esi
$LN1019@MainDialog:
  033a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  033ac	50		 push	 eax
  033ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  033b3	89 35 00 00 00
	00		 mov	 DWORD PTR _hCurPage, esi
$LN1021@MainDialog:
  033b9	89 35 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, esi
  033bf	e8 00 00 00 00	 call	 _NormalCursor
  033c4	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$169759[ebp]
  033ca	51		 push	 ecx
  033cb	68 23 04 00 00	 push	 1059			; 00000423H
  033d0	53		 push	 ebx
  033d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  033d7	50		 push	 eax
  033d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  033de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  033e4	56		 push	 esi
  033e5	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  033ea	53		 push	 ebx
  033eb	6a 6c		 push	 108			; 0000006cH
  033ed	52		 push	 edx
  033ee	c7 05 00 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 29 ; nCurPageNo, 0000001dH
  033f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  033fe	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  03403	8d 45 b4	 lea	 eax, DWORD PTR _rD$169758[ebp]
  03406	50		 push	 eax
  03407	53		 push	 ebx
  03408	c7 45 b4 a2 00
	00 00		 mov	 DWORD PTR _rD$169758[ebp], 162 ; 000000a2H
  0340f	c7 45 b8 19 00
	00 00		 mov	 DWORD PTR _rD$169758[ebp+4], 25 ; 00000019H
  03416	89 75 bc	 mov	 DWORD PTR _rD$169758[ebp+8], esi
  03419	89 75 c0	 mov	 DWORD PTR _rD$169758[ebp+12], esi
  0341c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  03422	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03427	3b c6		 cmp	 eax, esi
  03429	0f 84 64 00 00
	00		 je	 $LN99@MainDialog
  0342f	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169759[ebp+12]
  03435	2b 8d 18 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169759[ebp+4]
  0343b	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _rW$169759[ebp+8]
  03441	2b 95 14 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169759[ebp]
  03447	6a 01		 push	 1
  03449	51		 push	 ecx
  0344a	8b 4d b8	 mov	 ecx, DWORD PTR _rD$169758[ebp+4]
  0344d	52		 push	 edx
  0344e	8b 55 b4	 mov	 edx, DWORD PTR _rD$169758[ebp]
  03451	51		 push	 ecx
  03452	52		 push	 edx
  03453	50		 push	 eax
  03454	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  0345a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0345f	6a 01		 push	 1
  03461	50		 push	 eax
  03462	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 7396 : 					}
; 7397 : 					else

  03468	eb 29		 jmp	 SHORT $LN99@MainDialog
__catch$_MainDialogProc@16$41:

; 7385 : 						}
; 7386 : 						catch (Exception &e)
; 7387 : 						{
; 7388 : 							e.Show (MainDlg);

  0346a	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134726[ebp]
  03470	8b 11		 mov	 edx, DWORD PTR [ecx]
  03472	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  03477	8b 12		 mov	 edx, DWORD PTR [edx]
  03479	50		 push	 eax
  0347a	ff d2		 call	 edx

; 7389 : 							NormalCursor();

  0347c	e8 00 00 00 00	 call	 _NormalCursor

; 7390 : 							return 1;

  03481	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  03486	c3		 ret	 0
$LN102@MainDialog:

; 7398 : 						LoadPage (hwndDlg, INTRO_PAGE);

  03487	33 f6		 xor	 esi, esi
  03489	56		 push	 esi
  0348a	53		 push	 ebx
  0348b	e8 00 00 00 00	 call	 _LoadPage
  03490	83 c4 08	 add	 esp, 8
$LN99@MainDialog:

; 7399 : 
; 7400 : 					SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  03493	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  03498	e8 00 00 00 00	 call	 _GetString
  0349d	83 c4 04	 add	 esp, 4
  034a0	50		 push	 eax
  034a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  034a6	6a 02		 push	 2
  034a8	50		 push	 eax
  034a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  034af	50		 push	 eax
  034b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 7401 : 					bHiddenVolFinished = FALSE;

  034b6	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, esi ; bHiddenVolFinished

; 7402 : 					WipePasswordsAndKeyfiles ();

  034bc	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  034c1	b8 01 00 00 00	 mov	 eax, 1
  034c6	e9 df cb ff ff	 jmp	 $LN512@MainDialog
$LN105@MainDialog:

; 7512 : 							}
; 7513 : 							break;
; 7514 : 						}
; 7515 : 					}
; 7516 : 				}
; 7517 : 			}
; 7518 : 
; 7519 : 			else if (nCurPageNo == DEVICE_WIPE_PAGE)

  034cb	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  034ce	0f 85 8f 06 00
	00		 jne	 $LN204@MainDialog

; 7520 : 			{
; 7521 : 				if (AskWarnOkCancel (bHiddenOS && IsHiddenOSRunning() ? "CONFIRM_WIPE_START_DECOY_SYS_PARTITION" : "CONFIRM_WIPE_START") == IDOK)

  034d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  034da	85 c9		 test	 ecx, ecx
  034dc	74 0e		 je	 SHORT $LN534@MainDialog
  034de	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  034e3	85 c0		 test	 eax, eax
  034e5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@
  034ea	75 05		 jne	 SHORT $LN535@MainDialog
$LN534@MainDialog:
  034ec	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@
$LN535@MainDialog:
  034f1	50		 push	 eax
  034f2	e8 00 00 00 00	 call	 _AskWarnOkCancel
  034f7	83 c4 04	 add	 esp, 4
  034fa	83 f8 01	 cmp	 eax, 1
  034fd	0f 85 b9 e1 ff
	ff		 jne	 $LN1223@MainDialog

; 7522 : 				{
; 7523 : 					WipeStart ();

  03503	e8 00 00 00 00	 call	 _WipeStart

; 7524 : 					ArrowWaitCursor();

  03508	e8 00 00 00 00	 call	 _ArrowWaitCursor
  0350d	8b c6		 mov	 eax, esi
  0350f	e9 96 cb ff ff	 jmp	 $LN512@MainDialog
$LN159@MainDialog:

; 7074 : 			{
; 7075 : 				if (nWipeMode > 0 
; 7076 : 					&& AskWarnYesNo ("WIPE_MODE_WARN") == IDNO)

  03514	39 0d 00 00 00
	00		 cmp	 DWORD PTR _nWipeMode, ecx
  0351a	0f 8e 43 06 00
	00		 jle	 $LN204@MainDialog
  03520	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@
  03525	e8 00 00 00 00	 call	 _AskWarnYesNo
  0352a	83 c4 04	 add	 esp, 4
  0352d	83 f8 07	 cmp	 eax, 7
  03530	0f 85 2d 06 00
	00		 jne	 $LN204@MainDialog

; 6285 : 					return 1;

  03536	8b c6		 mov	 eax, esi
  03538	e9 6d cb ff ff	 jmp	 $LN512@MainDialog
$LN183@MainDialog:

; 6935 : 			{
; 6936 : 				char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 6937 : 
; 6938 : 				if (!bInPlaceEncNonSys)

  0353d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  03543	85 d2		 test	 edx, edx
  03545	0f 85 60 00 00
	00		 jne	 __tryend$_MainDialogProc@16$30

; 6939 : 				{
; 6940 : 					/* Generate master key and other related data (except the rescue disk) for system encryption. */
; 6941 : 
; 6942 : 					try
; 6943 : 					{

  0354b	c7 45 fc 31 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 49 ; 00000031H

; 6944 : 						WaitCursor();

  03552	e8 00 00 00 00	 call	 _WaitCursor

; 6945 : 						BootEncObj->PrepareInstallation (!bWholeSysDrive, volumePassword, nVolumeEA, FIRST_MODE_OF_OPERATION_ID, hash_algo, "");

  03557	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0355c	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169132[ebp]
  03562	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  03567	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hash_algo@@3HA ; hash_algo
  0356d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  03574	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  0357a	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR $T169132[ebp]
  03580	50		 push	 eax
  03581	51		 push	 ecx
  03582	6a 01		 push	 1
  03584	0f 94 c0	 sete	 al
  03587	52		 push	 edx
  03588	0f b6 c8	 movzx	 ecx, al
  0358b	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  03590	51		 push	 ecx
  03591	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  03597	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+12], 50 ; 00000032H
  0359b	e8 00 00 00 00	 call	 ?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::PrepareInstallation
  035a0	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169132[ebp]
  035a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__tryend$_MainDialogProc@16$30:

; 6952 : 					}
; 6953 : 				}
; 6954 : 
; 6955 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  035ab	68 ff 00 00 00	 push	 255			; 000000ffH
  035b0	53		 push	 ebx
  035b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 6956 : 
; 6957 : 				// Attempt to wipe the GUI field showing portions of randpool
; 6958 : 				memset (tmp, 'X', sizeof(tmp));

  035b7	68 73 01 00 00	 push	 371			; 00000173H
  035bc	8d 85 8c c5 00
	00		 lea	 eax, DWORD PTR _tmp$134582[ebp]
  035c2	6a 58		 push	 88			; 00000058H
  035c4	50		 push	 eax
  035c5	e8 00 00 00 00	 call	 _memset

; 6959 : 				tmp [sizeof(tmp)-1] = 0;
; 6960 : 				SetWindowText (hRandPoolSys, tmp);

  035ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  035d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  035d3	8d 8d 8c c5 00
	00		 lea	 ecx, DWORD PTR _tmp$134582[ebp]
  035d9	51		 push	 ecx
  035da	52		 push	 edx
  035db	c6 85 fe c6 00
	00 00		 mov	 BYTE PTR _tmp$134582[ebp+370], 0
  035e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 6961 : 
; 6962 : 				NormalCursor ();

  035e8	e9 71 05 00 00	 jmp	 $LN191@MainDialog
__catch$_MainDialogProc@16$29:

; 6946 : 					}
; 6947 : 					catch (Exception &e)
; 6948 : 					{
; 6949 : 						e.Show (hwndDlg);

  035ed	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134586[ebp]
  035f3	8b 11		 mov	 edx, DWORD PTR [ecx]
  035f5	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  035f8	8b 12		 mov	 edx, DWORD PTR [edx]
  035fa	50		 push	 eax
  035fb	ff d2		 call	 edx

; 6950 : 						NormalCursor ();

  035fd	e8 00 00 00 00	 call	 _NormalCursor

; 6951 : 						return 1;

  03602	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  03607	c3		 ret	 0
$LN234@MainDialog:
  03608	e8 00 00 00 00	 call	 _WaitCursor
  0360d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03612	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03618	6a 41		 push	 65			; 00000041H
  0361a	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  0361f	68 0d 04 00 00	 push	 1037			; 0000040dH
  03624	50		 push	 eax
  03625	ff d7		 call	 edi
  03627	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetWindowTextA@12
  0362d	50		 push	 eax
  0362e	ff d6		 call	 esi
  03630	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  03635	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1139@MainDialog:
  03638	8a 08		 mov	 cl, BYTE PTR [eax]
  0363a	40		 inc	 eax
  0363b	84 c9		 test	 cl, cl
  0363d	75 f9		 jne	 SHORT $LL1139@MainDialog
  0363f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03645	6a 41		 push	 65			; 00000041H
  03647	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  0364c	68 0d 04 00 00	 push	 1037			; 0000040dH
  03651	2b c2		 sub	 eax, edx
  03653	51		 push	 ecx
  03654	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax
  03659	ff d7		 call	 edi
  0365b	50		 push	 eax
  0365c	ff d6		 call	 esi
  0365e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  03665	74 14		 je	 SHORT $LN233@MainDialog
  03667	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _FirstKeyFile
  0366d	52		 push	 edx
  0366e	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  03673	e8 00 00 00 00	 call	 _KeyFilesApply
  03678	83 c4 08	 add	 esp, 8
$LN233@MainDialog:
  0367b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  03680	85 c0		 test	 eax, eax
  03682	0f 85 a6 02 00
	00		 jne	 $LN232@MainDialog
  03688	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0368d	85 c0		 test	 eax, eax
  0368f	7c 5a		 jl	 SHORT $LN1187@MainDialog
  03691	6a 01		 push	 1
  03693	50		 push	 eax
  03694	53		 push	 ebx
  03695	e8 00 00 00 00	 call	 _UnmountVolume
  0369a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  036a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  036a3	85 c0		 test	 eax, eax
  036a5	75 39		 jne	 SHORT $LN1095@MainDialog
$LL230@MainDialog:

; 6715 : 			{
; 6716 : 				WaitCursor ();
; 6717 : 
; 6718 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), (char *) volumePassword.Text, sizeof (volumePassword.Text));
; 6719 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);
; 6720 : 
; 6721 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 6722 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), szRawPassword, sizeof (szRawPassword));
; 6723 : 
; 6724 : 				if (KeyFilesEnable)
; 6725 : 				{
; 6726 : 					KeyFilesApply (&volumePassword, FirstKeyFile);
; 6727 : 				}
; 6728 : 			
; 6729 : 				if (!bInPlaceEncNonSys)
; 6730 : 				{
; 6731 : 
; 6732 : 					/* Mount the volume which is to host the new hidden volume as read only */
; 6733 : 
; 6734 : 					if (hiddenVolHostDriveNo >= 0)		// If the hidden volume host is currently mounted (e.g. after previous unsuccessful dismount attempt)
; 6735 : 					{
; 6736 : 						BOOL tmp_result;
; 6737 : 
; 6738 : 						// Dismount the hidden volume host (in order to remount it as read-only subsequently)
; 6739 : 						while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))
; 6740 : 						{
; 6741 : 							if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  036a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  036ad	6a 05		 push	 5
  036af	51		 push	 ecx
  036b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  036b5	e8 00 00 00 00	 call	 _GetString
  036ba	83 c4 04	 add	 esp, 4
  036bd	50		 push	 eax
  036be	53		 push	 ebx
  036bf	ff d6		 call	 esi
  036c1	83 f8 04	 cmp	 eax, 4
  036c4	0f 85 24 0d 00
	00		 jne	 $LN426@MainDialog
  036ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  036d0	6a 01		 push	 1
  036d2	52		 push	 edx
  036d3	53		 push	 ebx
  036d4	e8 00 00 00 00	 call	 _UnmountVolume
  036d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  036dc	85 c0		 test	 eax, eax
  036de	74 c7		 je	 SHORT $LL230@MainDialog
$LN1095@MainDialog:

; 6742 : 							{
; 6743 : 								// Cancel
; 6744 : 								NormalCursor();
; 6745 : 								return 1;
; 6746 : 							}
; 6747 : 						}
; 6748 : 						if (tmp_result)		// If dismounted
; 6749 : 							hiddenVolHostDriveNo = -1;

  036e0	83 cf ff	 or	 edi, -1
  036e3	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
  036e9	eb 09		 jmp	 SHORT $LN1096@MainDialog
$LN1187@MainDialog:
  036eb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  036f1	83 cf ff	 or	 edi, -1
$LN1096@MainDialog:

; 6750 : 					}
; 6751 : 
; 6752 : 					if (hiddenVolHostDriveNo < 0)		// If the hidden volume host is not mounted
; 6753 : 					{
; 6754 : 						int retCode;
; 6755 : 
; 6756 : 						// Mount the hidden volume host as read-only (to ensure consistent and secure
; 6757 : 						// results of the volume bitmap scanning)
; 6758 : 						switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, TRUE))

  036f4	6a 01		 push	 1
  036f6	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  036fb	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03700	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03705	53		 push	 ebx
  03706	e8 00 00 00 00	 call	 _MountHiddenVolHost
  0370b	83 c4 14	 add	 esp, 20			; 00000014H
  0370e	83 f8 18	 cmp	 eax, 24			; 00000018H
  03711	0f 87 4c 04 00
	00		 ja	 $LN204@MainDialog
  03717	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN1140@MainDialog[eax]
  0371e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1234@MainDialog[eax*4]
$LN223@MainDialog:

; 6759 : 						{
; 6760 : 						case ERR_NO_FREE_DRIVES:
; 6761 : 							NormalCursor ();

  03725	e8 00 00 00 00	 call	 _NormalCursor

; 6762 : 							MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  0372a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  03730	6a 10		 push	 16			; 00000010H
  03732	51		 push	 ecx
  03733	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
  03738	e8 00 00 00 00	 call	 _GetString
  0373d	83 c4 04	 add	 esp, 4
  03740	50		 push	 eax
  03741	53		 push	 ebx
  03742	ff d6		 call	 esi
  03744	b8 01 00 00 00	 mov	 eax, 1
  03749	e9 5c c9 ff ff	 jmp	 $LN512@MainDialog
$LN221@MainDialog:

; 6763 : 							return 1;
; 6764 : 						case ERR_VOL_MOUNT_FAILED:
; 6765 : 						case ERR_PASSWORD_WRONG:
; 6766 : 							NormalCursor ();
; 6767 : 							return 1;
; 6768 : 						case 0:
; 6769 : 
; 6770 : 							/* Hidden volume host successfully mounted as read-only */
; 6771 : 
; 6772 : 							WaitCursor ();

  0374e	e8 00 00 00 00	 call	 _WaitCursor

; 6773 : 
; 6774 : 							// Verify that the outer volume contains a suitable file system, retrieve cluster size, and 
; 6775 : 							// scan the volume bitmap
; 6776 : 							if (!IsAdmin () && IsUacSupported ())

  03753	e8 00 00 00 00	 call	 _IsAdmin
  03758	85 c0		 test	 eax, eax
  0375a	75 39		 jne	 SHORT $LN220@MainDialog
  0375c	e8 00 00 00 00	 call	 _IsUacSupported
  03761	85 c0		 test	 eax, eax
  03763	74 30		 je	 SHORT $LN220@MainDialog

; 6777 : 								retCode = UacAnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03765	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0376b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03770	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  03775	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  0377a	52		 push	 edx
  0377b	50		 push	 eax
  0377c	6a 00		 push	 0
  0377e	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  03783	83 c4 0c	 add	 esp, 12			; 0000000cH
  03786	52		 push	 edx
  03787	50		 push	 eax
  03788	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0378d	53		 push	 ebx
  0378e	e8 00 00 00 00	 call	 _UacAnalyzeHiddenVolumeHost

; 6778 : 							else

  03793	eb 2f		 jmp	 SHORT $LN1217@MainDialog
$LN220@MainDialog:

; 6779 : 								retCode = AnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03795	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0379b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  037a1	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  037a6	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  037ab	51		 push	 ecx
  037ac	52		 push	 edx
  037ad	6a 00		 push	 0
  037af	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  037b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  037b7	52		 push	 edx
  037b8	50		 push	 eax
  037b9	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  037be	53		 push	 ebx
  037bf	e8 00 00 00 00	 call	 _AnalyzeHiddenVolumeHost
$LN1217@MainDialog:
  037c4	83 c4 18	 add	 esp, 24			; 00000018H

; 6780 : 
; 6781 : 							switch (retCode)

  037c7	3b c7		 cmp	 eax, edi
  037c9	0f 84 19 01 00
	00		 je	 $LN216@MainDialog
  037cf	85 c0		 test	 eax, eax
  037d1	0f 84 d0 00 00
	00		 je	 $LN214@MainDialog
  037d7	83 f8 01	 cmp	 eax, 1
  037da	0f 85 83 03 00
	00		 jne	 $LN204@MainDialog

; 6801 : 								return 1;
; 6802 : 
; 6803 : 							case 1:
; 6804 : 
; 6805 : 								// Determine the maximum possible size of the hidden volume
; 6806 : 								if (DetermineMaxHiddenVolSize (hwndDlg) < 1)

  037e0	53		 push	 ebx
  037e1	e8 00 00 00 00	 call	 _DetermineMaxHiddenVolSize
  037e6	83 c4 04	 add	 esp, 4
  037e9	83 f8 01	 cmp	 eax, 1

; 6807 : 								{
; 6808 : 									// Non-fatal error while determining maximum possible size of the hidden volume
; 6809 : 									NormalCursor();
; 6810 : 									return 1;

  037ec	0f 8c fc 0b 00
	00		 jl	 $LN426@MainDialog

; 6811 : 								}
; 6812 : 								else
; 6813 : 								{
; 6814 : 									BOOL tmp_result;
; 6815 : 
; 6816 : 									/* Maximum possible size of the hidden volume successfully determined */
; 6817 : 
; 6818 : 									// Dismount the hidden volume host
; 6819 : 									while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  037f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  037f7	6a 01		 push	 1
  037f9	50		 push	 eax
  037fa	53		 push	 ebx
  037fb	e8 00 00 00 00	 call	 _UnmountVolume
  03800	33 ff		 xor	 edi, edi
  03802	83 c4 0c	 add	 esp, 12			; 0000000cH
  03805	3b c7		 cmp	 eax, edi
  03807	75 40		 jne	 SHORT $LN1094@MainDialog
  03809	8d a4 24 00 00
	00 00		 npad	 7
$LL208@MainDialog:

; 6820 : 									{
; 6821 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  03810	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  03816	6a 05		 push	 5
  03818	51		 push	 ecx
  03819	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  0381e	e8 00 00 00 00	 call	 _GetString
  03823	83 c4 04	 add	 esp, 4
  03826	50		 push	 eax
  03827	53		 push	 ebx
  03828	ff d6		 call	 esi
  0382a	83 f8 04	 cmp	 eax, 4
  0382d	0f 85 bb 0b 00
	00		 jne	 $LN426@MainDialog
  03833	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03839	6a 01		 push	 1
  0383b	52		 push	 edx
  0383c	53		 push	 ebx
  0383d	e8 00 00 00 00	 call	 _UnmountVolume
  03842	83 c4 0c	 add	 esp, 12			; 0000000cH
  03845	3b c7		 cmp	 eax, edi
  03847	74 c7		 je	 SHORT $LL208@MainDialog
$LN1094@MainDialog:

; 6822 : 										{
; 6823 : 											// Cancel
; 6824 : 											NormalCursor();
; 6825 : 											return 1;
; 6826 : 										}
; 6827 : 									}
; 6828 : 
; 6829 : 									if (tmp_result)		// If dismounted
; 6830 : 									{
; 6831 : 										hiddenVolHostDriveNo = -1;

  03849	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo

; 6832 : 
; 6833 : 										bHiddenVolHost = FALSE; 

  03853	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, edi

; 6834 : 										bHiddenVolFinished = FALSE;

  03859	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, edi ; bHiddenVolFinished

; 6835 : 
; 6836 : 										// Clear the outer volume password
; 6837 : 										WipePasswordsAndKeyfiles ();

  0385f	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 6838 : 
; 6839 : 										RestoreDefaultKeyFilesParam ();

  03864	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 6840 : 
; 6841 : 										EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  03869	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0386e	6a 01		 push	 1
  03870	68 10 04 00 00	 push	 1040			; 00000410H
  03875	50		 push	 eax
  03876	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0387c	50		 push	 eax
  0387d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 6842 : 										NormalCursor ();

  03883	e8 00 00 00 00	 call	 _NormalCursor

; 6843 : 
; 6844 : 										nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE;

  03888	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 16 ; 00000010H

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0388f	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03892	40		 inc	 eax
  03893	50		 push	 eax
  03894	53		 push	 ebx
  03895	e8 00 00 00 00	 call	 _LoadPage
  0389a	83 c4 08	 add	 esp, 8
  0389d	b8 01 00 00 00	 mov	 eax, 1
  038a2	e9 03 c8 ff ff	 jmp	 $LN512@MainDialog
$LN214@MainDialog:

; 6790 : 								break;
; 6791 : 
; 6792 : 							case 0:		// Unsupported file system (or other non-fatal error which has already been reported)
; 6793 : 								if (bHiddenVolDirect)

  038a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  038ad	85 c9		 test	 ecx, ecx
  038af	74 28		 je	 SHORT $LN212@MainDialog

; 6794 : 								{
; 6795 : 									CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  038b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  038b7	52		 push	 edx
  038b8	53		 push	 ebx
  038b9	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6796 : 
; 6797 : 									if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  038be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  038c3	6a 01		 push	 1
  038c5	50		 push	 eax
  038c6	53		 push	 ebx
  038c7	e8 00 00 00 00	 call	 _UnmountVolume
  038cc	83 c4 14	 add	 esp, 20			; 00000014H
  038cf	85 c0		 test	 eax, eax
  038d1	74 06		 je	 SHORT $LN212@MainDialog

; 6798 : 										hiddenVolHostDriveNo = -1;

  038d3	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN212@MainDialog:

; 6799 : 								}
; 6800 : 								NormalCursor ();

  038d9	e8 00 00 00 00	 call	 _NormalCursor
  038de	b8 01 00 00 00	 mov	 eax, 1
  038e3	e9 c2 c7 ff ff	 jmp	 $LN512@MainDialog
$LN216@MainDialog:

; 6782 : 							{
; 6783 : 							case -1:	// Fatal error
; 6784 : 								CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  038e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  038ee	51		 push	 ecx
  038ef	53		 push	 ebx
  038f0	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6785 : 
; 6786 : 								if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  038f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  038fb	6a 01		 push	 1
  038fd	52		 push	 edx
  038fe	53		 push	 ebx
  038ff	e8 00 00 00 00	 call	 _UnmountVolume
  03904	83 c4 14	 add	 esp, 20			; 00000014H
  03907	85 c0		 test	 eax, eax
  03909	74 06		 je	 SHORT $LN215@MainDialog

; 6787 : 									hiddenVolHostDriveNo = -1;

  0390b	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN215@MainDialog:

; 6788 : 
; 6789 : 								AbortProcessSilent ();

  03911	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  03916	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03919	40		 inc	 eax
  0391a	50		 push	 eax
  0391b	53		 push	 ebx
  0391c	e8 00 00 00 00	 call	 _LoadPage
  03921	83 c4 08	 add	 esp, 8
  03924	b8 01 00 00 00	 mov	 eax, 1
  03929	e9 7c c7 ff ff	 jmp	 $LN512@MainDialog
$LN232@MainDialog:

; 6845 : 									}
; 6846 : 								}
; 6847 : 								break;
; 6848 : 							}
; 6849 : 							break;
; 6850 : 						}
; 6851 : 					}
; 6852 : 				}
; 6853 : 				else
; 6854 : 				{
; 6855 : 					/* Scan all available partitions to discover all partitions where non-system in-place
; 6856 : 					encryption has been interrupted. */
; 6857 : 
; 6858 : 					BOOL tmpbDevice;
; 6859 : 					DeferredNonSysInPlaceEncDevices.clear();

  0392e	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  03933	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear

; 6860 : 
; 6861 : 					foreach (const HostDevice &device, GetAvailableHostDevices (true, true))

  03938	6a 00		 push	 0
  0393a	6a 01		 push	 1
  0393c	6a 01		 push	 1
  0393e	8d 85 20 fe ff
	ff		 lea	 eax, DWORD PTR $T169116[ebp]
  03944	6a 01		 push	 1
  03946	50		 push	 eax
  03947	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  0394c	50		 push	 eax
  0394d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  03953	51		 push	 ecx
  03954	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 39 ; 00000027H
  0395b	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  03960	83 c4 1c	 add	 esp, 28			; 0000001cH
  03963	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T169116[ebp]
  03969	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+12], 41 ; 00000029H
  0396d	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  03972	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$134542[ebp]
  03978	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0397b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  03981	ff d0		 call	 eax
  03983	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  03988	84 c0		 test	 al, al
  0398a	0f 84 0b 01 00
	00		 je	 $LN201@MainDialog
$LL203@MainDialog:
  03990	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp+40]
  03996	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
  0399b	f6 45 dc 02	 test	 BYTE PTR $T169211[ebp], 2
  0399f	8b f0		 mov	 esi, eax
  039a1	74 0f		 je	 SHORT $LN607@MainDialog
  039a3	83 65 dc fd	 and	 DWORD PTR $T169211[ebp], -3 ; fffffffdH
  039a7	8d 8d 94 fa ff
	ff		 lea	 ecx, DWORD PTR $T169121[ebp]
  039ad	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
$LN607@MainDialog:
  039b2	80 bd 39 ff ff
	ff 00		 cmp	 BYTE PTR _$S2$134542[ebp+5], 0
  039b9	0f 94 c0	 sete	 al
  039bc	88 85 39 ff ff
	ff		 mov	 BYTE PTR _$S2$134542[ebp+5], al
  039c2	84 c0		 test	 al, al
  039c4	0f 84 a7 00 00
	00		 je	 $LN202@MainDialog
  039ca	8d 9b 00 00 00
	00		 npad	 6
$LL904@MainDialog:

; 6862 : 					{
; 6863 : 						if (device.IsPartition || device.DynamicVolume)

  039d0	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  039d4	75 0a		 jne	 SHORT $LN196@MainDialog
  039d6	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  039da	0f 84 77 00 00
	00		 je	 $LN199@MainDialog
$LN196@MainDialog:

; 6864 : 						{
; 6865 : 							OpenVolumeContext volume;
; 6866 : 
; 6867 : 							if (OpenVolume (&volume, device.Path.c_str(), &volumePassword, FALSE, FALSE, TRUE) == ERR_SUCCESS)

  039e0	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  039e3	72 05		 jb	 SHORT $LN912@MainDialog
  039e5	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  039e8	eb 03		 jmp	 SHORT $LN913@MainDialog
$LN912@MainDialog:
  039ea	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
$LN913@MainDialog:
  039ed	6a 01		 push	 1
  039ef	6a 00		 push	 0
  039f1	6a 00		 push	 0
  039f3	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  039f8	50		 push	 eax
  039f9	8d 8d ac fa ff
	ff		 lea	 ecx, DWORD PTR _volume$134557[ebp]
  039ff	51		 push	 ecx
  03a00	e8 00 00 00 00	 call	 _OpenVolume
  03a05	83 c4 18	 add	 esp, 24			; 00000018H
  03a08	85 c0		 test	 eax, eax
  03a0a	75 45		 jne	 SHORT $LN1188@MainDialog

; 6868 : 							{
; 6869 : 								if ((volume.CryptoInfo->HeaderFlags & TC_HEADER_FLAG_NONSYS_INPLACE_ENC) != 0
; 6870 : 									&& volume.CryptoInfo->EncryptedAreaLength.Value != volume.CryptoInfo->VolumeSize.Value)

  03a0c	8b 85 b0 fa ff
	ff		 mov	 eax, DWORD PTR _volume$134557[ebp+4]
  03a12	f6 80 60 44 00
	00 02		 test	 BYTE PTR [eax+17504], 2
  03a19	74 27		 je	 SHORT $LN194@MainDialog
  03a1b	8b 90 58 44 00
	00		 mov	 edx, DWORD PTR [eax+17496]
  03a21	3b 90 48 44 00
	00		 cmp	 edx, DWORD PTR [eax+17480]
  03a27	75 0e		 jne	 SHORT $LN1141@MainDialog
  03a29	8b 88 5c 44 00
	00		 mov	 ecx, DWORD PTR [eax+17500]
  03a2f	3b 88 4c 44 00
	00		 cmp	 ecx, DWORD PTR [eax+17484]
  03a35	74 0b		 je	 SHORT $LN194@MainDialog
$LN1141@MainDialog:

; 6871 : 								{
; 6872 : 									DeferredNonSysInPlaceEncDevices.push_back (device);

  03a37	56		 push	 esi
  03a38	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  03a3d	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
$LN194@MainDialog:

; 6873 : 								}
; 6874 : 
; 6875 : 								CloseVolume (&volume);

  03a42	8d 95 ac fa ff
	ff		 lea	 edx, DWORD PTR _volume$134557[ebp]
  03a48	52		 push	 edx
  03a49	e8 00 00 00 00	 call	 _CloseVolume
  03a4e	83 c4 04	 add	 esp, 4
$LN1188@MainDialog:
  03a51	8a 85 39 ff ff
	ff		 mov	 al, BYTE PTR _$S2$134542[ebp+5]
$LN199@MainDialog:

; 6860 : 
; 6861 : 					foreach (const HostDevice &device, GetAvailableHostDevices (true, true))

  03a57	84 c0		 test	 al, al
  03a59	0f 94 c0	 sete	 al
  03a5c	c6 85 38 ff ff
	ff 01		 mov	 BYTE PTR _$S2$134542[ebp+4], 1
  03a63	88 85 39 ff ff
	ff		 mov	 BYTE PTR _$S2$134542[ebp+5], al
  03a69	84 c0		 test	 al, al
  03a6b	0f 85 5f ff ff
	ff		 jne	 $LL904@MainDialog
$LN202@MainDialog:
  03a71	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _$S2$134542[ebp]
  03a77	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  03a7a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  03a80	ff d2		 call	 edx
  03a82	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _$S2$134542[ebp]
  03a88	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  03a8b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  03a91	ff d2		 call	 edx
  03a93	84 c0		 test	 al, al
  03a95	0f 85 f5 fe ff
	ff		 jne	 $LL203@MainDialog
$LN201@MainDialog:

; 6876 : 							}
; 6877 : 						}
; 6878 : 					}

  03a9b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  03aa1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  03aa8	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 6879 : 
; 6880 : 					if (DeferredNonSysInPlaceEncDevices.empty())

  03aad	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+16
  03ab3	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+12
  03ab9	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  03abe	f7 e9		 imul	 ecx
  03ac0	c1 fa 06	 sar	 edx, 6
  03ac3	8b c2		 mov	 eax, edx
  03ac5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03ac8	03 c2		 add	 eax, edx
  03aca	75 1c		 jne	 SHORT $LN193@MainDialog

; 6881 : 					{
; 6882 : 						Warning ("FOUND_NO_PARTITION_W_DEFERRED_INPLACE_ENC");

  03acc	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@
  03ad1	e8 00 00 00 00	 call	 _Warning
  03ad6	83 c4 04	 add	 esp, 4

; 6883 : 
; 6884 : 						NormalCursor();

  03ad9	e8 00 00 00 00	 call	 _NormalCursor
  03ade	b8 01 00 00 00	 mov	 eax, 1
  03ae3	e9 c2 c5 ff ff	 jmp	 $LN512@MainDialog
$LN193@MainDialog:

; 6885 : 						return 1;
; 6886 : 					}
; 6887 : 					else if (DeferredNonSysInPlaceEncDevices.size() == 1)

  03ae8	83 f8 01	 cmp	 eax, 1
  03aeb	0f 85 6d 00 00
	00		 jne	 $LN191@MainDialog

; 6888 : 					{
; 6889 : 						CreateFullVolumePath (szDiskFile, DeferredNonSysInPlaceEncDevices.front().Path.c_str(), &tmpbDevice);

  03af1	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  03af6	e8 00 00 00 00	 call	 ?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::front
  03afb	83 c0 40	 add	 eax, 64			; 00000040H
  03afe	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  03b01	72 05		 jb	 SHORT $LN924@MainDialog
  03b03	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03b06	eb 03		 jmp	 SHORT $LN925@MainDialog
$LN924@MainDialog:
  03b08	83 c0 04	 add	 eax, 4
$LN925@MainDialog:
  03b0b	8d 4d d4	 lea	 ecx, DWORD PTR _tmpbDevice$134538[ebp]
  03b0e	51		 push	 ecx
  03b0f	50		 push	 eax
  03b10	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03b15	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 6890 : 
; 6891 : 						nVolumeSize = GetDeviceSize (szDiskFile);

  03b1a	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03b1f	e8 00 00 00 00	 call	 _GetDeviceSize
  03b24	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 6892 : 						if (nVolumeSize == -1)

  03b29	23 c2		 and	 eax, edx
  03b2b	83 c4 10	 add	 esp, 16			; 00000010H
  03b2e	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  03b34	83 f8 ff	 cmp	 eax, -1
  03b37	75 1e		 jne	 SHORT $LN190@MainDialog

; 6893 : 						{
; 6894 : 							handleWin32Error (MainDlg);

  03b39	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  03b3f	52		 push	 edx
  03b40	e8 00 00 00 00	 call	 _handleWin32Error
  03b45	83 c4 04	 add	 esp, 4

; 6895 : 							NormalCursor();

  03b48	e8 00 00 00 00	 call	 _NormalCursor
  03b4d	b8 01 00 00 00	 mov	 eax, 1
  03b52	e9 53 c5 ff ff	 jmp	 $LN512@MainDialog
$LN190@MainDialog:

; 6896 : 							return 1;
; 6897 : 						}
; 6898 : 
; 6899 : 						nNewPageNo = NONSYS_INPLACE_ENC_ENCRYPTION_PAGE - 1;	// Skip irrelevant pages

  03b57	c7 45 ec 23 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 35 ; 00000023H
$LN191@MainDialog:

; 6900 : 					}
; 6901 : 
; 6902 : 					NormalCursor();

  03b5e	e8 00 00 00 00	 call	 _NormalCursor
$LN204@MainDialog:

; 7525 : 				}
; 7526 : 				return 1;
; 7527 : 			}
; 7528 : 
; 7529 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  03b63	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03b66	40		 inc	 eax
  03b67	50		 push	 eax
  03b68	53		 push	 ebx
  03b69	e8 00 00 00 00	 call	 _LoadPage
  03b6e	83 c4 08	 add	 esp, 8
  03b71	b8 01 00 00 00	 mov	 eax, 1
  03b76	e9 2f c5 ff ff	 jmp	 $LN512@MainDialog
$LN392@MainDialog:

; 7530 : ovf_end:
; 7531 : 			return 1;
; 7532 : 		}
; 7533 : 		else if (lw == IDC_PREV)

  03b7b	ba 11 04 00 00	 mov	 edx, 1041		; 00000411H
  03b80	66 3b ca	 cmp	 cx, dx
  03b83	0f 85 1f c5 ff
	ff		 jne	 $LN510@MainDialog

; 7534 : 		{
; 7535 : 			if (nCurPageNo == SYSENC_SPAN_PAGE)

  03b89	83 f8 03	 cmp	 eax, 3
  03b8c	75 13		 jne	 SHORT $LN66@MainDialog

; 7536 : 			{
; 7537 : 				// Skip irrelevant pages when going back
; 7538 : 				if (!bHiddenOS)

  03b8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03b93	85 c0		 test	 eax, eax

; 7539 : 					nNewPageNo = SYSENC_TYPE_PAGE + 1;

  03b95	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03b9a	75 05		 jne	 SHORT $LN66@MainDialog
  03b9c	8b f7		 mov	 esi, edi
  03b9e	89 7d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edi
$LN66@MainDialog:

; 7540 : 			}
; 7541 : 			if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  03ba1	83 f8 06	 cmp	 eax, 6
  03ba4	75 49		 jne	 SHORT $LN65@MainDialog

; 7542 : 			{
; 7543 : 				// Skip the drive analysis page(s) or other irrelevant pages when going back
; 7544 : 				if (bHiddenOS)

  03ba6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03bac	85 c9		 test	 ecx, ecx
  03bae	74 1a		 je	 SHORT $LN64@MainDialog

; 7545 : 					nNewPageNo = SYSENC_HIDDEN_OS_REQ_CHECK_PAGE + 1;

  03bb0	be 03 00 00 00	 mov	 esi, 3

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03bb5	4e		 dec	 esi
  03bb6	56		 push	 esi
  03bb7	53		 push	 ebx
  03bb8	e8 00 00 00 00	 call	 _LoadPage
  03bbd	83 c4 08	 add	 esp, 8
$ovf_end_6$134758:
  03bc0	b8 01 00 00 00	 mov	 eax, 1
  03bc5	e9 e0 c4 ff ff	 jmp	 $LN512@MainDialog
$LN64@MainDialog:

; 7546 : 				else if (bWholeSysDrive)

  03bca	33 d2		 xor	 edx, edx
  03bcc	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, edx ; bWholeSysDrive
  03bd2	0f 95 c2	 setne	 dl
  03bd5	83 c2 04	 add	 edx, 4
  03bd8	8b f2		 mov	 esi, edx

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03bda	4e		 dec	 esi
  03bdb	56		 push	 esi
  03bdc	53		 push	 ebx
  03bdd	e8 00 00 00 00	 call	 _LoadPage
  03be2	83 c4 08	 add	 esp, 8
$ovf_end_7$134758:
  03be5	b8 01 00 00 00	 mov	 eax, 1
  03bea	e9 bb c4 ff ff	 jmp	 $LN512@MainDialog
$LN65@MainDialog:

; 7547 : 					nNewPageNo = SYSENC_PRE_DRIVE_ANALYSIS_PAGE + 1;	
; 7548 : 				else
; 7549 : 					nNewPageNo = SYSENC_SPAN_PAGE + 1;	
; 7550 : 			}
; 7551 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE)

  03bef	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  03bf2	75 27		 jne	 SHORT $LN59@MainDialog

; 7552 : 			{
; 7553 : 				if (SysEncMultiBootCfg.NumberOfSysDrives == 1)

  03bf4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, 1
  03bfb	0f 85 d0 06 00
	00		 jne	 $LN16@MainDialog

; 7554 : 				{
; 7555 : 					// We can skip SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE (it is implied that there are multiple systems on the drive)
; 7556 : 					nNewPageNo = SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE + 1;

  03c01	be 09 00 00 00	 mov	 esi, 9

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03c06	4e		 dec	 esi
  03c07	56		 push	 esi
  03c08	53		 push	 ebx
  03c09	e8 00 00 00 00	 call	 _LoadPage
  03c0e	83 c4 08	 add	 esp, 8
$ovf_end_8$134758:
  03c11	b8 01 00 00 00	 mov	 eax, 1
  03c16	e9 8f c4 ff ff	 jmp	 $LN512@MainDialog
$LN59@MainDialog:

; 7557 : 				}
; 7558 : 			}
; 7559 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PRE_CIPHER_PAGE)

  03c1b	83 f8 10	 cmp	 eax, 16			; 00000010H
  03c1e	0f 85 bb 00 00
	00		 jne	 $LN56@MainDialog

; 7560 : 			{
; 7561 : 				if (bHiddenOS)

  03c24	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03c29	85 c0		 test	 eax, eax
  03c2b	0f 84 94 00 00
	00		 je	 $LN55@MainDialog

; 7562 : 				{
; 7563 : 					if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  03c31	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  03c37	3b cf		 cmp	 ecx, edi
  03c39	74 5b		 je	 SHORT $LN1038@MainDialog
  03c3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  03c41	e8 00 00 00 00	 call	 _CreateSysEncMutex
  03c46	85 c0		 test	 eax, eax
  03c48	75 1c		 jne	 SHORT $LN1034@MainDialog
  03c4a	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  03c4f	e8 00 00 00 00	 call	 _Error
  03c54	83 c4 04	 add	 esp, 4
  03c57	e8 00 00 00 00	 call	 _NormalCursor
  03c5c	b8 01 00 00 00	 mov	 eax, 1
  03c61	e9 44 c4 ff ff	 jmp	 $LN512@MainDialog
$LN1034@MainDialog:
  03c66	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  03c6b	33 c0		 xor	 eax, eax
  03c6d	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
  03c72	a2 00 00 00 00	 mov	 BYTE PTR ?szFileName@@3PADA, al
  03c77	a2 00 00 00 00	 mov	 BYTE PTR ?szDiskFile@@3PADA, al
  03c7c	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  03c81	a3 04 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, eax
  03c86	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  03c8b	a3 04 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, eax
  03c90	89 3d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, edi
$LN1038@MainDialog:
  03c96	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  03c9b	f7 d8		 neg	 eax

; 7564 : 					{
; 7565 : 						NormalCursor ();
; 7566 : 						return 1;
; 7567 : 					}
; 7568 : 
; 7569 : 					// Skip irrelevant pages.
; 7570 : 					// Note that we're ignoring nMultiBoot here, as the multi-boot question pages are skipped
; 7571 : 					// when creating a hidden OS (only a single message box is displayed with requirements).
; 7572 : 					nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE + 1;		

  03c9d	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 7

; 7690 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;

  03ca4	8b 75 ec	 mov	 esi, DWORD PTR _nNewPageNo$[ebp]
  03ca7	1b c0		 sbb	 eax, eax

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03ca9	4e		 dec	 esi
  03caa	f7 d8		 neg	 eax
  03cac	56		 push	 esi
  03cad	53		 push	 ebx
  03cae	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice
  03cb3	e8 00 00 00 00	 call	 _LoadPage
  03cb8	83 c4 08	 add	 esp, 8
$ovf_end_9$134758:
  03cbb	b8 01 00 00 00	 mov	 eax, 1
  03cc0	e9 e5 c3 ff ff	 jmp	 $LN512@MainDialog
$LN55@MainDialog:

; 7573 : 				}
; 7574 : 				else
; 7575 : 				{
; 7576 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;

  03cc5	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03cca	4e		 dec	 esi
  03ccb	56		 push	 esi
  03ccc	53		 push	 ebx
  03ccd	e8 00 00 00 00	 call	 _LoadPage
  03cd2	83 c4 08	 add	 esp, 8
$ovf_end_10$134758:
  03cd5	b8 01 00 00 00	 mov	 eax, 1
  03cda	e9 cb c3 ff ff	 jmp	 $LN512@MainDialog
$LN56@MainDialog:

; 7577 : 				}
; 7578 : 			}
; 7579 : 			else if (nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  03cdf	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  03ce2	75 3b		 jne	 SHORT $LN51@MainDialog

; 7580 : 			{
; 7581 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDVOL_WIZ_MODE_DIRECT)))

  03ce4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03cea	68 0c 04 00 00	 push	 1036			; 0000040cH
  03cef	51		 push	 ecx
  03cf0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03cf6	50		 push	 eax
  03cf7	e8 00 00 00 00	 call	 _IsButtonChecked
  03cfc	83 c4 04	 add	 esp, 4
  03cff	f7 d8		 neg	 eax
  03d01	1b c0		 sbb	 eax, eax

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03d03	4e		 dec	 esi
  03d04	f7 d8		 neg	 eax
  03d06	56		 push	 esi
  03d07	53		 push	 ebx
  03d08	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax
  03d0d	e8 00 00 00 00	 call	 _LoadPage
  03d12	83 c4 08	 add	 esp, 8
$ovf_end_11$134758:
  03d15	b8 01 00 00 00	 mov	 eax, 1
  03d1a	e9 8b c3 ff ff	 jmp	 $LN512@MainDialog
$LN51@MainDialog:

; 7582 : 					bHiddenVolDirect = TRUE;
; 7583 : 				else
; 7584 : 					bHiddenVolDirect = FALSE;
; 7585 : 			}
; 7586 : 			else if (nCurPageNo == VOLUME_TYPE_PAGE)

  03d1f	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  03d22	75 28		 jne	 SHORT $LN47@MainDialog

; 7587 : 			{
; 7588 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)

  03d24	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  03d2a	3b d7		 cmp	 edx, edi
  03d2c	0f 84 9c 05 00
	00		 je	 $LN1190@MainDialog

; 7589 : 					nNewPageNo = INTRO_PAGE + 1;	// Skip irrelevant pages

  03d32	be 01 00 00 00	 mov	 esi, 1

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03d37	4e		 dec	 esi
  03d38	56		 push	 esi
  03d39	53		 push	 ebx
  03d3a	e8 00 00 00 00	 call	 _LoadPage
  03d3f	83 c4 08	 add	 esp, 8
$ovf_end_12$134758:
  03d42	b8 01 00 00 00	 mov	 eax, 1
  03d47	e9 5e c3 ff ff	 jmp	 $LN512@MainDialog
$LN47@MainDialog:

; 7590 : 			}
; 7591 : 			else if (nCurPageNo == VOLUME_LOCATION_PAGE)

  03d4c	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  03d4f	0f 85 95 00 00
	00		 jne	 $LN44@MainDialog

; 7592 : 			{
; 7593 : 				BOOL tmpbDevice;
; 7594 : 
; 7595 : 				GetWindowText (GetDlgItem (hCurPage, IDC_COMBO_BOX), szFileName, sizeof (szFileName));

  03d55	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03d5a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03d60	68 05 01 00 00	 push	 261			; 00000105H
  03d65	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03d6a	68 ea 03 00 00	 push	 1002			; 000003eaH
  03d6f	50		 push	 eax
  03d70	ff d6		 call	 esi
  03d72	50		 push	 eax
  03d73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7596 : 				CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  03d79	8d 4d c4	 lea	 ecx, DWORD PTR _tmpbDevice$134796[ebp]
  03d7c	51		 push	 ecx
  03d7d	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03d82	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03d87	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 7597 : 
; 7598 : 				if (tmpbDevice == bDevice)

  03d8c	8b 55 c4	 mov	 edx, DWORD PTR _tmpbDevice$134796[ebp]
  03d8f	83 c4 0c	 add	 esp, 12			; 0000000cH
  03d92	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?bDevice@@3HA ; bDevice
  03d98	75 28		 jne	 SHORT $LN43@MainDialog

; 7599 : 				{
; 7600 : 					MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  03d9a	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  03d9f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03da5	50		 push	 eax
  03da6	68 ea 03 00 00	 push	 1002			; 000003eaH
  03dab	51		 push	 ecx
  03dac	ff d6		 call	 esi
  03dae	50		 push	 eax
  03daf	e8 00 00 00 00	 call	 _MoveEditToCombo

; 7601 : 					SaveSettings (hCurPage);

  03db4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  03dba	83 c4 08	 add	 esp, 8
  03dbd	e8 00 00 00 00	 call	 _SaveSettings
$LN43@MainDialog:

; 7602 : 				}
; 7603 : 
; 7604 : 				if (!bHiddenVol)

  03dc2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03dc8	85 d2		 test	 edx, edx
  03dca	0f 85 fe 04 00
	00		 jne	 $LN1190@MainDialog

; 7605 : 					nNewPageNo = VOLUME_TYPE_PAGE + 1;		// Skip the hidden volume creation wizard mode selection

  03dd0	be 0d 00 00 00	 mov	 esi, 13			; 0000000dH

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03dd5	4e		 dec	 esi
  03dd6	56		 push	 esi
  03dd7	53		 push	 ebx
  03dd8	e8 00 00 00 00	 call	 _LoadPage
  03ddd	83 c4 08	 add	 esp, 8
$ovf_end_13$134758:
  03de0	b8 01 00 00 00	 mov	 eax, 1
  03de5	e9 c0 c2 ff ff	 jmp	 $LN512@MainDialog
$LN44@MainDialog:

; 7606 : 			}
; 7607 : 
; 7608 : 			else if (nCurPageNo == CIPHER_PAGE)

  03dea	83 f8 12	 cmp	 eax, 18			; 00000012H
  03ded	0f 85 13 01 00
	00		 jne	 $LN40@MainDialog

; 7609 : 			{
; 7610 : 				LPARAM nIndex;
; 7611 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  03df3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03df8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03dfe	6a 00		 push	 0
  03e00	6a 00		 push	 0
  03e02	68 47 01 00 00	 push	 327			; 00000147H
  03e07	68 ea 03 00 00	 push	 1002			; 000003eaH
  03e0c	50		 push	 eax
  03e0d	ff d6		 call	 esi
  03e0f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03e15	50		 push	 eax
  03e16	ff d7		 call	 edi

; 7612 : 				nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  03e18	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03e1e	6a 00		 push	 0
  03e20	50		 push	 eax
  03e21	68 50 01 00 00	 push	 336			; 00000150H
  03e26	68 ea 03 00 00	 push	 1002			; 000003eaH
  03e2b	51		 push	 ecx
  03e2c	ff d6		 call	 esi
  03e2e	50		 push	 eax
  03e2f	ff d7		 call	 edi

; 7613 : 
; 7614 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0);

  03e31	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  03e37	6a 00		 push	 0
  03e39	6a 00		 push	 0
  03e3b	68 47 01 00 00	 push	 327			; 00000147H
  03e40	68 f0 03 00 00	 push	 1008			; 000003f0H
  03e45	52		 push	 edx
  03e46	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA
  03e4b	ff d6		 call	 esi
  03e4d	50		 push	 eax
  03e4e	ff d7		 call	 edi

; 7615 : 				hash_algo = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, nIndex, 0);

  03e50	6a 00		 push	 0
  03e52	50		 push	 eax
  03e53	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03e58	68 50 01 00 00	 push	 336			; 00000150H
  03e5d	68 f0 03 00 00	 push	 1008			; 000003f0H
  03e62	50		 push	 eax
  03e63	ff d6		 call	 esi
  03e65	50		 push	 eax
  03e66	ff d7		 call	 edi

; 7616 : 
; 7617 : 				RandSetHashFunction (hash_algo);

  03e68	50		 push	 eax
  03e69	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
  03e6e	e8 00 00 00 00	 call	 _RandSetHashFunction

; 7618 : 
; 7619 : 				if (WizardMode == WIZARD_MODE_SYS_DEVICE)

  03e73	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  03e79	83 c4 04	 add	 esp, 4
  03e7c	83 f9 02	 cmp	 ecx, 2
  03e7f	75 2a		 jne	 SHORT $LN39@MainDialog

; 7620 : 				{
; 7621 : 					if (nMultiBoot > 1)

  03e81	33 d2		 xor	 edx, edx
  03e83	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  03e8a	0f 9e c2	 setle	 dl
  03e8d	4a		 dec	 edx
  03e8e	83 e2 05	 and	 edx, 5
  03e91	83 c2 07	 add	 edx, 7

; 7622 : 						nNewPageNo = SYSENC_MULTI_BOOT_OUTCOME_PAGE + 1;	// Skip irrelevant pages
; 7623 : 					else
; 7624 : 						nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE + 1;		// Skip irrelevant pages

  03e94	8b f2		 mov	 esi, edx

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03e96	4e		 dec	 esi
  03e97	56		 push	 esi
  03e98	53		 push	 ebx
  03e99	e8 00 00 00 00	 call	 _LoadPage
  03e9e	83 c4 08	 add	 esp, 8
$ovf_end_14$134758:
  03ea1	b8 01 00 00 00	 mov	 eax, 1
  03ea6	e9 ff c1 ff ff	 jmp	 $LN512@MainDialog
$LN39@MainDialog:

; 7625 : 				}
; 7626 : 				else if (!bHiddenVol)

  03eab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03eb0	85 c0		 test	 eax, eax
  03eb2	75 25		 jne	 SHORT $LN35@MainDialog

; 7627 : 					nNewPageNo = (bDevice ? DEVICE_TRANSFORM_MODE_PAGE : VOLUME_LOCATION_PAGE) + 1;	

  03eb4	33 c9		 xor	 ecx, ecx
  03eb6	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice
  03ebc	0f 95 c1	 setne	 cl
  03ebf	83 c1 0f	 add	 ecx, 15			; 0000000fH
  03ec2	8b f1		 mov	 esi, ecx

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03ec4	4e		 dec	 esi
  03ec5	56		 push	 esi
  03ec6	53		 push	 ebx
  03ec7	e8 00 00 00 00	 call	 _LoadPage
  03ecc	83 c4 08	 add	 esp, 8
$ovf_end_15$134758:
  03ecf	b8 01 00 00 00	 mov	 eax, 1
  03ed4	e9 d1 c1 ff ff	 jmp	 $LN512@MainDialog
$LN35@MainDialog:

; 7628 : 				else if (bHiddenVolHost)

  03ed9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03edf	85 d2		 test	 edx, edx
  03ee1	0f 84 e7 03 00
	00		 je	 $LN1190@MainDialog

; 7629 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE + 1;		// Skip the info on the hidden volume

  03ee7	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7690 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;

  03eee	8b 75 ec	 mov	 esi, DWORD PTR _nNewPageNo$[ebp]

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03ef1	4e		 dec	 esi
  03ef2	56		 push	 esi
  03ef3	53		 push	 ebx
  03ef4	e8 00 00 00 00	 call	 _LoadPage
  03ef9	83 c4 08	 add	 esp, 8
$ovf_end_16$134758:
  03efc	b8 01 00 00 00	 mov	 eax, 1
  03f01	e9 a4 c1 ff ff	 jmp	 $LN512@MainDialog
$LN40@MainDialog:

; 7630 : 			}
; 7631 : 
; 7632 : 			else if (nCurPageNo == SIZE_PAGE)

  03f06	83 f8 13	 cmp	 eax, 19			; 00000013H
  03f09	75 25		 jne	 SHORT $LN31@MainDialog

; 7633 : 			{
; 7634 : 				VerifySizeAndUpdate (hCurPage, TRUE);

  03f0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03f11	6a 01		 push	 1
  03f13	e8 00 00 00 00	 call	 _VerifySizeAndUpdate
  03f18	83 c4 04	 add	 esp, 4

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03f1b	4e		 dec	 esi
  03f1c	56		 push	 esi
  03f1d	53		 push	 ebx
  03f1e	e8 00 00 00 00	 call	 _LoadPage
  03f23	83 c4 08	 add	 esp, 8
$ovf_end_17$134758:
  03f26	b8 01 00 00 00	 mov	 eax, 1
  03f2b	e9 7a c1 ff ff	 jmp	 $LN512@MainDialog
$LN31@MainDialog:

; 7635 : 			}
; 7636 : 
; 7637 : 			else if (nCurPageNo == FILESYS_PAGE)

  03f30	83 f8 16	 cmp	 eax, 22			; 00000016H
  03f33	75 36		 jne	 SHORT $LN29@MainDialog

; 7638 : 			{
; 7639 : 				if (nNeedToStoreFilesOver4GB != Get2RadButtonPageAnswer())

  03f35	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  03f3a	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  03f40	74 0a		 je	 SHORT $LN28@MainDialog

; 7640 : 					fileSystem = FILESYS_NONE;	// The user may have gone back and changed the answer, so default file system must be reselected

  03f42	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem
$LN28@MainDialog:

; 7641 : 	
; 7642 : 				nNeedToStoreFilesOver4GB = Get2RadButtonPageAnswer();

  03f4c	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03f51	4e		 dec	 esi
  03f52	56		 push	 esi
  03f53	53		 push	 ebx
  03f54	a3 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  03f59	e8 00 00 00 00	 call	 _LoadPage
  03f5e	83 c4 08	 add	 esp, 8
$ovf_end_18$134758:
  03f61	b8 01 00 00 00	 mov	 eax, 1
  03f66	e9 3f c1 ff ff	 jmp	 $LN512@MainDialog
$LN29@MainDialog:

; 7643 : 			}
; 7644 : 
; 7645 : 			else if (nCurPageNo == PASSWORD_PAGE)

  03f6b	83 f8 15	 cmp	 eax, 21			; 00000015H
  03f6e	0f 85 45 01 00
	00		 jne	 $LN26@MainDialog

; 7646 : 			{
; 7647 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 7648 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword, sizeof (szRawPassword));

  03f74	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03f79	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03f7f	6a 41		 push	 65			; 00000041H
  03f81	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  03f86	68 ec 03 00 00	 push	 1004			; 000003ecH
  03f8b	50		 push	 eax
  03f8c	ff d6		 call	 esi
  03f8e	50		 push	 eax
  03f8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7649 : 
; 7650 : 				VerifyPasswordAndUpdate (hwndDlg, GetDlgItem (MainDlg, IDC_NEXT),
; 7651 : 					GetDlgItem (hCurPage, IDC_PASSWORD),
; 7652 : 					GetDlgItem (hCurPage, IDC_VERIFY),
; 7653 : 					volumePassword.Text,
; 7654 : 					szVerify,
; 7655 : 					KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect ());

  03f95	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  03f9c	74 19		 je	 SHORT $LN536@MainDialog
  03f9e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  03fa5	74 10		 je	 SHORT $LN536@MainDialog
  03fa7	e8 00 00 00 00	 call	 _SysEncInEffect
  03fac	85 c0		 test	 eax, eax
  03fae	75 07		 jne	 SHORT $LN536@MainDialog
  03fb0	b8 01 00 00 00	 mov	 eax, 1
  03fb5	eb 02		 jmp	 SHORT $LN537@MainDialog
$LN536@MainDialog:
  03fb7	33 c0		 xor	 eax, eax
$LN537@MainDialog:
  03fb9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03fbf	50		 push	 eax
  03fc0	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  03fc5	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  03fca	68 f2 03 00 00	 push	 1010			; 000003f2H
  03fcf	51		 push	 ecx
  03fd0	ff d6		 call	 esi
  03fd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  03fd8	50		 push	 eax
  03fd9	68 ec 03 00 00	 push	 1004			; 000003ecH
  03fde	52		 push	 edx
  03fdf	ff d6		 call	 esi
  03fe1	50		 push	 eax
  03fe2	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  03fe7	68 10 04 00 00	 push	 1040			; 00000410H
  03fec	50		 push	 eax
  03fed	ff d6		 call	 esi
  03fef	50		 push	 eax
  03ff0	53		 push	 ebx
  03ff1	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate

; 7656 : 
; 7657 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  03ff6	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  03ffb	83 c4 1c	 add	 esp, 28			; 0000001cH
  03ffe	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1142@MainDialog:
  04001	8a 08		 mov	 cl, BYTE PTR [eax]
  04003	40		 inc	 eax
  04004	84 c9		 test	 cl, cl
  04006	75 f9		 jne	 SHORT $LL1142@MainDialog
  04008	2b c2		 sub	 eax, edx
  0400a	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 7658 : 
; 7659 : 				nNewPageNo = SIZE_PAGE + 1;		// Skip the hidden volume host password page

  0400f	be 14 00 00 00	 mov	 esi, 20			; 00000014H

; 7660 : 
; 7661 : 				if (SysEncInEffect ())

  04014	e8 00 00 00 00	 call	 _SysEncInEffect
  04019	85 c0		 test	 eax, eax
  0401b	0f 84 70 00 00
	00		 je	 $LN25@MainDialog

; 7662 : 				{
; 7663 : 					nNewPageNo = CIPHER_PAGE + 1;				// Skip irrelevant pages
; 7664 : 
; 7665 : 					KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  04021	68 04 01 00 00	 push	 260			; 00000104H
  04026	53		 push	 ebx
  04027	be 13 00 00 00	 mov	 esi, 19			; 00000013H
  0402c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7666 : 
; 7667 : 					if (bKeyboardLayoutChanged)

  04032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  04039	0f 84 92 02 00
	00		 je	 $LN16@MainDialog

; 7668 : 					{
; 7669 : 						// Restore the original keyboard layout
; 7670 : 						if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  0403f	6a 03		 push	 3
  04041	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  04046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  0404c	85 c0		 test	 eax, eax
  0404e	75 22		 jne	 SHORT $LN23@MainDialog

; 7671 : 							Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  04050	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  04055	e8 00 00 00 00	 call	 _Warning
  0405a	83 c4 04	 add	 esp, 4

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  0405d	4e		 dec	 esi
  0405e	56		 push	 esi
  0405f	53		 push	 ebx
  04060	e8 00 00 00 00	 call	 _LoadPage
  04065	83 c4 08	 add	 esp, 8
$ovf_end_19$134758:
  04068	b8 01 00 00 00	 mov	 eax, 1
  0406d	e9 38 c0 ff ff	 jmp	 $LN512@MainDialog
$LN23@MainDialog:
  04072	4e		 dec	 esi
  04073	56		 push	 esi
  04074	53		 push	 ebx
  04075	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  0407f	e8 00 00 00 00	 call	 _LoadPage
  04084	83 c4 08	 add	 esp, 8
$ovf_end_20$134758:
  04087	b8 01 00 00 00	 mov	 eax, 1
  0408c	e9 19 c0 ff ff	 jmp	 $LN512@MainDialog
$LN25@MainDialog:

; 7672 : 						else
; 7673 : 							bKeyboardLayoutChanged = FALSE;
; 7674 : 					}
; 7675 : 				}
; 7676 : 				else if (bInPlaceEncNonSys)

  04091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  04097	85 c9		 test	 ecx, ecx
  04099	0f 84 32 02 00
	00		 je	 $LN16@MainDialog

; 7677 : 					nNewPageNo = CIPHER_PAGE + 1;

  0409f	be 13 00 00 00	 mov	 esi, 19			; 00000013H

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  040a4	4e		 dec	 esi
  040a5	56		 push	 esi
  040a6	53		 push	 ebx
  040a7	e8 00 00 00 00	 call	 _LoadPage
  040ac	83 c4 08	 add	 esp, 8
$ovf_end_21$134758:
  040af	b8 01 00 00 00	 mov	 eax, 1
  040b4	e9 f1 bf ff ff	 jmp	 $LN512@MainDialog
$LN26@MainDialog:

; 7678 : 			}
; 7679 : 
; 7680 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 7681 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  040b9	83 f8 14	 cmp	 eax, 20			; 00000014H
  040bc	0f 84 a8 01 00
	00		 je	 $LN17@MainDialog
  040c2	83 f8 20	 cmp	 eax, 32			; 00000020H
  040c5	0f 84 9f 01 00
	00		 je	 $LN17@MainDialog

; 7691 : 			}
; 7692 : 
; 7693 : 			else if (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE
; 7694 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE)

  040cb	83 f8 17	 cmp	 eax, 23			; 00000017H
  040ce	0f 84 40 01 00
	00		 je	 $LN13@MainDialog
  040d4	83 f8 22	 cmp	 eax, 34			; 00000022H
  040d7	0f 84 37 01 00
	00		 je	 $LN13@MainDialog

; 7706 : 			}
; 7707 : 
; 7708 : 			else if (nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  040dd	83 f8 18	 cmp	 eax, 24			; 00000018H
  040e0	75 54		 jne	 SHORT $LN11@MainDialog

; 7709 : 			{
; 7710 : 				char tmp[KEY_GUI_VIEW_SIZE+1];
; 7711 : 
; 7712 : 				// Attempt to wipe the GUI fields showing portions of the master and header keys
; 7713 : 				memset (tmp, 'X', sizeof(tmp));

  040e2	6a 41		 push	 65			; 00000041H
  040e4	8d 95 74 c8 00
	00		 lea	 edx, DWORD PTR _tmp$134835[ebp]
  040ea	6a 58		 push	 88			; 00000058H
  040ec	52		 push	 edx
  040ed	e8 00 00 00 00	 call	 _memset

; 7714 : 				tmp [sizeof(tmp)-1] = 0;
; 7715 : 				SetWindowText (hMasterKey, tmp);

  040f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hMasterKey
  040f8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  040fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  04101	8d 85 74 c8 00
	00		 lea	 eax, DWORD PTR _tmp$134835[ebp]
  04107	50		 push	 eax
  04108	51		 push	 ecx
  04109	c6 85 b4 c8 00
	00 00		 mov	 BYTE PTR _tmp$134835[ebp+64], 0
  04110	ff d7		 call	 edi

; 7716 : 				SetWindowText (hHeaderKey, tmp);

  04112	a1 00 00 00 00	 mov	 eax, DWORD PTR _hHeaderKey
  04117	8d 95 74 c8 00
	00		 lea	 edx, DWORD PTR _tmp$134835[ebp]
  0411d	52		 push	 edx
  0411e	50		 push	 eax
  0411f	ff d7		 call	 edi

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  04121	4e		 dec	 esi
  04122	56		 push	 esi
  04123	53		 push	 ebx
  04124	e8 00 00 00 00	 call	 _LoadPage
  04129	83 c4 08	 add	 esp, 8
$ovf_end_22$134758:
  0412c	b8 01 00 00 00	 mov	 eax, 1
  04131	e9 74 bf ff ff	 jmp	 $LN512@MainDialog
$LN11@MainDialog:

; 7717 : 			}
; 7718 : 
; 7719 : 			else if (nCurPageNo == SYSENC_WIPE_MODE_PAGE)

  04136	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  04139	75 27		 jne	 SHORT $LN9@MainDialog

; 7720 : 			{
; 7721 : 				if (bDontVerifyRescueDisk)

  0413b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  04142	0f 84 86 01 00
	00		 je	 $LN1190@MainDialog

; 7722 : 					nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;	// Skip irrelevant pages

  04148	be 1b 00 00 00	 mov	 esi, 27			; 0000001bH

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  0414d	4e		 dec	 esi
  0414e	56		 push	 esi
  0414f	53		 push	 ebx
  04150	e8 00 00 00 00	 call	 _LoadPage
  04155	83 c4 08	 add	 esp, 8
$ovf_end_23$134758:
  04158	b8 01 00 00 00	 mov	 eax, 1
  0415d	e9 48 bf ff ff	 jmp	 $LN512@MainDialog
$LN9@MainDialog:

; 7723 : 			}
; 7724 : 
; 7725 : 			else if (nCurPageNo == FORMAT_PAGE)

  04162	83 f8 26	 cmp	 eax, 38			; 00000026H
  04165	0f 85 63 01 00
	00		 jne	 $LN1190@MainDialog

; 7726 : 			{
; 7727 : 				char tmp[RNG_POOL_SIZE*2+1];
; 7728 : 
; 7729 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  0416b	68 ff 00 00 00	 push	 255			; 000000ffH
  04170	53		 push	 ebx
  04171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7730 : 
; 7731 : 				// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 7732 : 				memset (tmp, 'X', sizeof(tmp));

  04177	68 81 02 00 00	 push	 641			; 00000281H
  0417c	8d 8d 80 be 00
	00		 lea	 ecx, DWORD PTR _tmp$134841[ebp]
  04182	6a 58		 push	 88			; 00000058H
  04184	51		 push	 ecx
  04185	e8 00 00 00 00	 call	 _memset

; 7733 : 				tmp [sizeof(tmp)-1] = 0;
; 7734 : 				SetWindowText (hRandPool, tmp);

  0418a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  0418f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  04195	83 c4 0c	 add	 esp, 12			; 0000000cH
  04198	8d 95 80 be 00
	00		 lea	 edx, DWORD PTR _tmp$134841[ebp]
  0419e	52		 push	 edx
  0419f	50		 push	 eax
  041a0	c6 85 00 c1 00
	00 00		 mov	 BYTE PTR _tmp$134841[ebp+640], 0
  041a7	ff d6		 call	 esi

; 7735 : 				SetWindowText (hMasterKey, tmp);

  041a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  041af	8d 8d 80 be 00
	00		 lea	 ecx, DWORD PTR _tmp$134841[ebp]
  041b5	51		 push	 ecx
  041b6	52		 push	 edx
  041b7	ff d6		 call	 esi

; 7736 : 				SetWindowText (hHeaderKey, tmp);

  041b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  041bf	8d 85 80 be 00
	00		 lea	 eax, DWORD PTR _tmp$134841[ebp]
  041c5	50		 push	 eax
  041c6	51		 push	 ecx
  041c7	ff d6		 call	 esi

; 7737 : 
; 7738 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)

  041c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  041cf	3b d7		 cmp	 edx, edi
  041d1	0f 84 f7 00 00
	00		 je	 $LN1190@MainDialog

; 7739 : 				{
; 7740 : 					// Skip irrelevant pages
; 7741 : 
; 7742 : 					if (FileSize4GBLimitQuestionNeeded ()
; 7743 : 						&& !CreatingHiddenSysVol()		// If we're creating a hidden volume for a hidden OS, we don't need to format it with any filesystem (the entire OS will be copied to the hidden volume sector by sector).
; 7744 : 						&& !bInPlaceEncNonSys)

  041d7	e8 00 00 00 00	 call	 ?FileSize4GBLimitQuestionNeeded@@YAHXZ ; FileSize4GBLimitQuestionNeeded
  041dc	85 c0		 test	 eax, eax
  041de	0f 84 6c 00 00
	00		 je	 $LN4@MainDialog
  041e4	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  041e9	85 c0		 test	 eax, eax
  041eb	0f 85 5f 00 00
	00		 jne	 $LN4@MainDialog
  041f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  041f6	85 c0		 test	 eax, eax
  041f8	75 56		 jne	 SHORT $LN4@MainDialog

; 7745 : 					{
; 7746 : 						nNewPageNo = FILESYS_PAGE + 1;

  041fa	be 17 00 00 00	 mov	 esi, 23			; 00000017H

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  041ff	4e		 dec	 esi
  04200	56		 push	 esi
  04201	53		 push	 ebx
  04202	e8 00 00 00 00	 call	 _LoadPage
  04207	83 c4 08	 add	 esp, 8
$ovf_end_24$134758:
  0420a	b8 01 00 00 00	 mov	 eax, 1
  0420f	e9 96 be ff ff	 jmp	 $LN512@MainDialog
$LN13@MainDialog:

; 7695 : 			{
; 7696 : 				char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 7697 : 
; 7698 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  04214	68 ff 00 00 00	 push	 255			; 000000ffH
  04219	53		 push	 ebx
  0421a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7699 : 
; 7700 : 				// Attempt to wipe the GUI field showing portions of randpool
; 7701 : 				memset (tmp, 'X', sizeof(tmp));

  04220	68 73 01 00 00	 push	 371			; 00000173H
  04225	8d 8d 00 c7 00
	00		 lea	 ecx, DWORD PTR _tmp$134832[ebp]
  0422b	6a 58		 push	 88			; 00000058H
  0422d	51		 push	 ecx
  0422e	e8 00 00 00 00	 call	 _memset

; 7702 : 				tmp [sizeof(tmp)-1] = 0;
; 7703 : 				SetWindowText (hRandPoolSys, tmp);

  04233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  04238	83 c4 0c	 add	 esp, 12			; 0000000cH
  0423b	8d 95 00 c7 00
	00		 lea	 edx, DWORD PTR _tmp$134832[ebp]
  04241	52		 push	 edx
  04242	50		 push	 eax
  04243	c6 85 72 c8 00
	00 00		 mov	 BYTE PTR _tmp$134832[ebp+370], 0
  0424a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN4@MainDialog:

; 7704 : 
; 7705 : 				nNewPageNo = PASSWORD_PAGE + 1;		// Skip irrelevant pages

  04250	be 16 00 00 00	 mov	 esi, 22			; 00000016H

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  04255	4e		 dec	 esi
  04256	56		 push	 esi
  04257	53		 push	 ebx
  04258	e8 00 00 00 00	 call	 _LoadPage
  0425d	83 c4 08	 add	 esp, 8
$ovf_end_25$134758:
  04260	b8 01 00 00 00	 mov	 eax, 1
  04265	e9 40 be ff ff	 jmp	 $LN512@MainDialog
$LN17@MainDialog:

; 7682 : 			{
; 7683 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 7684 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), szRawPassword, sizeof (szRawPassword));

  0426a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04270	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04276	6a 41		 push	 65			; 00000041H
  04278	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  0427d	68 0d 04 00 00	 push	 1037			; 0000040dH
  04282	51		 push	 ecx
  04283	ff d6		 call	 esi
  04285	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetWindowTextA@12
  0428b	50		 push	 eax
  0428c	ff d7		 call	 edi

; 7685 : 
; 7686 : 				GetWindowText (GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), (char *) volumePassword.Text, sizeof (volumePassword.Text));

  0428e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04294	6a 41		 push	 65			; 00000041H
  04296	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  0429b	68 0d 04 00 00	 push	 1037			; 0000040dH
  042a0	52		 push	 edx
  042a1	ff d6		 call	 esi
  042a3	50		 push	 eax
  042a4	ff d7		 call	 edi

; 7687 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  042a6	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  042ab	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  042ae	8b ff		 npad	 2
$LL1143@MainDialog:
  042b0	8a 08		 mov	 cl, BYTE PTR [eax]
  042b2	40		 inc	 eax
  042b3	84 c9		 test	 cl, cl
  042b5	75 f9		 jne	 SHORT $LL1143@MainDialog
  042b7	2b c2		 sub	 eax, edx
  042b9	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 7688 : 
; 7689 : 				if (!bInPlaceEncNonSys)

  042be	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  042c3	85 c0		 test	 eax, eax
  042c5	75 07		 jne	 SHORT $LN1190@MainDialog

; 7690 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;

  042c7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 15 ; 0000000fH
$LN1190@MainDialog:
  042ce	8b 75 ec	 mov	 esi, DWORD PTR _nNewPageNo$[ebp]
$LN16@MainDialog:

; 7747 : 					}
; 7748 : 					else
; 7749 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7750 : 				}
; 7751 : 			}
; 7752 : 
; 7753 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  042d1	4e		 dec	 esi
  042d2	56		 push	 esi
  042d3	53		 push	 ebx
  042d4	e8 00 00 00 00	 call	 _LoadPage
  042d9	83 c4 08	 add	 esp, 8
$ovf_end_26$134758:
  042dc	b8 01 00 00 00	 mov	 eax, 1
  042e1	e9 c4 bd ff ff	 jmp	 $LN512@MainDialog
$LN428@MainDialog:

; 5897 : 
; 5898 : 	case TC_APPMSG_VOL_TRANSFORM_THREAD_ENDED:
; 5899 : 
; 5900 : 		if (bInPlaceEncNonSys)

  042e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  042ec	85 c9		 test	 ecx, ecx
  042ee	74 20		 je	 SHORT $LN427@MainDialog

; 5901 : 		{
; 5902 : 			// In-place encryption was interrupted/paused (did not finish)
; 5903 : 
; 5904 : 			KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  042f0	68 01 01 00 00	 push	 257			; 00000101H
  042f5	53		 push	 ebx
  042f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5905 : 
; 5906 : 			UpdateNonSysInPlaceEncControls ();

  042fc	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls

; 5922 : 		}
; 5923 : 
; 5924 : 		NormalCursor ();

  04301	e8 00 00 00 00	 call	 _NormalCursor
  04306	b8 01 00 00 00	 mov	 eax, 1
  0430b	e9 9a bd ff ff	 jmp	 $LN512@MainDialog
$LN427@MainDialog:

; 5907 : 		}
; 5908 : 		else
; 5909 : 		{
; 5910 : 			// Format has been aborted (did not finish)
; 5911 : 
; 5912 : 			EnableWindow (GetDlgItem (hCurPage, IDC_QUICKFORMAT), (bDevice || bSparseFileSwitch) && !(bHiddenVol && !bHiddenVolHost));

  04310	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, edi ; bDevice
  04316	75 0a		 jne	 SHORT $LN516@MainDialog
  04318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  0431e	85 d2		 test	 edx, edx
  04320	74 13		 je	 SHORT $LN518@MainDialog
$LN516@MainDialog:
  04322	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  04327	85 c0		 test	 eax, eax
  04329	74 0e		 je	 SHORT $LN517@MainDialog
  0432b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  04331	85 c9		 test	 ecx, ecx
  04333	75 04		 jne	 SHORT $LN517@MainDialog
$LN518@MainDialog:
  04335	33 c0		 xor	 eax, eax
  04337	eb 05		 jmp	 SHORT $LN519@MainDialog
$LN517@MainDialog:
  04339	b8 01 00 00 00	 mov	 eax, 1
$LN519@MainDialog:
  0433e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04344	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0434a	50		 push	 eax
  0434b	68 ff 03 00 00	 push	 1023			; 000003ffH
  04350	52		 push	 edx
  04351	ff d6		 call	 esi
  04353	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  04359	50		 push	 eax
  0435a	ff d7		 call	 edi

; 5913 : 			EnableWindow (GetDlgItem (hCurPage, IDC_FILESYS), TRUE);

  0435c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04361	6a 01		 push	 1
  04363	68 05 04 00 00	 push	 1029			; 00000405H
  04368	50		 push	 eax
  04369	ff d6		 call	 esi
  0436b	50		 push	 eax
  0436c	ff d7		 call	 edi

; 5914 : 			EnableWindow (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), TRUE);

  0436e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04374	6a 01		 push	 1
  04376	68 04 04 00 00	 push	 1028			; 00000404H
  0437b	51		 push	 ecx
  0437c	ff d6		 call	 esi
  0437e	50		 push	 eax
  0437f	ff d7		 call	 edi

; 5915 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), TRUE);

  04381	6a 01		 push	 1
  04383	68 11 04 00 00	 push	 1041			; 00000411H
  04388	53		 push	 ebx
  04389	ff d6		 call	 esi
  0438b	50		 push	 eax
  0438c	ff d7		 call	 edi

; 5916 : 			EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  0438e	6a 01		 push	 1
  04390	6a 09		 push	 9
  04392	53		 push	 ebx
  04393	ff d6		 call	 esi
  04395	50		 push	 eax
  04396	ff d7		 call	 edi

; 5917 : 			EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  04398	6a 01		 push	 1
  0439a	6a 02		 push	 2
  0439c	53		 push	 ebx
  0439d	ff d6		 call	 esi
  0439f	50		 push	 eax
  043a0	ff d7		 call	 edi

; 5918 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  043a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  043a8	6a 00		 push	 0
  043aa	68 f8 03 00 00	 push	 1016			; 000003f8H
  043af	52		 push	 edx
  043b0	ff d6		 call	 esi
  043b2	50		 push	 eax
  043b3	ff d7		 call	 edi

; 5919 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  043b5	6a 01		 push	 1
  043b7	68 10 04 00 00	 push	 1040			; 00000410H
  043bc	53		 push	 ebx
  043bd	ff d6		 call	 esi
  043bf	50		 push	 eax
  043c0	ff d7		 call	 edi

; 5920 : 			SendMessage (GetDlgItem (hCurPage, IDC_PROGRESS_BAR), PBM_SETPOS, 0, 0L);

  043c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  043c7	6a 00		 push	 0
  043c9	6a 00		 push	 0
  043cb	68 02 04 00 00	 push	 1026			; 00000402H
  043d0	68 f6 03 00 00	 push	 1014			; 000003f6H
  043d5	50		 push	 eax
  043d6	ff d6		 call	 esi
  043d8	50		 push	 eax
  043d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5921 : 			SetFocus (GetDlgItem (hwndDlg, IDC_NEXT));

  043df	68 10 04 00 00	 push	 1040			; 00000410H
  043e4	53		 push	 ebx
  043e5	ff d6		 call	 esi
  043e7	50		 push	 eax
  043e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
$LN426@MainDialog:

; 5922 : 		}
; 5923 : 
; 5924 : 		NormalCursor ();

  043ee	e8 00 00 00 00	 call	 _NormalCursor
  043f3	b8 01 00 00 00	 mov	 eax, 1
  043f8	e9 ad bc ff ff	 jmp	 $LN512@MainDialog
$LN539@MainDialog:

; 5371 : 	WORD lw = LOWORD (wParam);
; 5372 : 
; 5373 : 	int nNewPageNo = nCurPageNo;
; 5374 : 
; 5375 : 	switch (uMsg)

  043fd	81 c1 d2 7e ff
	ff		 add	 ecx, -33070		; ffff7ed2H
  04403	83 f9 04	 cmp	 ecx, 4
  04406	0f 87 9c bc ff
	ff		 ja	 $LN510@MainDialog
  0440c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1235@MainDialog[ecx*4]
$LN432@MainDialog:

; 5842 : 						}
; 5843 : 					}
; 5844 : 				}
; 5845 : 			}
; 5846 : 			else
; 5847 : 			{
; 5848 : 				// Regular device wipe (not decoy system partition wipe)
; 5849 : 
; 5850 : 				//Info ("WIPE_FINISHED");
; 5851 : 			}
; 5852 : 			return 1;
; 5853 : 		}
; 5854 : 
; 5855 : 		return 0;
; 5856 : 
; 5857 : 
; 5858 : 	case TC_APPMSG_PERFORM_POST_WMINIT_TASKS:
; 5859 : 
; 5860 : 		AfterWMInitTasks (hwndDlg);

  04413	8b cb		 mov	 ecx, ebx
  04415	e8 00 00 00 00	 call	 _AfterWMInitTasks

; 5861 : 		return 1;

  0441a	b8 01 00 00 00	 mov	 eax, 1
  0441f	e9 86 bc ff ff	 jmp	 $LN512@MainDialog
$LN431@MainDialog:

; 5862 : 
; 5863 : 	case TC_APPMSG_FORMAT_FINISHED:
; 5864 : 		{
; 5865 : 			char tmp[RNG_POOL_SIZE*2+1];
; 5866 : 
; 5867 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  04424	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0442a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04430	6a 00		 push	 0
  04432	68 f8 03 00 00	 push	 1016			; 000003f8H
  04437	51		 push	 ecx
  04438	ff d6		 call	 esi
  0443a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  04440	50		 push	 eax
  04441	ff d7		 call	 edi

; 5868 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), TRUE);

  04443	6a 01		 push	 1
  04445	68 11 04 00 00	 push	 1041			; 00000411H
  0444a	53		 push	 ebx
  0444b	ff d6		 call	 esi
  0444d	50		 push	 eax
  0444e	ff d7		 call	 edi

; 5869 : 			EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  04450	6a 01		 push	 1
  04452	6a 09		 push	 9
  04454	53		 push	 ebx
  04455	ff d6		 call	 esi
  04457	50		 push	 eax
  04458	ff d7		 call	 edi

; 5870 : 			EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  0445a	6a 01		 push	 1
  0445c	6a 02		 push	 2
  0445e	53		 push	 ebx
  0445f	ff d6		 call	 esi
  04461	50		 push	 eax
  04462	ff d7		 call	 edi

; 5871 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  04464	6a 01		 push	 1
  04466	68 10 04 00 00	 push	 1040			; 00000410H
  0446b	53		 push	 ebx
  0446c	ff d6		 call	 esi
  0446e	50		 push	 eax
  0446f	ff d7		 call	 edi

; 5872 : 			SetFocus (GetDlgItem (hwndDlg, IDC_NEXT));

  04471	68 10 04 00 00	 push	 1040			; 00000410H
  04476	53		 push	 ebx
  04477	ff d6		 call	 esi
  04479	50		 push	 eax
  0447a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 5873 : 
; 5874 : 			if (nCurPageNo == FORMAT_PAGE)

  04480	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 38 ; nCurPageNo, 00000026H
  04487	75 0c		 jne	 SHORT $LN430@MainDialog

; 5875 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  04489	68 ff 00 00 00	 push	 255			; 000000ffH
  0448e	53		 push	 ebx
  0448f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN430@MainDialog:

; 5876 : 
; 5877 : 			// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 5878 : 			memset (tmp, 'X', sizeof(tmp));

  04495	68 81 02 00 00	 push	 641			; 00000281H
  0449a	8d 95 04 c1 00
	00		 lea	 edx, DWORD PTR _tmp$134223[ebp]
  044a0	6a 58		 push	 88			; 00000058H
  044a2	52		 push	 edx
  044a3	e8 00 00 00 00	 call	 _memset

; 5879 : 			tmp [sizeof(tmp)-1] = 0;
; 5880 : 			SetWindowText (hRandPool, tmp);

  044a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  044ae	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  044b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  044b7	8d 85 04 c1 00
	00		 lea	 eax, DWORD PTR _tmp$134223[ebp]
  044bd	50		 push	 eax
  044be	51		 push	 ecx
  044bf	c6 85 84 c3 00
	00 00		 mov	 BYTE PTR _tmp$134223[ebp+640], 0
  044c6	ff d7		 call	 edi

; 5881 : 			SetWindowText (hMasterKey, tmp);

  044c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _hMasterKey
  044cd	8d 95 04 c1 00
	00		 lea	 edx, DWORD PTR _tmp$134223[ebp]
  044d3	52		 push	 edx
  044d4	50		 push	 eax
  044d5	ff d7		 call	 edi

; 5882 : 			SetWindowText (hHeaderKey, tmp);

  044d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hHeaderKey
  044dd	8d 8d 04 c1 00
	00		 lea	 ecx, DWORD PTR _tmp$134223[ebp]
  044e3	51		 push	 ecx
  044e4	52		 push	 edx
  044e5	ff d7		 call	 edi

; 5883 : 
; 5884 : 			LoadPage (hwndDlg, FORMAT_FINISHED_PAGE);

  044e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hCurPage, 0
  044ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  044f3	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  044f8	0f 84 60 00 00
	00		 je	 $LN1202@MainDialog
  044fe	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  04508	83 f8 15	 cmp	 eax, 21			; 00000015H
  0450b	75 3a		 jne	 SHORT $LN797@MainDialog
  0450d	6a 40		 push	 64			; 00000040H
  0450f	8d 85 fc c8 00
	00		 lea	 eax, DWORD PTR _tmp$169422[ebp]
  04515	6a 58		 push	 88			; 00000058H
  04517	50		 push	 eax
  04518	e8 00 00 00 00	 call	 _memset
  0451d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  04523	83 c4 0c	 add	 esp, 12			; 0000000cH
  04526	8d 8d fc c8 00
	00		 lea	 ecx, DWORD PTR _tmp$169422[ebp]
  0452c	51		 push	 ecx
  0452d	52		 push	 edx
  0452e	c6 85 3c c9 00
	00 00		 mov	 BYTE PTR _tmp$169422[ebp+64], 0
  04535	ff d7		 call	 edi
  04537	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0453d	8d 85 fc c8 00
	00		 lea	 eax, DWORD PTR _tmp$169422[ebp]
  04543	50		 push	 eax
  04544	51		 push	 ecx
  04545	ff d7		 call	 edi
$LN797@MainDialog:
  04547	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0454d	52		 push	 edx
  0454e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  04554	33 ff		 xor	 edi, edi
  04556	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
  0455c	eb 02		 jmp	 SHORT $LN799@MainDialog
$LN1202@MainDialog:
  0455e	33 ff		 xor	 edi, edi
$LN799@MainDialog:
  04560	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  04566	e8 00 00 00 00	 call	 _NormalCursor
  0456b	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _rW$169417[ebp]
  04571	50		 push	 eax
  04572	68 23 04 00 00	 push	 1059			; 00000423H
  04577	53		 push	 ebx
  04578	ff d6		 call	 esi
  0457a	50		 push	 eax
  0457b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  04581	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  04587	c7 05 00 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 39 ; nCurPageNo, 00000027H
  04591	85 c9		 test	 ecx, ecx
  04593	74 16		 je	 SHORT $LN802@MainDialog
  04595	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0459b	85 d2		 test	 edx, edx
  0459d	75 0c		 jne	 SHORT $LN802@MainDialog
  0459f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  045a4	85 c0		 test	 eax, eax
  045a6	8d 42 6d	 lea	 eax, DWORD PTR [edx+109]
  045a9	74 05		 je	 SHORT $LN803@MainDialog
$LN802@MainDialog:
  045ab	b8 6c 00 00 00	 mov	 eax, 108		; 0000006cH
$LN803@MainDialog:
  045b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  045b6	57		 push	 edi
  045b7	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  045bc	0f b7 c8	 movzx	 ecx, ax
  045bf	53		 push	 ebx
  045c0	51		 push	 ecx
  045c1	52		 push	 edx
  045c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  045c8	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  045cd	8d 45 84	 lea	 eax, DWORD PTR _rD$169416[ebp]
  045d0	50		 push	 eax
  045d1	53		 push	 ebx
  045d2	c7 45 84 a2 00
	00 00		 mov	 DWORD PTR _rD$169416[ebp], 162 ; 000000a2H
  045d9	c7 45 88 19 00
	00 00		 mov	 DWORD PTR _rD$169416[ebp+4], 25 ; 00000019H
  045e0	89 7d 8c	 mov	 DWORD PTR _rD$169416[ebp+8], edi
  045e3	89 7d 90	 mov	 DWORD PTR _rD$169416[ebp+12], edi
  045e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  045ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  045f1	3b c7		 cmp	 eax, edi
  045f3	74 39		 je	 SHORT $LN748@MainDialog
  045f5	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169417[ebp+12]
  045fb	2b 8d 68 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169417[ebp+4]
  04601	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _rW$169417[ebp+8]
  04607	2b 95 64 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169417[ebp]
  0460d	6a 01		 push	 1
  0460f	51		 push	 ecx
  04610	8b 4d 88	 mov	 ecx, DWORD PTR _rD$169416[ebp+4]
  04613	52		 push	 edx
  04614	8b 55 84	 mov	 edx, DWORD PTR _rD$169416[ebp]
$LN1229@MainDialog:
  04617	51		 push	 ecx
  04618	52		 push	 edx
  04619	50		 push	 eax
  0461a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  04620	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04625	6a 01		 push	 1
  04627	50		 push	 eax
  04628	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN748@MainDialog:

; 5885 : 		}
; 5886 : 		return 1;

  0462e	b8 01 00 00 00	 mov	 eax, 1
  04633	e9 72 ba ff ff	 jmp	 $LN512@MainDialog
$LN429@MainDialog:

; 5887 : 
; 5888 : 	case TC_APPMSG_NONSYS_INPLACE_ENC_FINISHED:
; 5889 : 
; 5890 : 		// A partition has just been fully encrypted in place
; 5891 : 
; 5892 : 		KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  04638	68 01 01 00 00	 push	 257			; 00000101H
  0463d	53		 push	 ebx
  0463e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5893 : 
; 5894 : 		LoadPage (hwndDlg, NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE);

  04644	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04649	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0464e	39 3d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, edi
  04654	0f 84 60 00 00
	00		 je	 $LN859@MainDialog
  0465a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  04664	83 f8 15	 cmp	 eax, 21			; 00000015H
  04667	75 3f		 jne	 SHORT $LN857@MainDialog
  04669	6a 40		 push	 64			; 00000040H
  0466b	8d 8d 40 c9 00
	00		 lea	 ecx, DWORD PTR _tmp$169489[ebp]
  04671	6a 58		 push	 88			; 00000058H
  04673	51		 push	 ecx
  04674	e8 00 00 00 00	 call	 _memset
  04679	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0467e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  04684	83 c4 0c	 add	 esp, 12			; 0000000cH
  04687	8d 95 40 c9 00
	00		 lea	 edx, DWORD PTR _tmp$169489[ebp]
  0468d	52		 push	 edx
  0468e	50		 push	 eax
  0468f	c6 85 80 c9 00
	00 00		 mov	 BYTE PTR _tmp$169489[ebp+64], 0
  04696	ff d6		 call	 esi
  04698	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0469e	8d 8d 40 c9 00
	00		 lea	 ecx, DWORD PTR _tmp$169489[ebp]
  046a4	51		 push	 ecx
  046a5	52		 push	 edx
  046a6	ff d6		 call	 esi
$LN857@MainDialog:
  046a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  046ad	50		 push	 eax
  046ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  046b4	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
$LN859@MainDialog:
  046ba	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  046c0	e8 00 00 00 00	 call	 _NormalCursor
  046c5	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$169484[ebp]
  046cb	51		 push	 ecx
  046cc	68 23 04 00 00	 push	 1059			; 00000423H
  046d1	53		 push	 ebx
  046d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  046d8	50		 push	 eax
  046d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  046df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  046e5	57		 push	 edi
  046e6	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  046eb	53		 push	 ebx
  046ec	6a 6c		 push	 108			; 0000006cH
  046ee	52		 push	 edx
  046ef	c7 05 00 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 37 ; nCurPageNo, 00000025H
  046f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  046ff	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  04704	8d 45 94	 lea	 eax, DWORD PTR _rD$169483[ebp]
  04707	50		 push	 eax
  04708	53		 push	 ebx
  04709	c7 45 94 a2 00
	00 00		 mov	 DWORD PTR _rD$169483[ebp], 162 ; 000000a2H
  04710	c7 45 98 19 00
	00 00		 mov	 DWORD PTR _rD$169483[ebp+4], 25 ; 00000019H
  04717	89 7d 9c	 mov	 DWORD PTR _rD$169483[ebp+8], edi
  0471a	89 7d a0	 mov	 DWORD PTR _rD$169483[ebp+12], edi
  0471d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  04723	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04728	3b c7		 cmp	 eax, edi
  0472a	0f 84 fe fe ff
	ff		 je	 $LN748@MainDialog
  04730	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169484[ebp+12]
  04736	2b 8d 28 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169484[ebp+4]
  0473c	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _rW$169484[ebp+8]
  04742	2b 95 24 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169484[ebp]
  04748	6a 01		 push	 1
  0474a	51		 push	 ecx
  0474b	8b 4d 98	 mov	 ecx, DWORD PTR _rD$169483[ebp+4]
  0474e	52		 push	 edx
  0474f	8b 55 94	 mov	 edx, DWORD PTR _rD$169483[ebp]

; 5895 : 
; 5896 : 		return 1;

  04752	e9 c0 fe ff ff	 jmp	 $LN1229@MainDialog
$LN424@MainDialog:

; 5930 : 		return 1;
; 5931 : 
; 5932 : 	case TC_APPMSG_FORMAT_USER_QUIT:
; 5933 : 
; 5934 : 		if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_PAGE
; 5935 : 			&& (bVolTransformThreadRunning || bVolTransformThreadToRun || bInPlaceEncNonSysResumed))

  04757	83 f8 24	 cmp	 eax, 36			; 00000024H
  0475a	75 49		 jne	 SHORT $LN423@MainDialog
  0475c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  04762	85 c9		 test	 ecx, ecx
  04764	75 13		 jne	 SHORT $LN422@MainDialog
  04766	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0476c	85 d2		 test	 edx, edx
  0476e	75 09		 jne	 SHORT $LN422@MainDialog
  04770	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  04775	85 c0		 test	 eax, eax
  04777	74 2c		 je	 SHORT $LN423@MainDialog
$LN422@MainDialog:

; 5936 : 		{
; 5937 : 			// Non-system encryption in progress
; 5938 : 			if (AskNoYes ("NONSYS_INPLACE_ENC_DEFER_CONFIRM") == IDYES)

  04779	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@
  0477e	e8 00 00 00 00	 call	 _AskNoYes
  04783	83 c4 04	 add	 esp, 4
  04786	83 f8 06	 cmp	 eax, 6
  04789	0f 85 d9 bc ff
	ff		 jne	 $LN482@MainDialog

; 5939 : 			{
; 5940 : 				NonSysInplaceEncPause ();

  0478f	e8 00 00 00 00	 call	 _NonSysInplaceEncPause

; 5941 : 
; 5942 : 				EndMainDlg (hwndDlg);

  04794	8b fb		 mov	 edi, ebx
  04796	e8 00 00 00 00	 call	 _EndMainDlg
  0479b	b8 01 00 00 00	 mov	 eax, 1
  047a0	e9 05 b9 ff ff	 jmp	 $LN512@MainDialog
$LN423@MainDialog:

; 5943 : 				return 1;
; 5944 : 			}
; 5945 : 			else
; 5946 : 				return 1;	// Disallow close
; 5947 : 		}
; 5948 : 		else if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  047a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  047ab	85 c9		 test	 ecx, ecx
  047ad	0f 85 a5 01 00
	00		 jne	 $LN417@MainDialog
  047b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  047b9	85 d2		 test	 edx, edx
  047bb	0f 85 97 01 00
	00		 jne	 $LN417@MainDialog

; 5956 : 				return 1;
; 5957 : 			}
; 5958 : 			else
; 5959 : 				return 1;	// Disallow close
; 5960 : 		}
; 5961 : 		else if ((nCurPageNo == SYSENC_ENCRYPTION_PAGE || nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)
; 5962 : 			&& SystemEncryptionStatus != SYSENC_STATUS_NONE
; 5963 : 			&& InstanceHasSysEncMutex ())

  047c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  047c6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  047c9	74 09		 je	 SHORT $LN412@MainDialog
  047cb	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  047ce	0f 85 fc 00 00
	00		 jne	 $LN413@MainDialog
$LN412@MainDialog:
  047d4	39 3d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, edi
  047da	0f 84 f0 00 00
	00		 je	 $LN413@MainDialog
  047e0	e8 00 00 00 00	 call	 _InstanceHasSysEncMutex
  047e5	85 c0		 test	 eax, eax
  047e7	0f 84 e3 00 00
	00		 je	 $LN413@MainDialog

; 5964 : 		{
; 5965 : 			// System encryption/decryption in progress
; 5966 : 
; 5967 : 			if (AskYesNo (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING ? 
; 5968 : 				"SYSTEM_DECRYPTION_DEFER_CONFIRM" : "SYSTEM_ENCRYPTION_DEFER_CONFIRM") == IDYES)

  047ed	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  047f7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@
  047fc	74 05		 je	 SHORT $LN521@MainDialog
  047fe	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@
$LN521@MainDialog:
  04803	50		 push	 eax
  04804	e8 00 00 00 00	 call	 _AskYesNo
  04809	83 c4 04	 add	 esp, 4
  0480c	83 f8 06	 cmp	 eax, 6
  0480f	0f 85 53 bc ff
	ff		 jne	 $LN482@MainDialog

; 5969 : 			{
; 5970 : 				if (nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)

  04815	83 3d 00 00 00
	00 1e		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 30 ; nCurPageNo, 0000001eH
  0481c	75 0a		 jne	 SHORT $LN410@MainDialog

; 5971 : 					TextInfoDialogBox (TC_TBXID_SYS_ENC_RESCUE_DISK);

  0481e	6a 02		 push	 2
  04820	e8 00 00 00 00	 call	 _TextInfoDialogBox
  04825	83 c4 04	 add	 esp, 4
$LN410@MainDialog:

; 5972 : 
; 5973 : 				try
; 5974 : 				{
; 5975 : 					BootEncStatus = BootEncObj->GetStatus();

  04828	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0482e	8d 85 d8 f9 ff
	ff		 lea	 eax, DWORD PTR $T169089[ebp]
  04834	50		 push	 eax
  04835	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 20 ; 00000014H
  0483c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  04841	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  04846	8b f0		 mov	 esi, eax
  04848	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0484d	f3 a5		 rep movsd
  0484f	66 a5		 movsw

; 5976 : 
; 5977 : 					if (BootEncStatus.SetupInProgress)

  04851	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  04858	0f 84 ec c0 ff
	ff		 je	 $LN1093@MainDialog

; 5978 : 					{
; 5979 : 						BootEncObj->AbortSetupWait ();

  0485e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  04864	e8 00 00 00 00	 call	 ?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetupWait

; 5980 : 						Sleep (200);

  04869	68 c8 00 00 00	 push	 200			; 000000c8H
  0486e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 5981 : 						BootEncStatus = BootEncObj->GetStatus();

  04874	8d 8d 7a f9 ff
	ff		 lea	 ecx, DWORD PTR $T169090[ebp]
  0487a	51		 push	 ecx
  0487b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  04881	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  04886	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0488b	8b f0		 mov	 esi, eax
  0488d	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  04892	f3 a5		 rep movsd
  04894	66 a5		 movsw

; 5982 : 					}
; 5983 : 
; 5984 : 					if (!BootEncStatus.SetupInProgress)

  04896	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0

; 5985 : 					{
; 5986 : 						EndMainDlg (MainDlg);
; 5987 : 						return 1;

  0489d	0f 84 a7 c0 ff
	ff		 je	 $LN1093@MainDialog

; 5988 : 					}
; 5989 : 					else
; 5990 : 					{
; 5991 : 						Error ("FAILED_TO_INTERRUPT_SYSTEM_ENCRYPTION");

  048a3	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@
  048a8	e8 00 00 00 00	 call	 _Error
  048ad	83 c4 04	 add	 esp, 4
  048b0	b8 01 00 00 00	 mov	 eax, 1
  048b5	e9 f0 b7 ff ff	 jmp	 $LN512@MainDialog
__catch$_MainDialogProc@16$19:

; 5992 : 						return 1;	// Disallow close
; 5993 : 					}
; 5994 : 				}
; 5995 : 				catch (Exception &e)
; 5996 : 				{
; 5997 : 					e.Show (hwndDlg);

  048ba	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134254[ebp]
  048c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  048c2	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  048c5	8b 12		 mov	 edx, DWORD PTR [edx]
  048c7	50		 push	 eax
  048c8	ff d2		 call	 edx

; 5998 : 				}

  048ca	b8 00 00 00 00	 mov	 eax, $LN482@MainDialog
  048cf	c3		 ret	 0
$LN413@MainDialog:

; 5999 : 				return 1;	// Disallow close
; 6000 : 			}
; 6001 : 			else
; 6002 : 				return 1;	// Disallow close
; 6003 : 		}
; 6004 : 		else if (bConfirmQuitSysEncPretest)

  048d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bConfirmQuitSysEncPretest@@3HC ; bConfirmQuitSysEncPretest
  048d5	85 c0		 test	 eax, eax
  048d7	74 2c		 je	 SHORT $LN403@MainDialog

; 6005 : 		{
; 6006 : 			if (AskWarnNoYes (bHiddenOS ? "CONFIRM_CANCEL_HIDDEN_OS_CREATION" : "CONFIRM_CANCEL_SYS_ENC_PRETEST") == IDNO)

  048d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  048df	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@
  048e4	85 c9		 test	 ecx, ecx
  048e6	75 05		 jne	 SHORT $LN523@MainDialog
  048e8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@
$LN523@MainDialog:
  048ed	50		 push	 eax
  048ee	e8 00 00 00 00	 call	 _AskWarnNoYes
  048f3	83 c4 04	 add	 esp, 4
  048f6	83 f8 07	 cmp	 eax, 7
  048f9	75 2a		 jne	 SHORT $LN399@MainDialog

; 5885 : 		}
; 5886 : 		return 1;

  048fb	b8 01 00 00 00	 mov	 eax, 1
  04900	e9 a5 b7 ff ff	 jmp	 $LN512@MainDialog
$LN403@MainDialog:

; 6007 : 				return 1;	// Disallow close
; 6008 : 		}
; 6009 : 		else if (bConfirmQuit)

  04905	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bConfirmQuit@@3HC ; bConfirmQuit
  0490b	85 d2		 test	 edx, edx
  0490d	74 16		 je	 SHORT $LN399@MainDialog

; 6010 : 		{
; 6011 : 			if (AskWarnNoYes ("CONFIRM_EXIT_UNIVERSAL") == IDNO)

  0490f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
  04914	e8 00 00 00 00	 call	 _AskWarnNoYes
  04919	83 c4 04	 add	 esp, 4
  0491c	83 f8 07	 cmp	 eax, 7

; 6012 : 				return 1;	// Disallow close

  0491f	0f 84 43 bb ff
	ff		 je	 $LN482@MainDialog
$LN399@MainDialog:

; 6013 : 		}
; 6014 : 
; 6015 : 		if (hiddenVolHostDriveNo > -1)

  04925	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0492a	83 f8 ff	 cmp	 eax, -1
  0492d	7e 18		 jle	 SHORT $LN398@MainDialog

; 6016 : 		{
; 6017 : 			CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  0492f	50		 push	 eax
  04930	53		 push	 ebx
  04931	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6018 : 			UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  04936	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0493b	6a 01		 push	 1
  0493d	50		 push	 eax
  0493e	53		 push	 ebx
  0493f	e8 00 00 00 00	 call	 _UnmountVolume
  04944	83 c4 14	 add	 esp, 20			; 00000014H
$LN398@MainDialog:

; 6019 : 		}
; 6020 : 
; 6021 : 		EndMainDlg (hwndDlg);

  04947	8b fb		 mov	 edi, ebx
  04949	e8 00 00 00 00	 call	 _EndMainDlg
  0494e	b8 01 00 00 00	 mov	 eax, 1
  04953	e9 52 b7 ff ff	 jmp	 $LN512@MainDialog
$LN417@MainDialog:

; 5949 : 		{
; 5950 : 			// Format (non-in-place encryption) in progress
; 5951 : 			if (AskNoYes ("FORMAT_ABORT") == IDYES)

  04958	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
  0495d	e8 00 00 00 00	 call	 _AskNoYes
  04962	83 c4 04	 add	 esp, 4
  04965	83 f8 06	 cmp	 eax, 6
  04968	0f 85 fa ba ff
	ff		 jne	 $LN482@MainDialog

; 5952 : 			{
; 5953 : 				bVolTransformThreadCancel = TRUE;
; 5954 : 
; 5955 : 				EndMainDlg (hwndDlg);

  0496e	8b fb		 mov	 edi, ebx
  04970	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1
  0497a	e8 00 00 00 00	 call	 _EndMainDlg
  0497f	b8 01 00 00 00	 mov	 eax, 1
  04984	e9 21 b7 ff ff	 jmp	 $LN512@MainDialog
$LN1214@MainDialog:
  04989	8d 49 00	 npad	 3
$LN1232@MainDialog:

; 7771 : }

  0498c	00 00 00 00	 DD	 $LN497@MainDialog
  04990	00 00 00 00	 DD	 $LN479@MainDialog
  04994	00 00 00 00	 DD	 $LN457@MainDialog
  04998	00 00 00 00	 DD	 $LN443@MainDialog
  0499c	00 00 00 00	 DD	 $LN448@MainDialog
  049a0	00 00 00 00	 DD	 $LN454@MainDialog
$LN1233@MainDialog:
  049a4	00 00 00 00	 DD	 $LN87@MainDialog
  049a8	00 00 00 00	 DD	 $LN426@MainDialog
  049ac	00 00 00 00	 DD	 $LN89@MainDialog
  049b0	00 00 00 00	 DD	 $LN204@MainDialog
$LN1138@MainDialog:
  049b4	00		 DB	 0
  049b5	03		 DB	 3
  049b6	03		 DB	 3
  049b7	01		 DB	 1
  049b8	03		 DB	 3
  049b9	03		 DB	 3
  049ba	03		 DB	 3
  049bb	03		 DB	 3
  049bc	03		 DB	 3
  049bd	03		 DB	 3
  049be	03		 DB	 3
  049bf	03		 DB	 3
  049c0	03		 DB	 3
  049c1	03		 DB	 3
  049c2	03		 DB	 3
  049c3	03		 DB	 3
  049c4	03		 DB	 3
  049c5	03		 DB	 3
  049c6	03		 DB	 3
  049c7	03		 DB	 3
  049c8	03		 DB	 3
  049c9	03		 DB	 3
  049ca	02		 DB	 2
  049cb	03		 DB	 3
  049cc	01		 DB	 1
  049cd	8d 49 00	 npad	 3
$LN1234@MainDialog:
  049d0	00 00 00 00	 DD	 $LN221@MainDialog
  049d4	00 00 00 00	 DD	 $LN426@MainDialog
  049d8	00 00 00 00	 DD	 $LN223@MainDialog
  049dc	00 00 00 00	 DD	 $LN204@MainDialog
$LN1140@MainDialog:
  049e0	00		 DB	 0
  049e1	03		 DB	 3
  049e2	03		 DB	 3
  049e3	01		 DB	 1
  049e4	03		 DB	 3
  049e5	03		 DB	 3
  049e6	03		 DB	 3
  049e7	03		 DB	 3
  049e8	03		 DB	 3
  049e9	03		 DB	 3
  049ea	03		 DB	 3
  049eb	03		 DB	 3
  049ec	03		 DB	 3
  049ed	03		 DB	 3
  049ee	03		 DB	 3
  049ef	03		 DB	 3
  049f0	03		 DB	 3
  049f1	03		 DB	 3
  049f2	03		 DB	 3
  049f3	03		 DB	 3
  049f4	03		 DB	 3
  049f5	03		 DB	 3
  049f6	02		 DB	 2
  049f7	03		 DB	 3
  049f8	01		 DB	 1
  049f9	8d 49 00	 npad	 3
$LN1235@MainDialog:
  049fc	00 00 00 00	 DD	 $LN431@MainDialog
  04a00	00 00 00 00	 DD	 $LN424@MainDialog
  04a04	00 00 00 00	 DD	 $LN432@MainDialog
  04a08	00 00 00 00	 DD	 $LN510@MainDialog
  04a0c	00 00 00 00	 DD	 $LN429@MainDialog
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_MainDialogProc@16$45:
  00000	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169069[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$46:
  0000b	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T169070[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$49:
  00016	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T169094[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$50:
  00021	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169095[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$53:
  0002c	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169100[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$54:
  00037	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T169101[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$57:
  00042	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169108[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$58:
  0004d	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR $T169109[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$59:
  00058	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T169110[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$60:
  00063	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T169111[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$61:
  0006e	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T169112[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$66:
  00079	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169124[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$67:
  00084	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T169125[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$68:
  0008f	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T169126[ebp]
  00095	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$69:
  0009a	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169127[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$70:
  000a5	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T169128[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$71:
  000b0	8d 8d 28 fc ff
	ff		 lea	 ecx, DWORD PTR $T169129[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$72:
  000bb	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T169130[ebp]
  000c1	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$75:
  000c6	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169134[ebp]
  000cc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$76:
  000d1	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169136[ebp]
  000d7	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$78:
  000dc	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169144[ebp]
  000e2	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$79:
  000e7	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T169145[ebp]
  000ed	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$80:
  000f2	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169146[ebp]
  000f8	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$81:
  000fd	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T169147[ebp]
  00103	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$82:
  00108	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T169148[ebp]
  0010e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$74:
  00113	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169132[ebp]
  00119	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$63:
  0011e	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T169116[ebp]
  00124	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$_MainDialogProc@16$64:
  00129	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134542[ebp]
  0012f	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__ehhandler$_MainDialogProc@16:
  00134	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00138	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0013b	8b 8a b8 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2632]
  00141	33 c8		 xor	 ecx, eax
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b 8a 68 ca 00
	00		 mov	 ecx, DWORD PTR [edx+51816]
  0014e	33 c8		 xor	 ecx, eax
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_MainDialogProc@16
  0015a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_MainDialogProc@16 ENDP
PUBLIC	??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@	; `string'
PUBLIC	??_C@_08ELEAABKI@NODRIVER?$AA@			; `string'
PUBLIC	??_C@_09PLHAEEAO@INIT_RAND?$AA@			; `string'
PUBLIC	??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@		; `string'
PUBLIC	_WinMain@16
EXTRN	_AutoTestAlgorithms:PROC
EXTRN	_DriverAttach:PROC
EXTRN	_RegisterRedTick:PROC
EXTRN	_Randinit:PROC
EXTRN	_FormatWriteBufferSize:DWORD
EXTRN	_InitApp:PROC
EXTRN	__imp__InitCommonControls@0:PROC
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	_atexit:PROC
;	COMDAT ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@ DB 'ERR_SELF_TESTS_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ELEAABKI@NODRIVER?$AA@
CONST	SEGMENT
??_C@_08ELEAABKI@NODRIVER?$AA@ DB 'NODRIVER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLHAEEAO@INIT_RAND?$AA@
CONST	SEGMENT
??_C@_09PLHAEEAO@INIT_RAND?$AA@ DB 'INIT_RAND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
CONST	SEGMENT
??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@ DB 'INIT_SYS_ENC', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WinMain@16$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$_WinMain@16$0
__tryblocktable$_WinMain@16 DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_WinMain@16$3
__unwindtable$_WinMain@16 DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_WinMain@16$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WinMain@16 DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_WinMain@16
	DD	01H
	DD	FLAT:__tryblocktable$_WinMain@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_e$135241 = -24						; size = 4
$T170068 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpszCommandLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 8918 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WinMain@16
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8919 : 	int status;
; 8920 : 	atexit (localcleanup);

  0002b	68 00 00 00 00	 push	 OFFSET _localcleanup
  00030	e8 00 00 00 00	 call	 _atexit

; 8921 : 
; 8922 : 	VirtualLock (&volumePassword, sizeof(volumePassword));

  00035	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VirtualLock@8
  0003b	83 c4 04	 add	 esp, 4
  0003e	6a 48		 push	 72			; 00000048H
  00040	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  00045	ff d6		 call	 esi

; 8923 : 	VirtualLock (szVerify, sizeof(szVerify));

  00047	6a 41		 push	 65			; 00000041H
  00049	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PADA	; szVerify
  0004e	ff d6		 call	 esi

; 8924 : 	VirtualLock (szRawPassword, sizeof(szRawPassword));

  00050	6a 41		 push	 65			; 00000041H
  00052	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PADA ; szRawPassword
  00057	ff d6		 call	 esi

; 8925 : 
; 8926 : 	VirtualLock (MasterKeyGUIView, sizeof(MasterKeyGUIView));

  00059	6a 40		 push	 64			; 00000040H
  0005b	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  00060	ff d6		 call	 esi

; 8927 : 	VirtualLock (HeaderKeyGUIView, sizeof(HeaderKeyGUIView));

  00062	6a 40		 push	 64			; 00000040H
  00064	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  00069	ff d6		 call	 esi

; 8928 : 
; 8929 : 	VirtualLock (randPool, sizeof(randPool));

  0006b	6a 78		 push	 120			; 00000078H
  0006d	68 00 00 00 00	 push	 OFFSET ?randPool@@3PAEA	; randPool
  00072	ff d6		 call	 esi

; 8930 : 	VirtualLock (lastRandPool, sizeof(lastRandPool));

  00074	6a 78		 push	 120			; 00000078H
  00076	68 00 00 00 00	 push	 OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0007b	ff d6		 call	 esi

; 8931 : 	VirtualLock (outRandPoolDispBuffer, sizeof(outRandPoolDispBuffer));

  0007d	68 72 01 00 00	 push	 370			; 00000172H
  00082	68 00 00 00 00	 push	 OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  00087	ff d6		 call	 esi

; 8932 : 
; 8933 : 	VirtualLock (&szFileName, sizeof(szFileName));

  00089	68 05 01 00 00	 push	 261			; 00000105H
  0008e	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00093	ff d6		 call	 esi

; 8934 : 	VirtualLock (&szDiskFile, sizeof(szDiskFile));

  00095	68 05 01 00 00	 push	 261			; 00000105H
  0009a	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0009f	ff d6		 call	 esi

; 8935 : 
; 8936 : 	try
; 8937 : 	{
; 8938 : 		BootEncObj = new BootEncryption (NULL);

  000a1	68 18 06 00 00	 push	 1560			; 00000618H
  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ad	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b2	8b c8		 mov	 ecx, eax
  000b4	83 c4 04	 add	 esp, 4
  000b7	89 4d ec	 mov	 DWORD PTR $T170068[ebp], ecx
  000ba	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000be	85 c9		 test	 ecx, ecx
  000c0	74 09		 je	 SHORT $LN11@WinMain
  000c2	6a 00		 push	 0
  000c4	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  000c9	eb 02		 jmp	 SHORT $LN12@WinMain
$LN11@WinMain:
  000cb	33 c0		 xor	 eax, eax
$LN12@WinMain:
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, eax ; BootEncObj
$LN17@WinMain:

; 8944 : 
; 8945 : 	if (BootEncObj == NULL)

  000d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, 0 ; BootEncObj
  000d9	75 0d		 jne	 SHORT $LN7@WinMain

; 8946 : 		AbortProcess ("INIT_SYS_ENC");

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
  000e0	e8 00 00 00 00	 call	 _AbortProcess
  000e5	83 c4 04	 add	 esp, 4
$LN7@WinMain:

; 8947 : 
; 8948 : 	InitCommonControls ();

  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitCommonControls@0

; 8949 : 	InitApp (hInstance, lpszCommandLine);

  000ee	8b 7d 10	 mov	 edi, DWORD PTR _lpszCommandLine$[ebp]
  000f1	8b 75 08	 mov	 esi, DWORD PTR _hInstance$[ebp]
  000f4	57		 push	 edi
  000f5	56		 push	 esi
  000f6	e8 00 00 00 00	 call	 _InitApp

; 8950 : 
; 8951 : 	// Write block size greater than 64 KB causes a performance drop when writing to files on XP/Vista
; 8952 : 	if (!IsOSAtLeast (WIN_7))

  000fb	6a 0d		 push	 13			; 0000000dH
  000fd	e8 00 00 00 00	 call	 _IsOSAtLeast
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN6@WinMain

; 8953 : 		FormatWriteBufferSize = 64 * 1024;

  00109	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _FormatWriteBufferSize, 65536 ; 00010000H
$LN6@WinMain:

; 8954 : 
; 8955 : #if TC_MAX_VOLUME_SECTOR_SIZE > 64 * 1024
; 8956 : #error TC_MAX_VOLUME_SECTOR_SIZE > 64 * 1024
; 8957 : #endif
; 8958 : 
; 8959 : 	nPbar = IDC_PROGRESS_BAR;

  00113	c7 05 00 00 00
	00 f6 03 00 00	 mov	 DWORD PTR _nPbar, 1014	; 000003f6H

; 8960 : 
; 8961 : 	if (Randinit ())

  0011d	e8 00 00 00 00	 call	 _Randinit
  00122	85 c0		 test	 eax, eax
  00124	74 0d		 je	 SHORT $LN5@WinMain

; 8962 : 		AbortProcess ("INIT_RAND");

  00126	68 00 00 00 00	 push	 OFFSET ??_C@_09PLHAEEAO@INIT_RAND?$AA@
  0012b	e8 00 00 00 00	 call	 _AbortProcess
  00130	83 c4 04	 add	 esp, 4
$LN5@WinMain:

; 8963 : 
; 8964 : 	RegisterRedTick(hInstance);

  00133	56		 push	 esi
  00134	e8 00 00 00 00	 call	 _RegisterRedTick

; 8965 : 
; 8966 : 	/* Allocate, dup, then store away the application title */
; 8967 : 	lpszTitle = GetString ("IDD_VOL_CREATION_WIZARD_DLG");

  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  0013e	e8 00 00 00 00	 call	 _GetString
  00143	83 c4 08	 add	 esp, 8
  00146	a3 00 00 00 00	 mov	 DWORD PTR _lpszTitle, eax

; 8968 : 
; 8969 : 	status = DriverAttach ();

  0014b	e8 00 00 00 00	 call	 _DriverAttach

; 8970 : 	if (status != 0)

  00150	85 c0		 test	 eax, eax
  00152	74 3a		 je	 SHORT $LN4@WinMain

; 8971 : 	{
; 8972 : 		if (status == ERR_OS_ERROR)

  00154	83 f8 01	 cmp	 eax, 1
  00157	75 1d		 jne	 SHORT $LN3@WinMain

; 8973 : 			handleWin32Error (NULL);

  00159	6a 00		 push	 0
  0015b	e8 00 00 00 00	 call	 _handleWin32Error
  00160	83 c4 04	 add	 esp, 4

; 8974 : 		else

  00163	eb 1c		 jmp	 SHORT $LN2@WinMain
__catch$_WinMain@16$0:

; 8939 : 	}
; 8940 : 	catch (Exception &e)
; 8941 : 	{
; 8942 : 		e.Show (NULL);

  00165	8b 4d e8	 mov	 ecx, DWORD PTR _e$135241[ebp]
  00168	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016a	8b 10		 mov	 edx, DWORD PTR [eax]
  0016c	6a 00		 push	 0
  0016e	ff d2		 call	 edx

; 8943 : 	}

  00170	b8 00 00 00 00	 mov	 eax, $LN17@WinMain
  00175	c3		 ret	 0
$LN3@WinMain:

; 8975 : 			handleError (NULL, status);

  00176	50		 push	 eax
  00177	6a 00		 push	 0
  00179	e8 00 00 00 00	 call	 _handleError
  0017e	83 c4 08	 add	 esp, 8
$LN2@WinMain:

; 8976 : 
; 8977 : 		AbortProcess ("NODRIVER");

  00181	68 00 00 00 00	 push	 OFFSET ??_C@_08ELEAABKI@NODRIVER?$AA@
  00186	e8 00 00 00 00	 call	 _AbortProcess
  0018b	83 c4 04	 add	 esp, 4
$LN4@WinMain:

; 8978 : 	}
; 8979 : 
; 8980 : 	if (!AutoTestAlgorithms())

  0018e	e8 00 00 00 00	 call	 _AutoTestAlgorithms
  00193	85 c0		 test	 eax, eax
  00195	75 0d		 jne	 SHORT $LN1@WinMain

; 8981 : 		AbortProcess ("ERR_SELF_TESTS_FAILED");

  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
  0019c	e8 00 00 00 00	 call	 _AbortProcess
  001a1	83 c4 04	 add	 esp, 4
$LN1@WinMain:

; 8982 : 
; 8983 : 	/* Create the main dialog box */
; 8984 : 	DialogBoxParamW (hInstance, MAKEINTRESOURCEW (IDD_VOL_CREATION_WIZARD_DLG), NULL, (DLGPROC) MainDialogProc, 
; 8985 : 		(LPARAM)lpszCommandLine);

  001a4	57		 push	 edi
  001a5	68 00 00 00 00	 push	 OFFSET _MainDialogProc@16
  001aa	6a 00		 push	 0
  001ac	6a 65		 push	 101			; 00000065H
  001ae	56		 push	 esi
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 8986 : 
; 8987 : 	return 0;

  001b5	33 c0		 xor	 eax, eax

; 8988 : }

  001b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c1	59		 pop	 ecx
  001c2	5f		 pop	 edi
  001c3	5e		 pop	 esi
  001c4	5b		 pop	 ebx
  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WinMain@16$2:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T170068[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$_WinMain@16:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WinMain@16
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WinMain@16 ENDP
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ$0
__ehfuncinfo$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__EDeferredNonSysInPlaceEncDevices@@YAXXZ PROC	; `dynamic initializer for 'DeferredNonSysInPlaceEncDevices'', COMDAT

; 250  : vector <HostDevice> DeferredNonSysInPlaceEncDevices;

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	6a 04		 push	 4
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00027	33 c9		 xor	 ecx, ecx
  00029	83 c4 04	 add	 esp, 4
  0002c	3b c1		 cmp	 eax, ecx
  0002e	74 08		 je	 SHORT $LN15@dynamic
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00036	eb 02		 jmp	 SHORT $LN16@dynamic
$LN15@dynamic:
  00038	33 c0		 xor	 eax, eax
$LN16@dynamic:
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A, eax
  0003f	68 00 00 00 00	 push	 OFFSET ??__FDeferredNonSysInPlaceEncDevices@@YAXXZ ; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices''
  00044	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+12, ecx
  0004a	89 0d 10 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+16, ecx
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+20, ecx
  00056	e8 00 00 00 00	 call	 _atexit
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	c3		 ret	 0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00005	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 02		 lea	 eax, DWORD PTR [edx]
  00010	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__EDeferredNonSysInPlaceEncDevices@@YAXXZ ENDP	; `dynamic initializer for 'DeferredNonSysInPlaceEncDevices''
; Function compile flags: /Ogtpy
;	COMDAT ??__FDeferredNonSysInPlaceEncDevices@@YAXXZ
text$yd	SEGMENT
??__FDeferredNonSysInPlaceEncDevices@@YAXXZ PROC	; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00005	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
??__FDeferredNonSysInPlaceEncDevices@@YAXXZ ENDP	; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices''
text$yd	ENDS
PUBLIC	?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	SEGMENT
?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A DB 018H DUP (?) ; DeferredNonSysInPlaceEncDevices
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	ENDS
CRT$XCU	SEGMENT
_DeferredNonSysInPlaceEncDevices$initializer$ DD FLAT:??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
CRT$XCU	ENDS
END
