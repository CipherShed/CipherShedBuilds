; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed\src\common\endian.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_MirrorBytes16@4
; Function compile flags: /Ogsp
; File c:\home\public\desktop\projects\ciphershed\src\common\endian.c
;	COMDAT _MirrorBytes16@4
_TEXT	SEGMENT
_x$ = 8							; size = 2
_MirrorBytes16@4 PROC					; COMDAT

; 17   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 18   : 	return (x << 8) | (x >> 8);

  00005	0f b7 4d 08	 movzx	 ecx, WORD PTR _x$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	c1 e8 08	 shr	 eax, 8
  0000e	c1 e1 08	 shl	 ecx, 8
  00011	0b c1		 or	 eax, ecx

; 19   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
_MirrorBytes16@4 ENDP
_TEXT	ENDS
PUBLIC	_MirrorBytes32@4
; Function compile flags: /Ogsp
;	COMDAT _MirrorBytes32@4
_TEXT	SEGMENT
_x$ = 8							; size = 4
_MirrorBytes32@4 PROC					; COMDAT

; 23   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 24   : 	unsigned __int32 n = (unsigned __int8) x;
; 25   : 	n <<= 8; n |= (unsigned __int8) (x >> 8);

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	c1 e8 08	 shr	 eax, 8

; 26   : 	n <<= 8; n |= (unsigned __int8) (x >> 16);
; 27   : 	return (n << 8) | (unsigned __int8) (x >> 24);

  0000d	0f b6 c0	 movzx	 eax, al
  00010	0f b6 d1	 movzx	 edx, cl
  00013	c1 e2 08	 shl	 edx, 8
  00016	0b c2		 or	 eax, edx
  00018	8b d1		 mov	 edx, ecx
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	c1 e0 08	 shl	 eax, 8
  00020	0f b6 d2	 movzx	 edx, dl
  00023	0b c2		 or	 eax, edx
  00025	c1 e0 08	 shl	 eax, 8
  00028	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0002b	0b c1		 or	 eax, ecx

; 28   : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
_MirrorBytes32@4 ENDP
_TEXT	ENDS
PUBLIC	_MirrorBytes64@8
; Function compile flags: /Ogsp
;	COMDAT _MirrorBytes64@8
_TEXT	SEGMENT
_x$ = 8							; size = 8
_MirrorBytes64@8 PROC					; COMDAT

; 32   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 33   : 	uint64 n = (unsigned __int8) x;
; 34   : 	n <<= 8; n |= (unsigned __int8) (x >> 8);

  00005	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _x$[ebp]
  0000c	56		 push	 esi
  0000d	8b c3		 mov	 eax, ebx
  0000f	8b d1		 mov	 edx, ecx
  00011	0f ac d0 08	 shrd	 eax, edx, 8

; 35   : 	n <<= 8; n |= (unsigned __int8) (x >> 16);
; 36   : 	n <<= 8; n |= (unsigned __int8) (x >> 24);
; 37   : 	n <<= 8; n |= (unsigned __int8) (x >> 32);
; 38   : 	n <<= 8; n |= (unsigned __int8) (x >> 40);
; 39   : 	n <<= 8; n |= (unsigned __int8) (x >> 48);
; 40   : 	return (n << 8) | (unsigned __int8) (x >> 56);

  00015	0f b6 c0	 movzx	 eax, al
  00018	c1 ea 08	 shr	 edx, 8
  0001b	99		 cdq
  0001c	8b f0		 mov	 esi, eax
  0001e	57		 push	 edi
  0001f	8b fa		 mov	 edi, edx
  00021	0f b6 c3	 movzx	 eax, bl
  00024	99		 cdq
  00025	0f a4 c2 08	 shld	 edx, eax, 8
  00029	c1 e0 08	 shl	 eax, 8
  0002c	0b f0		 or	 esi, eax
  0002e	0b fa		 or	 edi, edx
  00030	0f a4 f7 08	 shld	 edi, esi, 8
  00034	c1 e6 08	 shl	 esi, 8
  00037	8b c3		 mov	 eax, ebx
  00039	8b d1		 mov	 edx, ecx
  0003b	0f ac d0 10	 shrd	 eax, edx, 16
  0003f	0f b6 c0	 movzx	 eax, al
  00042	c1 ea 10	 shr	 edx, 16			; 00000010H
  00045	99		 cdq
  00046	0b f0		 or	 esi, eax
  00048	0b fa		 or	 edi, edx
  0004a	0f a4 f7 08	 shld	 edi, esi, 8
  0004e	c1 e6 08	 shl	 esi, 8
  00051	8b c1		 mov	 eax, ecx
  00053	0f ac c3 18	 shrd	 ebx, eax, 24
  00057	c1 e8 18	 shr	 eax, 24			; 00000018H
  0005a	0f b6 c3	 movzx	 eax, bl
  0005d	99		 cdq
  0005e	0b f0		 or	 esi, eax
  00060	0b fa		 or	 edi, edx
  00062	0f a4 f7 08	 shld	 edi, esi, 8
  00066	c1 e6 08	 shl	 esi, 8
  00069	0f b6 c1	 movzx	 eax, cl
  0006c	99		 cdq
  0006d	0b f0		 or	 esi, eax
  0006f	0b fa		 or	 edi, edx
  00071	0f a4 f7 08	 shld	 edi, esi, 8
  00075	8b c1		 mov	 eax, ecx
  00077	c1 e8 08	 shr	 eax, 8
  0007a	0f b6 c0	 movzx	 eax, al
  0007d	99		 cdq
  0007e	c1 e6 08	 shl	 esi, 8
  00081	0b f0		 or	 esi, eax
  00083	0b fa		 or	 edi, edx
  00085	0f a4 f7 08	 shld	 edi, esi, 8
  00089	8b c1		 mov	 eax, ecx
  0008b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0008e	0f b6 c0	 movzx	 eax, al
  00091	c1 e6 08	 shl	 esi, 8
  00094	99		 cdq
  00095	0b f0		 or	 esi, eax
  00097	0b fa		 or	 edi, edx
  00099	0f a4 f7 08	 shld	 edi, esi, 8
  0009d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000a0	0f b6 c1	 movzx	 eax, cl
  000a3	99		 cdq
  000a4	c1 e6 08	 shl	 esi, 8
  000a7	0b f0		 or	 esi, eax
  000a9	0b fa		 or	 edi, edx
  000ab	8b d7		 mov	 edx, edi
  000ad	5f		 pop	 edi
  000ae	8b c6		 mov	 eax, esi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 41   : }

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
_MirrorBytes64@8 ENDP
_TEXT	ENDS
PUBLIC	_LongReverse@8
; Function compile flags: /Ogsp
;	COMDAT _LongReverse@8
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_byteCount$ = 12					; size = 4
_LongReverse@8 PROC					; COMDAT

; 46   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 47   : 	unsigned __int32 value;
; 48   : 
; 49   : 	byteCount /= sizeof (unsigned __int32);

  00005	8b 55 0c	 mov	 edx, DWORD PTR _byteCount$[ebp]
  00008	c1 ea 02	 shr	 edx, 2

; 50   : 	while (byteCount--)

  0000b	85 d2		 test	 edx, edx
  0000d	74 2d		 je	 SHORT $LN6@LongRevers
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	56		 push	 esi
  00013	57		 push	 edi
$LL2@LongRevers:

; 51   : 	{
; 52   : 		value = *buffer;

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]

; 53   : 		value = ((value & 0xFF00FF00L) >> 8) | \
; 54   : 		    ((value & 0x00FF00FFL) << 8);
; 55   : 		*buffer++ = (value << 16) | (value >> 16);

  00016	8b f0		 mov	 esi, eax
  00018	c1 ee 08	 shr	 esi, 8
  0001b	8b f8		 mov	 edi, eax
  0001d	c1 e7 08	 shl	 edi, 8
  00020	33 f7		 xor	 esi, edi
  00022	81 e6 ff 00 ff
	00		 and	 esi, 16711935		; 00ff00ffH
  00028	c1 e0 08	 shl	 eax, 8
  0002b	33 f0		 xor	 esi, eax
  0002d	c1 c6 10	 rol	 esi, 16			; 00000010H
  00030	4a		 dec	 edx
  00031	89 31		 mov	 DWORD PTR [ecx], esi
  00033	83 c1 04	 add	 ecx, 4
  00036	85 d2		 test	 edx, edx
  00038	75 da		 jne	 SHORT $LL2@LongRevers
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
$LN6@LongRevers:

; 56   : 	}
; 57   : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
_LongReverse@8 ENDP
_TEXT	ENDS
END
