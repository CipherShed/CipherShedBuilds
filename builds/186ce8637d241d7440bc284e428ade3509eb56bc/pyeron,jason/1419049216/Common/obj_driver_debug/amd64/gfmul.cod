; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	mul_bex8
PUBLIC	mul_x
PUBLIC	mul_lex8
PUBLIC	bsw_32
PUBLIC	mul_x64
PUBLIC	mul_lex8_64
PUBLIC	move_block_aligned
PUBLIC	xor_block_aligned
PUBLIC	move_block_aligned64
PUBLIC	xor_block_aligned64
gf_poly	DD	00H
	DD	0e1000000H
gf_poly64 DD	00H
	DD	0d8000000H
gft_le	DW	00H
	DW	0c201H
	DW	08403H
	DW	04602H
	DW	0807H
	DW	0ca06H
	DW	08c04H
	DW	04e05H
	DW	0100eH
	DW	0d20fH
	DW	0940dH
	DW	0560cH
	DW	01809H
	DW	0da08H
	DW	09c0aH
	DW	05e0bH
	DW	0201cH
	DW	0e21dH
	DW	0a41fH
	DW	0661eH
	DW	0281bH
	DW	0ea1aH
	DW	0ac18H
	DW	06e19H
	DW	03012H
	DW	0f213H
	DW	0b411H
	DW	07610H
	DW	03815H
	DW	0fa14H
	DW	0bc16H
	DW	07e17H
	DW	04038H
	DW	08239H
	DW	0c43bH
	DW	063aH
	DW	0483fH
	DW	08a3eH
	DW	0cc3cH
	DW	0e3dH
	DW	05036H
	DW	09237H
	DW	0d435H
	DW	01634H
	DW	05831H
	DW	09a30H
	DW	0dc32H
	DW	01e33H
	DW	06024H
	DW	0a225H
	DW	0e427H
	DW	02626H
	DW	06823H
	DW	0aa22H
	DW	0ec20H
	DW	02e21H
	DW	0702aH
	DW	0b22bH
	DW	0f429H
	DW	03628H
	DW	0782dH
	DW	0ba2cH
	DW	0fc2eH
	DW	03e2fH
	DW	08070H
	DW	04271H
	DW	0473H
	DW	0c672H
	DW	08877H
	DW	04a76H
	DW	0c74H
	DW	0ce75H
	DW	0907eH
	DW	0527fH
	DW	0147dH
	DW	0d67cH
	DW	09879H
	DW	05a78H
	DW	01c7aH
	DW	0de7bH
	DW	0a06cH
	DW	0626dH
	DW	0246fH
	DW	0e66eH
	DW	0a86bH
	DW	06a6aH
	DW	02c68H
	DW	0ee69H
	DW	0b062H
	DW	07263H
	DW	03461H
	DW	0f660H
	DW	0b865H
	DW	07a64H
	DW	03c66H
	DW	0fe67H
	DW	0c048H
	DW	0249H
	DW	0444bH
	DW	0864aH
	DW	0c84fH
	DW	0a4eH
	DW	04c4cH
	DW	08e4dH
	DW	0d046H
	DW	01247H
	DW	05445H
	DW	09644H
	DW	0d841H
	DW	01a40H
	DW	05c42H
	DW	09e43H
	DW	0e054H
	DW	02255H
	DW	06457H
	DW	0a656H
	DW	0e853H
	DW	02a52H
	DW	06c50H
	DW	0ae51H
	DW	0f05aH
	DW	0325bH
	DW	07459H
	DW	0b658H
	DW	0f85dH
	DW	03a5cH
	DW	07c5eH
	DW	0be5fH
	DW	0e1H
	DW	0c2e0H
	DW	084e2H
	DW	046e3H
	DW	08e6H
	DW	0cae7H
	DW	08ce5H
	DW	04ee4H
	DW	010efH
	DW	0d2eeH
	DW	094ecH
	DW	056edH
	DW	018e8H
	DW	0dae9H
	DW	09cebH
	DW	05eeaH
	DW	020fdH
	DW	0e2fcH
	DW	0a4feH
	DW	066ffH
	DW	028faH
	DW	0eafbH
	DW	0acf9H
	DW	06ef8H
	DW	030f3H
	DW	0f2f2H
	DW	0b4f0H
	DW	076f1H
	DW	038f4H
	DW	0faf5H
	DW	0bcf7H
	DW	07ef6H
	DW	040d9H
	DW	082d8H
	DW	0c4daH
	DW	06dbH
	DW	048deH
	DW	08adfH
	DW	0ccddH
	DW	0edcH
	DW	050d7H
	DW	092d6H
	DW	0d4d4H
	DW	016d5H
	DW	058d0H
	DW	09ad1H
	DW	0dcd3H
	DW	01ed2H
	DW	060c5H
	DW	0a2c4H
	DW	0e4c6H
	DW	026c7H
	DW	068c2H
	DW	0aac3H
	DW	0ecc1H
	DW	02ec0H
	DW	070cbH
	DW	0b2caH
	DW	0f4c8H
	DW	036c9H
	DW	078ccH
	DW	0bacdH
	DW	0fccfH
	DW	03eceH
	DW	08091H
	DW	04290H
	DW	0492H
	DW	0c693H
	DW	08896H
	DW	04a97H
	DW	0c95H
	DW	0ce94H
	DW	0909fH
	DW	0529eH
	DW	0149cH
	DW	0d69dH
	DW	09898H
	DW	05a99H
	DW	01c9bH
	DW	0de9aH
	DW	0a08dH
	DW	0628cH
	DW	0248eH
	DW	0e68fH
	DW	0a88aH
	DW	06a8bH
	DW	02c89H
	DW	0ee88H
	DW	0b083H
	DW	07282H
	DW	03480H
	DW	0f681H
	DW	0b884H
	DW	07a85H
	DW	03c87H
	DW	0fe86H
	DW	0c0a9H
	DW	02a8H
	DW	044aaH
	DW	086abH
	DW	0c8aeH
	DW	0aafH
	DW	04cadH
	DW	08eacH
	DW	0d0a7H
	DW	012a6H
	DW	054a4H
	DW	096a5H
	DW	0d8a0H
	DW	01aa1H
	DW	05ca3H
	DW	09ea2H
	DW	0e0b5H
	DW	022b4H
	DW	064b6H
	DW	0a6b7H
	DW	0e8b2H
	DW	02ab3H
	DW	06cb1H
	DW	0aeb0H
	DW	0f0bbH
	DW	032baH
	DW	074b8H
	DW	0b6b9H
	DW	0f8bcH
	DW	03abdH
	DW	07cbfH
	DW	0bebeH
gft_le64 DW	00H
	DW	0b001H
	DW	06003H
	DW	0d002H
	DW	0c006H
	DW	07007H
	DW	0a005H
	DW	01004H
	DW	0800dH
	DW	0300cH
	DW	0e00eH
	DW	0500fH
	DW	0400bH
	DW	0f00aH
	DW	02008H
	DW	09009H
	DW	01bH
	DW	0b01aH
	DW	06018H
	DW	0d019H
	DW	0c01dH
	DW	0701cH
	DW	0a01eH
	DW	0101fH
	DW	08016H
	DW	03017H
	DW	0e015H
	DW	05014H
	DW	04010H
	DW	0f011H
	DW	02013H
	DW	09012H
	DW	036H
	DW	0b037H
	DW	06035H
	DW	0d034H
	DW	0c030H
	DW	07031H
	DW	0a033H
	DW	01032H
	DW	0803bH
	DW	0303aH
	DW	0e038H
	DW	05039H
	DW	0403dH
	DW	0f03cH
	DW	0203eH
	DW	0903fH
	DW	02dH
	DW	0b02cH
	DW	0602eH
	DW	0d02fH
	DW	0c02bH
	DW	0702aH
	DW	0a028H
	DW	01029H
	DW	08020H
	DW	03021H
	DW	0e023H
	DW	05022H
	DW	04026H
	DW	0f027H
	DW	02025H
	DW	09024H
	DW	06cH
	DW	0b06dH
	DW	0606fH
	DW	0d06eH
	DW	0c06aH
	DW	0706bH
	DW	0a069H
	DW	01068H
	DW	08061H
	DW	03060H
	DW	0e062H
	DW	05063H
	DW	04067H
	DW	0f066H
	DW	02064H
	DW	09065H
	DW	077H
	DW	0b076H
	DW	06074H
	DW	0d075H
	DW	0c071H
	DW	07070H
	DW	0a072H
	DW	01073H
	DW	0807aH
	DW	0307bH
	DW	0e079H
	DW	05078H
	DW	0407cH
	DW	0f07dH
	DW	0207fH
	DW	0907eH
	DW	05aH
	DW	0b05bH
	DW	06059H
	DW	0d058H
	DW	0c05cH
	DW	0705dH
	DW	0a05fH
	DW	0105eH
	DW	08057H
	DW	03056H
	DW	0e054H
	DW	05055H
	DW	04051H
	DW	0f050H
	DW	02052H
	DW	09053H
	DW	041H
	DW	0b040H
	DW	06042H
	DW	0d043H
	DW	0c047H
	DW	07046H
	DW	0a044H
	DW	01045H
	DW	0804cH
	DW	0304dH
	DW	0e04fH
	DW	0504eH
	DW	0404aH
	DW	0f04bH
	DW	02049H
	DW	09048H
	DW	0d8H
	DW	0b0d9H
	DW	060dbH
	DW	0d0daH
	DW	0c0deH
	DW	070dfH
	DW	0a0ddH
	DW	010dcH
	DW	080d5H
	DW	030d4H
	DW	0e0d6H
	DW	050d7H
	DW	040d3H
	DW	0f0d2H
	DW	020d0H
	DW	090d1H
	DW	0c3H
	DW	0b0c2H
	DW	060c0H
	DW	0d0c1H
	DW	0c0c5H
	DW	070c4H
	DW	0a0c6H
	DW	010c7H
	DW	080ceH
	DW	030cfH
	DW	0e0cdH
	DW	050ccH
	DW	040c8H
	DW	0f0c9H
	DW	020cbH
	DW	090caH
	DW	0eeH
	DW	0b0efH
	DW	060edH
	DW	0d0ecH
	DW	0c0e8H
	DW	070e9H
	DW	0a0ebH
	DW	010eaH
	DW	080e3H
	DW	030e2H
	DW	0e0e0H
	DW	050e1H
	DW	040e5H
	DW	0f0e4H
	DW	020e6H
	DW	090e7H
	DW	0f5H
	DW	0b0f4H
	DW	060f6H
	DW	0d0f7H
	DW	0c0f3H
	DW	070f2H
	DW	0a0f0H
	DW	010f1H
	DW	080f8H
	DW	030f9H
	DW	0e0fbH
	DW	050faH
	DW	040feH
	DW	0f0ffH
	DW	020fdH
	DW	090fcH
	DW	0b4H
	DW	0b0b5H
	DW	060b7H
	DW	0d0b6H
	DW	0c0b2H
	DW	070b3H
	DW	0a0b1H
	DW	010b0H
	DW	080b9H
	DW	030b8H
	DW	0e0baH
	DW	050bbH
	DW	040bfH
	DW	0f0beH
	DW	020bcH
	DW	090bdH
	DW	0afH
	DW	0b0aeH
	DW	060acH
	DW	0d0adH
	DW	0c0a9H
	DW	070a8H
	DW	0a0aaH
	DW	010abH
	DW	080a2H
	DW	030a3H
	DW	0e0a1H
	DW	050a0H
	DW	040a4H
	DW	0f0a5H
	DW	020a7H
	DW	090a6H
	DW	082H
	DW	0b083H
	DW	06081H
	DW	0d080H
	DW	0c084H
	DW	07085H
	DW	0a087H
	DW	01086H
	DW	0808fH
	DW	0308eH
	DW	0e08cH
	DW	0508dH
	DW	04089H
	DW	0f088H
	DW	0208aH
	DW	0908bH
	DW	099H
	DW	0b098H
	DW	0609aH
	DW	0d09bH
	DW	0c09fH
	DW	0709eH
	DW	0a09cH
	DW	0109dH
	DW	08094H
	DW	03095H
	DW	0e097H
	DW	05096H
	DW	04092H
	DW	0f093H
	DW	02091H
	DW	09090H
gft_be	DW	00H
	DW	01c2H
	DW	0384H
	DW	0246H
	DW	0708H
	DW	06caH
	DW	048cH
	DW	054eH
	DW	0e10H
	DW	0fd2H
	DW	0d94H
	DW	0c56H
	DW	0918H
	DW	08daH
	DW	0a9cH
	DW	0b5eH
	DW	01c20H
	DW	01de2H
	DW	01fa4H
	DW	01e66H
	DW	01b28H
	DW	01aeaH
	DW	018acH
	DW	0196eH
	DW	01230H
	DW	013f2H
	DW	011b4H
	DW	01076H
	DW	01538H
	DW	014faH
	DW	016bcH
	DW	0177eH
	DW	03840H
	DW	03982H
	DW	03bc4H
	DW	03a06H
	DW	03f48H
	DW	03e8aH
	DW	03cccH
	DW	03d0eH
	DW	03650H
	DW	03792H
	DW	035d4H
	DW	03416H
	DW	03158H
	DW	0309aH
	DW	032dcH
	DW	0331eH
	DW	02460H
	DW	025a2H
	DW	027e4H
	DW	02626H
	DW	02368H
	DW	022aaH
	DW	020ecH
	DW	0212eH
	DW	02a70H
	DW	02bb2H
	DW	029f4H
	DW	02836H
	DW	02d78H
	DW	02cbaH
	DW	02efcH
	DW	02f3eH
	DW	07080H
	DW	07142H
	DW	07304H
	DW	072c6H
	DW	07788H
	DW	0764aH
	DW	0740cH
	DW	075ceH
	DW	07e90H
	DW	07f52H
	DW	07d14H
	DW	07cd6H
	DW	07998H
	DW	0785aH
	DW	07a1cH
	DW	07bdeH
	DW	06ca0H
	DW	06d62H
	DW	06f24H
	DW	06ee6H
	DW	06ba8H
	DW	06a6aH
	DW	0682cH
	DW	069eeH
	DW	062b0H
	DW	06372H
	DW	06134H
	DW	060f6H
	DW	065b8H
	DW	0647aH
	DW	0663cH
	DW	067feH
	DW	048c0H
	DW	04902H
	DW	04b44H
	DW	04a86H
	DW	04fc8H
	DW	04e0aH
	DW	04c4cH
	DW	04d8eH
	DW	046d0H
	DW	04712H
	DW	04554H
	DW	04496H
	DW	041d8H
	DW	0401aH
	DW	0425cH
	DW	0439eH
	DW	054e0H
	DW	05522H
	DW	05764H
	DW	056a6H
	DW	053e8H
	DW	0522aH
	DW	0506cH
	DW	051aeH
	DW	05af0H
	DW	05b32H
	DW	05974H
	DW	058b6H
	DW	05df8H
	DW	05c3aH
	DW	05e7cH
	DW	05fbeH
	DW	0e100H
	DW	0e0c2H
	DW	0e284H
	DW	0e346H
	DW	0e608H
	DW	0e7caH
	DW	0e58cH
	DW	0e44eH
	DW	0ef10H
	DW	0eed2H
	DW	0ec94H
	DW	0ed56H
	DW	0e818H
	DW	0e9daH
	DW	0eb9cH
	DW	0ea5eH
	DW	0fd20H
	DW	0fce2H
	DW	0fea4H
	DW	0ff66H
	DW	0fa28H
	DW	0fbeaH
	DW	0f9acH
	DW	0f86eH
	DW	0f330H
	DW	0f2f2H
	DW	0f0b4H
	DW	0f176H
	DW	0f438H
	DW	0f5faH
	DW	0f7bcH
	DW	0f67eH
	DW	0d940H
	DW	0d882H
	DW	0dac4H
	DW	0db06H
	DW	0de48H
	DW	0df8aH
	DW	0ddccH
	DW	0dc0eH
	DW	0d750H
	DW	0d692H
	DW	0d4d4H
	DW	0d516H
	DW	0d058H
	DW	0d19aH
	DW	0d3dcH
	DW	0d21eH
	DW	0c560H
	DW	0c4a2H
	DW	0c6e4H
	DW	0c726H
	DW	0c268H
	DW	0c3aaH
	DW	0c1ecH
	DW	0c02eH
	DW	0cb70H
	DW	0cab2H
	DW	0c8f4H
	DW	0c936H
	DW	0cc78H
	DW	0cdbaH
	DW	0cffcH
	DW	0ce3eH
	DW	09180H
	DW	09042H
	DW	09204H
	DW	093c6H
	DW	09688H
	DW	0974aH
	DW	0950cH
	DW	094ceH
	DW	09f90H
	DW	09e52H
	DW	09c14H
	DW	09dd6H
	DW	09898H
	DW	0995aH
	DW	09b1cH
	DW	09adeH
	DW	08da0H
	DW	08c62H
	DW	08e24H
	DW	08fe6H
	DW	08aa8H
	DW	08b6aH
	DW	0892cH
	DW	088eeH
	DW	083b0H
	DW	08272H
	DW	08034H
	DW	081f6H
	DW	084b8H
	DW	0857aH
	DW	0873cH
	DW	086feH
	DW	0a9c0H
	DW	0a802H
	DW	0aa44H
	DW	0ab86H
	DW	0aec8H
	DW	0af0aH
	DW	0ad4cH
	DW	0ac8eH
	DW	0a7d0H
	DW	0a612H
	DW	0a454H
	DW	0a596H
	DW	0a0d8H
	DW	0a11aH
	DW	0a35cH
	DW	0a29eH
	DW	0b5e0H
	DW	0b422H
	DW	0b664H
	DW	0b7a6H
	DW	0b2e8H
	DW	0b32aH
	DW	0b16cH
	DW	0b0aeH
	DW	0bbf0H
	DW	0ba32H
	DW	0b874H
	DW	0b9b6H
	DW	0bcf8H
	DW	0bd3aH
	DW	0bf7cH
	DW	0bebeH
gft_be64 DW	00H
	DW	01b0H
	DW	0360H
	DW	02d0H
	DW	06c0H
	DW	0770H
	DW	05a0H
	DW	0410H
	DW	0d80H
	DW	0c30H
	DW	0ee0H
	DW	0f50H
	DW	0b40H
	DW	0af0H
	DW	0820H
	DW	0990H
	DW	01b00H
	DW	01ab0H
	DW	01860H
	DW	019d0H
	DW	01dc0H
	DW	01c70H
	DW	01ea0H
	DW	01f10H
	DW	01680H
	DW	01730H
	DW	015e0H
	DW	01450H
	DW	01040H
	DW	011f0H
	DW	01320H
	DW	01290H
	DW	03600H
	DW	037b0H
	DW	03560H
	DW	034d0H
	DW	030c0H
	DW	03170H
	DW	033a0H
	DW	03210H
	DW	03b80H
	DW	03a30H
	DW	038e0H
	DW	03950H
	DW	03d40H
	DW	03cf0H
	DW	03e20H
	DW	03f90H
	DW	02d00H
	DW	02cb0H
	DW	02e60H
	DW	02fd0H
	DW	02bc0H
	DW	02a70H
	DW	028a0H
	DW	02910H
	DW	02080H
	DW	02130H
	DW	023e0H
	DW	02250H
	DW	02640H
	DW	027f0H
	DW	02520H
	DW	02490H
	DW	06c00H
	DW	06db0H
	DW	06f60H
	DW	06ed0H
	DW	06ac0H
	DW	06b70H
	DW	069a0H
	DW	06810H
	DW	06180H
	DW	06030H
	DW	062e0H
	DW	06350H
	DW	06740H
	DW	066f0H
	DW	06420H
	DW	06590H
	DW	07700H
	DW	076b0H
	DW	07460H
	DW	075d0H
	DW	071c0H
	DW	07070H
	DW	072a0H
	DW	07310H
	DW	07a80H
	DW	07b30H
	DW	079e0H
	DW	07850H
	DW	07c40H
	DW	07df0H
	DW	07f20H
	DW	07e90H
	DW	05a00H
	DW	05bb0H
	DW	05960H
	DW	058d0H
	DW	05cc0H
	DW	05d70H
	DW	05fa0H
	DW	05e10H
	DW	05780H
	DW	05630H
	DW	054e0H
	DW	05550H
	DW	05140H
	DW	050f0H
	DW	05220H
	DW	05390H
	DW	04100H
	DW	040b0H
	DW	04260H
	DW	043d0H
	DW	047c0H
	DW	04670H
	DW	044a0H
	DW	04510H
	DW	04c80H
	DW	04d30H
	DW	04fe0H
	DW	04e50H
	DW	04a40H
	DW	04bf0H
	DW	04920H
	DW	04890H
	DW	0d800H
	DW	0d9b0H
	DW	0db60H
	DW	0dad0H
	DW	0dec0H
	DW	0df70H
	DW	0dda0H
	DW	0dc10H
	DW	0d580H
	DW	0d430H
	DW	0d6e0H
	DW	0d750H
	DW	0d340H
	DW	0d2f0H
	DW	0d020H
	DW	0d190H
	DW	0c300H
	DW	0c2b0H
	DW	0c060H
	DW	0c1d0H
	DW	0c5c0H
	DW	0c470H
	DW	0c6a0H
	DW	0c710H
	DW	0ce80H
	DW	0cf30H
	DW	0cde0H
	DW	0cc50H
	DW	0c840H
	DW	0c9f0H
	DW	0cb20H
	DW	0ca90H
	DW	0ee00H
	DW	0efb0H
	DW	0ed60H
	DW	0ecd0H
	DW	0e8c0H
	DW	0e970H
	DW	0eba0H
	DW	0ea10H
	DW	0e380H
	DW	0e230H
	DW	0e0e0H
	DW	0e150H
	DW	0e540H
	DW	0e4f0H
	DW	0e620H
	DW	0e790H
	DW	0f500H
	DW	0f4b0H
	DW	0f660H
	DW	0f7d0H
	DW	0f3c0H
	DW	0f270H
	DW	0f0a0H
	DW	0f110H
	DW	0f880H
	DW	0f930H
	DW	0fbe0H
	DW	0fa50H
	DW	0fe40H
	DW	0fff0H
	DW	0fd20H
	DW	0fc90H
	DW	0b400H
	DW	0b5b0H
	DW	0b760H
	DW	0b6d0H
	DW	0b2c0H
	DW	0b370H
	DW	0b1a0H
	DW	0b010H
	DW	0b980H
	DW	0b830H
	DW	0bae0H
	DW	0bb50H
	DW	0bf40H
	DW	0bef0H
	DW	0bc20H
	DW	0bd90H
	DW	0af00H
	DW	0aeb0H
	DW	0ac60H
	DW	0add0H
	DW	0a9c0H
	DW	0a870H
	DW	0aaa0H
	DW	0ab10H
	DW	0a280H
	DW	0a330H
	DW	0a1e0H
	DW	0a050H
	DW	0a440H
	DW	0a5f0H
	DW	0a720H
	DW	0a690H
	DW	08200H
	DW	083b0H
	DW	08160H
	DW	080d0H
	DW	084c0H
	DW	08570H
	DW	087a0H
	DW	08610H
	DW	08f80H
	DW	08e30H
	DW	08ce0H
	DW	08d50H
	DW	08940H
	DW	088f0H
	DW	08a20H
	DW	08b90H
	DW	09900H
	DW	098b0H
	DW	09a60H
	DW	09bd0H
	DW	09fc0H
	DW	09e70H
	DW	09ca0H
	DW	09d10H
	DW	09480H
	DW	09530H
	DW	097e0H
	DW	09650H
	DW	09240H
	DW	093f0H
	DW	09120H
	DW	09090H
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed\src\common\gfmul.c
;	COMDAT SetBit64
_TEXT	SEGMENT
bit$ = 8
a$ = 16
SetBit64 PROC						; COMDAT

; 584  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 585  : 	a[(63 - bit) / 8] |= 0x80 >> ((63 - bit) % 8);

  00009	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  0000e	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f7 f1		 div	 ecx
  0001b	44 8b c0	 mov	 r8d, eax
  0001e	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  00023	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 08 00 00 00	 mov	 ecx, 8
  0002e	f7 f1		 div	 ecx
  00030	8b ca		 mov	 ecx, edx
  00032	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00037	d3 f8		 sar	 eax, cl
  00039	8b c8		 mov	 ecx, eax
  0003b	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00040	46 0f b6 04 00	 movzx	 r8d, BYTE PTR [rax+r8]
  00045	44 0b c1	 or	 r8d, ecx
  00048	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  0004d	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00051	33 d2		 xor	 edx, edx
  00053	b9 08 00 00 00	 mov	 ecx, 8
  00058	f7 f1		 div	 ecx
  0005a	8b c8		 mov	 ecx, eax
  0005c	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00061	44 88 04 08	 mov	 BYTE PTR [rax+rcx], r8b

; 586  : }

  00065	c3		 ret	 0
SetBit64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT SetBit128
_TEXT	SEGMENT
bit$ = 8
a$ = 16
SetBit128 PROC						; COMDAT

; 579  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 580  : 	a[(127 - bit) / 8] |= 0x80 >> ((127 - bit) % 8);

  00009	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  0000e	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f7 f1		 div	 ecx
  0001b	44 8b c0	 mov	 r8d, eax
  0001e	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  00023	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 08 00 00 00	 mov	 ecx, 8
  0002e	f7 f1		 div	 ecx
  00030	8b ca		 mov	 ecx, edx
  00032	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00037	d3 f8		 sar	 eax, cl
  00039	8b c8		 mov	 ecx, eax
  0003b	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00040	46 0f b6 04 00	 movzx	 r8d, BYTE PTR [rax+r8]
  00045	44 0b c1	 or	 r8d, ecx
  00048	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  0004d	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00051	33 d2		 xor	 edx, edx
  00053	b9 08 00 00 00	 mov	 ecx, 8
  00058	f7 f1		 div	 ecx
  0005a	8b c8		 mov	 ecx, eax
  0005c	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00061	44 88 04 08	 mov	 BYTE PTR [rax+rcx], r8b

; 581  : }

  00065	c3		 ret	 0
SetBit128 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT IsBitSet64
_TEXT	SEGMENT
bit$ = 8
a$ = 16
IsBitSet64 PROC						; COMDAT

; 574  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 575  : 	return a[(63 - bit) / 8] & (0x80 >> ((63 - bit) % 8));

  00009	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  0000e	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f7 f1		 div	 ecx
  0001b	8b c8		 mov	 ecx, eax
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00022	44 0f b6 04 08	 movzx	 r8d, BYTE PTR [rax+rcx]
  00027	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  0002c	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00030	33 d2		 xor	 edx, edx
  00032	b9 08 00 00 00	 mov	 ecx, 8
  00037	f7 f1		 div	 ecx
  00039	8b ca		 mov	 ecx, edx
  0003b	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00040	d3 f8		 sar	 eax, cl
  00042	8b c8		 mov	 ecx, eax
  00044	41 8b c0	 mov	 eax, r8d
  00047	23 c1		 and	 eax, ecx

; 576  : }

  00049	c3		 ret	 0
IsBitSet64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT IsBitSet128
_TEXT	SEGMENT
bit$ = 8
a$ = 16
IsBitSet128 PROC					; COMDAT

; 569  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 570  : 	return a[(127 - bit) / 8] & (0x80 >> ((127 - bit) % 8));

  00009	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  0000e	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f7 f1		 div	 ecx
  0001b	8b c8		 mov	 ecx, eax
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR a$[rsp]
  00022	44 0f b6 04 08	 movzx	 r8d, BYTE PTR [rax+rcx]
  00027	b8 7f 00 00 00	 mov	 eax, 127		; 0000007fH
  0002c	2b 44 24 08	 sub	 eax, DWORD PTR bit$[rsp]
  00030	33 d2		 xor	 edx, edx
  00032	b9 08 00 00 00	 mov	 ecx, 8
  00037	f7 f1		 div	 ecx
  00039	8b ca		 mov	 ecx, edx
  0003b	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00040	d3 f8		 sar	 eax, cl
  00042	8b c8		 mov	 ecx, eax
  00044	41 8b c0	 mov	 eax, r8d
  00047	23 c1		 and	 eax, ecx

; 571  : }

  00049	c3		 ret	 0
IsBitSet128 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mul_lex8_64 DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$mul_lex8_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mul_lex8_64 DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mul_lex8_64
_TEXT	SEGMENT
t$ = 0
x$ = 32
mul_lex8_64 PROC					; COMDAT

; 353  : {   mode(32t)   t = (x[1] >> 24);       /* in little endian format  */

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0000e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00011	c1 e8 18	 shr	 eax, 24
  00014	89 04 24	 mov	 DWORD PTR t$[rsp], eax

; 354  :     x[1] = (x[1] << 8) | (x[0] >> 24);

  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0001f	c1 e1 08	 shl	 ecx, 8
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00027	8b 00		 mov	 eax, DWORD PTR [rax]
  00029	c1 e8 18	 shr	 eax, 24
  0002c	0b c8		 or	 ecx, eax
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00033	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 355  :     x[0] = (x[0] << 8) ^ gft_le64[t];

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0003b	8b 10		 mov	 edx, DWORD PTR [rax]
  0003d	c1 e2 08	 shl	 edx, 8
  00040	8b 0c 24	 mov	 ecx, DWORD PTR t$[rsp]
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gft_le64
  0004a	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0004e	8b ca		 mov	 ecx, edx
  00050	33 c8		 xor	 ecx, eax
  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00057	89 08		 mov	 DWORD PTR [rax], ecx

; 356  : }

  00059	48 83 c4 18	 add	 rsp, 24
  0005d	c3		 ret	 0
mul_lex8_64 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mul_lex8 DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$mul_lex8
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mul_lex8 DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mul_lex8
_TEXT	SEGMENT
t$ = 0
x$ = 32
mul_lex8 PROC						; COMDAT

; 345  : {   mode(32t)   t = (x[3] >> 24);       /* in little endian format  */

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0000e	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00011	c1 e8 18	 shr	 eax, 24
  00014	89 04 24	 mov	 DWORD PTR t$[rsp], eax

; 346  :     x[3] = (x[3] << 8) | (x[2] >> 24);

  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0001c	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  0001f	c1 e1 08	 shl	 ecx, 8
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00027	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0002a	c1 e8 18	 shr	 eax, 24
  0002d	0b c8		 or	 ecx, eax
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00034	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 347  :     x[2] = (x[2] << 8) | (x[1] >> 24);

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0003c	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0003f	c1 e1 08	 shl	 ecx, 8
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00047	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0004a	c1 e8 18	 shr	 eax, 24
  0004d	0b c8		 or	 ecx, eax
  0004f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00054	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 348  :     x[1] = (x[1] << 8) | (x[0] >> 24);

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0005f	c1 e1 08	 shl	 ecx, 8
  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00067	8b 00		 mov	 eax, DWORD PTR [rax]
  00069	c1 e8 18	 shr	 eax, 24
  0006c	0b c8		 or	 ecx, eax
  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00073	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 349  :     x[0] = (x[0] << 8) ^ gft_le[t];

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0007b	8b 10		 mov	 edx, DWORD PTR [rax]
  0007d	c1 e2 08	 shl	 edx, 8
  00080	8b 0c 24	 mov	 ecx, DWORD PTR t$[rsp]
  00083	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gft_le
  0008a	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0008e	8b ca		 mov	 ecx, edx
  00090	33 c8		 xor	 ecx, eax
  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00097	89 08		 mov	 DWORD PTR [rax], ecx

; 350  : }

  00099	48 83 c4 18	 add	 rsp, 24
  0009d	c3		 ret	 0
mul_lex8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT xor_block_aligned64
_TEXT	SEGMENT
p$ = 8
q$ = 16
xor_block_aligned64 PROC				; COMDAT

; 172  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 173  :     lp32(p)[0] ^= lp32(q)[0], lp32(p)[1] ^= lp32(q)[1];

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00018	33 c8		 xor	 ecx, eax
  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  0001f	89 08		 mov	 DWORD PTR [rax], ecx
  00021	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  00026	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0002e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00031	33 c8		 xor	 ecx, eax
  00033	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  00038	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 174  : }

  0003b	c3		 ret	 0
xor_block_aligned64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT xor_block_aligned
_TEXT	SEGMENT
p$ = 8
q$ = 16
xor_block_aligned PROC					; COMDAT

; 166  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 167  :     lp32(p)[0] ^= lp32(q)[0], lp32(p)[1] ^= lp32(q)[1],
; 168  :     lp32(p)[2] ^= lp32(q)[2], lp32(p)[3] ^= lp32(q)[3];

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00018	33 c8		 xor	 ecx, eax
  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  0001f	89 08		 mov	 DWORD PTR [rax], ecx
  00021	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  00026	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0002e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00031	33 c8		 xor	 ecx, eax
  00033	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  00038	89 48 04	 mov	 DWORD PTR [rax+4], ecx
  0003b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  00040	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00045	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00048	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0004b	33 c8		 xor	 ecx, eax
  0004d	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  00052	89 48 08	 mov	 DWORD PTR [rax+8], ecx
  00055	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0005a	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  0005f	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00062	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00065	33 c8		 xor	 ecx, eax
  00067	48 8b 44 24 08	 mov	 rax, QWORD PTR p$[rsp]
  0006c	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 169  : }

  0006f	c3		 ret	 0
xor_block_aligned ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT move_block_aligned64
_TEXT	SEGMENT
p$ = 8
q$ = 16
move_block_aligned64 PROC				; COMDAT

; 161  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 162  :     lp32(p)[0] = lp32(q)[0], lp32(p)[1] = lp32(q)[1];

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 01		 mov	 DWORD PTR [rcx], eax
  00018	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00022	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00025	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 163  : }

  00028	c3		 ret	 0
move_block_aligned64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT move_block_aligned
_TEXT	SEGMENT
p$ = 8
q$ = 16
move_block_aligned PROC					; COMDAT

; 155  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 156  :     lp32(p)[0] = lp32(q)[0], lp32(p)[1] = lp32(q)[1],
; 157  :     lp32(p)[2] = lp32(q)[2], lp32(p)[3] = lp32(q)[3];

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 01		 mov	 DWORD PTR [rcx], eax
  00018	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00022	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00025	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0002d	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00032	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00035	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00038	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p$[rsp]
  0003d	48 8b 44 24 10	 mov	 rax, QWORD PTR q$[rsp]
  00042	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00045	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 158  : }

  00048	c3		 ret	 0
move_block_aligned ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bsw_32 DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$bsw_32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bsw_32 DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bsw_32
_TEXT	SEGMENT
i$ = 0
p$ = 32
n$ = 40
bsw_32	PROC						; COMDAT

; 116  : {   unsigned int i = n;

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24
  0000d	8b 44 24 28	 mov	 eax, DWORD PTR n$[rsp]
  00011	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN2@bsw_32:

; 117  :     while(i--)

  00014	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  00017	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0001a	83 e8 01	 sub	 eax, 1
  0001d	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00020	85 c9		 test	 ecx, ecx
  00022	74 5f		 je	 SHORT $LN1@bsw_32

; 118  :         ((mode(32t)*)p)[i] = bswap_32(((mode(32t)*)p)[i]);

  00024	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0002c	44 8b 04 88	 mov	 r8d, DWORD PTR [rax+rcx*4]
  00030	41 c1 e8 18	 shr	 r8d, 24
  00034	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0003f	c1 e0 08	 shl	 eax, 8
  00042	44 0b c0	 or	 r8d, eax
  00045	41 81 e0 ff 00
	ff 00		 and	 r8d, 16711935		; 00ff00ffH
  0004c	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  0004f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00054	8b 14 88	 mov	 edx, DWORD PTR [rax+rcx*4]
  00057	c1 ea 08	 shr	 edx, 8
  0005a	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00062	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  00065	c1 e1 18	 shl	 ecx, 24
  00068	8b c2		 mov	 eax, edx
  0006a	0b c1		 or	 eax, ecx
  0006c	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  00071	41 8b d0	 mov	 edx, r8d
  00074	0b d0		 or	 edx, eax
  00076	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007e	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  00081	eb 91		 jmp	 SHORT $LN2@bsw_32
$LN1@bsw_32:

; 119  : }

  00083	48 83 c4 18	 add	 rsp, 24
  00087	c3		 ret	 0
bsw_32	ENDP
PUBLIC	Gf64MulTab
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf64MulTab DD imagerel $LN5
	DD	imagerel $LN5+687
	DD	imagerel $unwind$Gf64MulTab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf64MulTab DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Gf64MulTab
_TEXT	SEGMENT
r$ = 32
a$ = 64
p$ = 72
ctx$ = 80
Gf64MulTab PROC						; COMDAT

; 727  : {  

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 728  : 	/* Deprecated/legacy */
; 729  : 
; 730  : 	unsigned __int32 r[CBLK_LEN8 >> 2];
; 731  : 
; 732  : 	move_block_aligned64(r, ctx->gf_t64[7*2][a[7] & 15]);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00018	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  0001c	83 e0 0f	 and	 eax, 15
  0001f	48 63 c8	 movsxd	 rcx, eax
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00027	48 8d 94 c8 00
	17 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5888]
  0002f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00034	e8 00 00 00 00	 call	 move_block_aligned64

; 733  :     xor_block_aligned64(r,  ctx->gf_t64[7*2+1][a[7] >> 4]);

  00039	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0003e	41 0f b6 43 07	 movzx	 eax, BYTE PTR [r11+7]
  00043	c1 f8 04	 sar	 eax, 4
  00046	48 63 c8	 movsxd	 rcx, eax
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0004e	48 8d 94 c8 80
	17 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+6016]
  00056	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0005b	e8 00 00 00 00	 call	 xor_block_aligned64

; 734  : 
; 735  : 	if (*(unsigned __int16 *)a)

  00060	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00065	41 0f b7 03	 movzx	 eax, WORD PTR [r11]
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 99 00 00
	00		 je	 $LN2@Gf64MulTab

; 736  : 	{
; 737  : 		xor_8k64(0);

  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00076	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00079	83 e0 0f	 and	 eax, 15
  0007c	48 63 c8	 movsxd	 rcx, eax
  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00084	48 8d 94 c8 00
	10 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4096]
  0008c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00091	e8 00 00 00 00	 call	 xor_block_aligned64
  00096	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0009b	41 0f b6 03	 movzx	 eax, BYTE PTR [r11]
  0009f	c1 f8 04	 sar	 eax, 4
  000a2	48 63 c8	 movsxd	 rcx, eax
  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  000aa	48 8d 94 c8 80
	10 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4224]
  000b2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  000b7	e8 00 00 00 00	 call	 xor_block_aligned64

; 738  : 		xor_8k64(1);

  000bc	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  000c1	41 0f b6 43 01	 movzx	 eax, BYTE PTR [r11+1]
  000c6	83 e0 0f	 and	 eax, 15
  000c9	48 63 c8	 movsxd	 rcx, eax
  000cc	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  000d1	48 8d 94 c8 00
	11 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4352]
  000d9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  000de	e8 00 00 00 00	 call	 xor_block_aligned64
  000e3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  000e8	41 0f b6 43 01	 movzx	 eax, BYTE PTR [r11+1]
  000ed	c1 f8 04	 sar	 eax, 4
  000f0	48 63 c8	 movsxd	 rcx, eax
  000f3	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  000f8	48 8d 94 c8 80
	11 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4480]
  00100	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00105	e8 00 00 00 00	 call	 xor_block_aligned64
$LN2@Gf64MulTab:

; 739  : 	}
; 740  : 	if (a[2])

  0010a	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0010f	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00113	85 c0		 test	 eax, eax
  00115	74 4d		 je	 SHORT $LN1@Gf64MulTab

; 741  : 	{
; 742  : 		xor_8k64(2);

  00117	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0011c	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00120	83 e0 0f	 and	 eax, 15
  00123	48 63 c8	 movsxd	 rcx, eax
  00126	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0012b	48 8d 94 c8 00
	12 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4608]
  00133	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00138	e8 00 00 00 00	 call	 xor_block_aligned64
  0013d	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00142	41 0f b6 43 02	 movzx	 eax, BYTE PTR [r11+2]
  00147	c1 f8 04	 sar	 eax, 4
  0014a	48 63 c8	 movsxd	 rcx, eax
  0014d	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00152	48 8d 94 c8 80
	12 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4736]
  0015a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0015f	e8 00 00 00 00	 call	 xor_block_aligned64
$LN1@Gf64MulTab:

; 743  : 	}
; 744  : 	xor_8k64(3);

  00164	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00169	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  0016d	83 e0 0f	 and	 eax, 15
  00170	48 63 c8	 movsxd	 rcx, eax
  00173	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00178	48 8d 94 c8 00
	13 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4864]
  00180	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00185	e8 00 00 00 00	 call	 xor_block_aligned64
  0018a	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0018f	41 0f b6 43 03	 movzx	 eax, BYTE PTR [r11+3]
  00194	c1 f8 04	 sar	 eax, 4
  00197	48 63 c8	 movsxd	 rcx, eax
  0019a	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0019f	48 8d 94 c8 80
	13 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+4992]
  001a7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001ac	e8 00 00 00 00	 call	 xor_block_aligned64

; 745  :     xor_8k64(4);

  001b1	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  001b6	41 0f b6 43 04	 movzx	 eax, BYTE PTR [r11+4]
  001bb	83 e0 0f	 and	 eax, 15
  001be	48 63 c8	 movsxd	 rcx, eax
  001c1	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  001c6	48 8d 94 c8 00
	14 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5120]
  001ce	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001d3	e8 00 00 00 00	 call	 xor_block_aligned64
  001d8	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  001dd	41 0f b6 43 04	 movzx	 eax, BYTE PTR [r11+4]
  001e2	c1 f8 04	 sar	 eax, 4
  001e5	48 63 c8	 movsxd	 rcx, eax
  001e8	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  001ed	48 8d 94 c8 80
	14 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5248]
  001f5	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001fa	e8 00 00 00 00	 call	 xor_block_aligned64

; 746  : 	xor_8k64(5);

  001ff	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00204	41 0f b6 43 05	 movzx	 eax, BYTE PTR [r11+5]
  00209	83 e0 0f	 and	 eax, 15
  0020c	48 63 c8	 movsxd	 rcx, eax
  0020f	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00214	48 8d 94 c8 00
	15 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5376]
  0021c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00221	e8 00 00 00 00	 call	 xor_block_aligned64
  00226	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0022b	41 0f b6 43 05	 movzx	 eax, BYTE PTR [r11+5]
  00230	c1 f8 04	 sar	 eax, 4
  00233	48 63 c8	 movsxd	 rcx, eax
  00236	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0023b	48 8d 94 c8 80
	15 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5504]
  00243	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00248	e8 00 00 00 00	 call	 xor_block_aligned64

; 747  : 	xor_8k64(6);

  0024d	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00252	41 0f b6 43 06	 movzx	 eax, BYTE PTR [r11+6]
  00257	83 e0 0f	 and	 eax, 15
  0025a	48 63 c8	 movsxd	 rcx, eax
  0025d	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00262	48 8d 94 c8 00
	16 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5632]
  0026a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0026f	e8 00 00 00 00	 call	 xor_block_aligned64
  00274	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00279	41 0f b6 43 06	 movzx	 eax, BYTE PTR [r11+6]
  0027e	c1 f8 04	 sar	 eax, 4
  00281	48 63 c8	 movsxd	 rcx, eax
  00284	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00289	48 8d 94 c8 80
	16 00 00	 lea	 rdx, QWORD PTR [rax+rcx*8+5760]
  00291	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00296	e8 00 00 00 00	 call	 xor_block_aligned64

; 748  : 
; 749  :     move_block_aligned64(p, r);

  0029b	48 8d 54 24 20	 lea	 rdx, QWORD PTR r$[rsp]
  002a0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  002a5	e8 00 00 00 00	 call	 move_block_aligned64

; 750  : }

  002aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002ae	c3		 ret	 0
Gf64MulTab ENDP
_TEXT	ENDS
PUBLIC	Gf128MulBy64Tab
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf128MulBy64Tab DD imagerel $LN5
	DD	imagerel $LN5+745
	DD	imagerel $unwind$Gf128MulBy64Tab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf128MulBy64Tab DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Gf128MulBy64Tab
_TEXT	SEGMENT
r$ = 32
a$ = 64
p$ = 72
ctx$ = 80
Gf128MulBy64Tab PROC					; COMDAT

; 698  : {  

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 699  : 	unsigned __int32 r[CBLK_LEN >> 2];
; 700  : 
; 701  : 	move_block_aligned(r, ctx->gf_t128[7*2][a[7] & 15]);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00018	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  0001c	83 e0 0f	 and	 eax, 15
  0001f	48 63 c8	 movsxd	 rcx, eax
  00022	48 6b c9 10	 imul	 rcx, 16
  00026	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0002b	48 8d 94 08 00
	0e 00 00	 lea	 rdx, QWORD PTR [rax+rcx+3584]
  00033	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00038	e8 00 00 00 00	 call	 move_block_aligned

; 702  :     xor_block_aligned(r,  ctx->gf_t128[7*2+1][a[7] >> 4]);

  0003d	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00042	41 0f b6 43 07	 movzx	 eax, BYTE PTR [r11+7]
  00047	c1 f8 04	 sar	 eax, 4
  0004a	48 63 c8	 movsxd	 rcx, eax
  0004d	48 6b c9 10	 imul	 rcx, 16
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00056	48 8d 94 08 00
	0f 00 00	 lea	 rdx, QWORD PTR [rax+rcx+3840]
  0005e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00063	e8 00 00 00 00	 call	 xor_block_aligned

; 703  : 
; 704  : 	if (*(unsigned __int16 *)a)

  00068	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0006d	41 0f b7 03	 movzx	 eax, WORD PTR [r11]
  00071	85 c0		 test	 eax, eax
  00073	0f 84 a3 00 00
	00		 je	 $LN2@Gf128MulBy

; 705  : 	{
; 706  : 		xor_8kt64(0);

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0007e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00081	83 e0 0f	 and	 eax, 15
  00084	48 98		 cdqe
  00086	48 6b c0 10	 imul	 rax, 16
  0008a	48 8b 54 24 50	 mov	 rdx, QWORD PTR ctx$[rsp]
  0008f	48 03 d0	 add	 rdx, rax
  00092	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00097	e8 00 00 00 00	 call	 xor_block_aligned
  0009c	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  000a1	41 0f b6 03	 movzx	 eax, BYTE PTR [r11]
  000a5	c1 f8 04	 sar	 eax, 4
  000a8	48 63 c8	 movsxd	 rcx, eax
  000ab	48 6b c9 10	 imul	 rcx, 16
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  000b4	48 8d 94 08 00
	01 00 00	 lea	 rdx, QWORD PTR [rax+rcx+256]
  000bc	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  000c1	e8 00 00 00 00	 call	 xor_block_aligned

; 707  : 		xor_8kt64(1);

  000c6	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  000cb	41 0f b6 43 01	 movzx	 eax, BYTE PTR [r11+1]
  000d0	83 e0 0f	 and	 eax, 15
  000d3	48 63 c8	 movsxd	 rcx, eax
  000d6	48 6b c9 10	 imul	 rcx, 16
  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  000df	48 8d 94 08 00
	02 00 00	 lea	 rdx, QWORD PTR [rax+rcx+512]
  000e7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  000ec	e8 00 00 00 00	 call	 xor_block_aligned
  000f1	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  000f6	41 0f b6 43 01	 movzx	 eax, BYTE PTR [r11+1]
  000fb	c1 f8 04	 sar	 eax, 4
  000fe	48 63 c8	 movsxd	 rcx, eax
  00101	48 6b c9 10	 imul	 rcx, 16
  00105	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0010a	48 8d 94 08 00
	03 00 00	 lea	 rdx, QWORD PTR [rax+rcx+768]
  00112	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00117	e8 00 00 00 00	 call	 xor_block_aligned
$LN2@Gf128MulBy:

; 708  : 	}
; 709  : 	if (a[2])

  0011c	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00121	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00125	85 c0		 test	 eax, eax
  00127	74 55		 je	 SHORT $LN1@Gf128MulBy

; 710  : 	{
; 711  : 		xor_8kt64(2);

  00129	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0012e	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00132	83 e0 0f	 and	 eax, 15
  00135	48 63 c8	 movsxd	 rcx, eax
  00138	48 6b c9 10	 imul	 rcx, 16
  0013c	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00141	48 8d 94 08 00
	04 00 00	 lea	 rdx, QWORD PTR [rax+rcx+1024]
  00149	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0014e	e8 00 00 00 00	 call	 xor_block_aligned
  00153	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00158	41 0f b6 43 02	 movzx	 eax, BYTE PTR [r11+2]
  0015d	c1 f8 04	 sar	 eax, 4
  00160	48 63 c8	 movsxd	 rcx, eax
  00163	48 6b c9 10	 imul	 rcx, 16
  00167	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0016c	48 8d 94 08 00
	05 00 00	 lea	 rdx, QWORD PTR [rax+rcx+1280]
  00174	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00179	e8 00 00 00 00	 call	 xor_block_aligned
$LN1@Gf128MulBy:

; 712  : 	}
; 713  : 	xor_8kt64(3);

  0017e	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00183	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00187	83 e0 0f	 and	 eax, 15
  0018a	48 63 c8	 movsxd	 rcx, eax
  0018d	48 6b c9 10	 imul	 rcx, 16
  00191	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00196	48 8d 94 08 00
	06 00 00	 lea	 rdx, QWORD PTR [rax+rcx+1536]
  0019e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001a3	e8 00 00 00 00	 call	 xor_block_aligned
  001a8	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  001ad	41 0f b6 43 03	 movzx	 eax, BYTE PTR [r11+3]
  001b2	c1 f8 04	 sar	 eax, 4
  001b5	48 63 c8	 movsxd	 rcx, eax
  001b8	48 6b c9 10	 imul	 rcx, 16
  001bc	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  001c1	48 8d 94 08 00
	07 00 00	 lea	 rdx, QWORD PTR [rax+rcx+1792]
  001c9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001ce	e8 00 00 00 00	 call	 xor_block_aligned

; 714  :     xor_8kt64(4);

  001d3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  001d8	41 0f b6 43 04	 movzx	 eax, BYTE PTR [r11+4]
  001dd	83 e0 0f	 and	 eax, 15
  001e0	48 63 c8	 movsxd	 rcx, eax
  001e3	48 6b c9 10	 imul	 rcx, 16
  001e7	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  001ec	48 8d 94 08 00
	08 00 00	 lea	 rdx, QWORD PTR [rax+rcx+2048]
  001f4	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  001f9	e8 00 00 00 00	 call	 xor_block_aligned
  001fe	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00203	41 0f b6 43 04	 movzx	 eax, BYTE PTR [r11+4]
  00208	c1 f8 04	 sar	 eax, 4
  0020b	48 63 c8	 movsxd	 rcx, eax
  0020e	48 6b c9 10	 imul	 rcx, 16
  00212	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00217	48 8d 94 08 00
	09 00 00	 lea	 rdx, QWORD PTR [rax+rcx+2304]
  0021f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  00224	e8 00 00 00 00	 call	 xor_block_aligned

; 715  : 	xor_8kt64(5);

  00229	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  0022e	41 0f b6 43 05	 movzx	 eax, BYTE PTR [r11+5]
  00233	83 e0 0f	 and	 eax, 15
  00236	48 63 c8	 movsxd	 rcx, eax
  00239	48 6b c9 10	 imul	 rcx, 16
  0023d	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00242	48 8d 94 08 00
	0a 00 00	 lea	 rdx, QWORD PTR [rax+rcx+2560]
  0024a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0024f	e8 00 00 00 00	 call	 xor_block_aligned
  00254	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00259	41 0f b6 43 05	 movzx	 eax, BYTE PTR [r11+5]
  0025e	c1 f8 04	 sar	 eax, 4
  00261	48 63 c8	 movsxd	 rcx, eax
  00264	48 6b c9 10	 imul	 rcx, 16
  00268	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  0026d	48 8d 94 08 00
	0b 00 00	 lea	 rdx, QWORD PTR [rax+rcx+2816]
  00275	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  0027a	e8 00 00 00 00	 call	 xor_block_aligned

; 716  : 	xor_8kt64(6);

  0027f	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  00284	41 0f b6 43 06	 movzx	 eax, BYTE PTR [r11+6]
  00289	83 e0 0f	 and	 eax, 15
  0028c	48 63 c8	 movsxd	 rcx, eax
  0028f	48 6b c9 10	 imul	 rcx, 16
  00293	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  00298	48 8d 94 08 00
	0c 00 00	 lea	 rdx, QWORD PTR [rax+rcx+3072]
  002a0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  002a5	e8 00 00 00 00	 call	 xor_block_aligned
  002aa	4c 8b 5c 24 40	 mov	 r11, QWORD PTR a$[rsp]
  002af	41 0f b6 43 06	 movzx	 eax, BYTE PTR [r11+6]
  002b4	c1 f8 04	 sar	 eax, 4
  002b7	48 63 c8	 movsxd	 rcx, eax
  002ba	48 6b c9 10	 imul	 rcx, 16
  002be	48 8b 44 24 50	 mov	 rax, QWORD PTR ctx$[rsp]
  002c3	48 8d 94 08 00
	0d 00 00	 lea	 rdx, QWORD PTR [rax+rcx+3328]
  002cb	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$[rsp]
  002d0	e8 00 00 00 00	 call	 xor_block_aligned

; 717  : 
; 718  :     move_block_aligned(p, r);

  002d5	48 8d 54 24 20	 lea	 rdx, QWORD PTR r$[rsp]
  002da	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  002df	e8 00 00 00 00	 call	 move_block_aligned

; 719  : }

  002e4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002e8	c3		 ret	 0
Gf128MulBy64Tab ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	MirrorBits64
;	COMDAT pdata
pdata	SEGMENT
$pdata$MirrorBits64 DD imagerel $LN12
	DD	imagerel $LN12+220
	DD	imagerel $unwind$MirrorBits64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MirrorBits64 DD 021919H
	DD	07006920aH
	DD	imagerel __GSHandlerCheck
	DD	048H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MirrorBits64
_TEXT	SEGMENT
i$ = 32
t$ = 48
burnc$30002 = 56
burnm$30000 = 64
__$ArrayPad$ = 72
a$ = 96
MirrorBits64 PROC					; COMDAT

; 603  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 604  : 	unsigned __int8 t[64 / 8];
; 605  : 	int i;
; 606  : 	memset (t,0,8);

  00019	48 8d 7c 24 30	 lea	 rdi, QWORD PTR t$[rsp]
  0001e	33 c0		 xor	 eax, eax
  00020	b9 08 00 00 00	 mov	 ecx, 8
  00025	f3 aa		 rep stosb

; 607  : 	for (i = 0; i < 64; i++)

  00027	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002f	eb 0b		 jmp	 SHORT $LN9@MirrorBits
$LN8@MirrorBits:
  00031	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00035	83 c0 01	 add	 eax, 1
  00038	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN9@MirrorBits:
  0003c	83 7c 24 20 40	 cmp	 DWORD PTR i$[rsp], 64	; 00000040H
  00041	7d 27		 jge	 SHORT $LN7@MirrorBits

; 608  : 	{
; 609  : 		if (IsBitSet64(i, a))

  00043	48 8b 54 24 60	 mov	 rdx, QWORD PTR a$[rsp]
  00048	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0004c	e8 00 00 00 00	 call	 IsBitSet64
  00051	85 c0		 test	 eax, eax
  00053	74 13		 je	 SHORT $LN6@MirrorBits

; 610  : 			SetBit64 (63 - i, t);

  00055	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0005a	2b 4c 24 20	 sub	 ecx, DWORD PTR i$[rsp]
  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR t$[rsp]
  00063	e8 00 00 00 00	 call	 SetBit64
$LN6@MirrorBits:

; 611  : 	}

  00068	eb c7		 jmp	 SHORT $LN8@MirrorBits
$LN7@MirrorBits:

; 612  : 	memcpy (a, t, sizeof (t));

  0006a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN5@MirrorBits:

; 613  : 	burn (t,sizeof (t));

  00077	48 8d 44 24 30	 lea	 rax, QWORD PTR t$[rsp]
  0007c	48 89 44 24 40	 mov	 QWORD PTR burnm$30000[rsp], rax
  00081	c7 44 24 38 08
	00 00 00	 mov	 DWORD PTR burnc$30002[rsp], 8
  00089	ba 08 00 00 00	 mov	 edx, 8
  0008e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR t$[rsp]
  00093	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@MirrorBits:
  00098	8b 4c 24 38	 mov	 ecx, DWORD PTR burnc$30002[rsp]
  0009c	8b 44 24 38	 mov	 eax, DWORD PTR burnc$30002[rsp]
  000a0	83 e8 01	 sub	 eax, 1
  000a3	89 44 24 38	 mov	 DWORD PTR burnc$30002[rsp], eax
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 18		 je	 SHORT $LN1@MirrorBits
  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR burnm$30000[rsp]
  000b0	c6 00 00	 mov	 BYTE PTR [rax], 0
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR burnm$30000[rsp]
  000b8	48 83 c0 01	 add	 rax, 1
  000bc	48 89 44 24 40	 mov	 QWORD PTR burnm$30000[rsp], rax
  000c1	eb d5		 jmp	 SHORT $LN2@MirrorBits
$LN1@MirrorBits:
  000c3	33 c0		 xor	 eax, eax
  000c5	85 c0		 test	 eax, eax
  000c7	75 ae		 jne	 SHORT $LN5@MirrorBits

; 614  : }

  000c9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ce	48 33 cc	 xor	 rcx, rsp
  000d1	e8 00 00 00 00	 call	 __security_check_cookie
  000d6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000da	5f		 pop	 rdi
  000db	c3		 ret	 0
MirrorBits64 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	MirrorBits128
;	COMDAT pdata
pdata	SEGMENT
$pdata$MirrorBits128 DD imagerel $LN12
	DD	imagerel $LN12+235
	DD	imagerel $unwind$MirrorBits128
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MirrorBits128 DD 031a19H
	DD	07007c20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	050H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MirrorBits128
_TEXT	SEGMENT
i$ = 32
t$ = 48
burnc$29984 = 64
burnm$29982 = 72
__$ArrayPad$ = 80
a$ = 128
MirrorBits128 PROC					; COMDAT

; 589  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 590  : 	unsigned __int8 t[128 / 8];
; 591  : 	int i;
; 592  : 	memset (t,0,16);

  0001a	48 8d 7c 24 30	 lea	 rdi, QWORD PTR t$[rsp]
  0001f	33 c0		 xor	 eax, eax
  00021	b9 10 00 00 00	 mov	 ecx, 16
  00026	f3 aa		 rep stosb

; 593  : 	for (i = 0; i < 128; i++)

  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00030	eb 0b		 jmp	 SHORT $LN9@MirrorBits@2
$LN8@MirrorBits@2:
  00032	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN9@MirrorBits@2:
  0003d	81 7c 24 20 80
	00 00 00	 cmp	 DWORD PTR i$[rsp], 128	; 00000080H
  00045	7d 2a		 jge	 SHORT $LN7@MirrorBits@2

; 594  : 	{
; 595  : 		if (IsBitSet128(i, a))

  00047	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR a$[rsp]
  0004f	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00053	e8 00 00 00 00	 call	 IsBitSet128
  00058	85 c0		 test	 eax, eax
  0005a	74 13		 je	 SHORT $LN6@MirrorBits@2

; 596  : 			SetBit128 (127 - i, t);

  0005c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00061	2b 4c 24 20	 sub	 ecx, DWORD PTR i$[rsp]
  00065	48 8d 54 24 30	 lea	 rdx, QWORD PTR t$[rsp]
  0006a	e8 00 00 00 00	 call	 SetBit128
$LN6@MirrorBits@2:

; 597  : 	}

  0006f	eb c1		 jmp	 SHORT $LN8@MirrorBits@2
$LN7@MirrorBits@2:

; 598  : 	memcpy (a, t, sizeof (t));

  00071	48 8d 74 24 30	 lea	 rsi, QWORD PTR t$[rsp]
  00076	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR a$[rsp]
  0007e	b9 10 00 00 00	 mov	 ecx, 16
  00083	f3 a4		 rep movsb
$LN5@MirrorBits@2:

; 599  : 	burn (t,sizeof (t));

  00085	48 8d 44 24 30	 lea	 rax, QWORD PTR t$[rsp]
  0008a	48 89 44 24 48	 mov	 QWORD PTR burnm$29982[rsp], rax
  0008f	c7 44 24 40 10
	00 00 00	 mov	 DWORD PTR burnc$29984[rsp], 16
  00097	ba 10 00 00 00	 mov	 edx, 16
  0009c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR t$[rsp]
  000a1	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@MirrorBits@2:
  000a6	8b 4c 24 40	 mov	 ecx, DWORD PTR burnc$29984[rsp]
  000aa	8b 44 24 40	 mov	 eax, DWORD PTR burnc$29984[rsp]
  000ae	83 e8 01	 sub	 eax, 1
  000b1	89 44 24 40	 mov	 DWORD PTR burnc$29984[rsp], eax
  000b5	85 c9		 test	 ecx, ecx
  000b7	74 18		 je	 SHORT $LN1@MirrorBits@2
  000b9	48 8b 44 24 48	 mov	 rax, QWORD PTR burnm$29982[rsp]
  000be	c6 00 00	 mov	 BYTE PTR [rax], 0
  000c1	48 8b 44 24 48	 mov	 rax, QWORD PTR burnm$29982[rsp]
  000c6	48 83 c0 01	 add	 rax, 1
  000ca	48 89 44 24 48	 mov	 QWORD PTR burnm$29982[rsp], rax
  000cf	eb d5		 jmp	 SHORT $LN2@MirrorBits@2
$LN1@MirrorBits@2:
  000d1	33 c0		 xor	 eax, eax
  000d3	85 c0		 test	 eax, eax
  000d5	75 ae		 jne	 SHORT $LN5@MirrorBits@2

; 600  : }

  000d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000dc	48 33 cc	 xor	 rcx, rsp
  000df	e8 00 00 00 00	 call	 __security_check_cookie
  000e4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000e8	5f		 pop	 rdi
  000e9	5e		 pop	 rsi
  000ea	c3		 ret	 0
MirrorBits128 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mul_x64 DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$mul_x64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mul_x64 DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mul_x64
_TEXT	SEGMENT
t$ = 32
x$ = 64
mul_x64	PROC						; COMDAT

; 315  : {   mode(32t)   t;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 316  : 
; 317  :     bsw_32(x, 2);

  00009	ba 02 00 00 00	 mov	 edx, 2
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00013	e8 00 00 00 00	 call	 bsw_32

; 318  : 
; 319  :     /* at this point the filed element bits 0..127 are set out  */
; 320  :     /* as follows in 32-bit words (where the most significant   */
; 321  :     /* (ms) numeric bits are to the left)                       */
; 322  :     /*                                                          */
; 323  :     /*            x[0]      x[1]      x[2]      x[3]            */
; 324  :     /*          ms    ls  ms    ls  ms    ls  ms     ls         */
; 325  :     /* field:   0 ... 31  32 .. 63  64 .. 95  96 .. 127         */
; 326  : 
; 327  :     t = gf_poly64[x[1] & 1];          /* bit 127 of the element   */

  00018	4c 8b 5c 24 40	 mov	 r11, QWORD PTR x$[rsp]
  0001d	41 8b 43 04	 mov	 eax, DWORD PTR [r11+4]
  00021	83 e0 01	 and	 eax, 1
  00024	8b c8		 mov	 ecx, eax
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gf_poly64
  0002d	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00030	89 44 24 20	 mov	 DWORD PTR t$[rsp], eax

; 328  : 										/* shift bits up by one */
; 329  : 										/* position             */
; 330  :     x[1] = (x[1] >> 1) | (x[0] << 31);  /* if bit 7 is 1 xor in */

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0003c	d1 e9		 shr	 ecx, 1
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00043	8b 00		 mov	 eax, DWORD PTR [rax]
  00045	c1 e0 1f	 shl	 eax, 31
  00048	0b c8		 or	 ecx, eax
  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004f	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 331  :     x[0] = (x[0] >> 1) ^ t;             /* the field polynomial */

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00057	8b 08		 mov	 ecx, DWORD PTR [rax]
  00059	d1 e9		 shr	 ecx, 1
  0005b	33 4c 24 20	 xor	 ecx, DWORD PTR t$[rsp]
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00064	89 08		 mov	 DWORD PTR [rax], ecx

; 332  :     bsw_32(x, 2);

  00066	ba 02 00 00 00	 mov	 edx, 2
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00070	e8 00 00 00 00	 call	 bsw_32

; 333  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
mul_x64	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mul_x DD	imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$mul_x
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mul_x DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mul_x
_TEXT	SEGMENT
t$ = 32
x$ = 64
mul_x	PROC						; COMDAT

; 294  : {   mode(32t)   t;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 295  : 
; 296  :     bsw_32(x, 4);

  00009	ba 04 00 00 00	 mov	 edx, 4
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00013	e8 00 00 00 00	 call	 bsw_32

; 297  : 
; 298  :     /* at this point the filed element bits 0..127 are set out  */
; 299  :     /* as follows in 32-bit words (where the most significant   */
; 300  :     /* (ms) numeric bits are to the left)                       */
; 301  :     /*                                                          */
; 302  :     /*            x[0]      x[1]      x[2]      x[3]            */
; 303  :     /*          ms    ls  ms    ls  ms    ls  ms     ls         */
; 304  :     /* field:   0 ... 31  32 .. 63  64 .. 95  96 .. 127         */
; 305  : 
; 306  :     t = gf_poly[x[3] & 1];          /* bit 127 of the element   */

  00018	4c 8b 5c 24 40	 mov	 r11, QWORD PTR x$[rsp]
  0001d	41 8b 43 0c	 mov	 eax, DWORD PTR [r11+12]
  00021	83 e0 01	 and	 eax, 1
  00024	8b c8		 mov	 ecx, eax
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gf_poly
  0002d	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00030	89 44 24 20	 mov	 DWORD PTR t$[rsp], eax

; 307  :     x[3] = (x[3] >> 1) | (x[2] << 31);  /* shift bits up by one */

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00039	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  0003c	d1 e9		 shr	 ecx, 1
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00043	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00046	c1 e0 1f	 shl	 eax, 31
  00049	0b c8		 or	 ecx, eax
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00050	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 308  :     x[2] = (x[2] >> 1) | (x[1] << 31);  /* position             */

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0005b	d1 e9		 shr	 ecx, 1
  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00062	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00065	c1 e0 1f	 shl	 eax, 31
  00068	0b c8		 or	 ecx, eax
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0006f	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 309  :     x[1] = (x[1] >> 1) | (x[0] << 31);  /* if bit 7 is 1 xor in */

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00077	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0007a	d1 e9		 shr	 ecx, 1
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	c1 e0 1f	 shl	 eax, 31
  00086	0b c8		 or	 ecx, eax
  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0008d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 310  :     x[0] = (x[0] >> 1) ^ t;             /* the field polynomial */

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  00095	8b 08		 mov	 ecx, DWORD PTR [rax]
  00097	d1 e9		 shr	 ecx, 1
  00099	33 4c 24 20	 xor	 ecx, DWORD PTR t$[rsp]
  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  000a2	89 08		 mov	 DWORD PTR [rax], ecx

; 311  :     bsw_32(x, 4);

  000a4	ba 04 00 00 00	 mov	 edx, 4
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000ae	e8 00 00 00 00	 call	 bsw_32

; 312  : }

  000b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b7	c3		 ret	 0
mul_x	ENDP
PUBLIC	compile_4k_table64
;	COMDAT pdata
pdata	SEGMENT
$pdata$compile_4k_table64 DD imagerel $LN24
	DD	imagerel $LN24+895
	DD	imagerel $unwind$compile_4k_table64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compile_4k_table64 DD 020f01H
	DD	0700b920fH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compile_4k_table64
_TEXT	SEGMENT
i$ = 32
k$ = 36
j$ = 40
pk$29941 = 48
pl$29942 = 56
pj$29940 = 64
a$ = 96
ctx$ = 104
compile_4k_table64 PROC					; COMDAT

; 523  : {   int i, j, k;

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 524  : 
; 525  :     memset(ctx->gf_t4k, 0, sizeof(ctx->gf_t4k));

  0000f	48 8b 7c 24 68	 mov	 rdi, QWORD PTR ctx$[rsp]
  00014	33 c0		 xor	 eax, eax
  00016	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0001b	f3 aa		 rep stosb

; 526  :     for(i = 0; i < 2 * CBLK_LEN8; ++i)

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0b		 jmp	 SHORT $LN21@compile_4k
$LN20@compile_4k:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN21@compile_4k:
  00032	83 7c 24 20 10	 cmp	 DWORD PTR i$[rsp], 16
  00037	0f 8d 3c 03 00
	00		 jge	 $LN19@compile_4k

; 527  :     {
; 528  :         if(i == 0)

  0003d	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00042	0f 85 0d 01 00
	00		 jne	 $LN18@compile_4k

; 529  :         {
; 530  :             memcpy(ctx->gf_t4k[1][8], a, CBLK_LEN8);

  00048	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  0004d	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 89 81 80 01
	00 00		 mov	 QWORD PTR [rcx+384], rax

; 531  :             for(j = 4; j > 0; j >>= 1)

  0005c	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4
  00064	eb 0a		 jmp	 SHORT $LN17@compile_4k
$LN16@compile_4k:
  00066	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0006a	d1 f8		 sar	 eax, 1
  0006c	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN17@compile_4k:
  00070	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  00075	7e 51		 jle	 SHORT $LN15@compile_4k

; 532  :             {
; 533  :                 memcpy(ctx->gf_t4k[1][j], ctx->gf_t4k[1][j + j], CBLK_LEN8);

  00077	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  0007b	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0007f	03 c1		 add	 eax, ecx
  00081	48 63 f8	 movsxd	 rdi, eax
  00084	48 6b ff 10	 imul	 rdi, 16
  00088	48 63 54 24 28	 movsxd	 rdx, DWORD PTR j$[rsp]
  0008d	48 6b d2 10	 imul	 rdx, 16
  00091	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  00096	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  0009b	48 8b 84 38 00
	01 00 00	 mov	 rax, QWORD PTR [rax+rdi+256]
  000a3	48 89 84 11 00
	01 00 00	 mov	 QWORD PTR [rcx+rdx+256], rax

; 534  :                 mul_x64(ctx->gf_t4k[1][j]);

  000ab	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$[rsp]
  000b0	48 6b c9 10	 imul	 rcx, 16
  000b4	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  000b9	48 8d 8c 08 00
	01 00 00	 lea	 rcx, QWORD PTR [rax+rcx+256]
  000c1	e8 00 00 00 00	 call	 mul_x64

; 535  :             }

  000c6	eb 9e		 jmp	 SHORT $LN16@compile_4k
$LN15@compile_4k:

; 536  :             memcpy(ctx->gf_t4k[0][8], ctx->gf_t4k[1][1], CBLK_LEN8);

  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  000cd	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  000d2	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  000d9	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 537  :             mul_x64(ctx->gf_t4k[0][8]);

  000e0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  000e5	48 81 c1 80 00
	00 00		 add	 rcx, 128		; 00000080H
  000ec	e8 00 00 00 00	 call	 mul_x64

; 538  :             for(j = 4; j > 0; j >>= 1)

  000f1	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4
  000f9	eb 0a		 jmp	 SHORT $LN14@compile_4k
$LN13@compile_4k:
  000fb	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  000ff	d1 f8		 sar	 eax, 1
  00101	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN14@compile_4k:
  00105	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  0010a	7e 44		 jle	 SHORT $LN12@compile_4k

; 539  :             {
; 540  :                 memcpy(ctx->gf_t4k[0][j], ctx->gf_t4k[0][j + j], CBLK_LEN8);

  0010c	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  00110	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00114	03 c1		 add	 eax, ecx
  00116	48 63 f8	 movsxd	 rdi, eax
  00119	48 6b ff 10	 imul	 rdi, 16
  0011d	48 63 54 24 28	 movsxd	 rdx, DWORD PTR j$[rsp]
  00122	48 6b d2 10	 imul	 rdx, 16
  00126	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  00130	48 8b 04 38	 mov	 rax, QWORD PTR [rax+rdi]
  00134	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 541  :                 mul_x64(ctx->gf_t4k[0][j]);

  00138	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  0013d	48 6b c0 10	 imul	 rax, 16
  00141	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  00146	48 03 c8	 add	 rcx, rax
  00149	e8 00 00 00 00	 call	 mul_x64

; 542  :             }

  0014e	eb ab		 jmp	 SHORT $LN13@compile_4k
$LN12@compile_4k:

; 543  :         }
; 544  :         else if(i > 1)

  00150	e9 93 00 00 00	 jmp	 $LN11@compile_4k
$LN18@compile_4k:
  00155	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  0015a	0f 8e 88 00 00
	00		 jle	 $LN10@compile_4k

; 545  :             for(j = 8; j > 0; j >>= 1)

  00160	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR j$[rsp], 8
  00168	eb 0a		 jmp	 SHORT $LN9@compile_4k
$LN8@compile_4k:
  0016a	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0016e	d1 f8		 sar	 eax, 1
  00170	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN9@compile_4k:
  00174	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  00179	7e 6d		 jle	 SHORT $LN7@compile_4k

; 546  :             {
; 547  :                 memcpy(ctx->gf_t4k[i][j], ctx->gf_t4k[i - 2][j], CBLK_LEN8);

  0017b	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0017f	83 e8 02	 sub	 eax, 2
  00182	48 98		 cdqe
  00184	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  0018b	4c 8b 44 24 68	 mov	 r8, QWORD PTR ctx$[rsp]
  00190	4c 03 c0	 add	 r8, rax
  00193	48 63 7c 24 28	 movsxd	 rdi, DWORD PTR j$[rsp]
  00198	48 6b ff 10	 imul	 rdi, 16
  0019c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001a1	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  001a8	48 8b 54 24 68	 mov	 rdx, QWORD PTR ctx$[rsp]
  001ad	48 03 d0	 add	 rdx, rax
  001b0	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$[rsp]
  001b5	48 6b c9 10	 imul	 rcx, 16
  001b9	49 8b 04 38	 mov	 rax, QWORD PTR [r8+rdi]
  001bd	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 548  :                 mul_x8_64(ctx->gf_t4k[i][j]);

  001c1	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001c6	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  001cd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ctx$[rsp]
  001d2	48 03 c8	 add	 rcx, rax
  001d5	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  001da	48 6b c0 10	 imul	 rax, 16
  001de	48 03 c8	 add	 rcx, rax
  001e1	e8 00 00 00 00	 call	 mul_lex8_64

; 549  :             }

  001e6	eb 82		 jmp	 SHORT $LN8@compile_4k
$LN7@compile_4k:
$LN10@compile_4k:
$LN11@compile_4k:

; 550  : 
; 551  :         for(j = 2; j < 16; j += j)

  001e8	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  001f0	eb 0e		 jmp	 SHORT $LN6@compile_4k
$LN5@compile_4k:
  001f2	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  001f6	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  001fa	03 c1		 add	 eax, ecx
  001fc	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN6@compile_4k:
  00200	83 7c 24 28 10	 cmp	 DWORD PTR j$[rsp], 16
  00205	0f 8d 69 01 00
	00		 jge	 $LN4@compile_4k

; 552  :         {
; 553  :             mode(32t) *pj = ctx->gf_t4k[i][j];

  0020b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00210	48 69 c9 00 01
	00 00		 imul	 rcx, 256		; 00000100H
  00217	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  0021c	48 03 c1	 add	 rax, rcx
  0021f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$[rsp]
  00224	48 6b c9 10	 imul	 rcx, 16
  00228	48 03 c1	 add	 rax, rcx
  0022b	48 89 44 24 40	 mov	 QWORD PTR pj$29940[rsp], rax

; 554  :             mode(32t) *pk = ctx->gf_t4k[i][1];

  00230	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00235	48 69 c9 00 01
	00 00		 imul	 rcx, 256		; 00000100H
  0023c	48 8b 44 24 68	 mov	 rax, QWORD PTR ctx$[rsp]
  00241	48 8d 44 08 10	 lea	 rax, QWORD PTR [rax+rcx+16]
  00246	48 89 44 24 30	 mov	 QWORD PTR pk$29941[rsp], rax

; 555  :             mode(32t) *pl = ctx->gf_t4k[i][j + 1];

  0024b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00250	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  00257	48 8b 54 24 68	 mov	 rdx, QWORD PTR ctx$[rsp]
  0025c	48 03 d0	 add	 rdx, rax
  0025f	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00263	83 c0 01	 add	 eax, 1
  00266	48 63 c8	 movsxd	 rcx, eax
  00269	48 6b c9 10	 imul	 rcx, 16
  0026d	48 8b c2	 mov	 rax, rdx
  00270	48 03 c1	 add	 rax, rcx
  00273	48 89 44 24 38	 mov	 QWORD PTR pl$29942[rsp], rax

; 556  : 
; 557  :             for(k = 1; k < j; ++k)

  00278	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR k$[rsp], 1
  00280	eb 0b		 jmp	 SHORT $LN3@compile_4k
$LN2@compile_4k:
  00282	8b 44 24 24	 mov	 eax, DWORD PTR k$[rsp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 44 24 24	 mov	 DWORD PTR k$[rsp], eax
$LN3@compile_4k:
  0028d	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00291	39 44 24 24	 cmp	 DWORD PTR k$[rsp], eax
  00295	0f 8d d4 00 00
	00		 jge	 $LN1@compile_4k

; 558  :             {
; 559  :                 *pl++ = pj[0] ^ *pk++;

  0029b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29940[rsp]
  002a0	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  002a5	8b 00		 mov	 eax, DWORD PTR [rax]
  002a7	8b 09		 mov	 ecx, DWORD PTR [rcx]
  002a9	33 c8		 xor	 ecx, eax
  002ab	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  002b0	89 08		 mov	 DWORD PTR [rax], ecx
  002b2	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  002b7	48 83 c0 04	 add	 rax, 4
  002bb	48 89 44 24 38	 mov	 QWORD PTR pl$29942[rsp], rax
  002c0	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  002c5	48 83 c0 04	 add	 rax, 4
  002c9	48 89 44 24 30	 mov	 QWORD PTR pk$29941[rsp], rax

; 560  :                 *pl++ = pj[1] ^ *pk++;

  002ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29940[rsp]
  002d3	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  002d8	8b 00		 mov	 eax, DWORD PTR [rax]
  002da	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  002dd	33 c8		 xor	 ecx, eax
  002df	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  002e4	89 08		 mov	 DWORD PTR [rax], ecx
  002e6	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  002eb	48 83 c0 04	 add	 rax, 4
  002ef	48 89 44 24 38	 mov	 QWORD PTR pl$29942[rsp], rax
  002f4	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  002f9	48 83 c0 04	 add	 rax, 4
  002fd	48 89 44 24 30	 mov	 QWORD PTR pk$29941[rsp], rax

; 561  :                 *pl++ = pj[2] ^ *pk++;

  00302	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29940[rsp]
  00307	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  0030c	8b 00		 mov	 eax, DWORD PTR [rax]
  0030e	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00311	33 c8		 xor	 ecx, eax
  00313	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  00318	89 08		 mov	 DWORD PTR [rax], ecx
  0031a	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  0031f	48 83 c0 04	 add	 rax, 4
  00323	48 89 44 24 38	 mov	 QWORD PTR pl$29942[rsp], rax
  00328	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  0032d	48 83 c0 04	 add	 rax, 4
  00331	48 89 44 24 30	 mov	 QWORD PTR pk$29941[rsp], rax

; 562  :                 *pl++ = pj[3] ^ *pk++;

  00336	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29940[rsp]
  0033b	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  00340	8b 00		 mov	 eax, DWORD PTR [rax]
  00342	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00345	33 c8		 xor	 ecx, eax
  00347	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  0034c	89 08		 mov	 DWORD PTR [rax], ecx
  0034e	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29942[rsp]
  00353	48 83 c0 04	 add	 rax, 4
  00357	48 89 44 24 38	 mov	 QWORD PTR pl$29942[rsp], rax
  0035c	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29941[rsp]
  00361	48 83 c0 04	 add	 rax, 4
  00365	48 89 44 24 30	 mov	 QWORD PTR pk$29941[rsp], rax

; 563  :             }

  0036a	e9 13 ff ff ff	 jmp	 $LN2@compile_4k
$LN1@compile_4k:

; 564  :         }

  0036f	e9 7e fe ff ff	 jmp	 $LN5@compile_4k
$LN4@compile_4k:

; 565  :     }

  00374	e9 ae fc ff ff	 jmp	 $LN20@compile_4k
$LN19@compile_4k:

; 566  : }

  00379	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0037d	5f		 pop	 rdi
  0037e	c3		 ret	 0
compile_4k_table64 ENDP
_TEXT	ENDS
PUBLIC	compile_8k_table
;	COMDAT pdata
pdata	SEGMENT
$pdata$compile_8k_table DD imagerel $LN24
	DD	imagerel $LN24+930
	DD	imagerel $unwind$compile_8k_table
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compile_8k_table DD 031001H
	DD	0700ca210H
	DD	0600bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compile_8k_table
_TEXT	SEGMENT
i$ = 32
k$ = 36
j$ = 40
pk$29908 = 48
pl$29909 = 56
pj$29907 = 64
a$ = 112
ctx$ = 120
compile_8k_table PROC					; COMDAT

; 476  : {   int i, j, k;

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 477  : 
; 478  :     memset(ctx->gf_t8k, 0, 32 * 16 * 16);

  00010	48 8b 7c 24 78	 mov	 rdi, QWORD PTR ctx$[rsp]
  00015	33 c0		 xor	 eax, eax
  00017	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  0001c	f3 aa		 rep stosb

; 479  :     for(i = 0; i < 2 * CBLK_LEN; ++i)

  0001e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00026	eb 0b		 jmp	 SHORT $LN21@compile_8k
$LN20@compile_8k:
  00028	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN21@compile_8k:
  00033	83 7c 24 20 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00038	0f 8d 5d 03 00
	00		 jge	 $LN19@compile_8k

; 480  :     {
; 481  :         if(i == 0)

  0003e	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00043	0f 85 25 01 00
	00		 jne	 $LN18@compile_8k

; 482  :         {
; 483  :             memcpy(ctx->gf_t8k[1][8], a, CBLK_LEN);

  00049	48 8b 7c 24 78	 mov	 rdi, QWORD PTR ctx$[rsp]
  0004e	48 81 c7 80 01
	00 00		 add	 rdi, 384		; 00000180H
  00055	48 8b 74 24 70	 mov	 rsi, QWORD PTR a$[rsp]
  0005a	b9 10 00 00 00	 mov	 ecx, 16
  0005f	f3 a4		 rep movsb

; 484  :             for(j = 4; j > 0; j >>= 1)

  00061	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4
  00069	eb 0a		 jmp	 SHORT $LN17@compile_8k
$LN16@compile_8k:
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0006f	d1 f8		 sar	 eax, 1
  00071	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN17@compile_8k:
  00075	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  0007a	7e 58		 jle	 SHORT $LN15@compile_8k

; 485  :             {
; 486  :                 memcpy(ctx->gf_t8k[1][j], ctx->gf_t8k[1][j + j], CBLK_LEN);

  0007c	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  00080	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00084	03 c1		 add	 eax, ecx
  00086	48 63 f0	 movsxd	 rsi, eax
  00089	48 6b f6 10	 imul	 rsi, 16
  0008d	48 63 54 24 28	 movsxd	 rdx, DWORD PTR j$[rsp]
  00092	48 6b d2 10	 imul	 rdx, 16
  00096	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  0009b	48 8b 44 24 78	 mov	 rax, QWORD PTR ctx$[rsp]
  000a0	48 8d bc 11 00
	01 00 00	 lea	 rdi, QWORD PTR [rcx+rdx+256]
  000a8	48 8d b4 30 00
	01 00 00	 lea	 rsi, QWORD PTR [rax+rsi+256]
  000b0	b9 10 00 00 00	 mov	 ecx, 16
  000b5	f3 a4		 rep movsb

; 487  :                 mul_x(ctx->gf_t8k[1][j]);

  000b7	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$[rsp]
  000bc	48 6b c9 10	 imul	 rcx, 16
  000c0	48 8b 44 24 78	 mov	 rax, QWORD PTR ctx$[rsp]
  000c5	48 8d 8c 08 00
	01 00 00	 lea	 rcx, QWORD PTR [rax+rcx+256]
  000cd	e8 00 00 00 00	 call	 mul_x

; 488  :             }

  000d2	eb 97		 jmp	 SHORT $LN16@compile_8k
$LN15@compile_8k:

; 489  :             memcpy(ctx->gf_t8k[0][8], ctx->gf_t8k[1][1], CBLK_LEN);

  000d4	48 8b 7c 24 78	 mov	 rdi, QWORD PTR ctx$[rsp]
  000d9	48 8b 74 24 78	 mov	 rsi, QWORD PTR ctx$[rsp]
  000de	48 81 c7 80 00
	00 00		 add	 rdi, 128		; 00000080H
  000e5	48 81 c6 10 01
	00 00		 add	 rsi, 272		; 00000110H
  000ec	b9 10 00 00 00	 mov	 ecx, 16
  000f1	f3 a4		 rep movsb

; 490  :             mul_x(ctx->gf_t8k[0][8]);

  000f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  000f8	48 81 c1 80 00
	00 00		 add	 rcx, 128		; 00000080H
  000ff	e8 00 00 00 00	 call	 mul_x

; 491  :             for(j = 4; j > 0; j >>= 1)

  00104	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4
  0010c	eb 0a		 jmp	 SHORT $LN14@compile_8k
$LN13@compile_8k:
  0010e	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00112	d1 f8		 sar	 eax, 1
  00114	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN14@compile_8k:
  00118	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  0011d	7e 4a		 jle	 SHORT $LN12@compile_8k

; 492  :             {
; 493  :                 memcpy(ctx->gf_t8k[0][j], ctx->gf_t8k[0][j + j], CBLK_LEN);

  0011f	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  00123	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00127	03 c1		 add	 eax, ecx
  00129	48 63 f0	 movsxd	 rsi, eax
  0012c	48 6b f6 10	 imul	 rsi, 16
  00130	48 63 54 24 28	 movsxd	 rdx, DWORD PTR j$[rsp]
  00135	48 6b d2 10	 imul	 rdx, 16
  00139	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  0013e	48 8b 44 24 78	 mov	 rax, QWORD PTR ctx$[rsp]
  00143	48 8d 3c 11	 lea	 rdi, QWORD PTR [rcx+rdx]
  00147	48 03 f0	 add	 rsi, rax
  0014a	b9 10 00 00 00	 mov	 ecx, 16
  0014f	f3 a4		 rep movsb

; 494  :                 mul_x(ctx->gf_t8k[0][j]);

  00151	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  00156	48 6b c0 10	 imul	 rax, 16
  0015a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  0015f	48 03 c8	 add	 rcx, rax
  00162	e8 00 00 00 00	 call	 mul_x

; 495  :             }

  00167	eb a5		 jmp	 SHORT $LN13@compile_8k
$LN12@compile_8k:

; 496  :         }
; 497  :         else if(i > 1)

  00169	e9 9c 00 00 00	 jmp	 $LN11@compile_8k
$LN18@compile_8k:
  0016e	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  00173	0f 8e 91 00 00
	00		 jle	 $LN10@compile_8k

; 498  :             for(j = 8; j > 0; j >>= 1)

  00179	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR j$[rsp], 8
  00181	eb 0a		 jmp	 SHORT $LN9@compile_8k
$LN8@compile_8k:
  00183	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00187	d1 f8		 sar	 eax, 1
  00189	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN9@compile_8k:
  0018d	83 7c 24 28 00	 cmp	 DWORD PTR j$[rsp], 0
  00192	7e 76		 jle	 SHORT $LN7@compile_8k

; 499  :             {
; 500  :                 memcpy(ctx->gf_t8k[i][j], ctx->gf_t8k[i - 2][j], CBLK_LEN);

  00194	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00198	83 e8 02	 sub	 eax, 2
  0019b	48 98		 cdqe
  0019d	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  001a4	48 8b 74 24 78	 mov	 rsi, QWORD PTR ctx$[rsp]
  001a9	48 03 f0	 add	 rsi, rax
  001ac	48 63 54 24 28	 movsxd	 rdx, DWORD PTR j$[rsp]
  001b1	48 6b d2 10	 imul	 rdx, 16
  001b5	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001ba	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  001c1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  001c6	48 03 c8	 add	 rcx, rax
  001c9	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  001ce	48 6b c0 10	 imul	 rax, 16
  001d2	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  001d6	48 03 f2	 add	 rsi, rdx
  001d9	b9 10 00 00 00	 mov	 ecx, 16
  001de	f3 a4		 rep movsb

; 501  :                 mul_x8(ctx->gf_t8k[i][j]);

  001e0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001e5	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  001ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ctx$[rsp]
  001f1	48 03 c8	 add	 rcx, rax
  001f4	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  001f9	48 6b c0 10	 imul	 rax, 16
  001fd	48 03 c8	 add	 rcx, rax
  00200	e8 00 00 00 00	 call	 mul_lex8

; 502  :             }

  00205	e9 79 ff ff ff	 jmp	 $LN8@compile_8k
$LN7@compile_8k:
$LN10@compile_8k:
$LN11@compile_8k:

; 503  : 
; 504  :         for(j = 2; j < 16; j += j)

  0020a	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  00212	eb 0e		 jmp	 SHORT $LN6@compile_8k
$LN5@compile_8k:
  00214	8b 4c 24 28	 mov	 ecx, DWORD PTR j$[rsp]
  00218	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0021c	03 c1		 add	 eax, ecx
  0021e	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN6@compile_8k:
  00222	83 7c 24 28 10	 cmp	 DWORD PTR j$[rsp], 16
  00227	0f 8d 69 01 00
	00		 jge	 $LN4@compile_8k

; 505  :         {
; 506  :             mode(32t) *pj = ctx->gf_t8k[i][j];

  0022d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00232	48 69 c9 00 01
	00 00		 imul	 rcx, 256		; 00000100H
  00239	48 8b 44 24 78	 mov	 rax, QWORD PTR ctx$[rsp]
  0023e	48 03 c1	 add	 rax, rcx
  00241	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$[rsp]
  00246	48 6b c9 10	 imul	 rcx, 16
  0024a	48 03 c1	 add	 rax, rcx
  0024d	48 89 44 24 40	 mov	 QWORD PTR pj$29907[rsp], rax

; 507  :             mode(32t) *pk = ctx->gf_t8k[i][1];

  00252	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00257	48 69 c9 00 01
	00 00		 imul	 rcx, 256		; 00000100H
  0025e	48 8b 44 24 78	 mov	 rax, QWORD PTR ctx$[rsp]
  00263	48 8d 44 08 10	 lea	 rax, QWORD PTR [rax+rcx+16]
  00268	48 89 44 24 30	 mov	 QWORD PTR pk$29908[rsp], rax

; 508  :             mode(32t) *pl = ctx->gf_t8k[i][j + 1];

  0026d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00272	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  00279	48 8b 54 24 78	 mov	 rdx, QWORD PTR ctx$[rsp]
  0027e	48 03 d0	 add	 rdx, rax
  00281	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00285	83 c0 01	 add	 eax, 1
  00288	48 63 c8	 movsxd	 rcx, eax
  0028b	48 6b c9 10	 imul	 rcx, 16
  0028f	48 8b c2	 mov	 rax, rdx
  00292	48 03 c1	 add	 rax, rcx
  00295	48 89 44 24 38	 mov	 QWORD PTR pl$29909[rsp], rax

; 509  : 
; 510  :             for(k = 1; k < j; ++k)

  0029a	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR k$[rsp], 1
  002a2	eb 0b		 jmp	 SHORT $LN3@compile_8k
$LN2@compile_8k:
  002a4	8b 44 24 24	 mov	 eax, DWORD PTR k$[rsp]
  002a8	83 c0 01	 add	 eax, 1
  002ab	89 44 24 24	 mov	 DWORD PTR k$[rsp], eax
$LN3@compile_8k:
  002af	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  002b3	39 44 24 24	 cmp	 DWORD PTR k$[rsp], eax
  002b7	0f 8d d4 00 00
	00		 jge	 $LN1@compile_8k

; 511  :             {
; 512  :                 *pl++ = pj[0] ^ *pk++;

  002bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29907[rsp]
  002c2	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  002c7	8b 00		 mov	 eax, DWORD PTR [rax]
  002c9	8b 09		 mov	 ecx, DWORD PTR [rcx]
  002cb	33 c8		 xor	 ecx, eax
  002cd	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  002d2	89 08		 mov	 DWORD PTR [rax], ecx
  002d4	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  002d9	48 83 c0 04	 add	 rax, 4
  002dd	48 89 44 24 38	 mov	 QWORD PTR pl$29909[rsp], rax
  002e2	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  002e7	48 83 c0 04	 add	 rax, 4
  002eb	48 89 44 24 30	 mov	 QWORD PTR pk$29908[rsp], rax

; 513  :                 *pl++ = pj[1] ^ *pk++;

  002f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29907[rsp]
  002f5	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  002fa	8b 00		 mov	 eax, DWORD PTR [rax]
  002fc	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  002ff	33 c8		 xor	 ecx, eax
  00301	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  00306	89 08		 mov	 DWORD PTR [rax], ecx
  00308	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  0030d	48 83 c0 04	 add	 rax, 4
  00311	48 89 44 24 38	 mov	 QWORD PTR pl$29909[rsp], rax
  00316	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  0031b	48 83 c0 04	 add	 rax, 4
  0031f	48 89 44 24 30	 mov	 QWORD PTR pk$29908[rsp], rax

; 514  :                 *pl++ = pj[2] ^ *pk++;

  00324	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29907[rsp]
  00329	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  0032e	8b 00		 mov	 eax, DWORD PTR [rax]
  00330	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00333	33 c8		 xor	 ecx, eax
  00335	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  0033a	89 08		 mov	 DWORD PTR [rax], ecx
  0033c	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  00341	48 83 c0 04	 add	 rax, 4
  00345	48 89 44 24 38	 mov	 QWORD PTR pl$29909[rsp], rax
  0034a	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  0034f	48 83 c0 04	 add	 rax, 4
  00353	48 89 44 24 30	 mov	 QWORD PTR pk$29908[rsp], rax

; 515  :                 *pl++ = pj[3] ^ *pk++;

  00358	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pj$29907[rsp]
  0035d	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  00362	8b 00		 mov	 eax, DWORD PTR [rax]
  00364	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00367	33 c8		 xor	 ecx, eax
  00369	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  0036e	89 08		 mov	 DWORD PTR [rax], ecx
  00370	48 8b 44 24 38	 mov	 rax, QWORD PTR pl$29909[rsp]
  00375	48 83 c0 04	 add	 rax, 4
  00379	48 89 44 24 38	 mov	 QWORD PTR pl$29909[rsp], rax
  0037e	48 8b 44 24 30	 mov	 rax, QWORD PTR pk$29908[rsp]
  00383	48 83 c0 04	 add	 rax, 4
  00387	48 89 44 24 30	 mov	 QWORD PTR pk$29908[rsp], rax

; 516  :             }

  0038c	e9 13 ff ff ff	 jmp	 $LN2@compile_8k
$LN1@compile_8k:

; 517  :         }

  00391	e9 7e fe ff ff	 jmp	 $LN5@compile_8k
$LN4@compile_8k:

; 518  :     }

  00396	e9 8d fc ff ff	 jmp	 $LN20@compile_8k
$LN19@compile_8k:

; 519  : }

  0039b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0039f	5f		 pop	 rdi
  003a0	5e		 pop	 rsi
  003a1	c3		 ret	 0
compile_8k_table ENDP
PUBLIC	__$ArrayPad$
PUBLIC	Gf64TabInit
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf64TabInit DD imagerel $LN20
	DD	imagerel $LN20+590
	DD	imagerel $unwind$Gf64TabInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf64TabInit DD 011d19H
	DD	0e20eH
	DD	imagerel __GSHandlerCheck
	DD	068H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Gf64TabInit
_TEXT	SEGMENT
i$ = 32
am$ = 48
ctx4k$ = 56
j$ = 64
jm$30065 = 68
burnc$30073 = 72
burnm$30071 = 80
burnc$30082 = 88
burnm$30080 = 96
__$ArrayPad$ = 104
a$ = 128
ctx$ = 136
Gf64TabInit PROC					; COMDAT

; 655  : {

$LN20:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 656  : 	/* Deprecated/legacy */
; 657  : 
; 658  : 	GfCtx4k64 *ctx4k;
; 659  : 	unsigned __int8 am[8];
; 660  : 	int i, j;
; 661  : 
; 662  : 	ctx4k = (GfCtx4k64 *) TCalloc (sizeof (GfCtx4k64));

  0001d	41 b8 54 43 4d
	4d		 mov	 r8d, 1296909140		; 4d4d4354H
  00023	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00028	33 c9		 xor	 ecx, ecx
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  00030	48 89 44 24 38	 mov	 QWORD PTR ctx4k$[rsp], rax

; 663  : 	if (!ctx4k)

  00035	48 83 7c 24 38
	00		 cmp	 QWORD PTR ctx4k$[rsp], 0
  0003b	75 07		 jne	 SHORT $LN17@Gf64TabIni

; 664  : 		return FALSE;

  0003d	33 c0		 xor	 eax, eax
  0003f	e9 f8 01 00 00	 jmp	 $LN18@Gf64TabIni
$LN17@Gf64TabIni:

; 665  : 
; 666  : 	memcpy (am, a, 8);

  00044	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 30	 mov	 QWORD PTR am$[rsp], rax

; 667  : 	MirrorBits64 (am);

  00054	48 8d 4c 24 30	 lea	 rcx, QWORD PTR am$[rsp]
  00059	e8 00 00 00 00	 call	 MirrorBits64

; 668  :     compile_4k_table64 (am, ctx4k);

  0005e	48 8b 54 24 38	 mov	 rdx, QWORD PTR ctx4k$[rsp]
  00063	48 8d 4c 24 30	 lea	 rcx, QWORD PTR am$[rsp]
  00068	e8 00 00 00 00	 call	 compile_4k_table64

; 669  : 
; 670  : 	/* Convert LSB-first table to MSB-first */
; 671  : 	for (i = 0; i < 16; i++) 

  0006d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00075	eb 0b		 jmp	 SHORT $LN16@Gf64TabIni
$LN15@Gf64TabIni:
  00077	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN16@Gf64TabIni:
  00082	83 7c 24 20 10	 cmp	 DWORD PTR i$[rsp], 16
  00087	0f 8d f6 00 00
	00		 jge	 $LN14@Gf64TabIni

; 672  : 	{
; 673  : 		for (j = 0; j < 16; j++) 

  0008d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00095	eb 0b		 jmp	 SHORT $LN13@Gf64TabIni
$LN12@Gf64TabIni:
  00097	8b 44 24 40	 mov	 eax, DWORD PTR j$[rsp]
  0009b	83 c0 01	 add	 eax, 1
  0009e	89 44 24 40	 mov	 DWORD PTR j$[rsp], eax
$LN13@Gf64TabIni:
  000a2	83 7c 24 40 10	 cmp	 DWORD PTR j$[rsp], 16
  000a7	0f 8d d1 00 00
	00		 jge	 $LN11@Gf64TabIni

; 674  : 		{
; 675  : 			int jm = 0;

  000ad	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR jm$30065[rsp], 0

; 676  : 			jm |= (j & 0x1) << 3;

  000b5	8b 4c 24 40	 mov	 ecx, DWORD PTR j$[rsp]
  000b9	83 e1 01	 and	 ecx, 1
  000bc	c1 e1 03	 shl	 ecx, 3
  000bf	8b 44 24 44	 mov	 eax, DWORD PTR jm$30065[rsp]
  000c3	0b c1		 or	 eax, ecx
  000c5	89 44 24 44	 mov	 DWORD PTR jm$30065[rsp], eax

; 677  : 			jm |= (j & 0x2) << 1;

  000c9	8b 4c 24 40	 mov	 ecx, DWORD PTR j$[rsp]
  000cd	83 e1 02	 and	 ecx, 2
  000d0	d1 e1		 shl	 ecx, 1
  000d2	8b 44 24 44	 mov	 eax, DWORD PTR jm$30065[rsp]
  000d6	0b c1		 or	 eax, ecx
  000d8	89 44 24 44	 mov	 DWORD PTR jm$30065[rsp], eax

; 678  : 			jm |= (j & 0x4) >> 1;

  000dc	8b 4c 24 40	 mov	 ecx, DWORD PTR j$[rsp]
  000e0	83 e1 04	 and	 ecx, 4
  000e3	d1 f9		 sar	 ecx, 1
  000e5	8b 44 24 44	 mov	 eax, DWORD PTR jm$30065[rsp]
  000e9	0b c1		 or	 eax, ecx
  000eb	89 44 24 44	 mov	 DWORD PTR jm$30065[rsp], eax

; 679  : 			jm |= (j & 0x8) >> 3;

  000ef	8b 4c 24 40	 mov	 ecx, DWORD PTR j$[rsp]
  000f3	83 e1 08	 and	 ecx, 8
  000f6	c1 f9 03	 sar	 ecx, 3
  000f9	8b 44 24 44	 mov	 eax, DWORD PTR jm$30065[rsp]
  000fd	0b c1		 or	 eax, ecx
  000ff	89 44 24 44	 mov	 DWORD PTR jm$30065[rsp], eax

; 680  : 
; 681  : 			memcpy (&ctx->gf_t64[i][jm], (unsigned char *)&ctx4k->gf_t4k[15-i][j], 8);

  00103	b8 0f 00 00 00	 mov	 eax, 15
  00108	2b 44 24 20	 sub	 eax, DWORD PTR i$[rsp]
  0010c	48 98		 cdqe
  0010e	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  00115	4c 8b 4c 24 38	 mov	 r9, QWORD PTR ctx4k$[rsp]
  0011a	4c 03 c8	 add	 r9, rax
  0011d	4c 63 44 24 40	 movsxd	 r8, DWORD PTR j$[rsp]
  00122	4d 6b c0 10	 imul	 r8, 16
  00126	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0012b	48 69 c9 80 00
	00 00		 imul	 rcx, 128		; 00000080H
  00132	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  0013a	48 8d 94 08 00
	10 00 00	 lea	 rdx, QWORD PTR [rax+rcx+4096]
  00142	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR jm$30065[rsp]
  00147	4b 8b 04 01	 mov	 rax, QWORD PTR [r9+r8]
  0014b	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 682  : 			MirrorBits64 ((unsigned char *)&ctx->gf_t64[i][jm]);

  0014f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00154	48 69 c9 80 00
	00 00		 imul	 rcx, 128		; 00000080H
  0015b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00163	48 8d 8c 08 00
	10 00 00	 lea	 rcx, QWORD PTR [rax+rcx+4096]
  0016b	48 63 44 24 44	 movsxd	 rax, DWORD PTR jm$30065[rsp]
  00170	48 8d 0c c1	 lea	 rcx, QWORD PTR [rcx+rax*8]
  00174	e8 00 00 00 00	 call	 MirrorBits64

; 683  : 		}

  00179	e9 19 ff ff ff	 jmp	 $LN12@Gf64TabIni
$LN11@Gf64TabIni:

; 684  : 	}

  0017e	e9 f4 fe ff ff	 jmp	 $LN15@Gf64TabIni
$LN14@Gf64TabIni:
$LN10@Gf64TabIni:

; 685  : 
; 686  : 	burn (ctx4k,sizeof (*ctx4k));

  00183	48 8b 44 24 38	 mov	 rax, QWORD PTR ctx4k$[rsp]
  00188	48 89 44 24 50	 mov	 QWORD PTR burnm$30071[rsp], rax
  0018d	c7 44 24 48 00
	10 00 00	 mov	 DWORD PTR burnc$30073[rsp], 4096 ; 00001000H
  00195	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  0019a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx4k$[rsp]
  0019f	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN7@Gf64TabIni:
  001a4	8b 4c 24 48	 mov	 ecx, DWORD PTR burnc$30073[rsp]
  001a8	8b 44 24 48	 mov	 eax, DWORD PTR burnc$30073[rsp]
  001ac	83 e8 01	 sub	 eax, 1
  001af	89 44 24 48	 mov	 DWORD PTR burnc$30073[rsp], eax
  001b3	85 c9		 test	 ecx, ecx
  001b5	74 18		 je	 SHORT $LN6@Gf64TabIni
  001b7	48 8b 44 24 50	 mov	 rax, QWORD PTR burnm$30071[rsp]
  001bc	c6 00 00	 mov	 BYTE PTR [rax], 0
  001bf	48 8b 44 24 50	 mov	 rax, QWORD PTR burnm$30071[rsp]
  001c4	48 83 c0 01	 add	 rax, 1
  001c8	48 89 44 24 50	 mov	 QWORD PTR burnm$30071[rsp], rax
  001cd	eb d5		 jmp	 SHORT $LN7@Gf64TabIni
$LN6@Gf64TabIni:
  001cf	33 c0		 xor	 eax, eax
  001d1	85 c0		 test	 eax, eax
  001d3	75 ae		 jne	 SHORT $LN10@Gf64TabIni
$LN5@Gf64TabIni:

; 687  : 	burn (am, sizeof (am));

  001d5	48 8d 44 24 30	 lea	 rax, QWORD PTR am$[rsp]
  001da	48 89 44 24 60	 mov	 QWORD PTR burnm$30080[rsp], rax
  001df	c7 44 24 58 08
	00 00 00	 mov	 DWORD PTR burnc$30082[rsp], 8
  001e7	ba 08 00 00 00	 mov	 edx, 8
  001ec	48 8d 4c 24 30	 lea	 rcx, QWORD PTR am$[rsp]
  001f1	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@Gf64TabIni:
  001f6	8b 4c 24 58	 mov	 ecx, DWORD PTR burnc$30082[rsp]
  001fa	8b 44 24 58	 mov	 eax, DWORD PTR burnc$30082[rsp]
  001fe	83 e8 01	 sub	 eax, 1
  00201	89 44 24 58	 mov	 DWORD PTR burnc$30082[rsp], eax
  00205	85 c9		 test	 ecx, ecx
  00207	74 18		 je	 SHORT $LN1@Gf64TabIni
  00209	48 8b 44 24 60	 mov	 rax, QWORD PTR burnm$30080[rsp]
  0020e	c6 00 00	 mov	 BYTE PTR [rax], 0
  00211	48 8b 44 24 60	 mov	 rax, QWORD PTR burnm$30080[rsp]
  00216	48 83 c0 01	 add	 rax, 1
  0021a	48 89 44 24 60	 mov	 QWORD PTR burnm$30080[rsp], rax
  0021f	eb d5		 jmp	 SHORT $LN2@Gf64TabIni
$LN1@Gf64TabIni:
  00221	33 c0		 xor	 eax, eax
  00223	85 c0		 test	 eax, eax
  00225	75 ae		 jne	 SHORT $LN5@Gf64TabIni

; 688  : 	TCfree (ctx4k);

  00227	ba 54 43 4d 4d	 mov	 edx, 1296909140		; 4d4d4354H
  0022c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx4k$[rsp]
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 689  : 	return TRUE;

  00237	b8 01 00 00 00	 mov	 eax, 1
$LN18@Gf64TabIni:

; 690  : }

  0023c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00241	48 33 cc	 xor	 rcx, rsp
  00244	e8 00 00 00 00	 call	 __security_check_cookie
  00249	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0024d	c3		 ret	 0
Gf64TabInit ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	Gf128Tab64Init
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf128Tab64Init DD imagerel $LN20
	DD	imagerel $LN20+615
	DD	imagerel $unwind$Gf128Tab64Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf128Tab64Init DD 042219H
	DD	0110113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Gf128Tab64Init
_TEXT	SEGMENT
i$ = 32
ctx8k$ = 40
am$ = 56
j$ = 72
jm$30025 = 76
burnc$30033 = 80
burnm$30031 = 88
burnc$30042 = 96
burnm$30040 = 104
__$ArrayPad$ = 112
a$ = 160
ctx$ = 168
Gf128Tab64Init PROC					; COMDAT

; 619  : {

$LN20:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 620  : 	GfCtx8k *ctx8k;
; 621  : 	unsigned __int8 am[16];
; 622  : 	int i, j;
; 623  : 
; 624  : 	ctx8k = (GfCtx8k *) TCalloc (sizeof (GfCtx8k));

  00022	41 b8 54 43 4d
	4d		 mov	 r8d, 1296909140		; 4d4d4354H
  00028	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  0002d	33 c9		 xor	 ecx, ecx
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  00035	48 89 44 24 28	 mov	 QWORD PTR ctx8k$[rsp], rax

; 625  : 	if (!ctx8k)

  0003a	48 83 7c 24 28
	00		 cmp	 QWORD PTR ctx8k$[rsp], 0
  00040	75 07		 jne	 SHORT $LN17@Gf128Tab64

; 626  : 		return FALSE;

  00042	33 c0		 xor	 eax, eax
  00044	e9 07 02 00 00	 jmp	 $LN18@Gf128Tab64
$LN17@Gf128Tab64:

; 627  : 
; 628  : 	memcpy (am, a, 16);

  00049	48 8d 7c 24 38	 lea	 rdi, QWORD PTR am$[rsp]
  0004e	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR a$[rsp]
  00056	b9 10 00 00 00	 mov	 ecx, 16
  0005b	f3 a4		 rep movsb

; 629  : 	MirrorBits128 (am);

  0005d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR am$[rsp]
  00062	e8 00 00 00 00	 call	 MirrorBits128

; 630  :     compile_8k_table (am, ctx8k);

  00067	48 8b 54 24 28	 mov	 rdx, QWORD PTR ctx8k$[rsp]
  0006c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR am$[rsp]
  00071	e8 00 00 00 00	 call	 compile_8k_table

; 631  : 
; 632  : 	/* Convert 8k LSB-first table to 4k MSB-first */
; 633  : 	for (i = 16; i < 32; i++) 

  00076	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR i$[rsp], 16
  0007e	eb 0b		 jmp	 SHORT $LN16@Gf128Tab64
$LN15@Gf128Tab64:
  00080	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN16@Gf128Tab64:
  0008b	83 7c 24 20 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00090	0f 8d 01 01 00
	00		 jge	 $LN14@Gf128Tab64

; 634  : 	{
; 635  : 		for (j = 0; j < 16; j++) 

  00096	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0009e	eb 0b		 jmp	 SHORT $LN13@Gf128Tab64
$LN12@Gf128Tab64:
  000a0	8b 44 24 48	 mov	 eax, DWORD PTR j$[rsp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 44 24 48	 mov	 DWORD PTR j$[rsp], eax
$LN13@Gf128Tab64:
  000ab	83 7c 24 48 10	 cmp	 DWORD PTR j$[rsp], 16
  000b0	0f 8d dc 00 00
	00		 jge	 $LN11@Gf128Tab64

; 636  : 		{
; 637  : 			int jm = 0;

  000b6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR jm$30025[rsp], 0

; 638  : 			jm |= (j & 0x1) << 3;

  000be	8b 4c 24 48	 mov	 ecx, DWORD PTR j$[rsp]
  000c2	83 e1 01	 and	 ecx, 1
  000c5	c1 e1 03	 shl	 ecx, 3
  000c8	8b 44 24 4c	 mov	 eax, DWORD PTR jm$30025[rsp]
  000cc	0b c1		 or	 eax, ecx
  000ce	89 44 24 4c	 mov	 DWORD PTR jm$30025[rsp], eax

; 639  : 			jm |= (j & 0x2) << 1;

  000d2	8b 4c 24 48	 mov	 ecx, DWORD PTR j$[rsp]
  000d6	83 e1 02	 and	 ecx, 2
  000d9	d1 e1		 shl	 ecx, 1
  000db	8b 44 24 4c	 mov	 eax, DWORD PTR jm$30025[rsp]
  000df	0b c1		 or	 eax, ecx
  000e1	89 44 24 4c	 mov	 DWORD PTR jm$30025[rsp], eax

; 640  : 			jm |= (j & 0x4) >> 1;

  000e5	8b 4c 24 48	 mov	 ecx, DWORD PTR j$[rsp]
  000e9	83 e1 04	 and	 ecx, 4
  000ec	d1 f9		 sar	 ecx, 1
  000ee	8b 44 24 4c	 mov	 eax, DWORD PTR jm$30025[rsp]
  000f2	0b c1		 or	 eax, ecx
  000f4	89 44 24 4c	 mov	 DWORD PTR jm$30025[rsp], eax

; 641  : 			jm |= (j & 0x8) >> 3;

  000f8	8b 4c 24 48	 mov	 ecx, DWORD PTR j$[rsp]
  000fc	83 e1 08	 and	 ecx, 8
  000ff	c1 f9 03	 sar	 ecx, 3
  00102	8b 44 24 4c	 mov	 eax, DWORD PTR jm$30025[rsp]
  00106	0b c1		 or	 eax, ecx
  00108	89 44 24 4c	 mov	 DWORD PTR jm$30025[rsp], eax

; 642  : 
; 643  : 			memcpy (&ctx->gf_t128[i-16][jm], (unsigned char *)&ctx8k->gf_t8k[31-i][j], 16);

  0010c	b8 1f 00 00 00	 mov	 eax, 31
  00111	2b 44 24 20	 sub	 eax, DWORD PTR i$[rsp]
  00115	48 98		 cdqe
  00117	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  0011e	48 8b 74 24 28	 mov	 rsi, QWORD PTR ctx8k$[rsp]
  00123	48 03 f0	 add	 rsi, rax
  00126	48 63 54 24 48	 movsxd	 rdx, DWORD PTR j$[rsp]
  0012b	48 6b d2 10	 imul	 rdx, 16
  0012f	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00133	83 e8 10	 sub	 eax, 16
  00136	48 98		 cdqe
  00138	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  0013f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00147	48 03 c8	 add	 rcx, rax
  0014a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR jm$30025[rsp]
  0014f	48 6b c0 10	 imul	 rax, 16
  00153	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  00157	48 03 f2	 add	 rsi, rdx
  0015a	b9 10 00 00 00	 mov	 ecx, 16
  0015f	f3 a4		 rep movsb

; 644  : 			MirrorBits128 ((unsigned char *)&ctx->gf_t128[i-16][jm]);

  00161	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00165	83 e8 10	 sub	 eax, 16
  00168	48 98		 cdqe
  0016a	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  00171	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00179	48 03 c8	 add	 rcx, rax
  0017c	48 63 44 24 4c	 movsxd	 rax, DWORD PTR jm$30025[rsp]
  00181	48 6b c0 10	 imul	 rax, 16
  00185	48 03 c8	 add	 rcx, rax
  00188	e8 00 00 00 00	 call	 MirrorBits128

; 645  : 		}

  0018d	e9 0e ff ff ff	 jmp	 $LN12@Gf128Tab64
$LN11@Gf128Tab64:

; 646  : 	}

  00192	e9 e9 fe ff ff	 jmp	 $LN15@Gf128Tab64
$LN14@Gf128Tab64:
$LN10@Gf128Tab64:

; 647  : 
; 648  : 	burn (ctx8k ,sizeof (*ctx8k));

  00197	48 8b 44 24 28	 mov	 rax, QWORD PTR ctx8k$[rsp]
  0019c	48 89 44 24 58	 mov	 QWORD PTR burnm$30031[rsp], rax
  001a1	c7 44 24 50 00
	20 00 00	 mov	 DWORD PTR burnc$30033[rsp], 8192 ; 00002000H
  001a9	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  001ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctx8k$[rsp]
  001b3	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN7@Gf128Tab64:
  001b8	8b 4c 24 50	 mov	 ecx, DWORD PTR burnc$30033[rsp]
  001bc	8b 44 24 50	 mov	 eax, DWORD PTR burnc$30033[rsp]
  001c0	83 e8 01	 sub	 eax, 1
  001c3	89 44 24 50	 mov	 DWORD PTR burnc$30033[rsp], eax
  001c7	85 c9		 test	 ecx, ecx
  001c9	74 18		 je	 SHORT $LN6@Gf128Tab64
  001cb	48 8b 44 24 58	 mov	 rax, QWORD PTR burnm$30031[rsp]
  001d0	c6 00 00	 mov	 BYTE PTR [rax], 0
  001d3	48 8b 44 24 58	 mov	 rax, QWORD PTR burnm$30031[rsp]
  001d8	48 83 c0 01	 add	 rax, 1
  001dc	48 89 44 24 58	 mov	 QWORD PTR burnm$30031[rsp], rax
  001e1	eb d5		 jmp	 SHORT $LN7@Gf128Tab64
$LN6@Gf128Tab64:
  001e3	33 c0		 xor	 eax, eax
  001e5	85 c0		 test	 eax, eax
  001e7	75 ae		 jne	 SHORT $LN10@Gf128Tab64
$LN5@Gf128Tab64:

; 649  : 	burn (am, sizeof (am));

  001e9	48 8d 44 24 38	 lea	 rax, QWORD PTR am$[rsp]
  001ee	48 89 44 24 68	 mov	 QWORD PTR burnm$30040[rsp], rax
  001f3	c7 44 24 60 10
	00 00 00	 mov	 DWORD PTR burnc$30042[rsp], 16
  001fb	ba 10 00 00 00	 mov	 edx, 16
  00200	48 8d 4c 24 38	 lea	 rcx, QWORD PTR am$[rsp]
  00205	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@Gf128Tab64:
  0020a	8b 4c 24 60	 mov	 ecx, DWORD PTR burnc$30042[rsp]
  0020e	8b 44 24 60	 mov	 eax, DWORD PTR burnc$30042[rsp]
  00212	83 e8 01	 sub	 eax, 1
  00215	89 44 24 60	 mov	 DWORD PTR burnc$30042[rsp], eax
  00219	85 c9		 test	 ecx, ecx
  0021b	74 18		 je	 SHORT $LN1@Gf128Tab64
  0021d	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$30040[rsp]
  00222	c6 00 00	 mov	 BYTE PTR [rax], 0
  00225	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$30040[rsp]
  0022a	48 83 c0 01	 add	 rax, 1
  0022e	48 89 44 24 68	 mov	 QWORD PTR burnm$30040[rsp], rax
  00233	eb d5		 jmp	 SHORT $LN2@Gf128Tab64
$LN1@Gf128Tab64:
  00235	33 c0		 xor	 eax, eax
  00237	85 c0		 test	 eax, eax
  00239	75 ae		 jne	 SHORT $LN5@Gf128Tab64

; 650  : 	TCfree (ctx8k);

  0023b	ba 54 43 4d 4d	 mov	 edx, 1296909140		; 4d4d4354H
  00240	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctx8k$[rsp]
  00245	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 651  : 	return TRUE;

  0024b	b8 01 00 00 00	 mov	 eax, 1
$LN18@Gf128Tab64:

; 652  : }

  00250	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00255	48 33 cc	 xor	 rcx, rsp
  00258	e8 00 00 00 00	 call	 __security_check_cookie
  0025d	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00264	5f		 pop	 rdi
  00265	5e		 pop	 rsi
  00266	c3		 ret	 0
Gf128Tab64Init ENDP
END
