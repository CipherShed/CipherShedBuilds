; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	GetWipePassCount
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed\src\common\wipe.c
pdata	SEGMENT
$pdata$GetWipePassCount DD imagerel $LN10
	DD	imagerel $LN10+121
	DD	imagerel $unwind$GetWipePassCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetWipePassCount DD 010801H
	DD	08208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT GetWipePassCount
_TEXT	SEGMENT
tv64 = 48
algorithm$ = 80
GetWipePassCount PROC					; COMDAT

; 143  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 144  : 	switch (algorithm)

  00008	8b 44 24 50	 mov	 eax, DWORD PTR algorithm$[rsp]
  0000c	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00010	83 7c 24 30 64	 cmp	 DWORD PTR tv64[rsp], 100 ; 00000064H
  00015	74 20		 je	 SHORT $LN5@GetWipePas
  00017	81 7c 24 30 2c
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 300 ; 0000012cH
  0001f	74 1d		 je	 SHORT $LN4@GetWipePas
  00021	81 7c 24 30 bc
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 700 ; 000002bcH
  00029	74 1a		 je	 SHORT $LN3@GetWipePas
  0002b	81 7c 24 30 ac
	0d 00 00	 cmp	 DWORD PTR tv64[rsp], 3500 ; 00000dacH
  00033	74 17		 je	 SHORT $LN2@GetWipePas
  00035	eb 1c		 jmp	 SHORT $LN1@GetWipePas
$LN5@GetWipePas:

; 145  : 	{
; 146  : 	case TC_WIPE_1_RAND:
; 147  : 		return 1;

  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	eb 36		 jmp	 SHORT $LN8@GetWipePas
$LN4@GetWipePas:

; 148  : 
; 149  : 	case TC_WIPE_3_DOD_5220:
; 150  : 		return 3;

  0003e	b8 03 00 00 00	 mov	 eax, 3
  00043	eb 2f		 jmp	 SHORT $LN8@GetWipePas
$LN3@GetWipePas:

; 151  : 
; 152  : 	case TC_WIPE_7_DOD_5220:
; 153  : 		return 7;

  00045	b8 07 00 00 00	 mov	 eax, 7
  0004a	eb 28		 jmp	 SHORT $LN8@GetWipePas
$LN2@GetWipePas:

; 154  : 
; 155  : 	case TC_WIPE_35_GUTMANN:
; 156  : 		return 35;

  0004c	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00051	eb 21		 jmp	 SHORT $LN8@GetWipePas
$LN1@GetWipePas:

; 157  : 
; 158  : 	default:
; 159  : 		TC_THROW_FATAL_EXCEPTION;

  00053	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0005c	45 33 c9	 xor	 r9d, r9d
  0005f	45 33 c0	 xor	 r8d, r8d
  00062	ba 9f 00 00 00	 mov	 edx, 159		; 0000009fH
  00067	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx

; 160  : 	}
; 161  : 
; 162  : 	return 0;	// Prevent compiler warnings

  00072	33 c0		 xor	 eax, eax
$LN8@GetWipePas:
$LN9@GetWipePas:

; 163  : }

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
GetWipePassCount ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe35Gutmann DD imagerel Wipe35Gutmann
	DD	imagerel Wipe35Gutmann+399
	DD	imagerel $unwind$Wipe35Gutmann
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe35Gutmann DD 021301H
	DD	0700f3213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Wipe35Gutmann
_TEXT	SEGMENT
i$ = 0
wipePat3$ = 8
wipePat3Pos$ = 12
tv64 = 16
pass$ = 48
buffer$ = 56
size$ = 64
Wipe35Gutmann PROC					; COMDAT

; 84   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 85   : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };

  00013	c6 44 24 08 92	 mov	 BYTE PTR wipePat3$[rsp], 146 ; 00000092H
  00018	c6 44 24 09 49	 mov	 BYTE PTR wipePat3$[rsp+1], 73 ; 00000049H
  0001d	c6 44 24 0a 24	 mov	 BYTE PTR wipePat3$[rsp+2], 36 ; 00000024H

; 86   : 	int wipePat3Pos;
; 87   : 	size_t i;
; 88   : 
; 89   : 	switch (pass)

  00022	8b 44 24 30	 mov	 eax, DWORD PTR pass$[rsp]
  00026	89 44 24 10	 mov	 DWORD PTR tv64[rsp], eax
  0002a	8b 44 24 10	 mov	 eax, DWORD PTR tv64[rsp]
  0002e	83 e8 05	 sub	 eax, 5
  00031	89 44 24 10	 mov	 DWORD PTR tv64[rsp], eax
  00035	83 7c 24 10 1a	 cmp	 DWORD PTR tv64[rsp], 26
  0003a	0f 87 e2 00 00
	00		 ja	 $LN3@Wipe35Gutm
  00040	48 63 44 24 10	 movsxd	 rax, DWORD PTR tv64[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0004c	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN17@Wipe35Gutm[rcx+rax]
  00054	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN18@Wipe35Gutm[rcx+rax*4]
  0005b	48 03 c1	 add	 rax, rcx
  0005e	ff e0		 jmp	 rax
$LN12@Wipe35Gutm:

; 90   : 	{
; 91   : 	case 5:
; 92   : 		memset (buffer, 0x55, size);

  00060	48 8b 7c 24 38	 mov	 rdi, QWORD PTR buffer$[rsp]
  00065	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  0006a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  0006f	f3 aa		 rep stosb

; 93   : 		break;

  00071	e9 d8 00 00 00	 jmp	 $LN13@Wipe35Gutm
$LN11@Wipe35Gutm:

; 94   : 
; 95   : 	case 6:
; 96   : 		memset (buffer, 0xaa, size);

  00076	48 8b 7c 24 38	 mov	 rdi, QWORD PTR buffer$[rsp]
  0007b	b8 aa 00 00 00	 mov	 eax, 170		; 000000aaH
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  00085	f3 aa		 rep stosb

; 97   : 		break;

  00087	e9 c2 00 00 00	 jmp	 $LN13@Wipe35Gutm
$LN10@Wipe35Gutm:

; 98   : 
; 99   : 	case 7:
; 100  : 	case 26:
; 101  : 	case 29:
; 102  : 		wipePat3Pos = 0;

  0008c	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR wipePat3Pos$[rsp], 0

; 103  : 		goto wipe3;

  00094	eb 12		 jmp	 SHORT $wipe3$26478
$LN9@Wipe35Gutm:

; 104  : 
; 105  : 	case 8:
; 106  : 	case 27:
; 107  : 	case 30:
; 108  : 		wipePat3Pos = 1;

  00096	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR wipePat3Pos$[rsp], 1

; 109  : 		goto wipe3;

  0009e	eb 08		 jmp	 SHORT $wipe3$26478
$LN8@Wipe35Gutm:

; 110  : 
; 111  : 	case 9:
; 112  : 	case 28:
; 113  : 	case 31:
; 114  : 		wipePat3Pos = 2;

  000a0	c7 44 24 0c 02
	00 00 00	 mov	 DWORD PTR wipePat3Pos$[rsp], 2
$wipe3$26478:

; 115  : 		goto wipe3;
; 116  : 
; 117  : wipe3:
; 118  : 		if (pass >= 29)

  000a8	83 7c 24 30 1d	 cmp	 DWORD PTR pass$[rsp], 29
  000ad	7c 21		 jl	 SHORT $LN7@Wipe35Gutm

; 119  : 		{
; 120  : 			wipePat3[0] = ~wipePat3[0];

  000af	0f b6 44 24 08	 movzx	 eax, BYTE PTR wipePat3$[rsp]
  000b4	f7 d0		 not	 eax
  000b6	88 44 24 08	 mov	 BYTE PTR wipePat3$[rsp], al

; 121  : 			wipePat3[1] = ~wipePat3[1];

  000ba	0f b6 44 24 09	 movzx	 eax, BYTE PTR wipePat3$[rsp+1]
  000bf	f7 d0		 not	 eax
  000c1	88 44 24 09	 mov	 BYTE PTR wipePat3$[rsp+1], al

; 122  : 			wipePat3[2] = ~wipePat3[2];

  000c5	0f b6 44 24 0a	 movzx	 eax, BYTE PTR wipePat3$[rsp+2]
  000ca	f7 d0		 not	 eax
  000cc	88 44 24 0a	 mov	 BYTE PTR wipePat3$[rsp+2], al
$LN7@Wipe35Gutm:

; 123  : 		}
; 124  : 
; 125  : 		for (i = 0; i < size; ++i)

  000d0	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000d8	eb 0c		 jmp	 SHORT $LN6@Wipe35Gutm
$LN5@Wipe35Gutm:
  000da	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  000de	48 83 c0 01	 add	 rax, 1
  000e2	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN6@Wipe35Gutm:
  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  000eb	48 39 04 24	 cmp	 QWORD PTR i$[rsp], rax
  000ef	73 2f		 jae	 SHORT $LN4@Wipe35Gutm

; 126  : 		{
; 127  : 			buffer[i] = wipePat3[wipePat3Pos++ % 3];

  000f1	8b 44 24 0c	 mov	 eax, DWORD PTR wipePat3Pos$[rsp]
  000f5	99		 cdq
  000f6	b9 03 00 00 00	 mov	 ecx, 3
  000fb	f7 f9		 idiv	 ecx
  000fd	48 63 d2	 movsxd	 rdx, edx
  00100	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00104	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buffer$[rsp]
  00109	48 03 c8	 add	 rcx, rax
  0010c	0f b6 44 14 08	 movzx	 eax, BYTE PTR wipePat3$[rsp+rdx]
  00111	88 01		 mov	 BYTE PTR [rcx], al
  00113	8b 44 24 0c	 mov	 eax, DWORD PTR wipePat3Pos$[rsp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 44 24 0c	 mov	 DWORD PTR wipePat3Pos$[rsp], eax

; 128  : 		}

  0011e	eb ba		 jmp	 SHORT $LN5@Wipe35Gutm
$LN4@Wipe35Gutm:

; 129  : 		break;

  00120	eb 2c		 jmp	 SHORT $LN13@Wipe35Gutm
$LN3@Wipe35Gutm:

; 130  : 
; 131  : 	default:
; 132  : 		if (pass >= 10 && pass <= 25)

  00122	83 7c 24 30 0a	 cmp	 DWORD PTR pass$[rsp], 10
  00127	7c 21		 jl	 SHORT $LN2@Wipe35Gutm
  00129	83 7c 24 30 19	 cmp	 DWORD PTR pass$[rsp], 25
  0012e	7f 1a		 jg	 SHORT $LN2@Wipe35Gutm

; 133  : 			memset (buffer, (pass - 10) * 0x11, size);

  00130	8b 44 24 30	 mov	 eax, DWORD PTR pass$[rsp]
  00134	83 e8 0a	 sub	 eax, 10
  00137	6b c0 11	 imul	 eax, 17
  0013a	48 98		 cdqe
  0013c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR buffer$[rsp]
  00141	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  00146	f3 aa		 rep stosb

; 134  : 		else

  00148	eb 04		 jmp	 SHORT $LN1@Wipe35Gutm
$LN2@Wipe35Gutm:

; 135  : 			return FALSE;

  0014a	33 c0		 xor	 eax, eax
  0014c	eb 05		 jmp	 SHORT $LN15@Wipe35Gutm
$LN1@Wipe35Gutm:
$LN13@Wipe35Gutm:

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  0014e	b8 01 00 00 00	 mov	 eax, 1
$LN15@Wipe35Gutm:

; 139  : }

  00153	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00157	5f		 pop	 rdi
  00158	c3		 ret	 0
  00159	0f 1f 00	 npad	 3
$LN18@Wipe35Gutm:
  0015c	00 00 00 00	 DD	 $LN12@Wipe35Gutm
  00160	00 00 00 00	 DD	 $LN11@Wipe35Gutm
  00164	00 00 00 00	 DD	 $LN10@Wipe35Gutm
  00168	00 00 00 00	 DD	 $LN9@Wipe35Gutm
  0016c	00 00 00 00	 DD	 $LN8@Wipe35Gutm
  00170	00 00 00 00	 DD	 $LN3@Wipe35Gutm
$LN17@Wipe35Gutm:
  00174	00		 DB	 0
  00175	01		 DB	 1
  00176	02		 DB	 2
  00177	03		 DB	 3
  00178	04		 DB	 4
  00179	05		 DB	 5
  0017a	05		 DB	 5
  0017b	05		 DB	 5
  0017c	05		 DB	 5
  0017d	05		 DB	 5
  0017e	05		 DB	 5
  0017f	05		 DB	 5
  00180	05		 DB	 5
  00181	05		 DB	 5
  00182	05		 DB	 5
  00183	05		 DB	 5
  00184	05		 DB	 5
  00185	05		 DB	 5
  00186	05		 DB	 5
  00187	05		 DB	 5
  00188	05		 DB	 5
  00189	02		 DB	 2
  0018a	03		 DB	 3
  0018b	04		 DB	 4
  0018c	02		 DB	 2
  0018d	03		 DB	 3
  0018e	04		 DB	 4
Wipe35Gutmann ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe7Dod5220 DD imagerel Wipe7Dod5220
	DD	imagerel Wipe7Dod5220+174
	DD	imagerel $unwind$Wipe7Dod5220
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe7Dod5220 DD 021801H
	DD	070141218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Wipe7Dod5220
_TEXT	SEGMENT
wipeChar$ = 0
tv64 = 4
pass$ = 32
randChars$ = 40
buffer$ = 48
size$ = 56
Wipe7Dod5220 PROC					; COMDAT

; 46   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	57		 push	 rdi
  00014	48 83 ec 10	 sub	 rsp, 16

; 47   : 	byte wipeChar;
; 48   : 
; 49   : 	switch (pass)

  00018	8b 44 24 20	 mov	 eax, DWORD PTR pass$[rsp]
  0001c	89 44 24 04	 mov	 DWORD PTR tv64[rsp], eax
  00020	83 7c 24 04 01	 cmp	 DWORD PTR tv64[rsp], 1
  00025	74 1e		 je	 SHORT $LN6@Wipe7Dod52
  00027	83 7c 24 04 02	 cmp	 DWORD PTR tv64[rsp], 2
  0002c	74 24		 je	 SHORT $LN5@Wipe7Dod52
  0002e	83 7c 24 04 04	 cmp	 DWORD PTR tv64[rsp], 4
  00033	74 2c		 je	 SHORT $LN4@Wipe7Dod52
  00035	83 7c 24 04 05	 cmp	 DWORD PTR tv64[rsp], 5
  0003a	74 33		 je	 SHORT $LN3@Wipe7Dod52
  0003c	83 7c 24 04 06	 cmp	 DWORD PTR tv64[rsp], 6
  00041	74 3a		 je	 SHORT $LN2@Wipe7Dod52
  00043	eb 48		 jmp	 SHORT $LN1@Wipe7Dod52
$LN6@Wipe7Dod52:

; 50   : 	{
; 51   : 	case 1:
; 52   : 		wipeChar = randChars[0];

  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR randChars$[rsp]
  0004a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004d	88 04 24	 mov	 BYTE PTR wipeChar$[rsp], al

; 53   : 		break;

  00050	eb 3f		 jmp	 SHORT $LN7@Wipe7Dod52
$LN5@Wipe7Dod52:

; 54   : 
; 55   : 	case 2:
; 56   : 		wipeChar = ~randChars[0];

  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR randChars$[rsp]
  00057	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005a	f7 d0		 not	 eax
  0005c	88 04 24	 mov	 BYTE PTR wipeChar$[rsp], al

; 57   : 		break;

  0005f	eb 30		 jmp	 SHORT $LN7@Wipe7Dod52
$LN4@Wipe7Dod52:

; 58   : 
; 59   : 	case 4:
; 60   : 		wipeChar = randChars[1];

  00061	48 8b 44 24 28	 mov	 rax, QWORD PTR randChars$[rsp]
  00066	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0006a	88 04 24	 mov	 BYTE PTR wipeChar$[rsp], al

; 61   : 		break;

  0006d	eb 22		 jmp	 SHORT $LN7@Wipe7Dod52
$LN3@Wipe7Dod52:

; 62   : 
; 63   : 	case 5:
; 64   : 		wipeChar = randChars[2];

  0006f	48 8b 44 24 28	 mov	 rax, QWORD PTR randChars$[rsp]
  00074	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00078	88 04 24	 mov	 BYTE PTR wipeChar$[rsp], al

; 65   : 		break;

  0007b	eb 14		 jmp	 SHORT $LN7@Wipe7Dod52
$LN2@Wipe7Dod52:

; 66   : 
; 67   : 	case 6:
; 68   : 		wipeChar = ~randChars[2];

  0007d	48 8b 44 24 28	 mov	 rax, QWORD PTR randChars$[rsp]
  00082	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00086	f7 d0		 not	 eax
  00088	88 04 24	 mov	 BYTE PTR wipeChar$[rsp], al

; 69   : 		break;

  0008b	eb 04		 jmp	 SHORT $LN7@Wipe7Dod52
$LN1@Wipe7Dod52:

; 70   : 
; 71   : 	default:
; 72   : 		return FALSE;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 17		 jmp	 SHORT $LN9@Wipe7Dod52
$LN7@Wipe7Dod52:

; 73   : 	}
; 74   : 
; 75   : 	memset (buffer, wipeChar, size);

  00091	0f b6 04 24	 movzx	 eax, BYTE PTR wipeChar$[rsp]
  00095	48 98		 cdqe
  00097	48 8b 7c 24 30	 mov	 rdi, QWORD PTR buffer$[rsp]
  0009c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  000a1	f3 aa		 rep stosb

; 76   : 	return TRUE;

  000a3	b8 01 00 00 00	 mov	 eax, 1
$LN9@Wipe7Dod52:

; 77   : }

  000a8	48 83 c4 10	 add	 rsp, 16
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
Wipe7Dod5220 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe3Dod5220 DD imagerel Wipe3Dod5220
	DD	imagerel Wipe3Dod5220+88
	DD	imagerel $unwind$Wipe3Dod5220
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe3Dod5220 DD 021301H
	DD	0700f1213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Wipe3Dod5220
_TEXT	SEGMENT
wipeChar$ = 0
tv64 = 4
pass$ = 32
buffer$ = 40
size$ = 48
Wipe3Dod5220 PROC					; COMDAT

; 23   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 83 ec 10	 sub	 rsp, 16

; 24   : 	byte wipeChar;
; 25   : 
; 26   : 	switch (pass)

  00013	8b 44 24 20	 mov	 eax, DWORD PTR pass$[rsp]
  00017	89 44 24 04	 mov	 DWORD PTR tv64[rsp], eax
  0001b	83 7c 24 04 01	 cmp	 DWORD PTR tv64[rsp], 1
  00020	74 09		 je	 SHORT $LN3@Wipe3Dod52
  00022	83 7c 24 04 02	 cmp	 DWORD PTR tv64[rsp], 2
  00027	74 08		 je	 SHORT $LN2@Wipe3Dod52
  00029	eb 0c		 jmp	 SHORT $LN1@Wipe3Dod52
$LN3@Wipe3Dod52:

; 27   : 	{
; 28   : 	case 1:
; 29   : 		wipeChar = 0;

  0002b	c6 04 24 00	 mov	 BYTE PTR wipeChar$[rsp], 0

; 30   : 		break;

  0002f	eb 0a		 jmp	 SHORT $LN4@Wipe3Dod52
$LN2@Wipe3Dod52:

; 31   : 
; 32   : 	case 2:
; 33   : 		wipeChar = 0xff;

  00031	c6 04 24 ff	 mov	 BYTE PTR wipeChar$[rsp], 255 ; 000000ffH

; 34   : 		break;

  00035	eb 04		 jmp	 SHORT $LN4@Wipe3Dod52
$LN1@Wipe3Dod52:

; 35   : 
; 36   : 	default:
; 37   : 		return FALSE;

  00037	33 c0		 xor	 eax, eax
  00039	eb 17		 jmp	 SHORT $LN6@Wipe3Dod52
$LN4@Wipe3Dod52:

; 38   : 	}
; 39   : 
; 40   : 	memset (buffer, wipeChar, size);

  0003b	0f b6 04 24	 movzx	 eax, BYTE PTR wipeChar$[rsp]
  0003f	48 98		 cdqe
  00041	48 8b 7c 24 28	 mov	 rdi, QWORD PTR buffer$[rsp]
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  0004b	f3 aa		 rep stosb

; 41   : 	return TRUE;

  0004d	b8 01 00 00 00	 mov	 eax, 1
$LN6@Wipe3Dod52:

; 42   : }

  00052	48 83 c4 10	 add	 rsp, 16
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
Wipe3Dod5220 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT Wipe1PseudoRandom
_TEXT	SEGMENT
pass$ = 8
buffer$ = 16
size$ = 24
Wipe1PseudoRandom PROC					; COMDAT

; 14   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 15   : 	return FALSE;

  0000e	33 c0		 xor	 eax, eax

; 16   : }

  00010	c3		 ret	 0
Wipe1PseudoRandom ENDP
PUBLIC	WipeBuffer
;	COMDAT pdata
pdata	SEGMENT
$pdata$WipeBuffer DD imagerel $LN10
	DD	imagerel $LN10+197
	DD	imagerel $unwind$WipeBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WipeBuffer DD 011701H
	DD	08217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT WipeBuffer
_TEXT	SEGMENT
tv64 = 48
algorithm$ = 80
randChars$ = 88
pass$ = 96
buffer$ = 104
size$ = 112
WipeBuffer PROC						; COMDAT

; 167  : {

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 168  : 	switch (algorithm)

  00017	8b 44 24 50	 mov	 eax, DWORD PTR algorithm$[rsp]
  0001b	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  0001f	83 7c 24 30 64	 cmp	 DWORD PTR tv64[rsp], 100 ; 00000064H
  00024	74 20		 je	 SHORT $LN5@WipeBuffer
  00026	81 7c 24 30 2c
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 300 ; 0000012cH
  0002e	74 2b		 je	 SHORT $LN4@WipeBuffer
  00030	81 7c 24 30 bc
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 700 ; 000002bcH
  00038	74 36		 je	 SHORT $LN3@WipeBuffer
  0003a	81 7c 24 30 ac
	0d 00 00	 cmp	 DWORD PTR tv64[rsp], 3500 ; 00000dacH
  00042	74 46		 je	 SHORT $LN2@WipeBuffer
  00044	eb 59		 jmp	 SHORT $LN1@WipeBuffer
$LN5@WipeBuffer:

; 169  : 	{
; 170  : 	case TC_WIPE_1_RAND:
; 171  : 		return Wipe1PseudoRandom (pass, buffer, size);

  00046	4c 8b 44 24 70	 mov	 r8, QWORD PTR size$[rsp]
  0004b	48 8b 54 24 68	 mov	 rdx, QWORD PTR buffer$[rsp]
  00050	8b 4c 24 60	 mov	 ecx, DWORD PTR pass$[rsp]
  00054	e8 00 00 00 00	 call	 Wipe1PseudoRandom
  00059	eb 65		 jmp	 SHORT $LN8@WipeBuffer
$LN4@WipeBuffer:

; 172  : 
; 173  : 	case TC_WIPE_3_DOD_5220:
; 174  : 		return Wipe3Dod5220 (pass, buffer, size);

  0005b	4c 8b 44 24 70	 mov	 r8, QWORD PTR size$[rsp]
  00060	48 8b 54 24 68	 mov	 rdx, QWORD PTR buffer$[rsp]
  00065	8b 4c 24 60	 mov	 ecx, DWORD PTR pass$[rsp]
  00069	e8 00 00 00 00	 call	 Wipe3Dod5220
  0006e	eb 50		 jmp	 SHORT $LN8@WipeBuffer
$LN3@WipeBuffer:

; 175  : 
; 176  : 	case TC_WIPE_7_DOD_5220:
; 177  : 		return Wipe7Dod5220 (pass, randChars, buffer, size);

  00070	4c 8b 4c 24 70	 mov	 r9, QWORD PTR size$[rsp]
  00075	4c 8b 44 24 68	 mov	 r8, QWORD PTR buffer$[rsp]
  0007a	48 8b 54 24 58	 mov	 rdx, QWORD PTR randChars$[rsp]
  0007f	8b 4c 24 60	 mov	 ecx, DWORD PTR pass$[rsp]
  00083	e8 00 00 00 00	 call	 Wipe7Dod5220
  00088	eb 36		 jmp	 SHORT $LN8@WipeBuffer
$LN2@WipeBuffer:

; 178  : 
; 179  : 	case TC_WIPE_35_GUTMANN:
; 180  : 		return Wipe35Gutmann (pass, buffer, size);

  0008a	4c 8b 44 24 70	 mov	 r8, QWORD PTR size$[rsp]
  0008f	48 8b 54 24 68	 mov	 rdx, QWORD PTR buffer$[rsp]
  00094	8b 4c 24 60	 mov	 ecx, DWORD PTR pass$[rsp]
  00098	e8 00 00 00 00	 call	 Wipe35Gutmann
  0009d	eb 21		 jmp	 SHORT $LN8@WipeBuffer
$LN1@WipeBuffer:

; 181  : 
; 182  : 	default:
; 183  : 		TC_THROW_FATAL_EXCEPTION;

  0009f	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	ba b7 00 00 00	 mov	 edx, 183		; 000000b7H
  000b3	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx

; 184  : 	}
; 185  : 
; 186  : 	return FALSE;	// Prevent compiler warnings

  000be	33 c0		 xor	 eax, eax
$LN8@WipeBuffer:
$LN9@WipeBuffer:

; 187  : }

  000c0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c4	c3		 ret	 0
WipeBuffer ENDP
END
