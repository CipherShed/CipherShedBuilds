; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\cipherShed\src\Mount\Favorites.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A	; CipherShed::FavoriteVolumesMenu
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
_BSS	SEGMENT
?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A DD 01H DUP (?) ; CipherShed::FavoriteVolumesMenu
_BSS	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??0_Iterator_base_secure@std@@QAE@XZ		; std::_Iterator_base_secure::_Iterator_base_secure
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_secure@std@@QAE@XZ PROC		; std::_Iterator_base_secure::_Iterator_base_secure, COMDAT
; _this$ = ecx

; 567  : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 568  : 		}

  00008	c3		 ret	 0
??0_Iterator_base_secure@std@@QAE@XZ ENDP		; std::_Iterator_base_secure::_Iterator_base_secure
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ; std::_Iterator_base_secure::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_secure::_Same_container, COMDAT
; _this$ = ecx

; 577  : 		return _Mycont == _Other._Mycont;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 578  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_secure::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ; std::_Iterator_base_secure::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_secure@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ PROC	; std::_Iterator_base_secure::_Has_container, COMDAT
; _this$ = ecx

; 582  : 		return _Mycont != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 583  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ENDP	; std::_Iterator_base_secure::_Has_container
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Exception@CipherShed@@6B@			; CipherShed::Exception::`vftable'
PUBLIC	??0Exception@CipherShed@@QAE@XZ			; CipherShed::Exception::Exception
PUBLIC	??_R4Exception@CipherShed@@6B@			; CipherShed::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
PUBLIC	??_R3Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CipherShed@@8		; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CipherShed@@8 DD FLAT:??_R0?AUException@CipherShed@@@8 ; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CipherShed@@8
rdata$r	SEGMENT
??_R2Exception@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8 ; CipherShed::Exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Exception@CipherShed@@8
rdata$r	SEGMENT
??_R3Exception@CipherShed@@8 DD 00H			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Exception@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Exception@CipherShed@@6B@ DD 00H			; CipherShed::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Exception@CipherShed@@6B@
CONST	SEGMENT
??_7Exception@CipherShed@@6B@ DD FLAT:??_R4Exception@CipherShed@@6B@ ; CipherShed::Exception::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Exception@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Exception@CipherShed@@QAE@XZ PROC			; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c3		 ret	 0
??0Exception@CipherShed@@QAE@XZ ENDP			; CipherShed::Exception::Exception
_TEXT	ENDS
PUBLIC	??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@ ; `string'
EXTRN	_remove:PROC
EXTRN	_GetConfigPath:PROC
;	COMDAT ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
CONST	SEGMENT
??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@ DB 'TrueCrypt Sys'
	DB	'tem Favorite Volumes.xml', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ PROC ; `CipherShed::SaveFavoriteVolumes'::`32'::Finally721::~Finally721, COMDAT

; 721  : 			finally_do ({ remove (GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES)); });

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00005	e8 00 00 00 00	 call	 _GetConfigPath
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _remove
  00010	83 c4 08	 add	 esp, 8
  00013	c3		 ret	 0
??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ ENDP ; `CipherShed::SaveFavoriteVolumes'::`32'::Finally721::~Finally721
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
PUBLIC	?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

  00000	56		 push	 esi

; 726  : 		return (_Mylast - _Myfirst);

  00001	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00004	2b 71 0c	 sub	 esi, DWORD PTR [ecx+12]
  00007	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 727  : 		}

  0001b	c3		 ret	 0
?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty, COMDAT
; _this$ = ecx

; 735  : 		{	// test if sequence is empty

  00000	56		 push	 esi

; 736  : 		return (size() == 0);

  00001	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00004	2b 71 0c	 sub	 esi, DWORD PTR [ecx+12]
  00007	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	40		 inc	 eax
  0001f	5e		 pop	 esi

; 737  : 		}

  00020	c3		 ret	 0
?empty@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00009	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0000e	f7 e9		 imul	 ecx
  00010	03 d1		 add	 edx, ecx
  00012	c1 fa 06	 sar	 edx, 6
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	57		 push	 edi
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0001f	03 c2		 add	 eax, edx
  00021	3b f8		 cmp	 edi, eax
  00023	72 05		 jb	 SHORT $LN3@operator
  00025	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  0002a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002d	8b cf		 mov	 ecx, edi
  0002f	c1 e1 04	 shl	 ecx, 4
  00032	2b cf		 sub	 ecx, edi
  00034	5f		 pop	 edi
  00035	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00038	5e		 pop	 esi

; 786  : 		}

  00039	c2 04 00	 ret	 4
??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@2
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@2
$LN19@operator@2:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@2
$LN15@operator@2:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@2:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@2
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@2:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00012	f7 e9		 imul	 ecx
  00014	03 d1		 add	 edx, ecx
  00016	c1 fa 06	 sar	 edx, 6
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx

; 636  : 		}

  00020	c3		 ret	 0
?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ PROC ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z ; std::allocator<CipherShed::FavoriteVolume>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode
_TEXT	ENDS
PUBLIC	?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@3
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@3
$LN23@operator@3:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@3
$LN17@operator@3:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@3:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@3
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@3:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00004	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00006	85 c9		 test	 ecx, ecx
  00008	75 0b		 jne	 SHORT $LN26@operator@4
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00011	85 c9		 test	 ecx, ecx
  00013	74 04		 je	 SHORT $LN16@operator@4
$LN26@operator@4:
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	eb 02		 jmp	 SHORT $LN17@operator@4
$LN16@operator@4:
  00019	33 d2		 xor	 edx, edx
$LN17@operator@4:
  0001b	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp+4]
  0001f	8b f0		 mov	 esi, eax
  00021	c1 e6 04	 shl	 esi, 4
  00024	2b f0		 sub	 esi, eax
  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	03 f6		 add	 esi, esi
  0002b	03 f6		 add	 esi, esi
  0002d	03 f6		 add	 esi, esi
  0002f	03 c6		 add	 eax, esi
  00031	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00034	77 0f		 ja	 SHORT $LN4@operator@4
  00036	85 c9		 test	 ecx, ecx
  00038	74 04		 je	 SHORT $LN22@operator@4
  0003a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003c	eb 02		 jmp	 SHORT $LN23@operator@4
$LN22@operator@4:
  0003e	33 c9		 xor	 ecx, ecx
$LN23@operator@4:
  00040	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00043	73 05		 jae	 SHORT $LN27@operator@4
$LN4@operator@4:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@4:

; 164  : 		_Myptr += _Off;

  0004a	01 77 04	 add	 DWORD PTR [edi+4], esi

; 165  : 		return (*this);

  0004d	8b c7		 mov	 eax, edi
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 166  : 		}

  00051	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@5
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@5
$LN4@operator@5:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00022	f7 e9		 imul	 ecx
  00024	03 d1		 add	 edx, ecx
  00026	c1 fa 06	 sar	 edx, 6
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	5f		 pop	 edi
  0002f	03 c2		 add	 eax, edx
  00031	5e		 pop	 esi

; 195  : 		}

  00032	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@6
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@6
$LN4@operator@6:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@7
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@7
$LN4@operator@7:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@7:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::FavoriteVolume>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::FavoriteVolume>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::FavoriteVolume>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator-, COMDAT
; _this$ = ecx

; 199  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 200  : 
; 201  :  #if _HAS_ITERATOR_DEBUGGING
; 202  : 		_Compat(_Right);
; 203  :  #else
; 204  : 		if (this->_Mycont != _IGNORE_MYCONT)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  0000d	74 0d		 je	 SHORT $LN1@operator@8

; 205  : 		{
; 206  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  0000f	85 c0		 test	 eax, eax
  00011	74 04		 je	 SHORT $LN4@operator@8
  00013	3b 07		 cmp	 eax, DWORD PTR [edi]
  00015	74 05		 je	 SHORT $LN1@operator@8
$LN4@operator@8:
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@8:

; 207  : 		}
; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Myptr - _Right._Myptr);

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  00022	5f		 pop	 edi
  00023	d1 f8		 sar	 eax, 1
  00025	5e		 pop	 esi

; 211  : 		}

  00026	c2 04 00	 ret	 4
??G?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator-
_TEXT	ENDS
PUBLIC	??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base_secure@std@@@std@@QAE@XZ ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base_secure@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base_secure@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base_secure@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base_secure>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z
_TEXT	SEGMENT
$T123589 = -12						; size = 12
$T123594 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z PROC ; std::_Allocate<CipherShed::FavoriteVolume>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 1c		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8b d1		 mov	 edx, ecx
  0000f	c1 e2 04	 shl	 edx, 4
  00012	2b d1		 sub	 edx, ecx
  00014	03 d2		 add	 edx, edx
  00016	03 d2		 add	 edx, edx
  00018	03 d2		 add	 edx, edx
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4

; 44   : 	}

  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00027	83 c8 ff	 or	 eax, -1
  0002a	33 d2		 xor	 edx, edx
  0002c	f7 f1		 div	 ecx
  0002e	83 f8 78	 cmp	 eax, 120		; 00000078H
  00031	73 da		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00033	8d 44 24 10	 lea	 eax, DWORD PTR $T123594[esp+8]
  00037	50		 push	 eax
  00038	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123589[esp+16]
  0003c	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123594[esp+12], 0
  00044	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00049	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123589[esp+16]
  00052	51		 push	 ecx
  00053	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123589[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0005b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00060	cc		 int	 3
??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ENDP ; std::_Allocate<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T123603 = -12						; size = 12
$T123607 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	c1 e1 07	 shl	 ecx, 7
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00029	73 e2		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002b	8d 44 24 10	 lea	 eax, DWORD PTR $T123607[esp+8]
  0002f	50		 push	 eax
  00030	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123603[esp+16]
  00034	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123607[esp+12], 0
  0003c	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00041	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00046	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123603[esp+16]
  0004a	51		 push	 ecx
  0004b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123603[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00058	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T123621 = -12						; size = 12
$T123625 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T123625[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123621[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123625[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123621[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123621[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T123631 = -12						; size = 12
$T123635 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T123635[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123631[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123635[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123631[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123631[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T123639 = -12						; size = 12
$T123643 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T123643[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123639[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123643[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123639[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123639[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@5:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z PROC ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z PROC ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z ; std::_Move_cat<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Move_cat<CipherShed::FavoriteVolume *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Move_cat<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<CipherShed::FavoriteVolume *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@9
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@9:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@9
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@9
$LN19@operator@9:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@9:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@9
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@9:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@10
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@10
$LN25@operator@10:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@10
$LN19@operator@10:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@10:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@10
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@10:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@11
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@11:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@11
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@11:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at, COMDAT
; _this$ = ecx

; 1541 : 		{	// subscript mutable sequence with checking

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1542 : 		if (_Mysize <= _Off)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000b	77 05		 ja	 SHORT $LN1@at

; 1543 : 			_String_base::_Xran();	// _Off off end

  0000d	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN1@at:

; 1544 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00016	72 0b		 jb	 SHORT $LN6@at
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 7e	 lea	 eax, DWORD PTR [esi+edi*2]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1545 : 		}

  00020	c2 04 00	 ret	 4

; 1544 : 		return (_Myptr()[_Off]);

$LN6@at:
  00023	8d 44 7e 04	 lea	 eax, DWORD PTR [esi+edi*2+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1545 : 		}

  00029	c2 04 00	 ret	 4
?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at
_TEXT	ENDS
PUBLIC	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@12
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@12:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00016	72 0b		 jb	 SHORT $LN9@operator@12
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 7e	 lea	 eax, DWORD PTR [esi+edi*2]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@12:
  00023	8d 44 7e 04	 lea	 eax, DWORD PTR [esi+edi*2+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@13
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@13
$LN23@operator@13:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@13
$LN17@operator@13:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@13:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@13
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@13:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find
$LN6@find:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find
$LN11@find:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find
$LL4@find:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find
$LN2@find:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1813 : 
; 1814 :  #if _HAS_ITERATOR_DEBUGGING
; 1815 : 		if (_Count != 0)
; 1816 : 			_DEBUG_POINTER(_Ptr);
; 1817 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1818 : 
; 1819 : 		if (_Count == 0)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1820 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	75 12		 jne	 SHORT $LN8@rfind
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Off$[esp]
  00012	3b c8		 cmp	 ecx, eax
  00014	0f 83 85 00 00
	00		 jae	 $LN9@rfind
  0001a	8b c1		 mov	 eax, ecx
  0001c	5f		 pop	 edi

; 1834 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN8@rfind:
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi

; 1821 : 		if (_Count <= _Mysize)

  00023	3b d0		 cmp	 edx, eax
  00025	77 72		 ja	 SHORT $LN27@rfind

; 1822 : 			{	// room for match, look for it
; 1823 : 			const _Elem *_Uptr = _Myptr() +
; 1824 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

  00027	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  0002b	2b c2		 sub	 eax, edx
  0002d	3b c8		 cmp	 ecx, eax
  0002f	73 02		 jae	 SHORT $LN13@rfind
  00031	8b c1		 mov	 eax, ecx
$LN13@rfind:
  00033	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00036	89 4c 24 18	 mov	 DWORD PTR tv170[esp+12], ecx
  0003a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0003d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00040	72 04		 jb	 SHORT $LN17@rfind
  00042	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00044	eb 02		 jmp	 SHORT $LN18@rfind
$LN17@rfind:
  00046	8b cb		 mov	 ecx, ebx
$LN18@rfind:
  00048	8b 6c 24 14	 mov	 ebp, DWORD PTR __Ptr$[esp+12]
  0004c	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0004f	90		 npad	 1
$LL6@rfind:

; 1825 : 			for (; ; --_Uptr)
; 1826 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1827 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00050	8a 45 00	 mov	 al, BYTE PTR [ebp]
  00053	38 06		 cmp	 BYTE PTR [esi], al
  00055	75 0f		 jne	 SHORT $LN3@rfind
  00057	52		 push	 edx
  00058	55		 push	 ebp
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	74 12		 je	 SHORT $LN26@rfind
$LN3@rfind:

; 1829 : 				else if (_Uptr == _Myptr())

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	74 28		 je	 SHORT $LN27@rfind
  00071	8b 54 24 1c	 mov	 edx, DWORD PTR __Count$[esp+12]
  00075	4e		 dec	 esi
  00076	eb d8		 jmp	 SHORT $LL6@rfind
$LN26@rfind:

; 1828 : 					return (_Uptr - _Myptr());	// found a match

  00078	83 7c 24 18 10	 cmp	 DWORD PTR tv170[esp+12], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN23@rfind
  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx
  00086	2b c1		 sub	 eax, ecx
  00088	5f		 pop	 edi

; 1834 : 		}

  00089	c2 0c 00	 ret	 12			; 0000000cH

; 1828 : 					return (_Uptr - _Myptr());	// found a match

$LN23@rfind:
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	8b cb		 mov	 ecx, ebx
  00092	5b		 pop	 ebx
  00093	2b c1		 sub	 eax, ecx
  00095	5f		 pop	 edi

; 1834 : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN27@rfind:
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1830 : 					break;	// at beginning, no more chance for match
; 1831 : 			}
; 1832 : 
; 1833 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN9@rfind:
  0009f	5f		 pop	 edi

; 1834 : 		}

  000a0	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@2

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@2:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@2

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@2
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@2:
  0002f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00033	72 05		 jb	 SHORT $LN13@compare@2
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@2
$LN13@compare@2:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@2:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	03 fd		 add	 edi, ebp
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004e	85 c0		 test	 eax, eax
  00050	75 15		 jne	 SHORT $LN8@compare@2
  00052	3b f3		 cmp	 esi, ebx
  00054	73 0a		 jae	 SHORT $LN7@compare@2
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	83 c8 ff	 or	 eax, -1
  0005c	5b		 pop	 ebx

; 2054 : 		}

  0005d	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00060	33 c0		 xor	 eax, eax
  00062	3b f3		 cmp	 esi, ebx
  00064	0f 95 c0	 setne	 al
$LN8@compare@2:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	5b		 pop	 ebx

; 2054 : 		}

  0006b	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@14
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@14
$LN6@operator@14:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@14:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=, COMDAT
; _this$ = ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=

; 376  : 		return (*this);

  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi

; 377  : 		}

  00010	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@15
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@15
$LN6@operator@15:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@15:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@KAIV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Pdif
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@KAIV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 8
__P1$ = 16						; size = 8
?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@KAIV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Pdif, COMDAT

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN3@Pdif

; 2144 : 		}

  00008	c3		 ret	 0
$LN3@Pdif:

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00009	8b 4c 24 04	 mov	 ecx, DWORD PTR __P2$[esp-4]
  0000d	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00010	74 13		 je	 SHORT $LN5@Pdif
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN8@Pdif
  00016	3b 4c 24 0c	 cmp	 ecx, DWORD PTR __P1$[esp-4]
  0001a	74 09		 je	 SHORT $LN5@Pdif
$LN8@Pdif:
  0001c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00021	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
$LN5@Pdif:
  00025	2b 44 24 10	 sub	 eax, DWORD PTR __P1$[esp]
  00029	d1 f8		 sar	 eax, 1

; 2144 : 		}

  0002b	c3		 ret	 0
?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@KAIV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Pdif
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z ; std::allocator<CipherShed::FavoriteVolume>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 83   : 		__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base_secure *_Pstring)

  00000	53		 push	 ebx

; 84   : 			{	// construct with pointer _Ptr
; 85   : 			_SCL_SECURE_VALIDATE(

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Pstring$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	85 f6		 test	 esi, esi
  00015	74 2a		 je	 SHORT $LN4@String_con
  00017	85 db		 test	 ebx, ebx
  00019	74 26		 je	 SHORT $LN4@String_con
  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00021	83 fa 08	 cmp	 edx, 8
  00024	72 04		 jb	 SHORT $LN14@String_con
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	eb 02		 jmp	 SHORT $LN15@String_con
$LN14@String_con:
  0002a	8b c8		 mov	 ecx, eax
$LN15@String_con:
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	77 11		 ja	 SHORT $LN4@String_con
  00030	83 fa 08	 cmp	 edx, 8
  00033	72 02		 jb	 SHORT $LN18@String_con
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@String_con:
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0003d	3b da		 cmp	 ebx, edx
  0003f	76 05		 jbe	 SHORT $LN3@String_con
$LN4@String_con:

; 86   : 				_Pstring != NULL && 
; 87   : 				_Ptr != NULL && 
; 88   : 				((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@String_con:

; 89   : 			this->_Mycont = _Pstring;

  00046	89 37		 mov	 DWORD PTR [edi], esi

; 90   : 			_Myptr = _Ptr;

  00048	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 91   : 			}

  0004b	8b c7		 mov	 eax, edi
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	c2 08 00	 ret	 8
??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z ; std::_Checked_base<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z PROC ; std::_Checked_base<CipherShed::FavoriteVolume *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z ENDP ; std::_Checked_base<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__CheckDlgButton@12:PROC
EXTRN	_ReadDriverConfigurationFlags:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	__imp__SetDlgItemTextW@12:PROC
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
;	COMDAT ?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z
_TEXT	SEGMENT
_systemFavoritesMode$ = 8				; size = 1
_enable$ = 12						; size = 1
?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z PROC ; CipherShed::SetControls, COMDAT
; _hwndDlg$ = esi
; _favorite$ = eax

; 765  : 	{

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	57		 push	 edi
  00003	8b f8		 mov	 edi, eax

; 766  : 		SetDlgItemTextW (hwndDlg, IDC_FAVORITE_LABEL, favorite.Label.c_str());

  00005	83 7f 6c 08	 cmp	 DWORD PTR [edi+108], 8
  00009	72 05		 jb	 SHORT $LN17@SetControl
  0000b	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  0000e	eb 03		 jmp	 SHORT $LN18@SetControl
$LN17@SetControl:
  00010	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
$LN18@SetControl:
  00013	50		 push	 eax
  00014	68 60 04 00 00	 push	 1120			; 00000460H
  00019	56		 push	 esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextW@12

; 767  : 		SetCheckBox (hwndDlg, IDC_FAVORITE_MOUNT_ON_LOGON, favorite.MountOnLogOn);

  00020	0f b6 47 72	 movzx	 eax, BYTE PTR [edi+114]
  00024	50		 push	 eax
  00025	68 62 04 00 00	 push	 1122			; 00000462H
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _SetCheckBox

; 768  : 		SetCheckBox (hwndDlg, IDC_FAVORITE_MOUNT_ON_ARRIVAL, favorite.MountOnArrival);

  00030	0f b6 4f 73	 movzx	 ecx, BYTE PTR [edi+115]
  00034	51		 push	 ecx
  00035	68 5f 04 00 00	 push	 1119			; 0000045fH
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _SetCheckBox

; 769  : 		SetCheckBox (hwndDlg, IDC_FAVORITE_MOUNT_READONLY, favorite.ReadOnly);

  00040	0f b6 57 75	 movzx	 edx, BYTE PTR [edi+117]
  00044	52		 push	 edx
  00045	68 5d 04 00 00	 push	 1117			; 0000045dH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _SetCheckBox

; 770  : 		SetCheckBox (hwndDlg, IDC_FAVORITE_MOUNT_REMOVABLE, favorite.Removable);

  00050	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  00054	50		 push	 eax
  00055	68 5e 04 00 00	 push	 1118			; 0000045eH
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _SetCheckBox
  00060	83 c4 30	 add	 esp, 48			; 00000030H

; 771  : 
; 772  : 		if (systemFavoritesMode)

  00063	80 7c 24 10 00	 cmp	 BYTE PTR _systemFavoritesMode$[esp+8], 0
  00068	74 2e		 je	 SHORT $LN2@SetControl

; 773  : 		{
; 774  : 			uint32 driverConfig = ReadDriverConfigurationFlags();

  0006a	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags

; 775  : 
; 776  : 			// MOUNT_SYSTEM_FAVORITES_ON_BOOT
; 777  : 			CheckDlgButton (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT, (driverConfig & TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES) ? BST_CHECKED : BST_UNCHECKED);

  0006f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CheckDlgButton@12
  00075	8b f8		 mov	 edi, eax
  00077	8b cf		 mov	 ecx, edi
  00079	d1 e9		 shr	 ecx, 1
  0007b	83 e1 01	 and	 ecx, 1
  0007e	51		 push	 ecx
  0007f	68 68 04 00 00	 push	 1128			; 00000468H
  00084	56		 push	 esi
  00085	ff d3		 call	 ebx

; 778  : 
; 779  : 			// DISABLE_NONADMIN_SYS_FAVORITES_ACCESS
; 780  : 			CheckDlgButton (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY, (driverConfig & TC_DRIVER_CONFIG_DISABLE_NONADMIN_SYS_FAVORITES_ACCESS) ? BST_CHECKED : BST_UNCHECKED);

  00087	c1 ef 02	 shr	 edi, 2
  0008a	83 e7 01	 and	 edi, 1
  0008d	57		 push	 edi
  0008e	68 63 04 00 00	 push	 1123			; 00000463H
  00093	56		 push	 esi
  00094	ff d3		 call	 ebx

; 781  : 		}
; 782  : 		else

  00096	eb 23		 jmp	 SHORT $LN1@SetControl
$LN2@SetControl:

; 783  : 		{
; 784  : 			SetCheckBox (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT, favorite.OpenExplorerWindow);

  00098	0f b6 57 74	 movzx	 edx, BYTE PTR [edi+116]
  0009c	52		 push	 edx
  0009d	68 68 04 00 00	 push	 1128			; 00000468H
  000a2	56		 push	 esi
  000a3	e8 00 00 00 00	 call	 _SetCheckBox

; 785  : 			SetCheckBox (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY, favorite.DisableHotkeyMount);

  000a8	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  000ac	50		 push	 eax
  000ad	68 63 04 00 00	 push	 1123			; 00000463H
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 _SetCheckBox
  000b8	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@SetControl:

; 786  : 		}
; 787  : 
; 788  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOVE_UP), enable);

  000bb	0f b6 5c 24 14	 movzx	 ebx, BYTE PTR _enable$[esp+8]
  000c0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000c6	53		 push	 ebx
  000c7	68 64 04 00 00	 push	 1124			; 00000464H
  000cc	56		 push	 esi
  000cd	ff d7		 call	 edi
  000cf	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  000d5	50		 push	 eax
  000d6	ff d5		 call	 ebp

; 789  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOVE_DOWN), enable);

  000d8	53		 push	 ebx
  000d9	68 65 04 00 00	 push	 1125			; 00000465H
  000de	56		 push	 esi
  000df	ff d7		 call	 edi
  000e1	50		 push	 eax
  000e2	ff d5		 call	 ebp

; 790  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_REMOVE), enable);

  000e4	53		 push	 ebx
  000e5	68 66 04 00 00	 push	 1126			; 00000466H
  000ea	56		 push	 esi
  000eb	ff d7		 call	 edi
  000ed	50		 push	 eax
  000ee	ff d5		 call	 ebp

; 791  : 		EnableWindow (GetDlgItem (hwndDlg, IDT_FAVORITE_LABEL), enable);

  000f0	53		 push	 ebx
  000f1	68 61 04 00 00	 push	 1121			; 00000461H
  000f6	56		 push	 esi
  000f7	ff d7		 call	 edi
  000f9	50		 push	 eax
  000fa	ff d5		 call	 ebp

; 792  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_LABEL), enable);

  000fc	53		 push	 ebx
  000fd	68 60 04 00 00	 push	 1120			; 00000460H
  00102	56		 push	 esi
  00103	ff d7		 call	 edi
  00105	50		 push	 eax
  00106	ff d5		 call	 ebp

; 793  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOUNT_ON_LOGON), enable && !systemFavoritesMode);

  00108	80 7c 24 14 00	 cmp	 BYTE PTR _enable$[esp+8], 0
  0010d	74 0e		 je	 SHORT $LN5@SetControl
  0010f	80 7c 24 10 00	 cmp	 BYTE PTR _systemFavoritesMode$[esp+8], 0
  00114	75 07		 jne	 SHORT $LN5@SetControl
  00116	b8 01 00 00 00	 mov	 eax, 1
  0011b	eb 02		 jmp	 SHORT $LN6@SetControl
$LN5@SetControl:
  0011d	33 c0		 xor	 eax, eax
$LN6@SetControl:
  0011f	50		 push	 eax
  00120	68 62 04 00 00	 push	 1122			; 00000462H
  00125	56		 push	 esi
  00126	ff d7		 call	 edi
  00128	50		 push	 eax
  00129	ff d5		 call	 ebp

; 794  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOUNT_ON_ARRIVAL), enable && !systemFavoritesMode);

  0012b	80 7c 24 14 00	 cmp	 BYTE PTR _enable$[esp+8], 0
  00130	74 0e		 je	 SHORT $LN7@SetControl
  00132	80 7c 24 10 00	 cmp	 BYTE PTR _systemFavoritesMode$[esp+8], 0
  00137	75 07		 jne	 SHORT $LN7@SetControl
  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	eb 02		 jmp	 SHORT $LN8@SetControl
$LN7@SetControl:
  00140	33 c0		 xor	 eax, eax
$LN8@SetControl:
  00142	50		 push	 eax
  00143	68 5f 04 00 00	 push	 1119			; 0000045fH
  00148	56		 push	 esi
  00149	ff d7		 call	 edi
  0014b	50		 push	 eax
  0014c	ff d5		 call	 ebp

; 795  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOUNT_READONLY), enable);

  0014e	53		 push	 ebx
  0014f	68 5d 04 00 00	 push	 1117			; 0000045dH
  00154	56		 push	 esi
  00155	ff d7		 call	 edi
  00157	50		 push	 eax
  00158	ff d5		 call	 ebp

; 796  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_MOUNT_REMOVABLE), enable);

  0015a	53		 push	 ebx
  0015b	68 5e 04 00 00	 push	 1118			; 0000045eH
  00160	56		 push	 esi
  00161	ff d7		 call	 edi
  00163	50		 push	 eax
  00164	ff d5		 call	 ebp

; 797  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT), enable || systemFavoritesMode);

  00166	8a 5c 24 14	 mov	 bl, BYTE PTR _enable$[esp+8]
  0016a	84 db		 test	 bl, bl
  0016c	75 0a		 jne	 SHORT $LN19@SetControl
  0016e	38 5c 24 10	 cmp	 BYTE PTR _systemFavoritesMode$[esp+8], bl
  00172	75 04		 jne	 SHORT $LN19@SetControl
  00174	33 c0		 xor	 eax, eax
  00176	eb 05		 jmp	 SHORT $LN10@SetControl
$LN19@SetControl:
  00178	b8 01 00 00 00	 mov	 eax, 1
$LN10@SetControl:
  0017d	50		 push	 eax
  0017e	68 68 04 00 00	 push	 1128			; 00000468H
  00183	56		 push	 esi
  00184	ff d7		 call	 edi
  00186	50		 push	 eax
  00187	ff d5		 call	 ebp

; 798  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY), enable || systemFavoritesMode);

  00189	84 db		 test	 bl, bl
  0018b	75 18		 jne	 SHORT $LN11@SetControl
  0018d	38 5c 24 10	 cmp	 BYTE PTR _systemFavoritesMode$[esp+8], bl
  00191	75 12		 jne	 SHORT $LN11@SetControl
  00193	33 c0		 xor	 eax, eax
  00195	50		 push	 eax
  00196	68 63 04 00 00	 push	 1123			; 00000463H
  0019b	56		 push	 esi
  0019c	ff d7		 call	 edi
  0019e	50		 push	 eax
  0019f	ff d5		 call	 ebp
  001a1	5f		 pop	 edi
  001a2	5d		 pop	 ebp
  001a3	5b		 pop	 ebx

; 799  : 	}

  001a4	c3		 ret	 0
$LN11@SetControl:

; 798  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY), enable || systemFavoritesMode);

  001a5	b8 01 00 00 00	 mov	 eax, 1
  001aa	50		 push	 eax
  001ab	68 63 04 00 00	 push	 1123			; 00000463H
  001b0	56		 push	 esi
  001b1	ff d7		 call	 edi
  001b3	50		 push	 eax
  001b4	ff d5		 call	 ebp
  001b6	5f		 pop	 edi
  001b7	5d		 pop	 ebp
  001b8	5b		 pop	 ebx

; 799  : 	}

  001b9	c3		 ret	 0
?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z ENDP ; CipherShed::SetControls
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@find@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1798 : 		}

  00027	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1837 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	56		 push	 esi

; 1838 : 		_DEBUG_POINTER(_Ptr);
; 1839 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@rfind@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@rfind@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1840 : 		}

  00027	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 13		 jb	 SHORT $LN7@compare@3
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00015	50		 push	 eax
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  0001d	c2 04 00	 ret	 4

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

$LN7@compare@3:
  00020	52		 push	 edx
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  00030	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2025 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)

  00000	56		 push	 esi

; 2026 : 		_DEBUG_POINTER(_Ptr);
; 2027 : 		return (compare(0, _Mysize, _Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@compare@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@compare@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001d	56		 push	 esi
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 2028 : 		}

  00028	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	83 ec 08	 sub	 esp, 8

; 381  : 		_Myt _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Off$[esp+4]
  0000c	89 4c 24 04	 mov	 DWORD PTR __Tmp$[esp+12], ecx
  00010	52		 push	 edx
  00011	8d 4c 24 04	 lea	 ecx, DWORD PTR __Tmp$[esp+12]
  00015	89 44 24 04	 mov	 DWORD PTR __Tmp$[esp+12], eax
  00019	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
  0001e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00022	8b 0c 24	 mov	 ecx, DWORD PTR __Tmp$[esp+8]
  00025	8b 54 24 04	 mov	 edx, DWORD PTR __Tmp$[esp+12]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 383  : 		}

  0002e	83 c4 08	 add	 esp, 8
  00031	c2 08 00	 ret	 8
??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000d	85 c0		 test	 eax, eax
  0000f	74 02		 je	 SHORT $LN26@Buynode
  00011	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00013	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00016	85 c9		 test	 ecx, ecx
  00018	74 02		 je	 SHORT $LN36@Buynode
  0001a	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  0001c	c3		 ret	 0
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PA_WPBV_Container_base_secure@1@@Z ; std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PA_WPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PA_WPBV_Container_base_secure@1@@Z PROC ; std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 341  : 			{	// construct with pointer _Ptr

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Pstring$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 342  : 			}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	c2 08 00	 ret	 8
??0?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PA_WPBV_Container_base_secure@1@@Z ENDP ; std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 94   : 	return (_Left.compare(_Right) == 0);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@operator@16:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator@16
  00017	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001b	2b c6		 sub	 eax, esi
  0001d	50		 push	 eax
  0001e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0002a	f7 d8		 neg	 eax
  0002c	1b c0		 sbb	 eax, eax
  0002e	40		 inc	 eax
  0002f	5e		 pop	 esi

; 95   : 	}

  00030	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 74   : 	return (_Left.compare(_Right) == 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN9@operator@17
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN10@operator@17
$LN9@operator@17:
  00012	83 c0 04	 add	 eax, 4
$LN10@operator@17:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	40		 inc	 eax

; 75   : 	}

  0002b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin, COMDAT
; _this$ = ecx

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 17		 jb	 SHORT $LN5@begin@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	51		 push	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1503 : 		}

  0001a	c2 04 00	 ret	 4

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

$LN5@begin@2:
  0001d	56		 push	 esi
  0001e	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1503 : 		}

  00031	c2 04 00	 ret	 4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end, COMDAT
; _this$ = ecx

; 1512 : 		return (_STRING_ITERATOR(_Myptr() + _Mysize));

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 05		 jb	 SHORT $LN5@end@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	eb 03		 jmp	 SHORT $LN6@end@2
$LN5@end@2:
  0000b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN6@end@2:
  0000e	56		 push	 esi
  0000f	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00013	51		 push	 ecx
  00014	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00017	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0001a	52		 push	 edx
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi

; 1513 : 		}

  00025	c2 04 00	 ret	 4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@3
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@3:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@3
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@3:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ErrorException@CipherShed@@6B@		; CipherShed::ErrorException::`vftable'
PUBLIC	??0ErrorException@CipherShed@@QAE@PAD@Z		; CipherShed::ErrorException::ErrorException
PUBLIC	??_R4ErrorException@CipherShed@@6B@		; CipherShed::ErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUErrorException@CipherShed@@@8		; CipherShed::ErrorException `RTTI Type Descriptor'
PUBLIC	??_R3ErrorException@CipherShed@@8		; CipherShed::ErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ErrorException@CipherShed@@8		; CipherShed::ErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ErrorException@CipherShed@@8	; CipherShed::ErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::ErrorException::Show
;	COMDAT ??_R1A@?0A@EA@ErrorException@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@ErrorException@CipherShed@@8 DD FLAT:??_R0?AUErrorException@CipherShed@@@8 ; CipherShed::ErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2ErrorException@CipherShed@@8
rdata$r	SEGMENT
??_R2ErrorException@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@ErrorException@CipherShed@@8 ; CipherShed::ErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3ErrorException@CipherShed@@8
rdata$r	SEGMENT
??_R3ErrorException@CipherShed@@8 DD 00H		; CipherShed::ErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUErrorException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUErrorException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUErrorException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ErrorException@CipherShed@@6B@
rdata$r	SEGMENT
??_R4ErrorException@CipherShed@@6B@ DD 00H		; CipherShed::ErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUErrorException@CipherShed@@@8
	DD	FLAT:??_R3ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7ErrorException@CipherShed@@6B@
CONST	SEGMENT
??_7ErrorException@CipherShed@@6B@ DD FLAT:??_R4ErrorException@CipherShed@@6B@ ; CipherShed::ErrorException::`vftable'
	DD	FLAT:?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	ENDS
;	COMDAT ??0ErrorException@CipherShed@@QAE@PAD@Z
_TEXT	SEGMENT
_langId$ = 8						; size = 4
??0ErrorException@CipherShed@@QAE@PAD@Z PROC		; CipherShed::ErrorException::ErrorException, COMDAT
; _this$ = ecx

; 37   : 		ErrorException (char *langId) : ErrLangId (langId) { }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _langId$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ErrorException@CipherShed@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	33 d2		 xor	 edx, edx
  00011	c7 40 20 07 00
	00 00		 mov	 DWORD PTR [eax+32], 7
  00018	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0001f	66 89 50 0c	 mov	 WORD PTR [eax+12], dx
  00023	c2 04 00	 ret	 4
??0ErrorException@CipherShed@@QAE@PAD@Z ENDP		; CipherShed::ErrorException::ErrorException
_TEXT	ENDS
EXTRN	_ErrorDirect:PROC
EXTRN	_Error:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z PROC	; CipherShed::ErrorException::Show, COMDAT
; _this$ = ecx

; 42   : 			if (ErrMsg.empty())

  00000	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00004	75 0f		 jne	 SHORT $LN2@Show

; 43   : 				::Error (ErrLangId);

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _Error
  0000f	83 c4 04	 add	 esp, 4

; 46   : 		}

  00012	c2 04 00	 ret	 4
$LN2@Show:

; 44   : 			else
; 45   : 				::ErrorDirect (ErrMsg.c_str());

  00015	83 79 20 08	 cmp	 DWORD PTR [ecx+32], 8
  00019	72 0d		 jb	 SHORT $LN11@Show
  0001b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _ErrorDirect
  00024	59		 pop	 ecx

; 46   : 		}

  00025	c2 04 00	 ret	 4

; 44   : 			else
; 45   : 				::ErrorDirect (ErrMsg.c_str());

$LN11@Show:
  00028	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _ErrorDirect
  00031	59		 pop	 ecx

; 46   : 		}

  00032	c2 04 00	 ret	 4
?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z ENDP	; CipherShed::ErrorException::Show
_TEXT	ENDS
PUBLIC	??0FavoriteVolume@CipherShed@@QAE@XZ		; CipherShed::FavoriteVolume::FavoriteVolume
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.h
;	COMDAT ??0FavoriteVolume@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0FavoriteVolume@CipherShed@@QAE@XZ PROC		; CipherShed::FavoriteVolume::FavoriteVolume, COMDAT
; _this$ = ecx

; 28   : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00007	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0000c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0000f	88 48 04	 mov	 BYTE PTR [eax+4], cl
  00012	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00015	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00018	88 48 20	 mov	 BYTE PTR [eax+32], cl
  0001b	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0001e	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00021	88 48 3c	 mov	 BYTE PTR [eax+60], cl
  00024	c7 40 6c 07 00
	00 00		 mov	 DWORD PTR [eax+108], 7
  0002b	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  0002e	33 d2		 xor	 edx, edx
  00030	66 89 50 58	 mov	 WORD PTR [eax+88], dx
  00034	88 48 70	 mov	 BYTE PTR [eax+112], cl
  00037	88 48 71	 mov	 BYTE PTR [eax+113], cl
  0003a	88 48 72	 mov	 BYTE PTR [eax+114], cl
  0003d	88 48 73	 mov	 BYTE PTR [eax+115], cl
  00040	88 48 74	 mov	 BYTE PTR [eax+116], cl
  00043	88 48 75	 mov	 BYTE PTR [eax+117], cl
  00046	88 48 76	 mov	 BYTE PTR [eax+118], cl
  00049	88 48 77	 mov	 BYTE PTR [eax+119], cl

; 29   : 		}

  0004c	c3		 ret	 0
??0FavoriteVolume@CipherShed@@QAE@XZ ENDP		; CipherShed::FavoriteVolume::FavoriteVolume
_TEXT	ENDS
PUBLIC	??1FavoriteVolume@CipherShed@@QAE@XZ		; CipherShed::FavoriteVolume::~FavoriteVolume
; Function compile flags: /Ogtpy
;	COMDAT ??1FavoriteVolume@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1FavoriteVolume@CipherShed@@QAE@XZ PROC		; CipherShed::FavoriteVolume::~FavoriteVolume, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 6c 08	 cmp	 DWORD PTR [esi+108], 8
  00008	72 0c		 jb	 SHORT $LN25@FavoriteVo
  0000a	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN25@FavoriteVo:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 6c 07 00
	00 00		 mov	 DWORD PTR [esi+108], 7
  00021	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  00024	66 89 4e 58	 mov	 WORD PTR [esi+88], cx
  00028	83 7e 50 10	 cmp	 DWORD PTR [esi+80], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN51@FavoriteVo
  0002e	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN51@FavoriteVo:
  0003a	c7 46 50 0f 00
	00 00		 mov	 DWORD PTR [esi+80], 15	; 0000000fH
  00041	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  00044	88 5e 3c	 mov	 BYTE PTR [esi+60], bl
  00047	83 7e 34 10	 cmp	 DWORD PTR [esi+52], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN77@FavoriteVo
  0004d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN77@FavoriteVo:
  00059	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  00060	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00063	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00066	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006a	72 0c		 jb	 SHORT $LN103@FavoriteVo
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
$LN103@FavoriteVo:
  00078	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	c3		 ret	 0
??1FavoriteVolume@CipherShed@@QAE@XZ ENDP		; CipherShed::FavoriteVolume::~FavoriteVolume
_TEXT	ENDS
PUBLIC	??0FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolumesDlgProcArguments::FavoriteVolumesDlgProcArguments
; Function compile flags: /Ogtpy
;	COMDAT ??0FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ PROC ; CipherShed::FavoriteVolumesDlgProcArguments::FavoriteVolumesDlgProcArguments, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00007	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0000c	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  0000f	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00012	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00015	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00018	88 48 24	 mov	 BYTE PTR [eax+36], cl
  0001b	89 50 54	 mov	 DWORD PTR [eax+84], edx
  0001e	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00021	88 48 40	 mov	 BYTE PTR [eax+64], cl
  00024	c7 40 70 07 00
	00 00		 mov	 DWORD PTR [eax+112], 7
  0002b	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
  0002e	33 d2		 xor	 edx, edx
  00030	66 89 50 5c	 mov	 WORD PTR [eax+92], dx
  00034	88 48 74	 mov	 BYTE PTR [eax+116], cl
  00037	88 48 75	 mov	 BYTE PTR [eax+117], cl
  0003a	88 48 76	 mov	 BYTE PTR [eax+118], cl
  0003d	88 48 77	 mov	 BYTE PTR [eax+119], cl
  00040	88 48 78	 mov	 BYTE PTR [eax+120], cl
  00043	88 48 79	 mov	 BYTE PTR [eax+121], cl
  00046	88 48 7a	 mov	 BYTE PTR [eax+122], cl
  00049	88 48 7b	 mov	 BYTE PTR [eax+123], cl
  0004c	c3		 ret	 0
??0FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ ENDP ; CipherShed::FavoriteVolumesDlgProcArguments::FavoriteVolumesDlgProcArguments
_TEXT	ENDS
PUBLIC	??1FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolumesDlgProcArguments::~FavoriteVolumesDlgProcArguments
; Function compile flags: /Ogtpy
;	COMDAT ??1FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ PROC ; CipherShed::FavoriteVolumesDlgProcArguments::~FavoriteVolumesDlgProcArguments, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??1FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ ENDP ; CipherShed::FavoriteVolumesDlgProcArguments::~FavoriteVolumesDlgProcArguments
_TEXT	ENDS
PUBLIC	?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@V?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@V?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
_TEXT	SEGMENT
$T129666 = -8						; size = 8
$T129665 = -8						; size = 8
$T129625 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@V?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1285 : 		{	// erase substring [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b e9		 mov	 ebp, ecx

; 1286 : 		size_type _Count = _Pdif(_First, begin());

  00007	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	83 f9 08	 cmp	 ecx, 8
  0000f	72 05		 jb	 SHORT $LN7@erase@3
  00011	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00014	eb 03		 jmp	 SHORT $LN8@erase@3
$LN7@erase@3:
  00016	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
$LN8@erase@3:
  00019	85 ff		 test	 edi, edi
  0001b	74 27		 je	 SHORT $LN14@erase@3
  0001d	8d 55 04	 lea	 edx, DWORD PTR [ebp+4]
  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN24@erase@3
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	eb 02		 jmp	 SHORT $LN25@erase@3
$LN24@erase@3:
  00029	8b c2		 mov	 eax, edx
$LN25@erase@3:
  0002b	3b c7		 cmp	 eax, edi
  0002d	77 15		 ja	 SHORT $LN14@erase@3
  0002f	83 f9 08	 cmp	 ecx, 8
  00032	72 04		 jb	 SHORT $LN28@erase@3
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	eb 02		 jmp	 SHORT $LN29@erase@3
$LN28@erase@3:
  00038	8b c2		 mov	 eax, edx
$LN29@erase@3:
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR [ebp+20]
  0003d	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00040	3b fa		 cmp	 edi, edx
  00042	76 05		 jbe	 SHORT $LN13@erase@3
$LN14@erase@3:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@erase@3:
  00049	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  0004d	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
  00051	89 44 24 10	 mov	 DWORD PTR $T129625[esp+24], eax
  00055	8b f1		 mov	 esi, ecx
  00057	85 c9		 test	 ecx, ecx
  00059	75 04		 jne	 SHORT $LN32@erase@3
  0005b	33 db		 xor	 ebx, ebx
  0005d	eb 20		 jmp	 SHORT $LN33@erase@3
$LN32@erase@3:
  0005f	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00062	74 15		 je	 SHORT $LN34@erase@3
  00064	85 c0		 test	 eax, eax
  00066	74 04		 je	 SHORT $LN37@erase@3
  00068	3b c5		 cmp	 eax, ebp
  0006a	74 0d		 je	 SHORT $LN34@erase@3
$LN37@erase@3:
  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00071	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  00075	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
$LN34@erase@3:
  00079	2b f7		 sub	 esi, edi
  0007b	d1 fe		 sar	 esi, 1
  0007d	8b de		 mov	 ebx, esi
$LN33@erase@3:

; 1287 : 		erase(_Count, _Pdif(_Last, _First));

  0007f	8b 74 24 2c	 mov	 esi, DWORD PTR __Last$[esp+24]
  00083	8b f9		 mov	 edi, ecx
  00085	8b 4c 24 28	 mov	 ecx, DWORD PTR __Last$[esp+20]
  00089	89 44 24 10	 mov	 DWORD PTR $T129666[esp+24], eax
  0008d	89 4c 24 10	 mov	 DWORD PTR $T129665[esp+24], ecx
  00091	85 f6		 test	 esi, esi
  00093	74 16		 je	 SHORT $LN49@erase@3
$LN48@erase@3:
  00095	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00098	74 0d		 je	 SHORT $LN50@erase@3
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 04		 je	 SHORT $LN53@erase@3
  0009e	3b c8		 cmp	 ecx, eax
  000a0	74 05		 je	 SHORT $LN50@erase@3
$LN53@erase@3:
  000a2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN50@erase@3:
  000a7	2b f7		 sub	 esi, edi
  000a9	d1 fe		 sar	 esi, 1
$LN49@erase@3:
  000ab	56		 push	 esi
  000ac	53		 push	 ebx
  000ad	8b cd		 mov	 ecx, ebp
  000af	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase

; 1288 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  000b4	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  000b8	72 05		 jb	 SHORT $LN64@erase@3
  000ba	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bd	eb 03		 jmp	 SHORT $LN65@erase@3
$LN64@erase@3:
  000bf	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
$LN65@erase@3:
  000c2	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  000c6	55		 push	 ebp
  000c7	8d 04 58	 lea	 eax, DWORD PTR [eax+ebx*2]
  000ca	50		 push	 eax
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000d2	5f		 pop	 edi
  000d3	8b c6		 mov	 eax, esi
  000d5	5e		 pop	 esi
  000d6	5d		 pop	 ebp
  000d7	5b		 pop	 ebx

; 1289 : 		}

  000d8	83 c4 08	 add	 esp, 8
  000db	c2 14 00	 ret	 20			; 00000014H
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@V?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter@2
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter@2
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter@2
$LN8@Make_iter@2:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter@2:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
_TEXT	ENDS
PUBLIC	?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append
$LN70@append:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@2
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@2
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@2
$LN14@append@2:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@2:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@2
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@2
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@2
$LN18@append@2:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@2:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@2

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@2
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@2:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@2:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@2
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@2
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@2
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@2:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@2
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@2:
  000a2	76 6c		 jbe	 SHORT $LN96@append@2

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@2
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@2

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@2:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@2
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@2
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@2:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@2:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@2:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@2
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@2:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@2:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??_GFavoriteVolume@CipherShed@@QAEPAXI@Z	; CipherShed::FavoriteVolume::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GFavoriteVolume@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFavoriteVolume@CipherShed@@QAEPAXI@Z PROC		; CipherShed::FavoriteVolume::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@4
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GFavoriteVolume@CipherShed@@QAEPAXI@Z ENDP		; CipherShed::FavoriteVolume::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T131352 = -8						; size = 8
?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 1292 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1293 : 		erase(begin(), end());

  00009	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0000c	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000f	83 fa 08	 cmp	 edx, 8
  00012	72 04		 jb	 SHORT $LN7@clear
  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	eb 02		 jmp	 SHORT $LN8@clear
$LN7@clear:
  00018	8b ce		 mov	 ecx, esi
$LN8@clear:
  0001a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001d	03 c0		 add	 eax, eax
  0001f	8d 2c 08	 lea	 ebp, DWORD PTR [eax+ecx]
  00022	85 ed		 test	 ebp, ebp
  00024	74 20		 je	 SHORT $LN14@clear
  00026	83 fa 08	 cmp	 edx, 8
  00029	72 04		 jb	 SHORT $LN24@clear
  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	eb 02		 jmp	 SHORT $LN25@clear
$LN24@clear:
  0002f	8b ce		 mov	 ecx, esi
$LN25@clear:
  00031	3b cd		 cmp	 ecx, ebp
  00033	77 11		 ja	 SHORT $LN14@clear
  00035	83 fa 08	 cmp	 edx, 8
  00038	72 04		 jb	 SHORT $LN28@clear
  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN29@clear
$LN28@clear:
  0003e	8b ce		 mov	 ecx, esi
$LN29@clear:
  00040	03 c1		 add	 eax, ecx
  00042	3b e8		 cmp	 ebp, eax
  00044	76 05		 jbe	 SHORT $LN13@clear
$LN14@clear:
  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@clear:
  0004b	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004e	83 f9 08	 cmp	 ecx, 8
  00051	72 04		 jb	 SHORT $LN34@clear
  00053	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00055	eb 02		 jmp	 SHORT $LN35@clear
$LN34@clear:
  00057	8b de		 mov	 ebx, esi
$LN35@clear:
  00059	85 db		 test	 ebx, ebx
  0005b	74 20		 je	 SHORT $LN41@clear
  0005d	83 f9 08	 cmp	 ecx, 8
  00060	72 04		 jb	 SHORT $LN51@clear
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN52@clear
$LN51@clear:
  00066	8b c6		 mov	 eax, esi
$LN52@clear:
  00068	3b c3		 cmp	 eax, ebx
  0006a	77 11		 ja	 SHORT $LN41@clear
  0006c	83 f9 08	 cmp	 ecx, 8
  0006f	72 02		 jb	 SHORT $LN55@clear
  00071	8b 36		 mov	 esi, DWORD PTR [esi]
$LN55@clear:
  00073	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00076	8d 0c 46	 lea	 ecx, DWORD PTR [esi+eax*2]
  00079	3b d9		 cmp	 ebx, ecx
  0007b	76 05		 jbe	 SHORT $LN40@clear
$LN41@clear:
  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN40@clear:
  00082	55		 push	 ebp
  00083	57		 push	 edi
  00084	53		 push	 ebx
  00085	57		 push	 edi
  00086	8d 54 24 20	 lea	 edx, DWORD PTR $T131352[esp+40]
  0008a	52		 push	 edx
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@V?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5d		 pop	 ebp
  00095	5b		 pop	 ebx

; 1294 : 		}

  00096	83 c4 08	 add	 esp, 8
  00099	c3		 ret	 0
?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Roff$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 10	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00020	8b 44 24 0c	 mov	 eax, DWORD PTR __Right$[esp+4]
  00024	52		 push	 edx
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 633  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@3:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@3
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@5
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z ; std::_Destroy<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Destroy<CipherShed::FavoriteVolume>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Destroy<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@6
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@6:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@6
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@6:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z	; CipherShed::FavoriteVolume::FavoriteVolume
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$2
__ehfuncinfo$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::FavoriteVolume::FavoriteVolume, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	33 db		 xor	 ebx, ebx
  00030	6a ff		 push	 -1
  00032	53		 push	 ebx
  00033	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0003a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003d	57		 push	 edi
  0003e	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00046	6a ff		 push	 -1
  00048	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0004b	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0004e	53		 push	 ebx
  0004f	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00056	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00059	50		 push	 eax
  0005a	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  0005e	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00066	6a ff		 push	 -1
  00068	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0006b	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  0006e	53		 push	 ebx
  0006f	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00076	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00079	50		 push	 eax
  0007a	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  0007f	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00082	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00087	6a ff		 push	 -1
  00089	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0008c	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  0008f	53		 push	 ebx
  00090	33 d2		 xor	 edx, edx
  00092	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00099	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0009c	50		 push	 eax
  0009d	c6 44 24 28 02	 mov	 BYTE PTR __$EHRec$[esp+52], 2
  000a2	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  000a6	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000ab	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  000af	88 46 70	 mov	 BYTE PTR [esi+112], al
  000b2	0f b6 4f 71	 movzx	 ecx, BYTE PTR [edi+113]
  000b6	88 4e 71	 mov	 BYTE PTR [esi+113], cl
  000b9	0f b6 57 72	 movzx	 edx, BYTE PTR [edi+114]
  000bd	88 56 72	 mov	 BYTE PTR [esi+114], dl
  000c0	0f b6 47 73	 movzx	 eax, BYTE PTR [edi+115]
  000c4	88 46 73	 mov	 BYTE PTR [esi+115], al
  000c7	0f b6 4f 74	 movzx	 ecx, BYTE PTR [edi+116]
  000cb	88 4e 74	 mov	 BYTE PTR [esi+116], cl
  000ce	0f b6 57 75	 movzx	 edx, BYTE PTR [edi+117]
  000d2	88 56 75	 mov	 BYTE PTR [esi+117], dl
  000d5	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  000d9	88 46 76	 mov	 BYTE PTR [esi+118], al
  000dc	0f b6 4f 77	 movzx	 ecx, BYTE PTR [edi+119]
  000e0	88 4e 77	 mov	 BYTE PTR [esi+119], cl
  000e3	8b c6		 mov	 eax, esi
  000e5	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 38	 add	 ecx, 56			; 00000038H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00025	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::FavoriteVolume::FavoriteVolume
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@3:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@3
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@18:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@18
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 922  : 		}

  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T133071 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T133071[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@4:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@4
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@19:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@19
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 922  : 		}

  00028	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@20:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@20
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T133363 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00016	89 44 24 04	 mov	 DWORD PTR $T133363[esp+8], eax
  0001a	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001e	8b 44 24 10	 mov	 eax, DWORD PTR __Off$[esp+4]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 2000 : 		}

  0002f	59		 pop	 ecx
  00030	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T133520 = -80						; size = 28
$T133519 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T133520[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T133520[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T133520[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T133520[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T133520[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T133519[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T133519[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T133519[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T133520[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T133801 = -80						; size = 28
$T133800 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be 22 22 22 02	 mov	 esi, 35791394		; 02222222H
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T133801[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T133801[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T133801[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T133801[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T133801[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T133800[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T133800[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T133800[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T133801[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
; Function compile flags: /Ogtpy
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T133981 = -44						; size = 4
$T133978 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T133978[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T133981[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T133978[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T133978[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T133978[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@21:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@21
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T133978[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T133978[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@21
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T133978[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@21:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T133978[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T134382 = -44						; size = 4
$T134379 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T134379[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T134382[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T134379[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T134379[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T134379[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	6a ff		 push	 -1
  00055	57		 push	 edi
  00056	52		 push	 edx
  00057	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T134379[esp+68]
  0005b	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  0005f	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00064	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00068	6a ff		 push	 -1
  0006a	33 c9		 xor	 ecx, ecx
  0006c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	57		 push	 edi
  00077	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00083	83 7c 24 28 08	 cmp	 DWORD PTR $T134379[esp+80], 8
  00088	72 0d		 jb	 SHORT $LN94@operator@22
  0008a	8b 54 24 14	 mov	 edx, DWORD PTR $T134379[esp+60]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00094	83 c4 04	 add	 esp, 4
$LN94@operator@22:
  00097	8b c6		 mov	 eax, esi

; 25   : 	}

  00099	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T134379[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
$T134775 = -44						; size = 4
$T134772 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	33 c0		 xor	 eax, eax
  0002d	66 89 44 24 14	 mov	 WORD PTR $T134772[esp+60], ax
  00032	8b c2		 mov	 eax, edx
  00034	89 7c 24 0c	 mov	 DWORD PTR $T134775[esp+56], edi
  00038	c7 44 24 28 07
	00 00 00	 mov	 DWORD PTR $T134772[esp+80], 7
  00040	89 7c 24 24	 mov	 DWORD PTR $T134772[esp+76], edi
  00044	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LL104@operator@23:
  00047	66 8b 08	 mov	 cx, WORD PTR [eax]
  0004a	83 c0 02	 add	 eax, 2
  0004d	66 3b cf	 cmp	 cx, di
  00050	75 f5		 jne	 SHORT $LL104@operator@23
  00052	2b c6		 sub	 eax, esi
  00054	d1 f8		 sar	 eax, 1
  00056	50		 push	 eax
  00057	52		 push	 edx
  00058	8d 4c 24 18	 lea	 ecx, DWORD PTR $T134772[esp+64]
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00061	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00065	6a ff		 push	 -1
  00067	57		 push	 edi
  00068	51		 push	 ecx
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T134772[esp+68]
  0006d	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  00071	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00076	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007a	6a ff		 push	 -1
  0007c	57		 push	 edi
  0007d	33 d2		 xor	 edx, edx
  0007f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00086	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00089	50		 push	 eax
  0008a	8b ce		 mov	 ecx, esi
  0008c	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00090	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00095	83 7c 24 28 08	 cmp	 DWORD PTR $T134772[esp+80], 8
  0009a	72 0d		 jb	 SHORT $LN105@operator@23
  0009c	8b 44 24 14	 mov	 eax, DWORD PTR $T134772[esp+60]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a6	83 c4 04	 add	 esp, 4
$LN105@operator@23:
  000a9	8b c6		 mov	 eax, esi

; 35   : 	}

  000ab	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	83 c4 2c	 add	 esp, 44			; 0000002cH
  000bc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T134772[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T135212 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T135212[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@2
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN3@Construct@2:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T135212[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
PUBLIC	?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z ; std::allocator<CipherShed::FavoriteVolume>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::destroy
_TEXT	ENDS
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@		; `string'
PUBLIC	??_C@_0BK@OGKIEBOP@FAVORITE_DISCONNECTED_DEV?$AA@ ; `string'
PUBLIC	??_C@_13LLDNKHDC@?$AA?$CI?$AA?$AA@		; `string'
EXTRN	_ListSubItemSet:PROC
EXTRN	_GetString:PROC
EXTRN	_ListSubItemSetW:PROC
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@ DB ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OGKIEBOP@FAVORITE_DISCONNECTED_DEV?$AA@
CONST	SEGMENT
??_C@_0BK@OGKIEBOP@FAVORITE_DISCONNECTED_DEV?$AA@ DB 'FAVORITE_DISCONNECT'
	DB	'ED_DEV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13LLDNKHDC@?$AA?$CI?$AA?$AA@
CONST	SEGMENT
??_C@_13LLDNKHDC@?$AA?$CI?$AA?$AA@ DB '(', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z$1
__ehfuncinfo$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z
_TEXT	SEGMENT
$T135239 = -96						; size = 28
$T135241 = -68						; size = 28
$T135240 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_FavoriteListControl$ = 8				; size = 4
?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z PROC ; CipherShed::FillListControlSubItems, COMDAT
; _line$ = edx
; _favorite$ = ecx

; 459  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 54	 sub	 esp, 84			; 00000054H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 68	 lea	 eax, DWORD PTR __$EHRec$[esp+116]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	8b fa		 mov	 edi, edx
  0002b	8b 6c 24 78	 mov	 ebp, DWORD PTR _FavoriteListControl$[esp+112]

; 460  : 		ListSubItemSetW (FavoriteListControl, line, 1, (wchar_t *) favorite.Label.c_str());

  0002f	83 7e 6c 08	 cmp	 DWORD PTR [esi+108], 8
  00033	72 05		 jb	 SHORT $LN12@FillListCo
  00035	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00038	eb 03		 jmp	 SHORT $LN13@FillListCo
$LN12@FillListCo:
  0003a	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
$LN13@FillListCo:
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	57		 push	 edi
  00041	55		 push	 ebp
  00042	e8 00 00 00 00	 call	 _ListSubItemSetW

; 461  : 
; 462  : 		if (favorite.DisconnectedDevice)

  00047	33 db		 xor	 ebx, ebx
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	38 5e 71	 cmp	 BYTE PTR [esi+113], bl
  0004f	0f 84 eb 00 00
	00		 je	 $LN2@FillListCo

; 463  : 			ListSubItemSetW (FavoriteListControl, line, 2, (wchar_t *) (wstring (L"(") + GetString ("FAVORITE_DISCONNECTED_DEV") + L")").c_str());

  00055	6a 01		 push	 1
  00057	33 c0		 xor	 eax, eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI?$AA?$AA@
  0005e	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T135239[esp+124]
  00062	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T135239[esp+148], 7
  0006a	89 5c 24 30	 mov	 DWORD PTR $T135239[esp+144], ebx
  0006e	66 89 44 24 20	 mov	 WORD PTR $T135239[esp+128], ax
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OGKIEBOP@FAVORITE_DISCONNECTED_DEV?$AA@
  0007d	89 5c 24 74	 mov	 DWORD PTR __$EHRec$[esp+128], ebx
  00081	e8 00 00 00 00	 call	 _GetString
  00086	50		 push	 eax
  00087	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T135239[esp+124]
  0008b	51		 push	 ecx
  0008c	8d 54 24 58	 lea	 edx, DWORD PTR $T135240[esp+128]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@
  0009b	50		 push	 eax
  0009c	8d 44 24 48	 lea	 eax, DWORD PTR $T135241[esp+140]
  000a0	50		 push	 eax
  000a1	c6 84 24 8c 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+152], 1
  000a9	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ae	be 08 00 00 00	 mov	 esi, 8
  000b3	83 c4 1c	 add	 esp, 28			; 0000001cH
  000b6	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  000b9	72 05		 jb	 SHORT $LN56@FillListCo
  000bb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000be	eb 03		 jmp	 SHORT $LN57@FillListCo
$LN56@FillListCo:
  000c0	83 c0 04	 add	 eax, 4
$LN57@FillListCo:
  000c3	50		 push	 eax
  000c4	6a 02		 push	 2
  000c6	57		 push	 edi
  000c7	55		 push	 ebp
  000c8	e8 00 00 00 00	 call	 _ListSubItemSetW
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	39 74 24 48	 cmp	 DWORD PTR $T135241[esp+140], esi
  000d4	72 0d		 jb	 SHORT $LN76@FillListCo
  000d6	8b 4c 24 34	 mov	 ecx, DWORD PTR $T135241[esp+120]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e0	83 c4 04	 add	 esp, 4
$LN76@FillListCo:
  000e3	33 d2		 xor	 edx, edx
  000e5	bf 07 00 00 00	 mov	 edi, 7
  000ea	89 7c 24 48	 mov	 DWORD PTR $T135241[esp+140], edi
  000ee	89 5c 24 44	 mov	 DWORD PTR $T135241[esp+136], ebx
  000f2	66 89 54 24 34	 mov	 WORD PTR $T135241[esp+120], dx
  000f7	39 74 24 64	 cmp	 DWORD PTR $T135240[esp+140], esi
  000fb	72 0d		 jb	 SHORT $LN104@FillListCo
  000fd	8b 44 24 50	 mov	 eax, DWORD PTR $T135240[esp+120]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00107	83 c4 04	 add	 esp, 4
$LN104@FillListCo:
  0010a	33 c9		 xor	 ecx, ecx
  0010c	89 7c 24 64	 mov	 DWORD PTR $T135240[esp+140], edi
  00110	89 5c 24 60	 mov	 DWORD PTR $T135240[esp+136], ebx
  00114	66 89 4c 24 50	 mov	 WORD PTR $T135240[esp+120], cx
  00119	39 74 24 2c	 cmp	 DWORD PTR $T135239[esp+140], esi
  0011d	72 3c		 jb	 SHORT $LN1@FillListCo
  0011f	8b 54 24 18	 mov	 edx, DWORD PTR $T135239[esp+120]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00129	83 c4 04	 add	 esp, 4

; 466  : 	}

  0012c	8b 4c 24 68	 mov	 ecx, DWORD PTR __$EHRec$[esp+116]
  00130	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00137	59		 pop	 ecx
  00138	5f		 pop	 edi
  00139	5e		 pop	 esi
  0013a	5d		 pop	 ebp
  0013b	5b		 pop	 ebx
  0013c	83 c4 60	 add	 esp, 96			; 00000060H
  0013f	c3		 ret	 0
$LN2@FillListCo:

; 464  : 		else
; 465  : 			ListSubItemSet (FavoriteListControl, line, 2, (char *) favorite.Path.c_str());

  00140	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00144	72 05		 jb	 SHORT $LN146@FillListCo
  00146	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00149	eb 03		 jmp	 SHORT $LN147@FillListCo
$LN146@FillListCo:
  0014b	83 c6 04	 add	 esi, 4
$LN147@FillListCo:
  0014e	56		 push	 esi
  0014f	6a 02		 push	 2
  00151	57		 push	 edi
  00152	55		 push	 ebp
  00153	e8 00 00 00 00	 call	 _ListSubItemSet
  00158	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@FillListCo:

; 466  : 	}

  0015b	8b 4c 24 68	 mov	 ecx, DWORD PTR __$EHRec$[esp+116]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00166	59		 pop	 ecx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5d		 pop	 ebp
  0016a	5b		 pop	 ebx
  0016b	83 c4 60	 add	 esp, 96			; 00000060H
  0016e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T135239[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T135240[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 9c	 lea	 eax, DWORD PTR [edx-100]
  00017	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z ENDP ; CipherShed::FillListControlSubItems
PUBLIC	??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z	; CipherShed::FavoriteVolume::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z PROC	; CipherShed::FavoriteVolume::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	57		 push	 edi
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00012	6a ff		 push	 -1
  00014	6a 00		 push	 0
  00016	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  00019	50		 push	 eax
  0001a	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	6a ff		 push	 -1
  00024	6a 00		 push	 0
  00026	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00029	51		 push	 ecx
  0002a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	6a ff		 push	 -1
  00034	6a 00		 push	 0
  00036	8d 57 54	 lea	 edx, DWORD PTR [edi+84]
  00039	52		 push	 edx
  0003a	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00042	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  00046	88 46 70	 mov	 BYTE PTR [esi+112], al
  00049	0f b6 4f 71	 movzx	 ecx, BYTE PTR [edi+113]
  0004d	88 4e 71	 mov	 BYTE PTR [esi+113], cl
  00050	0f b6 57 72	 movzx	 edx, BYTE PTR [edi+114]
  00054	88 56 72	 mov	 BYTE PTR [esi+114], dl
  00057	0f b6 47 73	 movzx	 eax, BYTE PTR [edi+115]
  0005b	88 46 73	 mov	 BYTE PTR [esi+115], al
  0005e	0f b6 4f 74	 movzx	 ecx, BYTE PTR [edi+116]
  00062	88 4e 74	 mov	 BYTE PTR [esi+116], cl
  00065	0f b6 57 75	 movzx	 edx, BYTE PTR [edi+117]
  00069	88 56 75	 mov	 BYTE PTR [esi+117], dl
  0006c	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  00070	88 46 76	 mov	 BYTE PTR [esi+118], al
  00073	0f b6 4f 77	 movzx	 ecx, BYTE PTR [edi+119]
  00077	5f		 pop	 edi
  00078	88 4e 77	 mov	 BYTE PTR [esi+119], cl
  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	c2 04 00	 ret	 4
??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z ENDP	; CipherShed::FavoriteVolume::operator=
_TEXT	ENDS
PUBLIC	??_C@_0CI@HPPIJBMN@FAVORITE_ARRIVAL_MOUNT_NETWORK_P@ ; `string'
PUBLIC	??_C@_07HBPFMAGN@Volume?$HL?$AA@		; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_0CH@DKBAOJFF@FAVORITE_ARRIVAL_MOUNT_DEVICE_PA@ ; `string'
PUBLIC	??_C@_0CK@BMBODKOP@FAVORITE_ARRIVAL_MOUNT_PARTITION@ ; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BP@JDCKOJKF@FAVORITE_LABEL_DEVICE_PATH_ERR?$AA@ ; `string'
PUBLIC	??_C@_0CC@GPNGJACE@FAVORITE_LABEL_PARTITION_TYPE_ER@ ; `string'
PUBLIC	??_C@_0M@OJHKIMBP@?2Partition0?$AA@		; `string'
PUBLIC	??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
EXTRN	_IsVolumeDeviceHosted:PROC
EXTRN	__imp__IsDlgButtonChecked@8:PROC
EXTRN	__imp__GetDlgItemTextW@16:PROC
;	COMDAT ??_C@_0CI@HPPIJBMN@FAVORITE_ARRIVAL_MOUNT_NETWORK_P@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CI@HPPIJBMN@FAVORITE_ARRIVAL_MOUNT_NETWORK_P@ DB 'FAVORITE_ARRIVAL'
	DB	'_MOUNT_NETWORK_PATH_ERR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBPFMAGN@Volume?$HL?$AA@
CONST	SEGMENT
??_C@_07HBPFMAGN@Volume?$HL?$AA@ DB 'Volume{', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DKBAOJFF@FAVORITE_ARRIVAL_MOUNT_DEVICE_PA@
CONST	SEGMENT
??_C@_0CH@DKBAOJFF@FAVORITE_ARRIVAL_MOUNT_DEVICE_PA@ DB 'FAVORITE_ARRIVAL'
	DB	'_MOUNT_DEVICE_PATH_ERR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BMBODKOP@FAVORITE_ARRIVAL_MOUNT_PARTITION@
CONST	SEGMENT
??_C@_0CK@BMBODKOP@FAVORITE_ARRIVAL_MOUNT_PARTITION@ DB 'FAVORITE_ARRIVAL'
	DB	'_MOUNT_PARTITION_TYPE_ERR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JDCKOJKF@FAVORITE_LABEL_DEVICE_PATH_ERR?$AA@
CONST	SEGMENT
??_C@_0BP@JDCKOJKF@FAVORITE_LABEL_DEVICE_PATH_ERR?$AA@ DB 'FAVORITE_LABEL'
	DB	'_DEVICE_PATH_ERR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GPNGJACE@FAVORITE_LABEL_PARTITION_TYPE_ER@
CONST	SEGMENT
??_C@_0CC@GPNGJACE@FAVORITE_LABEL_PARTITION_TYPE_ER@ DB 'FAVORITE_LABEL_P'
	DB	'ARTITION_TYPE_ERR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
CONST	SEGMENT
??_C@_0M@OJHKIMBP@?2Partition0?$AA@ DB '\Partition0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
CONST	SEGMENT
??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@ DB '\\?\Volume{', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$6
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z
_TEXT	SEGMENT
_partition$118529 = -2289				; size = 1
$T135868 = -2288					; size = 28
$T135867 = -2260					; size = 28
$T135864 = -2232					; size = 28
$T135858 = -2204					; size = 28
$T135861 = -2176					; size = 28
$T135862 = -2148					; size = 28
$T135857 = -2120					; size = 28
$T135863 = -2092					; size = 28
_label$ = -2064						; size = 2048
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_systemFavoritesMode$ = 12				; size = 1
?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z PROC ; CipherShed::SetFavoriteVolume, COMDAT
; _favorite$ = esi

; 803  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e8 08 00
	00		 sub	 esp, 2280		; 000008e8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 e4 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2292], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 f8 08
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+2308]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b ac 24 08 09
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+2304]

; 804  : 		wchar_t label[1024];
; 805  : 		if (GetDlgItemTextW (hwndDlg, IDC_FAVORITE_LABEL, label, ARRAYSIZE (label)) != 0)

  00041	68 00 04 00 00	 push	 1024			; 00000400H
  00046	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _label$[esp+2312]
  0004d	50		 push	 eax
  0004e	68 60 04 00 00	 push	 1120			; 00000460H
  00053	55		 push	 ebp
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextW@16
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 86 00 00
	00		 je	 $LN11@SetFavorit

; 806  : 		{
; 807  : 			favorite.Label = label;

  00062	8d 84 24 f4 00
	00 00		 lea	 eax, DWORD PTR _label$[esp+2308]
  00069	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0006c	8d 64 24 00	 npad	 4
$LL315@SetFavorit:
  00070	66 8b 08	 mov	 cx, WORD PTR [eax]
  00073	83 c0 02	 add	 eax, 2
  00076	66 85 c9	 test	 cx, cx
  00079	75 f5		 jne	 SHORT $LL315@SetFavorit
  0007b	2b c2		 sub	 eax, edx
  0007d	d1 f8		 sar	 eax, 1
  0007f	50		 push	 eax
  00080	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _label$[esp+2312]
  00087	8d 5e 54	 lea	 ebx, DWORD PTR [esi+84]
  0008a	51		 push	 ecx
  0008b	8b cb		 mov	 ecx, ebx
  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 808  : 
; 809  : 			for (size_t i = 0; i < favorite.Label.size(); ++i)

  00092	33 ff		 xor	 edi, edi
  00094	39 7e 68	 cmp	 DWORD PTR [esi+104], edi
  00097	76 59		 jbe	 SHORT $LN6@SetFavorit
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL10@SetFavorit:

; 810  : 			{
; 811  : 				if (favorite.Label[i] == L'"')

  000a0	3b 7b 14	 cmp	 edi, DWORD PTR [ebx+20]
  000a3	76 05		 jbe	 SHORT $LN36@SetFavorit
  000a5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN36@SetFavorit:
  000aa	83 7b 18 08	 cmp	 DWORD PTR [ebx+24], 8
  000ae	72 05		 jb	 SHORT $LN42@SetFavorit
  000b0	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b3	eb 03		 jmp	 SHORT $LN43@SetFavorit
$LN42@SetFavorit:
  000b5	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN43@SetFavorit:
  000b8	66 83 3c 78 22	 cmp	 WORD PTR [eax+edi*2], 34 ; 00000022H
  000bd	75 21		 jne	 SHORT $LN9@SetFavorit

; 812  : 					favorite.Label.at (i) = L'\'';

  000bf	39 7b 14	 cmp	 DWORD PTR [ebx+20], edi
  000c2	77 05		 ja	 SHORT $LN44@SetFavorit
  000c4	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN44@SetFavorit:
  000c9	83 7b 18 08	 cmp	 DWORD PTR [ebx+24], 8
  000cd	72 05		 jb	 SHORT $LN49@SetFavorit
  000cf	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000d2	eb 03		 jmp	 SHORT $LN50@SetFavorit
$LN49@SetFavorit:
  000d4	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN50@SetFavorit:
  000d7	ba 27 00 00 00	 mov	 edx, 39			; 00000027H
  000dc	66 89 14 78	 mov	 WORD PTR [eax+edi*2], dx
$LN9@SetFavorit:
  000e0	47		 inc	 edi
  000e1	3b 7e 68	 cmp	 edi, DWORD PTR [esi+104]
  000e4	72 ba		 jb	 SHORT $LL10@SetFavorit

; 813  : 			}
; 814  : 		}
; 815  : 		else

  000e6	eb 0a		 jmp	 SHORT $LN6@SetFavorit
$LN11@SetFavorit:

; 816  : 			favorite.Label.clear();

  000e8	8d 5e 54	 lea	 ebx, DWORD PTR [esi+84]
  000eb	8b cb		 mov	 ecx, ebx
  000ed	e8 00 00 00 00	 call	 ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
$LN6@SetFavorit:

; 817  : 
; 818  : 		favorite.ReadOnly = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_MOUNT_READONLY) != 0);

  000f2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__IsDlgButtonChecked@8
  000f8	68 5d 04 00 00	 push	 1117			; 0000045dH
  000fd	55		 push	 ebp
  000fe	ff d7		 call	 edi
  00100	85 c0		 test	 eax, eax

; 819  : 		favorite.Removable = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_MOUNT_REMOVABLE) != 0);

  00102	68 5e 04 00 00	 push	 1118			; 0000045eH
  00107	0f 95 c0	 setne	 al
  0010a	55		 push	 ebp
  0010b	88 46 75	 mov	 BYTE PTR [esi+117], al
  0010e	ff d7		 call	 edi
  00110	85 c0		 test	 eax, eax
  00112	0f 95 c1	 setne	 cl

; 820  : 
; 821  : 		if (!systemFavoritesMode)

  00115	80 bc 24 0c 09
	00 00 00	 cmp	 BYTE PTR _systemFavoritesMode$[esp+2304], 0
  0011d	88 4e 76	 mov	 BYTE PTR [esi+118], cl
  00120	75 40		 jne	 SHORT $LN5@SetFavorit

; 822  : 		{
; 823  : 			favorite.MountOnLogOn = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_MOUNT_ON_LOGON) != 0);

  00122	68 62 04 00 00	 push	 1122			; 00000462H
  00127	55		 push	 ebp
  00128	ff d7		 call	 edi
  0012a	85 c0		 test	 eax, eax

; 824  : 			favorite.MountOnArrival = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_MOUNT_ON_ARRIVAL) != 0);

  0012c	68 5f 04 00 00	 push	 1119			; 0000045fH
  00131	0f 95 c2	 setne	 dl
  00134	55		 push	 ebp
  00135	88 56 72	 mov	 BYTE PTR [esi+114], dl
  00138	ff d7		 call	 edi
  0013a	85 c0		 test	 eax, eax

; 825  : 			favorite.DisableHotkeyMount = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY) != 0);

  0013c	68 63 04 00 00	 push	 1123			; 00000463H
  00141	0f 95 c0	 setne	 al
  00144	55		 push	 ebp
  00145	88 46 73	 mov	 BYTE PTR [esi+115], al
  00148	ff d7		 call	 edi
  0014a	85 c0		 test	 eax, eax

; 826  : 			favorite.OpenExplorerWindow = (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT) != 0);

  0014c	68 68 04 00 00	 push	 1128			; 00000468H
  00151	0f 95 c1	 setne	 cl
  00154	55		 push	 ebp
  00155	88 4e 70	 mov	 BYTE PTR [esi+112], cl
  00158	ff d7		 call	 edi
  0015a	85 c0		 test	 eax, eax
  0015c	0f 95 c2	 setne	 dl
  0015f	88 56 74	 mov	 BYTE PTR [esi+116], dl
$LN5@SetFavorit:

; 827  : 		}
; 828  : 
; 829  : 		if (favorite.VolumePathId.empty()
; 830  : 			&& IsVolumeDeviceHosted (favorite.Path.c_str())
; 831  : 			&& favorite.Path.find ("\\\\?\\Volume{") != 0)

  00162	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00166	0f 85 d0 02 00
	00		 jne	 $LN2@SetFavorit
  0016c	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00170	72 05		 jb	 SHORT $LN57@SetFavorit
  00172	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00175	eb 03		 jmp	 SHORT $LN58@SetFavorit
$LN57@SetFavorit:
  00177	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LN58@SetFavorit:
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  00180	83 c4 04	 add	 esp, 4
  00183	85 c0		 test	 eax, eax
  00185	0f 84 b1 02 00
	00		 je	 $LN2@SetFavorit
  0018b	6a 0b		 push	 11			; 0000000bH
  0018d	6a 00		 push	 0
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  00194	8b ce		 mov	 ecx, esi
  00196	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0019b	85 c0		 test	 eax, eax
  0019d	0f 84 99 02 00
	00		 je	 $LN2@SetFavorit

; 832  : 		{
; 833  : 			bool partition = (favorite.Path.find ("\\Partition0") == string::npos);

  001a3	6a 0b		 push	 11			; 0000000bH
  001a5	6a 00		 push	 0
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
  001ac	8b ce		 mov	 ecx, esi
  001ae	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001b3	83 f8 ff	 cmp	 eax, -1
  001b6	0f 94 c0	 sete	 al

; 834  : 
; 835  : 			if (!favorite.Label.empty())

  001b9	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  001bd	88 44 24 13	 mov	 BYTE PTR _partition$118529[esp+2308], al
  001c1	0f 84 58 01 00
	00		 je	 $LN316@SetFavorit

; 836  : 			{
; 837  : 				ErrorDirect ((GetString (partition ? "FAVORITE_LABEL_PARTITION_TYPE_ERR" : "FAVORITE_LABEL_DEVICE_PATH_ERR") + wstring (L"\n\n") + SingleStringToWide (favorite.Path)).c_str());

  001c7	bd 00 00 00 00	 mov	 ebp, OFFSET ??_C@_0CC@GPNGJACE@FAVORITE_LABEL_PARTITION_TYPE_ER@
  001cc	84 c0		 test	 al, al
  001ce	75 05		 jne	 SHORT $LN15@SetFavorit
  001d0	bd 00 00 00 00	 mov	 ebp, OFFSET ??_C@_0BP@JDCKOJKF@FAVORITE_LABEL_DEVICE_PATH_ERR?$AA@
$LN15@SetFavorit:
  001d5	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR $T135857[esp+2308]
  001dc	56		 push	 esi
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  001e3	83 c4 08	 add	 esp, 8
  001e6	8b f8		 mov	 edi, eax
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  001ed	8d 4c 24 6c	 lea	 ecx, DWORD PTR $T135858[esp+2312]
  001f1	c7 84 24 04 09
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+2320], 0
  001fc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00201	50		 push	 eax
  00202	55		 push	 ebp
  00203	c6 84 24 08 09
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+2324], 1
  0020b	e8 00 00 00 00	 call	 _GetString
  00210	83 c4 04	 add	 esp, 4
  00213	50		 push	 eax
  00214	8d 8c 24 8c 00
	00 00		 lea	 ecx, DWORD PTR $T135861[esp+2316]
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00221	57		 push	 edi
  00222	50		 push	 eax
  00223	8d 94 24 b4 00
	00 00		 lea	 edx, DWORD PTR $T135862[esp+2328]
  0022a	52		 push	 edx
  0022b	c6 84 24 18 09
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+2340], 2
  00233	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00238	bd 08 00 00 00	 mov	 ebp, 8
  0023d	83 c4 18	 add	 esp, 24			; 00000018H
  00240	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  00243	72 05		 jb	 SHORT $LN73@SetFavorit
  00245	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00248	eb 03		 jmp	 SHORT $LN74@SetFavorit
$LN73@SetFavorit:
  0024a	83 c0 04	 add	 eax, 4
$LN74@SetFavorit:
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 _ErrorDirect
  00253	83 c4 04	 add	 esp, 4
  00256	39 ac 24 b8 00
	00 00		 cmp	 DWORD PTR $T135862[esp+2332], ebp
  0025d	72 10		 jb	 SHORT $LN93@SetFavorit
  0025f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR $T135862[esp+2312]
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026c	83 c4 04	 add	 esp, 4
$LN93@SetFavorit:
  0026f	33 ff		 xor	 edi, edi
  00271	33 c9		 xor	 ecx, ecx
  00273	c7 84 24 b8 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T135862[esp+2332], 7
  0027e	89 bc 24 b4 00
	00 00		 mov	 DWORD PTR $T135862[esp+2328], edi
  00285	66 89 8c 24 a4
	00 00 00	 mov	 WORD PTR $T135862[esp+2312], cx
  0028d	39 ac 24 9c 00
	00 00		 cmp	 DWORD PTR $T135861[esp+2332], ebp
  00294	72 10		 jb	 SHORT $LN121@SetFavorit
  00296	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR $T135861[esp+2312]
  0029d	52		 push	 edx
  0029e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002a3	83 c4 04	 add	 esp, 4
$LN121@SetFavorit:
  002a6	33 c0		 xor	 eax, eax
  002a8	c7 84 24 9c 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T135861[esp+2332], 7
  002b3	89 bc 24 98 00
	00 00		 mov	 DWORD PTR $T135861[esp+2328], edi
  002ba	66 89 84 24 88
	00 00 00	 mov	 WORD PTR $T135861[esp+2312], ax
  002c2	39 ac 24 80 00
	00 00		 cmp	 DWORD PTR $T135858[esp+2332], ebp
  002c9	72 0d		 jb	 SHORT $LN149@SetFavorit
  002cb	8b 4c 24 6c	 mov	 ecx, DWORD PTR $T135858[esp+2312]
  002cf	51		 push	 ecx
  002d0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d5	83 c4 04	 add	 esp, 4
$LN149@SetFavorit:
  002d8	33 d2		 xor	 edx, edx
  002da	c7 84 24 80 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T135858[esp+2332], 7
  002e5	89 7c 24 7c	 mov	 DWORD PTR $T135858[esp+2328], edi
  002e9	66 89 54 24 6c	 mov	 WORD PTR $T135858[esp+2312], dx
  002ee	c7 84 24 00 09
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+2316], -1
  002f9	39 ac 24 d4 00
	00 00		 cmp	 DWORD PTR $T135857[esp+2332], ebp
  00300	72 10		 jb	 SHORT $LN177@SetFavorit
  00302	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR $T135857[esp+2312]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0030f	83 c4 04	 add	 esp, 4
$LN177@SetFavorit:

; 838  : 				favorite.Label.clear();

  00312	8b cb		 mov	 ecx, ebx
  00314	e8 00 00 00 00	 call	 ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
  00319	8a 44 24 13	 mov	 al, BYTE PTR _partition$118529[esp+2308]
  0031d	eb 05		 jmp	 SHORT $LN3@SetFavorit
$LN316@SetFavorit:
  0031f	bd 08 00 00 00	 mov	 ebp, 8
$LN3@SetFavorit:

; 839  : 			}
; 840  : 
; 841  : 			if (favorite.MountOnArrival)

  00324	80 7e 73 00	 cmp	 BYTE PTR [esi+115], 0
  00328	0f 84 4d 01 00
	00		 je	 $LN1@SetFavorit

; 842  : 			{
; 843  : 				ErrorDirect ((GetString (partition ? "FAVORITE_ARRIVAL_MOUNT_PARTITION_TYPE_ERR" : "FAVORITE_ARRIVAL_MOUNT_DEVICE_PATH_ERR") + wstring (L"\n\n") + SingleStringToWide (favorite.Path)).c_str());

  0032e	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0CK@BMBODKOP@FAVORITE_ARRIVAL_MOUNT_PARTITION@
  00333	84 c0		 test	 al, al
  00335	75 05		 jne	 SHORT $LN17@SetFavorit
  00337	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0CH@DKBAOJFF@FAVORITE_ARRIVAL_MOUNT_DEVICE_PA@
$LN17@SetFavorit:
  0033c	8d 8c 24 d8 00
	00 00		 lea	 ecx, DWORD PTR $T135863[esp+2308]
  00343	56		 push	 esi
  00344	51		 push	 ecx
  00345	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0034a	83 c4 08	 add	 esp, 8
  0034d	8b f8		 mov	 edi, eax
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00354	8d 4c 24 50	 lea	 ecx, DWORD PTR $T135864[esp+2312]
  00358	c7 84 24 04 09
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+2320], 3
  00363	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00368	50		 push	 eax
  00369	53		 push	 ebx
  0036a	c6 84 24 08 09
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+2324], 4
  00372	e8 00 00 00 00	 call	 _GetString
  00377	83 c4 04	 add	 esp, 4
  0037a	50		 push	 eax
  0037b	8d 54 24 38	 lea	 edx, DWORD PTR $T135867[esp+2316]
  0037f	52		 push	 edx
  00380	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00385	57		 push	 edi
  00386	50		 push	 eax
  00387	8d 44 24 28	 lea	 eax, DWORD PTR $T135868[esp+2328]
  0038b	50		 push	 eax
  0038c	c6 84 24 18 09
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+2340], 5
  00394	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00399	83 c4 18	 add	 esp, 24			; 00000018H
  0039c	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  0039f	72 05		 jb	 SHORT $LN191@SetFavorit
  003a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003a4	eb 03		 jmp	 SHORT $LN192@SetFavorit
$LN191@SetFavorit:
  003a6	83 c0 04	 add	 eax, 4
$LN192@SetFavorit:
  003a9	50		 push	 eax
  003aa	e8 00 00 00 00	 call	 _ErrorDirect
  003af	83 c4 04	 add	 esp, 4
  003b2	39 6c 24 2c	 cmp	 DWORD PTR $T135868[esp+2332], ebp
  003b6	72 0d		 jb	 SHORT $LN211@SetFavorit
  003b8	8b 4c 24 18	 mov	 ecx, DWORD PTR $T135868[esp+2312]
  003bc	51		 push	 ecx
  003bd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003c2	83 c4 04	 add	 esp, 4
$LN211@SetFavorit:
  003c5	33 db		 xor	 ebx, ebx
  003c7	33 d2		 xor	 edx, edx
  003c9	bf 07 00 00 00	 mov	 edi, 7
  003ce	89 7c 24 2c	 mov	 DWORD PTR $T135868[esp+2332], edi
  003d2	89 5c 24 28	 mov	 DWORD PTR $T135868[esp+2328], ebx
  003d6	66 89 54 24 18	 mov	 WORD PTR $T135868[esp+2312], dx
  003db	39 6c 24 48	 cmp	 DWORD PTR $T135867[esp+2332], ebp
  003df	72 0d		 jb	 SHORT $LN239@SetFavorit
  003e1	8b 44 24 34	 mov	 eax, DWORD PTR $T135867[esp+2312]
  003e5	50		 push	 eax
  003e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003eb	83 c4 04	 add	 esp, 4
$LN239@SetFavorit:
  003ee	33 c9		 xor	 ecx, ecx
  003f0	89 7c 24 48	 mov	 DWORD PTR $T135867[esp+2332], edi
  003f4	89 5c 24 44	 mov	 DWORD PTR $T135867[esp+2328], ebx
  003f8	66 89 4c 24 34	 mov	 WORD PTR $T135867[esp+2312], cx
  003fd	39 6c 24 64	 cmp	 DWORD PTR $T135864[esp+2332], ebp
  00401	72 0d		 jb	 SHORT $LN267@SetFavorit
  00403	8b 54 24 50	 mov	 edx, DWORD PTR $T135864[esp+2312]
  00407	52		 push	 edx
  00408	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0040d	83 c4 04	 add	 esp, 4
$LN267@SetFavorit:
  00410	33 c0		 xor	 eax, eax
  00412	89 7c 24 64	 mov	 DWORD PTR $T135864[esp+2332], edi
  00416	89 5c 24 60	 mov	 DWORD PTR $T135864[esp+2328], ebx
  0041a	66 89 44 24 50	 mov	 WORD PTR $T135864[esp+2312], ax
  0041f	39 ac 24 f0 00
	00 00		 cmp	 DWORD PTR $T135863[esp+2332], ebp
  00426	72 10		 jb	 SHORT $LN295@SetFavorit
  00428	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR $T135863[esp+2312]
  0042f	51		 push	 ecx
  00430	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00435	83 c4 04	 add	 esp, 4
$LN295@SetFavorit:

; 844  : 				favorite.MountOnArrival = false;

  00438	c6 46 73 00	 mov	 BYTE PTR [esi+115], 0
$LN2@SetFavorit:

; 845  : 			}
; 846  : 		}
; 847  : 
; 848  : 		if (favorite.MountOnArrival && favorite.Path.find ("\\\\") == 0 && favorite.Path.find ("Volume{") == string::npos)

  0043c	80 7e 73 00	 cmp	 BYTE PTR [esi+115], 0
  00440	74 39		 je	 SHORT $LN1@SetFavorit
  00442	6a 02		 push	 2
  00444	6a 00		 push	 0
  00446	68 00 00 00 00	 push	 OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
  0044b	8b ce		 mov	 ecx, esi
  0044d	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00452	85 c0		 test	 eax, eax
  00454	75 25		 jne	 SHORT $LN1@SetFavorit
  00456	6a 07		 push	 7
  00458	50		 push	 eax
  00459	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  0045e	8b ce		 mov	 ecx, esi
  00460	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00465	83 f8 ff	 cmp	 eax, -1
  00468	75 11		 jne	 SHORT $LN1@SetFavorit

; 849  : 		{
; 850  : 			Error ("FAVORITE_ARRIVAL_MOUNT_NETWORK_PATH_ERR");

  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HPPIJBMN@FAVORITE_ARRIVAL_MOUNT_NETWORK_P@
  0046f	e8 00 00 00 00	 call	 _Error
  00474	83 c4 04	 add	 esp, 4

; 851  : 			favorite.MountOnArrival = false;

  00477	c6 46 73 00	 mov	 BYTE PTR [esi+115], 0
$LN1@SetFavorit:

; 852  : 		}
; 853  : 	}

  0047b	8b 8c 24 f8 08
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+2308]
  00482	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00489	59		 pop	 ecx
  0048a	5f		 pop	 edi
  0048b	5d		 pop	 ebp
  0048c	5b		 pop	 ebx
  0048d	8b 8c 24 e4 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2292]
  00494	33 cc		 xor	 ecx, esp
  00496	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0049b	81 c4 f4 08 00
	00		 add	 esp, 2292		; 000008f4H
  004a1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$0:
  00000	8d 8d b8 f7 ff
	ff		 lea	 ecx, DWORD PTR $T135857[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$1:
  0000b	8d 8d 64 f7 ff
	ff		 lea	 ecx, DWORD PTR $T135858[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$2:
  00016	8d 8d 80 f7 ff
	ff		 lea	 ecx, DWORD PTR $T135861[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$4:
  00021	8d 8d d4 f7 ff
	ff		 lea	 ecx, DWORD PTR $T135863[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$5:
  0002c	8d 8d 48 f7 ff
	ff		 lea	 ecx, DWORD PTR $T135864[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z$6:
  00037	8d 8d 2c f7 ff
	ff		 lea	 ecx, DWORD PTR $T135867[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 82 0c f7 ff
	ff		 lea	 eax, DWORD PTR [edx-2292]
  0004c	8b 8a 08 f7 ff
	ff		 mov	 ecx, DWORD PTR [edx-2296]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z ENDP ; CipherShed::SetFavoriteVolume
PUBLIC	?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00001	33 c0		 xor	 eax, eax
  00003	57		 push	 edi

; 1104 : 		if (_Capacity == 0)

  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR __Capacity$[esp+4]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00010	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00013	3b f8		 cmp	 edi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 ff 22 22 22
	02		 cmp	 edi, 35791394		; 02222222H
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	8b cf		 mov	 ecx, edi
  00034	c1 e1 04	 shl	 ecx, 4
  00037	2b cf		 sub	 ecx, edi
  00039	83 c4 08	 add	 esp, 8
  0003c	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  0003f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00042	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00045	5f		 pop	 edi
  00046	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 1113 : 			}
; 1114 : 		return (true);

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 1115 : 		}

  0004c	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::FavoriteVolume>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::construct
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z ; std::swap<CipherShed::FavoriteVolume>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z$0
__ehfuncinfo$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
__Tmp$120485 = -136					; size = 120
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z PROC ; std::swap<CipherShed::FavoriteVolume>, COMDAT

; 17   : 	{	// exchange values stored at _Left and _Right

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 78	 mov	 DWORD PTR __$ArrayPad$[esp+136], eax
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c4		 xor	 eax, esp
  00025	50		 push	 eax
  00026	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+148]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR __Left$[esp+144]
  0003a	8b bc 24 9c 00
	00 00		 mov	 edi, DWORD PTR __Right$[esp+144]

; 18   : 	if (&_Left != &_Right)

  00041	3b f7		 cmp	 esi, edi
  00043	74 32		 je	 SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

  00045	56		 push	 esi
  00046	8d 4c 24 10	 lea	 ecx, DWORD PTR __Tmp$120485[esp+152]
  0004a	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z

; 21   : 
; 22   : 		_Left = _Right;

  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+160], 0
  0005d	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z

; 23   : 		_Right = _Tmp;

  00062	8d 44 24 0c	 lea	 eax, DWORD PTR __Tmp$120485[esp+148]
  00066	50		 push	 eax
  00067	8b cf		 mov	 ecx, edi
  00069	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z

; 24   : 		}

  0006e	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Tmp$120485[esp+148]
  00072	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
$LN1@swap:

; 25   : 	}

  00077	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+148]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b 4c 24 78	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  0008c	33 cc		 xor	 ecx, esp
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	81 c4 88 00 00
	00		 add	 esp, 136		; 00000088H
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR __Tmp$120485[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 82 7c ff ff
	ff		 lea	 eax, DWORD PTR [edx-132]
  00015	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	83 c0 08	 add	 eax, 8
  00025	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::swap<CipherShed::FavoriteVolume>
PUBLIC	??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN1@Destroy_ra
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 235  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T137120 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$137117 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 46		 jbe	 SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$137117[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T137120[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_fil:
  0005d	4f		 dec	 edi
  0005e	83 c6 78	 add	 esi, 120		; 00000078H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_fil
$LL3@Uninit_fil:

; 407  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil:

; 409  : 	_CATCH_END
; 410  : 	}

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN35@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$137117[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T137120[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z PROC ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 15		 je	 SHORT $LN1@Fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 f1		 jne	 SHORT $LL3@Fill
  00022	5b		 pop	 ebx
$LN1@Fill:
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 3160 : 	}

  00025	c3		 ret	 0
??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ENDP ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1d		 je	 SHORT $LN8@Copy_opt
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	83 c7 78	 add	 edi, 120		; 00000078H
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL3@Copy_opt

; 2473 : 	return (_Dest);

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2474 : 	}

  0002a	c3		 ret	 0
$LN8@Copy_opt:

; 2473 : 	return (_Dest);

  0002b	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx

; 2474 : 	}

  00031	c3		 ret	 0
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T137195 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$137192 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$137192[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T137195[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop:
  0005b	83 c6 78	 add	 esi, 120		; 00000078H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 c7 78	 add	 edi, 120		; 00000078H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop
__catch$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop
$LL3@Uninit_cop:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$137192[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T137195[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T137232 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T137232[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN72@erase@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@4
$LN72@erase@4:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@4
$LN22@erase@4:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@4:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@4
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@4:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 23		 je	 SHORT $LN1@erase@4

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00059	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00067	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@4:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  0006a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006c	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00070	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  00074	5f		 pop	 edi
  00075	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00078	89 08		 mov	 DWORD PTR [eax], ecx
  0007a	5e		 pop	 esi

; 807  : 		}

  0007b	83 c4 08	 add	 esp, 8
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 1d		 je	 SHORT $LN7@Copy_backw
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

  00013	83 ee 78	 sub	 esi, 120		; 00000078H
  00016	83 ef 78	 sub	 edi, 120		; 00000078H
  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL2@Copy_backw

; 2677 : 	return (_Dest);

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2678 : 	}

  0002a	c3		 ret	 0
$LN7@Copy_backw:

; 2677 : 	return (_Dest);

  0002b	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx

; 2678 : 	}

  00031	c3		 ret	 0
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T137461 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$137467 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@2:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$137467[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T137461[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@2
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop@2:
  0005b	83 c6 78	 add	 esi, 120		; 00000078H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 c7 78	 add	 edi, 120		; 00000078H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop@2
$LL3@Uninit_cop@2:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@2:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$137467[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T137461[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector
$LN13@vector:
  00038	33 c0		 xor	 eax, eax
$LN14@vector:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@2
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@2:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@2
  0003a	5b		 pop	 ebx
$LN1@clear@2:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$0
__unwindtable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$2
__ehfuncinfo$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	68 80 00 00 00	 push	 128			; 00000080H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	8b f0		 mov	 esi, eax
  00037	83 c4 04	 add	 esp, 4
  0003a	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00044	85 f6		 test	 esi, esi
  00046	74 05		 je	 SHORT $LN27@Buynode@2
  00048	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@2:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	85 c0		 test	 eax, eax
  00052	74 05		 je	 SHORT $LN37@Buynode@2
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@2:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00059	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  0005c	52		 push	 edx
  0005d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
  00066	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00069	8b c6		 mov	 eax, esi

; 1209 : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@2:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
PUBLIC	??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN5@Destroy_ra@2
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@2:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 226  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T137917 = -4						; size = 1
__Cat$137921 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T137917[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T137917[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$137921[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z PROC ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 15		 je	 SHORT $LN11@fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 f1		 jne	 SHORT $LL13@fill
  00022	5b		 pop	 ebx
$LN11@fill:
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 3188 : 	}

  00025	c3		 ret	 0
??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ENDP ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  0000c	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Dest$[esp+12]
  00010	8b cf		 mov	 ecx, edi
  00012	2b ce		 sub	 ecx, esi
  00014	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00019	f7 e9		 imul	 ecx
  0001b	03 d1		 add	 edx, ecx
  0001d	c1 fa 06	 sar	 edx, 6
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	8b c8		 mov	 ecx, eax
  00029	c1 e1 04	 shl	 ecx, 4
  0002c	2b c8		 sub	 ecx, eax
  0002e	8d 2c cb	 lea	 ebp, DWORD PTR [ebx+ecx*8]

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00031	3b f7		 cmp	 esi, edi
  00033	74 12		 je	 SHORT $LN14@Copy_opt@2
  00035	2b de		 sub	 ebx, esi
$LL9@Copy_opt@2:
  00037	56		 push	 esi
  00038	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  0003b	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  00040	83 c6 78	 add	 esi, 120		; 00000078H
  00043	3b f7		 cmp	 esi, edi
  00045	75 f0		 jne	 SHORT $LL9@Copy_opt@2
$LN14@Copy_opt@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 2486 : 	return _Result;

  00049	8b c5		 mov	 eax, ebp
  0004b	5d		 pop	 ebp
  0004c	5b		 pop	 ebx

; 2487 : 	}

  0004d	c3		 ret	 0
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T137982 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$137986 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$137986[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T137982[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T137982[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T138039 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$138042 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$138042[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T138039[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T138039[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Last$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __First$[esp+12]
  0000c	8b ce		 mov	 ecx, esi
  0000e	2b cf		 sub	 ecx, edi
  00010	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest$[esp+12]
  00014	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00019	f7 e9		 imul	 ecx
  0001b	03 d1		 add	 edx, ecx
  0001d	c1 fa 06	 sar	 edx, 6
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	8b c8		 mov	 ecx, eax
  00029	c1 e1 04	 shl	 ecx, 4
  0002c	2b c8		 sub	 ecx, eax
  0002e	03 c9		 add	 ecx, ecx
  00030	03 c9		 add	 ecx, ecx
  00032	03 c9		 add	 ecx, ecx
  00034	8b dd		 mov	 ebx, ebp
  00036	2b d9		 sub	 ebx, ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00038	3b fe		 cmp	 edi, esi
  0003a	74 14		 je	 SHORT $LN13@Copy_backw@2
  0003c	2b ee		 sub	 ebp, esi
  0003e	8b ff		 npad	 2
$LL8@Copy_backw@2:
  00040	83 ee 78	 sub	 esi, 120		; 00000078H
  00043	56		 push	 esi
  00044	8d 0c 2e	 lea	 ecx, DWORD PTR [esi+ebp]
  00047	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0004c	3b f7		 cmp	 esi, edi
  0004e	75 f0		 jne	 SHORT $LL8@Copy_backw@2
$LN13@Copy_backw@2:
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5d		 pop	 ebp

; 2690 : 	return _Result;

  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx

; 2691 : 	}

  00056	c3		 ret	 0
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z
_TEXT	SEGMENT
$T138085 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$138090 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$138090[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T138085[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T138085[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN7@Destroy
  0000e	8b ff		 npad	 2
$LL9@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL9@Destroy
$LN7@Destroy:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1120 : 		}

  00020	c2 08 00	 ret	 8
?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 23		 je	 SHORT $LN22@Tidy@3
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 0e		 je	 SHORT $LN10@Tidy@3
$LL12@Tidy@3:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0001a	83 c6 78	 add	 esi, 120		; 00000078H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 f2		 jne	 SHORT $LL12@Tidy@3
$LN10@Tidy@3:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00021	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 04	 add	 esp, 4
  0002d	5f		 pop	 edi
$LN22@Tidy@3:
  0002e	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  0002f	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00036	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0003d	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00044	5b		 pop	 ebx

; 1135 : 		}

  00045	c3		 ret	 0
?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z
_TEXT	SEGMENT
$T138360 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$138364 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$138364[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T138360[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T138360[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b ce		 mov	 ecx, esi
  0002c	83 c4 18	 add	 esp, 24			; 00000018H
  0002f	c1 e1 04	 shl	 ecx, 4
  00032	2b ce		 sub	 ecx, esi
  00034	8d 04 cf	 lea	 eax, DWORD PTR [edi+ecx*8]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z
_TEXT	SEGMENT
$T138386 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$138392 = 12					; size = 1
$T138388 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z PROC ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$138392[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T138388[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T138386[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T138386[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ENDP ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z
_TEXT	SEGMENT
$T138447 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$138451 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$138451[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T138447[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T138447[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T138544 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$138548 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$138548[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T138544[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T138544[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T138565 = -4						; size = 1
__Cat$138570 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T138565[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T138565[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$138570[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
$T138615 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$138619 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$138619[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T138615[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T138615[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T138640 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$121666 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert
$LN41@Insert:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert
$LN89@Insert:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert
$LN66@Insert:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert
$LN88@Insert:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert
$LN30@Insert:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$121666[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$121666[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$121666[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T138640[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert
$LN1@Insert:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
PUBLIC	??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 560  : 		}

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
$T138970 = -4						; size = 1
$T138972 = 8						; size = 1
__Cat$138974 = 8					; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase, COMDAT
; _this$ = ecx

; 1017 : 		{	// erase element at where

  00000	51		 push	 ecx

; 1018 : 		_STDEXT unchecked_copy(_VEC_ITER_BASE(_Where) + 1, _Mylast,
; 1019 : 			_VEC_ITER_BASE(_Where));

  00001	8b 54 24 08	 mov	 edx, DWORD PTR $T138972[esp]
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$138974[esp+12]
  0000e	c6 44 24 0c 00	 mov	 BYTE PTR $T138970[esp+16], 0
  00013	8b 44 24 0c	 mov	 eax, DWORD PTR $T138970[esp+16]
  00017	50		 push	 eax
  00018	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  0001c	51		 push	 ecx
  0001d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	83 c0 78	 add	 eax, 120		; 00000078H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 1020 : 		_Destroy(_Mylast - 1, _Mylast);

  0002c	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0002f	8d 7b 88	 lea	 edi, DWORD PTR [ebx-120]
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	3b fb		 cmp	 edi, ebx
  00037	74 15		 je	 SHORT $LN23@erase@5
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL25@erase@5:
  00040	8b cf		 mov	 ecx, edi
  00042	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00047	83 c7 78	 add	 edi, 120		; 00000078H
  0004a	3b fb		 cmp	 edi, ebx
  0004c	75 f2		 jne	 SHORT $LL25@erase@5
$LN23@erase@5:

; 1021 : 		--_Mylast;

  0004e	83 46 10 88	 add	 DWORD PTR [esi+16], -120 ; ffffff88H

; 1022 : 		return (_Make_iter(_Where));

  00052	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+16]
  00056	8b 7c 24 14	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+12]
  0005a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00063	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00066	77 04		 ja	 SHORT $LN42@erase@5
  00068	3b c1		 cmp	 eax, ecx
  0006a	76 09		 jbe	 SHORT $LN41@erase@5
$LN42@erase@5:
  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00071	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+16]
$LN41@erase@5:
  00075	8b 16		 mov	 edx, DWORD PTR [esi]
  00077	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0007a	89 17		 mov	 DWORD PTR [edi], edx
  0007c	8b c7		 mov	 eax, edi
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx

; 1023 : 		}

  00081	59		 pop	 ecx
  00082	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
_TEXT	ENDS
PUBLIC	?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z
_TEXT	SEGMENT
$T139469 = -4						; size = 1
__Cat$139474 = 8					; size = 1
$T139471 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@6
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@6
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@6
$LN11@erase@6:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@6:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@6
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@6
$LN30@erase@6:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@6:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@6
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@6
$LN47@erase@6:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@6:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4c		 je	 SHORT $LN89@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T139469[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T139469[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$139474[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T139471[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 0f		 je	 SHORT $LN75@erase@6
  0008f	90		 npad	 1
$LL77@erase@6:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00097	83 c7 78	 add	 edi, 120		; 00000078H
  0009a	3b fd		 cmp	 edi, ebp
  0009c	75 f2		 jne	 SHORT $LL77@erase@6
$LN75@erase@6:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  0009e	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a2	5d		 pop	 ebp
  000a3	5f		 pop	 edi
  000a4	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000a9	59		 pop	 ecx
  000aa	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@6:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000af	8b c3		 mov	 eax, ebx
  000b1	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b2	59		 pop	 ecx
  000b3	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
_TEXT	ENDS
PUBLIC	??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z
_TEXT	SEGMENT
$T139692 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$139696 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$139696[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T139692[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T139692[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z
_TEXT	SEGMENT
$T139754 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$139757 = 16					; size = 1
$T139717 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z PROC ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$139757[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T139717[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T139754[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T139754[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ENDP ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T139929 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T140070 = 8						; size = 1
__Cat$140074 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@2
$LN19@vector@2:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00049	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0004c	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0004f	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00054	f7 e9		 imul	 ecx
  00056	03 d1		 add	 edx, ecx
  00058	c1 fa 06	 sar	 edx, 6
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
  00062	50		 push	 eax
  00063	8b ce		 mov	 ecx, esi
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
  00071	84 c0		 test	 al, al
  00073	74 45		 je	 SHORT $LN8@vector@2

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  00075	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0007c	89 45 ec	 mov	 DWORD PTR $T139929[ebp], eax
  0007f	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  00082	76 05		 jbe	 SHORT $LN49@vector@2
  00084	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN49@vector@2:
  00089	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  0008c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0008f	76 05		 jbe	 SHORT $LN66@vector@2
  00091	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN66@vector@2:
  00096	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00099	c6 45 08 00	 mov	 BYTE PTR $T140070[ebp], 0
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR $T140070[ebp]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Cat$140074[ebp]
  000a3	51		 push	 ecx
  000a4	52		 push	 edx
  000a5	8b 55 ec	 mov	 edx, DWORD PTR $T139929[ebp]
  000a8	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000ab	51		 push	 ecx
  000ac	50		 push	 eax
  000ad	52		 push	 edx
  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
  000b4	83 c4 18	 add	 esp, 24			; 00000018H
  000b7	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@2:

; 507  : 			_CATCH_END
; 508  : 		}

  000ba	8b c6		 mov	 eax, esi
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
__catch$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 506  : 			_RERAISE;

  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN99@vector@2:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T140104 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T140104[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00020	5e		 pop	 esi
  00021	c3		 ret	 0
??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T140157 = -8						; size = 8
?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@3
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@3:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@3
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@3:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T140157[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$2
__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$7
__unwindtable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ncopied$120035 = -40					; size = 4
_this$GSCopy$ = -36					; size = 4
__Newvec$120033 = -32					; size = 4
tv557 = -28						; size = 4
__Cat$140708 = -28					; size = 1
__Cat$140533 = -28					; size = 1
__Whereoff$120034 = -28					; size = 4
$T140704 = -24						; size = 1
$T140529 = -24						; size = 1
__Val$GSCopy$ = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$120058 = 0					; size = 120
__Tmp$120048 = 120					; size = 120
__$ArrayPad$ = 240					; size = 4
__Where$ = 252						; size = 8
__Count$ = 260						; size = 4
__Val$ = 264						; size = 4
?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 0c ff
	ff ff		 lea	 ebp, DWORD PTR [esp-244]
  00008	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 f0 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 e8	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 dc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 05		 jne	 SHORT $LN31@Insert_n

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
  00054	eb 1b		 jmp	 SHORT $LN32@Insert_n
$LN31@Insert_n:
  00056	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00059	2b c8		 sub	 ecx, eax
  0005b	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00060	f7 e9		 imul	 ecx
  00062	03 d1		 add	 edx, ecx
  00064	c1 fa 06	 sar	 edx, 6
  00067	8b c2		 mov	 eax, edx
  00069	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006c	03 c2		 add	 eax, edx
  0006e	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN32@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  00071	8b bd 04 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00077	85 ff		 test	 edi, edi
  00079	0f 84 24 03 00
	00		 je	 $LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  0007f	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00082	8b cb		 mov	 ecx, ebx
  00084	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00087	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0008c	f7 e9		 imul	 ecx
  0008e	03 d1		 add	 edx, ecx
  00090	c1 fa 06	 sar	 edx, 6
  00093	8b c2		 mov	 eax, edx
  00095	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00098	03 c2		 add	 eax, edx
  0009a	b9 22 22 22 02	 mov	 ecx, 35791394		; 02222222H
  0009f	2b c8		 sub	 ecx, eax
  000a1	3b cf		 cmp	 ecx, edi
  000a3	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  000a5	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  000aa	8b 4d ec	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000ad	03 c7		 add	 eax, edi
  000af	3b c8		 cmp	 ecx, eax
  000b1	0f 83 9f 01 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000b7	8b d1		 mov	 edx, ecx
  000b9	d1 ea		 shr	 edx, 1
  000bb	bb 22 22 22 02	 mov	 ebx, 35791394		; 02222222H
  000c0	2b da		 sub	 ebx, edx
  000c2	3b d9		 cmp	 ebx, ecx
  000c4	73 0c		 jae	 SHORT $LN17@Insert_n
  000c6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Capacity$[ebp], 0
  000cd	8b 4d ec	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000d0	eb 05		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  000d2	03 ca		 add	 ecx, edx
  000d4	89 4d ec	 mov	 DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  000d7	3b c8		 cmp	 ecx, eax
  000d9	73 05		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  000db	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
  000de	8b c8		 mov	 ecx, eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000e0	6a 00		 push	 0
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000e8	8b 9d 00 01 00
	00		 mov	 ebx, DWORD PTR __Where$[ebp+4]
  000ee	2b 5e 0c	 sub	 ebx, DWORD PTR [esi+12]
  000f1	8b c8		 mov	 ecx, eax
  000f3	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000f8	f7 eb		 imul	 ebx
  000fa	03 d3		 add	 edx, ebx
  000fc	c1 fa 06	 sar	 edx, 6
  000ff	8b da		 mov	 ebx, edx

; 1175 : 			int _Ncopied = 0;

  00101	33 c0		 xor	 eax, eax
  00103	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00106	03 da		 add	 ebx, edx

; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  00108	8b 55 e8	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  0010b	89 45 d8	 mov	 DWORD PTR __Ncopied$120035[ebp], eax
  0010e	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00111	83 c4 08	 add	 esp, 8
  00114	8b c3		 mov	 eax, ebx
  00116	c1 e0 04	 shl	 eax, 4
  00119	52		 push	 edx
  0011a	89 4d e0	 mov	 DWORD PTR __Newvec$120033[ebp], ecx
  0011d	2b c3		 sub	 eax, ebx
  0011f	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00122	57		 push	 edi
  00123	51		 push	 ecx
  00124	8b ce		 mov	 ecx, esi
  00126	89 5d e4	 mov	 DWORD PTR __Whereoff$120034[ebp], ebx
  00129	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  0012e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00131	c6 45 e8 00	 mov	 BYTE PTR $T140529[ebp], 0
  00135	8b 55 e8	 mov	 edx, DWORD PTR $T140529[ebp]
  00138	52		 push	 edx
  00139	8b 55 e4	 mov	 edx, DWORD PTR __Cat$140533[ebp]
  0013c	52		 push	 edx
  0013d	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00143	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00146	51		 push	 ecx
  00147	8b 4d e0	 mov	 ecx, DWORD PTR __Newvec$120033[ebp]
  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	50		 push	 eax
  0014d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR __Ncopied$120035[ebp], 1
  00154	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  00159	8b 55 e0	 mov	 edx, DWORD PTR __Newvec$120033[ebp]
  0015c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0015f	03 df		 add	 ebx, edi
  00161	8b cb		 mov	 ecx, ebx
  00163	c1 e1 04	 shl	 ecx, 4
  00166	83 c4 18	 add	 esp, 24			; 00000018H
  00169	2b cb		 sub	 ecx, ebx
  0016b	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  0016e	c6 45 e8 00	 mov	 BYTE PTR $T140704[ebp], 0
  00172	8b 55 e8	 mov	 edx, DWORD PTR $T140704[ebp]
  00175	52		 push	 edx
  00176	8b 55 e4	 mov	 edx, DWORD PTR __Cat$140708[ebp]
  00179	52		 push	 edx
  0017a	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0017d	52		 push	 edx
  0017e	51		 push	 ecx
  0017f	50		 push	 eax
  00180	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00186	50		 push	 eax
  00187	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR __Ncopied$120035[ebp], 2
  0018e	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00193	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00196	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00199	2b cb		 sub	 ecx, ebx
  0019b	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  001a0	f7 e9		 imul	 ecx
  001a2	03 d1		 add	 edx, ecx
  001a4	c1 fa 06	 sar	 edx, 6
  001a7	8b ca		 mov	 ecx, edx
  001a9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001ac	03 ca		 add	 ecx, edx
  001ae	83 c4 18	 add	 esp, 24			; 00000018H
  001b1	03 f9		 add	 edi, ecx

; 1195 : 			if (_Myfirst != 0)

  001b3	85 db		 test	 ebx, ebx
  001b5	74 18		 je	 SHORT $LN115@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  001b7	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001ba	52		 push	 edx
  001bb	53		 push	 ebx
  001bc	8b ce		 mov	 ecx, esi
  001be	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001cc	83 c4 04	 add	 esp, 4
$LN115@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001cf	8b 45 ec	 mov	 eax, DWORD PTR __Capacity$[ebp]
  001d2	8b c8		 mov	 ecx, eax
  001d4	c1 e1 04	 shl	 ecx, 4
  001d7	2b c8		 sub	 ecx, eax
  001d9	8b 45 e0	 mov	 eax, DWORD PTR __Newvec$120033[ebp]
  001dc	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 1206 : 			_Mylast = _Newvec + _Count;

  001df	8b cf		 mov	 ecx, edi
  001e1	c1 e1 04	 shl	 ecx, 4
  001e4	2b cf		 sub	 ecx, edi
  001e6	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001e9	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  001ec	89 56 10	 mov	 DWORD PTR [esi+16], edx

; 1207 : 			_Myfirst = _Newvec;

  001ef	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001f2	e9 ac 01 00 00	 jmp	 $LN1@Insert_n
__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001f7	8b 5d d8	 mov	 ebx, DWORD PTR __Ncopied$120035[ebp]
  001fa	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001fd	8b 75 e4	 mov	 esi, DWORD PTR __Whereoff$120034[ebp]
  00200	8b 7d e0	 mov	 edi, DWORD PTR __Newvec$120033[ebp]
  00203	7e 14		 jle	 SHORT $LN7@Insert_n
  00205	8b c6		 mov	 eax, esi
  00207	c1 e0 04	 shl	 eax, 4
  0020a	2b c6		 sub	 eax, esi
  0020c	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  0020f	51		 push	 ecx
  00210	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00213	57		 push	 edi
  00214	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

  00219	85 db		 test	 ebx, ebx
  0021b	7e 27		 jle	 SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  0021d	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00223	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00226	8b c8		 mov	 ecx, eax
  00228	c1 e1 04	 shl	 ecx, 4
  0022b	2b c8		 sub	 ecx, eax
  0022d	8b c6		 mov	 eax, esi
  0022f	8d 14 cf	 lea	 edx, DWORD PTR [edi+ecx*8]
  00232	c1 e0 04	 shl	 eax, 4
  00235	2b c6		 sub	 eax, esi
  00237	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  0023a	52		 push	 edx
  0023b	51		 push	 ecx
  0023c	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0023f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00244	57		 push	 edi
  00245	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0024a	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0024d	6a 00		 push	 0
  0024f	6a 00		 push	 0
  00251	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00256	2b 9d 00 01 00
	00		 sub	 ebx, DWORD PTR __Where$[ebp+4]
  0025c	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00261	f7 eb		 imul	 ebx
  00263	03 d3		 add	 edx, ebx
  00265	c1 fa 06	 sar	 edx, 6
  00268	8b c2		 mov	 eax, edx
  0026a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0026d	03 c2		 add	 eax, edx
  0026f	3b c7		 cmp	 eax, edi
  00271	0f 83 c6 00 00
	00		 jae	 $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00277	8b 4d e8	 mov	 ecx, DWORD PTR __Val$GSCopy$[ebp]
  0027a	51		 push	 ecx
  0027b	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$120048[ebp]
  0027e	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00283	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00289	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0028c	8b df		 mov	 ebx, edi
  0028e	c1 e3 04	 shl	 ebx, 4
  00291	2b df		 sub	 ebx, edi
  00293	03 db		 add	 ebx, ebx
  00295	03 db		 add	 ebx, ebx
  00297	03 db		 add	 ebx, ebx
  00299	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
  0029c	52		 push	 edx
  0029d	51		 push	 ecx
  0029e	50		 push	 eax
  0029f	8b ce		 mov	 ecx, esi
  002a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002a8	e8 00 00 00 00	 call	 ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  002ad	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  002b0	2b 8d 00 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  002b6	8d 55 78	 lea	 edx, DWORD PTR __Tmp$120048[ebp]
  002b9	52		 push	 edx
  002ba	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002bf	f7 e9		 imul	 ecx
  002c1	03 d1		 add	 edx, ecx
  002c3	c1 fa 06	 sar	 edx, 6
  002c6	8b c2		 mov	 eax, edx
  002c8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cb	03 c2		 add	 eax, edx
  002cd	2b f8		 sub	 edi, eax
  002cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  002d2	57		 push	 edi
  002d3	50		 push	 eax
  002d4	8b ce		 mov	 ecx, esi
  002d6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002da	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002df	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002e2	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002e5	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002eb	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$120048[ebp]
  002ee	51		 push	 ecx
  002ef	2b f3		 sub	 esi, ebx
  002f1	56		 push	 esi
  002f2	52		 push	 edx
  002f3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002fa	e8 00 00 00 00	 call	 ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
  002ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  00302	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$120048[ebp]

; 1233 : 		else

  00305	e9 94 00 00 00	 jmp	 $LN122@Insert_n
__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  0030a	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR __Count$[ebp]
  00310	8b c1		 mov	 eax, ecx
  00312	c1 e0 04	 shl	 eax, 4
  00315	2b c1		 sub	 eax, ecx
  00317	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0031a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0031d	03 c0		 add	 eax, eax
  0031f	03 c0		 add	 eax, eax
  00321	03 c0		 add	 eax, eax
  00323	03 d0		 add	 edx, eax
  00325	52		 push	 edx
  00326	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0032c	03 c2		 add	 eax, edx
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 1221 : 			_RERAISE;

  00334	6a 00		 push	 0
  00336	6a 00		 push	 0
  00338	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  0033d	8b 45 e8	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00340	50		 push	 eax
  00341	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$120058[ebp]
  00344	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

  00349	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  0034c	8b df		 mov	 ebx, edi
  0034e	c1 e3 04	 shl	 ebx, 4
  00351	2b df		 sub	 ebx, edi
  00353	03 db		 add	 ebx, ebx
  00355	03 db		 add	 ebx, ebx
  00357	50		 push	 eax
  00358	8b f8		 mov	 edi, eax
  0035a	03 db		 add	 ebx, ebx
  0035c	50		 push	 eax
  0035d	2b fb		 sub	 edi, ebx
  0035f	57		 push	 edi
  00360	8b ce		 mov	 ecx, esi
  00362	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00369	89 45 e4	 mov	 DWORD PTR tv557[ebp], eax
  0036c	e8 00 00 00 00	 call	 ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00371	8b 4d e4	 mov	 ecx, DWORD PTR tv557[ebp]
  00374	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0037a	51		 push	 ecx
  0037b	57		 push	 edi
  0037c	52		 push	 edx
  0037d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00380	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00385	8d 45 00	 lea	 eax, DWORD PTR __Tmp$120058[ebp]
  00388	50		 push	 eax
  00389	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  0038f	03 d8		 add	 ebx, eax
  00391	53		 push	 ebx
  00392	50		 push	 eax
  00393	e8 00 00 00 00	 call	 ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
  00398	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0039b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$120058[ebp]
$LN122@Insert_n:
  0039e	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
$LN1@Insert_n:

; 1250 : 		}

  003a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ad	59		 pop	 ecx
  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b7	33 cd		 xor	 ecx, ebp
  003b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003be	81 c5 f4 00 00
	00		 add	 ebp, 244		; 000000f4H
  003c4	8b e5		 mov	 esp, ebp
  003c6	5d		 pop	 ebp
  003c7	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$4:
  00000	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$120048[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$5:
  00008	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$120058[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 8a fc 00 00
	00		 mov	 ecx, DWORD PTR [edx+252]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n
PUBLIC	??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherS'
	DB	'hed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Fo'
	DB	'rEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF
$LN12@ContainerF:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF
$LN29@ContainerF:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@24
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@24
$LN19@operator@24:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@24
$LN15@operator@24:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@24:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@24
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@24:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	83 46 04 78	 add	 DWORD PTR [esi+4], 120	; 00000078H

; 126  : 		return (*this);

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 127  : 		}

  0002e	c3		 ret	 0
??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next
$LN21@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next
$LN17@Next:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next:
  00029	83 46 2c 78	 add	 DWORD PTR [esi+44], 120	; 00000078H
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00024	74 09		 je	 SHORT $LN18@scalar@7
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$LN18@scalar@7:
  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T141034 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T141463 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@2
$LN28@list@2:
  00042	33 c0		 xor	 eax, eax
$LN29@list@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T141034[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T141463[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T141034[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@2:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv317 = 8						; size = 4
$T141523 = 8						; size = 1
__Cat$141528 = 8					; size = 1
$T141525 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 67 01 00
	00		 je	 $LN47@operator@25

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0001d	f7 e9		 imul	 ecx
  0001f	03 d1		 add	 edx, ecx
  00021	55		 push	 ebp
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b ea		 mov	 ebp, edx
  00027	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  0002a	03 ea		 add	 ebp, edx
  0002c	75 0f		 jne	 SHORT $LN8@operator@25

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  00035	5d		 pop	 ebp
  00036	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi

; 599  : 		}

  0003a	c2 04 00	 ret	 4
$LN8@operator@25:

; 573  : 			else if (_Right.size() <= size())

  0003d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00040	53		 push	 ebx
  00041	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00044	2b cb		 sub	 ecx, ebx
  00046	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0004b	f7 e9		 imul	 ecx
  0004d	03 d1		 add	 edx, ecx
  0004f	c1 fa 06	 sar	 edx, 6
  00052	8b ca		 mov	 ecx, edx
  00054	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00057	03 ca		 add	 ecx, edx
  00059	3b e9		 cmp	 ebp, ecx
  0005b	77 63		 ja	 SHORT $LN6@operator@25

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  0005d	c6 44 24 14 00	 mov	 BYTE PTR $T141523[esp+12], 0
  00062	8b 44 24 14	 mov	 eax, DWORD PTR $T141523[esp+12]
  00066	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$141528[esp+12]
  0006a	8b 54 24 14	 mov	 edx, DWORD PTR $T141525[esp+12]
  0006e	50		 push	 eax
  0006f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00072	51		 push	 ecx
  00073	52		 push	 edx
  00074	53		 push	 ebx
  00075	50		 push	 eax
  00076	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00082	83 c4 18	 add	 esp, 24			; 00000018H
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00091	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00094	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00099	f7 e9		 imul	 ecx
  0009b	03 d1		 add	 edx, ecx
  0009d	c1 fa 06	 sar	 edx, 6
  000a0	8b c2		 mov	 eax, edx
  000a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a5	03 c2		 add	 eax, edx
  000a7	8b d0		 mov	 edx, eax
  000a9	c1 e2 04	 shl	 edx, 4
  000ac	2b d0		 sub	 edx, eax
  000ae	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b1	5b		 pop	 ebx
  000b2	5d		 pop	 ebp
  000b3	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000b6	5f		 pop	 edi
  000b7	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000ba	8b c6		 mov	 eax, esi
  000bc	5e		 pop	 esi

; 599  : 		}

  000bd	c2 04 00	 ret	 4
$LN6@operator@25:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000c0	85 db		 test	 ebx, ebx
  000c2	75 04		 jne	 SHORT $LN38@operator@25
  000c4	33 c0		 xor	 eax, eax
  000c6	eb 1e		 jmp	 SHORT $LN39@operator@25
$LN38@operator@25:
  000c8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000cb	2b d3		 sub	 edx, ebx
  000cd	89 54 24 14	 mov	 DWORD PTR tv317[esp+12], edx
  000d1	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000d6	f7 ea		 imul	 edx
  000d8	03 54 24 14	 add	 edx, DWORD PTR tv317[esp+12]
  000dc	c1 fa 06	 sar	 edx, 6
  000df	8b c2		 mov	 eax, edx
  000e1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e4	03 c2		 add	 eax, edx
$LN39@operator@25:
  000e6	3b e8		 cmp	 ebp, eax
  000e8	77 34		 ja	 SHORT $LN4@operator@25

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000ea	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000ed	8b d1		 mov	 edx, ecx
  000ef	c1 e2 04	 shl	 edx, 4
  000f2	2b d1		 sub	 edx, ecx
  000f4	8d 2c d0	 lea	 ebp, DWORD PTR [eax+edx*8]

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000f7	53		 push	 ebx
  000f8	55		 push	 ebp
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ff	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00102	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	50		 push	 eax
  00109	51		 push	 ecx
  0010a	55		 push	 ebp
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
  00112	5b		 pop	 ebx
  00113	5d		 pop	 ebp
  00114	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00117	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00118	8b c6		 mov	 eax, esi
  0011a	5e		 pop	 esi

; 599  : 		}

  0011b	c2 04 00	 ret	 4
$LN4@operator@25:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0011e	85 db		 test	 ebx, ebx
  00120	74 18		 je	 SHORT $LN42@operator@25

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00122	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00125	50		 push	 eax
  00126	53		 push	 ebx
  00127	8b ce		 mov	 ecx, esi
  00129	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0012e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00137	83 c4 04	 add	 esp, 4
$LN42@operator@25:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  0013a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0013d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00140	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00145	f7 e9		 imul	 ecx
  00147	03 d1		 add	 edx, ecx
  00149	c1 fa 06	 sar	 edx, 6
  0014c	8b c2		 mov	 eax, edx
  0014e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00151	03 c2		 add	 eax, edx
  00153	50		 push	 eax
  00154	8b ce		 mov	 ecx, esi
  00156	e8 00 00 00 00	 call	 ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
  0015b	84 c0		 test	 al, al
  0015d	74 16		 je	 SHORT $LN46@operator@25

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0015f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00162	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00165	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00168	50		 push	 eax
  00169	51		 push	 ecx
  0016a	52		 push	 edx
  0016b	8b ce		 mov	 ecx, esi
  0016d	e8 00 00 00 00	 call	 ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
  00172	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@25:
  00175	5b		 pop	 ebx
  00176	5d		 pop	 ebp
$LN47@operator@25:
  00177	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00178	8b c6		 mov	 eax, esi
  0017a	5e		 pop	 esi

; 599  : 		}

  0017b	c2 04 00	 ret	 4
??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
_TEXT	ENDS
PUBLIC	?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Tmp$141758 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000e	8b cb		 mov	 ecx, ebx
  00010	2b cf		 sub	 ecx, edi
  00012	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 06	 sar	 edx, 6
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	75 04		 jne	 SHORT $LN3@insert
  00027	33 ff		 xor	 edi, edi
  00029	eb 35		 jmp	 SHORT $LN4@insert
$LN3@insert:
  0002b	3b fb		 cmp	 edi, ebx
  0002d	76 05		 jbe	 SHORT $LN13@insert
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert:
  00034	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 04		 je	 SHORT $LN29@insert
  0003e	3b c8		 cmp	 ecx, eax
  00040	74 05		 je	 SHORT $LN28@insert
$LN29@insert:
  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert:
  00047	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  0004b	2b cf		 sub	 ecx, edi
  0004d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00052	f7 e9		 imul	 ecx
  00054	03 d1		 add	 edx, ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0005e	03 fa		 add	 edi, edx
$LN4@insert:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  00060	8b 4c 24 24	 mov	 ecx, DWORD PTR __Val$[esp+16]
  00064	8b 54 24 20	 mov	 edx, DWORD PTR __Where$[esp+20]
  00068	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+16]
  0006c	51		 push	 ecx
  0006d	6a 01		 push	 1
  0006f	52		 push	 edx
  00070	50		 push	 eax
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00078	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0007b	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  0007e	76 05		 jbe	 SHORT $LN43@insert
  00080	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert:
  00085	8b 36		 mov	 esi, DWORD PTR [esi]
  00087	57		 push	 edi
  00088	8d 4c 24 10	 lea	 ecx, DWORD PTR __Tmp$141758[esp+24]
  0008c	89 74 24 10	 mov	 DWORD PTR __Tmp$141758[esp+24], esi
  00090	89 5c 24 14	 mov	 DWORD PTR __Tmp$141758[esp+28], ebx
  00094	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
  00099	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  0009d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Tmp$141758[esp+20]
  000a1	8b 54 24 10	 mov	 edx, DWORD PTR __Tmp$141758[esp+24]
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000ac	5b		 pop	 ebx

; 879  : 		}

  000ad	83 c4 08	 add	 esp, 8
  000b0	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T141762 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T141762[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShe'
	DB	'd@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForE'
	DB	'ach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next@2
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next@2
$LN25@Next@2:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next@2
$LN19@Next@2:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next@2:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next@2
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next@2:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@2
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd@2
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd@2
$LN10@IsNotEnd@2:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd@2:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@2
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@2:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00034	74 09		 je	 SHORT $LN30@scalar@8
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN30@scalar@8:
  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@		; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__DeleteMenu@12:PROC
;	COMDAT ??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@
CONST	SEGMENT
??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@ DB 09H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$7
	DD	01H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$10
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?FillFavoriteVolumesMenu@CipherShed@@YAXXZ
_TEXT	SEGMENT
$T142130 = -232						; size = 4
_favorite$117985 = -228					; size = 4
tv1181 = -224						; size = 4
_i$ = -220						; size = 4
tv1186 = -216						; size = 4
_flags$117993 = -212					; size = 4
$T142127 = -208						; size = 28
$T142123 = -208						; size = 28
$T142117 = -208						; size = 28
$T142126 = -180						; size = 28
$T142122 = -180						; size = 28
$T142118 = -180						; size = 28
tv1223 = -152						; size = 4
_$S4$117981 = -148					; size = 48
$T142124 = -100						; size = 28
$T142119 = -100						; size = 28
$T142125 = -72						; size = 28
$T142116 = -72						; size = 28
_menuText$117995 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?FillFavoriteVolumesMenu@CipherShed@@YAXXZ PROC		; CipherShed::FillFavoriteVolumesMenu, COMDAT

; 411  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 d8 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+232], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+252]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 412  : 		while (DeleteMenu (FavoriteVolumesMenu, 7, MF_BYPOSITION)) { }
; 413  : 
; 414  : 		if (FavoriteVolumes.empty())
; 415  : 			return;
; 416  : 
; 417  : 		AppendMenu (FavoriteVolumesMenu, MF_SEPARATOR, 0, NULL);
; 418  : 		
; 419  : 		int i = 0;
; 420  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  0003b	33 ed		 xor	 ebp, ebp
  0003d	33 db		 xor	 ebx, ebx

; 441  : 		}

  0003f	89 5c 24 14	 mov	 DWORD PTR $T142130[esp+252], ebx
  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteMenu@12
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL14@FillFavori:
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A ; CipherShed::FavoriteVolumesMenu
  00055	68 00 04 00 00	 push	 1024			; 00000400H
  0005a	6a 07		 push	 7
  0005c	50		 push	 eax
  0005d	ff d6		 call	 esi
  0005f	85 c0		 test	 eax, eax
  00061	75 ed		 jne	 SHORT $LL14@FillFavori
  00063	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16
  00069	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12
  0006f	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00074	f7 e9		 imul	 ecx
  00076	03 d1		 add	 edx, ecx
  00078	c1 fa 06	 sar	 edx, 6
  0007b	8b ca		 mov	 ecx, edx
  0007d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00080	03 ca		 add	 ecx, edx
  00082	0f 84 56 05 00
	00		 je	 $LN514@FillFavori
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A ; CipherShed::FavoriteVolumesMenu
  0008e	55		 push	 ebp
  0008f	55		 push	 ebp
  00090	68 00 08 00 00	 push	 2048			; 00000800H
  00095	52		 push	 edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0009c	8d 44 24 68	 lea	 eax, DWORD PTR _$S4$117981[esp+252]
  000a0	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  000a5	50		 push	 eax
  000a6	89 6c 24 28	 mov	 DWORD PTR _i$[esp+260], ebp
  000aa	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  000af	83 c4 08	 add	 esp, 8
  000b2	8b 54 24 68	 mov	 edx, DWORD PTR _$S4$117981[esp+252]
  000b6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b9	8d 4c 24 68	 lea	 ecx, DWORD PTR _$S4$117981[esp+252]
  000bd	89 ac 24 f8 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+260], ebp
  000c4	ff d0		 call	 eax
  000c6	84 c0		 test	 al, al
  000c8	0f 84 c0 04 00
	00		 je	 $LN9@FillFavori
  000ce	8b ff		 npad	 2
$LL11@FillFavori:

; 412  : 		while (DeleteMenu (FavoriteVolumesMenu, 7, MF_BYPOSITION)) { }
; 413  : 
; 414  : 		if (FavoriteVolumes.empty())
; 415  : 			return;
; 416  : 
; 417  : 		AppendMenu (FavoriteVolumesMenu, MF_SEPARATOR, 0, NULL);
; 418  : 		
; 419  : 		int i = 0;
; 420  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  000d0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _$S4$117981[esp+292]
  000d7	3b c5		 cmp	 eax, ebp
  000d9	75 10		 jne	 SHORT $LN523@FillFavori
  000db	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000e0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _$S4$117981[esp+292]
  000e7	3b c5		 cmp	 eax, ebp
  000e9	74 04		 je	 SHORT $LN65@FillFavori
$LN523@FillFavori:
  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	eb 02		 jmp	 SHORT $LN66@FillFavori
$LN65@FillFavori:
  000ef	33 c9		 xor	 ecx, ecx
$LN66@FillFavori:
  000f1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR _$S4$117981[esp+296]
  000f8	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000fb	72 0c		 jb	 SHORT $LN53@FillFavori
  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00102	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR _$S4$117981[esp+296]
$LN53@FillFavori:
  00109	80 7c 24 6d 00	 cmp	 BYTE PTR _$S4$117981[esp+257], 0
  0010e	89 44 24 18	 mov	 DWORD PTR _favorite$117985[esp+252], eax
  00112	0f 94 c1	 sete	 cl
  00115	88 4c 24 6d	 mov	 BYTE PTR _$S4$117981[esp+257], cl
  00119	84 c9		 test	 cl, cl
  0011b	0f 84 4b 04 00
	00		 je	 $LN10@FillFavori
  00121	8d 48 68	 lea	 ecx, DWORD PTR [eax+104]
  00124	8d 70 71	 lea	 esi, DWORD PTR [eax+113]

; 437  : 			}
; 438  : 
; 439  : 			AppendMenuW (FavoriteVolumesMenu, flags, TC_FAVORITE_MENU_CMD_ID_OFFSET + i++,
; 440  : 				(menuText + L"\t" + SingleStringToWide (favorite.MountPoint).substr (0, 2)).c_str());

  00127	83 c0 1c	 add	 eax, 28			; 0000001cH
  0012a	89 4c 24 24	 mov	 DWORD PTR tv1186[esp+252], ecx
  0012e	89 74 24 1c	 mov	 DWORD PTR tv1181[esp+252], esi
  00132	89 44 24 64	 mov	 DWORD PTR tv1223[esp+252], eax
  00136	eb 0c		 jmp	 SHORT $LN69@FillFavori
  00138	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL526@FillFavori:

; 412  : 		while (DeleteMenu (FavoriteVolumesMenu, 7, MF_BYPOSITION)) { }
; 413  : 
; 414  : 		if (FavoriteVolumes.empty())
; 415  : 			return;
; 416  : 
; 417  : 		AppendMenu (FavoriteVolumesMenu, MF_SEPARATOR, 0, NULL);
; 418  : 		
; 419  : 		int i = 0;
; 420  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  00140	8b 74 24 1c	 mov	 esi, DWORD PTR tv1181[esp+252]
$LN69@FillFavori:

; 421  : 		{
; 422  : 			UINT flags = MF_STRING;
; 423  : 
; 424  : 			if (favorite.DisconnectedDevice)

  00144	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00147	89 6c 24 28	 mov	 DWORD PTR _flags$117993[esp+252], ebp
  0014b	74 08		 je	 SHORT $LN5@FillFavori

; 425  : 				flags |= MF_GRAYED;

  0014d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR _flags$117993[esp+252], 1
$LN5@FillFavori:

; 426  : 
; 427  : 			wstring menuText = SingleStringToWide (favorite.Path);

  00155	8b 54 24 18	 mov	 edx, DWORD PTR _favorite$117985[esp+252]
  00159	52		 push	 edx
  0015a	8d 84 24 d4 00
	00 00		 lea	 eax, DWORD PTR _menuText$117995[esp+256]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00167	83 c4 08	 add	 esp, 8

; 428  : 			if (favorite.DisconnectedDevice)

  0016a	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0016d	c6 84 24 f8 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+260], 1
  00175	0f 84 c9 01 00
	00		 je	 $LN525@FillFavori

; 429  : 				menuText = favorite.Label.empty() ? wstring (L"(") + GetString ("FAVORITE_DISCONNECTED_DEV") + L")" : L"";

  0017b	8b 4c 24 24	 mov	 ecx, DWORD PTR tv1186[esp+252]
  0017f	39 29		 cmp	 DWORD PTR [ecx], ebp
  00181	0f 85 94 00 00
	00		 jne	 $LN19@FillFavori
  00187	6a 01		 push	 1
  00189	33 d2		 xor	 edx, edx
  0018b	be 07 00 00 00	 mov	 esi, 7
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI?$AA?$AA@
  00195	8d 8c 24 bc 00
	00 00		 lea	 ecx, DWORD PTR $T142116[esp+260]
  0019c	89 b4 24 d4 00
	00 00		 mov	 DWORD PTR $T142116[esp+284], esi
  001a3	89 ac 24 d0 00
	00 00		 mov	 DWORD PTR $T142116[esp+280], ebp
  001aa	66 89 94 24 c0
	00 00 00	 mov	 WORD PTR $T142116[esp+264], dx
  001b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001b7	83 cb 01	 or	 ebx, 1
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OGKIEBOP@FAVORITE_DISCONNECTED_DEV?$AA@
  001bf	c6 84 24 fc 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+264], 2
  001c7	89 5c 24 18	 mov	 DWORD PTR $T142130[esp+256], ebx
  001cb	e8 00 00 00 00	 call	 _GetString
  001d0	50		 push	 eax
  001d1	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR $T142116[esp+260]
  001d8	50		 push	 eax
  001d9	8d 4c 24 38	 lea	 ecx, DWORD PTR $T142117[esp+264]
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001e3	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@
  001e8	50		 push	 eax
  001e9	8d 54 24 60	 lea	 edx, DWORD PTR $T142118[esp+276]
  001ed	83 cb 02	 or	 ebx, 2
  001f0	52		 push	 edx
  001f1	c7 84 24 14 01
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+288], 3
  001fc	89 5c 24 30	 mov	 DWORD PTR $T142130[esp+280], ebx
  00200	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00205	83 c4 1c	 add	 esp, 28			; 0000001cH
  00208	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+260], 4
  00213	83 cb 04	 or	 ebx, 4
  00216	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  00219	eb 4a		 jmp	 SHORT $LN528@FillFavori
$LN19@FillFavori:
  0021b	55		 push	 ebp
  0021c	33 c0		 xor	 eax, eax
  0021e	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00223	8d 8c 24 a0 00
	00 00		 lea	 ecx, DWORD PTR $T142119[esp+260]
  0022a	c7 84 24 b8 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T142119[esp+284], 7
  00235	89 ac 24 b4 00
	00 00		 mov	 DWORD PTR $T142119[esp+280], ebp
  0023c	66 89 84 24 a4
	00 00 00	 mov	 WORD PTR $T142119[esp+264], ax
  00244	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00249	bf 08 00 00 00	 mov	 edi, 8
  0024e	8d 84 24 98 00
	00 00		 lea	 eax, DWORD PTR $T142119[esp+252]
  00255	c7 84 24 f8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+260], 5
  00260	0b df		 or	 ebx, edi
  00262	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
$LN528@FillFavori:
  00265	6a ff		 push	 -1
  00267	55		 push	 ebp
  00268	50		 push	 eax
  00269	8d 8c 24 dc 00
	00 00		 lea	 ecx, DWORD PTR _menuText$117995[esp+264]
  00270	89 5c 24 20	 mov	 DWORD PTR $T142130[esp+264], ebx
  00274	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00279	f6 c3 08	 test	 bl, 8
  0027c	74 38		 je	 SHORT $LN181@FillFavori
  0027e	83 e3 f7	 and	 ebx, -9			; fffffff7H
  00281	89 5c 24 14	 mov	 DWORD PTR $T142130[esp+252], ebx
  00285	39 bc 24 b0 00
	00 00		 cmp	 DWORD PTR $T142119[esp+276], edi
  0028c	72 10		 jb	 SHORT $LN173@FillFavori
  0028e	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR $T142119[esp+256]
  00295	51		 push	 ecx
  00296	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0029b	83 c4 04	 add	 esp, 4
$LN173@FillFavori:
  0029e	33 d2		 xor	 edx, edx
  002a0	89 b4 24 b0 00
	00 00		 mov	 DWORD PTR $T142119[esp+276], esi
  002a7	89 ac 24 ac 00
	00 00		 mov	 DWORD PTR $T142119[esp+272], ebp
  002ae	66 89 94 24 9c
	00 00 00	 mov	 WORD PTR $T142119[esp+256], dx
$LN181@FillFavori:
  002b6	f6 c3 04	 test	 bl, 4
  002b9	74 29		 je	 SHORT $LN209@FillFavori
  002bb	83 e3 fb	 and	 ebx, -5			; fffffffbH
  002be	89 5c 24 14	 mov	 DWORD PTR $T142130[esp+252], ebx
  002c2	39 7c 24 60	 cmp	 DWORD PTR $T142118[esp+276], edi
  002c6	72 0d		 jb	 SHORT $LN201@FillFavori
  002c8	8b 44 24 4c	 mov	 eax, DWORD PTR $T142118[esp+256]
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d2	83 c4 04	 add	 esp, 4
$LN201@FillFavori:
  002d5	33 c9		 xor	 ecx, ecx
  002d7	89 74 24 60	 mov	 DWORD PTR $T142118[esp+276], esi
  002db	89 6c 24 5c	 mov	 DWORD PTR $T142118[esp+272], ebp
  002df	66 89 4c 24 4c	 mov	 WORD PTR $T142118[esp+256], cx
$LN209@FillFavori:
  002e4	f6 c3 02	 test	 bl, 2
  002e7	74 29		 je	 SHORT $LN237@FillFavori
  002e9	83 e3 fd	 and	 ebx, -3			; fffffffdH
  002ec	89 5c 24 14	 mov	 DWORD PTR $T142130[esp+252], ebx
  002f0	39 7c 24 44	 cmp	 DWORD PTR $T142117[esp+276], edi
  002f4	72 0d		 jb	 SHORT $LN229@FillFavori
  002f6	8b 54 24 30	 mov	 edx, DWORD PTR $T142117[esp+256]
  002fa	52		 push	 edx
  002fb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00300	83 c4 04	 add	 esp, 4
$LN229@FillFavori:
  00303	33 c0		 xor	 eax, eax
  00305	89 74 24 44	 mov	 DWORD PTR $T142117[esp+276], esi
  00309	89 6c 24 40	 mov	 DWORD PTR $T142117[esp+272], ebp
  0030d	66 89 44 24 30	 mov	 WORD PTR $T142117[esp+256], ax
$LN237@FillFavori:
  00312	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+260], 1
  0031d	f6 c3 01	 test	 bl, 1
  00320	74 2a		 je	 SHORT $LN257@FillFavori
  00322	83 e3 fe	 and	 ebx, -2			; fffffffeH
  00325	89 5c 24 14	 mov	 DWORD PTR $T142130[esp+252], ebx
  00329	39 bc 24 cc 00
	00 00		 cmp	 DWORD PTR $T142116[esp+276], edi
  00330	72 1a		 jb	 SHORT $LN257@FillFavori
  00332	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR $T142116[esp+256]
  00339	51		 push	 ecx
  0033a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0033f	83 c4 04	 add	 esp, 4
  00342	eb 08		 jmp	 SHORT $LN257@FillFavori
$LN525@FillFavori:
  00344	bf 08 00 00 00	 mov	 edi, 8
  00349	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
$LN257@FillFavori:

; 430  : 
; 431  : 			if (!favorite.Label.empty())

  0034c	8b 54 24 24	 mov	 edx, DWORD PTR tv1186[esp+252]
  00350	39 2a		 cmp	 DWORD PTR [edx], ebp
  00352	0f 84 b0 00 00
	00		 je	 $LN329@FillFavori

; 432  : 			{
; 433  : 				if (favorite.DisconnectedDevice)

  00358	8b 44 24 1c	 mov	 eax, DWORD PTR tv1181[esp+252]
  0035c	80 38 00	 cmp	 BYTE PTR [eax], 0
  0035f	0f 84 8c 00 00
	00		 je	 $LN2@FillFavori

; 434  : 					menuText = favorite.Label + L" " + menuText;

  00365	8b 4c 24 18	 mov	 ecx, DWORD PTR _favorite$117985[esp+252]
  00369	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  0036e	83 c1 54	 add	 ecx, 84			; 00000054H
  00371	51		 push	 ecx
  00372	8d 54 24 50	 lea	 edx, DWORD PTR $T142122[esp+260]
  00376	52		 push	 edx
  00377	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0037c	8d 8c 24 dc 00
	00 00		 lea	 ecx, DWORD PTR _menuText$117995[esp+264]
  00383	51		 push	 ecx
  00384	50		 push	 eax
  00385	8d 54 24 40	 lea	 edx, DWORD PTR $T142123[esp+272]
  00389	52		 push	 edx
  0038a	c6 84 24 10 01
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+284], 6
  00392	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00397	83 c4 18	 add	 esp, 24			; 00000018H
  0039a	6a ff		 push	 -1
  0039c	55		 push	 ebp
  0039d	50		 push	 eax
  0039e	8d 8c 24 dc 00
	00 00		 lea	 ecx, DWORD PTR _menuText$117995[esp+264]
  003a5	c6 84 24 04 01
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+272], 7
  003ad	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  003b2	39 7c 24 44	 cmp	 DWORD PTR $T142123[esp+276], edi
  003b6	72 0d		 jb	 SHORT $LN291@FillFavori
  003b8	8b 44 24 30	 mov	 eax, DWORD PTR $T142123[esp+256]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003c2	83 c4 04	 add	 esp, 4
$LN291@FillFavori:
  003c5	33 c9		 xor	 ecx, ecx
  003c7	89 74 24 44	 mov	 DWORD PTR $T142123[esp+276], esi
  003cb	89 6c 24 40	 mov	 DWORD PTR $T142123[esp+272], ebp
  003cf	66 89 4c 24 30	 mov	 WORD PTR $T142123[esp+256], cx
  003d4	c6 84 24 f8 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+260], 1
  003dc	39 7c 24 60	 cmp	 DWORD PTR $T142122[esp+276], edi
  003e0	72 26		 jb	 SHORT $LN329@FillFavori
  003e2	8b 54 24 4c	 mov	 edx, DWORD PTR $T142122[esp+256]
  003e6	52		 push	 edx
  003e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003ec	83 c4 04	 add	 esp, 4

; 435  : 				else

  003ef	eb 17		 jmp	 SHORT $LN329@FillFavori
$LN2@FillFavori:

; 436  : 					menuText = favorite.Label;

  003f1	8b 44 24 18	 mov	 eax, DWORD PTR _favorite$117985[esp+252]
  003f5	6a ff		 push	 -1
  003f7	55		 push	 ebp
  003f8	83 c0 54	 add	 eax, 84			; 00000054H
  003fb	50		 push	 eax
  003fc	8d 8c 24 dc 00
	00 00		 lea	 ecx, DWORD PTR _menuText$117995[esp+264]
  00403	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN329@FillFavori:

; 437  : 			}
; 438  : 
; 439  : 			AppendMenuW (FavoriteVolumesMenu, flags, TC_FAVORITE_MENU_CMD_ID_OFFSET + i++,
; 440  : 				(menuText + L"\t" + SingleStringToWide (favorite.MountPoint).substr (0, 2)).c_str());

  00408	8b 4c 24 64	 mov	 ecx, DWORD PTR tv1223[esp+252]
  0040c	51		 push	 ecx
  0040d	8d 94 24 9c 00
	00 00		 lea	 edx, DWORD PTR $T142124[esp+256]
  00414	52		 push	 edx
  00415	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0041a	83 c4 08	 add	 esp, 8
  0041d	6a 02		 push	 2
  0041f	55		 push	 ebp
  00420	8d 8c 24 bc 00
	00 00		 lea	 ecx, DWORD PTR $T142125[esp+260]
  00427	51		 push	 ecx
  00428	8b c8		 mov	 ecx, eax
  0042a	c6 84 24 04 01
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+272], 8
  00432	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  00437	8b f0		 mov	 esi, eax
  00439	68 00 00 00 00	 push	 OFFSET ??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@
  0043e	8d 94 24 d4 00
	00 00		 lea	 edx, DWORD PTR _menuText$117995[esp+256]
  00445	52		 push	 edx
  00446	8d 44 24 50	 lea	 eax, DWORD PTR $T142126[esp+260]
  0044a	50		 push	 eax
  0044b	c6 84 24 04 01
	00 00 09	 mov	 BYTE PTR __$EHRec$[esp+272], 9
  00453	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00458	56		 push	 esi
  00459	50		 push	 eax
  0045a	8d 4c 24 40	 lea	 ecx, DWORD PTR $T142127[esp+272]
  0045e	51		 push	 ecx
  0045f	c6 84 24 10 01
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+284], 10 ; 0000000aH
  00467	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0046c	83 c4 18	 add	 esp, 24			; 00000018H
  0046f	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00472	72 05		 jb	 SHORT $LN337@FillFavori
  00474	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00477	eb 03		 jmp	 SHORT $LN338@FillFavori
$LN337@FillFavori:
  00479	83 c0 04	 add	 eax, 4
$LN338@FillFavori:
  0047c	8b 74 24 20	 mov	 esi, DWORD PTR _i$[esp+252]
  00480	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A ; CipherShed::FavoriteVolumesMenu
  00486	50		 push	 eax
  00487	8b 44 24 2c	 mov	 eax, DWORD PTR _flags$117993[esp+256]
  0048b	8d 96 10 27 00
	00		 lea	 edx, DWORD PTR [esi+10000]
  00491	52		 push	 edx
  00492	50		 push	 eax
  00493	51		 push	 ecx
  00494	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuW@16
  0049a	46		 inc	 esi
  0049b	89 74 24 20	 mov	 DWORD PTR _i$[esp+252], esi
  0049f	39 7c 24 44	 cmp	 DWORD PTR $T142127[esp+276], edi
  004a3	72 0d		 jb	 SHORT $LN357@FillFavori
  004a5	8b 54 24 30	 mov	 edx, DWORD PTR $T142127[esp+256]
  004a9	52		 push	 edx
  004aa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004af	83 c4 04	 add	 esp, 4
$LN357@FillFavori:
  004b2	33 c0		 xor	 eax, eax
  004b4	be 07 00 00 00	 mov	 esi, 7
  004b9	89 74 24 44	 mov	 DWORD PTR $T142127[esp+276], esi
  004bd	89 6c 24 40	 mov	 DWORD PTR $T142127[esp+272], ebp
  004c1	66 89 44 24 30	 mov	 WORD PTR $T142127[esp+256], ax
  004c6	39 7c 24 60	 cmp	 DWORD PTR $T142126[esp+276], edi
  004ca	72 0d		 jb	 SHORT $LN385@FillFavori
  004cc	8b 4c 24 4c	 mov	 ecx, DWORD PTR $T142126[esp+256]
  004d0	51		 push	 ecx
  004d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004d6	83 c4 04	 add	 esp, 4
$LN385@FillFavori:
  004d9	33 d2		 xor	 edx, edx
  004db	89 74 24 60	 mov	 DWORD PTR $T142126[esp+276], esi
  004df	89 6c 24 5c	 mov	 DWORD PTR $T142126[esp+272], ebp
  004e3	66 89 54 24 4c	 mov	 WORD PTR $T142126[esp+256], dx
  004e8	39 bc 24 cc 00
	00 00		 cmp	 DWORD PTR $T142125[esp+276], edi
  004ef	72 10		 jb	 SHORT $LN413@FillFavori
  004f1	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR $T142125[esp+256]
  004f8	50		 push	 eax
  004f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004fe	83 c4 04	 add	 esp, 4
$LN413@FillFavori:
  00501	33 c9		 xor	 ecx, ecx
  00503	89 b4 24 cc 00
	00 00		 mov	 DWORD PTR $T142125[esp+276], esi
  0050a	89 ac 24 c8 00
	00 00		 mov	 DWORD PTR $T142125[esp+272], ebp
  00511	66 89 8c 24 b8
	00 00 00	 mov	 WORD PTR $T142125[esp+256], cx
  00519	39 bc 24 b0 00
	00 00		 cmp	 DWORD PTR $T142124[esp+276], edi
  00520	72 10		 jb	 SHORT $LN441@FillFavori
  00522	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR $T142124[esp+256]
  00529	52		 push	 edx
  0052a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0052f	83 c4 04	 add	 esp, 4
$LN441@FillFavori:

; 441  : 		}

  00532	c6 84 24 f8 00
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+260], 0
  0053a	39 bc 24 e8 00
	00 00		 cmp	 DWORD PTR _menuText$117995[esp+276], edi
  00541	72 10		 jb	 SHORT $LN469@FillFavori
  00543	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR _menuText$117995[esp+256]
  0054a	50		 push	 eax
  0054b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00550	83 c4 04	 add	 esp, 4
$LN469@FillFavori:
  00553	80 7c 24 6d 00	 cmp	 BYTE PTR _$S4$117981[esp+257], 0
  00558	c6 44 24 6c 01	 mov	 BYTE PTR _$S4$117981[esp+256], 1
  0055d	0f 94 c0	 sete	 al
  00560	88 44 24 6d	 mov	 BYTE PTR _$S4$117981[esp+257], al
  00564	84 c0		 test	 al, al
  00566	0f 85 d4 fb ff
	ff		 jne	 $LL526@FillFavori
$LN10@FillFavori:

; 412  : 		while (DeleteMenu (FavoriteVolumesMenu, 7, MF_BYPOSITION)) { }
; 413  : 
; 414  : 		if (FavoriteVolumes.empty())
; 415  : 			return;
; 416  : 
; 417  : 		AppendMenu (FavoriteVolumesMenu, MF_SEPARATOR, 0, NULL);
; 418  : 		
; 419  : 		int i = 0;
; 420  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  0056c	8b 54 24 68	 mov	 edx, DWORD PTR _$S4$117981[esp+252]
  00570	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00573	8d 4c 24 68	 lea	 ecx, DWORD PTR _$S4$117981[esp+252]
  00577	ff d0		 call	 eax
  00579	8b 54 24 68	 mov	 edx, DWORD PTR _$S4$117981[esp+252]
  0057d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00580	8d 4c 24 68	 lea	 ecx, DWORD PTR _$S4$117981[esp+252]
  00584	ff d0		 call	 eax
  00586	84 c0		 test	 al, al
  00588	0f 85 42 fb ff
	ff		 jne	 $LL11@FillFavori
$LN9@FillFavori:

; 441  : 		}

  0058e	8b 74 24 7c	 mov	 esi, DWORD PTR _$S4$117981[esp+272]
  00592	3b f5		 cmp	 esi, ebp
  00594	74 26		 je	 SHORT $LN504@FillFavori
  00596	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR _$S4$117981[esp+276]
  0059d	3b f7		 cmp	 esi, edi
  0059f	74 12		 je	 SHORT $LN492@FillFavori
$LL494@FillFavori:
  005a1	8b ce		 mov	 ecx, esi
  005a3	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  005a8	83 c6 78	 add	 esi, 120		; 00000078H
  005ab	3b f7		 cmp	 esi, edi
  005ad	75 f2		 jne	 SHORT $LL494@FillFavori
  005af	8b 74 24 7c	 mov	 esi, DWORD PTR _$S4$117981[esp+272]
$LN492@FillFavori:
  005b3	56		 push	 esi
  005b4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005b9	83 c4 04	 add	 esp, 4
$LN504@FillFavori:
  005bc	8b 4c 24 70	 mov	 ecx, DWORD PTR _$S4$117981[esp+260]
  005c0	51		 push	 ecx
  005c1	89 ac 24 80 00
	00 00		 mov	 DWORD PTR _$S4$117981[esp+276], ebp
  005c8	89 ac 24 84 00
	00 00		 mov	 DWORD PTR _$S4$117981[esp+280], ebp
  005cf	89 ac 24 88 00
	00 00		 mov	 DWORD PTR _$S4$117981[esp+284], ebp
  005d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005db	83 c4 04	 add	 esp, 4
$LN514@FillFavori:

; 442  : 	}

  005de	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+252]
  005e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005ec	59		 pop	 ecx
  005ed	5f		 pop	 edi
  005ee	5e		 pop	 esi
  005ef	5d		 pop	 ebp
  005f0	5b		 pop	 ebx
  005f1	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+232]
  005f8	33 cc		 xor	 ecx, esp
  005fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ff	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00605	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$117981[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$1:
  0000b	8d 4d d4	 lea	 ecx, DWORD PTR _menuText$117995[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$2:
  00013	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T142130[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 0f 00 00
	00		 je	 $LN24@FillFavori
  00022	83 a5 18 ff ff
	ff fe		 and	 DWORD PTR $T142130[ebp], -2 ; fffffffeH
  00029	8d 4d b8	 lea	 ecx, DWORD PTR $T142116[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN24@FillFavori:
  00031	c3		 ret	 0
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$3:
  00032	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T142130[ebp]
  00038	83 e0 02	 and	 eax, 2
  0003b	0f 84 12 00 00
	00		 je	 $LN26@FillFavori
  00041	83 a5 18 ff ff
	ff fd		 and	 DWORD PTR $T142130[ebp], -3 ; fffffffdH
  00048	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T142117[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN26@FillFavori:
  00053	c3		 ret	 0
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$4:
  00054	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T142130[ebp]
  0005a	83 e0 04	 and	 eax, 4
  0005d	0f 84 12 00 00
	00		 je	 $LN28@FillFavori
  00063	83 a5 18 ff ff
	ff fb		 and	 DWORD PTR $T142130[ebp], -5 ; fffffffbH
  0006a	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T142118[ebp]
  00070	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN28@FillFavori:
  00075	c3		 ret	 0
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$5:
  00076	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T142130[ebp]
  0007c	83 e0 08	 and	 eax, 8
  0007f	0f 84 0f 00 00
	00		 je	 $LN30@FillFavori
  00085	83 a5 18 ff ff
	ff f7		 and	 DWORD PTR $T142130[ebp], -9 ; fffffff7H
  0008c	8d 4d 9c	 lea	 ecx, DWORD PTR $T142119[ebp]
  0008f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN30@FillFavori:
  00094	c3		 ret	 0
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$6:
  00095	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T142122[ebp]
  0009b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$7:
  000a0	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T142123[ebp]
  000a6	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$8:
  000ab	8d 4d 9c	 lea	 ecx, DWORD PTR $T142124[ebp]
  000ae	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$9:
  000b3	8d 4d b8	 lea	 ecx, DWORD PTR $T142125[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ$10:
  000bb	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T142126[ebp]
  000c1	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ:
  000c6	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000ca	8d 82 14 ff ff
	ff		 lea	 eax, DWORD PTR [edx-236]
  000d0	8b 8a 10 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-240]
  000d6	33 c8		 xor	 ecx, eax
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	83 c0 10	 add	 eax, 16			; 00000010H
  000e0	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000e3	33 c8		 xor	 ecx, eax
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FillFavoriteVolumesMenu@CipherShed@@YAXXZ
  000ef	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FillFavoriteVolumesMenu@CipherShed@@YAXXZ ENDP		; CipherShed::FillFavoriteVolumesMenu
PUBLIC	__$ArrayPad$
EXTRN	_ListItemAdd:PROC
EXTRN	__imp__SendMessageA@16:PROC
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	SEGMENT
__unwindtable$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$1
__ehfuncinfo$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_$S5$118045 = -212					; size = 48
$T144168 = -164						; size = 28
_favorite$118049 = -136					; size = 120
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_favorites$ = 8						; size = 4
?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::FillListControl, COMDAT
; _favoriteListControl$ = ecx

; 446  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 c4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+212], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 dc 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+232]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b ac 24 ec 00
	00 00		 mov	 ebp, DWORD PTR _favorites$[esp+228]

; 447  : 		SendMessage (favoriteListControl, LVM_DELETEALLITEMS, 0, 0);

  00042	33 db		 xor	 ebx, ebx
  00044	53		 push	 ebx
  00045	53		 push	 ebx
  00046	8b f9		 mov	 edi, ecx
  00048	68 09 10 00 00	 push	 4105			; 00001009H
  0004d	57		 push	 edi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 448  : 
; 449  : 		int line = 0;
; 450  : 		foreach (const FavoriteVolume favorite, favorites)

  00054	8d 44 24 14	 lea	 eax, DWORD PTR _$S5$118045[esp+232]
  00058	55		 push	 ebp
  00059	50		 push	 eax
  0005a	33 f6		 xor	 esi, esi
  0005c	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  00061	83 c4 08	 add	 esp, 8
  00064	8b 54 24 14	 mov	 edx, DWORD PTR _$S5$118045[esp+232]
  00068	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006b	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S5$118045[esp+232]
  0006f	89 9c 24 e4 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+240], ebx
  00076	ff d0		 call	 eax
  00078	84 c0		 test	 al, al
  0007a	0f 84 ee 00 00
	00		 je	 $LN4@FillListCo@2
  00080	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00083	8d 6e 10	 lea	 ebp, DWORD PTR [esi+16]
$LL6@FillListCo@2:
  00086	8b 44 24 3c	 mov	 eax, DWORD PTR _$S5$118045[esp+272]
  0008a	85 c0		 test	 eax, eax
  0008c	75 0d		 jne	 SHORT $LN117@FillListCo@2
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00093	8b 44 24 3c	 mov	 eax, DWORD PTR _$S5$118045[esp+272]
  00097	85 c0		 test	 eax, eax
  00099	74 04		 je	 SHORT $LN34@FillListCo@2
$LN117@FillListCo@2:
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	eb 02		 jmp	 SHORT $LN35@FillListCo@2
$LN34@FillListCo@2:
  0009f	33 c0		 xor	 eax, eax
$LN35@FillListCo@2:
  000a1	8b 4c 24 40	 mov	 ecx, DWORD PTR _$S5$118045[esp+276]
  000a5	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a8	72 05		 jb	 SHORT $LN22@FillListCo@2
  000aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@FillListCo@2:
  000af	8b 54 24 40	 mov	 edx, DWORD PTR _$S5$118045[esp+276]
  000b3	52		 push	 edx
  000b4	8d 4c 24 64	 lea	 ecx, DWORD PTR _favorite$118049[esp+236]
  000b8	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  000bd	80 7c 24 19 00	 cmp	 BYTE PTR _$S5$118045[esp+237], 0
  000c2	88 9c 24 e4 00
	00 00		 mov	 BYTE PTR __$EHRec$[esp+240], bl
  000c9	0f 94 c0	 sete	 al
  000cc	88 44 24 19	 mov	 BYTE PTR _$S5$118045[esp+237], al
  000d0	84 c0		 test	 al, al
  000d2	74 65		 je	 SHORT $LN1@FillListCo@2
$LL38@FillListCo@2:

; 451  : 		{
; 452  : 			ListItemAdd (favoriteListControl, line, (char *) favorite.MountPoint.substr (0, 2).c_str());

  000d4	6a 02		 push	 2
  000d6	6a 00		 push	 0
  000d8	8d 44 24 4c	 lea	 eax, DWORD PTR $T144168[esp+240]
  000dc	50		 push	 eax
  000dd	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _favorite$118049[esp+272]
  000e4	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000e9	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  000ec	72 05		 jb	 SHORT $LN46@FillListCo@2
  000ee	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f1	eb 03		 jmp	 SHORT $LN47@FillListCo@2
$LN46@FillListCo@2:
  000f3	83 c0 04	 add	 eax, 4
$LN47@FillListCo@2:
  000f6	50		 push	 eax
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	e8 00 00 00 00	 call	 _ListItemAdd
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	39 6c 24 5c	 cmp	 DWORD PTR $T144168[esp+256], ebp
  00105	72 0d		 jb	 SHORT $LN64@FillListCo@2
  00107	8b 4c 24 48	 mov	 ecx, DWORD PTR $T144168[esp+236]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00111	83 c4 04	 add	 esp, 4
$LN64@FillListCo@2:

; 453  : 			FillListControlSubItems (favoriteListControl, line++, favorite);

  00114	57		 push	 edi
  00115	8d 4c 24 64	 lea	 ecx, DWORD PTR _favorite$118049[esp+236]
  00119	8b d6		 mov	 edx, esi
  0011b	e8 00 00 00 00	 call	 ?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z ; CipherShed::FillListControlSubItems
  00120	83 c4 04	 add	 esp, 4
  00123	03 f3		 add	 esi, ebx
  00125	80 7c 24 19 00	 cmp	 BYTE PTR _$S5$118045[esp+237], 0
  0012a	88 5c 24 18	 mov	 BYTE PTR _$S5$118045[esp+236], bl
  0012e	0f 94 c0	 sete	 al
  00131	88 44 24 19	 mov	 BYTE PTR _$S5$118045[esp+237], al
  00135	84 c0		 test	 al, al
  00137	75 9b		 jne	 SHORT $LL38@FillListCo@2
$LN1@FillListCo@2:

; 454  : 		}

  00139	8d 4c 24 60	 lea	 ecx, DWORD PTR _favorite$118049[esp+232]
  0013d	c6 84 24 e4 00
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+240], 0
  00145	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0014a	8b 54 24 14	 mov	 edx, DWORD PTR _$S5$118045[esp+232]
  0014e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00151	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S5$118045[esp+232]
  00155	ff d0		 call	 eax
  00157	8b 54 24 14	 mov	 edx, DWORD PTR _$S5$118045[esp+232]
  0015b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0015e	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S5$118045[esp+232]
  00162	ff d0		 call	 eax
  00164	84 c0		 test	 al, al
  00166	0f 85 1a ff ff
	ff		 jne	 $LL6@FillListCo@2

; 448  : 
; 449  : 		int line = 0;
; 450  : 		foreach (const FavoriteVolume favorite, favorites)

  0016c	33 db		 xor	 ebx, ebx
$LN4@FillListCo@2:

; 454  : 		}

  0016e	8b 74 24 28	 mov	 esi, DWORD PTR _$S5$118045[esp+252]
  00172	3b f3		 cmp	 esi, ebx
  00174	74 25		 je	 SHORT $LN99@FillListCo@2
  00176	8b 7c 24 2c	 mov	 edi, DWORD PTR _$S5$118045[esp+256]
  0017a	3b f7		 cmp	 esi, edi
  0017c	74 14		 je	 SHORT $LN87@FillListCo@2
  0017e	8b ff		 npad	 2
$LL89@FillListCo@2:
  00180	8b ce		 mov	 ecx, esi
  00182	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00187	83 c6 78	 add	 esi, 120		; 00000078H
  0018a	3b f7		 cmp	 esi, edi
  0018c	75 f2		 jne	 SHORT $LL89@FillListCo@2
  0018e	8b 74 24 28	 mov	 esi, DWORD PTR _$S5$118045[esp+252]
$LN87@FillListCo@2:
  00192	56		 push	 esi
  00193	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00198	83 c4 04	 add	 esp, 4
$LN99@FillListCo@2:
  0019b	8b 4c 24 1c	 mov	 ecx, DWORD PTR _$S5$118045[esp+240]
  0019f	51		 push	 ecx
  001a0	89 5c 24 2c	 mov	 DWORD PTR _$S5$118045[esp+256], ebx
  001a4	89 5c 24 30	 mov	 DWORD PTR _$S5$118045[esp+260], ebx
  001a8	89 5c 24 34	 mov	 DWORD PTR _$S5$118045[esp+264], ebx
  001ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b1	83 c4 04	 add	 esp, 4

; 455  : 	}

  001b4	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+232]
  001bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c2	59		 pop	 ecx
  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi
  001c5	5d		 pop	 ebp
  001c6	5b		 pop	 ebx
  001c7	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+212]
  001ce	33 cc		 xor	 ecx, esp
  001d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d5	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  001db	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0:
  00000	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$118045[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$1:
  0000b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _favorite$118049[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 28 ff ff
	ff		 lea	 eax, DWORD PTR [edx-216]
  00020	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::FillListControl
PUBLIC	?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CipherShed::GetFavoriteVolumeLabel
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2
__ehfuncinfo$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
_TEXT	SEGMENT
tv894 = -112						; size = 4
$T144602 = -112						; size = 4
_$S6$118078 = -108					; size = 48
_$S7$118106 = -60					; size = 48
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_volumePath$ = 12					; size = 4
?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z PROC ; CipherShed::GetFavoriteVolumeLabel, COMDAT

; 470  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 64	 sub	 esp, 100		; 00000064H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 78	 lea	 eax, DWORD PTR __$EHRec$[esp+132]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 471  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  00027	8d 44 24 18	 lea	 eax, DWORD PTR _$S6$118078[esp+132]
  0002b	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00030	33 ed		 xor	 ebp, ebp
  00032	50		 push	 eax
  00033	89 6c 24 1c	 mov	 DWORD PTR $T144602[esp+140], ebp
  00037	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0003c	83 c4 08	 add	 esp, 8
  0003f	8b 54 24 18	 mov	 edx, DWORD PTR _$S6$118078[esp+132]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S6$118078[esp+132]
  0004a	89 ac 24 80 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+140], ebp
  00051	ff d0		 call	 eax
  00053	84 c0		 test	 al, al
  00055	0f 84 e0 00 00
	00		 je	 $LN12@GetFavorit
  0005b	eb 03 8d 49 00	 npad	 5
$LL14@GetFavorit:
  00060	8b 44 24 40	 mov	 eax, DWORD PTR _$S6$118078[esp+172]
  00064	3b c5		 cmp	 eax, ebp
  00066	75 0d		 jne	 SHORT $LN385@GetFavorit
  00068	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0006d	8b 44 24 40	 mov	 eax, DWORD PTR _$S6$118078[esp+172]
  00071	3b c5		 cmp	 eax, ebp
  00073	74 04		 je	 SHORT $LN45@GetFavorit
$LN385@GetFavorit:
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	eb 02		 jmp	 SHORT $LN46@GetFavorit
$LN45@GetFavorit:
  00079	33 c0		 xor	 eax, eax
$LN46@GetFavorit:
  0007b	8b 7c 24 44	 mov	 edi, DWORD PTR _$S6$118078[esp+176]
  0007f	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00082	72 09		 jb	 SHORT $LN33@GetFavorit
  00084	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00089	8b 7c 24 44	 mov	 edi, DWORD PTR _$S6$118078[esp+176]
$LN33@GetFavorit:
  0008d	80 7c 24 1d 00	 cmp	 BYTE PTR _$S6$118078[esp+137], 0
  00092	0f 94 c3	 sete	 bl
  00095	88 5c 24 1d	 mov	 BYTE PTR _$S6$118078[esp+137], bl
  00099	84 db		 test	 bl, bl
  0009b	74 7c		 je	 SHORT $LN13@GetFavorit

; 472  : 		{
; 473  : 			if (favorite.Path == volumePath)

  0009d	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _volumePath$[esp+128]

; 478  : 		{
; 479  : 			if (favorite.Path == volumePath)

  000a4	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  000a7	8b 6a 14	 mov	 ebp, DWORD PTR [edx+20]
  000aa	89 4c 24 14	 mov	 DWORD PTR tv894[esp+132], ecx
  000ae	eb 07		 jmp	 SHORT $LN49@GetFavorit
$LL391@GetFavorit:

; 471  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  000b0	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _volumePath$[esp+128]
$LN49@GetFavorit:

; 472  : 		{
; 473  : 			if (favorite.Path == volumePath)

  000b7	83 7c 24 14 10	 cmp	 DWORD PTR tv894[esp+132], 16 ; 00000010H
  000bc	72 05		 jb	 SHORT $LN61@GetFavorit
  000be	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000c1	eb 03		 jmp	 SHORT $LN62@GetFavorit
$LN61@GetFavorit:
  000c3	83 c2 04	 add	 edx, 4
$LN62@GetFavorit:
  000c6	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  000c9	8b c6		 mov	 eax, esi
  000cb	3b c6		 cmp	 eax, esi
  000cd	73 00		 jae	 SHORT $LN63@GetFavorit
$LN63@GetFavorit:
  000cf	8b ce		 mov	 ecx, esi
  000d1	3b f5		 cmp	 esi, ebp
  000d3	72 02		 jb	 SHORT $LN68@GetFavorit
  000d5	8b cd		 mov	 ecx, ebp
$LN68@GetFavorit:
  000d7	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000db	72 05		 jb	 SHORT $LN75@GetFavorit
  000dd	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e0	eb 03		 jmp	 SHORT $LN76@GetFavorit
$LN75@GetFavorit:
  000e2	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN76@GetFavorit:
  000e5	51		 push	 ecx
  000e6	52		 push	 edx
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	85 c0		 test	 eax, eax
  000f2	75 11		 jne	 SHORT $LN386@GetFavorit
  000f4	3b f5		 cmp	 esi, ebp
  000f6	72 0d		 jb	 SHORT $LN386@GetFavorit
  000f8	3b f5		 cmp	 esi, ebp
  000fa	0f 95 c0	 setne	 al
  000fd	85 c0		 test	 eax, eax
  000ff	0f 84 dc 00 00
	00		 je	 $LN375@GetFavorit
$LN386@GetFavorit:

; 471  : 		foreach (const FavoriteVolume &favorite, FavoriteVolumes)

  00105	84 db		 test	 bl, bl
  00107	0f 94 c3	 sete	 bl
  0010a	c6 44 24 1c 01	 mov	 BYTE PTR _$S6$118078[esp+136], 1
  0010f	88 5c 24 1d	 mov	 BYTE PTR _$S6$118078[esp+137], bl
  00113	84 db		 test	 bl, bl
  00115	75 99		 jne	 SHORT $LL391@GetFavorit
  00117	33 ed		 xor	 ebp, ebp
$LN13@GetFavorit:
  00119	8b 54 24 18	 mov	 edx, DWORD PTR _$S6$118078[esp+132]
  0011d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00120	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S6$118078[esp+132]
  00124	ff d0		 call	 eax
  00126	8b 54 24 18	 mov	 edx, DWORD PTR _$S6$118078[esp+132]
  0012a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0012d	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S6$118078[esp+132]
  00131	ff d0		 call	 eax
  00133	84 c0		 test	 al, al
  00135	0f 85 25 ff ff
	ff		 jne	 $LL14@GetFavorit
$LN12@GetFavorit:

; 475  : 		}

  0013b	8b 74 24 2c	 mov	 esi, DWORD PTR _$S6$118078[esp+152]
  0013f	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+140], -1
  0014a	3b f5		 cmp	 esi, ebp
  0014c	74 23		 je	 SHORT $LN167@GetFavorit
  0014e	8b 7c 24 30	 mov	 edi, DWORD PTR _$S6$118078[esp+156]
  00152	3b f7		 cmp	 esi, edi
  00154	74 12		 je	 SHORT $LN155@GetFavorit
$LL157@GetFavorit:
  00156	8b ce		 mov	 ecx, esi
  00158	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0015d	83 c6 78	 add	 esi, 120		; 00000078H
  00160	3b f7		 cmp	 esi, edi
  00162	75 f2		 jne	 SHORT $LL157@GetFavorit
  00164	8b 74 24 2c	 mov	 esi, DWORD PTR _$S6$118078[esp+152]
$LN155@GetFavorit:
  00168	56		 push	 esi
  00169	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0016e	83 c4 04	 add	 esp, 4
$LN167@GetFavorit:
  00171	8b 44 24 20	 mov	 eax, DWORD PTR _$S6$118078[esp+140]
  00175	50		 push	 eax
  00176	89 6c 24 30	 mov	 DWORD PTR _$S6$118078[esp+156], ebp
  0017a	89 6c 24 34	 mov	 DWORD PTR _$S6$118078[esp+160], ebp
  0017e	89 6c 24 38	 mov	 DWORD PTR _$S6$118078[esp+164], ebp
  00182	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 476  : 
; 477  : 		foreach (const FavoriteVolume &favorite, SystemFavoriteVolumes)

  00187	8d 4c 24 4c	 lea	 ecx, DWORD PTR _$S7$118106[esp+136]
  0018b	68 00 00 00 00	 push	 OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00190	51		 push	 ecx
  00191	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _$S6$118078[esp+144], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00199	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	8b 54 24 48	 mov	 edx, DWORD PTR _$S7$118106[esp+132]
  001a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001a8	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S7$118106[esp+132]
  001ac	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+140], 1
  001b7	ff d0		 call	 eax
  001b9	84 c0		 test	 al, al
  001bb	0f 84 6b 01 00
	00		 je	 $LN5@GetFavorit
$LL7@GetFavorit:
  001c1	8b 44 24 70	 mov	 eax, DWORD PTR _$S7$118106[esp+172]
  001c5	3b c5		 cmp	 eax, ebp
  001c7	75 11		 jne	 SHORT $LN387@GetFavorit
  001c9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  001ce	8b 44 24 70	 mov	 eax, DWORD PTR _$S7$118106[esp+172]
  001d2	3b c5		 cmp	 eax, ebp
  001d4	0f 84 90 00 00
	00		 je	 $LN199@GetFavorit
$LN387@GetFavorit:
  001da	8b 00		 mov	 eax, DWORD PTR [eax]
  001dc	e9 8b 00 00 00	 jmp	 $LN200@GetFavorit
$LN375@GetFavorit:

; 474  : 				return favorite.Label;

  001e1	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  001e4	8b bc 24 88 00
	00 00		 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+128]
  001eb	33 c9		 xor	 ecx, ecx
  001ed	6a ff		 push	 -1
  001ef	51		 push	 ecx
  001f0	c7 47 18 07 00
	00 00		 mov	 DWORD PTR [edi+24], 7
  001f7	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  001fe	66 89 4f 04	 mov	 WORD PTR [edi+4], cx
  00202	50		 push	 eax
  00203	8b cf		 mov	 ecx, edi
  00205	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0020a	8b 74 24 2c	 mov	 esi, DWORD PTR _$S6$118078[esp+152]
  0020e	33 db		 xor	 ebx, ebx
  00210	3b f3		 cmp	 esi, ebx
  00212	74 27		 je	 SHORT $LN130@GetFavorit
  00214	8b 6c 24 30	 mov	 ebp, DWORD PTR _$S6$118078[esp+156]
  00218	3b f5		 cmp	 esi, ebp
  0021a	74 16		 je	 SHORT $LN118@GetFavorit
  0021c	8d 64 24 00	 npad	 4
$LL120@GetFavorit:
  00220	8b ce		 mov	 ecx, esi
  00222	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00227	83 c6 78	 add	 esi, 120		; 00000078H
  0022a	3b f5		 cmp	 esi, ebp
  0022c	75 f2		 jne	 SHORT $LL120@GetFavorit
  0022e	8b 74 24 2c	 mov	 esi, DWORD PTR _$S6$118078[esp+152]
$LN118@GetFavorit:
  00232	56		 push	 esi
  00233	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00238	83 c4 04	 add	 esp, 4
$LN130@GetFavorit:
  0023b	8b 54 24 20	 mov	 edx, DWORD PTR _$S6$118078[esp+140]
  0023f	52		 push	 edx
  00240	89 5c 24 30	 mov	 DWORD PTR _$S6$118078[esp+156], ebx
  00244	89 5c 24 34	 mov	 DWORD PTR _$S6$118078[esp+160], ebx
  00248	89 5c 24 38	 mov	 DWORD PTR _$S6$118078[esp+164], ebx
  0024c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00251	83 c4 04	 add	 esp, 4
  00254	8b c7		 mov	 eax, edi

; 484  : 	}

  00256	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  0025a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00261	59		 pop	 ecx
  00262	5f		 pop	 edi
  00263	5e		 pop	 esi
  00264	5d		 pop	 ebp
  00265	5b		 pop	 ebx
  00266	83 c4 70	 add	 esp, 112		; 00000070H
  00269	c3		 ret	 0

; 476  : 
; 477  : 		foreach (const FavoriteVolume &favorite, SystemFavoriteVolumes)

$LN199@GetFavorit:
  0026a	33 c0		 xor	 eax, eax
$LN200@GetFavorit:
  0026c	8b 7c 24 74	 mov	 edi, DWORD PTR _$S7$118106[esp+176]
  00270	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00273	72 09		 jb	 SHORT $LN187@GetFavorit
  00275	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0027a	8b 7c 24 74	 mov	 edi, DWORD PTR _$S7$118106[esp+176]
$LN187@GetFavorit:
  0027e	80 7c 24 4d 00	 cmp	 BYTE PTR _$S7$118106[esp+137], 0
  00283	0f 94 c3	 sete	 bl
  00286	88 5c 24 4d	 mov	 BYTE PTR _$S7$118106[esp+137], bl
  0028a	84 db		 test	 bl, bl
  0028c	74 7a		 je	 SHORT $LN6@GetFavorit

; 478  : 		{
; 479  : 			if (favorite.Path == volumePath)

  0028e	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _volumePath$[esp+128]
  00295	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00298	8b 6a 14	 mov	 ebp, DWORD PTR [edx+20]
  0029b	89 4c 24 14	 mov	 DWORD PTR tv894[esp+132], ecx
  0029f	eb 07		 jmp	 SHORT $LN203@GetFavorit
$LL390@GetFavorit:

; 476  : 
; 477  : 		foreach (const FavoriteVolume &favorite, SystemFavoriteVolumes)

  002a1	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _volumePath$[esp+128]
$LN203@GetFavorit:

; 478  : 		{
; 479  : 			if (favorite.Path == volumePath)

  002a8	83 7c 24 14 10	 cmp	 DWORD PTR tv894[esp+132], 16 ; 00000010H
  002ad	72 05		 jb	 SHORT $LN215@GetFavorit
  002af	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002b2	eb 03		 jmp	 SHORT $LN216@GetFavorit
$LN215@GetFavorit:
  002b4	83 c2 04	 add	 edx, 4
$LN216@GetFavorit:
  002b7	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  002ba	8b c6		 mov	 eax, esi
  002bc	3b c6		 cmp	 eax, esi
  002be	73 00		 jae	 SHORT $LN217@GetFavorit
$LN217@GetFavorit:
  002c0	8b ce		 mov	 ecx, esi
  002c2	3b f5		 cmp	 esi, ebp
  002c4	72 02		 jb	 SHORT $LN222@GetFavorit
  002c6	8b cd		 mov	 ecx, ebp
$LN222@GetFavorit:
  002c8	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  002cc	72 05		 jb	 SHORT $LN229@GetFavorit
  002ce	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  002d1	eb 03		 jmp	 SHORT $LN230@GetFavorit
$LN229@GetFavorit:
  002d3	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN230@GetFavorit:
  002d6	51		 push	 ecx
  002d7	52		 push	 edx
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  002de	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e1	85 c0		 test	 eax, eax
  002e3	75 11		 jne	 SHORT $LN388@GetFavorit
  002e5	3b f5		 cmp	 esi, ebp
  002e7	72 0d		 jb	 SHORT $LN388@GetFavorit
  002e9	3b f5		 cmp	 esi, ebp
  002eb	0f 95 c0	 setne	 al
  002ee	85 c0		 test	 eax, eax
  002f0	0f 84 a9 00 00
	00		 je	 $LN376@GetFavorit
$LN388@GetFavorit:

; 476  : 
; 477  : 		foreach (const FavoriteVolume &favorite, SystemFavoriteVolumes)

  002f6	84 db		 test	 bl, bl
  002f8	0f 94 c3	 sete	 bl
  002fb	c6 44 24 4c 01	 mov	 BYTE PTR _$S7$118106[esp+136], 1
  00300	88 5c 24 4d	 mov	 BYTE PTR _$S7$118106[esp+137], bl
  00304	84 db		 test	 bl, bl
  00306	75 99		 jne	 SHORT $LL390@GetFavorit
$LN6@GetFavorit:
  00308	8b 54 24 48	 mov	 edx, DWORD PTR _$S7$118106[esp+132]
  0030c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0030f	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S7$118106[esp+132]
  00313	ff d0		 call	 eax
  00315	8b 54 24 48	 mov	 edx, DWORD PTR _$S7$118106[esp+132]
  00319	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0031c	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S7$118106[esp+132]
  00320	ff d0		 call	 eax

; 478  : 		{
; 479  : 			if (favorite.Path == volumePath)

  00322	33 ed		 xor	 ebp, ebp
  00324	84 c0		 test	 al, al
  00326	0f 85 95 fe ff
	ff		 jne	 $LL7@GetFavorit
$LN5@GetFavorit:

; 481  : 		}

  0032c	8b 74 24 5c	 mov	 esi, DWORD PTR _$S7$118106[esp+152]
  00330	3b f5		 cmp	 esi, ebp
  00332	74 27		 je	 SHORT $LN321@GetFavorit
  00334	8b 7c 24 60	 mov	 edi, DWORD PTR _$S7$118106[esp+156]
  00338	3b f7		 cmp	 esi, edi
  0033a	74 16		 je	 SHORT $LN309@GetFavorit
  0033c	8d 64 24 00	 npad	 4
$LL311@GetFavorit:
  00340	8b ce		 mov	 ecx, esi
  00342	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00347	83 c6 78	 add	 esi, 120		; 00000078H
  0034a	3b f7		 cmp	 esi, edi
  0034c	75 f2		 jne	 SHORT $LL311@GetFavorit
  0034e	8b 74 24 5c	 mov	 esi, DWORD PTR _$S7$118106[esp+152]
$LN309@GetFavorit:
  00352	56		 push	 esi
  00353	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00358	83 c4 04	 add	 esp, 4
$LN321@GetFavorit:
  0035b	8b 44 24 50	 mov	 eax, DWORD PTR _$S7$118106[esp+140]
  0035f	50		 push	 eax
  00360	89 6c 24 60	 mov	 DWORD PTR _$S7$118106[esp+156], ebp
  00364	89 6c 24 64	 mov	 DWORD PTR _$S7$118106[esp+160], ebp
  00368	89 6c 24 68	 mov	 DWORD PTR _$S7$118106[esp+164], ebp
  0036c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 482  : 
; 483  : 		return wstring();

  00371	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+132]
  00378	83 c4 04	 add	 esp, 4
  0037b	33 c9		 xor	 ecx, ecx
  0037d	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  00384	89 68 14	 mov	 DWORD PTR [eax+20], ebp
  00387	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 484  : 	}

  0038b	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  0038f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00396	59		 pop	 ecx
  00397	5f		 pop	 edi
  00398	5e		 pop	 esi
  00399	5d		 pop	 ebp
  0039a	5b		 pop	 ebx
  0039b	83 c4 70	 add	 esp, 112		; 00000070H
  0039e	c3		 ret	 0
$LN376@GetFavorit:

; 480  : 				return favorite.Label;

  0039f	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  003a2	8b bc 24 88 00
	00 00		 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+128]
  003a9	33 c9		 xor	 ecx, ecx
  003ab	6a ff		 push	 -1
  003ad	51		 push	 ecx
  003ae	c7 47 18 07 00
	00 00		 mov	 DWORD PTR [edi+24], 7
  003b5	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  003bc	66 89 4f 04	 mov	 WORD PTR [edi+4], cx
  003c0	50		 push	 eax
  003c1	8b cf		 mov	 ecx, edi
  003c3	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  003c8	8b 74 24 5c	 mov	 esi, DWORD PTR _$S7$118106[esp+152]
  003cc	33 db		 xor	 ebx, ebx
  003ce	3b f3		 cmp	 esi, ebx
  003d0	74 29		 je	 SHORT $LN284@GetFavorit
  003d2	8b 6c 24 60	 mov	 ebp, DWORD PTR _$S7$118106[esp+156]
  003d6	3b f5		 cmp	 esi, ebp
  003d8	74 18		 je	 SHORT $LN272@GetFavorit
  003da	8d 9b 00 00 00
	00		 npad	 6
$LL274@GetFavorit:
  003e0	8b ce		 mov	 ecx, esi
  003e2	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  003e7	83 c6 78	 add	 esi, 120		; 00000078H
  003ea	3b f5		 cmp	 esi, ebp
  003ec	75 f2		 jne	 SHORT $LL274@GetFavorit
  003ee	8b 74 24 5c	 mov	 esi, DWORD PTR _$S7$118106[esp+152]
$LN272@GetFavorit:
  003f2	56		 push	 esi
  003f3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003f8	83 c4 04	 add	 esp, 4
$LN284@GetFavorit:
  003fb	8b 54 24 50	 mov	 edx, DWORD PTR _$S7$118106[esp+140]
  003ff	52		 push	 edx
  00400	89 5c 24 60	 mov	 DWORD PTR _$S7$118106[esp+156], ebx
  00404	89 5c 24 64	 mov	 DWORD PTR _$S7$118106[esp+160], ebx
  00408	89 5c 24 68	 mov	 DWORD PTR _$S7$118106[esp+164], ebx
  0040c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00411	83 c4 04	 add	 esp, 4
  00414	8b c7		 mov	 eax, edi

; 484  : 	}

  00416	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  0041a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00421	59		 pop	 ecx
  00422	5f		 pop	 edi
  00423	5e		 pop	 esi
  00424	5d		 pop	 ebp
  00425	5b		 pop	 ebx
  00426	83 c4 70	 add	 esp, 112		; 00000070H
  00429	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR _$S6$118078[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR _$S7$118106[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__ehhandler$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 8c	 lea	 eax, DWORD PTR [edx-116]
  00017	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ENDP ; CipherShed::GetFavoriteVolumeLabel
PUBLIC	??_C@_0BL@JLAFANLF@SYS_FAVORITE_VOLUMES_SAVED?$AA@ ; `string'
PUBLIC	??_C@_1BO@LKECBBKI@?$AA?6?$AA?7?$AA?$DM?$AA?1?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@ ; `string'
PUBLIC	??_C@_17EEOGHOKP@?$AA?$CF?$AAw?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BE@BKLKJEIJ@?$AA?$DM?$AA?1?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$DO?$AA?$AA@ ; `string'
PUBLIC	??_C@_13MOEPKPHB@?$AA?$DO?$AA?$AA@		; `string'
PUBLIC	??_C@_1DA@CGPNJOBH@?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JPOBGFJC@?$AA?5?$AAn?$AAo?$AAH?$AAo?$AAt?$AAK?$AAe?$AAy?$AAM?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@JKNJFOGE@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAL?$AAo?$AAg?$AAO?$AAn?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@PFJKIIJG@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAA?$AAr?$AAr?$AAi?$AAv?$AAa?$AAl?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@DCLBMOGE@?$AA?5?$AAs?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@KPDNDBGI@?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAa?$AAb?$AAl?$AAe?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@ENOBLAGP@?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAo?$AAn?$AAl?$AAy?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@IMCPEDAD@?$AA?5?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@		; `string'
PUBLIC	??_C@_1DA@FKMFKHK@?$AA?6?$AA?7?$AA?7?$AA?$DM?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CB@FDMOEEOH@SYSTEM_FAVORITE_NETWORK_PATH_ERR@ ; `string'
PUBLIC	??_C@_1BM@LHCEIKFH@?$AA?6?$AA?7?$AA?$DM?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@		; `string'
PUBLIC	??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	??_R0?AUUserAbort@CipherShed@@@8		; CipherShed::UserAbort `RTTI Type Descriptor'
EXTRN	_Info:PROC
EXTRN	?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:PROC ; CipherShed::BootEncryption::CopyFileAdmin
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
EXTRN	?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::DeleteFileAdmin
EXTRN	?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; GetServiceConfigPath
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	_fclose:PROC
EXTRN	_CheckFileStreamWriteErrors:PROC
EXTRN	_XmlWriteFooterW:PROC
EXTRN	_fwprintf:PROC
EXTRN	_XmlQuoteText:PROC
EXTRN	_Warning:PROC
EXTRN	_fputws:PROC
EXTRN	_XmlWriteHeaderW:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_MainDlg:DWORD
EXTRN	_fopen:PROC
;	COMDAT ??_R0?AUUserAbort@CipherShed@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
_DATA	SEGMENT
??_R0?AUUserAbort@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::UserAbort `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUUserAbort@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BL@JLAFANLF@SYS_FAVORITE_VOLUMES_SAVED?$AA@
CONST	SEGMENT
??_C@_0BL@JLAFANLF@SYS_FAVORITE_VOLUMES_SAVED?$AA@ DB 'SYS_FAVORITE_VOLUM'
	DB	'ES_SAVED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@LKECBBKI@?$AA?6?$AA?7?$AA?$DM?$AA?1?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@LKECBBKI@?$AA?6?$AA?7?$AA?$DM?$AA?1?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@ DB 0aH
	DB	00H, 09H, 00H, '<', 00H, '/', 00H, 'f', 00H, 'a', 00H, 'v', 00H
	DB	'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, 's', 00H, '>'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17EEOGHOKP@?$AA?$CF?$AAw?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17EEOGHOKP@?$AA?$CF?$AAw?$AAs?$AA?$AA@ DB '%', 00H, 'w', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@BKLKJEIJ@?$AA?$DM?$AA?1?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$DO?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@BKLKJEIJ@?$AA?$DM?$AA?1?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$DO?$AA?$AA@ DB '<'
	DB	00H, '/', 00H, 'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, '>', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13MOEPKPHB@?$AA?$DO?$AA?$AA@
CONST	SEGMENT
??_C@_13MOEPKPHB@?$AA?$DO?$AA?$AA@ DB '>', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@CGPNJOBH@?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@CGPNJOBH@?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'E', 00H, 'x', 00H
	DB	'p', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'r', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '=', 00H
	DB	'"', 00H, '1', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JPOBGFJC@?$AA?5?$AAn?$AAo?$AAH?$AAo?$AAt?$AAK?$AAe?$AAy?$AAM?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JPOBGFJC@?$AA?5?$AAn?$AAo?$AAH?$AAo?$AAt?$AAK?$AAe?$AAy?$AAM?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'n', 00H, 'o', 00H, 'H', 00H, 'o', 00H, 't', 00H, 'K', 00H
	DB	'e', 00H, 'y', 00H, 'M', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, '=', 00H, '"', 00H, '1', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JKNJFOGE@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAL?$AAo?$AAg?$AAO?$AAn?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JKNJFOGE@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAL?$AAo?$AAg?$AAO?$AAn?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'm', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'O', 00H
	DB	'n', 00H, 'L', 00H, 'o', 00H, 'g', 00H, 'O', 00H, 'n', 00H, '='
	DB	00H, '"', 00H, '1', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PFJKIIJG@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAA?$AAr?$AAr?$AAi?$AAv?$AAa?$AAl?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PFJKIIJG@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAA?$AAr?$AAr?$AAi?$AAv?$AAa?$AAl?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'm', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'O', 00H
	DB	'n', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'a'
	DB	00H, 'l', 00H, '=', 00H, '"', 00H, '1', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@DCLBMOGE@?$AA?5?$AAs?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@DCLBMOGE@?$AA?5?$AAs?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 's', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'=', 00H, '"', 00H, '1', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KPDNDBGI@?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAa?$AAb?$AAl?$AAe?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KPDNDBGI@?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAa?$AAb?$AAl?$AAe?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'r', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '=', 00H, '"', 00H, '1', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@ENOBLAGP@?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAo?$AAn?$AAl?$AAy?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@ENOBLAGP@?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAo?$AAn?$AAl?$AAy?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, '=', 00H, '"', 00H, '1', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IMCPEDAD@?$AA?5?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IMCPEDAD@?$AA?5?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CC?$AA?$AA@ DB ' '
	DB	00H, 'l', 00H, 'a', 00H, 'b', 00H, 'e', 00H, 'l', 00H, '=', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@ DB '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@FKMFKHK@?$AA?6?$AA?7?$AA?7?$AA?$DM?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FKMFKHK@?$AA?6?$AA?7?$AA?7?$AA?$DM?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA?$AA@ DB 0aH
	DB	00H, 09H, 00H, 09H, 00H, '<', 00H, 'v', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, '=', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FDMOEEOH@SYSTEM_FAVORITE_NETWORK_PATH_ERR@
CONST	SEGMENT
??_C@_0CB@FDMOEEOH@SYSTEM_FAVORITE_NETWORK_PATH_ERR@ DB 'SYSTEM_FAVORITE_'
	DB	'NETWORK_PATH_ERR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@LHCEIKFH@?$AA?6?$AA?7?$AA?$DM?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@LHCEIKFH@?$AA?6?$AA?7?$AA?$DM?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@ DB 0aH
	DB	00H, 09H, 00H, '<', 00H, 'f', 00H, 'a', 00H, 'v', 00H, 'o', 00H
	DB	'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, 's', 00H, '>', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@
CONST	SEGMENT
??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@ DB 'w,ccs=UTF-8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@
CONST	SEGMENT
??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@ DB 'Favorite Volumes.xml', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$28 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$5
__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$27 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff54H
	DD	FLAT:__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$3
__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$26 DD 08H
	DD	FLAT:??_R0?AUUserAbort@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$1
__ehfuncinfo$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z DD 019930522H
	DD	01bH
	DD	FLAT:__unwindtable$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z
	DD	03H
	DD	FLAT:__tryblocktable$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z DD 0eH
	DD	010H
	DD	011H
	DD	02H
	DD	FLAT:__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$26
	DD	012H
	DD	015H
	DD	016H
	DD	01H
	DD	FLAT:__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$27
	DD	017H
	DD	019H
	DD	01aH
	DD	01H
	DD	FLAT:__catchsym$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$28
__unwindtable$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$8
	DD	01H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$10
	DD	05H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$11
	DD	06H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$12
	DD	05H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$13
	DD	08H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$14
	DD	09H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$15
	DD	0aH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$17
	DD	0cH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$18
	DD	0dH
	DD	00H
	DD	0eH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$19
	DD	0fH
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$20
	DD	0dH
	DD	00H
	DD	0dH
	DD	00H
	DD	012H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$21
	DD	013H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$22
	DD	014H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$23
	DD	0dH
	DD	00H
	DD	0cH
	DD	00H
	DD	017H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$24
	DD	018H
	DD	FLAT:__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$25
	DD	0cH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z
_TEXT	SEGMENT
$T146205 = -284						; size = 28
$T146212 = -256						; size = 28
$T146211 = -228						; size = 28
$T146206 = -200						; size = 28
_e$118489 = -172					; size = 4
_$S10$118399 = -168					; size = 48
tv1725 = -120						; size = 4
tv1751 = -116						; size = 4
tv1755 = -112						; size = 4
tv1767 = -108						; size = 4
tv1763 = -104						; size = 4
tv1771 = -100						; size = 4
tv1742 = -96						; size = 4
tv1759 = -92						; size = 4
tv1737 = -88						; size = 4
tv1775 = -84						; size = 4
$T146222 = -80						; size = 28
$T146219 = -80						; size = 28
$T146216 = -80						; size = 28
$T146210 = -80						; size = 28
$T146207 = -80						; size = 28
$T146221 = -52						; size = 28
$T146218 = -52						; size = 28
$T146209 = -52						; size = 28
$T146208 = -52						; size = 28
_f$ = -24						; size = 4
_cnt$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bootEnc$ = 0						; size = 1560
$T146220 = 1560						; size = 28
$T146215 = 1560						; size = 28
_s$118416 = 1560					; size = 28
_tq$118411 = 1588					; size = 2048
__$ArrayPad$ = 3636					; size = 4
_systemFavorites$ = 3648				; size = 1
?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z PROC ; CipherShed::SaveFavoriteVolumes, COMDAT
; _favorites$ = ecx

; 651  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 c8 f1
	ff ff		 lea	 ebp, DWORD PTR [esp-3640]
  00008	81 ec 38 0e 00
	00		 sub	 esp, 3640		; 00000e38H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 34 0e 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 652  : 		FILE *f;
; 653  : 		int cnt = 0;
; 654  : 
; 655  : 		f = fopen (GetConfigPath (systemFavorites ? TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES : TC_APPD_FILENAME_FAVORITE_VOLUMES), "w,ccs=UTF-8");

  0003f	8a 9d 40 0e 00
	00		 mov	 bl, BYTE PTR _systemFavorites$[ebp]
  00045	33 ff		 xor	 edi, edi
  00047	8b f1		 mov	 esi, ecx
  00049	89 7d ec	 mov	 DWORD PTR _cnt$[ebp], edi
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00051	84 db		 test	 bl, bl
  00053	75 05		 jne	 SHORT $LN30@SaveFavori
  00055	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@
$LN30@SaveFavori:
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _GetConfigPath
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _fopen
  0006e	83 c4 08	 add	 esp, 8
  00071	89 45 e8	 mov	 DWORD PTR _f$[ebp], eax

; 656  : 		if (f == NULL)

  00074	3b c7		 cmp	 eax, edi
  00076	75 15		 jne	 SHORT $LN26@SaveFavori

; 657  : 		{
; 658  : 			handleWin32Error (MainDlg);

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _handleWin32Error
  00083	83 c4 04	 add	 esp, 4

; 659  : 			return false;

  00086	32 c0		 xor	 al, al
  00088	e9 8d 08 00 00	 jmp	 $LN27@SaveFavori
$LN26@SaveFavori:

; 660  : 		}
; 661  : 
; 662  : 		XmlWriteHeaderW (f);

  0008d	8b 4d e8	 mov	 ecx, DWORD PTR _f$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _XmlWriteHeaderW

; 663  : 		fputws (L"\n\t<favorites>", f);

  00096	8b 55 e8	 mov	 edx, DWORD PTR _f$[ebp]
  00099	52		 push	 edx
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@LHCEIKFH@?$AA?6?$AA?7?$AA?$DM?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@
  0009f	e8 00 00 00 00	 call	 _fputws

; 664  : 
; 665  : 		foreach (const FavoriteVolume &favorite, favorites)

  000a4	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _$S10$118399[ebp]
  000aa	56		 push	 esi
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
  000b4	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _$S10$118399[ebp]
  000ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bd	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _$S10$118399[ebp]
  000c3	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  000c6	ff d0		 call	 eax
  000c8	84 c0		 test	 al, al
  000ca	0f 84 71 04 00
	00		 je	 $LN23@SaveFavori
  000d0	bb 08 00 00 00	 mov	 ebx, 8
$LL25@SaveFavori:
  000d5	8b 45 80	 mov	 eax, DWORD PTR _$S10$118399[ebp+40]
  000d8	3b c7		 cmp	 eax, edi
  000da	75 0c		 jne	 SHORT $LN850@SaveFavori
  000dc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000e1	8b 45 80	 mov	 eax, DWORD PTR _$S10$118399[ebp+40]
  000e4	3b c7		 cmp	 eax, edi
  000e6	74 04		 je	 SHORT $LN91@SaveFavori
$LN850@SaveFavori:
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	eb 02		 jmp	 SHORT $LN92@SaveFavori
$LN91@SaveFavori:
  000ec	33 c9		 xor	 ecx, ecx
$LN92@SaveFavori:
  000ee	8b 45 84	 mov	 eax, DWORD PTR _$S10$118399[ebp+44]
  000f1	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000f4	72 08		 jb	 SHORT $LN79@SaveFavori
  000f6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000fb	8b 45 84	 mov	 eax, DWORD PTR _$S10$118399[ebp+44]
$LN79@SaveFavori:
  000fe	80 bd 5d ff ff
	ff 00		 cmp	 BYTE PTR _$S10$118399[ebp+5], 0
  00105	8b f0		 mov	 esi, eax
  00107	0f 94 c1	 sete	 cl
  0010a	88 8d 5d ff ff
	ff		 mov	 BYTE PTR _$S10$118399[ebp+5], cl
  00110	84 c9		 test	 cl, cl
  00112	0f 84 f9 03 00
	00		 je	 $LN24@SaveFavori

; 671  : 
; 672  : 			XmlQuoteText (!favorite.VolumePathId.empty() ? favorite.VolumePathId.c_str() : favorite.Path.c_str(), tq, sizeof (tq));

  00118	8d 48 4c	 lea	 ecx, DWORD PTR [eax+76]
  0011b	89 4d 88	 mov	 DWORD PTR tv1725[ebp], ecx
  0011e	8d 50 1c	 lea	 edx, DWORD PTR [eax+28]
  00121	8d 48 68	 lea	 ecx, DWORD PTR [eax+104]
  00124	89 55 a8	 mov	 DWORD PTR tv1737[ebp], edx
  00127	89 4d a0	 mov	 DWORD PTR tv1742[ebp], ecx
  0012a	8d 50 75	 lea	 edx, DWORD PTR [eax+117]
  0012d	8d 48 76	 lea	 ecx, DWORD PTR [eax+118]
  00130	89 55 8c	 mov	 DWORD PTR tv1751[ebp], edx
  00133	89 4d 90	 mov	 DWORD PTR tv1755[ebp], ecx
  00136	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  00139	8d 48 73	 lea	 ecx, DWORD PTR [eax+115]
  0013c	89 55 a4	 mov	 DWORD PTR tv1759[ebp], edx
  0013f	89 4d 98	 mov	 DWORD PTR tv1763[ebp], ecx
  00142	8d 50 72	 lea	 edx, DWORD PTR [eax+114]
  00145	8d 48 70	 lea	 ecx, DWORD PTR [eax+112]
  00148	83 c0 74	 add	 eax, 116		; 00000074H
  0014b	89 55 94	 mov	 DWORD PTR tv1767[ebp], edx
  0014e	89 4d 9c	 mov	 DWORD PTR tv1771[ebp], ecx
  00151	89 45 ac	 mov	 DWORD PTR tv1775[ebp], eax
$LN95@SaveFavori:

; 666  : 		{
; 667  : 			char tq[2048];
; 668  : 
; 669  : 			if (systemFavorites && favorite.Path.find ("\\\\") == 0 && favorite.Path.find ("Volume{") == string::npos)

  00154	80 bd 40 0e 00
	00 00		 cmp	 BYTE PTR _systemFavorites$[ebp], 0
  0015b	74 34		 je	 SHORT $LN19@SaveFavori
  0015d	6a 02		 push	 2
  0015f	57		 push	 edi
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
  00165	8b ce		 mov	 ecx, esi
  00167	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0016c	85 c0		 test	 eax, eax
  0016e	75 21		 jne	 SHORT $LN19@SaveFavori
  00170	6a 07		 push	 7
  00172	57		 push	 edi
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  00178	8b ce		 mov	 ecx, esi
  0017a	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0017f	83 f8 ff	 cmp	 eax, -1
  00182	75 0d		 jne	 SHORT $LN19@SaveFavori

; 670  : 				Warning ("SYSTEM_FAVORITE_NETWORK_PATH_ERR");

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FDMOEEOH@SYSTEM_FAVORITE_NETWORK_PATH_ERR@
  00189	e8 00 00 00 00	 call	 _Warning
  0018e	83 c4 04	 add	 esp, 4
$LN19@SaveFavori:

; 671  : 
; 672  : 			XmlQuoteText (!favorite.VolumePathId.empty() ? favorite.VolumePathId.c_str() : favorite.Path.c_str(), tq, sizeof (tq));

  00191	8b 55 88	 mov	 edx, DWORD PTR tv1725[ebp]
  00194	39 3a		 cmp	 DWORD PTR [edx], edi
  00196	74 10		 je	 SHORT $LN33@SaveFavori
  00198	83 7e 50 10	 cmp	 DWORD PTR [esi+80], 16	; 00000010H
  0019c	72 05		 jb	 SHORT $LN113@SaveFavori
  0019e	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  001a1	eb 0c		 jmp	 SHORT $LN34@SaveFavori
$LN113@SaveFavori:
  001a3	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  001a6	eb 07		 jmp	 SHORT $LN34@SaveFavori
$LN33@SaveFavori:
  001a8	8b ce		 mov	 ecx, esi
  001aa	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
$LN34@SaveFavori:
  001af	68 00 08 00 00	 push	 2048			; 00000800H
  001b4	8d 8d 34 06 00
	00		 lea	 ecx, DWORD PTR _tq$118411[ebp]
  001ba	51		 push	 ecx
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 _XmlQuoteText

; 673  : 
; 674  : 			wstring s = L"\n\t\t<volume mountpoint=\"" + SingleStringToWide (favorite.MountPoint) + L"\"";

  001c1	8b 55 a8	 mov	 edx, DWORD PTR tv1737[ebp]
  001c4	52		 push	 edx
  001c5	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T146205[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  001d1	50		 push	 eax
  001d2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T146206[ebp]
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_1DA@FKMFKHK@?$AA?6?$AA?7?$AA?7?$AA?$DM?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA?$AA@
  001dd	51		 push	 ecx
  001de	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  001e2	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
  001ec	50		 push	 eax
  001ed	8d 95 18 06 00
	00		 lea	 edx, DWORD PTR _s$118416[ebp]
  001f3	52		 push	 edx
  001f4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  001f8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001fd	83 c4 2c	 add	 esp, 44			; 0000002cH
  00200	39 9d 50 ff ff
	ff		 cmp	 DWORD PTR $T146206[ebp+24], ebx
  00206	72 0f		 jb	 SHORT $LN133@SaveFavori
  00208	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T146206[ebp+4]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00214	83 c4 04	 add	 esp, 4
$LN133@SaveFavori:
  00217	33 c9		 xor	 ecx, ecx
  00219	c7 85 50 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T146206[ebp+24], 7
  00223	89 bd 4c ff ff
	ff		 mov	 DWORD PTR $T146206[ebp+20], edi
  00229	66 89 8d 3c ff
	ff ff		 mov	 WORD PTR $T146206[ebp+4], cx
  00230	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00234	39 9d fc fe ff
	ff		 cmp	 DWORD PTR $T146205[ebp+24], ebx
  0023a	72 0f		 jb	 SHORT $LN161@SaveFavori
  0023c	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR $T146205[ebp+4]
  00242	52		 push	 edx
  00243	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00248	83 c4 04	 add	 esp, 4
$LN161@SaveFavori:

; 675  : 
; 676  : 			if (!favorite.Label.empty())

  0024b	8b 4d a0	 mov	 ecx, DWORD PTR tv1742[ebp]
  0024e	33 c0		 xor	 eax, eax
  00250	c7 85 fc fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T146205[ebp+24], 7
  0025a	89 bd f8 fe ff
	ff		 mov	 DWORD PTR $T146205[ebp+20], edi
  00260	66 89 85 e8 fe
	ff ff		 mov	 WORD PTR $T146205[ebp+4], ax
  00267	39 39		 cmp	 DWORD PTR [ecx], edi
  00269	74 71		 je	 SHORT $LN223@SaveFavori

; 677  : 				s += L" label=\"" + favorite.Label + L"\"";

  0026b	8d 56 54	 lea	 edx, DWORD PTR [esi+84]
  0026e	52		 push	 edx
  0026f	8d 45 b0	 lea	 eax, DWORD PTR $T146207[ebp]
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@IMCPEDAD@?$AA?5?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CC?$AA?$AA@
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
  00282	50		 push	 eax
  00283	8d 4d cc	 lea	 ecx, DWORD PTR $T146208[ebp]
  00286	51		 push	 ecx
  00287	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  0028b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00290	83 c4 18	 add	 esp, 24			; 00000018H
  00293	6a ff		 push	 -1
  00295	57		 push	 edi
  00296	50		 push	 eax
  00297	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  0029d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  002a1	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  002a6	39 5d e4	 cmp	 DWORD PTR $T146208[ebp+24], ebx
  002a9	72 0c		 jb	 SHORT $LN195@SaveFavori
  002ab	8b 55 d0	 mov	 edx, DWORD PTR $T146208[ebp+4]
  002ae	52		 push	 edx
  002af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002b4	83 c4 04	 add	 esp, 4
$LN195@SaveFavori:
  002b7	33 c0		 xor	 eax, eax
  002b9	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR $T146208[ebp+24], 7
  002c0	89 7d e0	 mov	 DWORD PTR $T146208[ebp+20], edi
  002c3	66 89 45 d0	 mov	 WORD PTR $T146208[ebp+4], ax
  002c7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  002cb	39 5d c8	 cmp	 DWORD PTR $T146207[ebp+24], ebx
  002ce	72 0c		 jb	 SHORT $LN223@SaveFavori
  002d0	8b 4d b4	 mov	 ecx, DWORD PTR $T146207[ebp+4]
  002d3	51		 push	 ecx
  002d4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d9	83 c4 04	 add	 esp, 4
$LN223@SaveFavori:

; 678  : 
; 679  : 			if (favorite.ReadOnly)

  002dc	8b 55 8c	 mov	 edx, DWORD PTR tv1751[ebp]
  002df	80 3a 00	 cmp	 BYTE PTR [edx], 0
  002e2	74 12		 je	 SHORT $LN233@SaveFavori

; 680  : 				s += L" readonly=\"1\"";

  002e4	6a 0d		 push	 13			; 0000000dH
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@ENOBLAGP@?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAo?$AAn?$AAl?$AAy?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  002eb	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  002f1	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN233@SaveFavori:

; 681  : 			
; 682  : 			if (favorite.Removable)

  002f6	8b 45 90	 mov	 eax, DWORD PTR tv1755[ebp]
  002f9	80 38 00	 cmp	 BYTE PTR [eax], 0
  002fc	74 12		 je	 SHORT $LN239@SaveFavori

; 683  : 				s += L" removable=\"1\"";

  002fe	6a 0e		 push	 14			; 0000000eH
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@KPDNDBGI@?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAa?$AAb?$AAl?$AAe?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  00305	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  0030b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN239@SaveFavori:

; 684  : 
; 685  : 			if (favorite.SystemEncryption)

  00310	8b 4d a4	 mov	 ecx, DWORD PTR tv1759[ebp]
  00313	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00316	74 12		 je	 SHORT $LN245@SaveFavori

; 686  : 				s += L" system=\"1\"";

  00318	6a 0b		 push	 11			; 0000000bH
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_1BI@DCLBMOGE@?$AA?5?$AAs?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  0031f	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  00325	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN245@SaveFavori:

; 687  : 
; 688  : 			if (favorite.MountOnArrival)

  0032a	8b 55 98	 mov	 edx, DWORD PTR tv1763[ebp]
  0032d	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00330	74 12		 je	 SHORT $LN251@SaveFavori

; 689  : 				s += L" mountOnArrival=\"1\"";

  00332	6a 13		 push	 19			; 00000013H
  00334	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@PFJKIIJG@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAA?$AAr?$AAr?$AAi?$AAv?$AAa?$AAl?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  00339	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  0033f	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN251@SaveFavori:

; 690  : 
; 691  : 			if (favorite.MountOnLogOn)

  00344	8b 45 94	 mov	 eax, DWORD PTR tv1767[ebp]
  00347	80 38 00	 cmp	 BYTE PTR [eax], 0
  0034a	74 12		 je	 SHORT $LN257@SaveFavori

; 692  : 				s += L" mountOnLogOn=\"1\"";

  0034c	6a 11		 push	 17			; 00000011H
  0034e	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@JKNJFOGE@?$AA?5?$AAm?$AAo?$AAu?$AAn?$AAt?$AAO?$AAn?$AAL?$AAo?$AAg?$AAO?$AAn?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  00353	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  00359	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN257@SaveFavori:

; 693  : 			
; 694  : 			if (favorite.DisableHotkeyMount)

  0035e	8b 4d 9c	 mov	 ecx, DWORD PTR tv1771[ebp]
  00361	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00364	74 12		 je	 SHORT $LN263@SaveFavori

; 695  : 				s += L" noHotKeyMount=\"1\"";

  00366	6a 12		 push	 18			; 00000012H
  00368	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JPOBGFJC@?$AA?5?$AAn?$AAo?$AAH?$AAo?$AAt?$AAK?$AAe?$AAy?$AAM?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  0036d	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  00373	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN263@SaveFavori:

; 696  : 
; 697  : 			if (favorite.OpenExplorerWindow)

  00378	8b 55 ac	 mov	 edx, DWORD PTR tv1775[ebp]
  0037b	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0037e	74 12		 je	 SHORT $LN269@SaveFavori

; 698  : 				s += L" openExplorerWindow=\"1\"";

  00380	6a 17		 push	 23			; 00000017H
  00382	68 00 00 00 00	 push	 OFFSET ??_C@_1DA@CGPNJOBH@?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$DN?$AA?$CC?$AA1?$AA?$CC?$AA?$AA@
  00387	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  0038d	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN269@SaveFavori:

; 699  : 
; 700  : 			s += L">" + SingleStringToWide (tq) + L"</volume>";

  00392	8d 85 34 06 00
	00		 lea	 eax, DWORD PTR _tq$118411[ebp]
  00398	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR $T146209[ebp+24], 15 ; 0000000fH
  0039f	89 7d e0	 mov	 DWORD PTR $T146209[ebp+20], edi
  003a2	c6 45 d0 00	 mov	 BYTE PTR $T146209[ebp+4], 0
  003a6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  003a9	8d a4 24 00 00
	00 00		 npad	 7
$LL851@SaveFavori:
  003b0	8a 10		 mov	 dl, BYTE PTR [eax]
  003b2	40		 inc	 eax
  003b3	84 d2		 test	 dl, dl
  003b5	75 f9		 jne	 SHORT $LL851@SaveFavori
  003b7	2b c1		 sub	 eax, ecx
  003b9	50		 push	 eax
  003ba	8d 85 34 06 00
	00		 lea	 eax, DWORD PTR _tq$118411[ebp]
  003c0	50		 push	 eax
  003c1	8d 4d cc	 lea	 ecx, DWORD PTR $T146209[ebp]
  003c4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003c9	8d 4d cc	 lea	 ecx, DWORD PTR $T146209[ebp]
  003cc	51		 push	 ecx
  003cd	8d 55 b0	 lea	 edx, DWORD PTR $T146210[ebp]
  003d0	52		 push	 edx
  003d1	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  003d4	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  003d9	50		 push	 eax
  003da	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T146211[ebp]
  003e0	68 00 00 00 00	 push	 OFFSET ??_C@_13MOEPKPHB@?$AA?$DO?$AA?$AA@
  003e5	50		 push	 eax
  003e6	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  003ea	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@BKLKJEIJ@?$AA?$DM?$AA?1?$AAv?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$DO?$AA?$AA@
  003f4	50		 push	 eax
  003f5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T146212[ebp]
  003fb	51		 push	 ecx
  003fc	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00400	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00405	83 c4 20	 add	 esp, 32			; 00000020H
  00408	6a ff		 push	 -1
  0040a	57		 push	 edi
  0040b	50		 push	 eax
  0040c	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  00412	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00416	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0041b	39 9d 18 ff ff
	ff		 cmp	 DWORD PTR $T146212[ebp+24], ebx
  00421	72 0f		 jb	 SHORT $LN333@SaveFavori
  00423	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR $T146212[ebp+4]
  00429	52		 push	 edx
  0042a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0042f	83 c4 04	 add	 esp, 4
$LN333@SaveFavori:
  00432	33 c0		 xor	 eax, eax
  00434	c7 85 18 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T146212[ebp+24], 7
  0043e	89 bd 14 ff ff
	ff		 mov	 DWORD PTR $T146212[ebp+20], edi
  00444	66 89 85 04 ff
	ff ff		 mov	 WORD PTR $T146212[ebp+4], ax
  0044b	39 9d 34 ff ff
	ff		 cmp	 DWORD PTR $T146211[ebp+24], ebx
  00451	72 0f		 jb	 SHORT $LN361@SaveFavori
  00453	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T146211[ebp+4]
  00459	51		 push	 ecx
  0045a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0045f	83 c4 04	 add	 esp, 4
$LN361@SaveFavori:
  00462	33 d2		 xor	 edx, edx
  00464	c7 85 34 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T146211[ebp+24], 7
  0046e	89 bd 30 ff ff
	ff		 mov	 DWORD PTR $T146211[ebp+20], edi
  00474	66 89 95 20 ff
	ff ff		 mov	 WORD PTR $T146211[ebp+4], dx
  0047b	39 5d c8	 cmp	 DWORD PTR $T146210[ebp+24], ebx
  0047e	72 0c		 jb	 SHORT $LN389@SaveFavori
  00480	8b 45 b4	 mov	 eax, DWORD PTR $T146210[ebp+4]
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00489	83 c4 04	 add	 esp, 4
$LN389@SaveFavori:
  0048c	33 c9		 xor	 ecx, ecx
  0048e	83 7d e4 10	 cmp	 DWORD PTR $T146209[ebp+24], 16 ; 00000010H
  00492	c7 45 c8 07 00
	00 00		 mov	 DWORD PTR $T146210[ebp+24], 7
  00499	89 7d c4	 mov	 DWORD PTR $T146210[ebp+20], edi
  0049c	66 89 4d b4	 mov	 WORD PTR $T146210[ebp+4], cx
  004a0	72 0c		 jb	 SHORT $LN415@SaveFavori
  004a2	8b 55 d0	 mov	 edx, DWORD PTR $T146209[ebp+4]
  004a5	52		 push	 edx
  004a6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004ab	83 c4 04	 add	 esp, 4
$LN415@SaveFavori:

; 701  : 
; 702  : 			fwprintf (f, L"%ws", s.c_str());

  004ae	8b 85 1c 06 00
	00		 mov	 eax, DWORD PTR _s$118416[ebp+4]
  004b4	39 9d 30 06 00
	00		 cmp	 DWORD PTR _s$118416[ebp+24], ebx
  004ba	73 06		 jae	 SHORT $LN430@SaveFavori
  004bc	8d 85 1c 06 00
	00		 lea	 eax, DWORD PTR _s$118416[ebp+4]
$LN430@SaveFavori:
  004c2	50		 push	 eax
  004c3	8b 45 e8	 mov	 eax, DWORD PTR _f$[ebp]
  004c6	68 00 00 00 00	 push	 OFFSET ??_C@_17EEOGHOKP@?$AA?$CF?$AAw?$AAs?$AA?$AA@
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 _fwprintf

; 703  : 			cnt++;

  004d1	ff 45 ec	 inc	 DWORD PTR _cnt$[ebp]
  004d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 704  : 		}

  004d7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  004db	39 9d 30 06 00
	00		 cmp	 DWORD PTR _s$118416[ebp+24], ebx
  004e1	72 0f		 jb	 SHORT $LN449@SaveFavori
  004e3	8b 8d 1c 06 00
	00		 mov	 ecx, DWORD PTR _s$118416[ebp+4]
  004e9	51		 push	 ecx
  004ea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004ef	83 c4 04	 add	 esp, 4
$LN449@SaveFavori:
  004f2	80 bd 5d ff ff
	ff 00		 cmp	 BYTE PTR _$S10$118399[ebp+5], 0
  004f9	c6 85 5c ff ff
	ff 01		 mov	 BYTE PTR _$S10$118399[ebp+4], 1
  00500	0f 94 c0	 sete	 al
  00503	88 85 5d ff ff
	ff		 mov	 BYTE PTR _$S10$118399[ebp+5], al
  00509	84 c0		 test	 al, al
  0050b	0f 85 43 fc ff
	ff		 jne	 $LN95@SaveFavori
$LN24@SaveFavori:

; 664  : 
; 665  : 		foreach (const FavoriteVolume &favorite, favorites)

  00511	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _$S10$118399[ebp]
  00517	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0051a	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _$S10$118399[ebp]
  00520	ff d0		 call	 eax
  00522	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _$S10$118399[ebp]
  00528	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0052b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _$S10$118399[ebp]
  00531	ff d0		 call	 eax
  00533	84 c0		 test	 al, al
  00535	0f 85 9a fb ff
	ff		 jne	 $LL25@SaveFavori
  0053b	8a 9d 40 0e 00
	00		 mov	 bl, BYTE PTR _systemFavorites$[ebp]
$LN23@SaveFavori:

; 704  : 		}

  00541	8b b5 6c ff ff
	ff		 mov	 esi, DWORD PTR _$S10$118399[ebp+20]
  00547	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0054e	3b f7		 cmp	 esi, edi
  00550	74 2d		 je	 SHORT $LN484@SaveFavori
  00552	8b bd 70 ff ff
	ff		 mov	 edi, DWORD PTR _$S10$118399[ebp+24]
  00558	3b f7		 cmp	 esi, edi
  0055a	74 18		 je	 SHORT $LN472@SaveFavori
  0055c	8d 64 24 00	 npad	 4
$LL474@SaveFavori:
  00560	8b ce		 mov	 ecx, esi
  00562	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00567	83 c6 78	 add	 esi, 120		; 00000078H
  0056a	3b f7		 cmp	 esi, edi
  0056c	75 f2		 jne	 SHORT $LL474@SaveFavori
  0056e	8b b5 6c ff ff
	ff		 mov	 esi, DWORD PTR _$S10$118399[ebp+20]
$LN472@SaveFavori:
  00574	56		 push	 esi
  00575	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0057a	83 c4 04	 add	 esp, 4
  0057d	33 ff		 xor	 edi, edi
$LN484@SaveFavori:
  0057f	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _$S10$118399[ebp+8]
  00585	51		 push	 ecx
  00586	89 bd 6c ff ff
	ff		 mov	 DWORD PTR _$S10$118399[ebp+20], edi
  0058c	89 bd 70 ff ff
	ff		 mov	 DWORD PTR _$S10$118399[ebp+24], edi
  00592	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _$S10$118399[ebp+28], edi
  00598	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 705  : 
; 706  : 		fputws (L"\n\t</favorites>", f);

  0059d	8b 75 e8	 mov	 esi, DWORD PTR _f$[ebp]
  005a0	56		 push	 esi
  005a1	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@LKECBBKI@?$AA?6?$AA?7?$AA?$DM?$AA?1?$AAf?$AAa?$AAv?$AAo?$AAr?$AAi?$AAt?$AAe?$AAs?$AA?$DO?$AA?$AA@
  005a6	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S10$118399[ebp], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  005b0	e8 00 00 00 00	 call	 _fputws

; 707  : 		XmlWriteFooterW (f);

  005b5	56		 push	 esi
  005b6	e8 00 00 00 00	 call	 _XmlWriteFooterW
  005bb	83 c4 10	 add	 esp, 16			; 00000010H

; 708  : 
; 709  : 		if (!CheckFileStreamWriteErrors (f, systemFavorites ? TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES : TC_APPD_FILENAME_FAVORITE_VOLUMES))

  005be	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  005c3	84 db		 test	 bl, bl
  005c5	75 05		 jne	 SHORT $LN36@SaveFavori
  005c7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@
$LN36@SaveFavori:
  005cc	50		 push	 eax
  005cd	56		 push	 esi
  005ce	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors
  005d3	83 c4 08	 add	 esp, 8

; 710  : 		{
; 711  : 			fclose (f);

  005d6	56		 push	 esi
  005d7	85 c0		 test	 eax, eax
  005d9	75 0f		 jne	 SHORT $LN10@SaveFavori
  005db	e8 00 00 00 00	 call	 _fclose
  005e0	83 c4 04	 add	 esp, 4

; 712  : 			return false;

  005e3	32 c0		 xor	 al, al
  005e5	e9 30 03 00 00	 jmp	 $LN27@SaveFavori
$LN10@SaveFavori:

; 713  : 		}
; 714  : 
; 715  : 		fclose (f);

  005ea	e8 00 00 00 00	 call	 _fclose

; 716  : 
; 717  : 		BootEncryption bootEnc (MainDlg);

  005ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  005f5	83 c4 04	 add	 esp, 4
  005f8	52		 push	 edx
  005f9	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  005fc	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  00601	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 12 ; 0000000cH

; 718  : 
; 719  : 		if (systemFavorites)

  00608	84 db		 test	 bl, bl
  0060a	0f 84 16 02 00
	00		 je	 $LN9@SaveFavori

; 720  : 		{
; 721  : 			finally_do ({ remove (GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES)); });
; 722  : 
; 723  : 			try
; 724  : 			{
; 725  : 				bootEnc.DeleteFileAdmin (GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str());

  00610	8d 45 b0	 lea	 eax, DWORD PTR $T146216[ebp]
  00613	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00618	50		 push	 eax
  00619	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  0061d	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  00622	83 c4 08	 add	 esp, 8
  00625	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00629	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+12], 15 ; 0000000fH
  0062d	72 05		 jb	 SHORT $LN500@SaveFavori
  0062f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00632	eb 03		 jmp	 SHORT $LN501@SaveFavori
$LN500@SaveFavori:
  00634	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN501@SaveFavori:
  00637	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  0063c	8b c2		 mov	 eax, edx
  0063e	89 9d 30 06 00
	00		 mov	 DWORD PTR $T146215[ebp+24], ebx
  00644	89 bd 2c 06 00
	00		 mov	 DWORD PTR $T146215[ebp+20], edi
  0064a	c6 85 1c 06 00
	00 00		 mov	 BYTE PTR $T146215[ebp+4], 0
  00651	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL852@SaveFavori:
  00654	8a 08		 mov	 cl, BYTE PTR [eax]
  00656	40		 inc	 eax
  00657	84 c9		 test	 cl, cl
  00659	75 f9		 jne	 SHORT $LL852@SaveFavori
  0065b	2b c6		 sub	 eax, esi
  0065d	50		 push	 eax
  0065e	52		 push	 edx
  0065f	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR $T146215[ebp]
  00665	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0066a	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR $T146215[ebp]
  00670	51		 push	 ecx
  00671	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  00674	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  00678	e8 00 00 00 00	 call	 ?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::DeleteFileAdmin
  0067d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00682	39 b5 30 06 00
	00		 cmp	 DWORD PTR $T146215[ebp+24], esi
  00688	72 0f		 jb	 SHORT $LN554@SaveFavori
  0068a	8b 95 1c 06 00
	00		 mov	 edx, DWORD PTR $T146215[ebp+4]
  00690	52		 push	 edx
  00691	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00696	83 c4 04	 add	 esp, 4
$LN554@SaveFavori:
  00699	89 9d 30 06 00
	00		 mov	 DWORD PTR $T146215[ebp+24], ebx
  0069f	89 bd 2c 06 00
	00		 mov	 DWORD PTR $T146215[ebp+20], edi
  006a5	c6 85 1c 06 00
	00 00		 mov	 BYTE PTR $T146215[ebp+4], 0
  006ac	39 75 c8	 cmp	 DWORD PTR $T146216[ebp+24], esi
  006af	72 0c		 jb	 SHORT $LN580@SaveFavori
  006b1	8b 45 b4	 mov	 eax, DWORD PTR $T146216[ebp+4]
  006b4	50		 push	 eax
  006b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006ba	83 c4 04	 add	 esp, 4
$LN580@SaveFavori:
  006bd	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 13 ; 0000000dH
$LN857@SaveFavori:

; 728  : 			catch (...) { }

  006c4	33 ff		 xor	 edi, edi
  006c6	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 729  : 
; 730  : 			try
; 731  : 			{

  006cb	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+12], 18 ; 00000012H

; 732  : 				if (cnt != 0)

  006cf	39 7d ec	 cmp	 DWORD PTR _cnt$[ebp], edi
  006d2	0f 84 3a 01 00
	00		 je	 $LN5@SaveFavori

; 733  : 				{
; 734  : 					bootEnc.CopyFileAdmin (GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES), GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str());

  006d8	8d 4d b0	 lea	 ecx, DWORD PTR $T146219[ebp]
  006db	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  006e0	51		 push	 ecx
  006e1	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  006e6	83 c4 08	 add	 esp, 8
  006e9	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  006ed	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+12], 19 ; 00000013H
  006f1	72 33		 jb	 SHORT $LN594@SaveFavori
  006f3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  006f6	eb 31		 jmp	 SHORT $LN595@SaveFavori
__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$0:

; 726  : 			}
; 727  : 			catch (UserAbort&) { return false; }

  006f8	b8 00 00 00 00	 mov	 eax, $LN64@SaveFavori
  006fd	c3		 ret	 0
$LN64@SaveFavori:
  006fe	e8 00 00 00 00	 call	 ??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ ; `CipherShed::SaveFavoriteVolumes'::`32'::Finally721::~Finally721
  00703	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  00706	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0070d	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00712	32 c0		 xor	 al, al
  00714	e9 01 02 00 00	 jmp	 $LN27@SaveFavori
__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$1:

; 728  : 			catch (...) { }

  00719	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  00720	b8 00 00 00 00	 mov	 eax, $LN857@SaveFavori
  00725	c3		 ret	 0

; 733  : 				{
; 734  : 					bootEnc.CopyFileAdmin (GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES), GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str());

$LN594@SaveFavori:
  00726	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN595@SaveFavori:
  00729	8b c2		 mov	 eax, edx
  0072b	89 5d e4	 mov	 DWORD PTR $T146218[ebp+24], ebx
  0072e	89 7d e0	 mov	 DWORD PTR $T146218[ebp+20], edi
  00731	c6 45 d0 00	 mov	 BYTE PTR $T146218[ebp+4], 0
  00735	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL853@SaveFavori:
  00738	8a 08		 mov	 cl, BYTE PTR [eax]
  0073a	40		 inc	 eax
  0073b	84 c9		 test	 cl, cl
  0073d	75 f9		 jne	 SHORT $LL853@SaveFavori
  0073f	2b c6		 sub	 eax, esi
  00741	50		 push	 eax
  00742	52		 push	 edx
  00743	8d 4d cc	 lea	 ecx, DWORD PTR $T146218[ebp]
  00746	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00750	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+12], 20 ; 00000014H
  00754	e8 00 00 00 00	 call	 _GetConfigPath
  00759	8b c8		 mov	 ecx, eax
  0075b	83 c4 04	 add	 esp, 4
  0075e	89 9d 30 06 00
	00		 mov	 DWORD PTR $T146220[ebp+24], ebx
  00764	89 bd 2c 06 00
	00		 mov	 DWORD PTR $T146220[ebp+20], edi
  0076a	c6 85 1c 06 00
	00 00		 mov	 BYTE PTR $T146220[ebp+4], 0
  00771	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL854@SaveFavori:
  00774	8a 11		 mov	 dl, BYTE PTR [ecx]
  00776	41		 inc	 ecx
  00777	84 d2		 test	 dl, dl
  00779	75 f9		 jne	 SHORT $LL854@SaveFavori
  0077b	2b ce		 sub	 ecx, esi
  0077d	51		 push	 ecx
  0077e	50		 push	 eax
  0077f	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR $T146220[ebp]
  00785	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0078a	8d 55 cc	 lea	 edx, DWORD PTR $T146218[ebp]
  0078d	52		 push	 edx
  0078e	8d 85 18 06 00
	00		 lea	 eax, DWORD PTR $T146220[ebp]
  00794	50		 push	 eax
  00795	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  00798	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+12], 21 ; 00000015H
  0079c	e8 00 00 00 00	 call	 ?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CipherShed::BootEncryption::CopyFileAdmin
  007a1	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  007a6	39 b5 30 06 00
	00		 cmp	 DWORD PTR $T146220[ebp+24], esi
  007ac	72 0f		 jb	 SHORT $LN684@SaveFavori
  007ae	8b 8d 1c 06 00
	00		 mov	 ecx, DWORD PTR $T146220[ebp+4]
  007b4	51		 push	 ecx
  007b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007ba	83 c4 04	 add	 esp, 4
$LN684@SaveFavori:
  007bd	89 9d 30 06 00
	00		 mov	 DWORD PTR $T146220[ebp+24], ebx
  007c3	89 bd 2c 06 00
	00		 mov	 DWORD PTR $T146220[ebp+20], edi
  007c9	c6 85 1c 06 00
	00 00		 mov	 BYTE PTR $T146220[ebp+4], 0
  007d0	39 75 e4	 cmp	 DWORD PTR $T146218[ebp+24], esi
  007d3	72 0c		 jb	 SHORT $LN710@SaveFavori
  007d5	8b 55 d0	 mov	 edx, DWORD PTR $T146218[ebp+4]
  007d8	52		 push	 edx
  007d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007de	83 c4 04	 add	 esp, 4
$LN710@SaveFavori:
  007e1	89 5d e4	 mov	 DWORD PTR $T146218[ebp+24], ebx
  007e4	89 7d e0	 mov	 DWORD PTR $T146218[ebp+20], edi
  007e7	c6 45 d0 00	 mov	 BYTE PTR $T146218[ebp+4], 0
  007eb	39 75 c8	 cmp	 DWORD PTR $T146219[ebp+24], esi
  007ee	72 0c		 jb	 SHORT $LN736@SaveFavori
  007f0	8b 45 b4	 mov	 eax, DWORD PTR $T146219[ebp+4]
  007f3	50		 push	 eax
  007f4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007f9	83 c4 04	 add	 esp, 4
$LN736@SaveFavori:

; 735  : 
; 736  : 					if (!(ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES))

  007fc	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00801	a8 02		 test	 al, 2
  00803	75 0d		 jne	 SHORT $LN5@SaveFavori

; 737  : 						Info ("SYS_FAVORITE_VOLUMES_SAVED");

  00805	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JLAFANLF@SYS_FAVORITE_VOLUMES_SAVED?$AA@
  0080a	e8 00 00 00 00	 call	 _Info
  0080f	83 c4 04	 add	 esp, 4
$LN5@SaveFavori:
  00812	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 13 ; 0000000dH
$LN67@SaveFavori:

; 744  : 		}

  00819	e8 00 00 00 00	 call	 ??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ ; `CipherShed::SaveFavoriteVolumes'::`32'::Finally721::~Finally721
  0081e	8a 9d 40 0e 00
	00		 mov	 bl, BYTE PTR _systemFavorites$[ebp]
  00824	33 ff		 xor	 edi, edi
$LN9@SaveFavori:

; 745  : 
; 746  : 		if (cnt == 0)

  00826	39 7d ec	 cmp	 DWORD PTR _cnt$[ebp], edi
  00829	0f 85 da 00 00
	00		 jne	 $LN1@SaveFavori

; 747  : 		{
; 748  : 			if (systemFavorites)

  0082f	84 db		 test	 bl, bl
  00831	0f 84 bf 00 00
	00		 je	 $LN3@SaveFavori

; 749  : 			{
; 750  : 				try
; 751  : 				{
; 752  : 					bootEnc.DeleteFileAdmin (GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str());

  00837	8d 4d b0	 lea	 ecx, DWORD PTR $T146222[ebp]
  0083a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  0083f	51		 push	 ecx
  00840	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+12], 23 ; 00000017H
  00844	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  00849	83 c4 08	 add	 esp, 8
  0084c	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00850	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+12], 24 ; 00000018H
  00854	72 22		 jb	 SHORT $LN750@SaveFavori
  00856	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00859	eb 20		 jmp	 SHORT $LN751@SaveFavori
__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$3:

; 738  : 				}
; 739  : 			}
; 740  : 			catch (Exception &e)
; 741  : 			{
; 742  : 				e.Show (NULL);

  0085b	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _e$118489[ebp]
  00861	8b 11		 mov	 edx, DWORD PTR [ecx]
  00863	8b 02		 mov	 eax, DWORD PTR [edx]
  00865	6a 00		 push	 0
  00867	ff d0		 call	 eax

; 743  : 			}

  00869	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  00870	b8 00 00 00 00	 mov	 eax, $LN68@SaveFavori
  00875	c3		 ret	 0
$LN68@SaveFavori:
  00876	eb a1		 jmp	 SHORT $LN67@SaveFavori

; 749  : 			{
; 750  : 				try
; 751  : 				{
; 752  : 					bootEnc.DeleteFileAdmin (GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str());

$LN750@SaveFavori:
  00878	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN751@SaveFavori:
  0087b	33 db		 xor	 ebx, ebx
  0087d	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00882	8b c2		 mov	 eax, edx
  00884	89 7d e4	 mov	 DWORD PTR $T146221[ebp+24], edi
  00887	89 5d e0	 mov	 DWORD PTR $T146221[ebp+20], ebx
  0088a	88 5d d0	 mov	 BYTE PTR $T146221[ebp+4], bl
  0088d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL855@SaveFavori:
  00890	8a 08		 mov	 cl, BYTE PTR [eax]
  00892	40		 inc	 eax
  00893	84 c9		 test	 cl, cl
  00895	75 f9		 jne	 SHORT $LL855@SaveFavori
  00897	2b c6		 sub	 eax, esi
  00899	50		 push	 eax
  0089a	52		 push	 edx
  0089b	8d 4d cc	 lea	 ecx, DWORD PTR $T146221[ebp]
  0089e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  008a3	8d 55 cc	 lea	 edx, DWORD PTR $T146221[ebp]
  008a6	52		 push	 edx
  008a7	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  008aa	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+12], 25 ; 00000019H
  008ae	e8 00 00 00 00	 call	 ?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::DeleteFileAdmin
  008b3	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  008b8	39 75 e4	 cmp	 DWORD PTR $T146221[ebp+24], esi
  008bb	72 0c		 jb	 SHORT $LN804@SaveFavori
  008bd	8b 45 d0	 mov	 eax, DWORD PTR $T146221[ebp+4]
  008c0	50		 push	 eax
  008c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008c6	83 c4 04	 add	 esp, 4
$LN804@SaveFavori:
  008c9	89 7d e4	 mov	 DWORD PTR $T146221[ebp+24], edi
  008cc	89 5d e0	 mov	 DWORD PTR $T146221[ebp+20], ebx
  008cf	c6 45 d0 00	 mov	 BYTE PTR $T146221[ebp+4], 0
  008d3	39 75 c8	 cmp	 DWORD PTR $T146222[ebp+24], esi
  008d6	72 0c		 jb	 SHORT $LN830@SaveFavori
  008d8	8b 4d b4	 mov	 ecx, DWORD PTR $T146222[ebp+4]
  008db	51		 push	 ecx
  008dc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008e1	83 c4 04	 add	 esp, 4
$LN830@SaveFavori:
  008e4	89 7d c8	 mov	 DWORD PTR $T146222[ebp+24], edi
  008e7	89 5d c4	 mov	 DWORD PTR $T146222[ebp+20], ebx
  008ea	c6 45 b4 00	 mov	 BYTE PTR $T146222[ebp+4], 0
$LN70@SaveFavori:

; 755  : 			}
; 756  : 			else

  008ee	eb 19		 jmp	 SHORT $LN1@SaveFavori
__catch$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$5:

; 753  : 				}
; 754  : 				catch (...) { }

  008f0	b8 00 00 00 00	 mov	 eax, $LN70@SaveFavori
  008f5	c3		 ret	 0
$LN3@SaveFavori:

; 757  : 				remove (GetConfigPath (TC_APPD_FILENAME_FAVORITE_VOLUMES));

  008f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@
  008fb	e8 00 00 00 00	 call	 _GetConfigPath
  00900	50		 push	 eax
  00901	e8 00 00 00 00	 call	 _remove
  00906	83 c4 08	 add	 esp, 8
$LN1@SaveFavori:

; 758  : 		}
; 759  : 
; 760  : 		return true;

  00909	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  0090c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00913	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00918	b0 01		 mov	 al, 1
$LN27@SaveFavori:

; 761  : 	}

  0091a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0091d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00924	59		 pop	 ecx
  00925	5f		 pop	 edi
  00926	5e		 pop	 esi
  00927	5b		 pop	 ebx
  00928	8b 8d 34 0e 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0092e	33 cd		 xor	 ecx, ebp
  00930	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00935	81 c5 38 0e 00
	00		 add	 ebp, 3640		; 00000e38H
  0093b	8b e5		 mov	 esp, ebp
  0093d	5d		 pop	 ebp
  0093e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$7:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _$S10$118399[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$8:
  0000b	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T146205[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$9:
  00016	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T146206[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$10:
  00021	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _s$118416[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$11:
  0002c	8d 4d b0	 lea	 ecx, DWORD PTR $T146207[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$12:
  00034	8d 4d cc	 lea	 ecx, DWORD PTR $T146208[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$13:
  0003c	8d 4d cc	 lea	 ecx, DWORD PTR $T146209[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$14:
  00044	8d 4d b0	 lea	 ecx, DWORD PTR $T146210[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$15:
  0004c	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T146211[ebp]
  00052	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$16:
  00057	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T146212[ebp]
  0005d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$17:
  00062	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$[ebp]
  00065	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$18:
  0006a	e9 00 00 00 00	 jmp	 ??1Finally721@?CA@??SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z@QAE@XZ ; `CipherShed::SaveFavoriteVolumes'::`32'::Finally721::~Finally721
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$19:
  0006f	8d 4d b0	 lea	 ecx, DWORD PTR $T146216[ebp]
  00072	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$20:
  00077	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR $T146215[ebp]
  0007d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$21:
  00082	8d 4d b0	 lea	 ecx, DWORD PTR $T146219[ebp]
  00085	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$22:
  0008a	8d 4d cc	 lea	 ecx, DWORD PTR $T146218[ebp]
  0008d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$23:
  00092	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR $T146220[ebp]
  00098	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$24:
  0009d	8d 4d b0	 lea	 ecx, DWORD PTR $T146222[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z$25:
  000a5	8d 4d cc	 lea	 ecx, DWORD PTR $T146221[ebp]
  000a8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z:
  000ad	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b1	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b4	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  000ba	33 c8		 xor	 ecx, eax
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b 8a 40 0e 00
	00		 mov	 ecx, DWORD PTR [edx+3648]
  000c7	33 c8		 xor	 ecx, eax
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z
  000d3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z ENDP ; CipherShed::SaveFavoriteVolumes
PUBLIC	?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
$T149399 = -8						; size = 1
$T149369 = -8						; size = 8
__Cat$149402 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 810  : 		if (size() < capacity())

  00009	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0000c	85 ed		 test	 ebp, ebp
  0000e	75 04		 jne	 SHORT $LN9@push_back
  00010	33 f6		 xor	 esi, esi
  00012	eb 18		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00014	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00017	2b cd		 sub	 ecx, ebp
  00019	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0001e	f7 e9		 imul	 ecx
  00020	03 d1		 add	 edx, ecx
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b f2		 mov	 esi, edx
  00027	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0002a	03 f2		 add	 esi, edx
$LN10@push_back:
  0002c	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0002f	8b cb		 mov	 ecx, ebx
  00031	2b cd		 sub	 ecx, ebp
  00033	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00038	f7 e9		 imul	 ecx
  0003a	03 d1		 add	 edx, ecx
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	3b c6		 cmp	 eax, esi
  00048	73 33		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  0004a	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$149402[esp+20]
  0004e	c6 44 24 10 00	 mov	 BYTE PTR $T149399[esp+24], 0
  00053	8b 4c 24 10	 mov	 ecx, DWORD PTR $T149399[esp+24]
  00057	51		 push	 ecx
  00058	8b 4c 24 20	 mov	 ecx, DWORD PTR __Val$[esp+24]
  0005c	52		 push	 edx
  0005d	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00060	50		 push	 eax
  00061	51		 push	 ecx
  00062	6a 01		 push	 1
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 c3 78	 add	 ebx, 120		; 00000078H
  00070	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5d		 pop	 ebp
  00076	5b		 pop	 ebx

; 824  : 		}

  00077	83 c4 08	 add	 esp, 8
  0007a	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0007d	3b eb		 cmp	 ebp, ebx
  0007f	76 05		 jbe	 SHORT $LN23@push_back
  00081	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@push_back:
  00086	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp+20]
  0008a	8b 07		 mov	 eax, DWORD PTR [edi]
  0008c	52		 push	 edx
  0008d	53		 push	 ebx
  0008e	50		 push	 eax
  0008f	8d 44 24 1c	 lea	 eax, DWORD PTR $T149369[esp+36]
  00093	50		 push	 eax
  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 ?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5d		 pop	 ebp
  0009e	5b		 pop	 ebx

; 824  : 		}

  0009f	83 c4 08	 add	 esp, 8
  000a2	c2 04 00	 ret	 4
?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T149482 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T149482[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??_C@_02EKJJMPLG@?$HN?2?$AA@			; `string'
PUBLIC	??_C@_0N@GAADCGJD@mountOnLogOn?$AA@		; `string'
PUBLIC	??_C@_0P@BNAHGHLI@mountOnArrival?$AA@		; `string'
PUBLIC	??_C@_0BD@FMMJHNKO@openExplorerWindow?$AA@	; `string'
PUBLIC	??_C@_0O@KADIAEN@noHotKeyMount?$AA@		; `string'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	??_C@_09HPGMKNKO@removable?$AA@			; `string'
PUBLIC	??_C@_08JOKHDEJH@readonly?$AA@			; `string'
PUBLIC	??_C@_05IDCCNNGI@label?$AA@			; `string'
PUBLIC	??_C@_0L@BHNCAFPG@mountpoint?$AA@		; `string'
PUBLIC	??_C@_06EMCPHFGM@volume?$AA@			; `string'
PUBLIC	_favorites$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ; CipherShed::LoadFavoriteVolumes
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
EXTRN	_free:PROC
EXTRN	?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:PROC ; VolumeGuidPathToDevicePath
EXTRN	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:PROC ; WideToSingleString
EXTRN	?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; Utf8StringToWide
EXTRN	_XmlGetNodeText:PROC
EXTRN	_XmlGetAttributeText:PROC
EXTRN	_XmlFindElement:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	_LoadFile:PROC
EXTRN	_IsAdmin:PROC
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_02EKJJMPLG@?$HN?2?$AA@
CONST	SEGMENT
??_C@_02EKJJMPLG@?$HN?2?$AA@ DB '}\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GAADCGJD@mountOnLogOn?$AA@
CONST	SEGMENT
??_C@_0N@GAADCGJD@mountOnLogOn?$AA@ DB 'mountOnLogOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BNAHGHLI@mountOnArrival?$AA@
CONST	SEGMENT
??_C@_0P@BNAHGHLI@mountOnArrival?$AA@ DB 'mountOnArrival', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FMMJHNKO@openExplorerWindow?$AA@
CONST	SEGMENT
??_C@_0BD@FMMJHNKO@openExplorerWindow?$AA@ DB 'openExplorerWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KADIAEN@noHotKeyMount?$AA@
CONST	SEGMENT
??_C@_0O@KADIAEN@noHotKeyMount?$AA@ DB 'noHotKeyMount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HPGMKNKO@removable?$AA@
CONST	SEGMENT
??_C@_09HPGMKNKO@removable?$AA@ DB 'removable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JOKHDEJH@readonly?$AA@
CONST	SEGMENT
??_C@_08JOKHDEJH@readonly?$AA@ DB 'readonly', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDCCNNGI@label?$AA@
CONST	SEGMENT
??_C@_05IDCCNNGI@label?$AA@ DB 'label', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHNCAFPG@mountpoint?$AA@
CONST	SEGMENT
??_C@_0L@BHNCAFPG@mountpoint?$AA@ DB 'mountpoint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMCPHFGM@volume?$AA@
CONST	SEGMENT
??_C@_06EMCPHFGM@volume?$AA@ DB 'volume', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$17 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	0ffffff84H
	DD	FLAT:__catch$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$0
__tryblocktable$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z DD 05H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$17
__ehfuncinfo$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$4
	DD	04H
	DD	00H
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$6
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$7
	DD	08H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$8
	DD	04H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$9
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$10
	DD	0cH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$11
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$13
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$14
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$16
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z
_TEXT	SEGMENT
$T149492 = -156						; size = 28
_size$ = -128						; size = 4
_e$118144 = -124					; size = 4
$T149489 = -120						; size = 28
$T149496 = -92						; size = 28
$T149488 = -92						; size = 28
_favorites$GSCopy$ = -64				; size = 4
$T149684 = -60						; size = 8
$T149681 = -60						; size = 8
$T149500 = -56						; size = 4
$T149498 = -52						; size = 28
$T149495 = -52						; size = 28
$T149493 = -52						; size = 28
$T149586 = -24						; size = 4
_favoritesXml$ = -24					; size = 4
$T149503 = -20						; size = 4
_boolVal$118167 = -20					; size = 2
__$EHRec$ = -16						; size = 16
_bootEnc$118140 = 0					; size = 1560
_label$118163 = 536					; size = 1024
_favorite$118158 = 1560					; size = 120
_favoritesFilePath$ = 1680				; size = 28
_resolvedPath$118184 = 1708				; size = 28
$T149499 = 1708						; size = 28
$T149497 = 1708						; size = 28
$T149494 = 1708						; size = 28
_mountPoint$ = 1736					; size = 260
_volume$ = 1996						; size = 260
__$ArrayPad$ = 2256					; size = 4
_favorites$ = 2268					; size = 4
_systemFavorites$ = 2272				; size = 1
_noUacElevation$ = 2276					; size = 1
?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z PROC ; CipherShed::LoadFavoriteVolumes, COMDAT

; 502  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 2c f7
	ff ff		 lea	 ebp, DWORD PTR [esp-2260]
  00008	81 ec d4 08 00
	00		 sub	 esp, 2260		; 000008d4H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 d0 08 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b b5 dc 08 00
	00		 mov	 esi, DWORD PTR _favorites$[ebp]
  00045	33 db		 xor	 ebx, ebx
  00047	89 5d ec	 mov	 DWORD PTR $T149503[ebp], ebx

; 503  : 		favorites.clear();

  0004a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 544  : 			favorite.Path = WideToSingleString (Utf8StringToWide (volume));

  0004d	89 75 c0	 mov	 DWORD PTR _favorites$GSCopy$[ebp], esi
  00050	89 45 e8	 mov	 DWORD PTR $T149586[ebp], eax
  00053	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00056	76 05		 jbe	 SHORT $LN55@LoadFavori

; 503  : 		favorites.clear();

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN55@LoadFavori:
  0005d	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	89 45 c4	 mov	 DWORD PTR $T149681[ebp], eax
  00065	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00068	76 05		 jbe	 SHORT $LN74@LoadFavori
  0006a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN74@LoadFavori:
  0006f	8b 4d e8	 mov	 ecx, DWORD PTR $T149586[ebp]
  00072	8b 55 c4	 mov	 edx, DWORD PTR $T149681[ebp]
  00075	8b 06		 mov	 eax, DWORD PTR [esi]
  00077	51		 push	 ecx
  00078	52		 push	 edx
  00079	57		 push	 edi
  0007a	50		 push	 eax
  0007b	8d 45 c4	 lea	 eax, DWORD PTR $T149684[ebp]
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase

; 504  : 		string favoritesFilePath = systemFavorites ? GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES) : GetConfigPath (TC_APPD_FILENAME_FAVORITE_VOLUMES);

  00086	38 9d e0 08 00
	00		 cmp	 BYTE PTR _systemFavorites$[ebp], bl
  0008c	74 1d		 je	 SHORT $LN20@LoadFavori
  0008e	8d 4d a4	 lea	 ecx, DWORD PTR $T149488[ebp]
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  0009c	83 c4 08	 add	 esp, 8
  0009f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000a2	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T149503[ebp], 1
  000a9	eb 49		 jmp	 SHORT $LN793@LoadFavori
$LN20@LoadFavori:
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EGBOIEGJ@Favorite?5Volumes?4xml?$AA@
  000b0	e8 00 00 00 00	 call	 _GetConfigPath
  000b5	8b f0		 mov	 esi, eax
  000b7	8b ce		 mov	 ecx, esi
  000b9	83 c4 04	 add	 esp, 4
  000bc	c7 45 a0 0f 00
	00 00		 mov	 DWORD PTR $T149489[ebp+24], 15 ; 0000000fH
  000c3	89 5d 9c	 mov	 DWORD PTR $T149489[ebp+20], ebx
  000c6	88 5d 8c	 mov	 BYTE PTR $T149489[ebp+4], bl
  000c9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000cc	8d 64 24 00	 npad	 4
$LL783@LoadFavori:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	3a c3		 cmp	 al, bl
  000d5	75 f9		 jne	 SHORT $LL783@LoadFavori
  000d7	2b ca		 sub	 ecx, edx
  000d9	51		 push	 ecx
  000da	56		 push	 esi
  000db	8d 4d 88	 lea	 ecx, DWORD PTR $T149489[ebp]
  000de	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e3	8d 45 88	 lea	 eax, DWORD PTR $T149489[ebp]
  000e6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000ed	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR $T149503[ebp], 2
$LN793@LoadFavori:
  000f4	6a ff		 push	 -1
  000f6	53		 push	 ebx
  000f7	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000fc	50		 push	 eax
  000fd	8d 8d 90 06 00
	00		 lea	 ecx, DWORD PTR _favoritesFilePath$[ebp]
  00103	89 bd a8 06 00
	00		 mov	 DWORD PTR _favoritesFilePath$[ebp+24], edi
  00109	89 9d a4 06 00
	00		 mov	 DWORD PTR _favoritesFilePath$[ebp+20], ebx
  0010f	88 9d 94 06 00
	00		 mov	 BYTE PTR _favoritesFilePath$[ebp+4], bl
  00115	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0011a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00121	f6 45 ec 02	 test	 BYTE PTR $T149503[ebp], 2
  00125	74 1f		 je	 SHORT $LN173@LoadFavori
  00127	83 65 ec fd	 and	 DWORD PTR $T149503[ebp], -3 ; fffffffdH
  0012b	83 7d a0 10	 cmp	 DWORD PTR $T149489[ebp+24], 16 ; 00000010H
  0012f	72 0c		 jb	 SHORT $LN165@LoadFavori
  00131	8b 55 8c	 mov	 edx, DWORD PTR $T149489[ebp+4]
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013a	83 c4 04	 add	 esp, 4
$LN165@LoadFavori:
  0013d	89 7d a0	 mov	 DWORD PTR $T149489[ebp+24], edi
  00140	89 5d 9c	 mov	 DWORD PTR $T149489[ebp+20], ebx
  00143	88 5d 8c	 mov	 BYTE PTR $T149489[ebp+4], bl
$LN173@LoadFavori:
  00146	f6 45 ec 01	 test	 BYTE PTR $T149503[ebp], 1
  0014a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0014e	74 1b		 je	 SHORT $LN199@LoadFavori
  00150	83 7d bc 10	 cmp	 DWORD PTR $T149488[ebp+24], 16 ; 00000010H
  00154	72 0c		 jb	 SHORT $LN191@LoadFavori
  00156	8b 45 a8	 mov	 eax, DWORD PTR $T149488[ebp+4]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015f	83 c4 04	 add	 esp, 4
$LN191@LoadFavori:
  00162	89 7d bc	 mov	 DWORD PTR $T149488[ebp+24], edi
  00165	89 5d b8	 mov	 DWORD PTR $T149488[ebp+20], ebx
  00168	88 5d a8	 mov	 BYTE PTR $T149488[ebp+4], bl
$LN199@LoadFavori:

; 505  : 
; 506  : 		if (systemFavorites && !IsAdmin() && !noUacElevation)

  0016b	38 9d e0 08 00
	00		 cmp	 BYTE PTR _systemFavorites$[ebp], bl
  00171	0f 84 33 01 00
	00		 je	 $LN45@LoadFavori
  00177	e8 00 00 00 00	 call	 _IsAdmin
  0017c	85 c0		 test	 eax, eax
  0017e	0f 85 26 01 00
	00		 jne	 $LN45@LoadFavori
  00184	38 9d e4 08 00
	00		 cmp	 BYTE PTR _noUacElevation$[ebp], bl
  0018a	0f 85 1a 01 00
	00		 jne	 $LN45@LoadFavori

; 507  : 		{
; 508  : 			favoritesFilePath = GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES);

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  00195	e8 00 00 00 00	 call	 _GetConfigPath
  0019a	8b c8		 mov	 ecx, eax
  0019c	83 c4 04	 add	 esp, 4
  0019f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL784@LoadFavori:
  001a2	8a 11		 mov	 dl, BYTE PTR [ecx]
  001a4	41		 inc	 ecx
  001a5	3a d3		 cmp	 dl, bl
  001a7	75 f9		 jne	 SHORT $LL784@LoadFavori
  001a9	2b ce		 sub	 ecx, esi
  001ab	51		 push	 ecx
  001ac	50		 push	 eax
  001ad	8d 8d 90 06 00
	00		 lea	 ecx, DWORD PTR _favoritesFilePath$[ebp]
  001b3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 509  : 
; 510  : 			try
; 511  : 			{
; 512  : 				BootEncryption bootEnc (MainDlg);

  001b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  001be	51		 push	 ecx
  001bf	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$118140[ebp]
  001c2	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  001c6	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 513  : 				bootEnc.CopyFileAdmin (GetServiceConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES).c_str(), favoritesFilePath.c_str());

  001cb	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR _favoritesFilePath$[ebp+4]
  001d1	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  001d6	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  001da	39 b5 a8 06 00
	00		 cmp	 DWORD PTR _favoritesFilePath$[ebp+24], esi
  001e0	73 06		 jae	 SHORT $LN212@LoadFavori
  001e2	8d 85 94 06 00
	00		 lea	 eax, DWORD PTR _favoritesFilePath$[ebp+4]
$LN212@LoadFavori:
  001e8	50		 push	 eax
  001e9	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T149492[ebp]
  001ef	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001f4	8d 95 ac 06 00
	00		 lea	 edx, DWORD PTR $T149494[ebp]
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  001ff	52		 push	 edx
  00200	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00204	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  00209	83 c4 08	 add	 esp, 8
  0020c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  00210	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00213	72 05		 jb	 SHORT $LN217@LoadFavori
  00215	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00218	eb 03		 jmp	 SHORT $LN218@LoadFavori
$LN217@LoadFavori:
  0021a	83 c0 04	 add	 eax, 4
$LN218@LoadFavori:
  0021d	50		 push	 eax
  0021e	8d 4d cc	 lea	 ecx, DWORD PTR $T149493[ebp]
  00221	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00226	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T149492[ebp]
  0022c	50		 push	 eax
  0022d	8d 4d cc	 lea	 ecx, DWORD PTR $T149493[ebp]
  00230	51		 push	 ecx
  00231	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$118140[ebp]
  00234	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  00238	e8 00 00 00 00	 call	 ?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CipherShed::BootEncryption::CopyFileAdmin
  0023d	39 75 e4	 cmp	 DWORD PTR $T149493[ebp+24], esi
  00240	72 0c		 jb	 SHORT $LN235@LoadFavori
  00242	8b 55 d0	 mov	 edx, DWORD PTR $T149493[ebp+4]
  00245	52		 push	 edx
  00246	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0024b	83 c4 04	 add	 esp, 4
$LN235@LoadFavori:
  0024e	89 7d e4	 mov	 DWORD PTR $T149493[ebp+24], edi
  00251	89 5d e0	 mov	 DWORD PTR $T149493[ebp+20], ebx
  00254	88 5d d0	 mov	 BYTE PTR $T149493[ebp+4], bl
  00257	39 b5 c4 06 00
	00		 cmp	 DWORD PTR $T149494[ebp+24], esi
  0025d	72 0f		 jb	 SHORT $LN261@LoadFavori
  0025f	8b 85 b0 06 00
	00		 mov	 eax, DWORD PTR $T149494[ebp+4]
  00265	50		 push	 eax
  00266	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026b	83 c4 04	 add	 esp, 4
$LN261@LoadFavori:
  0026e	89 bd c4 06 00
	00		 mov	 DWORD PTR $T149494[ebp+24], edi
  00274	89 9d c0 06 00
	00		 mov	 DWORD PTR $T149494[ebp+20], ebx
  0027a	88 9d b0 06 00
	00		 mov	 BYTE PTR $T149494[ebp+4], bl
  00280	39 b5 7c ff ff
	ff		 cmp	 DWORD PTR $T149492[ebp+24], esi
  00286	72 0f		 jb	 SHORT $LN287@LoadFavori
  00288	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR $T149492[ebp+4]
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00294	83 c4 04	 add	 esp, 4
$LN287@LoadFavori:

; 514  : 			}

  00297	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$118140[ebp]
  0029a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0029e	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  002a3	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
$LN45@LoadFavori:

; 521  : 			}
; 522  : 		}
; 523  : 
; 524  : 		DWORD size;
; 525  : 		char *favoritesXml = LoadFile (favoritesFilePath.c_str(), &size);

  002aa	83 bd a8 06 00
	00 10		 cmp	 DWORD PTR _favoritesFilePath$[ebp+24], 16 ; 00000010H
  002b1	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR _favoritesFilePath$[ebp+4]
  002b7	73 06		 jae	 SHORT $LN302@LoadFavori
  002b9	8d 85 94 06 00
	00		 lea	 eax, DWORD PTR _favoritesFilePath$[ebp+4]
$LN302@LoadFavori:
  002bf	8d 4d 80	 lea	 ecx, DWORD PTR _size$[ebp]
  002c2	51		 push	 ecx
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 _LoadFile
  002c9	83 c4 08	 add	 esp, 8
  002cc	8b f0		 mov	 esi, eax
  002ce	89 75 e8	 mov	 DWORD PTR _favoritesXml$[ebp], esi

; 526  : 
; 527  : 		if (systemFavorites && !IsAdmin() && !noUacElevation)

  002d1	38 9d e0 08 00
	00		 cmp	 BYTE PTR _systemFavorites$[ebp], bl
  002d7	74 25		 je	 SHORT $LN14@LoadFavori
  002d9	e8 00 00 00 00	 call	 _IsAdmin
  002de	85 c0		 test	 eax, eax
  002e0	75 1c		 jne	 SHORT $LN14@LoadFavori
  002e2	38 9d e4 08 00
	00		 cmp	 BYTE PTR _noUacElevation$[ebp], bl
  002e8	75 14		 jne	 SHORT $LN14@LoadFavori

; 528  : 			DeleteFile (GetConfigPath (TC_APPD_FILENAME_SYSTEM_FAVORITE_VOLUMES));

  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EGPGHNFL@TrueCrypt?5System?5Favorite?5Volume@
  002ef	e8 00 00 00 00	 call	 _GetConfigPath
  002f4	83 c4 04	 add	 esp, 4
  002f7	50		 push	 eax
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
$LN14@LoadFavori:

; 529  : 
; 530  : 		char *xml = favoritesXml;
; 531  : 		char mountPoint[MAX_PATH], volume[MAX_PATH];
; 532  : 
; 533  : 		if (xml == NULL)

  002fe	3b f3		 cmp	 esi, ebx
  00300	75 41		 jne	 SHORT $LN781@LoadFavori

; 534  : 			return;

  00302	83 bd a8 06 00
	00 10		 cmp	 DWORD PTR _favoritesFilePath$[ebp+24], 16 ; 00000010H
  00309	0f 82 f7 04 00
	00		 jb	 $LN769@LoadFavori
  0030f	8b 95 94 06 00
	00		 mov	 edx, DWORD PTR _favoritesFilePath$[ebp+4]
  00315	52		 push	 edx
  00316	e9 e3 04 00 00	 jmp	 $LN794@LoadFavori
__catch$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$0:

; 515  : 			catch (SystemException &e)
; 516  : 			{
; 517  : 				if (e.ErrorCode == ERROR_FILE_NOT_FOUND)

  0031b	8b 55 84	 mov	 edx, DWORD PTR _e$118144[ebp]
  0031e	83 7a 04 02	 cmp	 DWORD PTR [edx+4], 2
  00322	75 16		 jne	 SHORT $LN15@LoadFavori

; 518  : 					return;

  00324	b8 00 00 00 00	 mov	 eax, $LN44@LoadFavori
  00329	c3		 ret	 0
$LN44@LoadFavori:
  0032a	8d 8d 90 06 00
	00		 lea	 ecx, DWORD PTR _favoritesFilePath$[ebp]
  00330	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00335	e9 cc 04 00 00	 jmp	 $LN769@LoadFavori
$LN15@LoadFavori:

; 519  : 
; 520  : 				throw;

  0033a	33 db		 xor	 ebx, ebx
  0033c	53		 push	 ebx
  0033d	53		 push	 ebx
  0033e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN781@LoadFavori:

; 535  : 
; 536  : 		while (xml = XmlFindElement (xml, "volume"))

  00343	68 00 00 00 00	 push	 OFFSET ??_C@_06EMCPHFGM@volume?$AA@
  00348	56		 push	 esi
  00349	e8 00 00 00 00	 call	 _XmlFindElement
  0034e	8b f0		 mov	 esi, eax
  00350	83 c4 08	 add	 esp, 8
  00353	3b f3		 cmp	 esi, ebx
  00355	0f 84 87 04 00
	00		 je	 $LN11@LoadFavori
  0035b	eb 03 8d 49 00	 npad	 5
$LL12@LoadFavori:

; 537  : 		{
; 538  : 			FavoriteVolume favorite;

  00360	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00365	89 85 30 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+24], eax
  0036b	89 85 4c 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+52], eax
  00371	89 85 68 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+80], eax
  00377	33 c0		 xor	 eax, eax
  00379	89 9d 2c 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+20], ebx
  0037f	88 9d 1c 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+4], bl
  00385	89 9d 48 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+48], ebx
  0038b	88 9d 38 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+32], bl
  00391	89 9d 64 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+76], ebx
  00397	88 9d 54 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+60], bl
  0039d	c7 85 84 06 00
	00 07 00 00 00	 mov	 DWORD PTR _favorite$118158[ebp+108], 7
  003a7	89 9d 80 06 00
	00		 mov	 DWORD PTR _favorite$118158[ebp+104], ebx
  003ad	66 89 85 70 06
	00 00		 mov	 WORD PTR _favorite$118158[ebp+88], ax
  003b4	88 9d 88 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+112], bl
  003ba	88 9d 89 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+113], bl
  003c0	88 9d 8a 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+114], bl
  003c6	88 9d 8b 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+115], bl
  003cc	88 9d 8c 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+116], bl
  003d2	88 9d 8d 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+117], bl
  003d8	88 9d 8e 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+118], bl
  003de	88 9d 8f 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+119], bl

; 539  : 
; 540  : 			XmlGetAttributeText (xml, "mountpoint", mountPoint, sizeof (mountPoint));

  003e4	68 04 01 00 00	 push	 260			; 00000104H
  003e9	8d 8d c8 06 00
	00		 lea	 ecx, DWORD PTR _mountPoint$[ebp]
  003ef	51		 push	 ecx
  003f0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BHNCAFPG@mountpoint?$AA@
  003f5	56		 push	 esi
  003f6	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  003fa	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 541  : 			favorite.MountPoint = mountPoint;

  003ff	8d 85 c8 06 00
	00		 lea	 eax, DWORD PTR _mountPoint$[ebp]
  00405	83 c4 10	 add	 esp, 16			; 00000010H
  00408	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0040b	eb 03 8d 49 00	 npad	 5
$LL785@LoadFavori:
  00410	8a 08		 mov	 cl, BYTE PTR [eax]
  00412	40		 inc	 eax
  00413	3a cb		 cmp	 cl, bl
  00415	75 f9		 jne	 SHORT $LL785@LoadFavori
  00417	2b c7		 sub	 eax, edi
  00419	50		 push	 eax
  0041a	8d 95 c8 06 00
	00		 lea	 edx, DWORD PTR _mountPoint$[ebp]
  00420	52		 push	 edx
  00421	8d 8d 34 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp+28]
  00427	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 542  : 
; 543  : 			XmlGetNodeText (xml, volume, sizeof (volume));

  0042c	68 04 01 00 00	 push	 260			; 00000104H
  00431	8d 85 cc 07 00
	00		 lea	 eax, DWORD PTR _volume$[ebp]
  00437	50		 push	 eax
  00438	56		 push	 esi
  00439	e8 00 00 00 00	 call	 _XmlGetNodeText

; 544  : 			favorite.Path = WideToSingleString (Utf8StringToWide (volume));

  0043e	8d 85 cc 07 00
	00		 lea	 eax, DWORD PTR _volume$[ebp]
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH
  00447	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR $T149495[ebp+24], 15 ; 0000000fH
  0044e	89 5d e0	 mov	 DWORD PTR $T149495[ebp+20], ebx
  00451	88 5d d0	 mov	 BYTE PTR $T149495[ebp+4], bl
  00454	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL786@LoadFavori:
  00457	8a 08		 mov	 cl, BYTE PTR [eax]
  00459	40		 inc	 eax
  0045a	3a cb		 cmp	 cl, bl
  0045c	75 f9		 jne	 SHORT $LL786@LoadFavori
  0045e	2b c7		 sub	 eax, edi
  00460	50		 push	 eax
  00461	8d 8d cc 07 00
	00		 lea	 ecx, DWORD PTR _volume$[ebp]
  00467	51		 push	 ecx
  00468	8d 4d cc	 lea	 ecx, DWORD PTR $T149495[ebp]
  0046b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00470	8d 55 cc	 lea	 edx, DWORD PTR $T149495[ebp]
  00473	52		 push	 edx
  00474	8d 45 a4	 lea	 eax, DWORD PTR $T149496[ebp]
  00477	50		 push	 eax
  00478	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  0047c	e8 00 00 00 00	 call	 ?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Utf8StringToWide
  00481	50		 push	 eax
  00482	8d 8d ac 06 00
	00		 lea	 ecx, DWORD PTR $T149497[ebp]
  00488	51		 push	 ecx
  00489	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  0048d	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  00492	83 c4 10	 add	 esp, 16			; 00000010H
  00495	6a ff		 push	 -1
  00497	53		 push	 ebx
  00498	50		 push	 eax
  00499	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  0049f	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  004a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  004a8	83 bd c4 06 00
	00 10		 cmp	 DWORD PTR $T149497[ebp+24], 16 ; 00000010H
  004af	72 0f		 jb	 SHORT $LN523@LoadFavori
  004b1	8b 95 b0 06 00
	00		 mov	 edx, DWORD PTR $T149497[ebp+4]
  004b7	52		 push	 edx
  004b8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004bd	83 c4 04	 add	 esp, 4
$LN523@LoadFavori:
  004c0	83 7d bc 08	 cmp	 DWORD PTR $T149496[ebp+24], 8
  004c4	c7 85 c4 06 00
	00 0f 00 00 00	 mov	 DWORD PTR $T149497[ebp+24], 15 ; 0000000fH
  004ce	89 9d c0 06 00
	00		 mov	 DWORD PTR $T149497[ebp+20], ebx
  004d4	88 9d b0 06 00
	00		 mov	 BYTE PTR $T149497[ebp+4], bl
  004da	72 0c		 jb	 SHORT $LN551@LoadFavori
  004dc	8b 45 a8	 mov	 eax, DWORD PTR $T149496[ebp+4]
  004df	50		 push	 eax
  004e0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004e5	83 c4 04	 add	 esp, 4
$LN551@LoadFavori:
  004e8	33 c9		 xor	 ecx, ecx
  004ea	83 7d e4 10	 cmp	 DWORD PTR $T149495[ebp+24], 16 ; 00000010H
  004ee	c7 45 bc 07 00
	00 00		 mov	 DWORD PTR $T149496[ebp+24], 7
  004f5	89 5d b8	 mov	 DWORD PTR $T149496[ebp+20], ebx
  004f8	66 89 4d a8	 mov	 WORD PTR $T149496[ebp+4], cx
  004fc	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00500	72 0c		 jb	 SHORT $LN577@LoadFavori
  00502	8b 55 d0	 mov	 edx, DWORD PTR $T149495[ebp+4]
  00505	52		 push	 edx
  00506	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0050b	83 c4 04	 add	 esp, 4
$LN577@LoadFavori:

; 545  : 
; 546  : 			char label[1024];
; 547  : 			XmlGetAttributeText (xml, "label", label, sizeof (label));

  0050e	68 00 04 00 00	 push	 1024			; 00000400H
  00513	8d 85 18 02 00
	00		 lea	 eax, DWORD PTR _label$118163[ebp]
  00519	50		 push	 eax
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_05IDCCNNGI@label?$AA@
  0051f	56		 push	 esi
  00520	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 548  : 			favorite.Label = Utf8StringToWide (label);

  00525	8d 85 18 02 00
	00		 lea	 eax, DWORD PTR _label$118163[ebp]
  0052b	83 c4 10	 add	 esp, 16			; 00000010H
  0052e	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR $T149498[ebp+24], 15 ; 0000000fH
  00535	89 5d e0	 mov	 DWORD PTR $T149498[ebp+20], ebx
  00538	88 5d d0	 mov	 BYTE PTR $T149498[ebp+4], bl
  0053b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0053e	8b ff		 npad	 2
$LL787@LoadFavori:
  00540	8a 08		 mov	 cl, BYTE PTR [eax]
  00542	40		 inc	 eax
  00543	3a cb		 cmp	 cl, bl
  00545	75 f9		 jne	 SHORT $LL787@LoadFavori
  00547	2b c7		 sub	 eax, edi
  00549	50		 push	 eax
  0054a	8d 8d 18 02 00
	00		 lea	 ecx, DWORD PTR _label$118163[ebp]
  00550	51		 push	 ecx
  00551	8d 4d cc	 lea	 ecx, DWORD PTR $T149498[ebp]
  00554	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00559	8d 55 cc	 lea	 edx, DWORD PTR $T149498[ebp]
  0055c	52		 push	 edx
  0055d	8d 85 ac 06 00
	00		 lea	 eax, DWORD PTR $T149499[ebp]
  00563	50		 push	 eax
  00564	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+12], 15 ; 0000000fH
  00568	e8 00 00 00 00	 call	 ?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Utf8StringToWide
  0056d	83 c4 08	 add	 esp, 8
  00570	6a ff		 push	 -1
  00572	53		 push	 ebx
  00573	50		 push	 eax
  00574	8d 8d 6c 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp+84]
  0057a	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  0057e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00583	83 bd c4 06 00
	00 08		 cmp	 DWORD PTR $T149499[ebp+24], 8
  0058a	72 0f		 jb	 SHORT $LN645@LoadFavori
  0058c	8b 8d b0 06 00
	00		 mov	 ecx, DWORD PTR $T149499[ebp+4]
  00592	51		 push	 ecx
  00593	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00598	83 c4 04	 add	 esp, 4
$LN645@LoadFavori:
  0059b	33 d2		 xor	 edx, edx
  0059d	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  005a2	c7 85 c4 06 00
	00 07 00 00 00	 mov	 DWORD PTR $T149499[ebp+24], 7
  005ac	89 9d c0 06 00
	00		 mov	 DWORD PTR $T149499[ebp+20], ebx
  005b2	66 89 95 b0 06
	00 00		 mov	 WORD PTR $T149499[ebp+4], dx
  005b9	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  005bd	39 7d e4	 cmp	 DWORD PTR $T149498[ebp+24], edi
  005c0	72 0c		 jb	 SHORT $LN671@LoadFavori
  005c2	8b 45 d0	 mov	 eax, DWORD PTR $T149498[ebp+4]
  005c5	50		 push	 eax
  005c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005cb	83 c4 04	 add	 esp, 4
$LN671@LoadFavori:

; 549  : 
; 550  : 			char boolVal[2];
; 551  : 			XmlGetAttributeText (xml, "readonly", boolVal, sizeof (boolVal));

  005ce	6a 02		 push	 2
  005d0	8d 4d ec	 lea	 ecx, DWORD PTR _boolVal$118167[ebp]
  005d3	51		 push	 ecx
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_08JOKHDEJH@readonly?$AA@
  005d9	56		 push	 esi
  005da	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 552  : 			if (boolVal[0])

  005df	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  005e2	83 c4 10	 add	 esp, 16			; 00000010H
  005e5	3a c3		 cmp	 al, bl
  005e7	74 0b		 je	 SHORT $LN10@LoadFavori

; 553  : 				favorite.ReadOnly = (boolVal[0] == '1');

  005e9	3c 31		 cmp	 al, 49			; 00000031H
  005eb	0f 94 c2	 sete	 dl
  005ee	88 95 8d 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+117], dl
$LN10@LoadFavori:

; 554  : 
; 555  : 			XmlGetAttributeText (xml, "removable", boolVal, sizeof (boolVal));

  005f4	6a 02		 push	 2
  005f6	8d 45 ec	 lea	 eax, DWORD PTR _boolVal$118167[ebp]
  005f9	50		 push	 eax
  005fa	68 00 00 00 00	 push	 OFFSET ??_C@_09HPGMKNKO@removable?$AA@
  005ff	56		 push	 esi
  00600	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 556  : 			if (boolVal[0])

  00605	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  00608	83 c4 10	 add	 esp, 16			; 00000010H
  0060b	3a c3		 cmp	 al, bl
  0060d	74 0b		 je	 SHORT $LN9@LoadFavori

; 557  : 				favorite.Removable = (boolVal[0] == '1');

  0060f	3c 31		 cmp	 al, 49			; 00000031H
  00611	0f 94 c1	 sete	 cl
  00614	88 8d 8e 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+118], cl
$LN9@LoadFavori:

; 558  : 
; 559  : 			XmlGetAttributeText (xml, "system", boolVal, sizeof (boolVal));

  0061a	6a 02		 push	 2
  0061c	8d 55 ec	 lea	 edx, DWORD PTR _boolVal$118167[ebp]
  0061f	52		 push	 edx
  00620	68 00 00 00 00	 push	 OFFSET ??_C@_06FHFOAHML@system?$AA@
  00625	56		 push	 esi
  00626	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 560  : 			if (boolVal[0])

  0062b	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  0062e	83 c4 10	 add	 esp, 16			; 00000010H
  00631	3a c3		 cmp	 al, bl
  00633	74 0b		 je	 SHORT $LN8@LoadFavori

; 561  : 				favorite.SystemEncryption = (boolVal[0] == '1');

  00635	3c 31		 cmp	 al, 49			; 00000031H
  00637	0f 94 c0	 sete	 al
  0063a	88 85 8f 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+119], al
$LN8@LoadFavori:

; 562  : 
; 563  : 			XmlGetAttributeText (xml, "noHotKeyMount", boolVal, sizeof (boolVal));

  00640	6a 02		 push	 2
  00642	8d 4d ec	 lea	 ecx, DWORD PTR _boolVal$118167[ebp]
  00645	51		 push	 ecx
  00646	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KADIAEN@noHotKeyMount?$AA@
  0064b	56		 push	 esi
  0064c	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 564  : 			if (boolVal[0])

  00651	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  00654	83 c4 10	 add	 esp, 16			; 00000010H
  00657	3a c3		 cmp	 al, bl
  00659	74 0b		 je	 SHORT $LN7@LoadFavori

; 565  : 				favorite.DisableHotkeyMount = (boolVal[0] == '1');

  0065b	3c 31		 cmp	 al, 49			; 00000031H
  0065d	0f 94 c2	 sete	 dl
  00660	88 95 88 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+112], dl
$LN7@LoadFavori:

; 566  : 
; 567  : 			XmlGetAttributeText (xml, "openExplorerWindow", boolVal, sizeof (boolVal));

  00666	6a 02		 push	 2
  00668	8d 45 ec	 lea	 eax, DWORD PTR _boolVal$118167[ebp]
  0066b	50		 push	 eax
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FMMJHNKO@openExplorerWindow?$AA@
  00671	56		 push	 esi
  00672	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 568  : 			if (boolVal[0])

  00677	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  0067a	83 c4 10	 add	 esp, 16			; 00000010H
  0067d	3a c3		 cmp	 al, bl
  0067f	74 0b		 je	 SHORT $LN6@LoadFavori

; 569  : 				favorite.OpenExplorerWindow = (boolVal[0] == '1');

  00681	3c 31		 cmp	 al, 49			; 00000031H
  00683	0f 94 c1	 sete	 cl
  00686	88 8d 8c 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+116], cl
$LN6@LoadFavori:

; 570  : 
; 571  : 			XmlGetAttributeText (xml, "mountOnArrival", boolVal, sizeof (boolVal));

  0068c	6a 02		 push	 2
  0068e	8d 55 ec	 lea	 edx, DWORD PTR _boolVal$118167[ebp]
  00691	52		 push	 edx
  00692	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BNAHGHLI@mountOnArrival?$AA@
  00697	56		 push	 esi
  00698	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 572  : 			if (boolVal[0])

  0069d	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  006a0	83 c4 10	 add	 esp, 16			; 00000010H
  006a3	3a c3		 cmp	 al, bl
  006a5	74 0b		 je	 SHORT $LN5@LoadFavori

; 573  : 				favorite.MountOnArrival = (boolVal[0] == '1');

  006a7	3c 31		 cmp	 al, 49			; 00000031H
  006a9	0f 94 c0	 sete	 al
  006ac	88 85 8b 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+115], al
$LN5@LoadFavori:

; 574  : 
; 575  : 			XmlGetAttributeText (xml, "mountOnLogOn", boolVal, sizeof (boolVal));

  006b2	6a 02		 push	 2
  006b4	8d 4d ec	 lea	 ecx, DWORD PTR _boolVal$118167[ebp]
  006b7	51		 push	 ecx
  006b8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GAADCGJD@mountOnLogOn?$AA@
  006bd	56		 push	 esi
  006be	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 576  : 			if (boolVal[0])

  006c3	8a 45 ec	 mov	 al, BYTE PTR _boolVal$118167[ebp]
  006c6	83 c4 10	 add	 esp, 16			; 00000010H
  006c9	3a c3		 cmp	 al, bl
  006cb	74 0b		 je	 SHORT $LN4@LoadFavori

; 577  : 				favorite.MountOnLogOn = (boolVal[0] == '1');

  006cd	3c 31		 cmp	 al, 49			; 00000031H
  006cf	0f 94 c2	 sete	 dl
  006d2	88 95 8a 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+114], dl
$LN4@LoadFavori:

; 578  : 
; 579  : 			if (favorite.Path.find ("\\\\?\\Volume{") == 0 && favorite.Path.rfind ("}\\") == favorite.Path.size() - 2)

  006d8	6a 0b		 push	 11			; 0000000bH
  006da	53		 push	 ebx
  006db	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  006e0	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  006e6	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  006eb	85 c0		 test	 eax, eax
  006ed	0f 85 b8 00 00
	00		 jne	 $LN743@LoadFavori
  006f3	6a 02		 push	 2
  006f5	6a ff		 push	 -1
  006f7	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  006fc	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  00702	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00707	8b 8d 2c 06 00
	00		 mov	 ecx, DWORD PTR _favorite$118158[ebp+20]
  0070d	83 c1 fe	 add	 ecx, -2			; fffffffeH
  00710	3b c1		 cmp	 eax, ecx
  00712	0f 85 93 00 00
	00		 jne	 $LN743@LoadFavori

; 580  : 			{
; 581  : 				string resolvedPath = VolumeGuidPathToDevicePath (favorite.Path);

  00718	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0071b	8b cc		 mov	 ecx, esp
  0071d	89 65 c8	 mov	 DWORD PTR $T149500[ebp], esp
  00720	6a ff		 push	 -1
  00722	53		 push	 ebx
  00723	8d 95 18 06 00
	00		 lea	 edx, DWORD PTR _favorite$118158[ebp]
  00729	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00730	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00733	52		 push	 edx
  00734	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00737	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0073c	8d 85 ac 06 00
	00		 lea	 eax, DWORD PTR _resolvedPath$118184[ebp]
  00742	50		 push	 eax
  00743	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  00748	83 c4 20	 add	 esp, 32			; 00000020H
  0074b	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+12], 17 ; 00000011H

; 582  : 				if (!resolvedPath.empty())

  0074f	39 9d c0 06 00
	00		 cmp	 DWORD PTR _resolvedPath$118184[ebp+20], ebx
  00755	74 32		 je	 SHORT $LN2@LoadFavori

; 583  : 				{
; 584  : 					favorite.DisconnectedDevice = false;
; 585  : 					favorite.VolumePathId = favorite.Path;

  00757	6a ff		 push	 -1
  00759	53		 push	 ebx
  0075a	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  00760	51		 push	 ecx
  00761	8d 8d 50 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp+56]
  00767	88 9d 89 06 00
	00		 mov	 BYTE PTR _favorite$118158[ebp+113], bl
  0076d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 586  : 					favorite.Path = resolvedPath;

  00772	6a ff		 push	 -1
  00774	53		 push	 ebx
  00775	8d 95 ac 06 00
	00		 lea	 edx, DWORD PTR _resolvedPath$118184[ebp]
  0077b	52		 push	 edx
  0077c	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  00782	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 587  : 				}
; 588  : 				else

  00787	eb 07		 jmp	 SHORT $LN1@LoadFavori
$LN2@LoadFavori:

; 589  : 					favorite.DisconnectedDevice = true;

  00789	c6 85 89 06 00
	00 01		 mov	 BYTE PTR _favorite$118158[ebp+113], 1
$LN1@LoadFavori:

; 590  : 			}

  00790	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00794	39 bd c4 06 00
	00		 cmp	 DWORD PTR _resolvedPath$118184[ebp+24], edi
  0079a	72 0f		 jb	 SHORT $LN743@LoadFavori
  0079c	8b 85 b0 06 00
	00		 mov	 eax, DWORD PTR _resolvedPath$118184[ebp+4]
  007a2	50		 push	 eax
  007a3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007a8	83 c4 04	 add	 esp, 4
$LN743@LoadFavori:

; 591  : 
; 592  : 			favorites.push_back (favorite);

  007ab	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  007b1	51		 push	 ecx
  007b2	8b 4d c0	 mov	 ecx, DWORD PTR _favorites$GSCopy$[ebp]
  007b5	e8 00 00 00 00	 call	 ?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back

; 593  : 			xml++;
; 594  : 		}

  007ba	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  007c0	46		 inc	 esi
  007c1	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  007c5	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  007ca	68 00 00 00 00	 push	 OFFSET ??_C@_06EMCPHFGM@volume?$AA@
  007cf	56		 push	 esi
  007d0	e8 00 00 00 00	 call	 _XmlFindElement
  007d5	8b f0		 mov	 esi, eax
  007d7	83 c4 08	 add	 esp, 8
  007da	3b f3		 cmp	 esi, ebx
  007dc	0f 85 7e fb ff
	ff		 jne	 $LL12@LoadFavori
$LN11@LoadFavori:

; 595  : 
; 596  : 		free (favoritesXml);

  007e2	8b 55 e8	 mov	 edx, DWORD PTR _favoritesXml$[ebp]
  007e5	52		 push	 edx
  007e6	e8 00 00 00 00	 call	 _free
  007eb	83 c4 04	 add	 esp, 4

; 597  : 	}

  007ee	83 bd a8 06 00
	00 10		 cmp	 DWORD PTR _favoritesFilePath$[ebp+24], 16 ; 00000010H
  007f5	72 0f		 jb	 SHORT $LN769@LoadFavori
  007f7	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR _favoritesFilePath$[ebp+4]
  007fd	50		 push	 eax
$LN794@LoadFavori:
  007fe	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00803	83 c4 04	 add	 esp, 4
$LN769@LoadFavori:
  00806	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00809	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00810	59		 pop	 ecx
  00811	5f		 pop	 edi
  00812	5e		 pop	 esi
  00813	5b		 pop	 ebx
  00814	8b 8d d0 08 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0081a	33 cd		 xor	 ecx, ebp
  0081c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00821	81 c5 d4 08 00
	00		 add	 ebp, 2260		; 000008d4H
  00827	8b e5		 mov	 esp, ebp
  00829	5d		 pop	 ebp
  0082a	c3		 ret	 0
$LN792@LoadFavori:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$2:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T149503[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN25@LoadFavori
  0000c	83 65 ec fe	 and	 DWORD PTR $T149503[ebp], -2 ; fffffffeH
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T149488[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN25@LoadFavori:
  00018	c3		 ret	 0
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$3:
  00019	8b 45 ec	 mov	 eax, DWORD PTR $T149503[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN27@LoadFavori
  00025	83 65 ec fd	 and	 DWORD PTR $T149503[ebp], -3 ; fffffffdH
  00029	8d 4d 88	 lea	 ecx, DWORD PTR $T149489[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN27@LoadFavori:
  00031	c3		 ret	 0
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$4:
  00032	8d 8d 90 06 00
	00		 lea	 ecx, DWORD PTR _favoritesFilePath$[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$5:
  0003d	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$118140[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$6:
  00045	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T149492[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$7:
  00050	8d 8d ac 06 00
	00		 lea	 ecx, DWORD PTR $T149494[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$8:
  0005b	8d 4d cc	 lea	 ecx, DWORD PTR $T149493[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$9:
  00063	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$118158[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$10:
  0006e	8d 4d cc	 lea	 ecx, DWORD PTR $T149495[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$11:
  00076	8d 4d a4	 lea	 ecx, DWORD PTR $T149496[ebp]
  00079	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$12:
  0007e	8d 8d ac 06 00
	00		 lea	 ecx, DWORD PTR $T149497[ebp]
  00084	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$13:
  00089	8d 4d cc	 lea	 ecx, DWORD PTR $T149498[ebp]
  0008c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$14:
  00091	8d 8d ac 06 00
	00		 lea	 ecx, DWORD PTR $T149499[ebp]
  00097	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z$16:
  0009c	8d 8d ac 06 00
	00		 lea	 ecx, DWORD PTR _resolvedPath$118184[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z:
  000a7	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000ab	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000ae	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  000b4	33 c8		 xor	 ecx, eax
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	8b 8a dc 08 00
	00		 mov	 ecx, DWORD PTR [edx+2268]
  000c1	33 c8		 xor	 ecx, eax
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z
  000cd	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ENDP ; CipherShed::LoadFavoriteVolumes
PUBLIC	__$ArrayPad$
EXTRN	_IsMountedVolume:PROC
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	SEGMENT
__unwindtable$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$3
__ehfuncinfo$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ
_TEXT	SEGMENT
_present$118207 = -357					; size = 1
_$S8$118193 = -356					; size = 48
_$S9$118326 = -308					; size = 52
_favorite$118197 = -256					; size = 120
_favoriteConnected$118330 = -136			; size = 120
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ PROC	; CipherShed::OnFavoriteVolumesUpdated, COMDAT

; 601  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 58 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+360], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 70 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+380]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 602  : 		FillFavoriteVolumesMenu();

  0003b	e8 00 00 00 00	 call	 ?FillFavoriteVolumesMenu@CipherShed@@YAXXZ ; CipherShed::FillFavoriteVolumesMenu

; 603  : 
; 604  : 		FavoritesOnArrivalMountRequired.clear();

  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  00045	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear

; 605  : 
; 606  : 		foreach (const FavoriteVolume favorite, FavoriteVolumes)

  0004a	8d 44 24 18	 lea	 eax, DWORD PTR _$S8$118193[esp+380]
  0004e	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 54 24 18	 mov	 edx, DWORD PTR _$S8$118193[esp+380]
  00060	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00063	33 db		 xor	 ebx, ebx
  00065	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S8$118193[esp+380]
  00069	89 9c 24 78 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+388], ebx
  00070	ff d0		 call	 eax
  00072	84 c0		 test	 al, al
  00074	0f 84 ea 02 00
	00		 je	 $LN14@OnFavorite
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL16@OnFavorite:
  00080	8b 44 24 40	 mov	 eax, DWORD PTR _$S8$118193[esp+420]
  00084	3b c3		 cmp	 eax, ebx
  00086	75 0d		 jne	 SHORT $LN283@OnFavorite
  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0008d	8b 44 24 40	 mov	 eax, DWORD PTR _$S8$118193[esp+420]
  00091	3b c3		 cmp	 eax, ebx
  00093	74 04		 je	 SHORT $LN47@OnFavorite
$LN283@OnFavorite:
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	eb 02		 jmp	 SHORT $LN48@OnFavorite
$LN47@OnFavorite:
  00099	33 c0		 xor	 eax, eax
$LN48@OnFavorite:
  0009b	8b 4c 24 44	 mov	 ecx, DWORD PTR _$S8$118193[esp+424]
  0009f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a2	72 05		 jb	 SHORT $LN35@OnFavorite
  000a4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN35@OnFavorite:
  000a9	8b 54 24 44	 mov	 edx, DWORD PTR _$S8$118193[esp+424]
  000ad	52		 push	 edx
  000ae	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _favorite$118197[esp+384]
  000b5	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  000ba	80 7c 24 1d 00	 cmp	 BYTE PTR _$S8$118193[esp+385], 0
  000bf	c6 84 24 78 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+388], 1
  000c7	0f 94 c0	 sete	 al
  000ca	88 44 24 1d	 mov	 BYTE PTR _$S8$118193[esp+385], al
  000ce	84 c0		 test	 al, al
  000d0	0f 84 5b 02 00
	00		 je	 $LN11@OnFavorite
$LN51@OnFavorite:

; 607  : 		{
; 608  : 			if (favorite.MountOnArrival)

  000d6	80 bc 24 ef 00
	00 00 00	 cmp	 BYTE PTR _favorite$118197[esp+495], 0
  000de	0f 84 37 02 00
	00		 je	 $LN12@OnFavorite

; 609  : 			{
; 610  : 				FavoritesOnArrivalMountRequired.push_back (favorite);

  000e4	a1 14 00 00 00	 mov	 eax, DWORD PTR ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  000e9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ec	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  000ef	8d 4c 24 7c	 lea	 ecx, DWORD PTR _favorite$118197[esp+380]
  000f3	51		 push	 ecx
  000f4	52		 push	 edx
  000f5	50		 push	 eax
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  000fb	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  00100	6a 01		 push	 1
  00102	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  00107	8b f0		 mov	 esi, eax
  00109	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  0010e	89 37		 mov	 DWORD PTR [edi], esi
  00110	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00113	89 30		 mov	 DWORD PTR [eax], esi

; 611  : 
; 612  : 				if (IsMountedVolume (favorite.Path.c_str()))

  00115	83 bc 24 94 00
	00 00 10	 cmp	 DWORD PTR _favorite$118197[esp+404], 16 ; 00000010H
  0011d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _favorite$118197[esp+384]
  00124	73 07		 jae	 SHORT $LN93@OnFavorite
  00126	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR _favorite$118197[esp+384]
$LN93@OnFavorite:
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _IsMountedVolume
  00133	83 c4 04	 add	 esp, 4
  00136	85 c0		 test	 eax, eax
  00138	0f 84 d9 01 00
	00		 je	 $LN286@OnFavorite

; 613  : 				{
; 614  : 					bool present = false;
; 615  : 
; 616  : 					foreach (const FavoriteVolume favoriteConnected, FavoritesMountedOnArrivalStillConnected)

  0013e	8d 44 24 48	 lea	 eax, DWORD PTR _$S9$118326[esp+380]
  00142	68 00 00 00 00	 push	 OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  00147	50		 push	 eax
  00148	c6 44 24 1f 00	 mov	 BYTE PTR _present$118207[esp+388], 0
  0014d	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  00152	83 c4 08	 add	 esp, 8
  00155	8b 54 24 48	 mov	 edx, DWORD PTR _$S9$118326[esp+380]
  00159	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0015c	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S9$118326[esp+380]
  00160	c6 84 24 78 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+388], 2
  00168	ff d0		 call	 eax
  0016a	84 c0		 test	 al, al
  0016c	0f 84 0c 01 00
	00		 je	 $LN6@OnFavorite
$LN8@OnFavorite:
  00172	8b 44 24 74	 mov	 eax, DWORD PTR _$S9$118326[esp+424]
  00176	85 c0		 test	 eax, eax
  00178	75 0d		 jne	 SHORT $LN284@OnFavorite
  0017a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0017f	8b 44 24 74	 mov	 eax, DWORD PTR _$S9$118326[esp+424]
  00183	85 c0		 test	 eax, eax
  00185	74 04		 je	 SHORT $LN116@OnFavorite
$LN284@OnFavorite:
  00187	8b 00		 mov	 eax, DWORD PTR [eax]
  00189	eb 02		 jmp	 SHORT $LN117@OnFavorite
$LN116@OnFavorite:
  0018b	33 c0		 xor	 eax, eax
$LN117@OnFavorite:
  0018d	8b 4c 24 78	 mov	 ecx, DWORD PTR _$S9$118326[esp+428]
  00191	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00194	75 05		 jne	 SHORT $LN102@OnFavorite
  00196	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN102@OnFavorite:
  0019b	8b 44 24 78	 mov	 eax, DWORD PTR _$S9$118326[esp+428]
  0019f	83 c0 08	 add	 eax, 8
  001a2	50		 push	 eax
  001a3	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _favoriteConnected$118330[esp+384]
  001aa	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  001af	80 7c 24 4d 00	 cmp	 BYTE PTR _$S9$118326[esp+385], 0
  001b4	0f 94 c3	 sete	 bl
  001b7	88 5c 24 4d	 mov	 BYTE PTR _$S9$118326[esp+385], bl
  001bb	84 db		 test	 bl, bl
  001bd	0f 84 85 00 00
	00		 je	 $LN3@OnFavorite
  001c3	8b ac 24 94 00
	00 00		 mov	 ebp, DWORD PTR _favorite$118197[esp+404]
  001ca	8b b4 24 90 00
	00 00		 mov	 esi, DWORD PTR _favorite$118197[esp+400]
  001d1	8b bc 24 08 01
	00 00		 mov	 edi, DWORD PTR _favoriteConnected$118330[esp+400]
  001d8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL122@OnFavorite:

; 617  : 					{
; 618  : 						if (favorite.Path == favoriteConnected.Path)

  001e0	83 bc 24 0c 01
	00 00 10	 cmp	 DWORD PTR _favoriteConnected$118330[esp+404], 16 ; 00000010H
  001e8	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR _favoriteConnected$118330[esp+384]
  001ef	73 07		 jae	 SHORT $LN135@OnFavorite
  001f1	8d 94 24 f8 00
	00 00		 lea	 edx, DWORD PTR _favoriteConnected$118330[esp+384]
$LN135@OnFavorite:
  001f8	8b ce		 mov	 ecx, esi
  001fa	3b f7		 cmp	 esi, edi
  001fc	72 02		 jb	 SHORT $LN141@OnFavorite
  001fe	8b cf		 mov	 ecx, edi
$LN141@OnFavorite:
  00200	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _favorite$118197[esp+384]
  00207	83 fd 10	 cmp	 ebp, 16			; 00000010H
  0020a	73 07		 jae	 SHORT $LN149@OnFavorite
  0020c	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR _favorite$118197[esp+384]
$LN149@OnFavorite:
  00213	51		 push	 ecx
  00214	52		 push	 edx
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021e	85 c0		 test	 eax, eax
  00220	75 0d		 jne	 SHORT $LN285@OnFavorite
  00222	3b f7		 cmp	 esi, edi
  00224	72 09		 jb	 SHORT $LN285@OnFavorite
  00226	3b f7		 cmp	 esi, edi
  00228	0f 95 c0	 setne	 al
  0022b	85 c0		 test	 eax, eax
  0022d	74 14		 je	 SHORT $LN276@OnFavorite
$LN285@OnFavorite:

; 613  : 				{
; 614  : 					bool present = false;
; 615  : 
; 616  : 					foreach (const FavoriteVolume favoriteConnected, FavoritesMountedOnArrivalStillConnected)

  0022f	84 db		 test	 bl, bl
  00231	0f 94 c3	 sete	 bl
  00234	c6 44 24 4c 01	 mov	 BYTE PTR _$S9$118326[esp+384], 1
  00239	88 5c 24 4d	 mov	 BYTE PTR _$S9$118326[esp+385], bl
  0023d	84 db		 test	 bl, bl
  0023f	75 9f		 jne	 SHORT $LL122@OnFavorite

; 617  : 					{
; 618  : 						if (favorite.Path == favoriteConnected.Path)

  00241	eb 05		 jmp	 SHORT $LN3@OnFavorite
$LN276@OnFavorite:

; 619  : 						{
; 620  : 							present = true;

  00243	c6 44 24 17 01	 mov	 BYTE PTR _present$118207[esp+380], 1
$LN3@OnFavorite:

; 621  : 							break;
; 622  : 						}
; 623  : 					}

  00248	8d 8c 24 f4 00
	00 00		 lea	 ecx, DWORD PTR _favoriteConnected$118330[esp+380]
  0024f	c6 84 24 78 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+388], 2
  00257	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0025c	8b 54 24 48	 mov	 edx, DWORD PTR _$S9$118326[esp+380]
  00260	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00263	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S9$118326[esp+380]
  00267	ff d0		 call	 eax
  00269	8b 54 24 48	 mov	 edx, DWORD PTR _$S9$118326[esp+380]
  0026d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00270	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S9$118326[esp+380]
  00274	ff d0		 call	 eax
  00276	84 c0		 test	 al, al
  00278	0f 85 f4 fe ff
	ff		 jne	 $LN8@OnFavorite
$LN6@OnFavorite:
  0027e	8b 44 24 64	 mov	 eax, DWORD PTR _$S9$118326[esp+408]
  00282	8b 30		 mov	 esi, DWORD PTR [eax]
  00284	89 00		 mov	 DWORD PTR [eax], eax
  00286	8b 44 24 64	 mov	 eax, DWORD PTR _$S9$118326[esp+408]
  0028a	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0028d	8b 44 24 64	 mov	 eax, DWORD PTR _$S9$118326[esp+408]
  00291	33 db		 xor	 ebx, ebx
  00293	c6 84 24 78 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+388], 1
  0029b	89 5c 24 68	 mov	 DWORD PTR _$S9$118326[esp+412], ebx
  0029f	3b f0		 cmp	 esi, eax
  002a1	74 1d		 je	 SHORT $LN156@OnFavorite
$LL158@OnFavorite:
  002a3	8b 3e		 mov	 edi, DWORD PTR [esi]
  002a5	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  002a8	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  002ad	56		 push	 esi
  002ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002b3	8b 44 24 68	 mov	 eax, DWORD PTR _$S9$118326[esp+412]
  002b7	83 c4 04	 add	 esp, 4
  002ba	8b f7		 mov	 esi, edi
  002bc	3b f8		 cmp	 edi, eax
  002be	75 e3		 jne	 SHORT $LL158@OnFavorite
$LN156@OnFavorite:
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c6	8b 4c 24 54	 mov	 ecx, DWORD PTR _$S9$118326[esp+392]
  002ca	51		 push	 ecx
  002cb	89 5c 24 6c	 mov	 DWORD PTR _$S9$118326[esp+416], ebx
  002cf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d4	83 c4 08	 add	 esp, 8

; 624  : 
; 625  : 					if (!present)

  002d7	80 7c 24 17 00	 cmp	 BYTE PTR _present$118207[esp+380], 0
  002dc	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR _$S9$118326[esp+380], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  002e4	75 31		 jne	 SHORT $LN286@OnFavorite

; 626  : 						FavoritesMountedOnArrivalStillConnected.push_back (favorite);

  002e6	a1 14 00 00 00	 mov	 eax, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  002eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002ee	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  002f1	8d 54 24 7c	 lea	 edx, DWORD PTR _favorite$118197[esp+380]
  002f5	52		 push	 edx
  002f6	51		 push	 ecx
  002f7	50		 push	 eax
  002f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  002fd	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  00302	6a 01		 push	 1
  00304	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  00309	8b f0		 mov	 esi, eax
  0030b	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  00310	89 37		 mov	 DWORD PTR [edi], esi
  00312	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00315	89 30		 mov	 DWORD PTR [eax], esi
$LN286@OnFavorite:
  00317	8a 44 24 1d	 mov	 al, BYTE PTR _$S8$118193[esp+385]
$LN12@OnFavorite:

; 605  : 
; 606  : 		foreach (const FavoriteVolume favorite, FavoriteVolumes)

  0031b	84 c0		 test	 al, al
  0031d	0f 94 c0	 sete	 al
  00320	c6 44 24 1c 01	 mov	 BYTE PTR _$S8$118193[esp+384], 1
  00325	88 44 24 1d	 mov	 BYTE PTR _$S8$118193[esp+385], al
  00329	84 c0		 test	 al, al
  0032b	0f 85 a5 fd ff
	ff		 jne	 $LN51@OnFavorite
$LN11@OnFavorite:

; 627  : 				}
; 628  : 			}
; 629  : 		}

  00331	8d 4c 24 7c	 lea	 ecx, DWORD PTR _favorite$118197[esp+380]
  00335	c6 84 24 78 01
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+388], 0
  0033d	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00342	8b 54 24 18	 mov	 edx, DWORD PTR _$S8$118193[esp+380]
  00346	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00349	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S8$118193[esp+380]
  0034d	ff d0		 call	 eax
  0034f	8b 54 24 18	 mov	 edx, DWORD PTR _$S8$118193[esp+380]
  00353	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00356	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S8$118193[esp+380]
  0035a	ff d0		 call	 eax
  0035c	84 c0		 test	 al, al
  0035e	0f 85 1c fd ff
	ff		 jne	 $LL16@OnFavorite
$LN14@OnFavorite:
  00364	8b 74 24 2c	 mov	 esi, DWORD PTR _$S8$118193[esp+400]
  00368	3b f3		 cmp	 esi, ebx
  0036a	74 23		 je	 SHORT $LN258@OnFavorite
  0036c	8b 7c 24 30	 mov	 edi, DWORD PTR _$S8$118193[esp+404]
  00370	3b f7		 cmp	 esi, edi
  00372	74 12		 je	 SHORT $LN246@OnFavorite
$LL248@OnFavorite:
  00374	8b ce		 mov	 ecx, esi
  00376	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0037b	83 c6 78	 add	 esi, 120		; 00000078H
  0037e	3b f7		 cmp	 esi, edi
  00380	75 f2		 jne	 SHORT $LL248@OnFavorite
  00382	8b 74 24 2c	 mov	 esi, DWORD PTR _$S8$118193[esp+400]
$LN246@OnFavorite:
  00386	56		 push	 esi
  00387	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0038c	83 c4 04	 add	 esp, 4
$LN258@OnFavorite:
  0038f	8b 4c 24 20	 mov	 ecx, DWORD PTR _$S8$118193[esp+388]
  00393	51		 push	 ecx
  00394	89 5c 24 30	 mov	 DWORD PTR _$S8$118193[esp+404], ebx
  00398	89 5c 24 34	 mov	 DWORD PTR _$S8$118193[esp+408], ebx
  0039c	89 5c 24 38	 mov	 DWORD PTR _$S8$118193[esp+412], ebx
  003a0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003a5	83 c4 04	 add	 esp, 4

; 630  : 	}

  003a8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+380]
  003af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b6	59		 pop	 ecx
  003b7	5f		 pop	 edi
  003b8	5e		 pop	 esi
  003b9	5d		 pop	 ebp
  003ba	5b		 pop	 ebx
  003bb	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+360]
  003c2	33 cc		 xor	 ecx, esp
  003c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c9	81 c4 68 01 00
	00		 add	 esp, 360		; 00000168H
  003cf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$0:
  00000	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _$S8$118193[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _favorite$118197[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$2:
  00016	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _$S9$118326[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ$3:
  00021	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _favoriteConnected$118330[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 82 94 fe ff
	ff		 lea	 eax, DWORD PTR [edx-364]
  00036	8b 8a 90 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-368]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	83 c0 10	 add	 eax, 16			; 00000010H
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ ENDP	; CipherShed::OnFavoriteVolumesUpdated
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_09OAMOHPIB@favorites?$AA@			; `string'
PUBLIC	??_C@_0N@NFCNMOKI@sysfavorites?$AA@		; `string'
PUBLIC	??_C@_0BO@EPEDCGFA@SYS_FAVORITES_ADMIN_ONLY_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@ ; `string'
PUBLIC	??_C@_0BP@EBHLJFH@SYS_FAVORITES_KEYBOARD_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@	; `string'
PUBLIC	??_C@_0CB@FJMJOJID@SYS_FAVORITES_ADMIN_ONLY_WARNING@ ; `string'
PUBLIC	??_C@_0CL@LJFCINAI@FAVORITE_ARRIVAL_MOUNT_BACKGROUN@ ; `string'
PUBLIC	??_C@_0BI@CHIEPLIO@SYS_FAVORITES_HELP_LINK?$AA@	; `string'
PUBLIC	??_C@_06EIAEKLLO@VOLUME?$AA@			; `string'
PUBLIC	??_C@_05EILEDKCG@LABEL?$AA@			; `string'
PUBLIC	??_C@_05JLAEHEHI@DRIVE?$AA@			; `string'
PUBLIC	??_C@_0CG@OLJJJKLA@DISABLE_NONADMIN_SYS_FAVORITES_A@ ; `string'
PUBLIC	??_C@_0BP@EKHONFKP@MOUNT_SYSTEM_FAVORITES_ON_BOOT?$AA@ ; `string'
PUBLIC	??_C@_0BK@ELJEKFFN@SYS_FAVORITES_REQUIRE_PBA?$AA@ ; `string'
PUBLIC	__TI2?AUErrorException@CipherShed@@
PUBLIC	??_C@_0BF@HCOFEODH@IDD_FAVORITE_VOLUMES?$AA@	; `string'
PUBLIC	??_C@_0BL@JDDKFBO@SYSTEM_FAVORITES_DLG_TITLE?$AA@ ; `string'
PUBLIC	_lParam$GSCopy$
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??1ErrorException@CipherShed@@QAE@XZ		; CipherShed::ErrorException::~ErrorException
PUBLIC	__CTA2?AUErrorException@CipherShed@@
PUBLIC	__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
PUBLIC	??0ErrorException@CipherShed@@QAE@ABU01@@Z	; CipherShed::ErrorException::ErrorException
PUBLIC	__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0Exception@CipherShed@@QAE@ABU01@@Z		; CipherShed::Exception::Exception
EXTRN	_Applink:PROC
EXTRN	_IsServerOS:PROC
EXTRN	_WarningDirect:PROC
EXTRN	_LoadDriveLetters:PROC
EXTRN	_SaveSettings:PROC
EXTRN	_ManageStartupSeq:PROC
EXTRN	_IsNonInstallMode:PROC
EXTRN	_bCloseBkgTaskWhenNoVolumes:DWORD
EXTRN	_bEnableBkgTask:DWORD
EXTRN	_bMountFavoritesOnLogon:DWORD
EXTRN	?SetDriverConfigurationFlag@@YAXIH@Z:PROC	; SetDriverConfigurationFlag
EXTRN	?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z:PROC ; CipherShed::BootEncryption::RegisterSystemFavoritesService
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_ToHyperlink:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	_CompensateYDPI:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ:PROC ; CipherShed::BootEncryption::GetStatus
EXTRN	_LocalizeDialog:PROC
EXTRN	_atexit:PROC
;	COMDAT ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A DD 01H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`2'::FavoriteListControl
_BSS	ENDS
;	COMDAT ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`2'::SystemFavoritesMode
_BSS	ENDS
;	COMDAT ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT
?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`2'::SelectedItem
_BSS	ENDS
;	COMDAT ?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`89'::reentry
_BSS	ENDS
;	COMDAT ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
_BSS	SEGMENT
?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A DB 018H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`2'::Favorites
_BSS	ENDS
;	COMDAT ?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA
_BSS	SEGMENT
?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; `CipherShed::FavoriteVolumesDlgProc'::`2'::$S1
_BSS	ENDS
;	COMDAT __CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0Exception@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
xdata$x	SEGMENT
__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36 DD 00H
	DD	FLAT:??_R0?AUErrorException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	024H
	DD	FLAT:??0ErrorException@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUErrorException@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUErrorException@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAMOHPIB@favorites?$AA@
CONST	SEGMENT
??_C@_09OAMOHPIB@favorites?$AA@ DB 'favorites', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NFCNMOKI@sysfavorites?$AA@
CONST	SEGMENT
??_C@_0N@NFCNMOKI@sysfavorites?$AA@ DB 'sysfavorites', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EPEDCGFA@SYS_FAVORITES_ADMIN_ONLY_INFO?$AA@
CONST	SEGMENT
??_C@_0BO@EPEDCGFA@SYS_FAVORITES_ADMIN_ONLY_INFO?$AA@ DB 'SYS_FAVORITES_A'
	DB	'DMIN_ONLY_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@
CONST	SEGMENT
??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@ DB 'BOOT_PASSWORD_CA'
	DB	'CHE_KEYBOARD_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EBHLJFH@SYS_FAVORITES_KEYBOARD_WARNING?$AA@
CONST	SEGMENT
??_C@_0BP@EBHLJFH@SYS_FAVORITES_KEYBOARD_WARNING?$AA@ DB 'SYS_FAVORITES_K'
	DB	'EYBOARD_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
CONST	SEGMENT
??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@ DB 'SETTING_REQUIRES_REBO'
	DB	'OT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FJMJOJID@SYS_FAVORITES_ADMIN_ONLY_WARNING@
CONST	SEGMENT
??_C@_0CB@FJMJOJID@SYS_FAVORITES_ADMIN_ONLY_WARNING@ DB 'SYS_FAVORITES_AD'
	DB	'MIN_ONLY_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LJFCINAI@FAVORITE_ARRIVAL_MOUNT_BACKGROUN@
CONST	SEGMENT
??_C@_0CL@LJFCINAI@FAVORITE_ARRIVAL_MOUNT_BACKGROUN@ DB 'FAVORITE_ARRIVAL'
	DB	'_MOUNT_BACKGROUND_TASK_ERR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CHIEPLIO@SYS_FAVORITES_HELP_LINK?$AA@
CONST	SEGMENT
??_C@_0BI@CHIEPLIO@SYS_FAVORITES_HELP_LINK?$AA@ DB 'SYS_FAVORITES_HELP_LI'
	DB	'NK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIAEKLLO@VOLUME?$AA@
CONST	SEGMENT
??_C@_06EIAEKLLO@VOLUME?$AA@ DB 'VOLUME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EILEDKCG@LABEL?$AA@
CONST	SEGMENT
??_C@_05EILEDKCG@LABEL?$AA@ DB 'LABEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLAEHEHI@DRIVE?$AA@
CONST	SEGMENT
??_C@_05JLAEHEHI@DRIVE?$AA@ DB 'DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OLJJJKLA@DISABLE_NONADMIN_SYS_FAVORITES_A@
CONST	SEGMENT
??_C@_0CG@OLJJJKLA@DISABLE_NONADMIN_SYS_FAVORITES_A@ DB 'DISABLE_NONADMIN'
	DB	'_SYS_FAVORITES_ACCESS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EKHONFKP@MOUNT_SYSTEM_FAVORITES_ON_BOOT?$AA@
CONST	SEGMENT
??_C@_0BP@EKHONFKP@MOUNT_SYSTEM_FAVORITES_ON_BOOT?$AA@ DB 'MOUNT_SYSTEM_F'
	DB	'AVORITES_ON_BOOT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ELJEKFFN@SYS_FAVORITES_REQUIRE_PBA?$AA@
CONST	SEGMENT
??_C@_0BK@ELJEKFFN@SYS_FAVORITES_REQUIRE_PBA?$AA@ DB 'SYS_FAVORITES_REQUI'
	DB	'RE_PBA', 00H				; `string'
CONST	ENDS
;	COMDAT __TI2?AUErrorException@CipherShed@@
xdata$x	SEGMENT
__TI2?AUErrorException@CipherShed@@ DD 00H
	DD	FLAT:??1ErrorException@CipherShed@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AUErrorException@CipherShed@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@HCOFEODH@IDD_FAVORITE_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0BF@HCOFEODH@IDD_FAVORITE_VOLUMES?$AA@ DB 'IDD_FAVORITE_VOLUMES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JDDKFBO@SYSTEM_FAVORITES_DLG_TITLE?$AA@
CONST	SEGMENT
??_C@_0BL@JDDKFBO@SYSTEM_FAVORITES_DLG_TITLE?$AA@ DB 'SYSTEM_FAVORITES_DL'
	DB	'G_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$20 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffb0H
	DD	FLAT:__catch$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$2
__catchsym$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$19 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$0
__ehfuncinfo$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z
	DD	02H
	DD	FLAT:__tryblocktable$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z DD 01H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$19
	DD	05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$20
__unwindtable$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$4
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$5
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$7
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$15
	DD	0bH
	DD	FLAT:__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$16
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
$T153736 = -2484					; size = 1560
$T153739 = -922						; size = 94
$T153738 = -828						; size = 120
$T153756 = -708						; size = 120
$T153766 = -588						; size = 120
__macro_lvi$117829 = -468				; size = 52
$T153760 = -416						; size = 28
$T153759 = -388						; size = 28
$T153757 = -360						; size = 28
$T153761 = -332						; size = 28
$T153762 = -304						; size = 28
$T153758 = -276						; size = 28
$T153754 = -248						; size = 8
$T153753 = -240						; size = 8
$T153737 = -232						; size = 36
_rec$117550 = -196					; size = 16
_bootEncStatus$117551 = -180				; size = 94
__macro_lvi$117812 = -140				; size = 52
__macro_lvi$117579 = -140				; size = 52
_$S2$117750 = -136					; size = 48
_e$117596 = -84						; size = 4
_e$117610 = -80						; size = 4
$T153755 = -76						; size = 8
_lParam$GSCopy$ = -72					; size = 4
_$S3$117788 = -68					; size = 48
_column$117567 = -52					; size = 32
_hwndDlg$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_BootEncObj$117604 = 0					; size = 1560
_favorite$117792 = 1560					; size = 120
__$ArrayPad$ = 1680					; size = 4
_hwndDlg$ = 1692					; size = 4
_msg$ = 1696						; size = 4
_wParam$ = 1700						; size = 4
_lParam$ = 1704						; size = 4
?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z PROC ; CipherShed::FavoriteVolumesDlgProc, COMDAT

; 102  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 6c f9
	ff ff		 lea	 ebp, DWORD PTR [esp-1684]
  00008	81 ec 94 06 00
	00		 sub	 esp, 1684		; 00000694H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec a8 09 00
	00		 sub	 esp, 2472		; 000009a8H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 90 06 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 103  : 		/* This dialog is used both for System Favorites and non-system Favorites. 
; 104  : 
; 105  : 		The following options have different meaning in System Favorites mode:
; 106  : 
; 107  : 		IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT	=> MOUNT_SYSTEM_FAVORITES_ON_BOOT
; 108  : 		IDC_FAVORITE_DISABLE_HOTKEY		=> DISABLE_NONADMIN_SYS_FAVORITES_ACCESS
; 109  : 
; 110  : 		*/
; 111  : 
; 112  : 		WORD lw = LOWORD (wParam);
; 113  : 		static bool SystemFavoritesMode;
; 114  : 		static vector <FavoriteVolume> Favorites;

  0003f	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA, 1
  00046	8b bd 9c 06 00
	00		 mov	 edi, DWORD PTR _hwndDlg$[ebp]
  0004c	8b 9d a8 06 00
	00		 mov	 ebx, DWORD PTR _lParam$[ebp]
  00052	89 7d ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], edi

; 319  : 				{
; 320  : 					swap (Favorites[SelectedItem], Favorites[SelectedItem - 1]);

  00055	89 5d b8	 mov	 DWORD PTR _lParam$GSCopy$[ebp], ebx
  00058	75 2c		 jne	 SHORT $LN64@FavoriteVo@2
  0005a	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA, 1
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006d	e8 00 00 00 00	 call	 ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  00072	68 00 00 00 00	 push	 OFFSET ??__FFavorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@YAXXZ ; `CipherShed::FavoriteVolumesDlgProc'::`2'::`dynamic atexit destructor for 'Favorites''
  00077	e8 00 00 00 00	 call	 _atexit
  0007c	83 c4 04	 add	 esp, 4
  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN64@FavoriteVo@2:
  00086	8b 85 a0 06 00
	00		 mov	 eax, DWORD PTR _msg$[ebp]
  0008c	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00091	0f 87 e7 04 00
	00		 ja	 $LN76@FavoriteVo@2

; 115  : 		static int SelectedItem;
; 116  : 		static HWND FavoriteListControl;
; 117  : 
; 118  : 		switch (msg)

  00097	0f 84 11 01 00
	00		 je	 $LN61@FavoriteVo@2
  0009d	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a0	0f 84 09 05 00
	00		 je	 $LN1@FavoriteVo@2
  000a6	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  000a9	0f 85 de 0b 00
	00		 jne	 $LN49@FavoriteVo@2

; 373  : 
; 374  : 		case WM_NOTIFY:
; 375  : 			if (((LPNMHDR) lParam)->code == LVN_ITEMCHANGED)

  000af	83 7b 08 9b	 cmp	 DWORD PTR [ebx+8], -101	; ffffff9bH
  000b3	0f 85 d4 0b 00
	00		 jne	 $LN49@FavoriteVo@2

; 376  : 			{
; 377  : 				static bool reentry = false;
; 378  : 				if (reentry)

  000b9	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  000c0	0f 85 c7 0b 00
	00		 jne	 $LN49@FavoriteVo@2

; 379  : 					break;
; 380  : 
; 381  : 				reentry = true;
; 382  : 
; 383  : 				if (SelectedItem != -1)

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  000cb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 1
  000d2	83 f8 ff	 cmp	 eax, -1
  000d5	74 46		 je	 SHORT $LN4@FavoriteVo@2

; 384  : 				{
; 385  : 					SetFavoriteVolume (hwndDlg, Favorites[SelectedItem], SystemFavoritesMode);

  000d7	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  000de	51		 push	 ecx
  000df	50		 push	 eax
  000e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  000e5	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  000ea	57		 push	 edi
  000eb	8b f0		 mov	 esi, eax
  000ed	e8 00 00 00 00	 call	 ?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z ; CipherShed::SetFavoriteVolume

; 386  : 					FillListControlSubItems (FavoriteListControl, SelectedItem, Favorites[SelectedItem]);

  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  000f8	83 c4 08	 add	 esp, 8
  000fb	52		 push	 edx
  000fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00101	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?FillListControlSubItems@CipherShed@@YAXPAUHWND__@@HABUFavoriteVolume@1@@Z ; CipherShed::FillListControlSubItems
  0011a	83 c4 04	 add	 esp, 4
$LN4@FavoriteVo@2:

; 387  : 				}
; 388  : 
; 389  : 				SelectedItem = ListView_GetNextItem (GetDlgItem (hwndDlg, IDC_FAVORITE_VOLUMES_LIST), -1, LVIS_SELECTED);

  0011d	6a 02		 push	 2
  0011f	6a ff		 push	 -1
  00121	68 0c 10 00 00	 push	 4108			; 0000100cH
  00126	68 5c 04 00 00	 push	 1116			; 0000045cH
  0012b	57		 push	 edi
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00132	50		 push	 eax
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00139	a3 00 00 00 00	 mov	 DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA, eax

; 390  : 
; 391  : 				if (SelectedItem != -1)

  0013e	83 f8 ff	 cmp	 eax, -1
  00141	74 30		 je	 SHORT $LN3@FavoriteVo@2

; 392  : 					SetControls (hwndDlg, Favorites[SelectedItem], SystemFavoritesMode);

  00143	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  0014a	6a 01		 push	 1
  0014c	52		 push	 edx
  0014d	50		 push	 eax
  0014e	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00153	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  00158	8b f7		 mov	 esi, edi
  0015a	e8 00 00 00 00	 call	 ?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z ; CipherShed::SetControls
  0015f	83 c4 08	 add	 esp, 8

; 395  : 
; 396  : 				reentry = false;

  00162	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 397  : 				return 1;

  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 1c 0b 00 00	 jmp	 $LN65@FavoriteVo@2
$LN3@FavoriteVo@2:

; 393  : 				else
; 394  : 					SetControls (hwndDlg, FavoriteVolume(), SystemFavoritesMode, false);

  00173	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T153766[ebp]
  00179	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  0017e	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  00185	6a 00		 push	 0
  00187	51		 push	 ecx
  00188	8b f7		 mov	 esi, edi
  0018a	e8 00 00 00 00	 call	 ?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z ; CipherShed::SetControls
  0018f	83 c4 08	 add	 esp, 8
  00192	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T153766[ebp]
  00198	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 395  : 
; 396  : 				reentry = false;

  0019d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?reentry@?FJ@??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 397  : 				return 1;

  001a4	b8 01 00 00 00	 mov	 eax, 1
  001a9	e9 e1 0a 00 00	 jmp	 $LN65@FavoriteVo@2
$LN61@FavoriteVo@2:

; 119  : 		{
; 120  : 		case WM_INITDIALOG:
; 121  : 			{
; 122  : 				try
; 123  : 				{
; 124  : 					FavoriteListControl = GetDlgItem (hwndDlg, IDC_FAVORITE_VOLUMES_LIST);

  001ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  001b4	68 5c 04 00 00	 push	 1116			; 0000045cH
  001b9	57		 push	 edi
  001ba	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  001c1	ff d6		 call	 esi
  001c3	a3 00 00 00 00	 mov	 DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A, eax

; 125  : 
; 126  : 					FavoriteVolumesDlgProcArguments *args = (FavoriteVolumesDlgProcArguments *) lParam;
; 127  : 					SystemFavoritesMode = args->SystemFavorites;

  001c8	8a 03		 mov	 al, BYTE PTR [ebx]
  001ca	a2 00 00 00 00	 mov	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, al

; 128  : 
; 129  : 					LocalizeDialog (hwndDlg, SystemFavoritesMode ? "SYSTEM_FAVORITES_DLG_TITLE" : "IDD_FAVORITE_VOLUMES");

  001cf	84 c0		 test	 al, al
  001d1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@JDDKFBO@SYSTEM_FAVORITES_DLG_TITLE?$AA@
  001d6	75 05		 jne	 SHORT $LN68@FavoriteVo@2
  001d8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@HCOFEODH@IDD_FAVORITE_VOLUMES?$AA@
$LN68@FavoriteVo@2:
  001dd	50		 push	 eax
  001de	57		 push	 edi
  001df	e8 00 00 00 00	 call	 _LocalizeDialog
  001e4	83 c4 08	 add	 esp, 8

; 130  : 
; 131  : 					if (SystemFavoritesMode)

  001e7	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  001ee	0f 84 34 01 00
	00		 je	 $LN59@FavoriteVo@2

; 132  : 					{
; 133  : 						RECT rec;
; 134  : 
; 135  : 						BootEncryptionStatus bootEncStatus = BootEncryption (hwndDlg).GetStatus();

  001f4	57		 push	 edi
  001f5	8d 8d 4c f6 ff
	ff		 lea	 ecx, DWORD PTR $T153736[ebp]
  001fb	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  00200	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR _bootEncStatus$117551[ebp]
  00206	bb 02 00 00 00	 mov	 ebx, 2
  0020b	52		 push	 edx
  0020c	8b c8		 mov	 ecx, eax
  0020e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00211	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00216	8d 8d 4c f6 ff
	ff		 lea	 ecx, DWORD PTR $T153736[ebp]
  0021c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00220	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption

; 136  : 
; 137  : 						if (!bootEncStatus.DriveMounted)

  00225	83 bd 52 ff ff
	ff 00		 cmp	 DWORD PTR _bootEncStatus$117551[ebp+6], 0
  0022c	75 42		 jne	 SHORT $LN58@FavoriteVo@2

; 138  : 							throw ErrorException ("SYS_FAVORITES_REQUIRE_PBA");

  0022e	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00233	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T153737[ebp]
  00239	33 c0		 xor	 eax, eax
  0023b	51		 push	 ecx
  0023c	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T153737[ebp], OFFSET ??_7ErrorException@CipherShed@@6B@
  00246	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T153737[ebp+4], OFFSET ??_C@_0BK@ELJEKFFN@SYS_FAVORITES_REQUIRE_PBA?$AA@
  00250	c7 85 38 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T153737[ebp+32], 7
  0025a	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T153737[ebp+28], 0
  00264	66 89 85 24 ff
	ff ff		 mov	 WORD PTR $T153737[ebp+12], ax
  0026b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN58@FavoriteVo@2:

; 139  : 
; 140  : 						ShowWindow (GetDlgItem(hwndDlg, IDC_FAVORITE_MOUNT_ON_LOGON), SW_HIDE);

  00270	6a 00		 push	 0
  00272	68 62 04 00 00	 push	 1122			; 00000462H
  00277	57		 push	 edi
  00278	ff d6		 call	 esi
  0027a	50		 push	 eax
  0027b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 141  : 						ShowWindow (GetDlgItem(hwndDlg, IDC_FAVORITE_MOUNT_ON_ARRIVAL), SW_HIDE);

  00281	6a 00		 push	 0
  00283	68 5f 04 00 00	 push	 1119			; 0000045fH
  00288	57		 push	 edi
  00289	ff d6		 call	 esi
  0028b	50		 push	 eax
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 142  : 
; 143  : 						// MOUNT_SYSTEM_FAVORITES_ON_BOOT
; 144  : 
; 145  : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT), GetString ("MOUNT_SYSTEM_FAVORITES_ON_BOOT"));

  00292	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EKHONFKP@MOUNT_SYSTEM_FAVORITES_ON_BOOT?$AA@
  00297	e8 00 00 00 00	 call	 _GetString
  0029c	83 c4 04	 add	 esp, 4
  0029f	50		 push	 eax
  002a0	68 68 04 00 00	 push	 1128			; 00000468H
  002a5	57		 push	 edi
  002a6	ff d6		 call	 esi
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 146  : 						
; 147  : 						// DISABLE_NONADMIN_SYS_FAVORITES_ACCESS
; 148  : 
; 149  : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY), GetString ("DISABLE_NONADMIN_SYS_FAVORITES_ACCESS"));

  002af	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OLJJJKLA@DISABLE_NONADMIN_SYS_FAVORITES_A@
  002b4	e8 00 00 00 00	 call	 _GetString
  002b9	83 c4 04	 add	 esp, 4
  002bc	50		 push	 eax
  002bd	68 63 04 00 00	 push	 1123			; 00000463H
  002c2	57		 push	 edi
  002c3	ff d6		 call	 esi
  002c5	50		 push	 eax
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 150  : 
; 151  : 						// Group box
; 152  : 
; 153  : 						GetClientRect (GetDlgItem (hwndDlg, IDC_FAV_VOL_OPTIONS_GROUP_BOX), &rec);		

  002cc	8d 95 3c ff ff
	ff		 lea	 edx, DWORD PTR _rec$117550[ebp]
  002d2	52		 push	 edx
  002d3	68 6e 04 00 00	 push	 1134			; 0000046eH
  002d8	57		 push	 edi
  002d9	ff d6		 call	 esi
  002db	50		 push	 eax
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 154  : 
; 155  : 						SetWindowPos (GetDlgItem (hwndDlg, IDC_FAV_VOL_OPTIONS_GROUP_BOX), 0, 0, 0,
; 156  : 							rec.right,
; 157  : 							rec.bottom - CompensateYDPI (90),
; 158  : 							SWP_NOMOVE | SWP_NOZORDER);

  002e2	6a 06		 push	 6
  002e4	6a 5a		 push	 90			; 0000005aH
  002e6	e8 00 00 00 00	 call	 _CompensateYDPI
  002eb	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _rec$117550[ebp+12]
  002f1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _rec$117550[ebp+8]
  002f7	83 c4 04	 add	 esp, 4
  002fa	2b c8		 sub	 ecx, eax
  002fc	51		 push	 ecx
  002fd	52		 push	 edx
  002fe	6a 00		 push	 0
  00300	6a 00		 push	 0
  00302	6a 00		 push	 0
  00304	68 6e 04 00 00	 push	 1134			; 0000046eH
  00309	57		 push	 edi
  0030a	ff d6		 call	 esi
  0030c	50		 push	 eax
  0030d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 159  : 
; 160  : 						InvalidateRect (GetDlgItem (hwndDlg, IDC_FAV_VOL_OPTIONS_GROUP_BOX), NULL, TRUE);

  00313	6a 01		 push	 1
  00315	6a 00		 push	 0
  00317	68 6e 04 00 00	 push	 1134			; 0000046eH
  0031c	57		 push	 edi
  0031d	ff d6		 call	 esi
  0031f	50		 push	 eax
  00320	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 161  : 					}
; 162  : 					else

  00326	eb 16		 jmp	 SHORT $LN57@FavoriteVo@2
$LN59@FavoriteVo@2:

; 163  : 					{
; 164  : 						ShowWindow (GetDlgItem(hwndDlg, IDC_FAV_VOL_OPTIONS_GLOBAL_SETTINGS_BOX), SW_HIDE);

  00328	6a 00		 push	 0
  0032a	68 70 04 00 00	 push	 1136			; 00000470H
  0032f	57		 push	 edi
  00330	ff d6		 call	 esi
  00332	50		 push	 eax
  00333	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  00339	bb 02 00 00 00	 mov	 ebx, 2
$LN57@FavoriteVo@2:

; 165  : 					}
; 166  : 
; 167  : 					Favorites.clear();

  0033e	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00343	e8 00 00 00 00	 call	 ?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear

; 168  : 
; 169  : 					LVCOLUMNW column;
; 170  : 					SendMessageW (FavoriteListControl, LVM_SETEXTENDEDLISTVIEWSTYLE, 0, LVS_EX_FULLROWSELECT); 

  00348	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  0034d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageW@16
  00353	6a 20		 push	 32			; 00000020H
  00355	6a 00		 push	 0
  00357	68 36 10 00 00	 push	 4150			; 00001036H
  0035c	50		 push	 eax
  0035d	ff d6		 call	 esi

; 171  : 
; 172  : 					memset (&column, 0, sizeof (column));

  0035f	33 c0		 xor	 eax, eax
  00361	89 45 cc	 mov	 DWORD PTR _column$117567[ebp], eax

; 173  : 					column.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;
; 174  : 					column.pszText = GetString ("DRIVE");

  00364	68 00 00 00 00	 push	 OFFSET ??_C@_05JLAEHEHI@DRIVE?$AA@
  00369	89 45 d0	 mov	 DWORD PTR _column$117567[ebp+4], eax
  0036c	89 45 d4	 mov	 DWORD PTR _column$117567[ebp+8], eax
  0036f	89 45 d8	 mov	 DWORD PTR _column$117567[ebp+12], eax
  00372	89 45 dc	 mov	 DWORD PTR _column$117567[ebp+16], eax
  00375	89 45 e0	 mov	 DWORD PTR _column$117567[ebp+20], eax
  00378	89 45 e4	 mov	 DWORD PTR _column$117567[ebp+24], eax
  0037b	89 45 e8	 mov	 DWORD PTR _column$117567[ebp+28], eax
  0037e	c7 45 cc 0f 00
	00 00		 mov	 DWORD PTR _column$117567[ebp], 15 ; 0000000fH
  00385	e8 00 00 00 00	 call	 _GetString

; 175  : 					column.cx = CompensateXDPI (38);

  0038a	6a 26		 push	 38			; 00000026H
  0038c	89 45 d8	 mov	 DWORD PTR _column$117567[ebp+12], eax
  0038f	e8 00 00 00 00	 call	 _CompensateXDPI

; 176  : 					column.fmt = LVCFMT_CENTER;
; 177  : 					SendMessageW (FavoriteListControl, LVM_INSERTCOLUMNW, 1, (LPARAM) &column);

  00394	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  0039a	83 c4 08	 add	 esp, 8
  0039d	8d 4d cc	 lea	 ecx, DWORD PTR _column$117567[ebp]
  003a0	51		 push	 ecx
  003a1	6a 01		 push	 1
  003a3	68 61 10 00 00	 push	 4193			; 00001061H
  003a8	52		 push	 edx
  003a9	89 45 d4	 mov	 DWORD PTR _column$117567[ebp+8], eax
  003ac	89 5d d0	 mov	 DWORD PTR _column$117567[ebp+4], ebx
  003af	ff d6		 call	 esi

; 178  : 
; 179  : 					++column.iSubItem;

  003b1	ff 45 e0	 inc	 DWORD PTR _column$117567[ebp+20]

; 180  : 					column.fmt = LVCFMT_LEFT;
; 181  : 					column.pszText = GetString ("LABEL");

  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_05EILEDKCG@LABEL?$AA@
  003b9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _column$117567[ebp+4], 0
  003c0	e8 00 00 00 00	 call	 _GetString

; 182  : 					column.cx = CompensateXDPI (160);

  003c5	68 a0 00 00 00	 push	 160			; 000000a0H
  003ca	89 45 d8	 mov	 DWORD PTR _column$117567[ebp+12], eax
  003cd	e8 00 00 00 00	 call	 _CompensateXDPI

; 183  : 					SendMessageW (FavoriteListControl, LVM_INSERTCOLUMNW, 2, (LPARAM) &column);

  003d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  003d8	83 c4 08	 add	 esp, 8
  003db	89 45 d4	 mov	 DWORD PTR _column$117567[ebp+8], eax
  003de	8d 45 cc	 lea	 eax, DWORD PTR _column$117567[ebp]
  003e1	50		 push	 eax
  003e2	53		 push	 ebx
  003e3	68 61 10 00 00	 push	 4193			; 00001061H
  003e8	51		 push	 ecx
  003e9	ff d6		 call	 esi

; 184  : 
; 185  : 					++column.iSubItem;

  003eb	ff 45 e0	 inc	 DWORD PTR _column$117567[ebp+20]

; 186  : 					column.fmt = LVCFMT_LEFT;
; 187  : 					column.pszText = GetString ("VOLUME");

  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_06EIAEKLLO@VOLUME?$AA@
  003f3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _column$117567[ebp+4], 0
  003fa	e8 00 00 00 00	 call	 _GetString

; 188  : 					column.cx = CompensateXDPI (330);

  003ff	68 4a 01 00 00	 push	 330			; 0000014aH
  00404	89 45 d8	 mov	 DWORD PTR _column$117567[ebp+12], eax
  00407	e8 00 00 00 00	 call	 _CompensateXDPI
  0040c	83 c4 08	 add	 esp, 8

; 189  : 					SendMessageW (FavoriteListControl, LVM_INSERTCOLUMNW, 3, (LPARAM) &column);

  0040f	8d 55 cc	 lea	 edx, DWORD PTR _column$117567[ebp]
  00412	52		 push	 edx
  00413	6a 03		 push	 3
  00415	89 45 d4	 mov	 DWORD PTR _column$117567[ebp+8], eax
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  0041d	68 61 10 00 00	 push	 4193			; 00001061H
  00422	50		 push	 eax
  00423	ff d6		 call	 esi

; 190  : 
; 191  : 					SetControls (hwndDlg, FavoriteVolume(), SystemFavoritesMode, false);

  00425	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T153738[ebp]
  0042b	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  00430	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  00437	6a 00		 push	 0
  00439	51		 push	 ecx
  0043a	8b f7		 mov	 esi, edi
  0043c	e8 00 00 00 00	 call	 ?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z ; CipherShed::SetControls
  00441	83 c4 08	 add	 esp, 8
  00444	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T153738[ebp]
  0044a	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 192  : 
; 193  : 					if (SystemFavoritesMode)

  0044f	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  00456	74 13		 je	 SHORT $LN56@FavoriteVo@2

; 194  : 						LoadFavoriteVolumes (Favorites, true);

  00458	6a 00		 push	 0
  0045a	6a 01		 push	 1
  0045c	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00461	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ; CipherShed::LoadFavoriteVolumes
  00466	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 					else

  00469	eb 0f		 jmp	 SHORT $LN55@FavoriteVo@2
$LN56@FavoriteVo@2:

; 196  : 						Favorites = FavoriteVolumes;

  0046b	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00470	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00475	e8 00 00 00 00	 call	 ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
$LN55@FavoriteVo@2:

; 197  : 
; 198  : 					if (args->AddFavoriteVolume)

  0047a	8b 75 b8	 mov	 esi, DWORD PTR _lParam$GSCopy$[ebp]
  0047d	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00481	74 0e		 je	 SHORT $LN54@FavoriteVo@2

; 199  : 						Favorites.push_back (args->NewFavoriteVolume);

  00483	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00486	52		 push	 edx
  00487	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0048c	e8 00 00 00 00	 call	 ?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
$LN54@FavoriteVo@2:

; 200  : 
; 201  : 					FillListControl (FavoriteListControl, Favorites);

  00491	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00497	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0049c	e8 00 00 00 00	 call	 ?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::FillListControl
  004a1	83 c4 04	 add	 esp, 4

; 202  : 
; 203  : 					SelectedItem = -1;
; 204  : 
; 205  : 					if (args->AddFavoriteVolume)

  004a4	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  004a8	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA, -1
  004b2	74 73		 je	 SHORT $LN53@FavoriteVo@2

; 206  : 					{
; 207  : 						ListView_SetItemState (FavoriteListControl, Favorites.size() - 1, LVIS_SELECTED, LVIS_SELECTED);

  004b4	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16
  004ba	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12
  004c0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  004c6	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR __macro_lvi$117579[ebp]
  004cc	50		 push	 eax
  004cd	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  004d2	f7 e9		 imul	 ecx
  004d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  004d9	03 d1		 add	 edx, ecx
  004db	c1 fa 06	 sar	 edx, 6
  004de	8b ca		 mov	 ecx, edx
  004e0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  004e3	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  004e7	52		 push	 edx
  004e8	68 2b 10 00 00	 push	 4139			; 0000102bH
  004ed	50		 push	 eax
  004ee	89 5d 84	 mov	 DWORD PTR __macro_lvi$117579[ebp+16], ebx
  004f1	89 5d 80	 mov	 DWORD PTR __macro_lvi$117579[ebp+12], ebx
  004f4	ff d6		 call	 esi

; 208  : 						ListView_EnsureVisible (FavoriteListControl, Favorites.size() - 1, FALSE);

  004f6	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16
  004fc	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12
  00502	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00507	f7 e9		 imul	 ecx
  00509	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  0050e	03 d1		 add	 edx, ecx
  00510	c1 fa 06	 sar	 edx, 6
  00513	8b ca		 mov	 ecx, edx
  00515	6a 00		 push	 0
  00517	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0051a	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0051e	52		 push	 edx
  0051f	68 13 10 00 00	 push	 4115			; 00001013H
  00524	50		 push	 eax
  00525	ff d6		 call	 esi
$LN53@FavoriteVo@2:

; 209  : 					}
; 210  : 
; 211  : 					if (SystemFavoritesMode)

  00527	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  0052e	74 1a		 je	 SHORT $LN52@FavoriteVo@2

; 212  : 						SetDlgItemTextW (hwndDlg, IDC_FAVORITES_HELP_LINK, GetString ("SYS_FAVORITES_HELP_LINK"));

  00530	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CHIEPLIO@SYS_FAVORITES_HELP_LINK?$AA@
  00535	e8 00 00 00 00	 call	 _GetString
  0053a	83 c4 04	 add	 esp, 4
  0053d	50		 push	 eax
  0053e	68 6f 04 00 00	 push	 1135			; 0000046fH
  00543	57		 push	 edi
  00544	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextW@12
$LN52@FavoriteVo@2:

; 213  : 
; 214  : 					ToHyperlink (hwndDlg, IDC_FAVORITES_HELP_LINK);

  0054a	68 6f 04 00 00	 push	 1135			; 0000046fH
  0054f	57		 push	 edi
  00550	e8 00 00 00 00	 call	 _ToHyperlink
  00555	83 c4 08	 add	 esp, 8

; 297  : 				}
; 298  : 
; 299  : 				return 1;

  00558	b8 01 00 00 00	 mov	 eax, 1
  0055d	e9 2d 07 00 00	 jmp	 $LN65@FavoriteVo@2
__catch$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$0:

; 215  : 				}
; 216  : 				catch (Exception &e)
; 217  : 				{
; 218  : 					e.Show (hwndDlg);

  00562	8b 4d ac	 mov	 ecx, DWORD PTR _e$117596[ebp]
  00565	8b 11		 mov	 edx, DWORD PTR [ecx]
  00567	8b 75 ec	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0056a	8b 02		 mov	 eax, DWORD PTR [edx]
  0056c	56		 push	 esi
  0056d	ff d0		 call	 eax

; 219  : 					EndDialog (hwndDlg, IDCLOSE);

  0056f	6a 08		 push	 8
  00571	56		 push	 esi
  00572	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 220  : 				}

  00578	b8 00 00 00 00	 mov	 eax, $LN42@FavoriteVo@2
  0057d	c3		 ret	 0
$LN76@FavoriteVo@2:

; 115  : 		static int SelectedItem;
; 116  : 		static HWND FavoriteListControl;
; 117  : 
; 118  : 		switch (msg)

  0057e	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H

; 398  : 			}
; 399  : 			break;
; 400  : 
; 401  : 		case WM_CLOSE:
; 402  : 			EndDialog (hwndDlg, IDCLOSE);
; 403  : 			return 1;
; 404  : 		}
; 405  : 
; 406  : 		return 0;

  00583	0f 85 04 07 00
	00		 jne	 $LN49@FavoriteVo@2
  00589	0f b7 85 a4 06
	00 00		 movzx	 eax, WORD PTR _wParam$[ebp]
  00590	3d 63 04 00 00	 cmp	 eax, 1123		; 00000463H
  00595	0f 8f e2 03 00
	00		 jg	 $LN75@FavoriteVo@2

; 221  : 			}
; 222  : 			return 1;
; 223  : 
; 224  : 		case WM_COMMAND:
; 225  : 
; 226  : 			switch (lw)

  0059b	0f 84 0f 03 00
	00		 je	 $LN12@FavoriteVo@2
  005a1	83 e8 01	 sub	 eax, 1
  005a4	74 1c		 je	 SHORT $LN48@FavoriteVo@2
  005a6	83 e8 01	 sub	 eax, 1
  005a9	0f 85 de 06 00
	00		 jne	 $LN49@FavoriteVo@2
$LN1@FavoriteVo@2:

; 300  : 
; 301  : 			case IDCANCEL:
; 302  : 				EndDialog (hwndDlg, IDCLOSE);

  005af	6a 08		 push	 8
  005b1	57		 push	 edi
  005b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 303  : 				return 1;

  005b8	b8 01 00 00 00	 mov	 eax, 1
  005bd	e9 cd 06 00 00	 jmp	 $LN65@FavoriteVo@2
$LN48@FavoriteVo@2:

; 227  : 			{
; 228  : 			case IDOK:
; 229  : 
; 230  : 				/* Global System Favorites settings */
; 231  : 
; 232  : 				if (SystemFavoritesMode)

  005c2	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  005c9	0f 84 9c 00 00
	00		 je	 $LN47@FavoriteVo@2

; 233  : 				{
; 234  : 					BootEncryption BootEncObj (NULL);

  005cf	6a 00		 push	 0
  005d1	8d 4d 00	 lea	 ecx, DWORD PTR _BootEncObj$117604[ebp]
  005d4	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 235  : 
; 236  : 					if (BootEncObj.GetStatus().DriveMounted)

  005d9	8d 8d 66 fc ff
	ff		 lea	 ecx, DWORD PTR $T153739[ebp]
  005df	51		 push	 ecx
  005e0	8d 4d 00	 lea	 ecx, DWORD PTR _BootEncObj$117604[ebp]
  005e3	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  005ea	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  005ef	83 78 06 00	 cmp	 DWORD PTR [eax+6], 0
  005f3	74 67		 je	 SHORT $LN99@FavoriteVo@2

; 237  : 					{
; 238  : 						try
; 239  : 						{
; 240  : 							uint32 reqConfig = IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT) ? TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES : 0;

  005f5	68 68 04 00 00	 push	 1128			; 00000468H
  005fa	57		 push	 edi
  005fb	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  005ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  00605	8b f0		 mov	 esi, eax
  00607	f7 de		 neg	 esi
  00609	1b f6		 sbb	 esi, esi
  0060b	bb 02 00 00 00	 mov	 ebx, 2
  00610	23 f3		 and	 esi, ebx

; 241  : 							if (reqConfig != (ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES))

  00612	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00617	23 c3		 and	 eax, ebx
  00619	3b f0		 cmp	 esi, eax
  0061b	74 10		 je	 SHORT $LN44@FavoriteVo@2

; 242  : 								BootEncObj.RegisterSystemFavoritesService (reqConfig ? TRUE : FALSE);

  0061d	33 d2		 xor	 edx, edx
  0061f	85 f6		 test	 esi, esi
  00621	0f 95 c2	 setne	 dl
  00624	8d 4d 00	 lea	 ecx, DWORD PTR _BootEncObj$117604[ebp]
  00627	52		 push	 edx
  00628	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService
$LN44@FavoriteVo@2:

; 243  : 
; 244  : 							SetDriverConfigurationFlag (TC_DRIVER_CONFIG_DISABLE_NONADMIN_SYS_FAVORITES_ACCESS, IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY));

  0062d	68 63 04 00 00	 push	 1123			; 00000463H
  00632	57		 push	 edi
  00633	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  00639	50		 push	 eax
  0063a	6a 04		 push	 4
  0063c	e8 00 00 00 00	 call	 ?SetDriverConfigurationFlag@@YAXIH@Z ; SetDriverConfigurationFlag
  00641	83 c4 08	 add	 esp, 8
  00644	eb 16		 jmp	 SHORT $LN99@FavoriteVo@2
__catch$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$2:

; 245  : 						}
; 246  : 						catch (Exception &e)
; 247  : 						{
; 248  : 							e.Show (hwndDlg);

  00646	8b 4d b0	 mov	 ecx, DWORD PTR _e$117610[ebp]
  00649	8b 01		 mov	 eax, DWORD PTR [ecx]
  0064b	8b 55 ec	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0064e	8b 00		 mov	 eax, DWORD PTR [eax]
  00650	52		 push	 edx
  00651	ff d0		 call	 eax

; 249  : 						}

  00653	b8 00 00 00 00	 mov	 eax, $LN206@FavoriteVo@2
  00658	c3		 ret	 0
$LN206@FavoriteVo@2:
  00659	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN99@FavoriteVo@2:

; 250  : 					}
; 251  : 				}

  0065c	8d 4d 00	 lea	 ecx, DWORD PTR _BootEncObj$117604[ebp]
  0065f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00666	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
$LN47@FavoriteVo@2:

; 252  : 
; 253  : 				/* (System) Favorites list */
; 254  : 
; 255  : 				if (SelectedItem != -1 && !Favorites.empty())

  0066b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00671	83 cb ff	 or	 ebx, -1
  00674	3b f3		 cmp	 esi, ebx
  00676	74 2c		 je	 SHORT $LN43@FavoriteVo@2
  00678	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0067d	e8 00 00 00 00	 call	 ?empty@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty
  00682	84 c0		 test	 al, al
  00684	75 1e		 jne	 SHORT $LN43@FavoriteVo@2

; 256  : 					SetFavoriteVolume (hwndDlg, Favorites[SelectedItem], SystemFavoritesMode);

  00686	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  0068d	51		 push	 ecx
  0068e	56		 push	 esi
  0068f	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00694	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  00699	57		 push	 edi
  0069a	8b f0		 mov	 esi, eax
  0069c	e8 00 00 00 00	 call	 ?SetFavoriteVolume@CipherShed@@YAXPAUHWND__@@AAUFavoriteVolume@1@_N@Z ; CipherShed::SetFavoriteVolume
  006a1	83 c4 08	 add	 esp, 8
$LN43@FavoriteVo@2:

; 257  : 
; 258  : 				if (SaveFavoriteVolumes (Favorites, SystemFavoritesMode))

  006a4	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  006ab	52		 push	 edx
  006ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  006b1	e8 00 00 00 00	 call	 ?SaveFavoriteVolumes@CipherShed@@YA_NABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N@Z ; CipherShed::SaveFavoriteVolumes
  006b6	83 c4 04	 add	 esp, 4
  006b9	84 c0		 test	 al, al
  006bb	0f 84 e5 01 00
	00		 je	 $LN42@FavoriteVo@2

; 259  : 				{
; 260  : 					if (!SystemFavoritesMode)

  006c1	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 261  : 					{
; 262  : 						bMountFavoritesOnLogon = FALSE;
; 263  : 
; 264  : 						foreach (const FavoriteVolume &favorite, Favorites)

  006c8	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  006cd	0f 85 9e 01 00
	00		 jne	 $LN41@FavoriteVo@2
  006d3	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _$S2$117750[ebp]
  006d9	50		 push	 eax
  006da	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bMountFavoritesOnLogon, 0
  006e4	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  006e9	83 c4 08	 add	 esp, 8
  006ec	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$117750[ebp]
  006f2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  006f5	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$117750[ebp]
  006fb	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  00702	ff d0		 call	 eax
  00704	84 c0		 test	 al, al
  00706	74 6a		 je	 SHORT $LN38@FavoriteVo@2
$LL40@FavoriteVo@2:
  00708	8d 4d a0	 lea	 ecx, DWORD PTR _$S2$117750[ebp+40]
  0070b	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
  00710	80 bd 7d ff ff
	ff 00		 cmp	 BYTE PTR _$S2$117750[ebp+5], 0
  00717	0f 94 c1	 sete	 cl
  0071a	88 8d 7d ff ff
	ff		 mov	 BYTE PTR _$S2$117750[ebp+5], cl
  00720	84 c9		 test	 cl, cl
  00722	74 28		 je	 SHORT $LN39@FavoriteVo@2
$LL148@FavoriteVo@2:

; 265  : 						{
; 266  : 							if (favorite.MountOnLogOn)

  00724	80 78 72 00	 cmp	 BYTE PTR [eax+114], 0
  00728	75 18		 jne	 SHORT $LN196@FavoriteVo@2
  0072a	84 c9		 test	 cl, cl
  0072c	0f 94 c1	 sete	 cl
  0072f	c6 85 7c ff ff
	ff 01		 mov	 BYTE PTR _$S2$117750[ebp+4], 1
  00736	88 8d 7d ff ff
	ff		 mov	 BYTE PTR _$S2$117750[ebp+5], cl
  0073c	84 c9		 test	 cl, cl
  0073e	75 e4		 jne	 SHORT $LL148@FavoriteVo@2

; 276  : 							{
; 277  : 								if (favorite.MountOnArrival)

  00740	eb 0a		 jmp	 SHORT $LN39@FavoriteVo@2
$LN196@FavoriteVo@2:

; 267  : 							{
; 268  : 								bMountFavoritesOnLogon = TRUE;

  00742	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bMountFavoritesOnLogon, 1
$LN39@FavoriteVo@2:

; 261  : 					{
; 262  : 						bMountFavoritesOnLogon = FALSE;
; 263  : 
; 264  : 						foreach (const FavoriteVolume &favorite, Favorites)

  0074c	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$117750[ebp]
  00752	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00755	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$117750[ebp]
  0075b	ff d0		 call	 eax
  0075d	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$117750[ebp]
  00763	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00766	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$117750[ebp]
  0076c	ff d0		 call	 eax
  0076e	84 c0		 test	 al, al
  00770	75 96		 jne	 SHORT $LL40@FavoriteVo@2
$LN38@FavoriteVo@2:

; 269  : 								break;
; 270  : 							}
; 271  : 						}

  00772	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$117750[ebp]
  00778	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0077b	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 272  : 
; 273  : 						if (!bEnableBkgTask || bCloseBkgTaskWhenNoVolumes || IsNonInstallMode())

  00780	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0
  00787	74 16		 je	 SHORT $LN32@FavoriteVo@2
  00789	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, 0
  00790	75 0d		 jne	 SHORT $LN32@FavoriteVo@2
  00792	e8 00 00 00 00	 call	 _IsNonInstallMode
  00797	85 c0		 test	 eax, eax
  00799	0f 84 b3 00 00
	00		 je	 $LN174@FavoriteVo@2
$LN32@FavoriteVo@2:

; 274  : 						{
; 275  : 							foreach (const FavoriteVolume favorite, Favorites)

  0079f	8d 4d bc	 lea	 ecx, DWORD PTR _$S3$117788[ebp]
  007a2	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  007a7	51		 push	 ecx
  007a8	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  007ad	83 c4 08	 add	 esp, 8
  007b0	8b 55 bc	 mov	 edx, DWORD PTR _$S3$117788[ebp]
  007b3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  007b6	8d 4d bc	 lea	 ecx, DWORD PTR _$S3$117788[ebp]
  007b9	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  007c0	ff d0		 call	 eax
  007c2	84 c0		 test	 al, al
  007c4	74 75		 je	 SHORT $LN29@FavoriteVo@2
$LL31@FavoriteVo@2:
  007c6	8d 4d e4	 lea	 ecx, DWORD PTR _$S3$117788[ebp+40]
  007c9	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
  007ce	50		 push	 eax
  007cf	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$117792[ebp]
  007d5	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  007da	80 7d c1 00	 cmp	 BYTE PTR _$S3$117788[ebp+5], 0
  007de	0f 94 c0	 sete	 al
  007e1	88 45 c1	 mov	 BYTE PTR _$S3$117788[ebp+5], al
  007e4	84 c0		 test	 al, al
  007e6	74 2e		 je	 SHORT $LN26@FavoriteVo@2
  007e8	8a 8d 8b 06 00
	00		 mov	 cl, BYTE PTR _favorite$117792[ebp+115]
  007ee	8b ff		 npad	 2
$LL158@FavoriteVo@2:

; 276  : 							{
; 277  : 								if (favorite.MountOnArrival)

  007f0	84 c9		 test	 cl, cl
  007f2	75 12		 jne	 SHORT $LN197@FavoriteVo@2
  007f4	84 c0		 test	 al, al
  007f6	0f 94 c0	 sete	 al
  007f9	c6 45 c0 01	 mov	 BYTE PTR _$S3$117788[ebp+4], 1
  007fd	84 c0		 test	 al, al
  007ff	75 ef		 jne	 SHORT $LL158@FavoriteVo@2

; 274  : 						{
; 275  : 							foreach (const FavoriteVolume favorite, Favorites)

  00801	88 45 c1	 mov	 BYTE PTR _$S3$117788[ebp+5], al

; 276  : 							{
; 277  : 								if (favorite.MountOnArrival)

  00804	eb 10		 jmp	 SHORT $LN26@FavoriteVo@2
$LN197@FavoriteVo@2:

; 278  : 								{
; 279  : 									Warning ("FAVORITE_ARRIVAL_MOUNT_BACKGROUND_TASK_ERR");

  00806	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LJFCINAI@FAVORITE_ARRIVAL_MOUNT_BACKGROUN@
  0080b	88 45 c1	 mov	 BYTE PTR _$S3$117788[ebp+5], al
  0080e	e8 00 00 00 00	 call	 _Warning
  00813	83 c4 04	 add	 esp, 4
$LN26@FavoriteVo@2:

; 280  : 									break;
; 281  : 								}
; 282  : 							}

  00816	8d 8d 18 06 00
	00		 lea	 ecx, DWORD PTR _favorite$117792[ebp]
  0081c	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00821	8b 55 bc	 mov	 edx, DWORD PTR _$S3$117788[ebp]
  00824	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00827	8d 4d bc	 lea	 ecx, DWORD PTR _$S3$117788[ebp]
  0082a	ff d0		 call	 eax
  0082c	8b 55 bc	 mov	 edx, DWORD PTR _$S3$117788[ebp]
  0082f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00832	8d 4d bc	 lea	 ecx, DWORD PTR _$S3$117788[ebp]
  00835	ff d0		 call	 eax
  00837	84 c0		 test	 al, al
  00839	75 8b		 jne	 SHORT $LL31@FavoriteVo@2
$LN29@FavoriteVo@2:
  0083b	8d 4d c4	 lea	 ecx, DWORD PTR _$S3$117788[ebp+8]
  0083e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00841	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  00846	8b 4d c4	 mov	 ecx, DWORD PTR _$S3$117788[ebp+8]
  00849	51		 push	 ecx
  0084a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0084f	83 c4 04	 add	 esp, 4
$LN174@FavoriteVo@2:

; 283  : 						}
; 284  : 
; 285  : 						FavoriteVolumes = Favorites;

  00852	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00857	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  0085c	e8 00 00 00 00	 call	 ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=

; 286  : 
; 287  : 						ManageStartupSeq();

  00861	e8 00 00 00 00	 call	 _ManageStartupSeq

; 288  : 						SaveSettings (hwndDlg);

  00866	57		 push	 edi
  00867	e8 00 00 00 00	 call	 _SaveSettings
  0086c	83 c4 04	 add	 esp, 4

; 289  : 					}
; 290  : 					else

  0086f	eb 0a		 jmp	 SHORT $LN24@FavoriteVo@2
$LN41@FavoriteVo@2:

; 291  : 						SystemFavoriteVolumes = Favorites;

  00871	b9 00 00 00 00	 mov	 ecx, OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00876	e8 00 00 00 00	 call	 ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
$LN24@FavoriteVo@2:

; 292  : 
; 293  : 					OnFavoriteVolumesUpdated();

  0087b	e8 00 00 00 00	 call	 ?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ ; CipherShed::OnFavoriteVolumesUpdated

; 294  : 					LoadDriveLetters (GetDlgItem (MainDlg, IDC_DRIVELIST), 0);

  00880	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00886	6a 00		 push	 0
  00888	68 ef 03 00 00	 push	 1007			; 000003efH
  0088d	52		 push	 edx
  0088e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00894	50		 push	 eax
  00895	e8 00 00 00 00	 call	 _LoadDriveLetters
  0089a	83 c4 08	 add	 esp, 8

; 295  : 
; 296  : 					EndDialog (hwndDlg, IDOK);

  0089d	6a 01		 push	 1
  0089f	57		 push	 edi
  008a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN42@FavoriteVo@2:

; 297  : 				}
; 298  : 
; 299  : 				return 1;

  008a6	b8 01 00 00 00	 mov	 eax, 1
  008ab	e9 df 03 00 00	 jmp	 $LN65@FavoriteVo@2
$LN12@FavoriteVo@2:

; 354  : 
; 355  : 			case IDC_FAVORITE_DISABLE_HOTKEY: // Note that this option means "DISABLE_NONADMIN_SYS_FAVORITES_ACCESS" when SystemFavoritesMode is true
; 356  : 				if (SystemFavoritesMode)

  008b0	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  008b7	0f 84 9f 03 00
	00		 je	 $LN13@FavoriteVo@2

; 357  : 				{
; 358  : 					// DISABLE_NONADMIN_SYS_FAVORITES_ACCESS
; 359  : 
; 360  : 					if (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY))

  008bd	68 63 04 00 00	 push	 1123			; 00000463H
  008c2	57		 push	 edi
  008c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  008c9	85 c0		 test	 eax, eax
  008cb	0f 84 95 00 00
	00		 je	 $LN10@FavoriteVo@2

; 361  : 						WarningDirect ((wstring (GetString ("SYS_FAVORITES_ADMIN_ONLY_WARNING")) + L"\n\n" + GetString ("SETTING_REQUIRES_REBOOT")).c_str());

  008d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FJMJOJID@SYS_FAVORITES_ADMIN_ONLY_WARNING@
  008d6	e8 00 00 00 00	 call	 _GetString
  008db	83 c4 04	 add	 esp, 4
  008de	50		 push	 eax
  008df	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T153760[ebp]
  008e5	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  008ea	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  008ef	50		 push	 eax
  008f0	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR $T153761[ebp]
  008f6	50		 push	 eax
  008f7	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  008fe	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00903	8b f0		 mov	 esi, eax
  00905	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
  0090a	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  0090e	e8 00 00 00 00	 call	 _GetString
  00913	50		 push	 eax
  00914	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T153762[ebp]
  0091a	56		 push	 esi
  0091b	51		 push	 ecx
  0091c	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00921	83 c4 1c	 add	 esp, 28			; 0000001cH
  00924	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00928	72 05		 jb	 SHORT $LN188@FavoriteVo@2
  0092a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0092d	eb 03		 jmp	 SHORT $LN189@FavoriteVo@2
$LN188@FavoriteVo@2:
  0092f	83 c0 04	 add	 eax, 4
$LN189@FavoriteVo@2:
  00932	50		 push	 eax
  00933	e8 00 00 00 00	 call	 _WarningDirect
  00938	83 c4 04	 add	 esp, 4
  0093b	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T153762[ebp]
  00941	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00946	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T153761[ebp]
  0094c	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00951	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T153760[ebp]
  00957	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0095c	b8 01 00 00 00	 mov	 eax, 1
  00961	e9 29 03 00 00	 jmp	 $LN65@FavoriteVo@2
$LN10@FavoriteVo@2:

; 362  : 					else
; 363  : 						Warning ("SETTING_REQUIRES_REBOOT");

  00966	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
  0096b	e8 00 00 00 00	 call	 _Warning
  00970	83 c4 04	 add	 esp, 4

; 364  : 				}
; 365  : 				return 1;

  00973	b8 01 00 00 00	 mov	 eax, 1
  00978	e9 12 03 00 00	 jmp	 $LN65@FavoriteVo@2
$LN75@FavoriteVo@2:

; 221  : 			}
; 222  : 			return 1;
; 223  : 
; 224  : 		case WM_COMMAND:
; 225  : 
; 226  : 			switch (lw)

  0097d	2d 64 04 00 00	 sub	 eax, 1124		; 00000464H
  00982	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00985	0f 87 02 03 00
	00		 ja	 $LN49@FavoriteVo@2
  0098b	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN202@FavoriteVo@2[eax]
  00992	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN214@FavoriteVo@2[edx*4]
$LN22@FavoriteVo@2:

; 304  : 
; 305  : 			case IDC_FAVORITE_MOVE_DOWN:
; 306  : 				if (SelectedItem != -1 && Favorites.size() > (size_t) SelectedItem + 1)

  00999	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  0099e	83 f8 ff	 cmp	 eax, -1
  009a1	0f 84 a4 00 00
	00		 je	 $LN21@FavoriteVo@2
  009a7	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16
  009ad	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12
  009b3	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  009b6	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  009bb	f7 e9		 imul	 ecx
  009bd	03 d1		 add	 edx, ecx
  009bf	c1 fa 06	 sar	 edx, 6
  009c2	8b c2		 mov	 eax, edx
  009c4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  009c7	03 c2		 add	 eax, edx
  009c9	3b c6		 cmp	 eax, esi
  009cb	76 7e		 jbe	 SHORT $LN21@FavoriteVo@2

; 307  : 				{
; 308  : 					swap (Favorites[SelectedItem], Favorites[SelectedItem + 1]);

  009cd	56		 push	 esi
  009ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  009d3	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  009d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  009de	50		 push	 eax
  009df	51		 push	 ecx
  009e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  009e5	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  009ea	50		 push	 eax
  009eb	e8 00 00 00 00	 call	 ??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z ; std::swap<CipherShed::FavoriteVolume>

; 309  : 
; 310  : 					FillListControl (FavoriteListControl, Favorites);

  009f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  009f6	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  009fb	e8 00 00 00 00	 call	 ?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::FillListControl

; 311  : 					++SelectedItem;

  00a00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA

; 312  : 					ListView_SetItemState (FavoriteListControl, SelectedItem, LVIS_SELECTED, LVIS_SELECTED);

  00a05	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  00a0b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a0e	40		 inc	 eax
  00a0f	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR __macro_lvi$117812[ebp]
  00a15	52		 push	 edx
  00a16	50		 push	 eax
  00a17	a3 00 00 00 00	 mov	 DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA, eax
  00a1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00a21	68 2b 10 00 00	 push	 4139			; 0000102bH
  00a26	bb 02 00 00 00	 mov	 ebx, 2
  00a2b	50		 push	 eax
  00a2c	89 5d 84	 mov	 DWORD PTR __macro_lvi$117812[ebp+16], ebx
  00a2f	89 5d 80	 mov	 DWORD PTR __macro_lvi$117812[ebp+12], ebx
  00a32	ff d6		 call	 esi

; 313  : 					ListView_EnsureVisible (FavoriteListControl, SelectedItem, FALSE);

  00a34	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00a3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00a40	6a 00		 push	 0
  00a42	51		 push	 ecx
  00a43	68 13 10 00 00	 push	 4115			; 00001013H
  00a48	52		 push	 edx
  00a49	ff d6		 call	 esi
$LN21@FavoriteVo@2:

; 314  : 				}
; 315  : 				return 1;

  00a4b	b8 01 00 00 00	 mov	 eax, 1
  00a50	e9 3a 02 00 00	 jmp	 $LN65@FavoriteVo@2
$LN20@FavoriteVo@2:

; 316  : 
; 317  : 			case IDC_FAVORITE_MOVE_UP:
; 318  : 				if (SelectedItem > 0)

  00a55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00a5a	85 c0		 test	 eax, eax
  00a5c	0f 8e 84 00 00
	00		 jle	 $LN19@FavoriteVo@2

; 319  : 				{
; 320  : 					swap (Favorites[SelectedItem], Favorites[SelectedItem - 1]);

  00a62	48		 dec	 eax
  00a63	50		 push	 eax
  00a64	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00a69	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  00a6e	50		 push	 eax
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00a74	50		 push	 eax
  00a75	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00a7a	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ??$swap@UFavoriteVolume@CipherShed@@@std@@YAXAAUFavoriteVolume@CipherShed@@0@Z ; std::swap<CipherShed::FavoriteVolume>

; 321  : 
; 322  : 					FillListControl (FavoriteListControl, Favorites);

  00a85	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00a8b	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00a90	e8 00 00 00 00	 call	 ?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::FillListControl

; 323  : 					--SelectedItem;

  00a95	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA

; 324  : 					ListView_SetItemState (FavoriteListControl, SelectedItem, LVIS_SELECTED, LVIS_SELECTED);

  00a9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00aa0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  00aa6	83 c4 0c	 add	 esp, 12			; 0000000cH
  00aa9	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR __macro_lvi$117829[ebp]
  00aaf	51		 push	 ecx
  00ab0	48		 dec	 eax
  00ab1	50		 push	 eax
  00ab2	68 2b 10 00 00	 push	 4139			; 0000102bH
  00ab7	bb 02 00 00 00	 mov	 ebx, 2
  00abc	52		 push	 edx
  00abd	a3 00 00 00 00	 mov	 DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA, eax
  00ac2	89 9d 3c fe ff
	ff		 mov	 DWORD PTR __macro_lvi$117829[ebp+16], ebx
  00ac8	89 9d 38 fe ff
	ff		 mov	 DWORD PTR __macro_lvi$117829[ebp+12], ebx
  00ace	ff d6		 call	 esi

; 325  : 					ListView_EnsureVisible (FavoriteListControl, SelectedItem, FALSE);

  00ad0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00ad5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteListControl@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4PAU3@A
  00adb	6a 00		 push	 0
  00add	50		 push	 eax
  00ade	68 13 10 00 00	 push	 4115			; 00001013H
  00ae3	51		 push	 ecx
  00ae4	ff d6		 call	 esi
$LN19@FavoriteVo@2:

; 326  : 				}
; 327  : 				return 1;

  00ae6	b8 01 00 00 00	 mov	 eax, 1
  00aeb	e9 9f 01 00 00	 jmp	 $LN65@FavoriteVo@2
$LN18@FavoriteVo@2:

; 328  : 
; 329  : 			case IDC_FAVORITE_REMOVE:
; 330  : 				if (SelectedItem != -1)

  00af0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA
  00af5	83 f8 ff	 cmp	 eax, -1
  00af8	0f 84 84 00 00
	00		 je	 $LN17@FavoriteVo@2

; 331  : 				{
; 332  : 					Favorites.erase (Favorites.begin() + SelectedItem);

  00afe	50		 push	 eax
  00aff	8d 95 08 ff ff
	ff		 lea	 edx, DWORD PTR $T153754[ebp]
  00b05	52		 push	 edx
  00b06	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T153753[ebp]
  00b0c	50		 push	 eax
  00b0d	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00b12	e8 00 00 00 00	 call	 ?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
  00b17	8b c8		 mov	 ecx, eax
  00b19	e8 00 00 00 00	 call	 ??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+
  00b1e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b21	8b 10		 mov	 edx, DWORD PTR [eax]
  00b23	51		 push	 ecx
  00b24	52		 push	 edx
  00b25	8d 45 b4	 lea	 eax, DWORD PTR $T153755[ebp]
  00b28	50		 push	 eax
  00b29	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00b2e	e8 00 00 00 00	 call	 ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase

; 333  : 					FillListControl (GetDlgItem (hwndDlg, IDC_FAVORITE_VOLUMES_LIST), Favorites);

  00b33	68 00 00 00 00	 push	 OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00b38	68 5c 04 00 00	 push	 1116			; 0000045cH
  00b3d	57		 push	 edi
  00b3e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00b44	8b c8		 mov	 ecx, eax
  00b46	e8 00 00 00 00	 call	 ?FillListControl@CipherShed@@YAXPAUHWND__@@AAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::FillListControl
  00b4b	83 c4 04	 add	 esp, 4

; 334  : 					SetControls (hwndDlg, FavoriteVolume(), SystemFavoritesMode, false);

  00b4e	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T153756[ebp]
  00b54	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  00b59	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA
  00b60	6a 00		 push	 0
  00b62	51		 push	 ecx
  00b63	8b f7		 mov	 esi, edi
  00b65	e8 00 00 00 00	 call	 ?SetControls@CipherShed@@YAXPAUHWND__@@ABUFavoriteVolume@1@_N2@Z ; CipherShed::SetControls
  00b6a	83 c4 08	 add	 esp, 8
  00b6d	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T153756[ebp]
  00b73	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 335  : 					SelectedItem = -1;

  00b78	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?SelectedItem@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4HA, -1
$LN17@FavoriteVo@2:

; 336  : 				}
; 337  : 				return 1;

  00b82	b8 01 00 00 00	 mov	 eax, 1
  00b87	e9 03 01 00 00	 jmp	 $LN65@FavoriteVo@2
$LN16@FavoriteVo@2:

; 338  : 
; 339  : 
; 340  : 			case IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT:	// Note that this option means "MOUNT_SYSTEM_FAVORITES_ON_BOOT" when SystemFavoritesMode is true
; 341  : 				if (SystemFavoritesMode)

  00b8c	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  00b93	0f 84 c3 00 00
	00		 je	 $LN13@FavoriteVo@2

; 342  : 				{
; 343  : 					// MOUNT_SYSTEM_FAVORITES_ON_BOOT
; 344  : 
; 345  : 					if (IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_OPEN_EXPLORER_WIN_ON_MOUNT))

  00b99	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__IsDlgButtonChecked@8
  00b9f	68 68 04 00 00	 push	 1128			; 00000468H
  00ba4	57		 push	 edi
  00ba5	ff d3		 call	 ebx
  00ba7	85 c0		 test	 eax, eax
  00ba9	0f 84 ad 00 00
	00		 je	 $LN13@FavoriteVo@2

; 346  : 					{
; 347  : 						WarningDirect ((wstring (GetString ("SYS_FAVORITES_KEYBOARD_WARNING")) + L"\n\n" + GetString ("BOOT_PASSWORD_CACHE_KEYBOARD_WARNING")).c_str());

  00baf	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EBHLJFH@SYS_FAVORITES_KEYBOARD_WARNING?$AA@
  00bb4	e8 00 00 00 00	 call	 _GetString
  00bb9	83 c4 04	 add	 esp, 4
  00bbc	50		 push	 eax
  00bbd	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T153757[ebp]
  00bc3	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00bc8	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00bcd	50		 push	 eax
  00bce	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T153758[ebp]
  00bd4	52		 push	 edx
  00bd5	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 9
  00bdc	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00be1	8b f0		 mov	 esi, eax
  00be3	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@
  00be8	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00bec	e8 00 00 00 00	 call	 _GetString
  00bf1	50		 push	 eax
  00bf2	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T153759[ebp]
  00bf8	56		 push	 esi
  00bf9	50		 push	 eax
  00bfa	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00bff	83 c4 1c	 add	 esp, 28			; 0000001cH
  00c02	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00c06	72 05		 jb	 SHORT $LN182@FavoriteVo@2
  00c08	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00c0b	eb 03		 jmp	 SHORT $LN183@FavoriteVo@2
$LN182@FavoriteVo@2:
  00c0d	83 c0 04	 add	 eax, 4
$LN183@FavoriteVo@2:
  00c10	50		 push	 eax
  00c11	e8 00 00 00 00	 call	 _WarningDirect
  00c16	83 c4 04	 add	 esp, 4
  00c19	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T153759[ebp]
  00c1f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00c24	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T153758[ebp]
  00c2a	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00c2f	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T153757[ebp]
  00c35	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 348  : 
; 349  : 						if (!IsServerOS() && !IsDlgButtonChecked (hwndDlg, IDC_FAVORITE_DISABLE_HOTKEY))

  00c3a	e8 00 00 00 00	 call	 _IsServerOS
  00c3f	85 c0		 test	 eax, eax
  00c41	75 19		 jne	 SHORT $LN13@FavoriteVo@2
  00c43	68 63 04 00 00	 push	 1123			; 00000463H
  00c48	57		 push	 edi
  00c49	ff d3		 call	 ebx
  00c4b	85 c0		 test	 eax, eax
  00c4d	75 0d		 jne	 SHORT $LN13@FavoriteVo@2

; 350  : 							Info ("SYS_FAVORITES_ADMIN_ONLY_INFO");

  00c4f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EPEDCGFA@SYS_FAVORITES_ADMIN_ONLY_INFO?$AA@
  00c54	e8 00 00 00 00	 call	 _Info
  00c59	83 c4 04	 add	 esp, 4
$LN13@FavoriteVo@2:

; 351  : 					}
; 352  : 				}
; 353  : 				return 1;

  00c5c	b8 01 00 00 00	 mov	 eax, 1
  00c61	eb 2c		 jmp	 SHORT $LN65@FavoriteVo@2
$LN8@FavoriteVo@2:

; 366  : 
; 367  : 			case IDC_FAVORITES_HELP_LINK:
; 368  : 				Applink (SystemFavoritesMode ? "sysfavorites" : "favorites", TRUE, "");

  00c63	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?SystemFavoritesMode@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
  00c6a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@NFCNMOKI@sysfavorites?$AA@
  00c6f	75 05		 jne	 SHORT $LN74@FavoriteVo@2
  00c71	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09OAMOHPIB@favorites?$AA@
$LN74@FavoriteVo@2:
  00c76	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00c7b	6a 01		 push	 1
  00c7d	50		 push	 eax
  00c7e	e8 00 00 00 00	 call	 _Applink
  00c83	83 c4 0c	 add	 esp, 12			; 0000000cH

; 369  : 				return 1;

  00c86	b8 01 00 00 00	 mov	 eax, 1
  00c8b	eb 02		 jmp	 SHORT $LN65@FavoriteVo@2
$LN49@FavoriteVo@2:

; 370  : 			}
; 371  : 
; 372  : 			return 0;

  00c8d	33 c0		 xor	 eax, eax
$LN65@FavoriteVo@2:

; 407  : 	}

  00c8f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00c92	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c99	59		 pop	 ecx
  00c9a	5f		 pop	 edi
  00c9b	5e		 pop	 esi
  00c9c	5b		 pop	 ebx
  00c9d	8b 8d 90 06 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ca3	33 cd		 xor	 ecx, ebp
  00ca5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00caa	81 c5 94 06 00
	00		 add	 ebp, 1684		; 00000694H
  00cb0	8b e5		 mov	 esp, ebp
  00cb2	5d		 pop	 ebp
  00cb3	c2 10 00	 ret	 16			; 00000010H
$LN213@FavoriteVo@2:
  00cb6	8b ff		 npad	 2
$LN214@FavoriteVo@2:
  00cb8	00 00 00 00	 DD	 $LN20@FavoriteVo@2
  00cbc	00 00 00 00	 DD	 $LN22@FavoriteVo@2
  00cc0	00 00 00 00	 DD	 $LN18@FavoriteVo@2
  00cc4	00 00 00 00	 DD	 $LN16@FavoriteVo@2
  00cc8	00 00 00 00	 DD	 $LN8@FavoriteVo@2
  00ccc	00 00 00 00	 DD	 $LN49@FavoriteVo@2
$LN202@FavoriteVo@2:
  00cd0	00		 DB	 0
  00cd1	01		 DB	 1
  00cd2	02		 DB	 2
  00cd3	05		 DB	 5
  00cd4	03		 DB	 3
  00cd5	05		 DB	 5
  00cd6	05		 DB	 5
  00cd7	05		 DB	 5
  00cd8	05		 DB	 5
  00cd9	05		 DB	 5
  00cda	05		 DB	 5
  00cdb	04		 DB	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$4:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA
  00005	83 e0 fe	 and	 eax, -2			; fffffffeH
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?$S1@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4IA, eax
  0000d	c3		 ret	 0
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$5:
  0000e	8d 8d 4c f6 ff
	ff		 lea	 ecx, DWORD PTR $T153736[ebp]
  00014	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$7:
  00019	8d 4d 00	 lea	 ecx, DWORD PTR _BootEncObj$117604[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$8:
  00021	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$117750[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$9:
  0002c	8d 4d bc	 lea	 ecx, DWORD PTR _$S3$117788[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$15:
  00034	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T153760[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$16:
  0003f	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T153761[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$12:
  0004a	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T153757[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z$13:
  00055	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T153758[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z:
  00060	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00064	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00067	8b 8a 48 f6 ff
	ff		 mov	 ecx, DWORD PTR [edx-2488]
  0006d	33 c8		 xor	 ecx, eax
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b 8a 9c 06 00
	00		 mov	 ecx, DWORD PTR [edx+1692]
  0007a	33 c8		 xor	 ecx, eax
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z
  00086	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z ENDP ; CipherShed::FavoriteVolumesDlgProc
; Function compile flags: /Ogtpy
;	COMDAT ??0Exception@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Exception@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0Exception@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::Exception::Exception
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1ErrorException@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1ErrorException@CipherShed@@QAE@XZ PROC		; CipherShed::ErrorException::~ErrorException, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00007	72 0c		 jb	 SHORT $LN22@ErrorExcep
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN22@ErrorExcep:
  00015	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0001c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??1ErrorException@CipherShed@@QAE@XZ ENDP		; CipherShed::ErrorException::~ErrorException
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0ErrorException@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ErrorException@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::ErrorException::ErrorException, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ErrorException@CipherShed@@6B@
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00013	33 d2		 xor	 edx, edx
  00015	6a ff		 push	 -1
  00017	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001a	83 c0 08	 add	 eax, 8
  0001d	52		 push	 edx
  0001e	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00025	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002c	50		 push	 eax
  0002d	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00031	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	c2 04 00	 ret	 4
??0ErrorException@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::ErrorException::ErrorException
_TEXT	ENDS
PUBLIC	?LoadFavoriteVolumes@CipherShed@@YAXXZ		; CipherShed::LoadFavoriteVolumes
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadFavoriteVolumes@CipherShed@@YAXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadFavoriteVolumes@CipherShed@@YAXXZ$0
__unwindtable$?LoadFavoriteVolumes@CipherShed@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadFavoriteVolumes@CipherShed@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadFavoriteVolumes@CipherShed@@YAXXZ$2
__ehfuncinfo$?LoadFavoriteVolumes@CipherShed@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadFavoriteVolumes@CipherShed@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?LoadFavoriteVolumes@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?LoadFavoriteVolumes@CipherShed@@YAXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?LoadFavoriteVolumes@CipherShed@@YAXXZ PROC		; CipherShed::LoadFavoriteVolumes, COMDAT

; 488  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadFavoriteVolumes@CipherShed@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 489  : 		LoadFavoriteVolumes (FavoriteVolumes, false);

  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00032	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ; CipherShed::LoadFavoriteVolumes

; 490  : 
; 491  : 		try
; 492  : 		{
; 493  : 			LoadFavoriteVolumes (SystemFavoriteVolumes, true, true);

  00037	6a 01		 push	 1
  00039	6a 01		 push	 1
  0003b	68 00 00 00 00	 push	 OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00047	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ; CipherShed::LoadFavoriteVolumes
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN7@LoadFavori@2:

; 496  : 
; 497  : 		OnFavoriteVolumesUpdated();

  00056	e8 00 00 00 00	 call	 ?OnFavoriteVolumesUpdated@CipherShed@@YAXXZ ; CipherShed::OnFavoriteVolumesUpdated

; 498  : 	}

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
__catch$?LoadFavoriteVolumes@CipherShed@@YAXXZ$0:

; 494  : 		}
; 495  : 		catch (...) { }	// Ignore errors as SystemFavoriteVolumes list is used only for resolving volume paths to labels

  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00074	b8 00 00 00 00	 mov	 eax, $LN7@LoadFavori@2
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadFavoriteVolumes@CipherShed@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadFavoriteVolumes@CipherShed@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadFavoriteVolumes@CipherShed@@YAXXZ ENDP		; CipherShed::LoadFavoriteVolumes
PUBLIC	__$ArrayPad$
PUBLIC	?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z ; CipherShed::OrganizeFavoriteVolumes
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_hInst:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z$0
__ehfuncinfo$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z
_TEXT	SEGMENT
_args$ = -140						; size = 124
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_systemFavorites$ = 12					; size = 1
_newFavorite$ = 16					; size = 4
?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z PROC ; CipherShed::OrganizeFavoriteVolumes, COMDAT

; 634  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 44 24 7c	 mov	 DWORD PTR __$ArrayPad$[esp+140], eax
  0001f	56		 push	 esi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+148]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+144]
  0003c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR _newFavorite$[esp+144]

; 635  : 		FavoriteVolumesDlgProcArguments args;

  00043	33 c0		 xor	 eax, eax
  00045	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0004a	89 54 24 24	 mov	 DWORD PTR _args$[esp+176], edx
  0004e	89 54 24 40	 mov	 DWORD PTR _args$[esp+204], edx
  00052	89 54 24 5c	 mov	 DWORD PTR _args$[esp+232], edx
  00056	33 d2		 xor	 edx, edx
  00058	89 44 24 20	 mov	 DWORD PTR _args$[esp+172], eax
  0005c	88 44 24 10	 mov	 BYTE PTR _args$[esp+156], al
  00060	89 44 24 3c	 mov	 DWORD PTR _args$[esp+200], eax
  00064	88 44 24 2c	 mov	 BYTE PTR _args$[esp+184], al
  00068	89 44 24 58	 mov	 DWORD PTR _args$[esp+228], eax
  0006c	88 44 24 48	 mov	 BYTE PTR _args$[esp+212], al
  00070	c7 44 24 78 07
	00 00 00	 mov	 DWORD PTR _args$[esp+260], 7
  00078	89 44 24 74	 mov	 DWORD PTR _args$[esp+256], eax
  0007c	66 89 54 24 64	 mov	 WORD PTR _args$[esp+240], dx
  00081	88 44 24 7c	 mov	 BYTE PTR _args$[esp+264], al
  00085	88 44 24 7d	 mov	 BYTE PTR _args$[esp+265], al
  00089	88 44 24 7e	 mov	 BYTE PTR _args$[esp+266], al
  0008d	88 44 24 7f	 mov	 BYTE PTR _args$[esp+267], al
  00091	88 84 24 80 00
	00 00		 mov	 BYTE PTR _args$[esp+268], al
  00098	88 84 24 81 00
	00 00		 mov	 BYTE PTR _args$[esp+269], al
  0009f	88 84 24 82 00
	00 00		 mov	 BYTE PTR _args$[esp+270], al
  000a6	88 84 24 83 00
	00 00		 mov	 BYTE PTR _args$[esp+271], al

; 636  : 		args.SystemFavorites = systemFavorites;

  000ad	8a 94 24 9c 00
	00 00		 mov	 dl, BYTE PTR _systemFavorites$[esp+144]
  000b4	89 84 24 90 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+156], eax
  000bb	88 54 24 08	 mov	 BYTE PTR _args$[esp+148], dl

; 637  : 
; 638  : 		if (!newFavorite.Path.empty())

  000bf	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  000c2	74 11		 je	 SHORT $LN2@OrganizeFa

; 639  : 		{
; 640  : 			args.AddFavoriteVolume = true;
; 641  : 			args.NewFavoriteVolume = newFavorite;

  000c4	51		 push	 ecx
  000c5	8d 4c 24 10	 lea	 ecx, DWORD PTR _args$[esp+156]
  000c9	c6 44 24 0d 01	 mov	 BYTE PTR _args$[esp+153], 1
  000ce	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z

; 642  : 		}
; 643  : 		else

  000d3	eb 04		 jmp	 SHORT $LN1@OrganizeFa
$LN2@OrganizeFa:

; 644  : 			args.AddFavoriteVolume = false;

  000d5	88 44 24 09	 mov	 BYTE PTR _args$[esp+149], al
$LN1@OrganizeFa:

; 645  : 
; 646  : 		return DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_FAVORITE_VOLUMES), hwndDlg, (DLGPROC) FavoriteVolumesDlgProc, (LPARAM) &args) == IDOK;

  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000df	8d 44 24 08	 lea	 eax, DWORD PTR _args$[esp+148]
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z ; CipherShed::FavoriteVolumesDlgProc
  000e9	56		 push	 esi
  000ea	6a 75		 push	 117			; 00000075H
  000ec	51		 push	 ecx
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  000f3	8b f0		 mov	 esi, eax
  000f5	4e		 dec	 esi
  000f6	f7 de		 neg	 esi
  000f8	1b f6		 sbb	 esi, esi
  000fa	8d 4c 24 0c	 lea	 ecx, DWORD PTR _args$[esp+152]
  000fe	46		 inc	 esi
  000ff	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00104	8b c6		 mov	 eax, esi

; 647  : 	}

  00106	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+148]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5e		 pop	 esi
  00116	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  0011a	33 cc		 xor	 ecx, esp
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  00127	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _args$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FavoriteVolumesDlgProcArguments@CipherShed@@QAE@XZ
__ehhandler$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 82 7c ff ff
	ff		 lea	 eax, DWORD PTR [edx-132]
  00015	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	83 c0 04	 add	 eax, 4
  00025	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z ENDP ; CipherShed::OrganizeFavoriteVolumes
PUBLIC	?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::UpdateDeviceHostedFavoriteVolumes
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ$0
__unwindtable$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ$2
__ehfuncinfo$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ
_TEXT	SEGMENT
_e$118549 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ PROC ; CipherShed::UpdateDeviceHostedFavoriteVolumes, COMDAT

; 857  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 858  : 		try
; 859  : 		{

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 860  : 			LoadFavoriteVolumes();

  00032	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::LoadFavoriteVolumes
$LN7@UpdateDevi:

; 866  : 	}

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
__catch$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ$0:

; 861  : 		}
; 862  : 		catch (Exception &e)
; 863  : 		{
; 864  : 			e.Show (MainDlg);

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _e$118549[ebp]
  0004c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	52		 push	 edx
  00057	ff d0		 call	 eax

; 865  : 		}

  00059	b8 00 00 00 00	 mov	 eax, $LN7@UpdateDevi
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ ENDP ; CipherShed::UpdateDeviceHostedFavoriteVolumes
PUBLIC	??_C@_0BP@BOKIMCAM@FAVORITE_ADD_DRIVE_DEV_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CE@GJAIEOAP@FAVORITE_ADD_PARTITION_TYPE_WARN@ ; `string'
PUBLIC	??_C@_04FFEPHCCK@?2?$DP?$DP?2?$AA@		; `string'
PUBLIC	??_C@_03OPPAHFLA@X?3?2?$AA@			; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z ; CipherShed::AddMountedVolumeToFavorites
EXTRN	_bExplore:DWORD
EXTRN	__imp__FindVolumeClose@4:PROC
EXTRN	__imp__FindNextVolumeA@12:PROC
EXTRN	__imp__QueryDosDeviceA@12:PROC
EXTRN	__imp__FindFirstVolumeA@8:PROC
EXTRN	_ResolveSymbolicLink:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_hDriver:DWORD
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BP@BOKIMCAM@FAVORITE_ADD_DRIVE_DEV_WARNING?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BP@BOKIMCAM@FAVORITE_ADD_DRIVE_DEV_WARNING?$AA@ DB 'FAVORITE_ADD_D'
	DB	'RIVE_DEV_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GJAIEOAP@FAVORITE_ADD_PARTITION_TYPE_WARN@
CONST	SEGMENT
??_C@_0CE@GJAIEOAP@FAVORITE_ADD_PARTITION_TYPE_WARN@ DB 'FAVORITE_ADD_PAR'
	DB	'TITION_TYPE_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFEPHCCK@?2?$DP?$DP?2?$AA@
CONST	SEGMENT
??_C@_04FFEPHCCK@?2?$DP?$DP?2?$AA@ DB '\??\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPPAHFLA@X?3?2?$AA@
CONST	SEGMENT
??_C@_03OPPAHFLA@X?3?2?$AA@ DB 'X:\', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$9
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z
_TEXT	SEGMENT
$T155317 = -1869					; size = 1
$T155333 = -1868					; size = 4
_hwndDlg$GSCopy$ = -1864				; size = 4
_bytesReturned$ = -1860					; size = 4
$T155318 = -1856					; size = 28
$T155315 = -1856					; size = 28
_vn$117494 = -1828					; size = 28
$T155316 = -1828					; size = 28
$T155314 = -1828					; size = 28
$T155312 = -1828					; size = 28
$T155310 = -1828					; size = 28
_volumeDevPath$117478 = -1800				; size = 28
$T155311 = -1800					; size = 28
_favorite$ = -1772					; size = 120
_prop$ = -1652						; size = 596
_volumeName$117485 = -1056				; size = 260
_findVolumeDevPath$117493 = -796			; size = 260
_resolvedVolumeDevPath$117479 = -536			; size = 520
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_systemFavorites$ = 16					; size = 1
?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z PROC ; CipherShed::AddMountedVolumeToFavorites, COMDAT

; 32   : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 44 07 00
	00		 sub	 esp, 1860		; 00000744H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 40 07
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1872], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 58 07
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1892]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b b4 24 68 07
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+1888]

; 48   : 
; 49   : 		favorite.Path = WideToSingleString ((wchar_t *) prop.wszVolume);

  00042	33 db		 xor	 ebx, ebx
  00044	68 54 02 00 00	 push	 596			; 00000254H
  00049	8d 84 24 f4 00
	00 00		 lea	 eax, DWORD PTR _prop$[esp+1896]
  00050	53		 push	 ebx
  00051	50		 push	 eax

; 89   : 
; 90   : 		if (favorite.VolumePathId.empty()
; 91   : 			&& IsVolumeDeviceHosted (favorite.Path.c_str())
; 92   : 			&& favorite.Path.find ("\\\\?\\Volume{") != 0)

  00052	89 74 24 28	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+1904], esi
  00056	89 5c 24 24	 mov	 DWORD PTR $T155333[esp+1904], ebx
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	8b 8c 24 78 07
	00 00		 mov	 ecx, DWORD PTR _driveNo$[esp+1900]
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	53		 push	 ebx
  0006a	8d 54 24 24	 lea	 edx, DWORD PTR _bytesReturned$[esp+1896]
  0006e	52		 push	 edx
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00075	68 54 02 00 00	 push	 596			; 00000254H
  0007a	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _prop$[esp+1904]
  00081	50		 push	 eax
  00082	68 54 02 00 00	 push	 596			; 00000254H
  00087	89 8c 24 04 01
	00 00		 mov	 DWORD PTR _prop$[esp+1912], ecx
  0008e	8b c8		 mov	 ecx, eax
  00090	51		 push	 ecx
  00091	68 1c 20 22 00	 push	 2236444			; 0022201cH
  00096	52		 push	 edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0009d	85 c0		 test	 eax, eax
  0009f	75 10		 jne	 SHORT $LN10@AddMounted
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 _handleWin32Error
  000a7	83 c4 04	 add	 esp, 4
  000aa	33 c0		 xor	 eax, eax
  000ac	e9 58 05 00 00	 jmp	 $LN11@AddMounted
$LN10@AddMounted:

; 33   : 		VOLUME_PROPERTIES_STRUCT prop;
; 34   : 		DWORD bytesReturned;
; 35   : 
; 36   : 		memset (&prop, 0, sizeof (prop));
; 37   : 		prop.driveNo = driveNo;
; 38   : 
; 39   : 		if (!DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop, sizeof (prop), &prop, sizeof (prop), &bytesReturned, NULL))
; 40   : 		{
; 41   : 			handleWin32Error (hwndDlg);
; 42   : 			return FALSE;
; 43   : 		}
; 44   : 
; 45   : 		FavoriteVolume favorite;

  000b1	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  000b6	bf 07 00 00 00	 mov	 edi, 7
  000bb	33 c0		 xor	 eax, eax
  000bd	89 b4 24 90 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1916], esi
  000c4	89 9c 24 8c 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1912], ebx
  000cb	88 5c 24 7c	 mov	 BYTE PTR _favorite$[esp+1896], bl
  000cf	89 b4 24 ac 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1944], esi
  000d6	89 9c 24 a8 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1940], ebx
  000dd	88 9c 24 98 00
	00 00		 mov	 BYTE PTR _favorite$[esp+1924], bl
  000e4	89 b4 24 c8 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1972], esi
  000eb	89 9c 24 c4 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1968], ebx
  000f2	88 9c 24 b4 00
	00 00		 mov	 BYTE PTR _favorite$[esp+1952], bl
  000f9	89 bc 24 e4 00
	00 00		 mov	 DWORD PTR _favorite$[esp+2000], edi
  00100	89 9c 24 e0 00
	00 00		 mov	 DWORD PTR _favorite$[esp+1996], ebx
  00107	66 89 84 24 d0
	00 00 00	 mov	 WORD PTR _favorite$[esp+1980], ax
  0010f	88 9c 24 e8 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2004], bl
  00116	88 9c 24 e9 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2005], bl
  0011d	88 9c 24 ea 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2006], bl
  00124	88 9c 24 eb 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2007], bl
  0012b	88 9c 24 ec 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2008], bl
  00132	88 9c 24 ed 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2009], bl
  00139	88 9c 24 ee 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2010], bl
  00140	88 9c 24 ef 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2011], bl

; 46   : 		favorite.MountPoint = "X:\\";

  00147	6a 03		 push	 3
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_03OPPAHFLA@X?3?2?$AA@
  0014e	8d 8c 24 9c 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1928]
  00155	89 9c 24 68 07
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1908], ebx
  0015c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 47   : 		favorite.MountPoint[0] = (char) (prop.driveNo + 'A');

  00161	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR _favorite$[esp+1924]
  00168	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0016d	39 ac 24 ac 00
	00 00		 cmp	 DWORD PTR _favorite$[esp+1944], ebp
  00174	73 07		 jae	 SHORT $LN176@AddMounted
  00176	8d 84 24 98 00
	00 00		 lea	 eax, DWORD PTR _favorite$[esp+1924]
$LN176@AddMounted:
  0017d	8a 8c 24 f0 00
	00 00		 mov	 cl, BYTE PTR _prop$[esp+1892]
  00184	80 c1 41	 add	 cl, 65			; 00000041H

; 48   : 
; 49   : 		favorite.Path = WideToSingleString ((wchar_t *) prop.wszVolume);

  00187	33 d2		 xor	 edx, edx
  00189	88 08		 mov	 BYTE PTR [eax], cl
  0018b	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _prop$[esp+1900]
  00192	66 89 54 24 44	 mov	 WORD PTR $T155310[esp+1896], dx
  00197	89 7c 24 58	 mov	 DWORD PTR $T155310[esp+1916], edi
  0019b	89 5c 24 54	 mov	 DWORD PTR $T155310[esp+1912], ebx
  0019f	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL545@AddMounted:
  001a2	66 8b 08	 mov	 cx, WORD PTR [eax]
  001a5	83 c0 02	 add	 eax, 2
  001a8	66 3b cb	 cmp	 cx, bx
  001ab	75 f5		 jne	 SHORT $LL545@AddMounted
  001ad	2b c2		 sub	 eax, edx
  001af	d1 f8		 sar	 eax, 1
  001b1	50		 push	 eax
  001b2	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _prop$[esp+1904]
  001b9	50		 push	 eax
  001ba	8d 4c 24 48	 lea	 ecx, DWORD PTR $T155310[esp+1900]
  001be	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001c3	8d 4c 24 40	 lea	 ecx, DWORD PTR $T155310[esp+1892]
  001c7	51		 push	 ecx
  001c8	8d 54 24 60	 lea	 edx, DWORD PTR $T155311[esp+1896]
  001cc	52		 push	 edx
  001cd	c6 84 24 68 07
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+1908], 1
  001d5	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  001da	83 c4 08	 add	 esp, 8
  001dd	6a ff		 push	 -1
  001df	53		 push	 ebx
  001e0	50		 push	 eax
  001e1	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1904]
  001e8	c6 84 24 6c 07
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+1912], 2
  001f0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001f5	39 6c 24 74	 cmp	 DWORD PTR $T155311[esp+1916], ebp
  001f9	72 0d		 jb	 SHORT $LN235@AddMounted
  001fb	8b 44 24 60	 mov	 eax, DWORD PTR $T155311[esp+1896]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00205	83 c4 04	 add	 esp, 4
$LN235@AddMounted:
  00208	bf 08 00 00 00	 mov	 edi, 8
  0020d	89 74 24 74	 mov	 DWORD PTR $T155311[esp+1916], esi
  00211	89 5c 24 70	 mov	 DWORD PTR $T155311[esp+1912], ebx
  00215	88 5c 24 60	 mov	 BYTE PTR $T155311[esp+1896], bl
  00219	88 9c 24 60 07
	00 00		 mov	 BYTE PTR __$EHRec$[esp+1900], bl
  00220	39 7c 24 58	 cmp	 DWORD PTR $T155310[esp+1916], edi
  00224	72 0d		 jb	 SHORT $LN263@AddMounted
  00226	8b 4c 24 44	 mov	 ecx, DWORD PTR $T155310[esp+1896]
  0022a	51		 push	 ecx
  0022b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00230	83 c4 04	 add	 esp, 4
$LN263@AddMounted:

; 50   : 		if (favorite.Path.find ("\\??\\") == 0)

  00233	6a 04		 push	 4
  00235	53		 push	 ebx
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_04FFEPHCCK@?2?$DP?$DP?2?$AA@
  0023b	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1904]
  00242	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00247	85 c0		 test	 eax, eax
  00249	75 47		 jne	 SHORT $LN297@AddMounted

; 51   : 			favorite.Path = favorite.Path.substr (4);

  0024b	6a ff		 push	 -1
  0024d	6a 04		 push	 4
  0024f	8d 54 24 48	 lea	 edx, DWORD PTR $T155312[esp+1900]
  00253	52		 push	 edx
  00254	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1904]
  0025b	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00260	6a ff		 push	 -1
  00262	53		 push	 ebx
  00263	50		 push	 eax
  00264	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1904]
  0026b	c6 84 24 6c 07
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+1912], 3
  00273	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00278	88 9c 24 60 07
	00 00		 mov	 BYTE PTR __$EHRec$[esp+1900], bl
  0027f	39 6c 24 58	 cmp	 DWORD PTR $T155312[esp+1916], ebp
  00283	72 0d		 jb	 SHORT $LN297@AddMounted
  00285	8b 44 24 44	 mov	 eax, DWORD PTR $T155312[esp+1896]
  00289	50		 push	 eax
  0028a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0028f	83 c4 04	 add	 esp, 4
$LN297@AddMounted:

; 52   : 
; 53   : 		if (IsVolumeDeviceHosted (favorite.Path.c_str()))

  00292	8b 44 24 7c	 mov	 eax, DWORD PTR _favorite$[esp+1896]
  00296	39 ac 24 90 00
	00 00		 cmp	 DWORD PTR _favorite$[esp+1916], ebp
  0029d	73 04		 jae	 SHORT $LN312@AddMounted
  0029f	8d 44 24 7c	 lea	 eax, DWORD PTR _favorite$[esp+1896]
$LN312@AddMounted:
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  002a9	83 c4 04	 add	 esp, 4
  002ac	85 c0		 test	 eax, eax
  002ae	0f 84 81 02 00
	00		 je	 $LN521@AddMounted

; 54   : 		{
; 55   : 			// Get GUID path
; 56   : 			string volumeDevPath = favorite.Path;

  002b4	6a ff		 push	 -1
  002b6	53		 push	 ebx
  002b7	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1900]
  002be	51		 push	 ecx
  002bf	8d 4c 24 68	 lea	 ecx, DWORD PTR _volumeDevPath$117478[esp+1904]
  002c3	89 b4 24 80 00
	00 00		 mov	 DWORD PTR _volumeDevPath$117478[esp+1928], esi
  002ca	89 5c 24 7c	 mov	 DWORD PTR _volumeDevPath$117478[esp+1924], ebx
  002ce	88 5c 24 6c	 mov	 BYTE PTR _volumeDevPath$117478[esp+1908], bl
  002d2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 57   : 
; 58   : 			wchar_t resolvedVolumeDevPath[TC_MAX_PATH];
; 59   : 			if (ResolveSymbolicLink (SingleStringToWide (volumeDevPath).c_str(), resolvedVolumeDevPath))

  002d7	8d 54 24 5c	 lea	 edx, DWORD PTR _volumeDevPath$117478[esp+1892]
  002db	52		 push	 edx
  002dc	8d 44 24 44	 lea	 eax, DWORD PTR $T155314[esp+1896]
  002e0	50		 push	 eax
  002e1	c6 84 24 68 07
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+1908], 4
  002e9	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  002ee	83 c4 08	 add	 esp, 8
  002f1	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  002f4	72 05		 jb	 SHORT $LN343@AddMounted
  002f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002f9	eb 03		 jmp	 SHORT $LN344@AddMounted
$LN343@AddMounted:
  002fb	83 c0 04	 add	 eax, 4
$LN344@AddMounted:
  002fe	8d 8c 24 4c 05
	00 00		 lea	 ecx, DWORD PTR _resolvedVolumeDevPath$117479[esp+1892]
  00305	51		 push	 ecx
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 _ResolveSymbolicLink
  0030c	83 c4 08	 add	 esp, 8
  0030f	8b f0		 mov	 esi, eax
  00311	39 7c 24 58	 cmp	 DWORD PTR $T155314[esp+1916], edi
  00315	72 0d		 jb	 SHORT $LN363@AddMounted
  00317	8b 54 24 44	 mov	 edx, DWORD PTR $T155314[esp+1896]
  0031b	52		 push	 edx
  0031c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00321	83 c4 04	 add	 esp, 4
$LN363@AddMounted:
  00324	3b f3		 cmp	 esi, ebx
  00326	74 77		 je	 SHORT $LN550@AddMounted

; 60   : 				volumeDevPath = WideToSingleString (resolvedVolumeDevPath);

  00328	8d 84 24 4c 05
	00 00		 lea	 eax, DWORD PTR _resolvedVolumeDevPath$117479[esp+1892]
  0032f	50		 push	 eax
  00330	8d 4c 24 28	 lea	 ecx, DWORD PTR $T155315[esp+1896]
  00334	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00339	8d 4c 24 24	 lea	 ecx, DWORD PTR $T155315[esp+1892]
  0033d	51		 push	 ecx
  0033e	8d 54 24 44	 lea	 edx, DWORD PTR $T155316[esp+1896]
  00342	52		 push	 edx
  00343	c6 84 24 68 07
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+1908], 5
  0034b	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  00350	83 c4 08	 add	 esp, 8
  00353	6a ff		 push	 -1
  00355	53		 push	 ebx
  00356	50		 push	 eax
  00357	8d 4c 24 68	 lea	 ecx, DWORD PTR _volumeDevPath$117478[esp+1904]
  0035b	c6 84 24 6c 07
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+1912], 6
  00363	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00368	39 6c 24 58	 cmp	 DWORD PTR $T155316[esp+1916], ebp
  0036c	72 0d		 jb	 SHORT $LN393@AddMounted
  0036e	8b 44 24 44	 mov	 eax, DWORD PTR $T155316[esp+1896]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00378	83 c4 04	 add	 esp, 4
$LN393@AddMounted:
  0037b	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00380	8d 4c 24 24	 lea	 ecx, DWORD PTR $T155315[esp+1892]
  00384	89 7c 24 58	 mov	 DWORD PTR $T155316[esp+1916], edi
  00388	89 5c 24 54	 mov	 DWORD PTR $T155316[esp+1912], ebx
  0038c	88 5c 24 44	 mov	 BYTE PTR $T155316[esp+1896], bl
  00390	c6 84 24 60 07
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+1900], 4
  00398	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0039d	eb 05		 jmp	 SHORT $LN7@AddMounted
$LN550@AddMounted:
  0039f	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
$LN7@AddMounted:

; 61   : 
; 62   : 			char volumeName[TC_MAX_PATH];
; 63   : 			HANDLE find = FindFirstVolume (volumeName, sizeof (volumeName));

  003a4	68 04 01 00 00	 push	 260			; 00000104H
  003a9	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _volumeName$117485[esp+1896]
  003b0	51		 push	 ecx
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstVolumeA@8
  003b7	8b f0		 mov	 esi, eax

; 64   : 
; 65   : 			if (find != INVALID_HANDLE_VALUE)

  003b9	83 fe ff	 cmp	 esi, -1
  003bc	0f 84 59 01 00
	00		 je	 $LN6@AddMounted
  003c2	eb 0c 8d a4 24
	00 00 00 00 eb
	03 8d 49 00	 npad	 14
$LL5@AddMounted:

; 66   : 			{
; 67   : 				do
; 68   : 				{
; 69   : 					char findVolumeDevPath[TC_MAX_PATH];
; 70   : 					string vn = volumeName;

  003d0	8d 84 24 44 03
	00 00		 lea	 eax, DWORD PTR _volumeName$117485[esp+1892]
  003d7	89 7c 24 58	 mov	 DWORD PTR _vn$117494[esp+1916], edi
  003db	89 5c 24 54	 mov	 DWORD PTR _vn$117494[esp+1912], ebx
  003df	88 5c 24 44	 mov	 BYTE PTR _vn$117494[esp+1896], bl
  003e3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL546@AddMounted:
  003e6	8a 08		 mov	 cl, BYTE PTR [eax]
  003e8	40		 inc	 eax
  003e9	3a cb		 cmp	 cl, bl
  003eb	75 f9		 jne	 SHORT $LL546@AddMounted
  003ed	2b c2		 sub	 eax, edx
  003ef	50		 push	 eax
  003f0	8d 94 24 48 03
	00 00		 lea	 edx, DWORD PTR _volumeName$117485[esp+1896]
  003f7	52		 push	 edx
  003f8	8d 4c 24 48	 lea	 ecx, DWORD PTR _vn$117494[esp+1900]
  003fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 71   : 
; 72   : 					if (QueryDosDevice (vn.substr (4, vn.size() - 5).c_str(), findVolumeDevPath, sizeof (findVolumeDevPath)) != 0
; 73   : 						&& volumeDevPath == findVolumeDevPath)

  00401	8b 44 24 54	 mov	 eax, DWORD PTR _vn$117494[esp+1912]
  00405	83 c0 fb	 add	 eax, -5			; fffffffbH
  00408	50		 push	 eax
  00409	6a 04		 push	 4
  0040b	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T155318[esp+1900]
  0040f	51		 push	 ecx
  00410	8d 4c 24 4c	 lea	 ecx, DWORD PTR _vn$117494[esp+1904]
  00414	c6 84 24 6c 07
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+1912], 7
  0041c	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00421	83 4c 24 18 01	 or	 DWORD PTR $T155333[esp+1892], 1
  00426	c6 84 24 60 07
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+1900], 8
  0042e	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  00431	72 05		 jb	 SHORT $LN445@AddMounted
  00433	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00436	eb 03		 jmp	 SHORT $LN446@AddMounted
$LN445@AddMounted:
  00438	83 c0 04	 add	 eax, 4
$LN446@AddMounted:
  0043b	68 04 01 00 00	 push	 260			; 00000104H
  00440	8d 94 24 4c 04
	00 00		 lea	 edx, DWORD PTR _findVolumeDevPath$117493[esp+1896]
  00447	52		 push	 edx
  00448	50		 push	 eax
  00449	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceA@12
  0044f	85 c0		 test	 eax, eax
  00451	74 37		 je	 SHORT $LN13@AddMounted
  00453	8d 84 24 48 04
	00 00		 lea	 eax, DWORD PTR _findVolumeDevPath$117493[esp+1892]
  0045a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0045d	8d 49 00	 npad	 3
$LL547@AddMounted:
  00460	8a 08		 mov	 cl, BYTE PTR [eax]
  00462	40		 inc	 eax
  00463	3a cb		 cmp	 cl, bl
  00465	75 f9		 jne	 SHORT $LL547@AddMounted
  00467	8b 4c 24 70	 mov	 ecx, DWORD PTR _volumeDevPath$117478[esp+1912]
  0046b	2b c2		 sub	 eax, edx
  0046d	50		 push	 eax
  0046e	8d 84 24 4c 04
	00 00		 lea	 eax, DWORD PTR _findVolumeDevPath$117493[esp+1896]
  00475	50		 push	 eax
  00476	51		 push	 ecx
  00477	53		 push	 ebx
  00478	8d 4c 24 6c	 lea	 ecx, DWORD PTR _volumeDevPath$117478[esp+1908]
  0047c	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00481	c6 44 24 17 01	 mov	 BYTE PTR $T155317[esp+1892], 1
  00486	85 c0		 test	 eax, eax
  00488	74 04		 je	 SHORT $LN14@AddMounted
$LN13@AddMounted:
  0048a	88 5c 24 17	 mov	 BYTE PTR $T155317[esp+1892], bl
$LN14@AddMounted:
  0048e	f6 44 24 18 01	 test	 BYTE PTR $T155333[esp+1892], 1
  00493	c7 84 24 60 07
	00 00 07 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1900], 7
  0049e	74 18		 je	 SHORT $LN469@AddMounted
  004a0	83 64 24 18 fe	 and	 DWORD PTR $T155333[esp+1892], -2 ; fffffffeH
  004a5	39 6c 24 3c	 cmp	 DWORD PTR $T155318[esp+1916], ebp
  004a9	72 0d		 jb	 SHORT $LN469@AddMounted
  004ab	8b 54 24 28	 mov	 edx, DWORD PTR $T155318[esp+1896]
  004af	52		 push	 edx
  004b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b5	83 c4 04	 add	 esp, 4
$LN469@AddMounted:
  004b8	38 5c 24 17	 cmp	 BYTE PTR $T155317[esp+1892], bl
  004bc	75 39		 jne	 SHORT $LN544@AddMounted

; 77   : 					}
; 78   : 
; 79   : 				} while (FindNextVolume (find, volumeName, sizeof (volumeName)));

  004be	c6 84 24 60 07
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+1900], 4
  004c6	39 6c 24 58	 cmp	 DWORD PTR _vn$117494[esp+1916], ebp
  004ca	72 0d		 jb	 SHORT $LN495@AddMounted
  004cc	8b 44 24 44	 mov	 eax, DWORD PTR _vn$117494[esp+1896]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004d6	83 c4 04	 add	 esp, 4
$LN495@AddMounted:
  004d9	68 04 01 00 00	 push	 260			; 00000104H
  004de	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _volumeName$117485[esp+1896]
  004e5	51		 push	 ecx
  004e6	56		 push	 esi
  004e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextVolumeA@12
  004ed	85 c0		 test	 eax, eax
  004ef	0f 85 db fe ff
	ff		 jne	 $LL5@AddMounted
  004f5	eb 1d		 jmp	 SHORT $LN3@AddMounted
$LN544@AddMounted:

; 74   : 					{
; 75   : 						favorite.VolumePathId = volumeName;

  004f7	8d 94 24 44 03
	00 00		 lea	 edx, DWORD PTR _volumeName$117485[esp+1892]
  004fe	52		 push	 edx
  004ff	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1952]
  00506	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 76   : 						break;

  0050b	8d 4c 24 40	 lea	 ecx, DWORD PTR _vn$117494[esp+1892]
  0050f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@AddMounted:

; 80   : 
; 81   : 				FindVolumeClose (find);

  00514	56		 push	 esi
  00515	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindVolumeClose@4
$LN6@AddMounted:

; 82   : 			}
; 83   : 		}

  0051b	88 9c 24 60 07
	00 00		 mov	 BYTE PTR __$EHRec$[esp+1900], bl
  00522	39 6c 24 74	 cmp	 DWORD PTR _volumeDevPath$117478[esp+1916], ebp
  00526	72 0d		 jb	 SHORT $LN521@AddMounted
  00528	8b 44 24 60	 mov	 eax, DWORD PTR _volumeDevPath$117478[esp+1896]
  0052c	50		 push	 eax
  0052d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00532	83 c4 04	 add	 esp, 4
$LN521@AddMounted:

; 84   : 
; 85   : 		favorite.ReadOnly = prop.readOnly ? true : false;

  00535	39 9c 24 1c 03
	00 00		 cmp	 DWORD PTR _prop$[esp+2448], ebx
  0053c	0f 95 c1	 setne	 cl

; 86   : 		favorite.Removable = prop.removable ? true : false;

  0053f	39 9c 24 20 03
	00 00		 cmp	 DWORD PTR _prop$[esp+2452], ebx
  00546	88 8c 24 ed 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2009], cl
  0054d	0f 95 c2	 setne	 dl

; 87   : 		favorite.SystemEncryption = prop.partitionInInactiveSysEncScope ? true : false;

  00550	39 9c 24 24 03
	00 00		 cmp	 DWORD PTR _prop$[esp+2456], ebx
  00557	88 94 24 ee 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2010], dl
  0055e	0f 95 c0	 setne	 al

; 88   : 		favorite.OpenExplorerWindow = (bExplore == TRUE);

  00561	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _bExplore, 1
  00568	88 84 24 ef 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2011], al
  0056f	0f 94 c1	 sete	 cl
  00572	88 8c 24 ec 00
	00 00		 mov	 BYTE PTR _favorite$[esp+2008], cl

; 89   : 
; 90   : 		if (favorite.VolumePathId.empty()
; 91   : 			&& IsVolumeDeviceHosted (favorite.Path.c_str())
; 92   : 			&& favorite.Path.find ("\\\\?\\Volume{") != 0)

  00579	39 9c 24 c4 00
	00 00		 cmp	 DWORD PTR _favorite$[esp+1968], ebx
  00580	75 60		 jne	 SHORT $LN1@AddMounted
  00582	8b 44 24 7c	 mov	 eax, DWORD PTR _favorite$[esp+1896]
  00586	39 ac 24 90 00
	00 00		 cmp	 DWORD PTR _favorite$[esp+1916], ebp
  0058d	73 04		 jae	 SHORT $LN538@AddMounted
  0058f	8d 44 24 7c	 lea	 eax, DWORD PTR _favorite$[esp+1896]
$LN538@AddMounted:
  00593	50		 push	 eax
  00594	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  00599	83 c4 04	 add	 esp, 4
  0059c	85 c0		 test	 eax, eax
  0059e	74 42		 je	 SHORT $LN1@AddMounted
  005a0	6a 0b		 push	 11			; 0000000bH
  005a2	53		 push	 ebx
  005a3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  005a8	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1904]
  005af	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  005b4	85 c0		 test	 eax, eax
  005b6	74 2a		 je	 SHORT $LN1@AddMounted

; 93   : 		{
; 94   : 			Warning (favorite.Path.find ("\\Partition0") == string::npos ? "FAVORITE_ADD_PARTITION_TYPE_WARNING" : "FAVORITE_ADD_DRIVE_DEV_WARNING");

  005b8	53		 push	 ebx
  005b9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
  005be	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _favorite$[esp+1900]
  005c5	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  005ca	83 f8 ff	 cmp	 eax, -1
  005cd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@GJAIEOAP@FAVORITE_ADD_PARTITION_TYPE_WARN@
  005d2	74 05		 je	 SHORT $LN16@AddMounted
  005d4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BP@BOKIMCAM@FAVORITE_ADD_DRIVE_DEV_WARNING?$AA@
$LN16@AddMounted:
  005d9	50		 push	 eax
  005da	e8 00 00 00 00	 call	 _Warning
  005df	83 c4 04	 add	 esp, 4
$LN1@AddMounted:

; 95   : 		}
; 96   : 
; 97   : 		return OrganizeFavoriteVolumes (hwndDlg, systemFavorites, favorite);

  005e2	8b 84 24 70 07
	00 00		 mov	 eax, DWORD PTR _systemFavorites$[esp+1888]
  005e9	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+1892]
  005ed	8d 54 24 78	 lea	 edx, DWORD PTR _favorite$[esp+1892]
  005f1	52		 push	 edx
  005f2	50		 push	 eax
  005f3	51		 push	 ecx
  005f4	e8 00 00 00 00	 call	 ?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z ; CipherShed::OrganizeFavoriteVolumes
  005f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  005fc	8d 4c 24 78	 lea	 ecx, DWORD PTR _favorite$[esp+1892]
  00600	8b f0		 mov	 esi, eax
  00602	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00607	8b c6		 mov	 eax, esi
$LN11@AddMounted:

; 98   : 	}

  00609	8b 8c 24 58 07
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1892]
  00610	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00617	59		 pop	 ecx
  00618	5f		 pop	 edi
  00619	5e		 pop	 esi
  0061a	5d		 pop	 ebp
  0061b	5b		 pop	 ebx
  0061c	8b 8c 24 40 07
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1872]
  00623	33 cc		 xor	 ecx, esp
  00625	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0062a	81 c4 50 07 00
	00		 add	 esp, 1872		; 00000750H
  00630	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$0:
  00000	8d 8d 14 f9 ff
	ff		 lea	 ecx, DWORD PTR _favorite$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$1:
  0000b	8d 8d dc f8 ff
	ff		 lea	 ecx, DWORD PTR $T155310[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$2:
  00016	8d 8d f8 f8 ff
	ff		 lea	 ecx, DWORD PTR $T155311[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$3:
  00021	8d 8d dc f8 ff
	ff		 lea	 ecx, DWORD PTR $T155312[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$4:
  0002c	8d 8d f8 f8 ff
	ff		 lea	 ecx, DWORD PTR _volumeDevPath$117478[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$6:
  00037	8d 8d c0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T155315[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$7:
  00042	8d 8d dc f8 ff
	ff		 lea	 ecx, DWORD PTR $T155316[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$8:
  0004d	8d 8d dc f8 ff
	ff		 lea	 ecx, DWORD PTR _vn$117494[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z$9:
  00058	8b 85 b4 f8 ff
	ff		 mov	 eax, DWORD PTR $T155333[ebp]
  0005e	83 e0 01	 and	 eax, 1
  00061	0f 84 12 00 00
	00		 je	 $LN27@AddMounted
  00067	83 a5 b4 f8 ff
	ff fe		 and	 DWORD PTR $T155333[ebp], -2 ; fffffffeH
  0006e	8d 8d c0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T155318[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN27@AddMounted:
  00079	c3		 ret	 0
__ehhandler$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z:
  0007a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0007e	8d 82 ac f8 ff
	ff		 lea	 eax, DWORD PTR [edx-1876]
  00084	8b 8a a8 f8 ff
	ff		 mov	 ecx, DWORD PTR [edx-1880]
  0008a	33 c8		 xor	 ecx, eax
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	83 c0 10	 add	 eax, 16			; 00000010H
  00094	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00097	33 c8		 xor	 ecx, eax
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z
  000a3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z ENDP ; CipherShed::AddMountedVolumeToFavorites
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??__EFavoriteVolumes@CipherShed@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EFavoriteVolumes@CipherShed@@YAXXZ$0
__ehfuncinfo$??__EFavoriteVolumes@CipherShed@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EFavoriteVolumes@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ??__EFavoriteVolumes@CipherShed@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__EFavoriteVolumes@CipherShed@@YAXXZ PROC		; CipherShed::`dynamic initializer for 'FavoriteVolumes'', COMDAT

; 24   : 	vector <FavoriteVolume> FavoriteVolumes;

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??__EFavoriteVolumes@CipherShed@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	6a 04		 push	 4
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00027	33 c9		 xor	 ecx, ecx
  00029	83 c4 04	 add	 esp, 4
  0002c	3b c1		 cmp	 eax, ecx
  0002e	74 08		 je	 SHORT $LN15@dynamic
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00036	eb 02		 jmp	 SHORT $LN16@dynamic
$LN15@dynamic:
  00038	33 c0		 xor	 eax, eax
$LN16@dynamic:
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A, eax
  0003f	68 00 00 00 00	 push	 OFFSET ??__FFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::`dynamic atexit destructor for 'FavoriteVolumes''
  00044	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12, ecx
  0004a	89 0d 10 00 00
	00		 mov	 DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16, ecx
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20, ecx
  00056	e8 00 00 00 00	 call	 _atexit
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	c3		 ret	 0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EFavoriteVolumes@CipherShed@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00005	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??__EFavoriteVolumes@CipherShed@@YAXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 02		 lea	 eax, DWORD PTR [edx]
  00010	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__EFavoriteVolumes@CipherShed@@YAXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__EFavoriteVolumes@CipherShed@@YAXXZ ENDP		; CipherShed::`dynamic initializer for 'FavoriteVolumes''
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ$0
__ehfuncinfo$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\mount\favorites.cpp
xdata$x	ENDS
;	COMDAT ??__ESystemFavoriteVolumes@CipherShed@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__ESystemFavoriteVolumes@CipherShed@@YAXXZ PROC	; CipherShed::`dynamic initializer for 'SystemFavoriteVolumes'', COMDAT

; 25   : 	vector <FavoriteVolume> SystemFavoriteVolumes;

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	6a 04		 push	 4
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00027	33 c9		 xor	 ecx, ecx
  00029	83 c4 04	 add	 esp, 4
  0002c	3b c1		 cmp	 eax, ecx
  0002e	74 08		 je	 SHORT $LN15@dynamic@2
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00036	eb 02		 jmp	 SHORT $LN16@dynamic@2
$LN15@dynamic@2:
  00038	33 c0		 xor	 eax, eax
$LN16@dynamic@2:
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A, eax
  0003f	68 00 00 00 00	 push	 OFFSET ??__FSystemFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::`dynamic atexit destructor for 'SystemFavoriteVolumes''
  00044	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12, ecx
  0004a	89 0d 10 00 00
	00		 mov	 DWORD PTR ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16, ecx
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20, ecx
  00056	e8 00 00 00 00	 call	 _atexit
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	c3		 ret	 0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00005	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 02		 lea	 eax, DWORD PTR [edx]
  00010	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__ESystemFavoriteVolumes@CipherShed@@YAXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__ESystemFavoriteVolumes@CipherShed@@YAXXZ ENDP	; CipherShed::`dynamic initializer for 'SystemFavoriteVolumes''
; Function compile flags: /Ogtpy
;	COMDAT ??__EFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ
text$yc	SEGMENT
??__EFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ PROC ; CipherShed::`dynamic initializer for 'FavoritesOnArrivalMountRequired'', COMDAT

; 26   : 	list <FavoriteVolume> FavoritesOnArrivalMountRequired;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  00005	e8 00 00 00 00	 call	 ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0000a	68 00 00 00 00	 push	 OFFSET ??__FFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ ; CipherShed::`dynamic atexit destructor for 'FavoritesOnArrivalMountRequired''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ ENDP ; CipherShed::`dynamic initializer for 'FavoritesOnArrivalMountRequired''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__EFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ
text$yc	SEGMENT
??__EFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ PROC ; CipherShed::`dynamic initializer for 'FavoritesMountedOnArrivalStillConnected'', COMDAT

; 27   : 	list <FavoriteVolume> FavoritesMountedOnArrivalStillConnected;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  00005	e8 00 00 00 00	 call	 ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0000a	68 00 00 00 00	 push	 OFFSET ??__FFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ ; CipherShed::`dynamic atexit destructor for 'FavoritesMountedOnArrivalStillConnected''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ ENDP ; CipherShed::`dynamic initializer for 'FavoritesMountedOnArrivalStillConnected''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__FFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ
text$yd	SEGMENT
??__FFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ PROC ; CipherShed::`dynamic atexit destructor for 'FavoritesOnArrivalMountRequired'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  00005	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0001b	51		 push	 ecx
  0001c	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20, 0
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
??__FFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ ENDP ; CipherShed::`dynamic atexit destructor for 'FavoritesOnArrivalMountRequired''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__FFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ
text$yd	SEGMENT
??__FFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ PROC ; CipherShed::`dynamic atexit destructor for 'FavoritesMountedOnArrivalStillConnected'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  00005	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0001b	51		 push	 ecx
  0001c	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20, 0
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
??__FFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ ENDP ; CipherShed::`dynamic atexit destructor for 'FavoritesMountedOnArrivalStillConnected''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__FFavoriteVolumes@CipherShed@@YAXXZ
text$yd	SEGMENT
??__FFavoriteVolumes@CipherShed@@YAXXZ PROC		; CipherShed::`dynamic atexit destructor for 'FavoriteVolumes'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  00005	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
  00016	c3		 ret	 0
??__FFavoriteVolumes@CipherShed@@YAXXZ ENDP		; CipherShed::`dynamic atexit destructor for 'FavoriteVolumes''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__FSystemFavoriteVolumes@CipherShed@@YAXXZ
text$yd	SEGMENT
??__FSystemFavoriteVolumes@CipherShed@@YAXXZ PROC	; CipherShed::`dynamic atexit destructor for 'SystemFavoriteVolumes'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
  00005	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
  00016	c3		 ret	 0
??__FSystemFavoriteVolumes@CipherShed@@YAXXZ ENDP	; CipherShed::`dynamic atexit destructor for 'SystemFavoriteVolumes''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__FFavorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@YAXXZ
text$yd	SEGMENT
??__FFavorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@YAXXZ PROC ; `CipherShed::FavoriteVolumesDlgProc'::`2'::`dynamic atexit destructor for 'Favorites'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  00005	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Favorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@4V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
  00016	c3		 ret	 0
??__FFavorites@?1??FavoriteVolumesDlgProc@CipherShed@@YGHPAUHWND__@@IIJ@Z@YAXXZ ENDP ; `CipherShed::FavoriteVolumesDlgProc'::`2'::`dynamic atexit destructor for 'Favorites''
text$yd	ENDS
PUBLIC	?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
PUBLIC	?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::SystemFavoriteVolumes
PUBLIC	?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
PUBLIC	?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
_BSS	SEGMENT
?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A DB 01cH DUP (?) ; CipherShed::FavoritesMountedOnArrivalStillConnected
?SystemFavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A DB 018H DUP (?) ; CipherShed::SystemFavoriteVolumes
?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A DB 018H DUP (?) ; CipherShed::FavoriteVolumes
?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A DB 01cH DUP (?) ; CipherShed::FavoritesOnArrivalMountRequired
_BSS	ENDS
CRT$XCU	SEGMENT
_FavoriteVolumes$initializer$ DD FLAT:??__EFavoriteVolumes@CipherShed@@YAXXZ
_SystemFavoriteVolumes$initializer$ DD FLAT:??__ESystemFavoriteVolumes@CipherShed@@YAXXZ
_FavoritesOnArrivalMountRequired$initializer$ DD FLAT:??__EFavoritesOnArrivalMountRequired@CipherShed@@YAXXZ
_FavoritesMountedOnArrivalStillConnected$initializer$ DD FLAT:??__EFavoritesMountedOnArrivalStillConnected@CipherShed@@YAXXZ
CRT$XCU	ENDS
END
