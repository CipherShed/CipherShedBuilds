; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\cipherShed\src\Common\BootEncryption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?ElevatedComInstanceThreadId@Elevator@CipherShed@@1KA ; CipherShed::Elevator::ElevatedComInstanceThreadId
PUBLIC	?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT>::VT
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	_LIBID_ATLLib
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_IID_IInternalConnection
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
PUBLIC	?ReferenceCount@Elevator@CipherShed@@1HA	; CipherShed::Elevator::ReferenceCount
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
_BSS	SEGMENT
?ElevatedComInstanceThreadId@Elevator@CipherShed@@1KA DD 01H DUP (?) ; CipherShed::Elevator::ElevatedComInstanceThreadId
?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A DD 01H DUP (?) ; CipherShed::Elevator::ElevatedComInstance
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?ReferenceCount@Elevator@CipherShed@@1HA DD 01H DUP (?)	; CipherShed::Elevator::ReferenceCount
_BSS	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_01CPLAODJH@S?$AA@
_multiszStringVal DD FLAT:??_C@_01PLPBNMEI@M?$AA@
_szDwordVal DD	FLAT:??_C@_01CKDDGHAB@D?$AA@
_szBinaryVal DD	FLAT:??_C@_01HMGJMAIH@B?$AA@
_szValToken DD	FLAT:??_C@_03LAIAPFCB@Val?$AA@
_szForceRemove DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@
_szNoRemove DD	FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@
_szDelete DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB DW 0cH	; ATL::CVarTypeInfo<tagVARIANT>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0bad_alloc@std@@QAE@XZ			; std::bad_alloc::bad_alloc
EXTRN	??0exception@std@@QAE@ABQBDH@Z:PROC		; std::exception::exception
; Function compile flags: /Ogtpy
;	COMDAT ??0bad_alloc@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_alloc@std@@QAE@XZ PROC				; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 376  : 		{	// construct from message string with no memory allocation

  00000	56		 push	 esi
  00001	6a 01		 push	 1
  00003	68 00 00 00 00	 push	 OFFSET __bad_alloc_Message
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBDH@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 377  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0bad_alloc@std@@QAE@XZ ENDP				; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z	; std::char_traits<wchar_t>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 391  : 		return (_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 392  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z	; std::char_traits<wchar_t>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 397  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 398  : 		}

  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@_W@std@@SAGXZ		; std::char_traits<wchar_t>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 402  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 403  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 506  : 		return ((unsigned char)_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 507  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 512  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 513  : 		}

  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 517  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 518  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??0_Iterator_base_secure@std@@QAE@XZ		; std::_Iterator_base_secure::_Iterator_base_secure
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_secure@std@@QAE@XZ PROC		; std::_Iterator_base_secure::_Iterator_base_secure, COMDAT
; _this$ = ecx

; 567  : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 568  : 		}

  00008	c3		 ret	 0
??0_Iterator_base_secure@std@@QAE@XZ ENDP		; std::_Iterator_base_secure::_Iterator_base_secure
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ; std::_Iterator_base_secure::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_secure::_Same_container, COMDAT
; _this$ = ecx

; 577  : 		return _Mycont == _Other._Mycont;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 578  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_secure::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ; std::_Iterator_base_secure::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_secure@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ PROC	; std::_Iterator_base_secure::_Has_container, COMDAT
; _this$ = ecx

; 582  : 		return _Mycont != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 583  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ENDP	; std::_Iterator_base_secure::_Has_container
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T157293 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T157293[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$106981 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$106981[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$106981[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$106987 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$106987[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$106987[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$106992 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$106992[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$106992[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$157320 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$157320[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$157320[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$157328 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$157328[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$157328[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$157341 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$157341[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$157341[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 1716 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T157395 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 1807 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 1808 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T157395[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0002a	5e		 pop	 esi

; 1809 : 		}

  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
PUBLIC	?widen@?$ctype@_W@std@@QBE_WD@Z			; std::ctype<wchar_t>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 1965 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<wchar_t>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T157409 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2047 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 2048 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T157409[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2049 : 		_Cvt = _Lobj._Getcvt();

  0002a	e8 00 00 00 00	 call	 __Getcvt
  0002f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00032	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  00035	5e		 pop	 esi

; 2050 : 		}

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T157438 = -4						; size = 4
__Lock$157451 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$157451[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T157438[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$157451[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@	; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
PUBLIC	??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
PUBLIC	??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
PUBLIC	??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ; Define_the_symbol__ATL_MIXED::Thank_you::one
;	COMDAT ??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8 DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
_DATA	SEGMENT
??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 DD FLAT:??_7type_info@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUThank_you@Define_the_symbol__ATL_MIXED@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@
rdata$r	SEGMENT
??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
CONST	SEGMENT
??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD FLAT:??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
	DD	FLAT:?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ
_TEXT	SEGMENT
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ PROC	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
  00008	c3		 ret	 0
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ENDP	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atldef.h
_TEXT	ENDS
;	COMDAT ?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
_TEXT	SEGMENT
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ PROC ; Define_the_symbol__ATL_MIXED::Thank_you::one, COMDAT
; _this$ = ecx

; 80   : 	struct Thank_you { virtual void one(){} };

  00000	c3		 ret	 0
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ENDP ; Define_the_symbol__ATL_MIXED::Thank_you::one
_TEXT	ENDS
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 248  : 		free(p);

  00000	e9 00 00 00 00	 jmp	 _free
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC			; ATL::_AtlGetConversionACP, COMDAT

; 104  : #ifdef _CONVERSION_DONT_USE_THREAD_LOCALE
; 105  : 	return CP_ACP;
; 106  : #else
; 107  : 	return CP_THREAD_ACP;

  00000	b8 03 00 00 00	 mov	 eax, 3

; 108  : #endif
; 109  : }

  00005	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 42   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 43   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T157492 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 64   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 65   : #ifdef _AFX
; 66   : 	if( hr == E_OUTOFMEMORY )
; 67   : 	{
; 68   : 		AfxThrowMemoryException();
; 69   : 	}
; 70   : 	else
; 71   : 	{
; 72   : 		AfxThrowOleException( hr );
; 73   : 	}
; 74   : #else
; 75   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET __TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T157492[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T157492[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@AtlThrowIm:
  00017	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?AtlCrtErrorCheck@ATL@@YAHH@Z			; ATL::AtlCrtErrorCheck
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlchecked.h
;	COMDAT ?AtlCrtErrorCheck@ATL@@YAHH@Z
_TEXT	SEGMENT
_nError$ = 8						; size = 4
?AtlCrtErrorCheck@ATL@@YAHH@Z PROC			; ATL::AtlCrtErrorCheck, COMDAT

; 32   : 	switch(nError)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nError$[esp-4]
  00004	83 f8 50	 cmp	 eax, 80			; 00000050H
  00007	77 22		 ja	 SHORT $LN1@AtlCrtErro
  00009	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN9@AtlCrtErro[eax]
  00010	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@AtlCrtErro[ecx*4]
$LN4@AtlCrtErro:

; 33   : 	{
; 34   : 	case ENOMEM:
; 35   : 		AtlThrow(E_OUTOFMEMORY);

  00017	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  0001c	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN3@AtlCrtErro:

; 36   : 		break;
; 37   : 	case EINVAL:
; 38   : 	case ERANGE:
; 39   : 		AtlThrow(E_INVALIDARG);

  00021	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00026	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN1@AtlCrtErro:

; 40   : 		break;
; 41   : 	case 0:
; 42   : 	case STRUNCATE:
; 43   : 		break;
; 44   : 	default:
; 45   : 		AtlThrow(E_FAIL);

  0002b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00030	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN7@AtlCrtErro:

; 46   : 		break;
; 47   : 	}
; 48   : 	return nError;
; 49   : }

  00035	c3		 ret	 0
$LN10@AtlCrtErro:
  00036	8b ff		 npad	 2
$LN11@AtlCrtErro:
  00038	00 00 00 00	 DD	 $LN7@AtlCrtErro
  0003c	00 00 00 00	 DD	 $LN4@AtlCrtErro
  00040	00 00 00 00	 DD	 $LN3@AtlCrtErro
  00044	00 00 00 00	 DD	 $LN1@AtlCrtErro
$LN9@AtlCrtErro:
  00048	00		 DB	 0
  00049	03		 DB	 3
  0004a	03		 DB	 3
  0004b	03		 DB	 3
  0004c	03		 DB	 3
  0004d	03		 DB	 3
  0004e	03		 DB	 3
  0004f	03		 DB	 3
  00050	03		 DB	 3
  00051	03		 DB	 3
  00052	03		 DB	 3
  00053	03		 DB	 3
  00054	01		 DB	 1
  00055	03		 DB	 3
  00056	03		 DB	 3
  00057	03		 DB	 3
  00058	03		 DB	 3
  00059	03		 DB	 3
  0005a	03		 DB	 3
  0005b	03		 DB	 3
  0005c	03		 DB	 3
  0005d	03		 DB	 3
  0005e	02		 DB	 2
  0005f	03		 DB	 3
  00060	03		 DB	 3
  00061	03		 DB	 3
  00062	03		 DB	 3
  00063	03		 DB	 3
  00064	03		 DB	 3
  00065	03		 DB	 3
  00066	03		 DB	 3
  00067	03		 DB	 3
  00068	03		 DB	 3
  00069	03		 DB	 3
  0006a	02		 DB	 2
  0006b	03		 DB	 3
  0006c	03		 DB	 3
  0006d	03		 DB	 3
  0006e	03		 DB	 3
  0006f	03		 DB	 3
  00070	03		 DB	 3
  00071	03		 DB	 3
  00072	03		 DB	 3
  00073	03		 DB	 3
  00074	03		 DB	 3
  00075	03		 DB	 3
  00076	03		 DB	 3
  00077	03		 DB	 3
  00078	03		 DB	 3
  00079	03		 DB	 3
  0007a	03		 DB	 3
  0007b	03		 DB	 3
  0007c	03		 DB	 3
  0007d	03		 DB	 3
  0007e	03		 DB	 3
  0007f	03		 DB	 3
  00080	03		 DB	 3
  00081	03		 DB	 3
  00082	03		 DB	 3
  00083	03		 DB	 3
  00084	03		 DB	 3
  00085	03		 DB	 3
  00086	03		 DB	 3
  00087	03		 DB	 3
  00088	03		 DB	 3
  00089	03		 DB	 3
  0008a	03		 DB	 3
  0008b	03		 DB	 3
  0008c	03		 DB	 3
  0008d	03		 DB	 3
  0008e	03		 DB	 3
  0008f	03		 DB	 3
  00090	03		 DB	 3
  00091	03		 DB	 3
  00092	03		 DB	 3
  00093	03		 DB	 3
  00094	03		 DB	 3
  00095	03		 DB	 3
  00096	03		 DB	 3
  00097	03		 DB	 3
  00098	00		 DB	 0
?AtlCrtErrorCheck@ATL@@YAHH@Z ENDP			; ATL::AtlCrtErrorCheck
_TEXT	ENDS
PUBLIC	?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z		; ATL::Checked::memcpy_s
; Function compile flags: /Ogtpy
;	COMDAT ?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S1max$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z PROC		; ATL::Checked::memcpy_s, COMDAT

; 65   : 	ATLMFC_CRT_ERRORCHECK(::memcpy_s(_S1, _S1max, _S2, _N));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __S2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __S1max$[esp-4]
  0000c	50		 push	 eax
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR __S1$[esp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memcpy_s
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AtlCrtErrorCheck@ATL@@YAHH@Z ; ATL::AtlCrtErrorCheck
  0001f	83 c4 14	 add	 esp, 20			; 00000014H

; 66   : }

  00022	c3		 ret	 0
?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z ENDP		; ATL::Checked::memcpy_s
_TEXT	ENDS
PUBLIC	??0CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::CComBSTR
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::CComBSTR, COMDAT
; _this$ = ecx

; 591  : 	CComBSTR() throw()

  00000	8b c1		 mov	 eax, ecx

; 592  : 	{
; 593  : 		m_str = NULL;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 594  : 	}

  00008	c3		 ret	 0
??0CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::CComBSTR
_TEXT	ENDS
PUBLIC	?ByteLength@CComBSTR@ATL@@QBEIXZ		; ATL::CComBSTR::ByteLength
EXTRN	__imp__SysStringByteLen@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?ByteLength@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT
?ByteLength@CComBSTR@ATL@@QBEIXZ PROC			; ATL::CComBSTR::ByteLength, COMDAT
; _this$ = ecx

; 706  :         return ::SysStringByteLen(m_str);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringByteLen@4

; 707  : 	}

  00009	c3		 ret	 0
?ByteLength@CComBSTR@ATL@@QBEIXZ ENDP			; ATL::CComBSTR::ByteLength
_TEXT	ENDS
PUBLIC	??BCComBSTR@ATL@@QBEPA_WXZ			; ATL::CComBSTR::operator wchar_t *
; Function compile flags: /Ogtpy
;	COMDAT ??BCComBSTR@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
??BCComBSTR@ATL@@QBEPA_WXZ PROC				; ATL::CComBSTR::operator wchar_t *, COMDAT
; _this$ = ecx

; 711  : 		return m_str;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 712  : 	}

  00002	c3		 ret	 0
??BCComBSTR@ATL@@QBEPA_WXZ ENDP				; ATL::CComBSTR::operator wchar_t *
_TEXT	ENDS
PUBLIC	??ICComBSTR@ATL@@QAEPAPA_WXZ			; ATL::CComBSTR::operator&
; Function compile flags: /Ogtpy
;	COMDAT ??ICComBSTR@ATL@@QAEPAPA_WXZ
_TEXT	SEGMENT
??ICComBSTR@ATL@@QAEPAPA_WXZ PROC			; ATL::CComBSTR::operator&, COMDAT
; _this$ = ecx

; 722  : 	{

  00000	8b c1		 mov	 eax, ecx

; 723  : #ifndef ATL_NO_CCOMBSTR_ADDRESS_OF_ASSERT
; 724  : #pragma warning(push)
; 725  : #pragma warning(disable:4068)
; 726  : #pragma prefast(push)
; 727  : #pragma prefast(disable:325, "We are deliberately checking if this has already been allocated")
; 728  : 		ATLASSERT(!*this);
; 729  : #pragma prefast(pop)
; 730  : #pragma warning(pop)
; 731  : #endif
; 732  : 		return &m_str;
; 733  : 	}

  00002	c3		 ret	 0
??ICComBSTR@ATL@@QAEPAPA_WXZ ENDP			; ATL::CComBSTR::operator&
_TEXT	ENDS
PUBLIC	??7CComBSTR@ATL@@QBE_NXZ			; ATL::CComBSTR::operator!
; Function compile flags: /Ogtpy
;	COMDAT ??7CComBSTR@ATL@@QBE_NXZ
_TEXT	SEGMENT
??7CComBSTR@ATL@@QBE_NXZ PROC				; ATL::CComBSTR::operator!, COMDAT
; _this$ = ecx

; 823  : #pragma warning(push)
; 824  : #pragma warning(disable:4068)
; 825  : #pragma prefast(push)
; 826  : #pragma prefast(disable:325, "The semantics of this function are about allocation, not content")
; 827  : 		return (m_str == NULL);

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 94 c0	 sete	 al

; 828  : #pragma prefast(pop)
; 829  : #pragma warning(pop)
; 830  : 	}

  00007	c3		 ret	 0
??7CComBSTR@ATL@@QBE_NXZ ENDP				; ATL::CComBSTR::operator!
_TEXT	ENDS
PUBLIC	?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z		; ATL::CComBSTR::AppendBytes
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__SysAllocStringByteLen@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z
_TEXT	SEGMENT
_lpsz$ = 8						; size = 4
_nLen$ = 12						; size = 4
?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z PROC		; ATL::CComBSTR::AppendBytes, COMDAT
; _this$ = ecx

; 912  : 		if (lpsz == NULL || nLen == 0)

  00000	83 7c 24 04 00	 cmp	 DWORD PTR _lpsz$[esp-4], 0
  00005	53		 push	 ebx
  00006	57		 push	 edi
  00007	8b d9		 mov	 ebx, ecx
  00009	74 7c		 je	 SHORT $LN3@AppendByte
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR _nLen$[esp+4]
  0000f	85 ff		 test	 edi, edi
  00011	74 74		 je	 SHORT $LN3@AppendByte

; 914  : 		int n1 = ByteLength();

  00013	8b 03		 mov	 eax, DWORD PTR [ebx]
  00015	55		 push	 ebp
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringByteLen@4
  0001d	8b e8		 mov	 ebp, eax

; 915  : 		if (n1+nLen < n1)

  0001f	8d 04 2f	 lea	 eax, DWORD PTR [edi+ebp]
  00022	3b c5		 cmp	 eax, ebp
  00024	7d 0b		 jge	 SHORT $LN2@AppendByte
  00026	5d		 pop	 ebp
  00027	5f		 pop	 edi

; 916  : 			return E_OUTOFMEMORY;

  00028	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0002d	5b		 pop	 ebx

; 929  : 	}

  0002e	c2 08 00	 ret	 8
$LN2@AppendByte:
  00031	56		 push	 esi

; 917  : 		BSTR b;
; 918  : 		b = ::SysAllocStringByteLen(NULL, n1+nLen);

  00032	50		 push	 eax
  00033	6a 00		 push	 0
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocStringByteLen@8
  0003b	8b f0		 mov	 esi, eax

; 919  : 		if (b == NULL)

  0003d	85 f6		 test	 esi, esi
  0003f	75 0c		 jne	 SHORT $LN1@AppendByte
  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	5f		 pop	 edi

; 920  :         {
; 921  : 			return E_OUTOFMEMORY;

  00044	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00049	5b		 pop	 ebx

; 929  : 	}

  0004a	c2 08 00	 ret	 8
$LN1@AppendByte:

; 922  :         }
; 923  : 		Checked::memcpy_s(b, n1+nLen, m_str, n1);

  0004d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004f	55		 push	 ebp
  00050	51		 push	 ecx
  00051	8d 04 2f	 lea	 eax, DWORD PTR [edi+ebp]
  00054	50		 push	 eax
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z ; ATL::Checked::memcpy_s

; 924  : 		Checked::memcpy_s(((char*)b)+n1, nLen, lpsz, nLen);

  0005b	8b 54 24 24	 mov	 edx, DWORD PTR _lpsz$[esp+28]
  0005f	57		 push	 edi
  00060	52		 push	 edx
  00061	03 ee		 add	 ebp, esi
  00063	57		 push	 edi
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ?memcpy_s@Checked@ATL@@YAXPAXIPBXI@Z ; ATL::Checked::memcpy_s

; 925  : 		*((OLECHAR*)(((char*)b)+n1+nLen)) = NULL;

  0006a	33 c0		 xor	 eax, eax
  0006c	66 89 04 2f	 mov	 WORD PTR [edi+ebp], ax

; 926  : 		SysFreeString(m_str);

  00070	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00072	83 c4 20	 add	 esp, 32			; 00000020H
  00075	51		 push	 ecx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 927  : 		m_str = b;

  0007c	89 33		 mov	 DWORD PTR [ebx], esi
  0007e	5e		 pop	 esi
  0007f	5d		 pop	 ebp
  00080	5f		 pop	 edi

; 928  : 		return S_OK;

  00081	33 c0		 xor	 eax, eax
  00083	5b		 pop	 ebx

; 929  : 	}

  00084	c2 08 00	 ret	 8
$LN3@AppendByte:
  00087	5f		 pop	 edi

; 913  : 			return S_OK;

  00088	33 c0		 xor	 eax, eax
  0008a	5b		 pop	 ebx

; 929  : 	}

  0008b	c2 08 00	 ret	 8
?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z ENDP		; ATL::CComBSTR::AppendBytes
_TEXT	ENDS
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
; Function compile flags: /Ogtpy
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1455 : 		::SysFreeString(m_str);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 1456 : 	}

  00009	c3		 ret	 0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
PUBLIC	??_7Exception@CipherShed@@6B@			; CipherShed::Exception::`vftable'
PUBLIC	??0Exception@CipherShed@@QAE@XZ			; CipherShed::Exception::Exception
PUBLIC	??_R4Exception@CipherShed@@6B@			; CipherShed::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
PUBLIC	??_R3Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CipherShed@@8		; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CipherShed@@8 DD FLAT:??_R0?AUException@CipherShed@@@8 ; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CipherShed@@8
rdata$r	SEGMENT
??_R2Exception@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8 ; CipherShed::Exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Exception@CipherShed@@8
rdata$r	SEGMENT
??_R3Exception@CipherShed@@8 DD 00H			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Exception@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Exception@CipherShed@@6B@ DD 00H			; CipherShed::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Exception@CipherShed@@6B@
CONST	SEGMENT
??_7Exception@CipherShed@@6B@ DD FLAT:??_R4Exception@CipherShed@@6B@ ; CipherShed::Exception::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Exception@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Exception@CipherShed@@QAE@XZ PROC			; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c3		 ret	 0
??0Exception@CipherShed@@QAE@XZ ENDP			; CipherShed::Exception::Exception
_TEXT	ENDS
PUBLIC	??_7ParameterIncorrect@CipherShed@@6B@		; CipherShed::ParameterIncorrect::`vftable'
PUBLIC	??0ParameterIncorrect@CipherShed@@QAE@PBD@Z	; CipherShed::ParameterIncorrect::ParameterIncorrect
PUBLIC	??_R4ParameterIncorrect@CipherShed@@6B@		; CipherShed::ParameterIncorrect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUParameterIncorrect@CipherShed@@@8	; CipherShed::ParameterIncorrect `RTTI Type Descriptor'
PUBLIC	??_R3ParameterIncorrect@CipherShed@@8		; CipherShed::ParameterIncorrect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParameterIncorrect@CipherShed@@8		; CipherShed::ParameterIncorrect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8	; CipherShed::ParameterIncorrect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::ParameterIncorrect::Show
;	COMDAT ??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8 DD FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8 ; CipherShed::ParameterIncorrect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2ParameterIncorrect@CipherShed@@8
rdata$r	SEGMENT
??_R2ParameterIncorrect@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8 ; CipherShed::ParameterIncorrect::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3ParameterIncorrect@CipherShed@@8
rdata$r	SEGMENT
??_R3ParameterIncorrect@CipherShed@@8 DD 00H		; CipherShed::ParameterIncorrect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUParameterIncorrect@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUParameterIncorrect@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ParameterIncorrect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUParameterIncorrect@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ParameterIncorrect@CipherShed@@6B@
rdata$r	SEGMENT
??_R4ParameterIncorrect@CipherShed@@6B@ DD 00H		; CipherShed::ParameterIncorrect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8
	DD	FLAT:??_R3ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7ParameterIncorrect@CipherShed@@6B@
CONST	SEGMENT
??_7ParameterIncorrect@CipherShed@@6B@ DD FLAT:??_R4ParameterIncorrect@CipherShed@@6B@ ; CipherShed::ParameterIncorrect::`vftable'
	DD	FLAT:?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ParameterIncorrect@CipherShed@@QAE@PBD@Z
_TEXT	SEGMENT
_srcPos$ = 8						; size = 4
??0ParameterIncorrect@CipherShed@@QAE@PBD@Z PROC	; CipherShed::ParameterIncorrect::ParameterIncorrect, COMDAT
; _this$ = ecx

; 54   : 		ParameterIncorrect (const char *srcPos) : SrcPos (srcPos) { }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _srcPos$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	c2 04 00	 ret	 4
??0ParameterIncorrect@CipherShed@@QAE@PBD@Z ENDP	; CipherShed::ParameterIncorrect::ParameterIncorrect
_TEXT	ENDS
PUBLIC	??_7TimeOut@CipherShed@@6B@			; CipherShed::TimeOut::`vftable'
PUBLIC	??0TimeOut@CipherShed@@QAE@PBD@Z		; CipherShed::TimeOut::TimeOut
PUBLIC	??_R4TimeOut@CipherShed@@6B@			; CipherShed::TimeOut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUTimeOut@CipherShed@@@8			; CipherShed::TimeOut `RTTI Type Descriptor'
PUBLIC	??_R3TimeOut@CipherShed@@8			; CipherShed::TimeOut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TimeOut@CipherShed@@8			; CipherShed::TimeOut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TimeOut@CipherShed@@8		; CipherShed::TimeOut::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@TimeOut@CipherShed@@UBEXPAUHWND__@@@Z	; CipherShed::TimeOut::Show
;	COMDAT ??_R1A@?0A@EA@TimeOut@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TimeOut@CipherShed@@8 DD FLAT:??_R0?AUTimeOut@CipherShed@@@8 ; CipherShed::TimeOut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TimeOut@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2TimeOut@CipherShed@@8
rdata$r	SEGMENT
??_R2TimeOut@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@TimeOut@CipherShed@@8 ; CipherShed::TimeOut::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3TimeOut@CipherShed@@8
rdata$r	SEGMENT
??_R3TimeOut@CipherShed@@8 DD 00H			; CipherShed::TimeOut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TimeOut@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUTimeOut@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUTimeOut@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::TimeOut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUTimeOut@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TimeOut@CipherShed@@6B@
rdata$r	SEGMENT
??_R4TimeOut@CipherShed@@6B@ DD 00H			; CipherShed::TimeOut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUTimeOut@CipherShed@@@8
	DD	FLAT:??_R3TimeOut@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7TimeOut@CipherShed@@6B@
CONST	SEGMENT
??_7TimeOut@CipherShed@@6B@ DD FLAT:??_R4TimeOut@CipherShed@@6B@ ; CipherShed::TimeOut::`vftable'
	DD	FLAT:?Show@TimeOut@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0TimeOut@CipherShed@@QAE@PBD@Z
_TEXT	SEGMENT
_srcPos$ = 8						; size = 4
??0TimeOut@CipherShed@@QAE@PBD@Z PROC			; CipherShed::TimeOut::TimeOut, COMDAT
; _this$ = ecx

; 67   : 		TimeOut (const char *srcPos) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TimeOut@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0TimeOut@CipherShed@@QAE@PBD@Z ENDP			; CipherShed::TimeOut::TimeOut
_TEXT	ENDS
PUBLIC	??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
EXTRN	_ErrorDirect:PROC
;	COMDAT ??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@ DB 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'o', 00H, 'u', 00H, 't', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Show@TimeOut@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@TimeOut@CipherShed@@UBEXPAUHWND__@@@Z PROC	; CipherShed::TimeOut::Show, COMDAT
; _this$ = ecx

; 68   : 		void Show (HWND parent) const { ErrorDirect (L"Timeout"); }

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@
  00005	e8 00 00 00 00	 call	 _ErrorDirect
  0000a	59		 pop	 ecx
  0000b	c2 04 00	 ret	 4
?Show@TimeOut@CipherShed@@UBEXPAUHWND__@@@Z ENDP	; CipherShed::TimeOut::Show
_TEXT	ENDS
PUBLIC	??_7UserAbort@CipherShed@@6B@			; CipherShed::UserAbort::`vftable'
PUBLIC	??0UserAbort@CipherShed@@QAE@PBD@Z		; CipherShed::UserAbort::UserAbort
PUBLIC	??_R4UserAbort@CipherShed@@6B@			; CipherShed::UserAbort::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUUserAbort@CipherShed@@@8		; CipherShed::UserAbort `RTTI Type Descriptor'
PUBLIC	??_R3UserAbort@CipherShed@@8			; CipherShed::UserAbort::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UserAbort@CipherShed@@8			; CipherShed::UserAbort::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UserAbort@CipherShed@@8		; CipherShed::UserAbort::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@UserAbort@CipherShed@@UBEXPAUHWND__@@@Z	; CipherShed::UserAbort::Show
;	COMDAT ??_R1A@?0A@EA@UserAbort@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UserAbort@CipherShed@@8 DD FLAT:??_R0?AUUserAbort@CipherShed@@@8 ; CipherShed::UserAbort::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UserAbort@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2UserAbort@CipherShed@@8
rdata$r	SEGMENT
??_R2UserAbort@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@UserAbort@CipherShed@@8 ; CipherShed::UserAbort::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3UserAbort@CipherShed@@8
rdata$r	SEGMENT
??_R3UserAbort@CipherShed@@8 DD 00H			; CipherShed::UserAbort::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UserAbort@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUUserAbort@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUUserAbort@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::UserAbort `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUUserAbort@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UserAbort@CipherShed@@6B@
rdata$r	SEGMENT
??_R4UserAbort@CipherShed@@6B@ DD 00H			; CipherShed::UserAbort::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUUserAbort@CipherShed@@@8
	DD	FLAT:??_R3UserAbort@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7UserAbort@CipherShed@@6B@
CONST	SEGMENT
??_7UserAbort@CipherShed@@6B@ DD FLAT:??_R4UserAbort@CipherShed@@6B@ ; CipherShed::UserAbort::`vftable'
	DD	FLAT:?Show@UserAbort@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0UserAbort@CipherShed@@QAE@PBD@Z
_TEXT	SEGMENT
_srcPos$ = 8						; size = 4
??0UserAbort@CipherShed@@QAE@PBD@Z PROC			; CipherShed::UserAbort::UserAbort, COMDAT
; _this$ = ecx

; 73   : 		UserAbort (const char *srcPos) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7UserAbort@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0UserAbort@CipherShed@@QAE@PBD@Z ENDP			; CipherShed::UserAbort::UserAbort
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Show@UserAbort@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@UserAbort@CipherShed@@UBEXPAUHWND__@@@Z PROC	; CipherShed::UserAbort::Show, COMDAT
; _this$ = ecx

; 74   : 		void Show (HWND parent) const { }

  00000	c2 04 00	 ret	 4
?Show@UserAbort@CipherShed@@UBEXPAUHWND__@@@Z ENDP	; CipherShed::UserAbort::Show
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0Buffer@CipherShed@@QAE@I@Z			; CipherShed::Buffer::Buffer
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.h
xdata$x	ENDS
;	COMDAT ??0Buffer@CipherShed@@QAE@I@Z
_TEXT	SEGMENT
$T157549 = -12						; size = 12
_size$ = 8						; size = 4
??0Buffer@CipherShed@@QAE@I@Z PROC			; CipherShed::Buffer::Buffer, COMDAT
; _this$ = ecx

; 55   : 		{

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _size$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 56   : 			DataPtr = new byte[size];

  0000a	50		 push	 eax
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00013	83 c4 04	 add	 esp, 4
  00016	89 06		 mov	 DWORD PTR [esi], eax

; 57   : 			if (!DataPtr)

  00018	85 c0		 test	 eax, eax
  0001a	75 27		 jne	 SHORT $LN1@Buffer

; 58   : 				throw bad_alloc();

  0001c	6a 01		 push	 1
  0001e	68 00 00 00 00	 push	 OFFSET __bad_alloc_Message
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T157549[esp+24]
  00027	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBDH@Z ; std::exception::exception
  0002c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00031	8d 44 24 08	 lea	 eax, DWORD PTR $T157549[esp+20]
  00035	50		 push	 eax
  00036	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T157549[esp+24], OFFSET ??_7bad_alloc@std@@6B@
  0003e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Buffer:

; 59   : 		}

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	c2 04 00	 ret	 4
$LN6@Buffer:
??0Buffer@CipherShed@@QAE@I@Z ENDP			; CipherShed::Buffer::Buffer
_TEXT	ENDS
PUBLIC	??1Buffer@CipherShed@@QAE@XZ			; CipherShed::Buffer::~Buffer
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ??1Buffer@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Buffer@CipherShed@@QAE@XZ PROC			; CipherShed::Buffer::~Buffer, COMDAT
; _this$ = ecx

; 61   : 		~Buffer () { delete[] DataPtr; }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1Buffer@CipherShed@@QAE@XZ ENDP			; CipherShed::Buffer::~Buffer
_TEXT	ENDS
PUBLIC	?Ptr@Buffer@CipherShed@@QBEPAEXZ		; CipherShed::Buffer::Ptr
; Function compile flags: /Ogtpy
;	COMDAT ?Ptr@Buffer@CipherShed@@QBEPAEXZ
_TEXT	SEGMENT
?Ptr@Buffer@CipherShed@@QBEPAEXZ PROC			; CipherShed::Buffer::Ptr, COMDAT
; _this$ = ecx

; 62   : 		byte *Ptr () const { return DataPtr; }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?Ptr@Buffer@CipherShed@@QBEPAEXZ ENDP			; CipherShed::Buffer::Ptr
_TEXT	ENDS
PUBLIC	?Size@Buffer@CipherShed@@QBEIXZ			; CipherShed::Buffer::Size
; Function compile flags: /Ogtpy
;	COMDAT ?Size@Buffer@CipherShed@@QBEIXZ
_TEXT	SEGMENT
?Size@Buffer@CipherShed@@QBEIXZ PROC			; CipherShed::Buffer::Size, COMDAT
; _this$ = ecx

; 63   : 		size_t Size () const { return DataSize; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?Size@Buffer@CipherShed@@QBEIXZ ENDP			; CipherShed::Buffer::Size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?AddReference@Elevator@CipherShed@@SAXXZ	; CipherShed::Elevator::AddReference
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
;	COMDAT ?AddReference@Elevator@CipherShed@@SAXXZ
_TEXT	SEGMENT
?AddReference@Elevator@CipherShed@@SAXXZ PROC		; CipherShed::Elevator::AddReference, COMDAT

; 45   : 			++ReferenceCount;

  00000	ff 05 00 00 00
	00		 inc	 DWORD PTR ?ReferenceCount@Elevator@CipherShed@@1HA ; CipherShed::Elevator::ReferenceCount

; 46   : 		}

  00006	c3		 ret	 0
?AddReference@Elevator@CipherShed@@SAXXZ ENDP		; CipherShed::Elevator::AddReference
_TEXT	ENDS
PUBLIC	?Release@Elevator@CipherShed@@SAXXZ		; CipherShed::Elevator::Release
EXTRN	__imp__CoUninitialize@0:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Release@Elevator@CipherShed@@SAXXZ
_TEXT	SEGMENT
?Release@Elevator@CipherShed@@SAXXZ PROC		; CipherShed::Elevator::Release, COMDAT

; 164  : 			if (--ReferenceCount == 0 && ElevatedComInstance)

  00000	83 2d 00 00 00
	00 01		 sub	 DWORD PTR ?ReferenceCount@Elevator@CipherShed@@1HA, 1 ; CipherShed::Elevator::ReferenceCount
  00007	75 21		 jne	 SHORT $LN1@Release
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0000e	85 c0		 test	 eax, eax
  00010	74 18		 je	 SHORT $LN1@Release

; 165  : 			{
; 166  : 				ElevatedComInstance->Release();

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	50		 push	 eax
  00018	ff d2		 call	 edx

; 167  : 				ElevatedComInstance = nullptr;

  0001a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A, 0 ; CipherShed::Elevator::ElevatedComInstance

; 168  : 				CoUninitialize ();

  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__CoUninitialize@0
$LN1@Release:

; 169  : 			}
; 170  : 		}

  0002a	c3		 ret	 0
?Release@Elevator@CipherShed@@SAXXZ ENDP		; CipherShed::Elevator::Release
_TEXT	ENDS
PUBLIC	?Close@File@CipherShed@@QAEXXZ			; CipherShed::File::Close
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Close@File@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?Close@File@CipherShed@@QAEXXZ PROC			; CipherShed::File::Close, COMDAT
; _this$ = ecx

; 260  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 261  : 		if (FileOpen)

  00003	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00007	74 13		 je	 SHORT $LN2@Close

; 262  : 		{
; 263  : 			if (!Elevated)

  00009	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000c	75 0a		 jne	 SHORT $LN1@Close

; 264  : 				CloseHandle (Handle);

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN1@Close:

; 265  : 
; 266  : 			FileOpen = false;

  00018	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0
$LN2@Close:
  0001c	5e		 pop	 esi

; 267  : 		}
; 268  : 	}

  0001d	c3		 ret	 0
?Close@File@CipherShed@@QAEXXZ ENDP			; CipherShed::File::Close
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z
_TEXT	SEGMENT
??0Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z PROC ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::Finally551, COMDAT
; _this$ = eax
; _a$ = ecx

; 551  : 		finally_do_arg (SC_HANDLE, serviceManager, { CloseServiceHandle (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z ENDP ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::Finally551
_TEXT	ENDS
EXTRN	__imp__CloseServiceHandle@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::~Finally551, COMDAT
; _this$ = eax

; 551  : 		finally_do_arg (SC_HANDLE, serviceManager, { CloseServiceHandle (finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	51		 push	 ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4
  00009	c3		 ret	 0
??1Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::~Finally551
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z
_TEXT	SEGMENT
??0Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z PROC ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::Finally556, COMDAT
; _this$ = eax
; _a$ = ecx

; 556  : 		finally_do_arg (SC_HANDLE, service, { CloseServiceHandle (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@PAUSC_HANDLE__@@@Z ENDP ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::Finally556
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::~Finally556, COMDAT
; _this$ = eax

; 556  : 		finally_do_arg (SC_HANDLE, service, { CloseServiceHandle (finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	51		 push	 ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4
  00009	c3		 ret	 0
??1Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::~Finally556
_TEXT	ENDS
PUBLIC	?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties
; Function compile flags: /Ogtpy
;	COMDAT ?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties, COMDAT
; _this$ = ecx

; 614  : 		DriveConfigValid = false;

  00000	32 c0		 xor	 al, al
  00002	88 81 14 06 00
	00		 mov	 BYTE PTR [ecx+1556], al

; 615  : 		RealSystemDriveSizeValid = false;

  00008	88 81 15 06 00
	00		 mov	 BYTE PTR [ecx+1557], al

; 616  : 	}

  0000e	c3		 ret	 0
?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z ; CipherShed::BootEncryption::IsBootLoaderOnDrive
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_hDriver:DWORD
EXTRN	_ToUNICODE:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z
_TEXT	SEGMENT
_dwResult$149102 = -544					; size = 4
_openTestStruct$149101 = -540				; size = 536
__$ArrayPad$ = -4					; size = 4
_devicePath$ = 8					; size = 4
?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z PROC ; CipherShed::BootEncryption::IsBootLoaderOnDrive, COMDAT
; _this$ = ecx

; 731  : 	{

  00000	81 ec 20 02 00
	00		 sub	 esp, 544		; 00000220H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 1c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+544], eax

; 732  : 		try 
; 733  : 		{
; 734  : 			OPEN_TEST_STRUCT openTestStruct;
; 735  : 			memset (&openTestStruct, 0, sizeof (openTestStruct));

  00014	68 18 02 00 00	 push	 536			; 00000218H
  00019	8d 44 24 08	 lea	 eax, DWORD PTR _openTestStruct$149101[esp+548]
  0001d	6a 00		 push	 0
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _memset

; 736  : 			DWORD dwResult;
; 737  : 
; 738  : 			strcpy ((char *) &openTestStruct.wszFileName[0], devicePath);

  00025	8b 84 24 30 02
	00 00		 mov	 eax, DWORD PTR _devicePath$[esp+552]
  0002c	8d 54 24 10	 lea	 edx, DWORD PTR _openTestStruct$149101[esp+556]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	2b d0		 sub	 edx, eax
$LL4@IsBootLoad:
  00035	8a 08		 mov	 cl, BYTE PTR [eax]
  00037	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f6		 jne	 SHORT $LL4@IsBootLoad

; 739  : 			ToUNICODE ((char *) &openTestStruct.wszFileName[0]);

  0003f	8d 4c 24 04	 lea	 ecx, DWORD PTR _openTestStruct$149101[esp+544]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _ToUNICODE
  00049	83 c4 04	 add	 esp, 4

; 740  : 
; 741  : 			openTestStruct.bDetectTCBootLoader = TRUE;
; 742  : 
; 743  : 			return (DeviceIoControl (hDriver, TC_IOCTL_OPEN_TEST,
; 744  : 				   &openTestStruct, sizeof (OPEN_TEST_STRUCT),
; 745  : 				   &openTestStruct, sizeof (OPEN_TEST_STRUCT),
; 746  : 				   &dwResult, NULL) && openTestStruct.TCBootLoaderDetected);

  0004c	6a 00		 push	 0
  0004e	8d 54 24 04	 lea	 edx, DWORD PTR _dwResult$149102[esp+548]
  00052	52		 push	 edx
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00059	68 18 02 00 00	 push	 536			; 00000218H
  0005e	8d 44 24 10	 lea	 eax, DWORD PTR _openTestStruct$149101[esp+556]
  00062	50		 push	 eax
  00063	68 18 02 00 00	 push	 536			; 00000218H
  00068	8b c8		 mov	 ecx, eax
  0006a	51		 push	 ecx
  0006b	68 34 20 22 00	 push	 2236468			; 00222034H
  00070	52		 push	 edx
  00071	c7 84 24 2c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR _openTestStruct$149101[esp+1096], 1
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00082	85 c0		 test	 eax, eax
  00084	74 26		 je	 SHORT $LN5@IsBootLoad
  00086	83 bc 24 10 02
	00 00 00	 cmp	 DWORD PTR _openTestStruct$149101[esp+1068], 0
  0008e	74 1c		 je	 SHORT $LN5@IsBootLoad
  00090	b8 01 00 00 00	 mov	 eax, 1

; 747  : 		}
; 748  : 		catch (...)
; 749  : 		{
; 750  : 			return false;
; 751  : 		}
; 752  : 	}

  00095	8b 8c 24 1c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+544]
  0009c	33 cc		 xor	 ecx, esp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	81 c4 20 02 00
	00		 add	 esp, 544		; 00000220H
  000a9	c2 04 00	 ret	 4
$LN5@IsBootLoad:
  000ac	8b 8c 24 1c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+544]
  000b3	33 cc		 xor	 ecx, esp
  000b5	33 c0		 xor	 eax, eax
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	81 c4 20 02 00
	00		 add	 esp, 544		; 00000220H
  000c2	c2 04 00	 ret	 4
?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z ENDP ; CipherShed::BootEncryption::IsBootLoaderOnDrive
_TEXT	ENDS
PUBLIC	?GetChecksum@BootEncryption@CipherShed@@IAEIPAEI@Z ; CipherShed::BootEncryption::GetChecksum
; Function compile flags: /Ogtpy
;	COMDAT ?GetChecksum@BootEncryption@CipherShed@@IAEIPAEI@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?GetChecksum@BootEncryption@CipherShed@@IAEIPAEI@Z PROC	; CipherShed::BootEncryption::GetChecksum, COMDAT
; _this$ = ecx

; 949  : 		uint32 sum = 0;
; 950  : 
; 951  : 		while (size-- > 0)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _size$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	85 c9		 test	 ecx, ecx
  00008	76 14		 jbe	 SHORT $LN6@GetChecksu
  0000a	8b 54 24 04	 mov	 edx, DWORD PTR _data$[esp-4]
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL2@GetChecksu:

; 952  : 		{
; 953  : 			sum += *data++;

  00010	0f b6 32	 movzx	 esi, BYTE PTR [edx]
  00013	03 c6		 add	 eax, esi
  00015	49		 dec	 ecx
  00016	42		 inc	 edx

; 954  : 			sum = _rotl (sum, 1);

  00017	d1 c0		 rol	 eax, 1
  00019	85 c9		 test	 ecx, ecx
  0001b	77 f3		 ja	 SHORT $LL2@GetChecksu
  0001d	5e		 pop	 esi
$LN6@GetChecksu:

; 955  : 		}
; 956  : 
; 957  : 		return sum;
; 958  : 	}

  0001e	c2 08 00	 ret	 8
?GetChecksum@BootEncryption@CipherShed@@IAEIPAEI@Z ENDP	; CipherShed::BootEncryption::GetChecksum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@PAV23@@Z
_TEXT	SEGMENT
??0Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@PAV23@@Z PROC ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::Finally1278, COMDAT
; _this$ = eax
; _a$ = ecx

; 1278 : 		});

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@PAV23@@Z ENDP ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::Finally1278
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@PAPAUCRYPTO_INFO_t@@@Z
_TEXT	SEGMENT
??0Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@PAPAUCRYPTO_INFO_t@@@Z PROC ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::Finally1567, COMDAT
; _this$ = eax
; _a$ = ecx

; 1567 : 		finally_do_arg (PCRYPTO_INFO*, &cryptoInfo, { crypto_close (*finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@PAPAUCRYPTO_INFO_t@@@Z ENDP ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::Finally1567
_TEXT	ENDS
EXTRN	_crypto_close:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::~Finally1567, COMDAT
; _this$ = eax

; 1567 : 		finally_do_arg (PCRYPTO_INFO*, &cryptoInfo, { crypto_close (*finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	8b 11		 mov	 edx, DWORD PTR [ecx]
  00004	52		 push	 edx
  00005	e8 00 00 00 00	 call	 _crypto_close
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??1Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::~Finally1567
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAUHKEY__@@@Z
_TEXT	SEGMENT
??0Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAUHKEY__@@@Z PROC ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::Finally1708, COMDAT
; _this$ = eax
; _a$ = ecx

; 1708 : 		finally_do_arg (HKEY, regKey, { RegCloseKey (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAUHKEY__@@@Z ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::Finally1708
_TEXT	ENDS
EXTRN	__imp__RegCloseKey@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::~Finally1708, COMDAT
; _this$ = eax

; 1708 : 		finally_do_arg (HKEY, regKey, { RegCloseKey (finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	51		 push	 ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00009	c3		 ret	 0
??1Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::~Finally1708
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAX@Z
_TEXT	SEGMENT
??0Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAX@Z PROC ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::Finally1744, COMDAT
; _this$ = eax
; _a$ = ecx

; 1744 : 			finally_do_arg (HINF, hInf, { SetupCloseInfFile (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@PAX@Z ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::Finally1744
_TEXT	ENDS
EXTRN	__imp__SetupCloseInfFile@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::~Finally1744, COMDAT
; _this$ = eax

; 1744 : 			finally_do_arg (HINF, hInf, { SetupCloseInfFile (finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	51		 push	 ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetupCloseInfFile@4
  00009	c3		 ret	 0
??1Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::~Finally1744
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@0@Z
_TEXT	SEGMENT
??0Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@0@Z PROC ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::Finally2039, COMDAT
; _this$ = eax
; _a$ = ecx

; 2039 : 			finally_do_arg (bool, displayWaitDialog, { if (finally_arg) CloseStaticModelessWaitDlg(); });

  00000	88 08		 mov	 BYTE PTR [eax], cl
  00002	c3		 ret	 0
??0Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@0@Z ENDP ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::Finally2039
_TEXT	ENDS
EXTRN	_CloseStaticModelessWaitDlg:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::~Finally2039, COMDAT
; _this$ = eax

; 2039 : 			finally_do_arg (bool, displayWaitDialog, { if (finally_arg) CloseStaticModelessWaitDlg(); });

  00000	80 38 00	 cmp	 BYTE PTR [eax], 0
  00003	74 05		 je	 SHORT $LN1@Finally203
  00005	e9 00 00 00 00	 jmp	 _CloseStaticModelessWaitDlg
$LN1@Finally203:
  0000a	c3		 ret	 0
??1Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::~Finally2039
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUCRYPTO_INFO_t@@@Z
_TEXT	SEGMENT
??0Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUCRYPTO_INFO_t@@@Z PROC ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::Finally2094, COMDAT
; _this$ = eax
; _a$ = ecx

; 2094 : 		finally_do_arg (PCRYPTO_INFO, cryptoInfo, { if (finally_arg) crypto_close (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUCRYPTO_INFO_t@@@Z ENDP ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::Finally2094
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094, COMDAT
; _this$ = eax

; 2094 : 		finally_do_arg (PCRYPTO_INFO, cryptoInfo, { if (finally_arg) crypto_close (finally_arg); });

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	85 c0		 test	 eax, eax
  00004	74 07		 je	 SHORT $LN1@Finally209
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _crypto_close
  0000c	59		 pop	 ecx
$LN1@Finally209:
  0000d	c3		 ret	 0
??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094
_TEXT	ENDS
EXTRN	_RandStop:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::ChangePassword'::`28'::Finally2110::~Finally2110, COMDAT

; 2110 : 		finally_do ({ RandStop (FALSE); });

  00000	6a 00		 push	 0
  00002	e8 00 00 00 00	 call	 _RandStop
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::ChangePassword'::`28'::Finally2110::~Finally2110
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUReopenBootVolumeHeaderRequest@@@Z
_TEXT	SEGMENT
??0Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUReopenBootVolumeHeaderRequest@@@Z PROC ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::Finally2188, COMDAT
; _this$ = eax
; _a$ = ecx

; 2188 : 			finally_do_arg (ReopenBootVolumeHeaderRequest*, &reopenRequest, { burn (finally_arg, sizeof (*finally_arg)); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@PAUReopenBootVolumeHeaderRequest@@@Z ENDP ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::Finally2188
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::~Finally2188, COMDAT
; _this$ = eax

; 2188 : 			finally_do_arg (ReopenBootVolumeHeaderRequest*, &reopenRequest, { burn (finally_arg, sizeof (*finally_arg)); });

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	8b c8		 mov	 ecx, eax
  0000c	8d 64 24 00	 npad	 4
$LL14@Finally218:
  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00013	41		 inc	 ecx
  00014	83 ee 01	 sub	 esi, 1
  00017	75 f7		 jne	 SHORT $LL14@Finally218
  00019	5e		 pop	 esi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL2@Finally218:
  00020	4a		 dec	 edx
  00021	c6 00 00	 mov	 BYTE PTR [eax], 0
  00024	40		 inc	 eax
  00025	85 d2		 test	 edx, edx
  00027	75 f7		 jne	 SHORT $LL2@Finally218
  00029	c3		 ret	 0
??1Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::~Finally2188
_TEXT	ENDS
PUBLIC	??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@		; `string'
PUBLIC	?ReadDriverConfigurationFlags@BootEncryption@CipherShed@@QAEIXZ ; CipherShed::BootEncryption::ReadDriverConfigurationFlags
EXTRN	_ReadLocalMachineRegistryDword:PROC
;	COMDAT ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\truecrypt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
CONST	SEGMENT
??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@ DB 'TrueCryptConfig', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ReadDriverConfigurationFlags@BootEncryption@CipherShed@@QAEIXZ
_TEXT	SEGMENT
_configMap$ = -4					; size = 4
?ReadDriverConfigurationFlags@BootEncryption@CipherShed@@QAEIXZ PROC ; CipherShed::BootEncryption::ReadDriverConfigurationFlags, COMDAT
; _this$ = ecx

; 2404 : 	{

  00000	51		 push	 ecx

; 2405 : 		DWORD configMap;
; 2406 : 
; 2407 : 		if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", TC_DRIVER_CONFIG_REG_VALUE_NAME, &configMap))

  00001	8d 04 24	 lea	 eax, DWORD PTR _configMap$[esp+4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  0000f	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	75 02		 jne	 SHORT $LN4@ReadDriver

; 2411 : 	}

  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
$LN4@ReadDriver:

; 2408 : 			configMap = 0;
; 2409 : 
; 2410 : 		return configMap;

  0001d	8b 04 24	 mov	 eax, DWORD PTR _configMap$[esp+4]

; 2411 : 	}

  00020	59		 pop	 ecx
  00021	c3		 ret	 0
?ReadDriverConfigurationFlags@BootEncryption@CipherShed@@QAEIXZ ENDP ; CipherShed::BootEncryption::ReadDriverConfigurationFlags
_TEXT	ENDS
PUBLIC	?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
EXTRN	_RestartComputer:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::RestartComputer, COMDAT
; _this$ = ecx

; 2456 : 		return (::RestartComputer() != FALSE);

  00000	e8 00 00 00 00	 call	 _RestartComputer
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 2457 : 	}

  0000b	c3		 ret	 0
?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::RestartComputer
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 640  : 	CAtlSafeAllocBufferManager() : m_pHead(NULL) {};

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 654  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 655  : 		// Walk the list and free the buffers
; 656  : 		while (m_pHead != NULL)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 14		 je	 SHORT $LN1@CAtlSafeAl
$LL2@CAtlSafeAl:

; 657  : 		{
; 658  : 			CAtlSafeAllocBufferNode* p = m_pHead;

  00008	8b 06		 mov	 eax, DWORD PTR [esi]

; 659  : 			m_pHead = m_pHead->m_pNext;

  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]

; 660  : 			Allocator::Free(p);

  0000c	50		 push	 eax
  0000d	89 0e		 mov	 DWORD PTR [esi], ecx
  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4
  00017	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0001a	75 ec		 jne	 SHORT $LL2@CAtlSafeAl
$LN1@CAtlSafeAl:
  0001c	5e		 pop	 esi

; 661  : 		}
; 662  : 	}

  0001d	c3		 ret	 0
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::size, COMDAT
; _this$ = ecx

; 620  : 		return (_Mysize);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 621  : 		}

  00003	c3		 ret	 0
?size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::size
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$157809 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@6
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$157809[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@6
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@6
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@6:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$157809[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@6
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@6:
  00049	5e		 pop	 esi
$LN7@scalar@6:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@6
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@6:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	8a 41 30	 mov	 al, BYTE PTR [ecx+48]

; 107  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@7
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@7:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 206  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 224  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  00019	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
; Function compile flags: /Ogtpy
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 206  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 224  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	d1 fa		 sar	 edx, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail@2
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail@2:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
PUBLIC	?_Myval@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAUPartition@CipherShed@@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAUPartition@CipherShed@@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAUPartition@CipherShed@@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAUPartition@CipherShed@@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@UPartition@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UPartition@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UPartition@CipherShed@@@std@@QAE@XZ PROC	; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UPartition@CipherShed@@@std@@QAE@XZ ENDP	; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>
_TEXT	ENDS
PUBLIC	??0?$allocator@UPartition@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UPartition@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UPartition@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UPartition@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::Partition>::allocator<CipherShed::Partition>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy@2

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy@2:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1079 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1080 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T158179 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T158179[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T158179[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T158179[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T158179[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T158205 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T158205[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T158205[esp+28], 1
$LN2@basic_ostr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr@2

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr@2:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T158205[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T158205[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
; Function compile flags: /Ogtpy
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator==
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@2
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@2
$LN4@operator@2:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@2:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@3@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@3@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@3@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
; Function compile flags: /Ogtpy
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate@2

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate@2:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate@2

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate@2:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate@2

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate@2:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate@2

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate@2:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas@3

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas@3:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@4

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@4:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UPartition@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UPartition@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UPartition@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UPartition@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 199  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 200  : 
; 201  :  #if _HAS_ITERATOR_DEBUGGING
; 202  : 		_Compat(_Right);
; 203  :  #else
; 204  : 		if (this->_Mycont != _IGNORE_MYCONT)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  0000d	74 0d		 je	 SHORT $LN1@operator@3

; 205  : 		{
; 206  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  0000f	85 c0		 test	 eax, eax
  00011	74 04		 je	 SHORT $LN4@operator@3
  00013	3b 07		 cmp	 eax, DWORD PTR [edi]
  00015	74 05		 je	 SHORT $LN1@operator@3
$LN4@operator@3:
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@3:

; 207  : 		}
; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Myptr - _Right._Myptr);

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 211  : 		}

  00024	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UPartition@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::Partition>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@UPartition@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UPartition@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::Partition>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UPartition@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::Partition>::max_size
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T158400 = -12						; size = 12
$T158404 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T158404[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158400[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T158404[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158400[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T158400[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T158408 = -12						; size = 12
$T158412 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T158412[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158408[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T158412[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158408[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T158408[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$?0UPartition@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *><CipherShed::Partition>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UPartition@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UPartition@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *><CipherShed::Partition>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UPartition@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *><CipherShed::Partition>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T158418 = -12						; size = 12
$T158422 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T158422[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158418[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T158422[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158418[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T158418[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005b	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *,std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *,std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *,std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T158436 = -12						; size = 12
$T158440 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T158440[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158436[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T158440[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158436[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T158436[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$?0UPartition@CipherShed@@@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node><CipherShed::Partition>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UPartition@CipherShed@@@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UPartition@CipherShed@@@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node><CipherShed::Partition>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UPartition@CipherShed@@@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node><CipherShed::Partition>
_TEXT	ENDS
PUBLIC	??$?0UPartition@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::Partition>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UPartition@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UPartition@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::Partition>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UPartition@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::Partition>
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	66 8b 41 30	 mov	 ax, WORD PTR [ecx+48]

; 107  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Iter_cat<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Iter_cat<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@4
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@4:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@4
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@4
$LN19@operator@4:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@4:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@4
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@4:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z	; std::ctype<char>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z	; std::ctype<char>::_Do_narrow_s
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T158544 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 1784 : 		{	// construct from current locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1785 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158544[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00034	83 c4 04	 add	 esp, 4

; 1786 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 1813 : 		if (0 < _Ctype._Delfl)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	85 c0		 test	 eax, eax
  00005	7e 0d		 jle	 SHORT $LN6@Tidy@3

; 1814 : 			free((void *)_Ctype._Table);

  00007	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4

; 1817 : 		}

  00013	c3		 ret	 0
$LN6@Tidy@3:

; 1815 : 		else if (_Ctype._Delfl < 0)

  00014	7d 0a		 jge	 SHORT $LN1@Tidy@3

; 1816 : 			delete[] (void *)_Ctype._Table;

  00016	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001f	59		 pop	 ecx
$LN1@Tidy@3:

; 1817 : 		}

  00020	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
EXTRN	__Tolower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1821 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Tolower
  0000f	83 c4 08	 add	 esp, 8

; 1822 : 		}

  00012	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1826 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 1827 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1828 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 1829 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Tolower
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_tolower
  00026	5f		 pop	 edi
$LN8@do_tolower:

; 1830 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1831 : 		}

  0002b	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
EXTRN	__Toupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1835 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Toupper
  0000f	83 c4 08	 add	 esp, 8

; 1836 : 		}

  00012	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1840 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 1841 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1842 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 1843 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Toupper
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_toupper
  00026	5f		 pop	 edi
$LN8@do_toupper:

; 1844 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1845 : 		}

  0002b	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1849 : 		return (_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 1850 : 		}

  00004	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1856 : 		// assume there is enough space in _Dest
; 1857 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1858 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z PROC	; std::ctype<char>::_Do_widen_s, COMDAT
; _this$ = ecx

; 1862 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 1863 : 		_DEBUG_RANGE(_First, _Last);
; 1864 : 		_DEBUG_POINTER(_Dest);
; 1865 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 18	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_widen_s
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_widen_s:

; 1866 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1867 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1868 : 		}

  00033	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z ENDP	; std::ctype<char>::_Do_widen_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1872 : 		return (_Ch);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]

; 1873 : 		}

  00004	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1880 : 		// assume there is enough space in _Dest
; 1881 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001f	52		 push	 edx
  00020	ff d0		 call	 eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 1882 : 		}

  00024	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z PROC	; std::ctype<char>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 1887 : 		{	// narrow elements in [_First, _Last) to chars

  00000	53		 push	 ebx

; 1888 : 		_DEBUG_RANGE(_First, _Last);
; 1889 : 		_DEBUG_POINTER(_Dest);
; 1890 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_narrow_
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_narrow_:

; 1891 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1892 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1893 : 		}

  00033	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z ENDP	; std::ctype<char>::_Do_narrow_s
_TEXT	ENDS
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 1801 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1802 : 		_Tidy();

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 14		 jle	 SHORT $LN14@ctype
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4

; 1803 : 		}

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00022	5e		 pop	 esi
  00023	c3		 ret	 0
$LN14@ctype:

; 1802 : 		_Tidy();

  00024	7d 0c		 jge	 SHORT $LN13@ctype
  00026	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	83 c4 04	 add	 esp, 4
$LN13@ctype:

; 1803 : 		}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 0b		 jle	 SHORT $LN16@scalar@9
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	eb 0b		 jmp	 SHORT $LN17@scalar@9
$LN16@scalar@9:
  0001b	7d 0c		 jge	 SHORT $LN6@scalar@9
  0001d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@scalar@9:
  00026	83 c4 04	 add	 esp, 4
$LN6@scalar@9:
  00029	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00034	74 09		 je	 SHORT $LN15@scalar@9
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN15@scalar@9:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z	; std::ctype<wchar_t>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ; std::ctype<wchar_t>::_Do_narrow_s
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T158664 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2025 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2026 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T158664[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	83 c4 04	 add	 esp, 4
  00034	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00037	e8 00 00 00 00	 call	 __Getcvt
  0003c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0003f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 2027 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
PUBLIC	?is@?$ctype@_W@std@@QBE_NF_W@Z			; std::ctype<wchar_t>::is
; Function compile flags: /Ogtpy
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 1922 : 		return (do_is(_Maskval, _Ch));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2040 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2041 : 		if (_Ctype._Delfl)

  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN9@ctype@2

; 2042 : 			free((void *)_Ctype._Table);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN9@ctype@2:

; 2043 : 		}

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
EXTRN	__Getwctype:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2054 : 		return ((::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Getwctype
  0000e	83 c4 08	 add	 esp, 8
  00011	66 85 44 24 04	 test	 WORD PTR __Maskval$[esp-4], ax
  00016	b8 00 00 00 00	 mov	 eax, 0
  0001b	0f 95 c0	 setne	 al

; 2055 : 		}

  0001e	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
EXTRN	__Getwctypes:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2060 : 		_DEBUG_RANGE(_First, _Last);
; 2061 : 		_DEBUG_POINTER(_Dest);
; 2062 : 		return (::_Getwctypes(_First, _Last, _Dest, &_Ctype));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	83 c1 08	 add	 ecx, 8
  0000b	51		 push	 ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Last$[esp]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __Getwctypes
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 2063 : 		}

  0001b	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2067 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp

; 2068 : 		_DEBUG_RANGE(_First, _Last);
; 2069 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_is
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_is:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	75 07		 jne	 SHORT $LN11@do_scan_is
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_is
$LN11@do_scan_is:
  0002f	5b		 pop	 ebx
$LN10@do_scan_is:
  00030	5f		 pop	 edi

; 2070 : 			;
; 2071 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2072 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2076 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp

; 2077 : 		_DEBUG_RANGE(_First, _Last);
; 2078 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_no
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_no:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	74 07		 je	 SHORT $LN11@do_scan_no
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_no
$LN11@do_scan_no:
  0002f	5b		 pop	 ebx
$LN10@do_scan_no:
  00030	5f		 pop	 edi

; 2079 : 			;
; 2080 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2081 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
EXTRN	__Towlower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2085 : 		return (_Towlower(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towlower
  0000e	83 c4 08	 add	 esp, 8

; 2086 : 		}

  00011	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2090 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2091 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2092 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_tolower@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower@2:

; 2093 : 			*_First = _Towlower(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towlower
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_tolower@2
  00029	5f		 pop	 edi
$LN8@do_tolower@2:

; 2094 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2095 : 		}

  0002e	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
EXTRN	__Towupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2099 : 		return (_Towupper(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towupper
  0000e	83 c4 08	 add	 esp, 8

; 2100 : 		}

  00011	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2104 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2105 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2106 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_toupper@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper@2:

; 2107 : 			*_First = _Towupper(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towupper
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_toupper@2
  00029	5f		 pop	 edi
$LN8@do_toupper@2:

; 2108 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2109 : 		}

  0002e	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
PUBLIC	?_Dowiden@?$ctype@_W@std@@IBE_WD@Z		; std::ctype<wchar_t>::_Dowiden
EXTRN	__Mbrtowc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst$ = -4						; size = 4
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2112 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2113 : 		_Mbstinit(_Mbst);
; 2114 : 		wchar_t _Wc;
; 2115 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
; 2116 : 			? (wchar_t)WEOF : _Wc);

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	51		 push	 ecx
  00007	8d 44 24 08	 lea	 eax, DWORD PTR __Mbst$[esp+12]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Byte$[esp+16]
  00012	51		 push	 ecx
  00013	8d 54 24 10	 lea	 edx, DWORD PTR __Wc$[esp+24]
  00017	52		 push	 edx
  00018	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+28], 0
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002f	7c 04		 jl	 SHORT $LN4@Dowiden
  00031	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$[esp+8]
$LN4@Dowiden:

; 2117 : 		}

  00035	83 c4 08	 add	 esp, 8
  00038	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Wc$158737 = -8					; size = 2
__Mbst$158736 = -4					; size = 4
$T158738 = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2120 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2121 : 		return (_Dowiden(_Byte));

  00003	8a 44 24 0c	 mov	 al, BYTE PTR __Byte$[esp+4]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	51		 push	 ecx
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst$158736[esp+12]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	8d 54 24 18	 lea	 edx, DWORD PTR $T158738[esp+16]
  00016	88 44 24 18	 mov	 BYTE PTR $T158738[esp+16], al
  0001a	52		 push	 edx
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$158737[esp+24]
  0001f	50		 push	 eax
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$158736[esp+28], 0
  00028	e8 00 00 00 00	 call	 __Mbrtowc
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	85 c0		 test	 eax, eax
  00032	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00037	7c 04		 jl	 SHORT $LN6@do_widen
  00039	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$158737[esp+8]
$LN6@do_widen:

; 2122 : 		}

  0003d	83 c4 08	 add	 esp, 8
  00040	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2128 : 		// assume there is enough space in _Dest
; 2129 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2130 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
_TEXT	SEGMENT
__Wc$158751 = 8						; size = 2
__First$ = 8						; size = 4
$T158752 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Mbst$158750 = 20					; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z PROC	; std::ctype<wchar_t>::_Do_widen_s, COMDAT
; _this$ = ecx

; 2134 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 2135 : 		_DEBUG_RANGE(_First, _Last);
; 2136 : 		_DEBUG_POINTER(_Dest);
; 2137 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	8b c3		 mov	 eax, ebx
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	39 44 24 1c	 cmp	 DWORD PTR __Dest_size$[esp+8], eax
  00015	73 05		 jae	 SHORT $LN6@Do_widen_s@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_widen_s@2:

; 2138 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 4a		 je	 SHORT $LN16@Do_widen_s@2
  00020	55		 push	 ebp
  00021	8d 6f 18	 lea	 ebp, DWORD PTR [edi+24]
  00024	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+12]
$LL3@Do_widen_s@2:

; 2139 : 			*_Dest = _Dowiden(*_First);

  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	55		 push	 ebp
  0002b	8d 54 24 24	 lea	 edx, DWORD PTR __Mbst$158750[esp+16]
  0002f	52		 push	 edx
  00030	6a 01		 push	 1
  00032	8d 44 24 24	 lea	 eax, DWORD PTR $T158752[esp+24]
  00036	88 4c 24 24	 mov	 BYTE PTR $T158752[esp+24], cl
  0003a	50		 push	 eax
  0003b	8d 4c 24 24	 lea	 ecx, DWORD PTR __Wc$158751[esp+28]
  0003f	51		 push	 ecx
  00040	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR __Mbst$158750[esp+32], 0
  00048	e8 00 00 00 00	 call	 __Mbrtowc
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	7c 05		 jl	 SHORT $LN13@Do_widen_s@2
  00059	0f b7 44 24 14	 movzx	 eax, WORD PTR __Wc$158751[esp+12]
$LN13@Do_widen_s@2:
  0005e	66 89 07	 mov	 WORD PTR [edi], ax
  00061	46		 inc	 esi
  00062	83 c7 02	 add	 edi, 2
  00065	3b f3		 cmp	 esi, ebx
  00067	75 bf		 jne	 SHORT $LL3@Do_widen_s@2
  00069	5d		 pop	 ebp
$LN16@Do_widen_s@2:
  0006a	5f		 pop	 edi

; 2140 : 		return (_First);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 2141 : 		}

  0006f	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z ENDP	; std::ctype<wchar_t>::_Do_widen_s
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?_Donarrow@?$ctype@_W@std@@IBED_WD@Z		; std::ctype<wchar_t>::_Donarrow
EXTRN	__Wcrtomb:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -16						; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2144 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2145 : 		char _Buf[MB_LEN_MAX];
; 2146 : 		_Mbstinit(_Mbst);
; 2147 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
; 2148 : 			? _Dflt : _Buf[0]);

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN4@Donarrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$[esp+16]
$LN4@Donarrow:

; 2149 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$158774 = -16					; size = 4
__Buf$158773 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2152 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2153 : 		return (_Donarrow(_Ch, _Dflt));

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$158774[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$158773[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$158774[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN6@do_narrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$158773[esp+16]
$LN6@do_narrow:

; 2154 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2161 : 		// assume there is enough space in _Dest
; 2162 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	d1 ff		 sar	 edi, 1
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00021	52		 push	 edx
  00022	ff d0		 call	 eax
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 2163 : 		}

  00026	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
_TEXT	SEGMENT
__Mbst$158790 = -16					; size = 4
__Buf$158789 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z PROC	; std::ctype<wchar_t>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 2169 : 		{	// narrow elements in [_First, _Last) to chars

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 2170 : 		_DEBUG_RANGE(_First, _Last);
; 2171 : 		_DEBUG_POINTER(_Dest);
; 2172 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00010	8b 6c 24 20	 mov	 ebp, DWORD PTR __Last$[esp+20]
  00014	56		 push	 esi
  00015	8b 74 24 20	 mov	 esi, DWORD PTR __First$[esp+24]
  00019	8b c5		 mov	 eax, ebp
  0001b	2b c6		 sub	 eax, esi
  0001d	d1 f8		 sar	 eax, 1
  0001f	57		 push	 edi
  00020	8b 7c 24 30	 mov	 edi, DWORD PTR __Dest$[esp+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	39 44 24 34	 cmp	 DWORD PTR __Dest_size$[esp+28], eax
  0002a	73 05		 jae	 SHORT $LN6@Do_narrow_@2
  0002c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_narrow_@2:

; 2173 : 		for (; _First != _Last; ++_First, ++_Dest)

  00031	3b f5		 cmp	 esi, ebp
  00033	74 39		 je	 SHORT $LN16@Do_narrow_@2
  00035	83 c3 18	 add	 ebx, 24			; 00000018H
$LL3@Do_narrow_@2:

; 2174 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00038	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0003b	53		 push	 ebx
  0003c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst$158790[esp+36]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8d 54 24 20	 lea	 edx, DWORD PTR __Buf$158789[esp+44]
  00046	52		 push	 edx
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __Mbst$158790[esp+48], 0
  0004f	e8 00 00 00 00	 call	 __Wcrtomb
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	8a 44 24 2c	 mov	 al, BYTE PTR __Dflt$[esp+28]
  0005e	75 04		 jne	 SHORT $LN13@Do_narrow_@2
  00060	8a 44 24 14	 mov	 al, BYTE PTR __Buf$158789[esp+32]
$LN13@Do_narrow_@2:
  00064	88 07		 mov	 BYTE PTR [edi], al
  00066	83 c6 02	 add	 esi, 2
  00069	47		 inc	 edi
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 ca		 jne	 SHORT $LL3@Do_narrow_@2
$LN16@Do_narrow_@2:

; 2175 : 		return (_First);
; 2176 : 		}

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00072	5f		 pop	 edi
  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ENDP	; std::ctype<wchar_t>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN4@scalar@10
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN4@scalar@10:
  0001b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00026	74 09		 je	 SHORT $LN11@scalar@10
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN11@scalar@10:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?A2WBSTR@@YAPA_WPBDH@Z				; A2WBSTR
EXTRN	__imp__SysAllocStringLen@8:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?A2WBSTR@@YAPA_WPBDH@Z
_TEXT	SEGMENT
__AtlSafeAllocaManager$ = 8				; size = 4
_lp$ = 8						; size = 4
_nLen$ = 12						; size = 4
?A2WBSTR@@YAPA_WPBDH@Z PROC				; A2WBSTR, COMDAT

; 871  : {

  00000	55		 push	 ebp

; 872  : 	if (lp == NULL || nLen == 0)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _lp$[esp]
  00005	57		 push	 edi
  00006	85 ed		 test	 ebp, ebp
  00008	74 74		 je	 SHORT $LN4@A2WBSTR
  0000a	8b 7c 24 10	 mov	 edi, DWORD PTR _nLen$[esp+4]
  0000e	85 ff		 test	 edi, edi
  00010	74 6c		 je	 SHORT $LN4@A2WBSTR
  00012	56		 push	 esi

; 874  : 	USES_CONVERSION_EX;
; 875  : 	BSTR str = NULL;
; 876  : #pragma warning(push)
; 877  : #pragma warning(disable: 6385)
; 878  : 	int nConvertedLen = MultiByteToWideChar(_acp_ex, 0, lp,
; 879  : 		nLen, NULL, NULL);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	57		 push	 edi
  00018	55		 push	 ebp
  00019	6a 00		 push	 0
  0001b	6a 03		 push	 3
  0001d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR __AtlSafeAllocaManager$[esp+32], 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0002b	8b f0		 mov	 esi, eax

; 880  : #pragma warning(pop)
; 881  : 	int nAllocLen = nConvertedLen;
; 882  : 	if (nLen == -1)

  0002d	83 ff ff	 cmp	 edi, -1
  00030	75 03		 jne	 SHORT $LN3@A2WBSTR

; 883  : 		nAllocLen -= 1;  // Don't allocate terminating '\0'

  00032	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
$LN3@A2WBSTR:
  00035	53		 push	 ebx

; 884  : 	str = ::SysAllocStringLen(NULL, nAllocLen);

  00036	50		 push	 eax
  00037	6a 00		 push	 0
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocStringLen@8
  0003f	8b d8		 mov	 ebx, eax

; 885  : 
; 886  : 	if (str != NULL)

  00041	85 db		 test	 ebx, ebx
  00043	74 29		 je	 SHORT $LN1@A2WBSTR

; 887  : 	{
; 888  : 		int nResult;
; 889  : 		nResult = MultiByteToWideChar(_acp_ex, 0, lp, nLen, str, nConvertedLen);

  00045	56		 push	 esi
  00046	53		 push	 ebx
  00047	57		 push	 edi
  00048	55		 push	 ebp
  00049	6a 00		 push	 0
  0004b	6a 03		 push	 3
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 890  : 		ATLASSERT(nResult == nConvertedLen);
; 891  : 		if(nResult != nConvertedLen)

  00053	3b c6		 cmp	 eax, esi
  00055	74 17		 je	 SHORT $LN1@A2WBSTR

; 892  : 		{
; 893  : 			SysFreeString(str);

  00057	53		 push	 ebx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 894  : 			return NULL;

  0005e	8d 4c 24 14	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[esp+12]
  00062	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00067	5b		 pop	 ebx
  00068	5e		 pop	 esi
  00069	5f		 pop	 edi
  0006a	33 c0		 xor	 eax, eax
  0006c	5d		 pop	 ebp

; 899  : }

  0006d	c3		 ret	 0
$LN1@A2WBSTR:

; 895  : 		}
; 896  : 
; 897  : 	}
; 898  : 	return str;

  0006e	8d 4c 24 14	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[esp+12]
  00072	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00077	8b c3		 mov	 eax, ebx
  00079	5b		 pop	 ebx
  0007a	5e		 pop	 esi
  0007b	5f		 pop	 edi
  0007c	5d		 pop	 ebp

; 899  : }

  0007d	c3		 ret	 0
$LN4@A2WBSTR:
  0007e	5f		 pop	 edi

; 873  : 		return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	5d		 pop	 ebp

; 899  : }

  00082	c3		 ret	 0
?A2WBSTR@@YAPA_WPBDH@Z ENDP				; A2WBSTR
_TEXT	ENDS
PUBLIC	??0CComBSTR@ATL@@QAE@PBD@Z			; ATL::CComBSTR::CComBSTR
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??0CComBSTR@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__AtlSafeAllocaManager$158855 = 8			; size = 4
_pSrc$ = 8						; size = 4
??0CComBSTR@ATL@@QAE@PBD@Z PROC				; ATL::CComBSTR::CComBSTR, COMDAT
; _this$ = ecx

; 1167 : 	CComBSTR(_In_opt_ LPCSTR pSrc)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1168 : 	{
; 1169 : 		if (pSrc != NULL)

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR _pSrc$[esp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	89 44 24 04	 mov	 DWORD PTR _this$[esp+8], eax
  0000c	85 db		 test	 ebx, ebx
  0000e	74 75		 je	 SHORT $LN3@CComBSTR
  00010	55		 push	 ebp

; 1170 : 		{
; 1171 : 			m_str = A2WBSTR(pSrc);

  00011	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__MultiByteToWideChar@24
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	6a ff		 push	 -1
  0001f	53		 push	 ebx
  00020	6a 00		 push	 0
  00022	6a 03		 push	 3
  00024	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __AtlSafeAllocaManager$158855[esp+40], 0
  0002c	ff d5		 call	 ebp
  0002e	8b f0		 mov	 esi, eax
  00030	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocStringLen@8
  0003c	8b f8		 mov	 edi, eax
  0003e	85 ff		 test	 edi, edi
  00040	74 23		 je	 SHORT $LN6@CComBSTR
  00042	56		 push	 esi
  00043	57		 push	 edi
  00044	6a ff		 push	 -1
  00046	53		 push	 ebx
  00047	6a 00		 push	 0
  00049	6a 03		 push	 3
  0004b	ff d5		 call	 ebp
  0004d	3b c6		 cmp	 eax, esi
  0004f	74 14		 je	 SHORT $LN6@CComBSTR
  00051	57		 push	 edi
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00058	8d 4c 24 18	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$158855[esp+16]
  0005c	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00061	33 ff		 xor	 edi, edi
  00063	eb 09		 jmp	 SHORT $LN11@CComBSTR
$LN6@CComBSTR:
  00065	8d 4c 24 18	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$158855[esp+16]
  00069	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
$LN11@CComBSTR:
  0006e	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$[esp+20]
  00072	89 39		 mov	 DWORD PTR [ecx], edi

; 1172 : 			if (!*this)

  00074	85 ff		 test	 edi, edi
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
  00079	75 15		 jne	 SHORT $LN20@CComBSTR

; 1173 :             {
; 1174 : 				AtlThrow(E_OUTOFMEMORY);

  0007b	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00080	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN3@CComBSTR:

; 1175 :             }
; 1176 : 		}
; 1177 : 		else
; 1178 :         {
; 1179 : 			m_str = NULL;

  00085	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008b	5b		 pop	 ebx

; 1180 :         }
; 1181 : 	}

  0008c	59		 pop	 ecx
  0008d	c2 04 00	 ret	 4
$LN20@CComBSTR:

; 1175 :             }
; 1176 : 		}
; 1177 : 		else
; 1178 :         {
; 1179 : 			m_str = NULL;

  00090	8b c1		 mov	 eax, ecx
  00092	5b		 pop	 ebx

; 1180 :         }
; 1181 : 	}

  00093	59		 pop	 ecx
  00094	c2 04 00	 ret	 4
$LN21@CComBSTR:
??0CComBSTR@ATL@@QAE@PBD@Z ENDP				; ATL::CComBSTR::CComBSTR
_TEXT	ENDS
PUBLIC	??_7SystemException@CipherShed@@6B@		; CipherShed::SystemException::`vftable'
PUBLIC	??0SystemException@CipherShed@@QAE@XZ		; CipherShed::SystemException::SystemException
PUBLIC	??_R4SystemException@CipherShed@@6B@		; CipherShed::SystemException::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
PUBLIC	??_R3SystemException@CipherShed@@8		; CipherShed::SystemException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SystemException@CipherShed@@8		; CipherShed::SystemException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SystemException@CipherShed@@8	; CipherShed::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::SystemException::Show
EXTRN	__imp__GetLastError@0:PROC
;	COMDAT ??_R1A@?0A@EA@SystemException@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
rdata$r	SEGMENT
??_R1A@?0A@EA@SystemException@CipherShed@@8 DD FLAT:??_R0?AUSystemException@CipherShed@@@8 ; CipherShed::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2SystemException@CipherShed@@8
rdata$r	SEGMENT
??_R2SystemException@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@SystemException@CipherShed@@8 ; CipherShed::SystemException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3SystemException@CipherShed@@8
rdata$r	SEGMENT
??_R3SystemException@CipherShed@@8 DD 00H		; CipherShed::SystemException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SystemException@CipherShed@@6B@
rdata$r	SEGMENT
??_R4SystemException@CipherShed@@6B@ DD 00H		; CipherShed::SystemException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	FLAT:??_R3SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7SystemException@CipherShed@@6B@
CONST	SEGMENT
??_7SystemException@CipherShed@@6B@ DD FLAT:??_R4SystemException@CipherShed@@6B@ ; CipherShed::SystemException::`vftable'
	DD	FLAT:?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0SystemException@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SystemException@CipherShed@@QAE@XZ PROC		; CipherShed::SystemException::SystemException, COMDAT
; _this$ = ecx

; 24   : 		SystemException () : ErrorCode (GetLastError()) { }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SystemException@CipherShed@@6B@
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0SystemException@CipherShed@@QAE@XZ ENDP		; CipherShed::SystemException::SystemException
_TEXT	ENDS
EXTRN	_handleWin32Error:PROC
EXTRN	__imp__SetLastError@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::SystemException::Show, COMDAT
; _this$ = ecx

; 28   : 			SetLastError (ErrorCode);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 29   : 			handleWin32Error (parent);

  0000a	8b 4c 24 04	 mov	 ecx, DWORD PTR _parent$[esp-4]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _handleWin32Error
  00014	59		 pop	 ecx

; 30   : 		}

  00015	c2 04 00	 ret	 4
?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::SystemException::Show
_TEXT	ENDS
PUBLIC	__TI2?AUSystemException@CipherShed@@
PUBLIC	?Elevate@Elevator@CipherShed@@KAXXZ		; CipherShed::Elevator::Elevate
PUBLIC	__CTA2?AUSystemException@CipherShed@@
PUBLIC	__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
PUBLIC	??0SystemException@CipherShed@@QAE@ABU01@@Z	; CipherShed::SystemException::SystemException
PUBLIC	__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0Exception@CipherShed@@QAE@ABU01@@Z		; CipherShed::Exception::Exception
EXTRN	?GetElevatedInstance@@YAPAUICipherShedMainCom@@PAUHWND__@@@Z:PROC ; GetElevatedInstance
EXTRN	_MainDlg:DWORD
EXTRN	__imp__GetActiveWindow@0:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	_IsAdmin:PROC
;	COMDAT __CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0Exception@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
xdata$x	SEGMENT
__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8 DD 00H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	FLAT:??0SystemException@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUSystemException@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUSystemException@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUSystemException@CipherShed@@
xdata$x	SEGMENT
__TI2?AUSystemException@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSystemException@CipherShed@@
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?Elevate@Elevator@CipherShed@@KAXXZ
_TEXT	SEGMENT
$T158879 = -8						; size = 8
?Elevate@Elevator@CipherShed@@KAXXZ PROC		; CipherShed::Elevator::Elevate, COMDAT

; 186  : 		{

  00000	83 ec 08	 sub	 esp, 8

; 187  : 			if (IsAdmin())

  00003	e8 00 00 00 00	 call	 _IsAdmin
  00008	85 c0		 test	 eax, eax
  0000a	74 28		 je	 SHORT $LN3@Elevate

; 188  : 			{
; 189  : 				SetLastError (ERROR_ACCESS_DENIED);

  0000c	6a 05		 push	 5
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 190  : 				throw SystemException();

  00014	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T158879[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00021	89 44 24 04	 mov	 DWORD PTR $T158879[esp+12], eax
  00025	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0002a	8d 44 24 04	 lea	 eax, DWORD PTR $T158879[esp+12]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Elevate:

; 191  : 			}
; 192  : 
; 193  : 			if (!ElevatedComInstance || ElevatedComInstanceThreadId != GetCurrentThreadId())

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A, 0 ; CipherShed::Elevator::ElevatedComInstance
  0003b	57		 push	 edi
  0003c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetCurrentThreadId@0
  00042	74 0a		 je	 SHORT $LN1@Elevate
  00044	ff d7		 call	 edi
  00046	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ElevatedComInstanceThreadId@Elevator@CipherShed@@1KA, eax ; CipherShed::Elevator::ElevatedComInstanceThreadId
  0004c	74 34		 je	 SHORT $LN12@Elevate
$LN1@Elevate:
  0004e	56		 push	 esi

; 194  : 			{
; 195  : 				CoInitialize (NULL);

  0004f	6a 00		 push	 0
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 196  : 				ElevatedComInstance = GetElevatedInstance (GetActiveWindow() ? GetActiveWindow() : MainDlg);

  00057	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetActiveWindow@0
  0005d	ff d6		 call	 esi
  0005f	85 c0		 test	 eax, eax
  00061	74 04		 je	 SHORT $LN6@Elevate
  00063	ff d6		 call	 esi
  00065	eb 05		 jmp	 SHORT $LN7@Elevate
$LN6@Elevate:
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
$LN7@Elevate:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?GetElevatedInstance@@YAPAUICipherShedMainCom@@PAUHWND__@@@Z ; GetElevatedInstance
  00072	83 c4 04	 add	 esp, 4
  00075	a3 00 00 00 00	 mov	 DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A, eax ; CipherShed::Elevator::ElevatedComInstance

; 197  : 				ElevatedComInstanceThreadId = GetCurrentThreadId();

  0007a	ff d7		 call	 edi
  0007c	a3 00 00 00 00	 mov	 DWORD PTR ?ElevatedComInstanceThreadId@Elevator@CipherShed@@1KA, eax ; CipherShed::Elevator::ElevatedComInstanceThreadId
  00081	5e		 pop	 esi
$LN12@Elevate:
  00082	5f		 pop	 edi

; 198  : 			}
; 199  : 		}

  00083	83 c4 08	 add	 esp, 8
  00086	c3		 ret	 0
$LN13@Elevate:
?Elevate@Elevator@CipherShed@@KAXXZ ENDP		; CipherShed::Elevator::Elevate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Exception@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Exception@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0Exception@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::Exception::Exception
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0SystemException@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SystemException@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::SystemException::SystemException, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR ___that$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SystemException@CipherShed@@6B@
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	c2 04 00	 ret	 4
??0SystemException@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::SystemException::SystemException
_TEXT	ENDS
PUBLIC	?SeekAt@File@CipherShed@@QAEX_J@Z		; CipherShed::File::SeekAt
EXTRN	__imp__SetFilePointerEx@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?SeekAt@File@CipherShed@@QAEX_J@Z
_TEXT	SEGMENT
$T158901 = 8						; size = 8
_position$ = 8						; size = 8
?SeekAt@File@CipherShed@@QAEX_J@Z PROC			; CipherShed::File::SeekAt, COMDAT
; _this$ = ecx

; 289  : 		FilePointerPosition = position;
; 290  : 
; 291  : 		if (!Elevated)

  00000	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00003	8b 44 24 04	 mov	 eax, DWORD PTR _position$[esp-4]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR _position$[esp]
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00011	75 35		 jne	 SHORT $LN2@SeekAt

; 292  : 		{
; 293  : 			LARGE_INTEGER pos;
; 294  : 			pos.QuadPart = position;
; 295  : 			throw_sys_if (!SetFilePointerEx (Handle, pos, NULL, FILE_BEGIN));

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0001c	50		 push	 eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00023	85 c0		 test	 eax, eax
  00025	75 21		 jne	 SHORT $LN2@SeekAt
  00027	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR $T158901[esp-4], OFFSET ??_7SystemException@CipherShed@@6B@
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00035	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0003a	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158901[esp]
  0003e	51		 push	 ecx
  0003f	89 44 24 10	 mov	 DWORD PTR $T158901[esp+8], eax
  00043	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@SeekAt:

; 296  : 		}
; 297  : 	}

  00048	c2 08 00	 ret	 8
$LN12@SeekAt:
?SeekAt@File@CipherShed@@QAEX_J@Z ENDP			; CipherShed::File::SeekAt
_TEXT	ENDS
PUBLIC	??_C@_05FHMJPCKA@Start?$AA@			; `string'
PUBLIC	?GetDriverServiceStartType@BootEncryption@CipherShed@@QAEKXZ ; CipherShed::BootEncryption::GetDriverServiceStartType
;	COMDAT ??_C@_05FHMJPCKA@Start?$AA@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_05FHMJPCKA@Start?$AA@ DB 'Start', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?GetDriverServiceStartType@BootEncryption@CipherShed@@QAEKXZ
_TEXT	SEGMENT
_startType$ = -12					; size = 4
$T158913 = -8						; size = 8
?GetDriverServiceStartType@BootEncryption@CipherShed@@QAEKXZ PROC ; CipherShed::BootEncryption::GetDriverServiceStartType, COMDAT
; _this$ = ecx

; 522  : 	{

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 523  : 		DWORD startType;
; 524  : 		throw_sys_if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", "Start", &startType));

  00003	8d 04 24	 lea	 eax, DWORD PTR _startType$[esp+12]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_05FHMJPCKA@Start?$AA@
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  00011	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	85 c0		 test	 eax, eax
  0001b	75 21		 jne	 SHORT $LN3@GetDriverS
  0001d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR $T158913[esp+12], OFFSET ??_7SystemException@CipherShed@@6B@
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002b	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00030	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158913[esp+16]
  00034	51		 push	 ecx
  00035	89 44 24 10	 mov	 DWORD PTR $T158913[esp+24], eax
  00039	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetDriverS:

; 525  : 		return startType;

  0003e	8b 04 24	 mov	 eax, DWORD PTR _startType$[esp+12]

; 526  : 	}

  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	c3		 ret	 0
$LN11@GetDriverS:
?GetDriverServiceStartType@BootEncryption@CipherShed@@QAEKXZ ENDP ; CipherShed::BootEncryption::GetDriverServiceStartType
_TEXT	ENDS
PUBLIC	??_C@_0DE@IKCLMEGP@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_0DE@PGJOFKBN@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	__TI2?AUParameterIncorrect@CipherShed@@
PUBLIC	?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z ; CipherShed::BootEncryption::CreateVolumeHeader
PUBLIC	__CTA2?AUParameterIncorrect@CipherShed@@
PUBLIC	__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
PUBLIC	??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z	; CipherShed::ParameterIncorrect::ParameterIncorrect
EXTRN	_EncryptBuffer:PROC
EXTRN	_GetCrc32:PROC
EXTRN	_GetHeaderField32:PROC
EXTRN	_DecryptBuffer:PROC
EXTRN	_ReadVolumeHeader:PROC
EXTRN	_CreateVolumeHeaderInMemory:PROC
EXTRN	_IsRandomNumberGeneratorStarted:PROC
;	COMDAT __CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8 DD 00H
	DD	FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	FLAT:??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUParameterIncorrect@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUParameterIncorrect@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT ??_C@_0DE@IKCLMEGP@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DE@IKCLMEGP@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateVolumeHeader:1577', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PGJOFKBN@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DE@PGJOFKBN@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateVolumeHeader:1562', 00H ; `string'
CONST	ENDS
;	COMDAT __TI2?AUParameterIncorrect@CipherShed@@
xdata$x	SEGMENT
__TI2?AUParameterIncorrect@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUParameterIncorrect@CipherShed@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z$0
__ehfuncinfo$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z
_TEXT	SEGMENT
_cryptoInfo$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
$T158926 = 8						; size = 8
$T158925 = 8						; size = 8
_volumeSize$ = 8					; size = 8
$T158927 = 16						; size = 8
_encryptedAreaStart$ = 16				; size = 8
_password$ = 24						; size = 4
_ea$ = 28						; size = 4
_mode$ = 32						; size = 4
_finally1567$ = 36					; size = 4
_pkcs5$ = 36						; size = 4
?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z PROC ; CipherShed::BootEncryption::CreateVolumeHeader, COMDAT
; _this$ = ecx

; 1558 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d9		 mov	 ebx, ecx

; 1559 : 		PCRYPTO_INFO cryptoInfo = NULL;

  00027	33 ff		 xor	 edi, edi
  00029	89 7c 24 14	 mov	 DWORD PTR _cryptoInfo$[esp+36], edi

; 1560 : 
; 1561 : 		if (!IsRandomNumberGeneratorStarted())

  0002d	e8 00 00 00 00	 call	 _IsRandomNumberGeneratorStarted
  00032	85 c0		 test	 eax, eax
  00034	75 1f		 jne	 SHORT $LN5@CreateVolu

; 1562 : 			throw ParameterIncorrect (SRC_POS);

  00036	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0003b	8d 44 24 2c	 lea	 eax, DWORD PTR $T158925[esp+36]
  0003f	50		 push	 eax
  00040	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T158925[esp+40], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00048	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T158925[esp+44], OFFSET ??_C@_0DE@PGJOFKBN@CipherShed?3?3BootEncryption?3?3Crea@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@CreateVolu:

; 1563 : 
; 1564 : 		throw_sys_if (CreateVolumeHeaderInMemory (TRUE, (char *) VolumeHeader, ea, mode, password, pkcs5, NULL, &cryptoInfo,
; 1565 : 			volumeSize, 0, encryptedAreaStart, 0, TC_SYSENC_KEYSCOPE_MIN_REQ_PROG_VERSION, TC_HEADER_FLAG_ENCRYPTED_SYSTEM, TC_SECTOR_SIZE_BIOS, FALSE) != 0);

  00055	8b 4c 24 34	 mov	 ecx, DWORD PTR _encryptedAreaStart$[esp+36]
  00059	8b 54 24 30	 mov	 edx, DWORD PTR _encryptedAreaStart$[esp+32]
  0005d	57		 push	 edi
  0005e	68 00 02 00 00	 push	 512			; 00000200H
  00063	8b 6c 24 34	 mov	 ebp, DWORD PTR _volumeSize$[esp+44]
  00067	8b 44 24 30	 mov	 eax, DWORD PTR _volumeSize$[esp+40]
  0006b	6a 01		 push	 1
  0006d	68 00 07 00 00	 push	 1792			; 00000700H
  00072	57		 push	 edi
  00073	57		 push	 edi
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	8b 54 24 64	 mov	 edx, DWORD PTR _pkcs5$[esp+64]
  0007a	57		 push	 edi
  0007b	57		 push	 edi
  0007c	55		 push	 ebp
  0007d	50		 push	 eax
  0007e	8b 44 24 68	 mov	 eax, DWORD PTR _password$[esp+80]
  00082	8d 4c 24 44	 lea	 ecx, DWORD PTR _cryptoInfo$[esp+84]
  00086	51		 push	 ecx
  00087	8b 4c 24 74	 mov	 ecx, DWORD PTR _mode$[esp+84]
  0008b	57		 push	 edi
  0008c	52		 push	 edx
  0008d	8b 54 24 78	 mov	 edx, DWORD PTR _ea$[esp+92]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	52		 push	 edx
  00094	8d b3 14 04 00
	00		 lea	 esi, DWORD PTR [ebx+1044]
  0009a	56		 push	 esi
  0009b	6a 01		 push	 1
  0009d	e8 00 00 00 00	 call	 _CreateVolumeHeaderInMemory
  000a2	83 c4 50	 add	 esp, 80			; 00000050H
  000a5	85 c0		 test	 eax, eax
  000a7	74 21		 je	 SHORT $LN4@CreateVolu
  000a9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T158926[esp+32], OFFSET ??_7SystemException@CipherShed@@6B@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b7	89 44 24 2c	 mov	 DWORD PTR $T158926[esp+36], eax
  000bb	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000c0	8d 44 24 2c	 lea	 eax, DWORD PTR $T158926[esp+36]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@CreateVolu:

; 1566 : 
; 1567 : 		finally_do_arg (PCRYPTO_INFO*, &cryptoInfo, { crypto_close (*finally_arg); });

  000ca	8d 4c 24 14	 lea	 ecx, DWORD PTR _cryptoInfo$[esp+36]
  000ce	89 4c 24 44	 mov	 DWORD PTR _finally1567$[esp+32], ecx

; 1568 : 
; 1569 : 		// Initial rescue disk assumes encryption of the drive has been completed (EncryptedAreaLength == volumeSize)
; 1570 : 		memcpy (RescueVolumeHeader, VolumeHeader, sizeof (RescueVolumeHeader));
; 1571 : 		ReadVolumeHeader (TRUE, (char *) RescueVolumeHeader, password, NULL, cryptoInfo);

  000d2	8b 54 24 14	 mov	 edx, DWORD PTR _cryptoInfo$[esp+36]
  000d6	8d 83 14 02 00
	00		 lea	 eax, DWORD PTR [ebx+532]
  000dc	52		 push	 edx
  000dd	89 7c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edi
  000e1	8b f8		 mov	 edi, eax
  000e3	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000e8	f3 a5		 rep movsd
  000ea	8b 4c 24 3c	 mov	 ecx, DWORD PTR _password$[esp+36]
  000ee	6a 00		 push	 0
  000f0	51		 push	 ecx
  000f1	50		 push	 eax
  000f2	6a 01		 push	 1
  000f4	e8 00 00 00 00	 call	 _ReadVolumeHeader

; 1572 : 
; 1573 : 		DecryptBuffer (RescueVolumeHeader + HEADER_ENCRYPTED_DATA_OFFSET, HEADER_ENCRYPTED_DATA_SIZE, cryptoInfo);

  000f9	8b 54 24 28	 mov	 edx, DWORD PTR _cryptoInfo$[esp+56]
  000fd	52		 push	 edx
  000fe	6a 00		 push	 0
  00100	8d b3 54 02 00
	00		 lea	 esi, DWORD PTR [ebx+596]
  00106	68 c0 01 00 00	 push	 448			; 000001c0H
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 _DecryptBuffer

; 1574 : 
; 1575 : 		/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 1576 : 		if (GetHeaderField32 (RescueVolumeHeader, TC_HEADER_OFFSET_MAGIC) != 0x54525545)

  00111	8d 83 14 02 00
	00		 lea	 eax, DWORD PTR [ebx+532]
  00117	6a 40		 push	 64			; 00000040H
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _GetHeaderField32
  0011f	83 c4 2c	 add	 esp, 44			; 0000002cH
  00122	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  00127	74 1f		 je	 SHORT $LN1@CreateVolu

; 1577 : 			throw ParameterIncorrect (SRC_POS);

  00129	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0012e	8d 44 24 34	 lea	 eax, DWORD PTR $T158927[esp+36]
  00132	50		 push	 eax
  00133	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T158927[esp+40], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0013b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T158927[esp+44], OFFSET ??_C@_0DE@IKCLMEGP@CipherShed?3?3BootEncryption?3?3Crea@
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CreateVolu:

; 1578 : 
; 1579 : 		byte *fieldPos = RescueVolumeHeader + TC_HEADER_OFFSET_ENCRYPTED_AREA_LENGTH;
; 1580 : 		mputInt64 (fieldPos, volumeSize);

  00148	8b cd		 mov	 ecx, ebp
  0014a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0014d	88 8b 88 02 00
	00		 mov	 BYTE PTR [ebx+648], cl
  00153	8d 83 88 02 00
	00		 lea	 eax, DWORD PTR [ebx+648]
  00159	40		 inc	 eax
  0015a	8b d5		 mov	 edx, ebp
  0015c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0015f	88 10		 mov	 BYTE PTR [eax], dl
  00161	40		 inc	 eax
  00162	8b cd		 mov	 ecx, ebp
  00164	c1 e9 08	 shr	 ecx, 8
  00167	88 08		 mov	 BYTE PTR [eax], cl
  00169	8b 4c 24 28	 mov	 ecx, DWORD PTR _volumeSize$[esp+32]
  0016d	40		 inc	 eax
  0016e	8b d5		 mov	 edx, ebp
  00170	88 10		 mov	 BYTE PTR [eax], dl
  00172	8b d1		 mov	 edx, ecx
  00174	8b fd		 mov	 edi, ebp
  00176	0f ac fa 18	 shrd	 edx, edi, 24
  0017a	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0017d	40		 inc	 eax
  0017e	c1 ef 18	 shr	 edi, 24			; 00000018H
  00181	8b d1		 mov	 edx, ecx
  00183	8b fd		 mov	 edi, ebp
  00185	0f ac fa 10	 shrd	 edx, edi, 16
  00189	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0018c	40		 inc	 eax
  0018d	8b d1		 mov	 edx, ecx
  0018f	0f ac ea 08	 shrd	 edx, ebp, 8
  00193	40		 inc	 eax

; 1581 : 
; 1582 : 		// CRC of the header fields
; 1583 : 		uint32 crc = GetCrc32 (RescueVolumeHeader + TC_HEADER_OFFSET_MAGIC, TC_HEADER_OFFSET_HEADER_CRC - TC_HEADER_OFFSET_MAGIC);

  00194	68 bc 00 00 00	 push	 188			; 000000bcH
  00199	88 10		 mov	 BYTE PTR [eax], dl
  0019b	56		 push	 esi
  0019c	c1 ef 10	 shr	 edi, 16			; 00000010H
  0019f	c1 ed 08	 shr	 ebp, 8
  001a2	88 48 01	 mov	 BYTE PTR [eax+1], cl
  001a5	e8 00 00 00 00	 call	 _GetCrc32

; 1584 : 		fieldPos = RescueVolumeHeader + TC_HEADER_OFFSET_HEADER_CRC;
; 1585 : 		mputLong (fieldPos, crc);

  001aa	8b d0		 mov	 edx, eax
  001ac	c1 ea 18	 shr	 edx, 24			; 00000018H
  001af	88 93 10 03 00
	00		 mov	 BYTE PTR [ebx+784], dl
  001b5	8d 8b 10 03 00
	00		 lea	 ecx, DWORD PTR [ebx+784]
  001bb	8b d0		 mov	 edx, eax
  001bd	c1 ea 10	 shr	 edx, 16			; 00000010H
  001c0	88 51 01	 mov	 BYTE PTR [ecx+1], dl
  001c3	41		 inc	 ecx
  001c4	8b d0		 mov	 edx, eax
  001c6	41		 inc	 ecx
  001c7	c1 ea 08	 shr	 edx, 8
  001ca	88 11		 mov	 BYTE PTR [ecx], dl
  001cc	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1586 : 
; 1587 : 		EncryptBuffer (RescueVolumeHeader + HEADER_ENCRYPTED_DATA_OFFSET, HEADER_ENCRYPTED_DATA_SIZE, cryptoInfo);

  001cf	8b 44 24 1c	 mov	 eax, DWORD PTR _cryptoInfo$[esp+44]
  001d3	50		 push	 eax
  001d4	6a 00		 push	 0
  001d6	68 c0 01 00 00	 push	 448			; 000001c0H
  001db	56		 push	 esi
  001dc	e8 00 00 00 00	 call	 _EncryptBuffer
  001e1	83 c4 18	 add	 esp, 24			; 00000018H

; 1588 : 
; 1589 : 		VolumeHeaderValid = true;
; 1590 : 		RescueVolumeHeaderValid = true;
; 1591 : 	}

  001e4	8d 44 24 44	 lea	 eax, DWORD PTR _finally1567$[esp+32]
  001e8	c6 83 17 06 00
	00 01		 mov	 BYTE PTR [ebx+1559], 1
  001ef	c6 83 16 06 00
	00 01		 mov	 BYTE PTR [ebx+1558], 1
  001f6	e8 00 00 00 00	 call	 ??1Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@XZ ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::~Finally1567
  001fb	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  001ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00206	59		 pop	 ecx
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5d		 pop	 ebp
  0020a	5b		 pop	 ebx
  0020b	83 c4 10	 add	 esp, 16			; 00000010H
  0020e	c2 20 00	 ret	 32			; 00000020H
$LN25@CreateVolu:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z$0:
  00000	8d 45 20	 lea	 eax, DWORD PTR _finally1567$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1Finally1567@?7??CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z@QAE@XZ ; `CipherShed::BootEncryption::CreateVolumeHeader'::`8'::Finally1567::~Finally1567
__ehhandler$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z ENDP ; CipherShed::BootEncryption::CreateVolumeHeader
; Function compile flags: /Ogtpy
;	COMDAT ??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::ParameterIncorrect::ParameterIncorrect, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR ___that$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	c2 04 00	 ret	 4
??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::ParameterIncorrect::ParameterIncorrect
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@5
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@5
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@5:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$159038 = -4					; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$159038[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$159038[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 501  : 		return ((_Elem)_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8a 00		 mov	 al, BYTE PTR [eax]

; 502  : 		}

  00006	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 299  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 304  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 314  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 212  : 		}

  0000e	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 253  : 		}

  0000e	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	75 04		 jne	 SHORT $LN3@uflow
  0000f	0b c0		 or	 eax, eax
  00011	5e		 pop	 esi

; 320  : 		}

  00012	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00013	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00016	ff 08		 dec	 DWORD PTR [eax]
  00018	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00020	89 10		 mov	 DWORD PTR [eax], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	5e		 pop	 esi

; 320  : 		}

  00026	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$159163 = -4					; size = 4
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre@2
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre@2
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$159163[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre@2
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre@2
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre@2:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$159163[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre@2
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre@2:
  00058	5e		 pop	 esi
$LN12@basic_stre@2:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre@2:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@_W@std@@SA_WABG@Z	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 386  : 		return (_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 387  : 		}

  00007	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 299  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 304  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 314  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 212  : 		}

  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail@2
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail@2:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 253  : 		}

  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000f	66 3b c8	 cmp	 cx, ax
  00012	75 04		 jne	 SHORT $LN3@uflow@2
  00014	8b c1		 mov	 eax, ecx
  00016	5e		 pop	 esi

; 320  : 		}

  00017	c3		 ret	 0
$LN3@uflow@2:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002a	5e		 pop	 esi

; 320  : 		}

  0002b	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEABUPartition@CipherShed@@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEABUPartition@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEABUPartition@CipherShed@@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@6
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@6
$LN23@operator@6:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@6
$LN17@operator@6:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@6:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@6
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEABUPartition@CipherShed@@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 522  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b c1		 mov	 eax, ecx
  00008	40		 inc	 eax
  00009	f7 d8		 neg	 eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	23 c1		 and	 eax, ecx

; 523  : 		}

  0000f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 3b		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 34		 jbe	 SHORT $LN3@pbackfail
  00010	8b 54 24 04	 mov	 edx, DWORD PTR __Meta$[esp-4]
  00014	83 fa ff	 cmp	 edx, -1
  00017	74 0b		 je	 SHORT $LN4@pbackfail
  00019	3a 50 ff	 cmp	 dl, BYTE PTR [eax-1]
  0001c	74 06		 je	 SHORT $LN4@pbackfail
  0001e	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  00022	75 20		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	ff 00		 inc	 DWORD PTR [eax]
  00029	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002c	ff 08		 dec	 DWORD PTR [eax]

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	83 fa ff	 cmp	 edx, -1
  00031	74 0c		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00033	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	88 11		 mov	 BYTE PTR [ecx], dl

; 168  : 			return (_Traits::not_eof(_Meta));

  0003a	8b c2		 mov	 eax, edx

; 169  : 			}
; 170  : 		}

  0003c	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  0003f	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00041	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00044	83 c8 ff	 or	 eax, -1

; 169  : 			}
; 170  : 		}

  00047	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 05		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0000e	c3		 ret	 0
$LN8@underflow:
  0000f	53		 push	 ebx
  00010	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00011	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00014	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00016	8b c6		 mov	 eax, esi
  00018	03 d8		 add	 ebx, eax
  0001a	3b c3		 cmp	 eax, ebx
  0001c	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx
  00023	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00024	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00025	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  00029	75 2f		 jne	 SHORT $LN3@underflow
  0002b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	85 c0		 test	 eax, eax
  00032	74 26		 je	 SHORT $LN3@underflow
  00034	3b c6		 cmp	 eax, esi
  00036	77 05		 ja	 SHORT $LN4@underflow
  00038	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003b	76 1d		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  0003d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00040	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00042	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00045	8b 12		 mov	 edx, DWORD PTR [edx]
  00047	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004a	2b c2		 sub	 eax, edx
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0004e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00056	5f		 pop	 edi
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00059	c3		 ret	 0
$LN3@underflow:
  0005a	5f		 pop	 edi
  0005b	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  0005c	83 c8 ff	 or	 eax, -1
  0005f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00060	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	85 c0		 test	 eax, eax
  00007	74 08		 je	 SHORT $LN20@seekoff
  00009	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0000c	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0000e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:
  00011	53		 push	 ebx

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00012	8a 5c 24 14	 mov	 bl, BYTE PTR __Which$[esp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	f6 c3 01	 test	 bl, 1
  0001b	0f 84 a8 00 00
	00		 je	 $LN19@seekoff
  00021	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00024	8b 30		 mov	 esi, DWORD PTR [eax]
  00026	85 f6		 test	 esi, esi
  00028	0f 84 9b 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002e	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00038	83 f8 02	 cmp	 eax, 2
  0003b	75 10		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00043	2b 02		 sub	 eax, DWORD PTR [edx]
  00045	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00049	03 d0		 add	 edx, eax

; 201  : 			else if (_Way == ios_base::cur

  0004b	eb 25		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 14		 jne	 SHORT $LN16@seekoff
  00052	f6 c3 02	 test	 bl, 2
  00055	75 13		 jne	 SHORT $LN73@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	8b c6		 mov	 eax, esi
  0005c	2b 02		 sub	 eax, DWORD PTR [edx]
  0005e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00062	03 d0		 add	 edx, eax
  00064	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  00066	85 c0		 test	 eax, eax
  00068	74 04		 je	 SHORT $LN74@seekoff
$LN73@seekoff:

; 205  : 				_Off = _BADOFF;

  0006a	8b d7		 mov	 edx, edi
  0006c	eb 04		 jmp	 SHORT $LN14@seekoff
$LN74@seekoff:
  0006e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00072	85 d2		 test	 edx, edx
  00074	0f 8c b9 00 00
	00		 jl	 $LN3@seekoff
  0007a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	55		 push	 ebp
  00080	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00083	2b e8		 sub	 ebp, eax
  00085	3b d5		 cmp	 edx, ebp
  00087	5d		 pop	 ebp
  00088	0f 8f a5 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0008e	2b c6		 sub	 eax, esi
  00090	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00093	03 c2		 add	 eax, edx
  00095	29 06		 sub	 DWORD PTR [esi], eax
  00097	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0009a	01 06		 add	 DWORD PTR [esi], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  0009c	f6 c3 02	 test	 bl, 2
  0009f	0f 84 98 00 00
	00		 je	 $LN77@seekoff
  000a5	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  000a8	8b 1f		 mov	 ebx, DWORD PTR [edi]
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 84 8b 00 00
	00		 je	 $LN77@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000b2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000b5	8b 30		 mov	 esi, DWORD PTR [eax]
  000b7	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	03 c3		 add	 eax, ebx
  000be	89 37		 mov	 DWORD PTR [edi], esi
  000c0	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000c3	2b c6		 sub	 eax, esi
  000c5	89 01		 mov	 DWORD PTR [ecx], eax

; 213  : 				}
; 214  : 			else

  000c7	eb 74		 jmp	 SHORT $LN77@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000c9	f6 c3 02	 test	 bl, 2
  000cc	74 69		 je	 SHORT $LN9@seekoff
  000ce	8b 32		 mov	 esi, DWORD PTR [edx]
  000d0	85 f6		 test	 esi, esi
  000d2	74 63		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000d4	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000de	83 f8 02	 cmp	 eax, 2
  000e1	75 10		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000e3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e6	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000e9	2b 02		 sub	 eax, DWORD PTR [edx]
  000eb	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  000ef	03 d0		 add	 edx, eax
  000f1	eb 1e		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  000f3	83 f8 01	 cmp	 eax, 1
  000f6	75 0f		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  000f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000fb	8b c6		 mov	 eax, esi
  000fd	2b 02		 sub	 eax, DWORD PTR [edx]
  000ff	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00103	03 d0		 add	 edx, eax
  00105	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00107	8b d7		 mov	 edx, edi
  00109	85 c0		 test	 eax, eax
  0010b	75 04		 jne	 SHORT $LN4@seekoff
  0010d	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00111	85 d2		 test	 edx, edx
  00113	7c 1e		 jl	 SHORT $LN3@seekoff
  00115	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00118	8b 00		 mov	 eax, DWORD PTR [eax]
  0011a	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0011d	2b d8		 sub	 ebx, eax
  0011f	3b d3		 cmp	 edx, ebx
  00121	7f 10		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00123	2b c6		 sub	 eax, esi
  00125	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00128	03 c2		 add	 eax, edx
  0012a	29 06		 sub	 DWORD PTR [esi], eax
  0012c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0012f	01 01		 add	 DWORD PTR [ecx], eax

; 229  : 			else

  00131	eb 0a		 jmp	 SHORT $LN77@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  00133	8b d7		 mov	 edx, edi

; 231  : 			}
; 232  : 		else

  00135	eb 06		 jmp	 SHORT $LN77@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN77@seekoff:

; 234  : 		return (pos_type(_Off));

  0013d	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00141	5f		 pop	 edi
  00142	33 c9		 xor	 ecx, ecx
  00144	5e		 pop	 esi
  00145	89 10		 mov	 DWORD PTR [eax], edx
  00147	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0014a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0014d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00150	5b		 pop	 ebx

; 235  : 		}

  00151	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000a	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000d	03 d0		 add	 edx, eax
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN12@seekpos
  00015	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00018	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001d	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00023	3b d5		 cmp	 edx, ebp
  00025	0f 84 8a 00 00
	00		 je	 $LN56@seekpos
  0002b	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002c	8a 5c 24 2c	 mov	 bl, BYTE PTR __Mode$[esp+8]
  00030	56		 push	 esi
  00031	f6 c3 01	 test	 bl, 1
  00034	74 4e		 je	 SHORT $LN55@seekpos
  00036	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00039	8b 30		 mov	 esi, DWORD PTR [eax]
  0003b	85 f6		 test	 esi, esi
  0003d	74 45		 je	 SHORT $LN55@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0003f	85 d2		 test	 edx, edx
  00041	7c 6e		 jl	 SHORT $LN4@seekpos
  00043	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004b	2b f8		 sub	 edi, eax
  0004d	3b d7		 cmp	 edx, edi
  0004f	7f 60		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00051	2b c6		 sub	 eax, esi
  00053	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00056	03 c2		 add	 eax, edx
  00058	29 06		 sub	 DWORD PTR [esi], eax
  0005a	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0005d	01 06		 add	 DWORD PTR [esi], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0005f	f6 c3 02	 test	 bl, 2
  00062	74 4f		 je	 SHORT $LN57@seekpos
  00064	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  00067	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00069	85 db		 test	 ebx, ebx
  0006b	74 46		 je	 SHORT $LN57@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  0006d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00070	8b 30		 mov	 esi, DWORD PTR [eax]
  00072	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	03 c3		 add	 eax, ebx
  00079	89 37		 mov	 DWORD PTR [edi], esi
  0007b	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0007e	2b c6		 sub	 eax, esi
  00080	89 01		 mov	 DWORD PTR [ecx], eax

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  00082	eb 2f		 jmp	 SHORT $LN57@seekpos
$LN55@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00084	f6 c3 02	 test	 bl, 2
  00087	74 28		 je	 SHORT $LN4@seekpos
  00089	8b 3f		 mov	 edi, DWORD PTR [edi]
  0008b	85 ff		 test	 edi, edi
  0008d	74 22		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0008f	85 d2		 test	 edx, edx
  00091	7c 1e		 jl	 SHORT $LN4@seekpos
  00093	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  0009b	2b f0		 sub	 esi, eax
  0009d	3b d6		 cmp	 edx, esi
  0009f	7f 10		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000a1	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  000a4	2b c7		 sub	 eax, edi
  000a6	03 c2		 add	 eax, edx
  000a8	29 06		 sub	 DWORD PTR [esi], eax
  000aa	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ad	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000af	eb 02		 jmp	 SHORT $LN57@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000b1	8b d5		 mov	 edx, ebp
$LN57@seekpos:
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
$LN56@seekpos:

; 268  : 		return (streampos(_Off));

  000b5	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  000b9	33 c9		 xor	 ecx, ecx
  000bb	5f		 pop	 edi
  000bc	89 10		 mov	 DWORD PTR [eax], edx
  000be	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000c1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000c7	5d		 pop	 ebp

; 269  : 		}

  000c8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@_W@std@@SA_NAB_W0@Z		; std::char_traits<wchar_t>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 315  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 316  : 		}

  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@_W@std@@SAGABG@Z		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00007	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000c	66 3b c1	 cmp	 ax, cx
  0000f	74 04		 je	 SHORT $LN3@not_eof
  00011	0f b7 c0	 movzx	 eax, ax

; 408  : 		}

  00014	c3		 ret	 0
$LN3@not_eof:

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00015	33 c0		 xor	 eax, eax

; 408  : 		}

  00017	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 4c		 je	 SHORT $LN3@pbackfail@2
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 45		 jbe	 SHORT $LN3@pbackfail@2
  00010	66 8b 54 24 04	 mov	 dx, WORD PTR __Meta$[esp-4]
  00015	56		 push	 esi
  00016	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0001b	66 3b f2	 cmp	 si, dx
  0001e	5e		 pop	 esi
  0001f	74 0c		 je	 SHORT $LN4@pbackfail@2
  00021	66 3b 50 fe	 cmp	 dx, WORD PTR [eax-2]
  00025	74 06		 je	 SHORT $LN4@pbackfail@2
  00027	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  0002b	75 28		 jne	 SHORT $LN3@pbackfail@2
$LN4@pbackfail@2:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  0002d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00030	ff 00		 inc	 DWORD PTR [eax]
  00032	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00038	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 0e		 je	 SHORT $LN37@pbackfail@2

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00042	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	66 89 10	 mov	 WORD PTR [eax], dx

; 168  : 			return (_Traits::not_eof(_Meta));

  0004a	0f b7 c2	 movzx	 eax, dx

; 169  : 			}
; 170  : 		}

  0004d	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail@2:
  00050	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00052	c2 04 00	 ret	 4
$LN3@pbackfail@2:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00055	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 169  : 			}
; 170  : 		}

  0005a	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 07		 jne	 SHORT $LN8@underflow@2

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00010	c3		 ret	 0
$LN8@underflow@2:
  00011	53		 push	 ebx
  00012	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00013	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00016	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00018	8b c6		 mov	 eax, esi
  0001a	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	73 07		 jae	 SHORT $LN6@underflow@2

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00021	66 8b 06	 mov	 ax, WORD PTR [esi]
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx
  00026	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00027	c3		 ret	 0
$LN6@underflow@2:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00028	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  0002c	75 31		 jne	 SHORT $LN3@underflow@2
  0002e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	85 c0		 test	 eax, eax
  00035	74 28		 je	 SHORT $LN3@underflow@2
  00037	3b c6		 cmp	 eax, esi
  00039	77 05		 ja	 SHORT $LN4@underflow@2
  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	76 1f		 jbe	 SHORT $LN3@underflow@2
$LN4@underflow@2:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  00040	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00043	73 03		 jae	 SHORT $LN1@underflow@2

; 184  : 				_Seekhigh = _Mysb::pptr();

  00045	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow@2:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00053	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	66 8b 02	 mov	 ax, WORD PTR [edx]
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0005e	c3		 ret	 0
$LN3@underflow@2:
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  00061	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00066	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00067	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 193  : 		{	// change position by _Off, according to _Way, _Mode

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00003	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN20@seekoff@2
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN20@seekoff@2

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff@2:

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	8a 5c 24 20	 mov	 bl, BYTE PTR __Which$[esp+12]
  00019	f6 c3 01	 test	 bl, 1
  0001c	0f 84 b5 00 00
	00		 je	 $LN19@seekoff@2
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	85 d2		 test	 edx, edx
  00029	0f 84 a8 00 00
	00		 je	 $LN19@seekoff@2

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002f	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  00033	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 12		 jne	 SHORT $LN18@seekoff@2

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00044	2b 28		 sub	 ebp, DWORD PTR [eax]
  00046	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0004a	d1 fd		 sar	 ebp, 1
  0004c	03 f5		 add	 esi, ebp

; 201  : 			else if (_Way == ios_base::cur

  0004e	eb 27		 jmp	 SHORT $LN14@seekoff@2
$LN18@seekoff@2:

; 202  : 				&& (_Which & ios_base::out) == 0)

  00050	83 f8 01	 cmp	 eax, 1
  00053	75 16		 jne	 SHORT $LN16@seekoff@2
  00055	f6 c3 02	 test	 bl, 2
  00058	75 15		 jne	 SHORT $LN71@seekoff@2

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  00061	8b ea		 mov	 ebp, edx
  00063	2b 28		 sub	 ebp, DWORD PTR [eax]
  00065	d1 fd		 sar	 ebp, 1
  00067	03 f5		 add	 esi, ebp
  00069	eb 0c		 jmp	 SHORT $LN14@seekoff@2
$LN16@seekoff@2:

; 204  : 			else if (_Way != ios_base::beg)

  0006b	85 c0		 test	 eax, eax
  0006d	74 04		 je	 SHORT $LN72@seekoff@2
$LN71@seekoff@2:

; 205  : 				_Off = _BADOFF;

  0006f	8b f7		 mov	 esi, edi
  00071	eb 04		 jmp	 SHORT $LN14@seekoff@2
$LN72@seekoff@2:
  00073	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN14@seekoff@2:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00077	85 f6		 test	 esi, esi
  00079	0f 8c cd 00 00
	00		 jl	 $LN3@seekoff@2
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00087	2b e8		 sub	 ebp, eax
  00089	d1 fd		 sar	 ebp, 1
  0008b	3b f5		 cmp	 esi, ebp
  0008d	0f 8f b9 00 00
	00		 jg	 $LN3@seekoff@2

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00093	2b c2		 sub	 eax, edx
  00095	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00098	d1 f8		 sar	 eax, 1
  0009a	03 c6		 add	 eax, esi
  0009c	29 02		 sub	 DWORD PTR [edx], eax
  0009e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a1	03 c0		 add	 eax, eax
  000a3	01 02		 add	 DWORD PTR [edx], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a5	f6 c3 02	 test	 bl, 2
  000a8	0f 84 a8 00 00
	00		 je	 $LN75@seekoff@2
  000ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 9b 00 00
	00		 je	 $LN75@seekoff@2

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000be	8b 12		 mov	 edx, DWORD PTR [edx]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c6	50		 push	 eax
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	50		 push	 eax
  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 213  : 				}
; 214  : 			else

  000d5	eb 7f		 jmp	 SHORT $LN75@seekoff@2
$LN19@seekoff@2:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 c3 02	 test	 bl, 2
  000da	74 74		 je	 SHORT $LN9@seekoff@2
  000dc	8b 16		 mov	 edx, DWORD PTR [esi]
  000de	85 d2		 test	 edx, edx
  000e0	74 6e		 je	 SHORT $LN9@seekoff@2

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000e2	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000ec	83 f8 02	 cmp	 eax, 2
  000ef	75 12		 jne	 SHORT $LN8@seekoff@2

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000f4	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  000f7	2b 18		 sub	 ebx, DWORD PTR [eax]
  000f9	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  000fd	d1 fb		 sar	 ebx, 1
  000ff	03 f3		 add	 esi, ebx
  00101	eb 20		 jmp	 SHORT $LN4@seekoff@2
$LN8@seekoff@2:

; 221  : 			else if (_Way == ios_base::cur)

  00103	83 f8 01	 cmp	 eax, 1
  00106	75 11		 jne	 SHORT $LN6@seekoff@2

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00108	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0010b	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0010f	8b da		 mov	 ebx, edx
  00111	2b 18		 sub	 ebx, DWORD PTR [eax]
  00113	d1 fb		 sar	 ebx, 1
  00115	03 f3		 add	 esi, ebx
  00117	eb 0a		 jmp	 SHORT $LN4@seekoff@2
$LN6@seekoff@2:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00119	8b f7		 mov	 esi, edi
  0011b	85 c0		 test	 eax, eax
  0011d	75 04		 jne	 SHORT $LN4@seekoff@2
  0011f	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN4@seekoff@2:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00123	85 f6		 test	 esi, esi
  00125	7c 25		 jl	 SHORT $LN3@seekoff@2
  00127	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0012a	8b 00		 mov	 eax, DWORD PTR [eax]
  0012c	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0012f	2b d8		 sub	 ebx, eax
  00131	d1 fb		 sar	 ebx, 1
  00133	3b f3		 cmp	 esi, ebx
  00135	7f 15		 jg	 SHORT $LN3@seekoff@2

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00137	2b c2		 sub	 eax, edx
  00139	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0013c	d1 f8		 sar	 eax, 1
  0013e	03 c6		 add	 eax, esi
  00140	29 02		 sub	 DWORD PTR [edx], eax
  00142	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00145	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  00148	01 11		 add	 DWORD PTR [ecx], edx

; 229  : 			else

  0014a	eb 0a		 jmp	 SHORT $LN75@seekoff@2
$LN3@seekoff@2:

; 230  : 				_Off = _BADOFF;

  0014c	8b f7		 mov	 esi, edi

; 231  : 			}
; 232  : 		else

  0014e	eb 06		 jmp	 SHORT $LN75@seekoff@2
$LN9@seekoff@2:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN75@seekoff@2:

; 234  : 		return (pos_type(_Off));

  00156	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0015a	5f		 pop	 edi
  0015b	89 30		 mov	 DWORD PTR [eax], esi
  0015d	5e		 pop	 esi
  0015e	33 c9		 xor	 ecx, ecx
  00160	5d		 pop	 ebp
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00164	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00167	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0016a	5b		 pop	 ebx

; 235  : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000b	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	85 c0		 test	 eax, eax
  00015	74 08		 je	 SHORT $LN12@seekpos@2
  00017	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0001a	73 03		 jae	 SHORT $LN12@seekpos@2

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos@2:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00025	3b f5		 cmp	 esi, ebp
  00027	0f 84 99 00 00
	00		 je	 $LN54@seekpos@2
  0002d	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002e	8a 5c 24 30	 mov	 bl, BYTE PTR __Mode$[esp+12]
  00032	f6 c3 01	 test	 bl, 1
  00035	74 59		 je	 SHORT $LN53@seekpos@2
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	85 d2		 test	 edx, edx
  0003e	74 50		 je	 SHORT $LN53@seekpos@2

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00040	85 f6		 test	 esi, esi
  00042	7c 7f		 jl	 SHORT $LN4@seekpos@2
  00044	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004c	2b f8		 sub	 edi, eax
  0004e	d1 ff		 sar	 edi, 1
  00050	3b f7		 cmp	 esi, edi
  00052	7f 6f		 jg	 SHORT $LN4@seekpos@2

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00054	2b c2		 sub	 eax, edx
  00056	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c6		 add	 eax, esi
  0005d	29 02		 sub	 DWORD PTR [edx], eax
  0005f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00062	03 c0		 add	 eax, eax
  00064	01 02		 add	 DWORD PTR [edx], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00066	f6 c3 02	 test	 bl, 2
  00069	74 5a		 je	 SHORT $LN55@seekpos@2
  0006b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN55@seekpos@2

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0007c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0007f	50		 push	 eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00085	50		 push	 eax
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  0008e	eb 35		 jmp	 SHORT $LN55@seekpos@2
$LN53@seekpos@2:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00090	f6 c3 02	 test	 bl, 2
  00093	74 2e		 je	 SHORT $LN4@seekpos@2
  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
  00097	85 ff		 test	 edi, edi
  00099	74 28		 je	 SHORT $LN4@seekpos@2

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0009b	85 f6		 test	 esi, esi
  0009d	7c 24		 jl	 SHORT $LN4@seekpos@2
  0009f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a7	2b d0		 sub	 edx, eax
  000a9	d1 fa		 sar	 edx, 1
  000ab	3b f2		 cmp	 esi, edx
  000ad	7f 14		 jg	 SHORT $LN4@seekpos@2

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b2	2b c7		 sub	 eax, edi
  000b4	d1 f8		 sar	 eax, 1
  000b6	03 c6		 add	 eax, esi
  000b8	29 02		 sub	 DWORD PTR [edx], eax
  000ba	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bd	03 c0		 add	 eax, eax
  000bf	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000c1	eb 02		 jmp	 SHORT $LN55@seekpos@2
$LN4@seekpos@2:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000c3	8b f5		 mov	 esi, ebp
$LN55@seekpos@2:
  000c5	5b		 pop	 ebx
$LN54@seekpos@2:

; 268  : 		return (streampos(_Off));

  000c6	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000ca	5f		 pop	 edi
  000cb	33 c9		 xor	 ecx, ecx
  000cd	89 30		 mov	 DWORD PTR [eax], esi
  000cf	5e		 pop	 esi
  000d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000d9	5d		 pop	 ebp

; 269  : 		}

  000da	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@12
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@12:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@13
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@13:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@14
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@14:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@15
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@15:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@16
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@16:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@17
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@17:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@18
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@18:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@19
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@19:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@20
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@20:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find
$LN6@find:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find
$LN11@find:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find
$LL4@find:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find
$LN2@find:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1813 : 
; 1814 :  #if _HAS_ITERATOR_DEBUGGING
; 1815 : 		if (_Count != 0)
; 1816 : 			_DEBUG_POINTER(_Ptr);
; 1817 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1818 : 
; 1819 : 		if (_Count == 0)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1820 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	75 12		 jne	 SHORT $LN8@rfind
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Off$[esp]
  00012	3b c8		 cmp	 ecx, eax
  00014	0f 83 85 00 00
	00		 jae	 $LN9@rfind
  0001a	8b c1		 mov	 eax, ecx
  0001c	5f		 pop	 edi

; 1834 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN8@rfind:
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi

; 1821 : 		if (_Count <= _Mysize)

  00023	3b d0		 cmp	 edx, eax
  00025	77 72		 ja	 SHORT $LN27@rfind

; 1822 : 			{	// room for match, look for it
; 1823 : 			const _Elem *_Uptr = _Myptr() +
; 1824 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

  00027	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  0002b	2b c2		 sub	 eax, edx
  0002d	3b c8		 cmp	 ecx, eax
  0002f	73 02		 jae	 SHORT $LN13@rfind
  00031	8b c1		 mov	 eax, ecx
$LN13@rfind:
  00033	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00036	89 4c 24 18	 mov	 DWORD PTR tv170[esp+12], ecx
  0003a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0003d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00040	72 04		 jb	 SHORT $LN17@rfind
  00042	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00044	eb 02		 jmp	 SHORT $LN18@rfind
$LN17@rfind:
  00046	8b cb		 mov	 ecx, ebx
$LN18@rfind:
  00048	8b 6c 24 14	 mov	 ebp, DWORD PTR __Ptr$[esp+12]
  0004c	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0004f	90		 npad	 1
$LL6@rfind:

; 1825 : 			for (; ; --_Uptr)
; 1826 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1827 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00050	8a 45 00	 mov	 al, BYTE PTR [ebp]
  00053	38 06		 cmp	 BYTE PTR [esi], al
  00055	75 0f		 jne	 SHORT $LN3@rfind
  00057	52		 push	 edx
  00058	55		 push	 ebp
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	74 12		 je	 SHORT $LN26@rfind
$LN3@rfind:

; 1829 : 				else if (_Uptr == _Myptr())

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	74 28		 je	 SHORT $LN27@rfind
  00071	8b 54 24 1c	 mov	 edx, DWORD PTR __Count$[esp+12]
  00075	4e		 dec	 esi
  00076	eb d8		 jmp	 SHORT $LL6@rfind
$LN26@rfind:

; 1828 : 					return (_Uptr - _Myptr());	// found a match

  00078	83 7c 24 18 10	 cmp	 DWORD PTR tv170[esp+12], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN23@rfind
  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx
  00086	2b c1		 sub	 eax, ecx
  00088	5f		 pop	 edi

; 1834 : 		}

  00089	c2 0c 00	 ret	 12			; 0000000cH

; 1828 : 					return (_Uptr - _Myptr());	// found a match

$LN23@rfind:
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	8b cb		 mov	 ecx, ebx
  00092	5b		 pop	 ebx
  00093	2b c1		 sub	 eax, ecx
  00095	5f		 pop	 edi

; 1834 : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN27@rfind:
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1830 : 					break;	// at beginning, no more chance for match
; 1831 : 			}
; 1832 : 
; 1833 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN9@rfind:
  0009f	5f		 pop	 edi

; 1834 : 		}

  000a0	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 22		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1a		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8a 4c 24 04	 mov	 cl, BYTE PTR __Ch$[esp-4]
  00022	88 08		 mov	 BYTE PTR [eax], cl
  00024	0f b6 c1	 movzx	 eax, cl

; 164  : 		}

  00027	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002a	0f b6 54 24 04	 movzx	 edx, BYTE PTR __Ch$[esp-4]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	89 54 24 04	 mov	 DWORD PTR __Ch$[esp-4], edx
  00038	ff e0		 jmp	 eax
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
; Function compile flags: /Ogtpy
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 23		 je	 SHORT $LN3@sputc@2
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1b		 jle	 SHORT $LN3@sputc@2
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00022	66 89 08	 mov	 WORD PTR [eax], cx
  00025	0f b7 c1	 movzx	 eax, cx

; 164  : 		}

  00028	c2 04 00	 ret	 4
$LN3@sputc@2:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 54 24 04	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	0f b7 c0	 movzx	 eax, ax

; 164  : 		}

  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@7
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@7
$LN23@operator@7:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@7
$LN17@operator@7:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@7:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@7
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@7:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@8
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@8
$LN6@operator@8:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@8:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEAAUPartition@CipherShed@@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEAAUPartition@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEAAUPartition@CipherShed@@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::operator*, COMDAT
; _this$ = ecx

; 393  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 394  : 			return ((reference)**(_Mybase_iter *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN25@operator@9
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN19@operator@9
$LN25@operator@9:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN20@operator@9
$LN19@operator@9:
  00018	33 c0		 xor	 eax, eax
$LN20@operator@9:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN5@operator@9
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@9:
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 395  : 			}

  0002e	c3		 ret	 0
??D?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEAAUPartition@CipherShed@@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::operator*
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 8
__P1$ = 16						; size = 8
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN3@Pdif

; 2144 : 		}

  00008	c3		 ret	 0
$LN3@Pdif:

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00009	8b 4c 24 04	 mov	 ecx, DWORD PTR __P2$[esp-4]
  0000d	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00010	74 13		 je	 SHORT $LN5@Pdif
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN8@Pdif
  00016	3b 4c 24 0c	 cmp	 ecx, DWORD PTR __P1$[esp-4]
  0001a	74 09		 je	 SHORT $LN5@Pdif
$LN8@Pdif:
  0001c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00021	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
$LN5@Pdif:
  00025	2b 44 24 10	 sub	 eax, DWORD PTR __P1$[esp]

; 2144 : 		}

  00029	c3		 ret	 0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$160451 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@3
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$160451[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@3
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@3:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$160451[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@3
$LN3@basic_stre@3:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@3:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$160477 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@4
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$160477[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@4
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@4:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$160477[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@4
$LN3@basic_stre@4:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@4:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV012@H@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@10
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@10
$LN25@operator@10:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@10
$LN19@operator@10:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@10:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@10
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@10:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??0?$_Bidit@UPartition@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@UPartition@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@UPartition@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@UPartition@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>::_Bidit<CipherShed::Partition,int,CipherShed::Partition const *,CipherShed::Partition const &>
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 83   : 		__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base_secure *_Pstring)

  00000	53		 push	 ebx

; 84   : 			{	// construct with pointer _Ptr
; 85   : 			_SCL_SECURE_VALIDATE(

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Pstring$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	85 f6		 test	 esi, esi
  00015	74 29		 je	 SHORT $LN4@String_con
  00017	85 db		 test	 ebx, ebx
  00019	74 25		 je	 SHORT $LN4@String_con
  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00021	83 fa 10	 cmp	 edx, 16			; 00000010H
  00024	72 04		 jb	 SHORT $LN14@String_con
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	eb 02		 jmp	 SHORT $LN15@String_con
$LN14@String_con:
  0002a	8b c8		 mov	 ecx, eax
$LN15@String_con:
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	77 10		 ja	 SHORT $LN4@String_con
  00030	83 fa 10	 cmp	 edx, 16			; 00000010H
  00033	72 02		 jb	 SHORT $LN18@String_con
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@String_con:
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	03 c8		 add	 ecx, eax
  0003c	3b d9		 cmp	 ebx, ecx
  0003e	76 05		 jbe	 SHORT $LN3@String_con
$LN4@String_con:

; 86   : 				_Pstring != NULL && 
; 87   : 				_Ptr != NULL && 
; 88   : 				((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@String_con:

; 89   : 			this->_Mycont = _Pstring;

  00045	89 37		 mov	 DWORD PTR [edi], esi

; 90   : 			_Myptr = _Ptr;

  00047	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 91   : 			}

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@21
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@21:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 603  : 	return ((_Elem)(unsigned char)_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 604  : 	}

  00004	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@operator@11
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 21		 je	 SHORT $LN7@operator@11
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 19		 jle	 SHORT $LN7@operator@11
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8a 4c 24 08	 mov	 cl, BYTE PTR __Right$[esp]
  0002c	88 08		 mov	 BYTE PTR [eax], cl
  0002e	0f b6 c1	 movzx	 eax, cl
  00031	eb 0d		 jmp	 SHORT $LN8@operator@11
$LN7@operator@11:
  00033	0f b6 54 24 08	 movzx	 edx, BYTE PTR __Right$[esp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
$LN8@operator@11:
  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 03		 jne	 SHORT $LN23@operator@11
$LN1@operator@11:

; 596  : 			_Failed = true;

  00045	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@11:

; 597  : 		return (*this);

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 598  : 		}

  0004b	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T160887 = -28						; size = 8
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv
  00035	8b f0		 mov	 esi, eax

; 137  : 
; 138  : 		_Grouping = 0;

  00037	33 c0		 xor	 eax, eax
  00039	89 75 ec	 mov	 DWORD PTR __Ptr$[ebp], esi
  0003c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 139  : 		_Falsename = 0;

  0003f	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 140  : 		_Truename = 0;

  00042	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00050	8b c7		 mov	 eax, edi
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL58@Init:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL58@Init
  0005c	2b c2		 sub	 eax, edx
  0005e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00067	83 c4 04	 add	 esp, 4
  0006a	8b c8		 mov	 ecx, eax
  0006c	8d 64 24 00	 npad	 4
$LL15@Init:
  00070	85 f6		 test	 esi, esi
  00072	76 09		 jbe	 SHORT $LN13@Init
  00074	8a 17		 mov	 dl, BYTE PTR [edi]
  00076	88 11		 mov	 BYTE PTR [ecx], dl
  00078	4e		 dec	 esi
  00079	41		 inc	 ecx
  0007a	47		 inc	 edi
  0007b	eb f3		 jmp	 SHORT $LL15@Init
$LN13@Init:
  0007d	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00080	e8 00 00 00 00	 call	 __Getcvt
  00085	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LAPONLG@false?$AA@
  0008a	8b c7		 mov	 eax, edi
  0008c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008f	90		 npad	 1
$LL59@Init:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL59@Init
  00097	2b c2		 sub	 eax, edx
  00099	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000a2	83 c4 04	 add	 esp, 4
  000a5	8b c8		 mov	 ecx, eax
$LL24@Init:
  000a7	85 f6		 test	 esi, esi
  000a9	76 09		 jbe	 SHORT $LN22@Init
  000ab	8a 17		 mov	 dl, BYTE PTR [edi]
  000ad	88 11		 mov	 BYTE PTR [ecx], dl
  000af	4e		 dec	 esi
  000b0	41		 inc	 ecx
  000b1	47		 inc	 edi
  000b2	eb f3		 jmp	 SHORT $LL24@Init
$LN22@Init:
  000b4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000b7	e8 00 00 00 00	 call	 __Getcvt
  000bc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000c1	8b c7		 mov	 eax, edi
  000c3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL60@Init:
  000c6	8a 08		 mov	 cl, BYTE PTR [eax]
  000c8	40		 inc	 eax
  000c9	84 c9		 test	 cl, cl
  000cb	75 f9		 jne	 SHORT $LL60@Init
  000cd	2b c2		 sub	 eax, edx
  000cf	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000d8	83 c4 04	 add	 esp, 4
  000db	8b c8		 mov	 ecx, eax
  000dd	8d 49 00	 npad	 3
$LL33@Init:
  000e0	85 f6		 test	 esi, esi
  000e2	76 09		 jbe	 SHORT $LN31@Init
  000e4	8a 17		 mov	 dl, BYTE PTR [edi]
  000e6	88 11		 mov	 BYTE PTR [ecx], dl
  000e8	4e		 dec	 esi
  000e9	41		 inc	 ecx
  000ea	47		 inc	 edi
  000eb	eb f3		 jmp	 SHORT $LL33@Init
$LN31@Init:
  000ed	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000f7	e8 00 00 00 00	 call	 __Getcvt
  000fc	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$[ebp]
  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8a 08		 mov	 cl, BYTE PTR [eax]
  00103	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00106	e8 00 00 00 00	 call	 __Getcvt

; 154  : 
; 155  : 		if (_Isdef)

  0010b	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  0010f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00112	8a 02		 mov	 al, BYTE PTR [edx]
  00114	88 43 0d	 mov	 BYTE PTR [ebx+13], al
  00117	74 2d		 je	 SHORT $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  00119	e8 00 00 00 00	 call	 __Getcvt
  0011e	8d 4d e4	 lea	 ecx, DWORD PTR $T160887[ebp]
  00121	51		 push	 ecx
  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00129	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00134	e8 00 00 00 00	 call	 __Getcvt
  00139	c6 43 0c 2e	 mov	 BYTE PTR [ebx+12], 46	; 0000002eH

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  0013d	e8 00 00 00 00	 call	 __Getcvt
  00142	c6 43 0d 2c	 mov	 BYTE PTR [ebx+13], 44	; 0000002cH
$LN1@Init:

; 160  : 			}
; 161  : 		}

  00146	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00149	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00150	59		 pop	 ecx
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  0015a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 148  : 		_RERAISE;

  00162	6a 00		 push	 0
  00164	6a 00		 push	 0
  00166	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@Init:
  0016b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	??_C@_0CE@KHEALHKF@CipherShed?3?3Elevator?3?3CallDriver@ ; `string'
PUBLIC	??_C@_0CE@LPFPIKJ@CipherShed?3?3Elevator?3?3CallDriver@ ; `string'
PUBLIC	?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z	; CipherShed::Elevator::CallDriver
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0CE@KHEALHKF@CipherShed?3?3Elevator?3?3CallDriver@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlcomcli.h
CONST	SEGMENT
??_C@_0CE@KHEALHKF@CipherShed?3?3Elevator?3?3CallDriver@ DB 'CipherShed::'
	DB	'Elevator::CallDriver:59', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPFPIKJ@CipherShed?3?3Elevator?3?3CallDriver@
CONST	SEGMENT
??_C@_0CE@LPFPIKJ@CipherShed?3?3Elevator?3?3CallDriver@ DB 'CipherShed::E'
	DB	'levator::CallDriver:55', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z$1
__ehfuncinfo$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z
_TEXT	SEGMENT
_outputBstr$ = -28					; size = 4
_inputBstr$ = -24					; size = 4
$T161012 = -20						; size = 8
$T161011 = -20						; size = 8
$T161010 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_ioctl$ = 8						; size = 4
_input$ = 12						; size = 4
_inputSize$ = 16					; size = 4
_output$ = 20						; size = 4
_outputSize$ = 24					; size = 4
?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z PROC	; CipherShed::Elevator::CallDriver, COMDAT

; 50   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 10	 sub	 esp, 16			; 00000010H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 24	 lea	 eax, DWORD PTR __$EHRec$[esp+48]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 			Elevate();

  00027	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 52   : 
; 53   : 			CComBSTR inputBstr;

  0002c	33 db		 xor	 ebx, ebx
  0002e	33 ed		 xor	 ebp, ebp
  00030	89 5c 24 18	 mov	 DWORD PTR _inputBstr$[esp+48], ebx

; 54   : 			if (input && inputBstr.AppendBytes ((const char *) input, inputSize) != S_OK)

  00034	8b 44 24 38	 mov	 eax, DWORD PTR _input$[esp+44]
  00038	89 6c 24 2c	 mov	 DWORD PTR __$EHRec$[esp+56], ebp
  0003c	3b c5		 cmp	 eax, ebp
  0003e	74 36		 je	 SHORT $LN4@CallDriver
  00040	8b 4c 24 3c	 mov	 ecx, DWORD PTR _inputSize$[esp+44]
  00044	51		 push	 ecx
  00045	50		 push	 eax
  00046	8d 4c 24 20	 lea	 ecx, DWORD PTR _inputBstr$[esp+56]
  0004a	e8 00 00 00 00	 call	 ?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z ; ATL::CComBSTR::AppendBytes
  0004f	85 c0		 test	 eax, eax
  00051	74 1f		 je	 SHORT $LN35@CallDriver

; 55   : 				throw ParameterIncorrect (SRC_POS);

  00053	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00058	8d 54 24 20	 lea	 edx, DWORD PTR $T161010[esp+52]
  0005c	52		 push	 edx
  0005d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T161010[esp+56], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00065	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T161010[esp+60], OFFSET ??_C@_0CE@LPFPIKJ@CipherShed?3?3Elevator?3?3CallDriver@
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN35@CallDriver:
  00072	8b 5c 24 18	 mov	 ebx, DWORD PTR _inputBstr$[esp+48]
$LN4@CallDriver:

; 56   : 
; 57   : 			CComBSTR outputBstr;

  00076	89 6c 24 14	 mov	 DWORD PTR _outputBstr$[esp+48], ebp

; 58   : 			if (output && outputBstr.AppendBytes ((const char *) output, outputSize) != S_OK)

  0007a	8b 74 24 40	 mov	 esi, DWORD PTR _output$[esp+44]
  0007e	c6 44 24 2c 01	 mov	 BYTE PTR __$EHRec$[esp+56], 1
  00083	3b f5		 cmp	 esi, ebp
  00085	74 32		 je	 SHORT $LN3@CallDriver
  00087	8b 44 24 44	 mov	 eax, DWORD PTR _outputSize$[esp+44]
  0008b	50		 push	 eax
  0008c	56		 push	 esi
  0008d	8d 4c 24 1c	 lea	 ecx, DWORD PTR _outputBstr$[esp+56]
  00091	e8 00 00 00 00	 call	 ?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z ; ATL::CComBSTR::AppendBytes
  00096	85 c0		 test	 eax, eax
  00098	74 1f		 je	 SHORT $LN3@CallDriver

; 59   : 				throw ParameterIncorrect (SRC_POS);

  0009a	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0009f	8d 4c 24 20	 lea	 ecx, DWORD PTR $T161011[esp+52]
  000a3	51		 push	 ecx
  000a4	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T161011[esp+56], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  000ac	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T161011[esp+60], OFFSET ??_C@_0CE@KHEALHKF@CipherShed?3?3Elevator?3?3CallDriver@
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@CallDriver:

; 60   : 
; 61   : 			DWORD result = ElevatedComInstance->CallDriver (ioctl, inputBstr, &outputBstr);

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  000be	8b 10		 mov	 edx, DWORD PTR [eax]
  000c0	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000c3	8d 4c 24 14	 lea	 ecx, DWORD PTR _outputBstr$[esp+48]
  000c7	51		 push	 ecx
  000c8	8b 4c 24 38	 mov	 ecx, DWORD PTR _ioctl$[esp+48]
  000cc	53		 push	 ebx
  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	ff d2		 call	 edx

; 62   : 
; 63   : 			if (output)

  000d1	3b f5		 cmp	 esi, ebp
  000d3	8b 6c 24 14	 mov	 ebp, DWORD PTR _outputBstr$[esp+48]
  000d7	8b f8		 mov	 edi, eax
  000d9	74 0f		 je	 SHORT $LN2@CallDriver

; 64   : 				memcpy (output, *(void **) &outputBstr, outputSize);

  000db	8b 44 24 44	 mov	 eax, DWORD PTR _outputSize$[esp+44]
  000df	50		 push	 eax
  000e0	55		 push	 ebp
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _memcpy
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@CallDriver:

; 65   : 
; 66   : 			if (result != ERROR_SUCCESS)

  000ea	85 ff		 test	 edi, edi
  000ec	74 28		 je	 SHORT $LN1@CallDriver

; 67   : 			{
; 68   : 				SetLastError (result);

  000ee	57		 push	 edi
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 69   : 				throw SystemException();

  000f5	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T161012[esp+48], OFFSET ??_7SystemException@CipherShed@@6B@
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00103	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00108	8d 4c 24 20	 lea	 ecx, DWORD PTR $T161012[esp+52]
  0010c	51		 push	 ecx
  0010d	89 44 24 28	 mov	 DWORD PTR $T161012[esp+60], eax
  00111	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CallDriver:

; 70   : 			}
; 71   : 		}

  00116	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SysFreeString@4
  0011c	55		 push	 ebp
  0011d	ff d6		 call	 esi
  0011f	53		 push	 ebx
  00120	ff d6		 call	 esi
  00122	8b 4c 24 24	 mov	 ecx, DWORD PTR __$EHRec$[esp+48]
  00126	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012d	59		 pop	 ecx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5d		 pop	 ebp
  00131	5b		 pop	 ebx
  00132	83 c4 1c	 add	 esp, 28			; 0000001cH
  00135	c3		 ret	 0
$LN37@CallDriver:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _inputBstr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__unwindfunclet$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _outputBstr$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__ehhandler$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  00017	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z ENDP	; CipherShed::Elevator::CallDriver
PUBLIC	?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CipherShed::Elevator::CopyFileA
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__unwindtable$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T161072 = -24						; size = 4
$T161074 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_sourceFile$ = 8					; size = 4
$T161073 = 12						; size = 4
_destinationFile$ = 12					; size = 4
?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CipherShed::Elevator::CopyFileA, COMDAT

; 74   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 75   : 			Elevate();

  00025	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 76   : 
; 77   : 			DWORD result = ElevatedComInstance->CopyFile (CComBSTR (sourceFile.c_str()), CComBSTR (destinationFile.c_str()));

  0002a	8b 44 24 2c	 mov	 eax, DWORD PTR _destinationFile$[esp+32]
  0002e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00033	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00036	72 05		 jb	 SHORT $LN10@CopyFileA
  00038	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003b	eb 03		 jmp	 SHORT $LN11@CopyFileA
$LN10@CopyFileA:
  0003d	83 c0 04	 add	 eax, 4
$LN11@CopyFileA:
  00040	50		 push	 eax
  00041	8d 4c 24 10	 lea	 ecx, DWORD PTR $T161072[esp+40]
  00045	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  0004a	8b f0		 mov	 esi, eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR _sourceFile$[esp+32]
  00050	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 0
  00058	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0005b	72 05		 jb	 SHORT $LN18@CopyFileA
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	eb 03		 jmp	 SHORT $LN19@CopyFileA
$LN18@CopyFileA:
  00062	83 c0 04	 add	 eax, 4
$LN19@CopyFileA:
  00065	50		 push	 eax
  00066	8d 4c 24 30	 lea	 ecx, DWORD PTR $T161073[esp+36]
  0006a	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00079	8b 32		 mov	 esi, DWORD PTR [edx]
  0007b	51		 push	 ecx
  0007c	50		 push	 eax
  0007d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00080	52		 push	 edx
  00081	c6 44 24 2c 01	 mov	 BYTE PTR __$EHRec$[esp+56], 1
  00086	ff d0		 call	 eax
  00088	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T161073[esp+32]
  0008c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SysFreeString@4
  00092	51		 push	 ecx
  00093	8b f0		 mov	 esi, eax
  00095	ff d7		 call	 edi
  00097	8b 54 24 0c	 mov	 edx, DWORD PTR $T161072[esp+36]
  0009b	52		 push	 edx
  0009c	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  000a4	ff d7		 call	 edi

; 78   : 
; 79   : 			if (result != ERROR_SUCCESS)

  000a6	85 f6		 test	 esi, esi
  000a8	74 28		 je	 SHORT $LN1@CopyFileA

; 80   : 			{
; 81   : 				SetLastError (result);

  000aa	56		 push	 esi
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 82   : 				throw SystemException();

  000b1	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T161074[esp+36], OFFSET ??_7SystemException@CipherShed@@6B@
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000bf	89 44 24 14	 mov	 DWORD PTR $T161074[esp+40], eax
  000c3	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000c8	8d 44 24 14	 lea	 eax, DWORD PTR $T161074[esp+40]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CopyFileA:

; 83   : 			}
; 84   : 		}

  000d2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	c3		 ret	 0
$LN31@CopyFileA:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T161072[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__unwindfunclet$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR $T161073[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__ehhandler$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00017	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CipherShed::Elevator::CopyFileA
PUBLIC	?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::Elevator::DeleteFileA
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__unwindtable$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T161139 = -20						; size = 8
__$EHRec$ = -12						; size = 12
$T161138 = 8						; size = 4
_file$ = 8						; size = 4
?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::Elevator::DeleteFileA, COMDAT

; 87   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 88   : 			Elevate();

  00024	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 89   : 
; 90   : 			DWORD result = ElevatedComInstance->DeleteFile (CComBSTR (file.c_str()));

  00029	8b 44 24 20	 mov	 eax, DWORD PTR _file$[esp+24]
  0002d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00031	72 05		 jb	 SHORT $LN9@DeleteFile
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	eb 03		 jmp	 SHORT $LN10@DeleteFile
$LN9@DeleteFile:
  00038	83 c0 04	 add	 eax, 4
$LN10@DeleteFile:
  0003b	50		 push	 eax
  0003c	8d 4c 24 24	 lea	 ecx, DWORD PTR $T161138[esp+28]
  00040	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	50		 push	 eax
  00050	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00053	51		 push	 ecx
  00054	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 0
  0005c	ff d0		 call	 eax
  0005e	8b 4c 24 20	 mov	 ecx, DWORD PTR $T161138[esp+24]
  00062	51		 push	 ecx
  00063	8b f0		 mov	 esi, eax
  00065	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 91   : 
; 92   : 			if (result != ERROR_SUCCESS)

  00073	85 f6		 test	 esi, esi
  00075	74 28		 je	 SHORT $LN1@DeleteFile

; 93   : 			{
; 94   : 				SetLastError (result);

  00077	56		 push	 esi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 95   : 				throw SystemException();

  0007e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T161139[esp+28], OFFSET ??_7SystemException@CipherShed@@6B@
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008c	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00091	8d 54 24 0c	 lea	 edx, DWORD PTR $T161139[esp+32]
  00095	52		 push	 edx
  00096	89 44 24 14	 mov	 DWORD PTR $T161139[esp+40], eax
  0009a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@DeleteFile:

; 96   : 			}
; 97   : 		}

  0009f	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	83 c4 14	 add	 esp, 20			; 00000014H
  000af	c3		 ret	 0
$LN20@DeleteFile:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR $T161138[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__ehhandler$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::Elevator::DeleteFileA
PUBLIC	??_C@_0CI@HEMDICKE@CipherShed?3?3Elevator?3?3ReadWriteF@ ; `string'
PUBLIC	?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z ; CipherShed::Elevator::ReadWriteFile
;	COMDAT ??_C@_0CI@HEMDICKE@CipherShed?3?3Elevator?3?3ReadWriteF@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlcomcli.h
CONST	SEGMENT
??_C@_0CI@HEMDICKE@CipherShed?3?3Elevator?3?3ReadWriteF@ DB 'CipherShed::'
	DB	'Elevator::ReadWriteFile:105', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z$1
__ehfuncinfo$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z
_TEXT	SEGMENT
_bufferBstr$ = -24					; size = 4
$T161182 = -20						; size = 8
$T161181 = -20						; size = 4
$T161180 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_write$ = 8						; size = 4
_device$ = 12						; size = 4
_filePath$ = 16						; size = 4
_buffer$ = 20						; size = 4
_offset$ = 24						; size = 8
_size$ = 32						; size = 4
_sizeDone$ = 36						; size = 4
?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z PROC ; CipherShed::Elevator::ReadWriteFile, COMDAT

; 100  : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 20	 lea	 eax, DWORD PTR __$EHRec$[esp+44]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 101  : 			Elevate();

  00027	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 102  : 
; 103  : 			CComBSTR bufferBstr;

  0002c	33 c0		 xor	 eax, eax
  0002e	89 44 24 14	 mov	 DWORD PTR _bufferBstr$[esp+44], eax

; 104  : 			if (bufferBstr.AppendBytes ((const char *) buffer, size) != S_OK)

  00032	8b 6c 24 48	 mov	 ebp, DWORD PTR _size$[esp+40]
  00036	89 44 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], eax
  0003a	8b 44 24 3c	 mov	 eax, DWORD PTR _buffer$[esp+40]
  0003e	55		 push	 ebp
  0003f	50		 push	 eax
  00040	8d 4c 24 1c	 lea	 ecx, DWORD PTR _bufferBstr$[esp+52]
  00044	e8 00 00 00 00	 call	 ?AppendBytes@CComBSTR@ATL@@QAEJPBDH@Z ; ATL::CComBSTR::AppendBytes
  00049	85 c0		 test	 eax, eax
  0004b	74 1f		 je	 SHORT $LN3@ReadWriteF

; 105  : 				throw ParameterIncorrect (SRC_POS);

  0004d	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00052	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T161180[esp+48]
  00056	51		 push	 ecx
  00057	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T161180[esp+52], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0005f	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T161180[esp+56], OFFSET ??_C@_0CI@HEMDICKE@CipherShed?3?3Elevator?3?3ReadWriteF@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ReadWriteF:

; 106  : 			DWORD result = ElevatedComInstance->ReadWriteFile (write, device, CComBSTR (filePath.c_str()), &bufferBstr, offset, size, sizeDone);

  0006c	8b 44 24 38	 mov	 eax, DWORD PTR _filePath$[esp+40]
  00070	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00074	72 05		 jb	 SHORT $LN20@ReadWriteF
  00076	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00079	eb 03		 jmp	 SHORT $LN21@ReadWriteF
$LN20@ReadWriteF:
  0007b	83 c0 04	 add	 eax, 4
$LN21@ReadWriteF:
  0007e	50		 push	 eax
  0007f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T161181[esp+48]
  00083	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00088	8b 74 24 4c	 mov	 esi, DWORD PTR _sizeDone$[esp+40]
  0008c	8b 00		 mov	 eax, DWORD PTR [eax]
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00094	8b 7c 24 30	 mov	 edi, DWORD PTR _write$[esp+40]
  00098	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009a	56		 push	 esi
  0009b	8b 74 24 48	 mov	 esi, DWORD PTR _offset$[esp+48]
  0009f	55		 push	 ebp
  000a0	56		 push	 esi
  000a1	8b 74 24 4c	 mov	 esi, DWORD PTR _offset$[esp+52]
  000a5	56		 push	 esi
  000a6	8d 74 24 24	 lea	 esi, DWORD PTR _bufferBstr$[esp+60]
  000aa	56		 push	 esi
  000ab	50		 push	 eax
  000ac	8b 44 24 4c	 mov	 eax, DWORD PTR _device$[esp+64]
  000b0	50		 push	 eax
  000b1	57		 push	 edi
  000b2	51		 push	 ecx
  000b3	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  000b6	c6 44 24 4c 01	 mov	 BYTE PTR __$EHRec$[esp+88], 1
  000bb	ff d1		 call	 ecx
  000bd	8b 54 24 18	 mov	 edx, DWORD PTR $T161181[esp+44]
  000c1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SysFreeString@4
  000c7	52		 push	 edx
  000c8	8b f0		 mov	 esi, eax
  000ca	c6 44 24 2c 00	 mov	 BYTE PTR __$EHRec$[esp+56], 0
  000cf	ff d3		 call	 ebx

; 107  : 
; 108  : 			if (result != ERROR_SUCCESS)

  000d1	85 f6		 test	 esi, esi
  000d3	74 28		 je	 SHORT $LN2@ReadWriteF

; 109  : 			{
; 110  : 				SetLastError (result);

  000d5	56		 push	 esi
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 111  : 				throw SystemException();

  000dc	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T161182[esp+44], OFFSET ??_7SystemException@CipherShed@@6B@
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000ea	89 44 24 1c	 mov	 DWORD PTR $T161182[esp+48], eax
  000ee	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000f3	8d 44 24 1c	 lea	 eax, DWORD PTR $T161182[esp+48]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ReadWriteF:

; 112  : 			}
; 113  : 
; 114  : 			if (!write)

  000fd	8b 74 24 14	 mov	 esi, DWORD PTR _bufferBstr$[esp+44]
  00101	85 ff		 test	 edi, edi
  00103	75 0f		 jne	 SHORT $LN1@ReadWriteF

; 115  : 				memcpy (buffer, (BYTE *) bufferBstr.m_str, size);

  00105	8b 4c 24 3c	 mov	 ecx, DWORD PTR _buffer$[esp+40]
  00109	55		 push	 ebp
  0010a	56		 push	 esi
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 _memcpy
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ReadWriteF:

; 116  : 		}

  00114	56		 push	 esi
  00115	ff d3		 call	 ebx
  00117	8b 4c 24 20	 mov	 ecx, DWORD PTR __$EHRec$[esp+44]
  0011b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00122	59		 pop	 ecx
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5d		 pop	 ebp
  00126	5b		 pop	 ebx
  00127	83 c4 18	 add	 esp, 24			; 00000018H
  0012a	c3		 ret	 0
$LN33@ReadWriteF:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _bufferBstr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__unwindfunclet$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR $T161181[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__ehhandler$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 e4	 lea	 eax, DWORD PTR [edx-28]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z ENDP ; CipherShed::Elevator::ReadWriteFile
PUBLIC	?IsPagingFileActive@Elevator@CipherShed@@SAHH@Z	; CipherShed::Elevator::IsPagingFileActive
; Function compile flags: /Ogtpy
;	COMDAT ?IsPagingFileActive@Elevator@CipherShed@@SAHH@Z
_TEXT	SEGMENT
_checkNonWindowsPartitionsOnly$ = 8			; size = 4
?IsPagingFileActive@Elevator@CipherShed@@SAHH@Z PROC	; CipherShed::Elevator::IsPagingFileActive, COMDAT

; 120  : 			Elevate();

  00000	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 121  : 
; 122  : 			return ElevatedComInstance->IsPagingFileActive (checkNonWindowsPartitionsOnly);

  00005	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0000a	8b 54 24 04	 mov	 edx, DWORD PTR _checkNonWindowsPartitionsOnly$[esp-4]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00015	ff d0		 call	 eax

; 123  : 		}

  00017	c3		 ret	 0
?IsPagingFileActive@Elevator@CipherShed@@SAHH@Z ENDP	; CipherShed::Elevator::IsPagingFileActive
_TEXT	ENDS
PUBLIC	?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z ; CipherShed::Elevator::WriteLocalMachineRegistryDwordValue
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__unwindtable$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z$1
__ehfuncinfo$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z
_TEXT	SEGMENT
$T161244 = -28						; size = 4
$T161243 = -24						; size = 4
$T161245 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_keyPath$ = 8						; size = 4
_valueName$ = 12					; size = 4
_value$ = 16						; size = 4
?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z PROC ; CipherShed::Elevator::WriteLocalMachineRegistryDwordValue, COMDAT

; 126  : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 10	 sub	 esp, 16			; 00000010H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 1c	 lea	 eax, DWORD PTR __$EHRec$[esp+40]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 127  : 			Elevate();

  00025	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 128  : 
; 129  : 			DWORD result = ElevatedComInstance->WriteLocalMachineRegistryDwordValue (CComBSTR (keyPath), CComBSTR (valueName), value);

  0002a	8b 44 24 30	 mov	 eax, DWORD PTR _valueName$[esp+36]
  0002e	50		 push	 eax
  0002f	8d 4c 24 14	 lea	 ecx, DWORD PTR $T161243[esp+44]
  00033	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00038	8b f0		 mov	 esi, eax
  0003a	8b 4c 24 2c	 mov	 ecx, DWORD PTR _keyPath$[esp+36]
  0003e	51		 push	 ecx
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR $T161244[esp+44]
  00043	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+52], 0
  0004b	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00050	8b 7c 24 34	 mov	 edi, DWORD PTR _value$[esp+36]
  00054	8b 36		 mov	 esi, DWORD PTR [esi]
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0005e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00060	57		 push	 edi
  00061	56		 push	 esi
  00062	50		 push	 eax
  00063	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00066	51		 push	 ecx
  00067	c6 44 24 34 01	 mov	 BYTE PTR __$EHRec$[esp+64], 1
  0006c	ff d0		 call	 eax
  0006e	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T161244[esp+40]
  00072	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SysFreeString@4
  00078	51		 push	 ecx
  00079	8b f0		 mov	 esi, eax
  0007b	ff d7		 call	 edi
  0007d	8b 54 24 10	 mov	 edx, DWORD PTR $T161243[esp+40]
  00081	52		 push	 edx
  00082	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+52], -1
  0008a	ff d7		 call	 edi

; 130  : 		
; 131  : 			if (result != ERROR_SUCCESS)

  0008c	85 f6		 test	 esi, esi
  0008e	74 28		 je	 SHORT $LN1@WriteLocal

; 132  : 			{
; 133  : 				SetLastError (result);

  00090	56		 push	 esi
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 134  : 				throw SystemException();

  00097	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T161245[esp+40], OFFSET ??_7SystemException@CipherShed@@6B@
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000a5	89 44 24 18	 mov	 DWORD PTR $T161245[esp+44], eax
  000a9	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000ae	8d 44 24 18	 lea	 eax, DWORD PTR $T161245[esp+44]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@WriteLocal:

; 135  : 			}
; 136  : 		}

  000b8	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$EHRec$[esp+40]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c9	c3		 ret	 0
$LN19@WriteLocal:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T161243[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__unwindfunclet$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T161244[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
__ehhandler$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z ENDP ; CipherShed::Elevator::WriteLocalMachineRegistryDwordValue
PUBLIC	?RegisterFilterDriver@Elevator@CipherShed@@SAX_NW4FilterType@BootEncryption@2@@Z ; CipherShed::Elevator::RegisterFilterDriver
; Function compile flags: /Ogtpy
;	COMDAT ?RegisterFilterDriver@Elevator@CipherShed@@SAX_NW4FilterType@BootEncryption@2@@Z
_TEXT	SEGMENT
$T161281 = -8						; size = 8
_registerDriver$ = 8					; size = 1
_filterType$ = 12					; size = 4
?RegisterFilterDriver@Elevator@CipherShed@@SAX_NW4FilterType@BootEncryption@2@@Z PROC ; CipherShed::Elevator::RegisterFilterDriver, COMDAT

; 139  : 		{

  00000	83 ec 08	 sub	 esp, 8

; 140  : 			Elevate();

  00003	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 141  : 
; 142  : 			DWORD result = ElevatedComInstance->RegisterFilterDriver (registerDriver ? TRUE : FALSE, filterType);

  00008	8b 54 24 10	 mov	 edx, DWORD PTR _filterType$[esp+4]
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	52		 push	 edx
  00014	33 d2		 xor	 edx, edx
  00016	38 54 24 10	 cmp	 BYTE PTR _registerDriver$[esp+8], dl
  0001a	0f 95 c2	 setne	 dl
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00022	ff d0		 call	 eax

; 143  : 			if (result != ERROR_SUCCESS)

  00024	85 c0		 test	 eax, eax
  00026	74 27		 je	 SHORT $LN1@RegisterFi

; 144  : 			{
; 145  : 				SetLastError (result);

  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 146  : 				throw SystemException();

  0002f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161281[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T161281[esp+12]
  00045	51		 push	 ecx
  00046	89 44 24 0c	 mov	 DWORD PTR $T161281[esp+20], eax
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@RegisterFi:

; 147  : 			}
; 148  : 		}

  0004f	83 c4 08	 add	 esp, 8
  00052	c3		 ret	 0
$LN8@RegisterFi:
?RegisterFilterDriver@Elevator@CipherShed@@SAX_NW4FilterType@BootEncryption@2@@Z ENDP ; CipherShed::Elevator::RegisterFilterDriver
_TEXT	ENDS
PUBLIC	?RegisterSystemFavoritesService@Elevator@CipherShed@@SAXH@Z ; CipherShed::Elevator::RegisterSystemFavoritesService
; Function compile flags: /Ogtpy
;	COMDAT ?RegisterSystemFavoritesService@Elevator@CipherShed@@SAXH@Z
_TEXT	SEGMENT
$T161293 = -8						; size = 8
_registerService$ = 8					; size = 4
?RegisterSystemFavoritesService@Elevator@CipherShed@@SAXH@Z PROC ; CipherShed::Elevator::RegisterSystemFavoritesService, COMDAT

; 151  : 		{

  00000	83 ec 08	 sub	 esp, 8

; 152  : 			Elevate();

  00003	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 153  : 
; 154  : 			DWORD result = ElevatedComInstance->RegisterSystemFavoritesService (registerService);

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0000d	8b 54 24 0c	 mov	 edx, DWORD PTR _registerService$[esp+4]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00018	ff d0		 call	 eax

; 155  : 			if (result != ERROR_SUCCESS)

  0001a	85 c0		 test	 eax, eax
  0001c	74 27		 je	 SHORT $LN1@RegisterSy

; 156  : 			{
; 157  : 				SetLastError (result);

  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 158  : 				throw SystemException();

  00025	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161293[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00032	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00037	8d 4c 24 04	 lea	 ecx, DWORD PTR $T161293[esp+12]
  0003b	51		 push	 ecx
  0003c	89 44 24 0c	 mov	 DWORD PTR $T161293[esp+20], eax
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@RegisterSy:

; 159  : 			}
; 160  : 		}

  00045	83 c4 08	 add	 esp, 8
  00048	c3		 ret	 0
$LN8@RegisterSy:
?RegisterSystemFavoritesService@Elevator@CipherShed@@SAXH@Z ENDP ; CipherShed::Elevator::RegisterSystemFavoritesService
_TEXT	ENDS
PUBLIC	?SetDriverServiceStartType@Elevator@CipherShed@@SAXK@Z ; CipherShed::Elevator::SetDriverServiceStartType
; Function compile flags: /Ogtpy
;	COMDAT ?SetDriverServiceStartType@Elevator@CipherShed@@SAXK@Z
_TEXT	SEGMENT
$T161305 = -8						; size = 8
_startType$ = 8						; size = 4
?SetDriverServiceStartType@Elevator@CipherShed@@SAXK@Z PROC ; CipherShed::Elevator::SetDriverServiceStartType, COMDAT

; 173  : 		{

  00000	83 ec 08	 sub	 esp, 8

; 174  : 			Elevate();

  00003	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate

; 175  : 
; 176  : 			DWORD result = ElevatedComInstance->SetDriverServiceStartType (startType);

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0000d	8b 54 24 0c	 mov	 edx, DWORD PTR _startType$[esp+4]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00018	ff d0		 call	 eax

; 177  : 			if (result != ERROR_SUCCESS)

  0001a	85 c0		 test	 eax, eax
  0001c	74 27		 je	 SHORT $LN1@SetDriverS

; 178  : 			{
; 179  : 				SetLastError (result);

  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 180  : 				throw SystemException();

  00025	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161305[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00032	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00037	8d 4c 24 04	 lea	 ecx, DWORD PTR $T161305[esp+12]
  0003b	51		 push	 ecx
  0003c	89 44 24 0c	 mov	 DWORD PTR $T161305[esp+20], eax
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@SetDriverS:

; 181  : 			}
; 182  : 		}

  00045	83 c4 08	 add	 esp, 8
  00048	c3		 ret	 0
$LN8@SetDriverS:
?SetDriverServiceStartType@Elevator@CipherShed@@SAXK@Z ENDP ; CipherShed::Elevator::SetDriverServiceStartType
_TEXT	ENDS
PUBLIC	?Read@File@CipherShed@@QAEKPAEK@Z		; CipherShed::File::Read
EXTRN	__imp__ReadFile@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Read@File@CipherShed@@QAEKPAEK@Z
_TEXT	SEGMENT
$T161317 = -8						; size = 8
_bytesRead$ = 8						; size = 4
_buffer$ = 8						; size = 4
_bytesRead$148056 = 12					; size = 4
_size$ = 12						; size = 4
?Read@File@CipherShed@@QAEKPAEK@Z PROC			; CipherShed::File::Read, COMDAT
; _this$ = ecx

; 271  : 	{

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 272  : 		DWORD bytesRead;
; 273  : 
; 274  : 		if (Elevated)

  00006	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00009	74 3c		 je	 SHORT $LN4@Read

; 275  : 		{
; 276  : 			DWORD bytesRead;
; 277  : 
; 278  : 			Elevator::ReadWriteFile (false, IsDevice, Path, buffer, FilePointerPosition, size, &bytesRead);

  0000b	8b 4c 24 14	 mov	 ecx, DWORD PTR _size$[esp+8]
  0000f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00012	8d 44 24 14	 lea	 eax, DWORD PTR _bytesRead$148056[esp+8]
  00016	50		 push	 eax
  00017	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001a	51		 push	 ecx
  0001b	8b 4c 24 18	 mov	 ecx, DWORD PTR _buffer$[esp+16]
  0001f	52		 push	 edx
  00020	50		 push	 eax
  00021	0f b6 46 14	 movzx	 eax, BYTE PTR [esi+20]
  00025	51		 push	 ecx
  00026	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  00029	52		 push	 edx
  0002a	50		 push	 eax
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z ; CipherShed::Elevator::ReadWriteFile

; 279  : 			FilePointerPosition += bytesRead;

  00032	8b 44 24 34	 mov	 eax, DWORD PTR _bytesRead$148056[esp+40]
  00036	83 c4 20	 add	 esp, 32			; 00000020H
  00039	01 46 08	 add	 DWORD PTR [esi+8], eax
  0003c	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  00040	5e		 pop	 esi

; 285  : 	}

  00041	83 c4 08	 add	 esp, 8
  00044	c2 08 00	 ret	 8
$LN4@Read:

; 280  : 			return bytesRead;
; 281  : 		}
; 282  : 
; 283  : 		throw_sys_if (!ReadFile (Handle, buffer, size, &bytesRead, NULL));

  00047	8b 54 24 14	 mov	 edx, DWORD PTR _size$[esp+8]
  0004b	8b 44 24 10	 mov	 eax, DWORD PTR _buffer$[esp+8]
  0004f	6a 00		 push	 0
  00051	8d 4c 24 14	 lea	 ecx, DWORD PTR _bytesRead$[esp+12]
  00055	51		 push	 ecx
  00056	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00059	52		 push	 edx
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00062	85 c0		 test	 eax, eax
  00064	75 21		 jne	 SHORT $LN3@Read
  00066	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR $T161317[esp+12], OFFSET ??_7SystemException@CipherShed@@6B@
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00074	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00079	8d 54 24 08	 lea	 edx, DWORD PTR $T161317[esp+16]
  0007d	52		 push	 edx
  0007e	89 44 24 10	 mov	 DWORD PTR $T161317[esp+24], eax
  00082	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Read:

; 284  : 		return bytesRead;

  00087	8b 44 24 10	 mov	 eax, DWORD PTR _bytesRead$[esp+8]
  0008b	5e		 pop	 esi

; 285  : 	}

  0008c	83 c4 08	 add	 esp, 8
  0008f	c2 08 00	 ret	 8
$LN12@Read:
?Read@File@CipherShed@@QAEKPAEK@Z ENDP			; CipherShed::File::Read
_TEXT	ENDS
PUBLIC	?Show@CipherShed@@YAXPAUHWND__@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::Show
EXTRN	__imp__MessageBoxA@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Show@CipherShed@@YAXPAUHWND__@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_str$ = 12						; size = 4
?Show@CipherShed@@YAXPAUHWND__@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::Show, COMDAT

; 336  : 		MessageBox (parent, str.c_str(), NULL, 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _str$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	72 14		 jb	 SHORT $LN7@Show
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	8b 44 24 10	 mov	 eax, DWORD PTR _parent$[esp+8]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 337  : 	}

  0001d	c3		 ret	 0

; 336  : 		MessageBox (parent, str.c_str(), NULL, 0);

$LN7@Show:
  0001e	6a 00		 push	 0
  00020	83 c0 04	 add	 eax, 4
  00023	6a 00		 push	 0
  00025	50		 push	 eax
  00026	8b 44 24 10	 mov	 eax, DWORD PTR _parent$[esp+8]
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 337  : 	}

  00031	c3		 ret	 0
?Show@CipherShed@@YAXPAUHWND__@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::Show
_TEXT	ENDS
PUBLIC	?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
EXTRN	_IsUacSupported:PROC
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__catchsym$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z$2 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z$0
__unwindtable$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z$2
__ehfuncinfo$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z
_TEXT	SEGMENT
$T161345 = -28						; size = 8
_bytesReturned$148170 = -20				; size = 4
__$EHRec$ = -16						; size = 16
_ioctl$ = 8						; size = 4
_input$ = 12						; size = 4
_inputSize$ = 16					; size = 4
_output$ = 20						; size = 4
_outputSize$ = 24					; size = 4
?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z PROC ; CipherShed::BootEncryption::CallDriver, COMDAT
; _this$ = ecx

; 392  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 393  : 		try
; 394  : 		{
; 395  : 			DWORD bytesReturned;
; 396  : 			throw_sys_if (!DeviceIoControl (hDriver, ioctl, input, inputSize, output, outputSize, &bytesReturned, NULL));

  0002b	8b 4d 18	 mov	 ecx, DWORD PTR _outputSize$[ebp]
  0002e	8b 55 14	 mov	 edx, DWORD PTR _output$[ebp]
  00031	6a 00		 push	 0
  00033	8d 45 ec	 lea	 eax, DWORD PTR _bytesReturned$148170[ebp]
  00036	50		 push	 eax
  00037	8b 45 10	 mov	 eax, DWORD PTR _inputSize$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  0003e	52		 push	 edx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _ioctl$[ebp]
  00042	50		 push	 eax
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00048	51		 push	 ecx
  00049	52		 push	 edx
  0004a	50		 push	 eax
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00058	85 c0		 test	 eax, eax
  0005a	75 54		 jne	 SHORT $LN5@CallDriver@2
  0005c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T161345[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00069	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0006e	8d 4d e4	 lea	 ecx, DWORD PTR $T161345[ebp]
  00071	51		 push	 ecx
  00072	89 45 e8	 mov	 DWORD PTR $T161345[ebp+4], eax
  00075	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z$0:

; 397  : 		}
; 398  : 		catch (SystemException &)
; 399  : 		{
; 400  : 			if (GetLastError() == ERROR_ACCESS_DENIED && IsUacSupported())

  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00080	83 f8 05	 cmp	 eax, 5
  00083	75 3f		 jne	 SHORT $LN2@CallDriver@2
  00085	e8 00 00 00 00	 call	 _IsUacSupported
  0008a	85 c0		 test	 eax, eax
  0008c	74 36		 je	 SHORT $LN2@CallDriver@2

; 401  : 				Elevator::CallDriver (ioctl, input, inputSize, output, outputSize);

  0008e	8b 55 18	 mov	 edx, DWORD PTR _outputSize$[ebp]
  00091	8b 45 14	 mov	 eax, DWORD PTR _output$[ebp]
  00094	8b 4d 10	 mov	 ecx, DWORD PTR _inputSize$[ebp]
  00097	52		 push	 edx
  00098	8b 55 0c	 mov	 edx, DWORD PTR _input$[ebp]
  0009b	50		 push	 eax
  0009c	8b 45 08	 mov	 eax, DWORD PTR _ioctl$[ebp]
  0009f	51		 push	 ecx
  000a0	52		 push	 edx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?CallDriver@Elevator@CipherShed@@SAXKPAXK0K@Z ; CipherShed::Elevator::CallDriver
  000a7	83 c4 14	 add	 esp, 20			; 00000014H

; 404  : 		}

  000aa	b8 00 00 00 00	 mov	 eax, $LN5@CallDriver@2
  000af	c3		 ret	 0
$LN5@CallDriver@2:

; 405  : 	}

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 14 00	 ret	 20			; 00000014H
$LN2@CallDriver@2:

; 402  : 			else
; 403  : 				throw;

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN20@CallDriver@2:
  000cd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ENDP ; CipherShed::BootEncryption::CallDriver
PUBLIC	?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ
_TEXT	SEGMENT
_version$ = -4						; size = 2
?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ PROC ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion, COMDAT
; _this$ = ecx

; 722  : 	{

  00000	51		 push	 ecx

; 723  : 		uint16 version;
; 724  : 		CallDriver (TC_IOCTL_GET_BOOT_LOADER_VERSION, NULL, 0, &version, sizeof (version));

  00001	6a 02		 push	 2
  00003	8d 44 24 04	 lea	 eax, DWORD PTR _version$[esp+8]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	68 08 20 22 00	 push	 2236424			; 00222008H
  00011	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 725  : 		return version;

  00016	66 8b 04 24	 mov	 ax, WORD PTR _version$[esp+4]

; 726  : 	}

  0001a	59		 pop	 ecx
  0001b	c3		 ret	 0
?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ ENDP ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion
_TEXT	ENDS
PUBLIC	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
; Function compile flags: /Ogtpy
;	COMDAT ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ PROC ; CipherShed::BootEncryption::GetStatus, COMDAT
; _this$ = ecx

; 756  : 	{

  00000	56		 push	 esi

; 757  : 		/* IMPORTANT: Do NOT add any potentially time-consuming operations to this function. */
; 758  : 
; 759  : 		BootEncryptionStatus status;
; 760  : 		CallDriver (TC_IOCTL_GET_BOOT_ENCRYPTION_STATUS, NULL, 0, &status, sizeof (status));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00005	6a 5e		 push	 94			; 0000005eH
  00007	56		 push	 esi
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	68 48 20 22 00	 push	 2236488			; 00222048H
  00011	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 761  : 		return status;

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 762  : 	}

  00019	c2 04 00	 ret	 4
?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ENDP ; CipherShed::BootEncryption::GetStatus
_TEXT	ENDS
PUBLIC	??_C@_0DE@GIMHLIPE@CipherShed?3?3BootEncryption?3?3GetV@ ; `string'
PUBLIC	?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z ; CipherShed::BootEncryption::GetVolumeProperties
;	COMDAT ??_C@_0DE@GIMHLIPE@CipherShed?3?3BootEncryption?3?3GetV@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DE@GIMHLIPE@CipherShed?3?3BootEncryption?3?3GetV@ DB 'CipherShed::'
	DB	'BootEncryption::GetVolumeProperties:768', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z
_TEXT	SEGMENT
$T161373 = -8						; size = 8
_properties$ = 8					; size = 4
?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z PROC ; CipherShed::BootEncryption::GetVolumeProperties, COMDAT
; _this$ = ecx

; 767  : 		if (properties == NULL)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _properties$[esp-4]
  00004	83 ec 08	 sub	 esp, 8
  00007	85 c0		 test	 eax, eax
  00009	75 1f		 jne	 SHORT $LN1@GetVolumeP

; 768  : 			throw ParameterIncorrect (SRC_POS);

  0000b	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00010	8d 44 24 04	 lea	 eax, DWORD PTR $T161373[esp+12]
  00014	50		 push	 eax
  00015	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T161373[esp+16], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0001d	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T161373[esp+20], OFFSET ??_C@_0DE@GIMHLIPE@CipherShed?3?3BootEncryption?3?3GetV@
  00025	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@GetVolumeP:

; 769  : 
; 770  : 		CallDriver (TC_IOCTL_GET_BOOT_DRIVE_VOLUME_PROPERTIES, NULL, 0, properties, sizeof (*properties));

  0002a	68 54 02 00 00	 push	 596			; 00000254H
  0002f	50		 push	 eax
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	68 58 20 22 00	 push	 2236504			; 00222058H
  00039	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 771  : 	}

  0003e	83 c4 08	 add	 esp, 8
  00041	c2 04 00	 ret	 4
$LN8@GetVolumeP:
?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z ENDP ; CipherShed::BootEncryption::GetVolumeProperties
_TEXT	ENDS
PUBLIC	?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsHiddenSystemRunning
; Function compile flags: /Ogtpy
;	COMDAT ?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
_hiddenSystemStatus$ = -4				; size = 4
?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::IsHiddenSystemRunning, COMDAT
; _this$ = ecx

; 775  : 	{

  00000	51		 push	 ecx

; 776  : 		int hiddenSystemStatus;
; 777  : 		
; 778  : 		CallDriver (TC_IOCTL_IS_HIDDEN_SYSTEM_RUNNING, nullptr, 0, &hiddenSystemStatus, sizeof (hiddenSystemStatus));

  00001	6a 04		 push	 4
  00003	8d 44 24 04	 lea	 eax, DWORD PTR _hiddenSystemStatus$[esp+8]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	68 6c 20 22 00	 push	 2236524			; 0022206cH
  00011	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 779  : 		return hiddenSystemStatus != 0;

  00016	33 c0		 xor	 eax, eax
  00018	39 04 24	 cmp	 DWORD PTR _hiddenSystemStatus$[esp+4], eax
  0001b	0f 95 c0	 setne	 al

; 780  : 	}

  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::IsHiddenSystemRunning
_TEXT	ENDS
PUBLIC	??_C@_0DC@KCLGNKDP@CipherShed?3?3BootEncryption?3?3Star@ ; `string'
PUBLIC	??_C@_0DC@EAIAGJMD@CipherShed?3?3BootEncryption?3?3Star@ ; `string'
PUBLIC	??_C@_0DC@IIFJODML@CipherShed?3?3BootEncryption?3?3Star@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z ; CipherShed::BootEncryption::StartDecoyOSWipe
EXTRN	_RandgetBytes:PROC
EXTRN	_UserEnrichRandomPool:PROC
EXTRN	_Randinit:PROC
EXTRN	_IsHiddenOSRunning:PROC
;	COMDAT ??_C@_0DC@KCLGNKDP@CipherShed?3?3BootEncryption?3?3Star@
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
CONST	SEGMENT
??_C@_0DC@KCLGNKDP@CipherShed?3?3BootEncryption?3?3Star@ DB 'CipherShed::'
	DB	'BootEncryption::StartDecoyOSWipe:1233', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EAIAGJMD@CipherShed?3?3BootEncryption?3?3Star@
CONST	SEGMENT
??_C@_0DC@EAIAGJMD@CipherShed?3?3BootEncryption?3?3Star@ DB 'CipherShed::'
	DB	'BootEncryption::StartDecoyOSWipe:1228', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IIFJODML@CipherShed?3?3BootEncryption?3?3Star@
CONST	SEGMENT
??_C@_0DC@IIFJODML@CipherShed?3?3BootEncryption?3?3Star@ DB 'CipherShed::'
	DB	'BootEncryption::StartDecoyOSWipe:1220', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z
_TEXT	SEGMENT
$T161389 = -288						; size = 8
$T161390 = -280						; size = 8
$T161388 = -272						; size = 8
_request$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_wipeAlgorithm$ = 8					; size = 4
?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z PROC ; CipherShed::BootEncryption::StartDecoyOSWipe, COMDAT
; _this$ = ecx

; 1218 : 	{

  00000	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 1c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+288], eax
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx

; 1219 : 		if (!IsHiddenOSRunning())

  00017	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0001c	85 c0		 test	 eax, eax
  0001e	75 1f		 jne	 SHORT $LN8@StartDecoy

; 1220 : 			throw ParameterIncorrect (SRC_POS);

  00020	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00025	8d 44 24 18	 lea	 eax, DWORD PTR $T161388[esp+296]
  00029	50		 push	 eax
  0002a	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T161388[esp+300], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00032	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T161388[esp+304], OFFSET ??_C@_0DC@IIFJODML@CipherShed?3?3BootEncryption?3?3Star@
  0003a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@StartDecoy:

; 1221 : 
; 1222 : 		WipeDecoySystemRequest request;
; 1223 : 		ZeroMemory (&request, sizeof (request));

  0003f	68 04 01 00 00	 push	 260			; 00000104H
  00044	8d 4c 24 20	 lea	 ecx, DWORD PTR _request$[esp+296]
  00048	6a 00		 push	 0
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _memset

; 1224 : 
; 1225 : 		request.WipeAlgorithm = wipeAlgorithm;

  00050	8b 94 24 34 01
	00 00		 mov	 edx, DWORD PTR _wipeAlgorithm$[esp+300]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	89 54 24 1c	 mov	 DWORD PTR _request$[esp+292], edx

; 1226 : 		
; 1227 : 		if (Randinit() != ERR_SUCCESS)

  0005e	e8 00 00 00 00	 call	 _Randinit
  00063	85 c0		 test	 eax, eax
  00065	74 1f		 je	 SHORT $LN7@StartDecoy

; 1228 : 			throw ParameterIncorrect (SRC_POS);

  00067	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0006c	8d 44 24 08	 lea	 eax, DWORD PTR $T161389[esp+296]
  00070	50		 push	 eax
  00071	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T161389[esp+300], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00079	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T161389[esp+304], OFFSET ??_C@_0DC@EAIAGJMD@CipherShed?3?3BootEncryption?3?3Star@
  00081	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@StartDecoy:

; 1229 : 
; 1230 : 		UserEnrichRandomPool (ParentWindow);

  00086	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _UserEnrichRandomPool

; 1231 : 
; 1232 : 		if (!RandgetBytes (request.WipeKey, sizeof (request.WipeKey), TRUE))

  0008e	6a 01		 push	 1
  00090	8d 54 24 28	 lea	 edx, DWORD PTR _request$[esp+304]
  00094	68 00 01 00 00	 push	 256			; 00000100H
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 _RandgetBytes
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	85 c0		 test	 eax, eax
  000a4	75 1f		 jne	 SHORT $LN6@StartDecoy

; 1233 : 			throw ParameterIncorrect (SRC_POS);

  000a6	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  000ab	8d 44 24 10	 lea	 eax, DWORD PTR $T161390[esp+296]
  000af	50		 push	 eax
  000b0	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T161390[esp+300], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  000b8	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T161390[esp+304], OFFSET ??_C@_0DC@KCLGNKDP@CipherShed?3?3BootEncryption?3?3Star@
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@StartDecoy:

; 1234 : 
; 1235 : 		CallDriver (TC_IOCTL_START_DECOY_SYSTEM_WIPE, &request, sizeof (request), NULL, 0);

  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	68 04 01 00 00	 push	 260			; 00000104H
  000ce	8d 4c 24 28	 lea	 ecx, DWORD PTR _request$[esp+304]
  000d2	51		 push	 ecx
  000d3	68 78 20 22 00	 push	 2236536			; 00222078H
  000d8	8b ce		 mov	 ecx, esi
  000da	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1236 : 
; 1237 : 		burn (&request, sizeof (request));

  000df	8d 54 24 1c	 lea	 edx, DWORD PTR _request$[esp+292]
  000e3	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  000e8	8b f1		 mov	 esi, ecx
  000ea	8b c2		 mov	 eax, edx
  000ec	8d 64 24 00	 npad	 4
$LL24@StartDecoy:
  000f0	c6 00 00	 mov	 BYTE PTR [eax], 0
  000f3	40		 inc	 eax
  000f4	83 ee 01	 sub	 esi, 1
  000f7	75 f7		 jne	 SHORT $LL24@StartDecoy
  000f9	8d a4 24 00 00
	00 00		 npad	 7
$LL2@StartDecoy:
  00100	49		 dec	 ecx
  00101	c6 02 00	 mov	 BYTE PTR [edx], 0
  00104	42		 inc	 edx
  00105	85 c9		 test	 ecx, ecx
  00107	75 f7		 jne	 SHORT $LL2@StartDecoy

; 1238 : 	}

  00109	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+292]
  00110	5e		 pop	 esi
  00111	33 cc		 xor	 ecx, esp
  00113	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00118	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  0011e	c2 04 00	 ret	 4
$LN36@StartDecoy:
?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z ENDP ; CipherShed::BootEncryption::StartDecoyOSWipe
_TEXT	ENDS
PUBLIC	?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortDecoyOSWipe
; Function compile flags: /Ogtpy
;	COMDAT ?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::AbortDecoyOSWipe, COMDAT
; _this$ = ecx

; 1243 : 		CallDriver (TC_IOCTL_ABORT_DECOY_SYSTEM_WIPE);

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	68 7c 20 22 00	 push	 2236540			; 0022207cH
  0000d	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1244 : 	}

  00012	c3		 ret	 0
?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::AbortDecoyOSWipe
_TEXT	ENDS
PUBLIC	?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
; Function compile flags: /Ogtpy
;	COMDAT ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ PROC ; CipherShed::BootEncryption::GetDecoyOSWipeStatus, COMDAT
; _this$ = ecx

; 1248 : 	{

  00000	56		 push	 esi

; 1249 : 		DecoySystemWipeStatus status;
; 1250 : 		CallDriver (TC_IOCTL_GET_DECOY_SYSTEM_WIPE_STATUS, NULL, 0, &status, sizeof (status));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00005	6a 10		 push	 16			; 00000010H
  00007	56		 push	 esi
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	68 80 20 22 00	 push	 2236544			; 00222080H
  00011	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1251 : 		return status;

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 1252 : 	}

  00019	c2 04 00	 ret	 4
?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ENDP ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
_TEXT	ENDS
PUBLIC	?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
; Function compile flags: /Ogtpy
;	COMDAT ?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::CheckDecoyOSWipeResult, COMDAT
; _this$ = ecx

; 1257 : 		CallDriver (TC_IOCTL_GET_DECOY_SYSTEM_WIPE_RESULT);

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	68 84 20 22 00	 push	 2236548			; 00222084H
  0000d	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1258 : 	}

  00012	c3		 ret	 0
?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
_TEXT	ENDS
PUBLIC	?AbortSetup@BootEncryption@CipherShed@@QAEXXZ	; CipherShed::BootEncryption::AbortSetup
; Function compile flags: /Ogtpy
;	COMDAT ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?AbortSetup@BootEncryption@CipherShed@@QAEXXZ PROC	; CipherShed::BootEncryption::AbortSetup, COMDAT
; _this$ = ecx

; 1609 : 		CallDriver (TC_IOCTL_ABORT_BOOT_ENCRYPTION_SETUP);

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	68 50 20 22 00	 push	 2236496			; 00222050H
  0000d	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1610 : 	}

  00012	c3		 ret	 0
?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ENDP	; CipherShed::BootEncryption::AbortSetup
_TEXT	ENDS
PUBLIC	?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetupWait
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
_encStatus$ = -192					; size = 94
$T161443 = -94						; size = 94
?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ PROC	; CipherShed::BootEncryption::AbortSetupWait, COMDAT
; _this$ = ecx

; 1615 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0000c	53		 push	 ebx
  0000d	55		 push	 ebp
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 1616 : 		CallDriver (TC_IOCTL_ABORT_BOOT_ENCRYPTION_SETUP);

  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	68 50 20 22 00	 push	 2236496			; 00222050H
  0001d	8b d9		 mov	 ebx, ecx
  0001f	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1617 : 
; 1618 : 		BootEncryptionStatus encStatus = GetStatus();

  00024	6a 5e		 push	 94			; 0000005eH
  00026	8d 44 24 14	 lea	 eax, DWORD PTR _encStatus$[esp+212]
  0002a	50		 push	 eax
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	68 48 20 22 00	 push	 2236488			; 00222048H
  00034	8b cb		 mov	 ecx, ebx
  00036	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1619 : 
; 1620 : 		while (encStatus.SetupInProgress)

  0003b	83 7c 24 4e 00	 cmp	 DWORD PTR _encStatus$[esp+270], 0
  00040	74 3c		 je	 SHORT $LN1@AbortSetup
  00042	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__Sleep@4
$LN2@AbortSetup:

; 1621 : 		{
; 1622 : 			Sleep (TC_ABORT_TRANSFORM_WAIT_INTERVAL);

  00048	6a 0a		 push	 10			; 0000000aH
  0004a	ff d5		 call	 ebp

; 1623 : 			encStatus = GetStatus();

  0004c	6a 5e		 push	 94			; 0000005eH
  0004e	8d 4c 24 76	 lea	 ecx, DWORD PTR $T161443[esp+212]
  00052	51		 push	 ecx
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	68 48 20 22 00	 push	 2236488			; 00222048H
  0005c	8b cb		 mov	 ecx, ebx
  0005e	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  00063	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR $T161443[esp+270], 0
  0006b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00070	8d 74 24 72	 lea	 esi, DWORD PTR $T161443[esp+208]
  00074	8d 7c 24 10	 lea	 edi, DWORD PTR _encStatus$[esp+208]
  00078	f3 a5		 rep movsd
  0007a	66 a5		 movsw
  0007c	75 ca		 jne	 SHORT $LN2@AbortSetup
$LN1@AbortSetup:

; 1624 : 		}
; 1625 : 	}

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ENDP	; CipherShed::BootEncryption::AbortSetupWait
_TEXT	ENDS
PUBLIC	?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
; Function compile flags: /Ogtpy
;	COMDAT ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::CheckEncryptionSetupResult, COMDAT
; _this$ = ecx

; 2199 : 		CallDriver (TC_IOCTL_GET_BOOT_ENCRYPTION_SETUP_RESULT);

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	68 54 20 22 00	 push	 2236500			; 00222054H
  0000d	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2200 : 	}

  00012	c3		 ret	 0
?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::CheckEncryptionSetupResult
_TEXT	ENDS
PUBLIC	?IsPagingFileActive@BootEncryption@CipherShed@@QAE_NH@Z ; CipherShed::BootEncryption::IsPagingFileActive
EXTRN	_IsPagingFileActive:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?IsPagingFileActive@BootEncryption@CipherShed@@QAE_NH@Z
_TEXT	SEGMENT
_checkNonWindowsPartitionsOnly$ = 8			; size = 4
?IsPagingFileActive@BootEncryption@CipherShed@@QAE_NH@Z PROC ; CipherShed::BootEncryption::IsPagingFileActive, COMDAT
; _this$ = ecx

; 2306 : 		if (!IsAdmin() && IsUacSupported())

  00000	e8 00 00 00 00	 call	 _IsAdmin
  00005	85 c0		 test	 eax, eax
  00007	75 28		 jne	 SHORT $LN1@IsPagingFi
  00009	e8 00 00 00 00	 call	 _IsUacSupported
  0000e	85 c0		 test	 eax, eax
  00010	74 1f		 je	 SHORT $LN1@IsPagingFi

; 2307 : 			return Elevator::IsPagingFileActive (checkNonWindowsPartitionsOnly) ? true : false;

  00012	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0001c	8b 54 24 04	 mov	 edx, DWORD PTR _checkNonWindowsPartitionsOnly$[esp-4]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00027	ff d0		 call	 eax

; 2308 : 
; 2309 : 		return ::IsPagingFileActive (checkNonWindowsPartitionsOnly) ? true : false;

  00029	85 c0		 test	 eax, eax
  0002b	0f 95 c0	 setne	 al

; 2310 : 	}

  0002e	c2 04 00	 ret	 4
$LN1@IsPagingFi:

; 2308 : 
; 2309 : 		return ::IsPagingFileActive (checkNonWindowsPartitionsOnly) ? true : false;

  00031	8b 4c 24 04	 mov	 ecx, DWORD PTR _checkNonWindowsPartitionsOnly$[esp-4]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _IsPagingFileActive
  0003b	83 c4 04	 add	 esp, 4
  0003e	85 c0		 test	 eax, eax
  00040	0f 95 c0	 setne	 al

; 2310 : 	}

  00043	c2 04 00	 ret	 4
?IsPagingFileActive@BootEncryption@CipherShed@@QAE_NH@Z ENDP ; CipherShed::BootEncryption::IsPagingFileActive
_TEXT	ENDS
PUBLIC	?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue
EXTRN	_WriteLocalMachineRegistryDword:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z
_TEXT	SEGMENT
$T161464 = -8						; size = 8
_keyPath$ = 8						; size = 4
_valueName$ = 12					; size = 4
_value$ = 16						; size = 4
?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z PROC ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue, COMDAT
; _this$ = ecx

; 2322 : 	{

  00000	83 ec 08	 sub	 esp, 8

; 2323 : 		if (!IsAdmin() && IsUacSupported())

  00003	e8 00 00 00 00	 call	 _IsAdmin
  00008	85 c0		 test	 eax, eax
  0000a	75 26		 jne	 SHORT $LN4@WriteLocal@2
  0000c	e8 00 00 00 00	 call	 _IsUacSupported
  00011	85 c0		 test	 eax, eax
  00013	74 1d		 je	 SHORT $LN4@WriteLocal@2

; 2324 : 		{
; 2325 : 			Elevator::WriteLocalMachineRegistryDwordValue (keyPath, valueName, value);

  00015	8b 44 24 14	 mov	 eax, DWORD PTR _value$[esp+4]
  00019	8b 4c 24 10	 mov	 ecx, DWORD PTR _valueName$[esp+4]
  0001d	8b 54 24 0c	 mov	 edx, DWORD PTR _keyPath$[esp+4]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?WriteLocalMachineRegistryDwordValue@Elevator@CipherShed@@SAXPAD0K@Z ; CipherShed::Elevator::WriteLocalMachineRegistryDwordValue
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@WriteLocal@2:

; 2330 : 	}

  0002c	83 c4 08	 add	 esp, 8
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@WriteLocal@2:

; 2326 : 			return;
; 2327 : 		}
; 2328 : 
; 2329 : 		throw_sys_if (!WriteLocalMachineRegistryDword (keyPath, valueName, value));

  00032	8b 44 24 14	 mov	 eax, DWORD PTR _value$[esp+4]
  00036	8b 4c 24 10	 mov	 ecx, DWORD PTR _valueName$[esp+4]
  0003a	8b 54 24 0c	 mov	 edx, DWORD PTR _keyPath$[esp+4]
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryDword
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	85 c0		 test	 eax, eax
  0004b	75 df		 jne	 SHORT $LN2@WriteLocal@2
  0004d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161464[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0005a	89 44 24 04	 mov	 DWORD PTR $T161464[esp+12], eax
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00063	8d 44 24 04	 lea	 eax, DWORD PTR $T161464[esp+12]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@WriteLocal@2:
  0006d	cc		 int	 3
?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z ENDP ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue
_TEXT	ENDS
PUBLIC	?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z ; CipherShed::BootEncryption::SetDriverConfigurationFlag
; Function compile flags: /Ogtpy
;	COMDAT ?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z
_TEXT	SEGMENT
_configMap$161479 = -4					; size = 4
_flag$ = 8						; size = 4
_state$ = 12						; size = 1
?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z PROC ; CipherShed::BootEncryption::SetDriverConfigurationFlag, COMDAT
; _this$ = ecx

; 2333 : 	{

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 2334 : 		DWORD configMap = ReadDriverConfigurationFlags();

  00002	8d 44 24 04	 lea	 eax, DWORD PTR _configMap$161479[esp+8]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 04		 jne	 SHORT $LN8@SetDriverC
  0001f	33 c9		 xor	 ecx, ecx
  00021	eb 04		 jmp	 SHORT $LN5@SetDriverC
$LN8@SetDriverC:
  00023	8b 4c 24 04	 mov	 ecx, DWORD PTR _configMap$161479[esp+8]
$LN5@SetDriverC:

; 2335 : 
; 2336 : 		if (state)

  00027	80 7c 24 10 00	 cmp	 BYTE PTR _state$[esp+4], 0
  0002c	74 08		 je	 SHORT $LN2@SetDriverC

; 2337 : 			configMap |= flag;

  0002e	0b 4c 24 0c	 or	 ecx, DWORD PTR _flag$[esp+4]
  00032	8b c1		 mov	 eax, ecx

; 2338 : 		else

  00034	eb 08		 jmp	 SHORT $LN1@SetDriverC
$LN2@SetDriverC:

; 2339 : 			configMap &= ~flag;

  00036	8b 44 24 0c	 mov	 eax, DWORD PTR _flag$[esp+4]
  0003a	f7 d0		 not	 eax
  0003c	23 c1		 and	 eax, ecx
$LN1@SetDriverC:

; 2340 : 
; 2341 : 		WriteLocalMachineRegistryDwordValue ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", TC_DRIVER_CONFIG_REG_VALUE_NAME, configMap);

  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue
  00050	5e		 pop	 esi

; 2342 : 	}

  00051	59		 pop	 ecx
  00052	c2 08 00	 ret	 8
?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z ENDP ; CipherShed::BootEncryption::SetDriverConfigurationFlag
_TEXT	ENDS
PUBLIC	??_C@_0DB@FPNBFOG@CipherShed?3?3BootEncryption?3?3Star@ ; `string'
PUBLIC	?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::StartDecryption
;	COMDAT ??_C@_0DB@FPNBFOG@CipherShed?3?3BootEncryption?3?3Star@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DB@FPNBFOG@CipherShed?3?3BootEncryption?3?3Star@ DB 'CipherShed::B'
	DB	'ootEncryption::StartDecryption:2349', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z
_TEXT	SEGMENT
$T161484 = -120						; size = 8
_request$ = -112					; size = 16
_encStatus$ = -96					; size = 94
_discardUnreadableEncryptedSectors$ = 8			; size = 4
?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z PROC ; CipherShed::BootEncryption::StartDecryption, COMDAT
; _this$ = ecx

; 2345 : 	{

  00000	83 ec 78	 sub	 esp, 120		; 00000078H
  00003	56		 push	 esi

; 2346 : 		BootEncryptionStatus encStatus = GetStatus();

  00004	6a 5e		 push	 94			; 0000005eH
  00006	8d 44 24 20	 lea	 eax, DWORD PTR _encStatus$[esp+128]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	68 48 20 22 00	 push	 2236488			; 00222048H
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2347 : 
; 2348 : 		if (!encStatus.DeviceFilterActive || !encStatus.DriveMounted || encStatus.SetupInProgress)

  0001b	83 7c 24 1c 00	 cmp	 DWORD PTR _encStatus$[esp+124], 0
  00020	74 4f		 je	 SHORT $LN1@StartDecry
  00022	83 7c 24 22 00	 cmp	 DWORD PTR _encStatus$[esp+130], 0
  00027	74 48		 je	 SHORT $LN1@StartDecry
  00029	83 7c 24 5a 00	 cmp	 DWORD PTR _encStatus$[esp+186], 0
  0002e	75 41		 jne	 SHORT $LN1@StartDecry

; 2350 : 
; 2351 : 		BootEncryptionSetupRequest request;
; 2352 : 		ZeroMemory (&request, sizeof (request));
; 2353 : 		
; 2354 : 		request.SetupMode = SetupDecryption;
; 2355 : 		request.DiscardUnreadableEncryptedSectors = discardUnreadableEncryptedSectors;

  00030	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR _discardUnreadableEncryptedSectors$[esp+120]
  00037	33 c0		 xor	 eax, eax

; 2356 : 
; 2357 : 		CallDriver (TC_IOCTL_BOOT_ENCRYPTION_SETUP, &request, sizeof (request), NULL, 0);

  00039	50		 push	 eax
  0003a	50		 push	 eax
  0003b	6a 10		 push	 16			; 00000010H
  0003d	8d 54 24 18	 lea	 edx, DWORD PTR _request$[esp+136]
  00041	89 44 24 24	 mov	 DWORD PTR _request$[esp+148], eax
  00045	52		 push	 edx
  00046	89 4c 24 28	 mov	 DWORD PTR _request$[esp+152], ecx
  0004a	89 44 24 1c	 mov	 DWORD PTR _request$[esp+140], eax
  0004e	68 4c 20 22 00	 push	 2236492			; 0022204cH
  00053	8b ce		 mov	 ecx, esi
  00055	89 44 24 24	 mov	 DWORD PTR _request$[esp+148], eax
  00059	89 44 24 28	 mov	 DWORD PTR _request$[esp+152], eax
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR _request$[esp+144], 2
  00065	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  0006a	5e		 pop	 esi

; 2358 : 	}

  0006b	83 c4 78	 add	 esp, 120		; 00000078H
  0006e	c2 04 00	 ret	 4
$LN1@StartDecry:

; 2349 : 			throw ParameterIncorrect (SRC_POS);

  00071	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00076	8d 44 24 08	 lea	 eax, DWORD PTR $T161484[esp+128]
  0007a	50		 push	 eax
  0007b	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T161484[esp+132], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00083	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T161484[esp+136], OFFSET ??_C@_0DB@FPNBFOG@CipherShed?3?3BootEncryption?3?3Star@
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@StartDecry:
  00090	cc		 int	 3
?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ENDP ; CipherShed::BootEncryption::StartDecryption
_TEXT	ENDS
PUBLIC	??_C@_0DB@NKFALJOL@CipherShed?3?3BootEncryption?3?3Star@ ; `string'
PUBLIC	?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z ; CipherShed::BootEncryption::StartEncryption
;	COMDAT ??_C@_0DB@NKFALJOL@CipherShed?3?3BootEncryption?3?3Star@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DB@NKFALJOL@CipherShed?3?3BootEncryption?3?3Star@ DB 'CipherShed::'
	DB	'BootEncryption::StartEncryption:2365', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z
_TEXT	SEGMENT
$T161500 = -120						; size = 8
_request$ = -112					; size = 16
_encStatus$ = -96					; size = 94
_wipeAlgorithm$ = 8					; size = 4
_zeroUnreadableSectors$ = 12				; size = 1
?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z PROC ; CipherShed::BootEncryption::StartEncryption, COMDAT
; _this$ = ecx

; 2361 : 	{

  00000	83 ec 78	 sub	 esp, 120		; 00000078H
  00003	56		 push	 esi

; 2362 : 		BootEncryptionStatus encStatus = GetStatus();

  00004	6a 5e		 push	 94			; 0000005eH
  00006	8d 44 24 20	 lea	 eax, DWORD PTR _encStatus$[esp+128]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	68 48 20 22 00	 push	 2236488			; 00222048H
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2363 : 
; 2364 : 		if (!encStatus.DeviceFilterActive || !encStatus.DriveMounted || encStatus.SetupInProgress)

  0001b	83 7c 24 1c 00	 cmp	 DWORD PTR _encStatus$[esp+124], 0
  00020	74 5b		 je	 SHORT $LN1@StartEncry
  00022	83 7c 24 22 00	 cmp	 DWORD PTR _encStatus$[esp+130], 0
  00027	74 54		 je	 SHORT $LN1@StartEncry
  00029	83 7c 24 5a 00	 cmp	 DWORD PTR _encStatus$[esp+186], 0
  0002e	75 4d		 jne	 SHORT $LN1@StartEncry

; 2366 : 
; 2367 : 		BootEncryptionSetupRequest request;
; 2368 : 		ZeroMemory (&request, sizeof (request));
; 2369 : 		
; 2370 : 		request.SetupMode = SetupEncryption;
; 2371 : 		request.WipeAlgorithm = wipeAlgorithm;

  00030	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR _wipeAlgorithm$[esp+120]

; 2372 : 		request.ZeroUnreadableSectors = zeroUnreadableSectors;

  00037	0f b6 94 24 84
	00 00 00	 movzx	 edx, BYTE PTR _zeroUnreadableSectors$[esp+120]
  0003f	33 c0		 xor	 eax, eax

; 2373 : 
; 2374 : 		CallDriver (TC_IOCTL_BOOT_ENCRYPTION_SETUP, &request, sizeof (request), NULL, 0);

  00041	50		 push	 eax
  00042	50		 push	 eax
  00043	89 44 24 14	 mov	 DWORD PTR _request$[esp+132], eax
  00047	89 44 24 18	 mov	 DWORD PTR _request$[esp+136], eax
  0004b	89 44 24 1c	 mov	 DWORD PTR _request$[esp+140], eax
  0004f	89 44 24 20	 mov	 DWORD PTR _request$[esp+144], eax
  00053	6a 10		 push	 16			; 00000010H
  00055	8d 44 24 18	 lea	 eax, DWORD PTR _request$[esp+136]
  00059	50		 push	 eax
  0005a	89 4c 24 20	 mov	 DWORD PTR _request$[esp+144], ecx
  0005e	68 4c 20 22 00	 push	 2236492			; 0022204cH
  00063	8b ce		 mov	 ecx, esi
  00065	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR _request$[esp+144], 1
  0006d	89 54 24 28	 mov	 DWORD PTR _request$[esp+152], edx
  00071	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  00076	5e		 pop	 esi

; 2375 : 	}

  00077	83 c4 78	 add	 esp, 120		; 00000078H
  0007a	c2 08 00	 ret	 8
$LN1@StartEncry:

; 2365 : 			throw ParameterIncorrect (SRC_POS);

  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00082	8d 4c 24 08	 lea	 ecx, DWORD PTR $T161500[esp+128]
  00086	51		 push	 ecx
  00087	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T161500[esp+132], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0008f	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T161500[esp+136], OFFSET ??_C@_0DB@NKFALJOL@CipherShed?3?3BootEncryption?3?3Star@
  00097	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@StartEncry:
  0009c	cc		 int	 3
?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z ENDP ; CipherShed::BootEncryption::StartEncryption
_TEXT	ENDS
PUBLIC	?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CipherShed::BootEncryption::CopyFileAdmin
EXTRN	__imp__CopyFileA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T161517 = -8						; size = 8
$T161516 = -8						; size = 8
_sourceFile$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CipherShed::BootEncryption::CopyFileAdmin, COMDAT
; _this$ = ecx

; 2378 : 	{

  00000	83 ec 08	 sub	 esp, 8

; 2379 : 		if (!IsAdmin())

  00003	e8 00 00 00 00	 call	 _IsAdmin
  00008	85 c0		 test	 eax, eax
  0000a	75 49		 jne	 SHORT $LN4@CopyFileAd

; 2380 : 		{
; 2381 : 			if (!IsUacSupported())

  0000c	e8 00 00 00 00	 call	 _IsUacSupported
  00011	85 c0		 test	 eax, eax
  00013	75 28		 jne	 SHORT $LN7@CopyFileAd

; 2382 : 			{
; 2383 : 				SetLastError (ERROR_ACCESS_DENIED);

  00015	6a 05		 push	 5
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 2384 : 				throw SystemException();

  0001d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161516[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002a	89 44 24 04	 mov	 DWORD PTR $T161516[esp+12], eax
  0002e	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00033	8d 44 24 04	 lea	 eax, DWORD PTR $T161516[esp+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@CopyFileAd:

; 2385 : 			}
; 2386 : 			else
; 2387 : 				Elevator::CopyFile (sourceFile, destinationFile);

  0003d	8b 4c 24 10	 mov	 ecx, DWORD PTR _destinationFile$[esp+4]
  00041	8b 54 24 0c	 mov	 edx, DWORD PTR _sourceFile$[esp+4]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?CopyFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CipherShed::Elevator::CopyFileA
  0004c	83 c4 08	 add	 esp, 8
$LN2@CopyFileAd:

; 2391 : 	}

  0004f	83 c4 08	 add	 esp, 8
  00052	c2 08 00	 ret	 8
$LN4@CopyFileAd:

; 2388 : 		}
; 2389 : 		else
; 2390 : 			throw_sys_if (!::CopyFile (sourceFile.c_str(), destinationFile.c_str(), FALSE));

  00055	8b 4c 24 10	 mov	 ecx, DWORD PTR _destinationFile$[esp+4]
  00059	6a 00		 push	 0
  0005b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00060	8b 4c 24 10	 mov	 ecx, DWORD PTR _sourceFile$[esp+8]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileA@12
  00071	85 c0		 test	 eax, eax
  00073	75 da		 jne	 SHORT $LN2@CopyFileAd
  00075	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161517[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00082	89 44 24 04	 mov	 DWORD PTR $T161517[esp+12], eax
  00086	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0008b	8d 44 24 04	 lea	 eax, DWORD PTR $T161517[esp+12]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@CopyFileAd:
  00095	cc		 int	 3
?CopyFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CipherShed::BootEncryption::CopyFileAdmin
_TEXT	ENDS
PUBLIC	?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::DeleteFileAdmin
EXTRN	__imp__DeleteFileA@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T161537 = -8						; size = 8
_file$ = 8						; size = 4
?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::BootEncryption::DeleteFileAdmin, COMDAT
; _this$ = ecx

; 2394 : 	{

  00000	83 ec 08	 sub	 esp, 8

; 2395 : 		if (!IsAdmin() && IsUacSupported())

  00003	e8 00 00 00 00	 call	 _IsAdmin
  00008	85 c0		 test	 eax, eax
  0000a	75 1c		 jne	 SHORT $LN4@DeleteFile@2
  0000c	e8 00 00 00 00	 call	 _IsUacSupported
  00011	85 c0		 test	 eax, eax
  00013	74 13		 je	 SHORT $LN4@DeleteFile@2

; 2396 : 			Elevator::DeleteFile (file);

  00015	8b 44 24 0c	 mov	 eax, DWORD PTR _file$[esp+4]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?DeleteFileA@Elevator@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::Elevator::DeleteFileA
  0001f	83 c4 04	 add	 esp, 4
$LN2@DeleteFile@2:

; 2399 : 	}

  00022	83 c4 08	 add	 esp, 8
  00025	c2 04 00	 ret	 4
$LN4@DeleteFile@2:

; 2397 : 		else
; 2398 : 			throw_sys_if (!::DeleteFile (file.c_str()));

  00028	8b 4c 24 0c	 mov	 ecx, DWORD PTR _file$[esp+4]
  0002c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  00038	85 c0		 test	 eax, eax
  0003a	75 e6		 jne	 SHORT $LN2@DeleteFile@2
  0003c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T161537[esp+8], OFFSET ??_7SystemException@CipherShed@@6B@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00049	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0004e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T161537[esp+12]
  00052	51		 push	 ecx
  00053	89 44 24 0c	 mov	 DWORD PTR $T161537[esp+20], eax
  00057	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@DeleteFile@2:
  0005c	cc		 int	 3
?DeleteFileAdmin@BootEncryption@CipherShed@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::BootEncryption::DeleteFileAdmin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteBootDriveSector@BootEncryption@CipherShed@@QAEX_KPAE@Z ; CipherShed::BootEncryption::WriteBootDriveSector
; Function compile flags: /Ogtpy
;	COMDAT ?WriteBootDriveSector@BootEncryption@CipherShed@@QAEX_KPAE@Z
_TEXT	SEGMENT
_request$ = -528					; size = 520
__$ArrayPad$ = -4					; size = 4
_offset$ = 8						; size = 8
_data$ = 16						; size = 4
?WriteBootDriveSector@BootEncryption@CipherShed@@QAEX_KPAE@Z PROC ; CipherShed::BootEncryption::WriteBootDriveSector, COMDAT
; _this$ = ecx

; 2414 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 0c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+528], eax

; 2415 : 		WriteBootDriveSectorRequest request;
; 2416 : 		request.Offset.QuadPart = offset;

  0001a	8b 55 0c	 mov	 edx, DWORD PTR _offset$[ebp+4]
  0001d	56		 push	 esi
  0001e	8b 75 10	 mov	 esi, DWORD PTR _data$[ebp]
  00021	57		 push	 edi
  00022	8b c1		 mov	 eax, ecx
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00027	89 4c 24 08	 mov	 DWORD PTR _request$[esp+536], ecx

; 2417 : 		memcpy (request.Data, data, sizeof (request.Data));
; 2418 : 
; 2419 : 		CallDriver (TC_IOCTL_WRITE_BOOT_DRIVE_SECTOR, &request, sizeof (request), NULL, 0);

  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	89 54 24 14	 mov	 DWORD PTR _request$[esp+548], edx
  00033	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00038	8d 7c 24 18	 lea	 edi, DWORD PTR _request$[esp+552]
  0003c	f3 a5		 rep movsd
  0003e	68 08 02 00 00	 push	 520			; 00000208H
  00043	8d 4c 24 14	 lea	 ecx, DWORD PTR _request$[esp+548]
  00047	51		 push	 ecx
  00048	68 88 20 22 00	 push	 2236552			; 00222088H
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2420 : 	}

  00054	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+536]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	33 cc		 xor	 ecx, esp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
?WriteBootDriveSector@BootEncryption@CipherShed@@QAEX_KPAE@Z ENDP ; CipherShed::BootEncryption::WriteBootDriveSector
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1765 : 		return (find(_Right._Myptr(), _Off, _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 12		 jb	 SHORT $LN7@find@2
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1766 : 		}

  0001c	c2 08 00	 ret	 8

; 1765 : 		return (find(_Right._Myptr(), _Off, _Right.size()));

$LN7@find@2:
  0001f	52		 push	 edx
  00020	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00024	83 c0 04	 add	 eax, 4
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1766 : 		}

  0002e	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1837 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	56		 push	 esi

; 1838 : 		_DEBUG_POINTER(_Ptr);
; 1839 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@rfind@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@rfind@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1840 : 		}

  00027	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 71		 jle	 SHORT $LN31@Xsgetn_s
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 35		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	56		 push	 esi
  0003d	51		 push	 ecx
  0003e	52		 push	 edx
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  00045	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00048	29 30		 sub	 DWORD PTR [eax], esi
  0004a	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	03 de		 add	 ebx, esi
  00053	2b ee		 sub	 ebp, esi
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	01 30		 add	 DWORD PTR [eax], esi
  0005a	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005e	eb 17		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d2		 call	 edx
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0d		 je	 SHORT $LN30@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 353  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	88 03		 mov	 BYTE PTR [ebx], al
  00071	43		 inc	 ebx
  00072	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 354  : 				--_Count;

  00076	4d		 dec	 ebp
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00077	85 ed		 test	 ebp, ebp
  00079	7f a5		 jg	 SHORT $LL7@Xsgetn_s
$LN30@Xsgetn_s:
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 358  : 		}

  00081	59		 pop	 ecx
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN31@Xsgetn_s:
  00085	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00086	8b c6		 mov	 eax, esi
  00088	5e		 pop	 esi
  00089	5d		 pop	 ebp

; 358  : 		}

  0008a	59		 pop	 ecx
  0008b	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 6f		 jle	 SHORT $LN31@xsputn
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 31		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00041	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00044	29 30		 sub	 DWORD PTR [eax], esi
  00046	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004a	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0004d	03 de		 add	 ebx, esi
  0004f	2b ee		 sub	 ebp, esi
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	01 30		 add	 DWORD PTR [eax], esi

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005a	eb 19		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  0005c	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005f	8b 17		 mov	 edx, DWORD PTR [edi]
  00061	50		 push	 eax
  00062	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d0		 call	 eax
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0b		 je	 SHORT $LN30@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	43		 inc	 ebx
  00070	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 384  : 				--_Count;

  00074	4d		 dec	 ebp
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00075	85 ed		 test	 ebp, ebp
  00077	7f a7		 jg	 SHORT $LL7@xsputn
$LN30@xsputn:
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp

; 388  : 		}

  0007f	59		 pop	 ecx
  00080	c2 08 00	 ret	 8
$LN31@xsputn:
  00083	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00084	8b c6		 mov	 eax, esi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp

; 388  : 		}

  00088	59		 pop	 ecx
  00089	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 89 00 00
	00		 jle	 $LN33@Xsgetn_s@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@Xsgetn_s@2:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 41		 jle	 SHORT $LN5@Xsgetn_s@2

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s@2

; 341  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@Xsgetn_s@2:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00044	50		 push	 eax
  00045	55		 push	 ebp
  00046	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  0004b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0004e	29 30		 sub	 DWORD PTR [eax], esi
  00050	29 74 24 30	 sub	 DWORD PTR __Count$[esp+32], esi
  00054	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00058	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0005b	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005f	03 ef		 add	 ebp, edi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	01 38		 add	 DWORD PTR [eax], edi
  00066	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+16]
  0006a	eb 27		 jmp	 SHORT $LN1@Xsgetn_s@2
$LN5@Xsgetn_s@2:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0006c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	0f b7 c0	 movzx	 eax, ax
  00078	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007d	66 3b c8	 cmp	 cx, ax
  00080	74 15		 je	 SHORT $LN32@Xsgetn_s@2

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  00082	66 89 45 00	 mov	 WORD PTR [ebp], ax

; 353  : 				++_Copied;

  00086	46		 inc	 esi
  00087	83 c5 02	 add	 ebp, 2

; 354  : 				--_Count;

  0008a	4f		 dec	 edi
  0008b	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  0008f	89 7c 24 20	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@Xsgetn_s@2:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00093	85 ff		 test	 edi, edi
  00095	7f 89		 jg	 SHORT $LL7@Xsgetn_s@2
$LN32@Xsgetn_s@2:
  00097	5d		 pop	 ebp
  00098	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 358  : 		}

  0009d	59		 pop	 ecx
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Xsgetn_s@2:
  000a1	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  000a2	8b c6		 mov	 eax, esi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 358  : 		}

  000a6	59		 pop	 ecx
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 82 00 00
	00		 jle	 $LN33@xsputn@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@xsputn@2:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 3c		 jle	 SHORT $LN5@xsputn@2

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn@2

; 370  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@xsputn@2:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003b	57		 push	 edi
  0003c	55		 push	 ebp
  0003d	03 c0		 add	 eax, eax
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00046	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00049	29 30		 sub	 DWORD PTR [eax], esi
  0004b	29 74 24 2c	 sub	 DWORD PTR __Count$[esp+32], esi
  0004f	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00053	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005a	03 ef		 add	 ebp, edi
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	01 38		 add	 DWORD PTR [eax], edi
  00061	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+16]
  00065	eb 25		 jmp	 SHORT $LN1@xsputn@2
$LN5@xsputn@2:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00067	0f b7 45 00	 movzx	 eax, WORD PTR [ebp]
  0006b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006d	50		 push	 eax
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007a	66 3b c8	 cmp	 cx, ax
  0007d	74 11		 je	 SHORT $LN32@xsputn@2

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0007f	46		 inc	 esi
  00080	83 c5 02	 add	 ebp, 2

; 384  : 				--_Count;

  00083	4f		 dec	 edi
  00084	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  00088	89 7c 24 1c	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@xsputn@2:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  0008c	85 ff		 test	 edi, edi
  0008e	7f 90		 jg	 SHORT $LL7@xsputn@2
$LN32@xsputn@2:
  00090	5d		 pop	 ebp
  00091	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 388  : 		}

  00096	59		 pop	 ecx
  00097	c2 08 00	 ret	 8
$LN33@xsputn@2:
  0009a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 388  : 		}

  0009f	59		 pop	 ecx
  000a0	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$151785 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 20		 je	 SHORT $LN102@overflow
  0000b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	85 d2		 test	 edx, edx
  00012	74 17		 je	 SHORT $LN102@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b d1		 cmp	 edx, ecx
  00019	73 10		 jae	 SHORT $LN102@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	03 c2		 add	 eax, edx
  00022	89 0f		 mov	 DWORD PTR [edi], ecx
  00024	2b c1		 sub	 eax, ecx
  00026	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00029	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002b	8b 44 24 10	 mov	 eax, DWORD PTR __Meta$[esp+8]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	75 08		 jne	 SHORT $LN17@overflow
  00034	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00038	59		 pop	 ecx
  00039	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  0003c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0003f	8b 3a		 mov	 edi, DWORD PTR [edx]
  00041	53		 push	 ebx
  00042	85 ff		 test	 edi, edi
  00044	74 22		 je	 SHORT $LN15@overflow
  00046	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00049	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0004b	8b d7		 mov	 edx, edi
  0004d	03 da		 add	 ebx, edx
  0004f	3b d3		 cmp	 edx, ebx
  00051	73 15		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00053	ff 09		 dec	 DWORD PTR [ecx]
  00055	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	5b		 pop	 ebx
  0005b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005e	89 16		 mov	 DWORD PTR [esi], edx
  00060	5f		 pop	 edi
  00061	88 01		 mov	 BYTE PTR [ecx], al
  00063	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00064	59		 pop	 ecx
  00065	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00068	f6 46 40 02	 test	 BYTE PTR [esi+64], 2
  0006c	74 0a		 je	 SHORT $LN13@overflow
  0006e	5b		 pop	 ebx
  0006f	5f		 pop	 edi

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00070	83 c8 ff	 or	 eax, -1
  00073	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00074	59		 pop	 ecx
  00075	c2 04 00	 ret	 4
$LN13@overflow:
  00078	55		 push	 ebp

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 ed		 xor	 ebp, ebp
  0007f	eb 0c		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00087	8b 28		 mov	 ebp, DWORD PTR [eax]
  00089	2b 29		 sub	 ebp, DWORD PTR [ecx]
  0008b	03 ef		 add	 ebp, edi
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  0008d	8b c5		 mov	 eax, ebp
  0008f	d1 e8		 shr	 eax, 1
  00091	83 f8 20	 cmp	 eax, 32			; 00000020H
  00094	73 07		 jae	 SHORT $LN23@overflow
  00096	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009b	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0009d	85 c0		 test	 eax, eax
  0009f	76 11		 jbe	 SHORT $LN106@overflow
$LL11@overflow:
  000a1	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000a6	2b d0		 sub	 edx, eax
  000a8	3b d5		 cmp	 edx, ebp
  000aa	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000ac	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000ae	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b0	85 c0		 test	 eax, eax
$LN106@overflow:
  000b2	75 0b		 jne	 SHORT $LN9@overflow
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000b7	83 c8 ff	 or	 eax, -1
  000ba	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000bb	59		 pop	 ecx
  000bc	c2 04 00	 ret	 4
$LN9@overflow:

; 114  : 
; 115  : 			_Newsize += _Inc;

  000bf	03 c5		 add	 eax, ebp

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	89 44 24 18	 mov	 DWORD PTR __Newsize$151785[esp+28], eax
  000c8	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  000cd	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000d4	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000d7	85 ed		 test	 ebp, ebp
  000d9	76 12		 jbe	 SHORT $LN107@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000db	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$151785[esp+20]
  000df	55		 push	 ebp
  000e0	53		 push	 ebx
  000e1	51		 push	 ecx
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000eb	85 ed		 test	 ebp, ebp
$LN107@overflow:
  000ed	75 3e		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000ef	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f2	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000f5	89 3a		 mov	 DWORD PTR [edx], edi
  000f7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000fa	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$151785[esp+20]
  000fe	89 38		 mov	 DWORD PTR [eax], edi
  00100	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00103	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 				if (_Mystate & _Noread)
; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00105	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00108	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0010c	89 38		 mov	 DWORD PTR [eax], edi
  0010e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00111	74 0d		 je	 SHORT $LN6@overflow
  00113	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00119	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0011c	89 3a		 mov	 DWORD PTR [edx], edi

; 129  : 				else

  0011e	eb 73		 jmp	 SHORT $LN89@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00120	89 39		 mov	 DWORD PTR [ecx], edi
  00122	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00125	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 131  : 				}
; 132  : 			else

  0012b	eb 66		 jmp	 SHORT $LN89@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0012d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00130	8b c7		 mov	 eax, edi
  00132	2b c3		 sub	 eax, ebx
  00134	01 46 3c	 add	 DWORD PTR [esi+60], eax
  00137	8b 01		 mov	 eax, DWORD PTR [ecx]
  00139	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0013c	8b d7		 mov	 edx, edi
  0013e	2b d3		 sub	 edx, ebx
  00140	01 11		 add	 DWORD PTR [ecx], edx
  00142	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00145	2b c3		 sub	 eax, ebx
  00147	03 c7		 add	 eax, edi
  00149	8b d7		 mov	 edx, edi
  0014b	2b d0		 sub	 edx, eax
  0014d	03 54 24 10	 add	 edx, DWORD PTR __Newsize$151785[esp+20]
  00151	89 01		 mov	 DWORD PTR [ecx], eax
  00153	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00156	89 10		 mov	 DWORD PTR [eax], edx

; 138  : 				if (_Mystate & _Noread)

  00158	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0015c	74 15		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0015e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00161	89 39		 mov	 DWORD PTR [ecx], edi
  00163	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00166	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0016c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0016f	89 38		 mov	 DWORD PTR [eax], edi

; 140  : 				else

  00171	eb 20		 jmp	 SHORT $LN89@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00173	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00176	8b 02		 mov	 eax, DWORD PTR [edx]
  00178	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0017b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00180	2b c3		 sub	 eax, ebx
  00182	03 c7		 add	 eax, edi
  00184	89 3a		 mov	 DWORD PTR [edx], edi
  00186	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00189	2b c8		 sub	 ecx, eax
  0018b	89 02		 mov	 DWORD PTR [edx], eax
  0018d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00190	41		 inc	 ecx
  00191	89 08		 mov	 DWORD PTR [eax], ecx
$LN89@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  00193	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00197	74 09		 je	 SHORT $LN91@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  00199	53		 push	 ebx
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$LN91@overflow:

; 148  : 			_Mystate |= _Allocated;
; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001a2	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001a5	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  001a9	ff 08		 dec	 DWORD PTR [eax]
  001ab	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b0	8b 44 24 18	 mov	 eax, DWORD PTR __Meta$[esp+16]
  001b4	5d		 pop	 ebp
  001b5	5b		 pop	 ebx
  001b6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001b9	89 16		 mov	 DWORD PTR [esi], edx
  001bb	5f		 pop	 edi
  001bc	88 01		 mov	 BYTE PTR [ecx], al
  001be	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001bf	59		 pop	 ecx
  001c0	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$151898 = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 23		 je	 SHORT $LN98@overflow@2
  0000b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	74 1a		 je	 SHORT $LN98@overflow@2
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b c1		 cmp	 eax, ecx
  00019	73 13		 jae	 SHORT $LN98@overflow@2

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00023	2b c1		 sub	 eax, ecx
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@overflow@2:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	66 8b 44 24 10	 mov	 ax, WORD PTR __Meta$[esp+8]
  00033	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00038	66 3b d0	 cmp	 dx, ax
  0003b	75 08		 jne	 SHORT $LN17@overflow@2
  0003d	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0003e	33 c0		 xor	 eax, eax
  00040	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN17@overflow@2:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  00045	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	53		 push	 ebx
  0004b	85 ff		 test	 edi, edi
  0004d	74 24		 je	 SHORT $LN15@overflow@2
  0004f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00052	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00054	8b d7		 mov	 edx, edi
  00056	8d 1c 5a	 lea	 ebx, DWORD PTR [edx+ebx*2]
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 16		 jae	 SHORT $LN15@overflow@2

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005d	ff 09		 dec	 DWORD PTR [ecx]

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005f	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	5b		 pop	 ebx
  00065	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00068	89 16		 mov	 DWORD PTR [esi], edx
  0006a	5f		 pop	 edi
  0006b	66 89 01	 mov	 WORD PTR [ecx], ax
  0006e	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  0006f	59		 pop	 ecx
  00070	c2 04 00	 ret	 4
$LN15@overflow@2:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00073	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00077	75 3f		 jne	 SHORT $LN105@overflow@2

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow@2
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 10		 jmp	 SHORT $LN22@overflow@2
$LN21@overflow@2:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 18		 mov	 ebx, DWORD PTR [eax]
  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	03 db		 add	 ebx, ebx
  0008b	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0008d	03 df		 add	 ebx, edi
  0008f	d1 fb		 sar	 ebx, 1
$LN22@overflow@2:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00091	8b c3		 mov	 eax, ebx
  00093	d1 e8		 shr	 eax, 1
  00095	83 f8 20	 cmp	 eax, 32			; 00000020H
  00098	73 07		 jae	 SHORT $LN23@overflow@2
  0009a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009f	eb 04		 jmp	 SHORT $LL11@overflow@2
$LN23@overflow@2:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a1	85 c0		 test	 eax, eax
  000a3	76 11		 jbe	 SHORT $LN102@overflow@2
$LL11@overflow@2:
  000a5	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000aa	2b d0		 sub	 edx, eax
  000ac	3b d3		 cmp	 edx, ebx
  000ae	73 04		 jae	 SHORT $LN10@overflow@2

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000b0	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b2	75 f1		 jne	 SHORT $LL11@overflow@2
$LN10@overflow@2:

; 112  : 			if (_Inc == 0)

  000b4	85 c0		 test	 eax, eax
$LN102@overflow@2:
  000b6	75 0c		 jne	 SHORT $LN9@overflow@2
$LN105@overflow@2:
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000ba	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bf	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000c0	59		 pop	 ecx
  000c1	c2 04 00	 ret	 4
$LN9@overflow@2:
  000c4	55		 push	 ebp

; 114  : 
; 115  : 			_Newsize += _Inc;

  000c5	03 c3		 add	 eax, ebx

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c7	6a 00		 push	 0
  000c9	50		 push	 eax
  000ca	89 44 24 18	 mov	 DWORD PTR __Newsize$151898[esp+28], eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  000d3	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000d5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000da	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000dd	85 db		 test	 ebx, ebx
  000df	76 12		 jbe	 SHORT $LN103@overflow@2

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$151898[esp+20]
  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	51		 push	 ecx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000f1	85 db		 test	 ebx, ebx
$LN103@overflow@2:
  000f3	75 42		 jne	 SHORT $LN7@overflow@2

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f8	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$151898[esp+20]
  000fc	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000ff	89 3a		 mov	 DWORD PTR [edx], edi
  00101	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00109	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0010c	d1 fa		 sar	 edx, 1
  0010e	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 				if (_Mystate & _Noread)

  00110	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00114	74 1a		 je	 SHORT $LN6@overflow@2

; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	89 39		 mov	 DWORD PTR [ecx], edi
  0011b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0011e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	d1 ff		 sar	 edi, 1
  00129	89 38		 mov	 DWORD PTR [eax], edi

; 129  : 				else

  0012b	e9 80 00 00 00	 jmp	 $LN2@overflow@2
$LN6@overflow@2:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00130	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  00133	51		 push	 ecx
  00134	57		 push	 edi

; 131  : 				}
; 132  : 			else

  00135	eb 71		 jmp	 SHORT $LN104@overflow@2
$LN7@overflow@2:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00137	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	2b d5		 sub	 edx, ebp
  0013f	d1 fa		 sar	 edx, 1
  00141	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00144	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0014c	2b d5		 sub	 edx, ebp
  0014e	d1 fa		 sar	 edx, 1
  00150	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	2b d5		 sub	 edx, ebp
  00157	d1 fa		 sar	 edx, 1
  00159	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  0015c	89 11		 mov	 DWORD PTR [ecx], edx
  0015e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00161	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$151898[esp+20]
  00165	89 01		 mov	 DWORD PTR [ecx], eax
  00167	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0016a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016d	2b c8		 sub	 ecx, eax
  0016f	03 cf		 add	 ecx, edi
  00171	d1 f9		 sar	 ecx, 1
  00173	89 0a		 mov	 DWORD PTR [edx], ecx

; 138  : 				if (_Mystate & _Noread)

  00175	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00179	74 17		 je	 SHORT $LN3@overflow@2

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 38		 mov	 DWORD PTR [eax], edi
  00180	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00183	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00189	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0018c	d1 ff		 sar	 edi, 1
  0018e	89 3a		 mov	 DWORD PTR [edx], edi

; 140  : 				else

  00190	eb 1e		 jmp	 SHORT $LN2@overflow@2
$LN3@overflow@2:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00192	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0019a	8b 02		 mov	 eax, DWORD PTR [edx]
  0019c	83 c1 02	 add	 ecx, 2
  0019f	2b c5		 sub	 eax, ebp
  001a1	51		 push	 ecx
  001a2	d1 f8		 sar	 eax, 1
  001a4	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  001a7	51		 push	 ecx
$LN104@overflow@2:
  001a8	57		 push	 edi
  001a9	8b ce		 mov	 ecx, esi
  001ab	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
$LN2@overflow@2:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  001b0	bb 01 00 00 00	 mov	 ebx, 1
  001b5	84 5e 40	 test	 BYTE PTR [esi+64], bl
  001b8	74 09		 je	 SHORT $LN87@overflow@2

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001ba	55		 push	 ebp
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN87@overflow@2:

; 148  : 			_Mystate |= _Allocated;

  001c3	09 5e 40	 or	 DWORD PTR [esi+64], ebx

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001c6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001c9	ff 08		 dec	 DWORD PTR [eax]
  001cb	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d0	66 8b 44 24 18	 mov	 ax, WORD PTR __Meta$[esp+16]
  001d5	5d		 pop	 ebp
  001d6	5b		 pop	 ebx
  001d7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001da	89 16		 mov	 DWORD PTR [esi], edx
  001dc	5f		 pop	 edi
  001dd	66 89 01	 mov	 WORD PTR [ecx], ax
  001e0	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001e1	59		 pop	 ecx
  001e2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@4

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@4

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@4

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@4:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@4:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@5

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@5

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@5

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@5:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@5:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	68 88 00 00 00	 push	 136			; 00000088H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000d	85 c0		 test	 eax, eax
  0000f	74 02		 je	 SHORT $LN26@Buynode
  00011	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00013	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00016	85 c9		 test	 ecx, ecx
  00018	74 02		 je	 SHORT $LN36@Buynode
  0001a	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  0001c	c3		 ret	 0
?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	53		 push	 ebx

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Count$[esp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 db		 test	 ebx, ebx
  00018	0f 84 81 00 00
	00		 je	 $LN4@Init@2
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	74 7a		 je	 SHORT $LN4@Init@2
  00025	57		 push	 edi

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00026	6a 00		 push	 0
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	8b f8		 mov	 edi, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00030	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _memcpy_s
  0003d	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00040	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00044	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00047	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0004a	75 0f		 jne	 SHORT $LN19@Init@2

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  0004c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004f	89 39		 mov	 DWORD PTR [ecx], edi
  00051	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00054	89 3a		 mov	 DWORD PTR [edx], edi
  00056	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00059	89 19		 mov	 DWORD PTR [ecx], ebx
$LN19@Init@2:

; 287  : 			if (!(_Mystate & _Constant))

  0005b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005e	f6 c1 02	 test	 cl, 2
  00061	75 37		 jne	 SHORT $LN25@Init@2

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  00063	f6 c1 10	 test	 cl, 16			; 00000010H
  00066	75 02		 jne	 SHORT $LN8@Init@2
  00068	8b c7		 mov	 eax, edi
$LN8@Init@2:
  0006a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006d	89 3a		 mov	 DWORD PTR [edx], edi
  0006f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00072	89 01		 mov	 DWORD PTR [ecx], eax
  00074	8b d7		 mov	 edx, edi
  00076	2b d0		 sub	 edx, eax
  00078	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0007b	03 d3		 add	 edx, ebx
  0007d	89 10		 mov	 DWORD PTR [eax], edx

; 292  : 				if (_Mysb::gptr() == 0)

  0007f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00082	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00085	75 13		 jne	 SHORT $LN25@Init@2

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00087	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0008a	89 3a		 mov	 DWORD PTR [edx], edi
  0008c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00095	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00098	89 39		 mov	 DWORD PTR [ecx], edi
$LN25@Init@2:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  0009a	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  0009e	5f		 pop	 edi
$LN4@Init@2:
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 296  : 			}
; 297  : 		}

  000a1	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 ff		 test	 edi, edi
  00018	0f 84 8d 00 00
	00		 je	 $LN4@Init@3
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	0f 84 82 00 00
	00		 je	 $LN4@Init@3
  00029	53		 push	 ebx

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00032	8b d8		 mov	 ebx, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00034	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00038	03 ff		 add	 edi, edi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _memcpy_s
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00046	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00050	75 13		 jne	 SHORT $LN21@Init@3

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  00052	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00055	89 19		 mov	 DWORD PTR [ecx], ebx
  00057	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005a	89 1a		 mov	 DWORD PTR [edx], ebx
  0005c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005f	8b cf		 mov	 ecx, edi
  00061	d1 f9		 sar	 ecx, 1
  00063	89 0a		 mov	 DWORD PTR [edx], ecx
$LN21@Init@3:

; 287  : 			if (!(_Mystate & _Constant))

  00065	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00068	f6 c1 02	 test	 cl, 2
  0006b	75 39		 jne	 SHORT $LN27@Init@3

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  0006d	f6 c1 10	 test	 cl, 16			; 00000010H
  00070	75 02		 jne	 SHORT $LN8@Init@3
  00072	8b c3		 mov	 eax, ebx
$LN8@Init@3:
  00074	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00077	89 19		 mov	 DWORD PTR [ecx], ebx
  00079	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007c	2b f8		 sub	 edi, eax
  0007e	89 02		 mov	 DWORD PTR [edx], eax
  00080	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00083	03 fb		 add	 edi, ebx
  00085	d1 ff		 sar	 edi, 1
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 292  : 				if (_Mysb::gptr() == 0)

  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0008f	75 15		 jne	 SHORT $LN27@Init@3

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	89 1a		 mov	 DWORD PTR [edx], ebx
  00096	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a2	d1 fb		 sar	 ebx, 1
  000a4	89 19		 mov	 DWORD PTR [ecx], ebx
$LN27@Init@3:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  000a6	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  000aa	5b		 pop	 ebx
$LN4@Init@3:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 296  : 			}
; 297  : 		}

  000ad	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 341  : 			{	// construct with pointer _Ptr

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Pstring$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >

; 342  : 			}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN16@Put
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN16@Put
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN17@Put:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Put
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1513 : 		}

  0006d	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 1c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	85 f6		 test	 esi, esi
  0000b	76 4d		 jbe	 SHORT $LN1@Rep
  0000d	53		 push	 ebx
  0000e	8a 5c 24 1c	 mov	 bl, BYTE PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 39		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1a		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 12		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	88 19		 mov	 BYTE PTR [ecx], bl
  00036	0f b6 c3	 movzx	 eax, bl
  00039	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	0f b6 d3	 movzx	 edx, bl
  00043	52		 push	 edx
  00044	ff d0		 call	 eax
$LN17@Rep:
  00046	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  0004f	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00054	83 ee 01	 sub	 esi, 1
  00057	75 b9		 jne	 SHORT $LL6@Rep
  00059	5b		 pop	 ebx
$LN1@Rep:

; 1547 : 		return (_Dest);

  0005a	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0005e	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00062	89 10		 mov	 DWORD PTR [eax], edx
  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00067	5e		 pop	 esi

; 1548 : 		}

  00068	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Putc
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Putc:

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN12@Putc
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN18@Putc
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN18@Putc
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN19@Putc:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Putc
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Putc:

; 1520 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1521 : 		}

  0006d	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T163605 = -16						; size = 8
$T163606 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T163605[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 31		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	84 c9		 test	 cl, cl
  0005b	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	6a 01		 push	 1
  00061	51		 push	 ecx
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	51		 push	 ecx
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	52		 push	 edx
  0006a	8d 44 24 28	 lea	 eax, DWORD PTR $T163606[esp+48]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00083	47		 inc	 edi
  00084	4b		 dec	 ebx
  00085	eb 8b		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00094	89 11		 mov	 DWORD PTR [ecx], edx
  00096	8b c1		 mov	 eax, ecx
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 166  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 171  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@22
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@22:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@23
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@23:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@24
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@24:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 17		 jb	 SHORT $LN5@begin
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	51		 push	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1503 : 		}

  0001a	c2 04 00	 ret	 4

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

$LN5@begin:
  0001d	56		 push	 esi
  0001e	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1503 : 		}

  00031	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1512 : 		return (_STRING_ITERATOR(_Myptr() + _Mysize));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 05		 jb	 SHORT $LN5@end
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	eb 03		 jmp	 SHORT $LN6@end
$LN5@end:
  0000b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN6@end:
  0000e	56		 push	 esi
  0000f	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00013	51		 push	 ecx
  00014	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00017	03 c8		 add	 ecx, eax
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 1513 : 		}

  00024	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end
_TEXT	ENDS
PUBLIC	?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::end
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@4
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@4:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@4
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@4:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@4
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@4:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@4
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@4:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@V?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T165026 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T165026[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T165031 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T165031[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append
$LN68@append:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T165542 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T165542[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@2

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@2:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@2

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@2:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@2
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append@2
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append@2
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@2:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append@2
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append@2:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append@2

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append@2
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append@2

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@2:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append@2
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append@2
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append@2:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append@2:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append@2:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append@2
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append@2
$LN70@append@2:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append@2:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append@2
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append@2:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append@2:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@3
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@3
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@3
$LN14@append@3:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@3:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@3
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@3
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@3
$LN18@append@3:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@3:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@3

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@3
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@3:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@3:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@3
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@3
$LN2@append@3:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@3:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@3
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@3
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@3:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@3
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@3:
  000a2	76 6c		 jbe	 SHORT $LN96@append@3

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@3
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@3

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@3:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@3
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@3
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@3:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@3:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@3:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@3
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@3:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@3:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@25
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@25:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@25
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@25:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@26
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@26:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@26
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@26:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	??_7ErrorException@CipherShed@@6B@		; CipherShed::ErrorException::`vftable'
PUBLIC	??0ErrorException@CipherShed@@QAE@PAD@Z		; CipherShed::ErrorException::ErrorException
PUBLIC	??_R4ErrorException@CipherShed@@6B@		; CipherShed::ErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUErrorException@CipherShed@@@8		; CipherShed::ErrorException `RTTI Type Descriptor'
PUBLIC	??_R3ErrorException@CipherShed@@8		; CipherShed::ErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ErrorException@CipherShed@@8		; CipherShed::ErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ErrorException@CipherShed@@8	; CipherShed::ErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::ErrorException::Show
;	COMDAT ??_R1A@?0A@EA@ErrorException@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@ErrorException@CipherShed@@8 DD FLAT:??_R0?AUErrorException@CipherShed@@@8 ; CipherShed::ErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2ErrorException@CipherShed@@8
rdata$r	SEGMENT
??_R2ErrorException@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@ErrorException@CipherShed@@8 ; CipherShed::ErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3ErrorException@CipherShed@@8
rdata$r	SEGMENT
??_R3ErrorException@CipherShed@@8 DD 00H		; CipherShed::ErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUErrorException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUErrorException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUErrorException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ErrorException@CipherShed@@6B@
rdata$r	SEGMENT
??_R4ErrorException@CipherShed@@6B@ DD 00H		; CipherShed::ErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUErrorException@CipherShed@@@8
	DD	FLAT:??_R3ErrorException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7ErrorException@CipherShed@@6B@
CONST	SEGMENT
??_7ErrorException@CipherShed@@6B@ DD FLAT:??_R4ErrorException@CipherShed@@6B@ ; CipherShed::ErrorException::`vftable'
	DD	FLAT:?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	ENDS
;	COMDAT ??0ErrorException@CipherShed@@QAE@PAD@Z
_TEXT	SEGMENT
_langId$ = 8						; size = 4
??0ErrorException@CipherShed@@QAE@PAD@Z PROC		; CipherShed::ErrorException::ErrorException, COMDAT
; _this$ = ecx

; 37   : 		ErrorException (char *langId) : ErrLangId (langId) { }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _langId$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ErrorException@CipherShed@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	33 d2		 xor	 edx, edx
  00011	c7 40 20 07 00
	00 00		 mov	 DWORD PTR [eax+32], 7
  00018	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0001f	66 89 50 0c	 mov	 WORD PTR [eax+12], dx
  00023	c2 04 00	 ret	 4
??0ErrorException@CipherShed@@QAE@PAD@Z ENDP		; CipherShed::ErrorException::ErrorException
_TEXT	ENDS
EXTRN	_Error:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z PROC	; CipherShed::ErrorException::Show, COMDAT
; _this$ = ecx

; 42   : 			if (ErrMsg.empty())

  00000	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00004	75 0f		 jne	 SHORT $LN2@Show@2

; 43   : 				::Error (ErrLangId);

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _Error
  0000f	83 c4 04	 add	 esp, 4

; 46   : 		}

  00012	c2 04 00	 ret	 4
$LN2@Show@2:

; 44   : 			else
; 45   : 				::ErrorDirect (ErrMsg.c_str());

  00015	83 79 20 08	 cmp	 DWORD PTR [ecx+32], 8
  00019	72 0d		 jb	 SHORT $LN11@Show@2
  0001b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _ErrorDirect
  00024	59		 pop	 ecx

; 46   : 		}

  00025	c2 04 00	 ret	 4

; 44   : 			else
; 45   : 				::ErrorDirect (ErrMsg.c_str());

$LN11@Show@2:
  00028	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _ErrorDirect
  00031	59		 pop	 ecx

; 46   : 		}

  00032	c2 04 00	 ret	 4
?Show@ErrorException@CipherShed@@UBEXPAUHWND__@@@Z ENDP	; CipherShed::ErrorException::Show
_TEXT	ENDS
PUBLIC	??0File@CipherShed@@QAE@XZ			; CipherShed::File::File
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.h
;	COMDAT ??0File@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0File@CipherShed@@QAE@XZ PROC				; CipherShed::File::File, COMDAT
; _this$ = ecx

; 25   : 		File () : FileOpen (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00007	c7 40 30 0f 00
	00 00		 mov	 DWORD PTR [eax+48], 15	; 0000000fH
  0000e	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00011	88 48 1c	 mov	 BYTE PTR [eax+28], cl
  00014	c3		 ret	 0
??0File@CipherShed@@QAE@XZ ENDP				; CipherShed::File::File
_TEXT	ENDS
PUBLIC	??1File@CipherShed@@QAE@XZ			; CipherShed::File::~File
; Function compile flags: /Ogtpy
;	COMDAT ??1File@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1File@CipherShed@@QAE@XZ PROC				; CipherShed::File::~File, COMDAT
; _this$ = ecx

; 27   : 		~File () { Close(); }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00007	74 13		 je	 SHORT $LN5@File
  00009	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000c	75 0a		 jne	 SHORT $LN4@File
  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN4@File:
  00018	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0
$LN5@File:
  0001c	83 7e 30 10	 cmp	 DWORD PTR [esi+48], 16	; 00000010H
  00020	72 0c		 jb	 SHORT $LN24@File
  00022	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN24@File:
  0002e	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
  00035	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0003c	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0
  00040	5e		 pop	 esi
  00041	c3		 ret	 0
??1File@CipherShed@@QAE@XZ ENDP				; CipherShed::File::~File
_TEXT	ENDS
PUBLIC	??0Partition@CipherShed@@QAE@XZ			; CipherShed::Partition::Partition
; Function compile flags: /Ogtpy
;	COMDAT ??0Partition@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Partition@CipherShed@@QAE@XZ PROC			; CipherShed::Partition::Partition, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00007	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0000c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0000f	88 48 04	 mov	 BYTE PTR [eax+4], cl
  00012	89 50 58	 mov	 DWORD PTR [eax+88], edx
  00015	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00018	88 48 44	 mov	 BYTE PTR [eax+68], cl
  0001b	c7 40 7c 07 00
	00 00		 mov	 DWORD PTR [eax+124], 7
  00022	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  00025	66 89 48 68	 mov	 WORD PTR [eax+104], cx
  00029	c3		 ret	 0
??0Partition@CipherShed@@QAE@XZ ENDP			; CipherShed::Partition::Partition
_TEXT	ENDS
PUBLIC	??1Partition@CipherShed@@QAE@XZ			; CipherShed::Partition::~Partition
; Function compile flags: /Ogtpy
;	COMDAT ??1Partition@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Partition@CipherShed@@QAE@XZ PROC			; CipherShed::Partition::~Partition, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 7c 08	 cmp	 DWORD PTR [esi+124], 8
  00008	72 0c		 jb	 SHORT $LN24@Partition
  0000a	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN24@Partition:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 7c 07 00
	00 00		 mov	 DWORD PTR [esi+124], 7
  00021	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00024	66 89 4e 68	 mov	 WORD PTR [esi+104], cx
  00028	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN50@Partition
  0002e	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN50@Partition:
  0003a	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00041	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00044	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  00047	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN76@Partition
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN76@Partition:
  00059	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0005c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00063	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
??1Partition@CipherShed@@QAE@XZ ENDP			; CipherShed::Partition::~Partition
_TEXT	ENDS
PUBLIC	??1Device@CipherShed@@QAE@XZ			; CipherShed::Device::~Device
; Function compile flags: /Ogtpy
;	COMDAT ??1Device@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Device@CipherShed@@QAE@XZ PROC			; CipherShed::Device::~Device, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00007	74 13		 je	 SHORT $LN7@Device
  00009	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000c	75 0a		 jne	 SHORT $LN6@Device
  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN6@Device:
  00018	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0
$LN7@Device:
  0001c	83 7e 30 10	 cmp	 DWORD PTR [esi+48], 16	; 00000010H
  00020	72 0c		 jb	 SHORT $LN26@Device
  00022	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN26@Device:
  0002e	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
  00035	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0003c	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0
  00040	5e		 pop	 esi
  00041	c3		 ret	 0
??1Device@CipherShed@@QAE@XZ ENDP			; CipherShed::Device::~Device
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
_TEXT	ENDS
;	COMDAT ??1Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ PROC ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::~Finally1732, COMDAT
; _this$ = esi

; 1732 : 			finally_do_arg (string, infFileName, { DeleteFile (finally_arg.c_str()); });

  00000	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00004	57		 push	 edi
  00005	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00008	72 04		 jb	 SHORT $LN13@Finally173
  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	eb 02		 jmp	 SHORT $LN14@Finally173
$LN13@Finally173:
  0000e	8b c7		 mov	 eax, edi
$LN14@Finally173:
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  00017	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0001b	72 0b		 jb	 SHORT $LN31@Finally173
  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN31@Finally173:
  00028	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0002f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00036	c6 07 00	 mov	 BYTE PTR [edi], 0
  00039	5f		 pop	 edi
  0003a	c3		 ret	 0
??1Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::~Finally1732
_TEXT	ENDS
PUBLIC	?front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAUPartition@CipherShed@@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAUPartition@CipherShed@@XZ
_TEXT	SEGMENT
?front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAUPartition@CipherShed@@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::front, COMDAT
; _this$ = ecx

; 640  : 		return (*begin());

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 30		 mov	 esi, DWORD PTR [eax]
  00008	85 c9		 test	 ecx, ecx
  0000a	75 16		 jne	 SHORT $LN48@front
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00011	33 c9		 xor	 ecx, ecx
$LN43@front:
  00013	3b 71 14	 cmp	 esi, DWORD PTR [ecx+20]
  00016	75 05		 jne	 SHORT $LN49@front
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN49@front:
  0001d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00020	5e		 pop	 esi

; 641  : 		}

  00021	c3		 ret	 0
$LN48@front:

; 640  : 		return (*begin());

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	eb ed		 jmp	 SHORT $LN43@front
?front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAUPartition@CipherShed@@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::front
_TEXT	ENDS
PUBLIC	??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append@4

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append@4:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append@4
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append@4
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append@4:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append@4
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append@4:
  00044	76 58		 jbe	 SHORT $LN64@append@4

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append@4
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append@4:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append@4
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append@4
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append@4:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append@4:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append@4:
  0009e	5f		 pop	 edi
$LN63@append@4:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
$T169991 = -8						; size = 8
$T169990 = -8						; size = 8
$T169950 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1285 : 		{	// erase substring [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b e9		 mov	 ebp, ecx

; 1286 : 		size_type _Count = _Pdif(_First, begin());

  00007	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0000f	72 05		 jb	 SHORT $LN7@erase@3
  00011	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00014	eb 03		 jmp	 SHORT $LN8@erase@3
$LN7@erase@3:
  00016	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
$LN8@erase@3:
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN14@erase@3
  0001d	8d 55 04	 lea	 edx, DWORD PTR [ebp+4]
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN24@erase@3
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	eb 02		 jmp	 SHORT $LN25@erase@3
$LN24@erase@3:
  00029	8b c2		 mov	 eax, edx
$LN25@erase@3:
  0002b	3b c7		 cmp	 eax, edi
  0002d	77 14		 ja	 SHORT $LN14@erase@3
  0002f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00032	72 04		 jb	 SHORT $LN28@erase@3
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	eb 02		 jmp	 SHORT $LN29@erase@3
$LN28@erase@3:
  00038	8b c2		 mov	 eax, edx
$LN29@erase@3:
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR [ebp+20]
  0003d	03 c8		 add	 ecx, eax
  0003f	3b f9		 cmp	 edi, ecx
  00041	76 05		 jbe	 SHORT $LN13@erase@3
$LN14@erase@3:
  00043	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@erase@3:
  00048	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  0004c	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
  00050	89 44 24 10	 mov	 DWORD PTR $T169950[esp+24], eax
  00054	8b f1		 mov	 esi, ecx
  00056	85 c9		 test	 ecx, ecx
  00058	75 04		 jne	 SHORT $LN32@erase@3
  0005a	33 db		 xor	 ebx, ebx
  0005c	eb 1e		 jmp	 SHORT $LN33@erase@3
$LN32@erase@3:
  0005e	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00061	74 15		 je	 SHORT $LN34@erase@3
  00063	85 c0		 test	 eax, eax
  00065	74 04		 je	 SHORT $LN37@erase@3
  00067	3b c5		 cmp	 eax, ebp
  00069	74 0d		 je	 SHORT $LN34@erase@3
$LN37@erase@3:
  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00070	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  00074	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
$LN34@erase@3:
  00078	2b f7		 sub	 esi, edi
  0007a	8b de		 mov	 ebx, esi
$LN33@erase@3:

; 1287 : 		erase(_Count, _Pdif(_Last, _First));

  0007c	8b 54 24 28	 mov	 edx, DWORD PTR __Last$[esp+20]
  00080	8b f9		 mov	 edi, ecx
  00082	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Last$[esp+24]
  00086	89 44 24 10	 mov	 DWORD PTR $T169991[esp+24], eax
  0008a	89 54 24 10	 mov	 DWORD PTR $T169990[esp+24], edx
  0008e	8b f1		 mov	 esi, ecx
  00090	85 c9		 test	 ecx, ecx
  00092	74 14		 je	 SHORT $LN49@erase@3
$LN48@erase@3:
  00094	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00097	74 0d		 je	 SHORT $LN50@erase@3
  00099	85 d2		 test	 edx, edx
  0009b	74 04		 je	 SHORT $LN53@erase@3
  0009d	3b d0		 cmp	 edx, eax
  0009f	74 05		 je	 SHORT $LN50@erase@3
$LN53@erase@3:
  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN50@erase@3:
  000a6	2b f7		 sub	 esi, edi
$LN49@erase@3:
  000a8	56		 push	 esi
  000a9	53		 push	 ebx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1288 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  000b1	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  000b5	72 05		 jb	 SHORT $LN64@erase@3
  000b7	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000ba	eb 03		 jmp	 SHORT $LN65@erase@3
$LN64@erase@3:
  000bc	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
$LN65@erase@3:
  000bf	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  000c3	55		 push	 ebp
  000c4	03 c3		 add	 eax, ebx
  000c6	50		 push	 eax
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  000ce	5f		 pop	 edi
  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp
  000d3	5b		 pop	 ebx

; 1289 : 		}

  000d4	83 c4 08	 add	 esp, 8
  000d7	c2 14 00	 ret	 20			; 00000014H
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@V?$allocator@UPartition@CipherShed@@@1@@Z ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@V?$allocator@UPartition@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@V?$allocator@UPartition@CipherShed@@@1@@Z PROC ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@V?$allocator@UPartition@CipherShed@@@1@@Z ENDP ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@5
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@5
$LN14@append@5:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@5:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@5
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@5
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@5
$LN18@append@5:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@5

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@5
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@5:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@5:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@5
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@5
$LN2@append@5:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@5:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@5
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@5
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@5:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@5
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@5:
  0009c	76 61		 jbe	 SHORT $LN92@append@5

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@5
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@5

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@5:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@5
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@5
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@5:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@5:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@5:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@5
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@5:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@5:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 941  : 		return (append((size_type)1, _Ch));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	50		 push	 eax
  00005	6a 01		 push	 1
  00007	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 942  : 		}

  0000c	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T171410 = -8						; size = 8
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1292 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1293 : 		erase(begin(), end());

  00009	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0000c	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00012	72 04		 jb	 SHORT $LN7@clear
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	eb 02		 jmp	 SHORT $LN8@clear
$LN7@clear:
  00018	8b c6		 mov	 eax, esi
$LN8@clear:
  0001a	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001d	8d 2c 01	 lea	 ebp, DWORD PTR [ecx+eax]
  00020	85 ed		 test	 ebp, ebp
  00022	74 20		 je	 SHORT $LN14@clear
  00024	83 fa 10	 cmp	 edx, 16			; 00000010H
  00027	72 04		 jb	 SHORT $LN24@clear
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	eb 02		 jmp	 SHORT $LN25@clear
$LN24@clear:
  0002d	8b c6		 mov	 eax, esi
$LN25@clear:
  0002f	3b c5		 cmp	 eax, ebp
  00031	77 11		 ja	 SHORT $LN14@clear
  00033	83 fa 10	 cmp	 edx, 16			; 00000010H
  00036	72 04		 jb	 SHORT $LN28@clear
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	eb 02		 jmp	 SHORT $LN29@clear
$LN28@clear:
  0003c	8b c6		 mov	 eax, esi
$LN29@clear:
  0003e	03 c8		 add	 ecx, eax
  00040	3b e9		 cmp	 ebp, ecx
  00042	76 05		 jbe	 SHORT $LN13@clear
$LN14@clear:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@clear:
  00049	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0004f	72 04		 jb	 SHORT $LN34@clear
  00051	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00053	eb 02		 jmp	 SHORT $LN35@clear
$LN34@clear:
  00055	8b de		 mov	 ebx, esi
$LN35@clear:
  00057	85 db		 test	 ebx, ebx
  00059	74 1f		 je	 SHORT $LN41@clear
  0005b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005e	72 04		 jb	 SHORT $LN51@clear
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	eb 02		 jmp	 SHORT $LN52@clear
$LN51@clear:
  00064	8b c6		 mov	 eax, esi
$LN52@clear:
  00066	3b c3		 cmp	 eax, ebx
  00068	77 10		 ja	 SHORT $LN41@clear
  0006a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0006d	72 02		 jb	 SHORT $LN55@clear
  0006f	8b 36		 mov	 esi, DWORD PTR [esi]
$LN55@clear:
  00071	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00074	03 c6		 add	 eax, esi
  00076	3b d8		 cmp	 ebx, eax
  00078	76 05		 jbe	 SHORT $LN40@clear
$LN41@clear:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN40@clear:
  0007f	55		 push	 ebp
  00080	57		 push	 edi
  00081	53		 push	 ebx
  00082	57		 push	 edi
  00083	8d 4c 24 20	 lea	 ecx, DWORD PTR $T171410[esp+40]
  00087	51		 push	 ecx
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1294 : 		}

  00093	83 c4 08	 add	 esp, 8
  00096	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@7:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@7
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Roff$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 10	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00020	8b 44 24 0c	 mov	 eax, DWORD PTR __Right$[esp+4]
  00024	52		 push	 edx
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 633  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 637  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	88 46 04	 mov	 BYTE PTR [esi+4], al
  00016	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 640  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	51		 push	 ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 640  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T172363 = -44						; size = 4
$T172360 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T172360[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T172363[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T172360[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T172360[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T172360[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	6a ff		 push	 -1
  00052	53		 push	 ebx
  00053	51		 push	 ecx
  00054	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T172360[esp+68]
  00058	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00065	6a ff		 push	 -1
  00067	53		 push	 ebx
  00068	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007d	83 7c 24 28 10	 cmp	 DWORD PTR $T172360[esp+80], 16 ; 00000010H
  00082	72 0d		 jb	 SHORT $LN88@operator@12
  00084	8b 54 24 14	 mov	 edx, DWORD PTR $T172360[esp+60]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN88@operator@12:
  00091	8b c6		 mov	 eax, esi

; 25   : 	}

  00093	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T172360[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
$T172717 = -44						; size = 4
$T172714 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 63   : 	{	// return string + character

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 64   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T172714[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T172717[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T172714[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T172714[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T172714[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	51		 push	 ecx
  00051	6a 01		 push	 1
  00053	8d 4c 24 18	 lea	 ecx, DWORD PTR $T172714[esp+64]
  00057	89 5c 24 3c	 mov	 DWORD PTR __$EHRec$[esp+72], ebx
  0005b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00060	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00064	6a ff		 push	 -1
  00066	53		 push	 ebx
  00067	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	50		 push	 eax
  00072	8b ce		 mov	 ecx, esi
  00074	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	83 7c 24 28 10	 cmp	 DWORD PTR $T172714[esp+80], 16 ; 00000010H
  00081	72 0d		 jb	 SHORT $LN86@operator@13
  00083	8b 54 24 14	 mov	 edx, DWORD PTR $T172714[esp+60]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	83 c4 04	 add	 esp, 4
$LN86@operator@13:
  00090	8b c6		 mov	 eax, esi

; 65   : 	}

  00092	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T172714[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@27
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@27:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@14:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@14
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@28
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@28:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@28
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@28:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T173661 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T173661[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T173783 = -164						; size = 4
$T173777 = -160						; size = 4
$T173779 = -156						; size = 28
$T173778 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 1790 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1791 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T173783[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 1792 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 1793 : 				_Locinfo(_Ploc->name()));

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T173777[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T173779[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T173778[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T173783[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T173778[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T173783[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T173779[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T173779[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 1794 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 1795 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T173777[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T173783[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T173783[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T173779[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T173919 = -164						; size = 4
$T173913 = -160						; size = 4
$T173915 = -156						; size = 28
$T173914 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2031 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2032 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T173919[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat@2
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat@2

; 2033 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2034 : 				_Locinfo(_Ploc->name()));

  00049	6a 20		 push	 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T173913[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat@2
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T173915[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T173914[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T173919[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat@2:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat@2
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T173914[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T173919[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat@2
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T173915[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat@2
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T173915[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat@2:

; 2035 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 2036 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T173913[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T173919[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T173919[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T173915[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@29
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@29:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@29
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@29:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ErrorException@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::ErrorException::ErrorException
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
;	COMDAT ??0ErrorException@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_errMsg$ = 8						; size = 4
??0ErrorException@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; CipherShed::ErrorException::ErrorException, COMDAT
; _this$ = ecx

; 38   : 		ErrorException (const wstring &errMsg) : ErrMsg (errMsg) { }

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _errMsg$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ErrorException@CipherShed@@6B@
  00014	50		 push	 eax
  00015	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0001c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00023	52		 push	 edx
  00024	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0ErrorException@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; CipherShed::ErrorException::ErrorException
_TEXT	ENDS
PUBLIC	??0Partition@CipherShed@@QAE@ABU01@@Z		; CipherShed::Partition::Partition
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Partition@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Partition@CipherShed@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Partition@CipherShed@@QAE@ABU01@@Z$1
__ehfuncinfo$??0Partition@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Partition@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0Partition@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Partition@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::Partition::Partition, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0Partition@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b e9		 mov	 ebp, ecx
  00027	89 6c 24 14	 mov	 DWORD PTR _this$[esp+36], ebp
  0002b	8b 5c 24 28	 mov	 ebx, DWORD PTR ___that$[esp+32]
  0002f	6a ff		 push	 -1
  00031	33 f6		 xor	 esi, esi
  00033	56		 push	 esi
  00034	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  0003b	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  0003e	53		 push	 ebx
  0003f	c6 45 04 00	 mov	 BYTE PTR [ebp+4], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	89 74 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], esi
  0004c	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  0004f	8d 7d 20	 lea	 edi, DWORD PTR [ebp+32]
  00052	b9 08 00 00 00	 mov	 ecx, 8
  00057	f3 a5		 rep movsd
  00059	6a ff		 push	 -1
  0005b	8d 4d 40	 lea	 ecx, DWORD PTR [ebp+64]
  0005e	33 f6		 xor	 esi, esi
  00060	8d 43 40	 lea	 eax, DWORD PTR [ebx+64]
  00063	56		 push	 esi
  00064	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006b	89 71 14	 mov	 DWORD PTR [ecx+20], esi
  0006e	50		 push	 eax
  0006f	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  0007b	89 45 5c	 mov	 DWORD PTR [ebp+92], eax
  0007e	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]
  00081	89 4d 60	 mov	 DWORD PTR [ebp+96], ecx
  00084	6a ff		 push	 -1
  00086	8d 4d 64	 lea	 ecx, DWORD PTR [ebp+100]
  00089	83 c3 64	 add	 ebx, 100		; 00000064H
  0008c	56		 push	 esi
  0008d	33 d2		 xor	 edx, edx
  0008f	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00096	89 71 14	 mov	 DWORD PTR [ecx+20], esi
  00099	53		 push	 ebx
  0009a	c6 44 24 2c 01	 mov	 BYTE PTR __$EHRec$[esp+56], 1
  0009f	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  000a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000a8	8b c5		 mov	 eax, ebp
  000aa	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5d		 pop	 ebp
  000b9	5b		 pop	 ebx
  000ba	83 c4 10	 add	 esp, 16			; 00000010H
  000bd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Partition@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Partition@CipherShed@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 40	 add	 ecx, 64			; 00000040H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Partition@CipherShed@@QAE@ABU01@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0001a	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Partition@CipherShed@@QAE@ABU01@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Partition@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::Partition::Partition
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_a$ = 8							; size = 28
??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::Finally1732, COMDAT
; _this$ = esi

; 1732 : 			finally_do_arg (string, infFileName, { DeleteFile (finally_arg.c_str()); });

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	33 c0		 xor	 eax, eax
  00022	6a ff		 push	 -1
  00024	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00027	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0002e	50		 push	 eax
  0002f	89 44 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], eax
  00033	88 46 04	 mov	 BYTE PTR [esi+4], al
  00036	8d 44 24 1c	 lea	 eax, DWORD PTR _a$[esp+20]
  0003a	50		 push	 eax
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	83 7c 24 2c 10	 cmp	 DWORD PTR _a$[esp+36], 16 ; 00000010H
  00047	72 0d		 jb	 SHORT $LN57@Finally173@2
  00049	8b 4c 24 18	 mov	 ecx, DWORD PTR _a$[esp+16]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00053	83 c4 04	 add	 esp, 4
$LN57@Finally173@2:
  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
  00067	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _a$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 02		 lea	 eax, DWORD PTR [edx]
  0000e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00011	33 c8		 xor	 ecx, eax
  00013	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00018	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::Finally1732
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@5:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@5
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@15:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@15
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 922  : 		}

  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@16:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@16
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T175235 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T175235[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@6:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@6
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@17:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@17
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 922  : 		}

  00028	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T175511 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00016	89 44 24 04	 mov	 DWORD PTR $T175511[esp+8], eax
  0001a	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001e	8b 44 24 10	 mov	 eax, DWORD PTR __Off$[esp+4]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 2000 : 		}

  0002f	59		 pop	 ecx
  00030	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T175672 = -76						; size = 4
__Str$152710 = -72					; size = 28
__Str$152707 = -72					; size = 28
__Nul$152712 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00031	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00034	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  00038	33 db		 xor	 ebx, ebx
  0003a	89 5c 24 10	 mov	 DWORD PTR $T175672[esp+92], ebx
  0003e	f6 c2 02	 test	 dl, 2
  00041	75 63		 jne	 SHORT $LN4@str
  00043	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00046	39 18		 cmp	 DWORD PTR [eax], ebx
  00048	74 5c		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0004f	3b d0		 cmp	 edx, eax
  00051	72 02		 jb	 SHORT $LN8@str
  00053	8b c2		 mov	 eax, edx
$LN8@str:
  00055	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	2b c1		 sub	 eax, ecx
  0005c	50		 push	 eax
  0005d	51		 push	 ecx
  0005e	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00063	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$152707[esp+100]
  00067	89 7c 24 34	 mov	 DWORD PTR __Str$152707[esp+124], edi
  0006b	89 5c 24 30	 mov	 DWORD PTR __Str$152707[esp+120], ebx
  0006f	88 5c 24 20	 mov	 BYTE PTR __Str$152707[esp+104], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	89 5c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], ebx
$LN286@str:

; 65   : 			return (_Str);

  0007c	6a ff		 push	 -1
  0007e	53		 push	 ebx
  0007f	8d 54 24 1c	 lea	 edx, DWORD PTR __Str$152707[esp+100]
  00083	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00086	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00089	52		 push	 edx
  0008a	8b ce		 mov	 ecx, esi
  0008c	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00094	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$152707[esp+116], 16 ; 00000010H
  00099	0f 82 8c 00 00
	00		 jb	 $LN274@str
  0009f	8b 44 24 18	 mov	 eax, DWORD PTR __Str$152707[esp+96]
  000a3	50		 push	 eax
  000a4	eb 7d		 jmp	 SHORT $LN285@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000a6	f6 c2 04	 test	 dl, 4
  000a9	75 3b		 jne	 SHORT $LN2@str
  000ab	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ae	39 1a		 cmp	 DWORD PTR [edx], ebx
  000b0	74 34		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000b2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b5	8b 00		 mov	 eax, DWORD PTR [eax]
  000b7	03 02		 add	 eax, DWORD PTR [edx]
  000b9	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000bc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000be	2b c1		 sub	 eax, ecx
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000c7	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$152710[esp+100]
  000cb	89 7c 24 34	 mov	 DWORD PTR __Str$152710[esp+124], edi
  000cf	89 5c 24 30	 mov	 DWORD PTR __Str$152710[esp+120], ebx
  000d3	88 5c 24 20	 mov	 BYTE PTR __Str$152710[esp+104], bl
  000d7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000dc	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000e4	eb 96		 jmp	 SHORT $LN286@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000e6	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000eb	89 7c 24 48	 mov	 DWORD PTR __Nul$152712[esp+116], edi
  000ef	89 5c 24 44	 mov	 DWORD PTR __Nul$152712[esp+112], ebx
  000f3	88 5c 24 34	 mov	 BYTE PTR __Nul$152712[esp+96], bl

; 75   : 			return (_Nul);

  000f7	6a ff		 push	 -1
  000f9	53		 push	 ebx
  000fa	8d 4c 24 38	 lea	 ecx, DWORD PTR __Nul$152712[esp+100]
  000fe	51		 push	 ecx
  000ff	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00102	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00105	8b ce		 mov	 ecx, esi
  00107	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0010f	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00112	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00117	83 7c 24 48 10	 cmp	 DWORD PTR __Nul$152712[esp+116], 16 ; 00000010H
  0011c	72 0d		 jb	 SHORT $LN274@str
  0011e	8b 54 24 34	 mov	 edx, DWORD PTR __Nul$152712[esp+96]
  00122	52		 push	 edx
$LN285@str:
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	83 c4 04	 add	 esp, 4
$LN274@str:
  0012b	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  0012d	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  00140	33 cc		 xor	 ecx, esp
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	83 c4 4c	 add	 esp, 76			; 0000004cH
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$152707[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$152710[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$152712[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T176782 = -76						; size = 4
__Str$152733 = -72					; size = 28
__Str$152730 = -72					; size = 28
__Nul$152735 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00033	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00036	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  0003a	33 ff		 xor	 edi, edi
  0003c	89 7c 24 10	 mov	 DWORD PTR $T176782[esp+92], edi
  00040	f6 c2 02	 test	 dl, 2
  00043	75 6e		 jne	 SHORT $LN4@str@2
  00045	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00048	39 39		 cmp	 DWORD PTR [ecx], edi
  0004a	74 67		 je	 SHORT $LN4@str@2

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00051	3b d1		 cmp	 edx, ecx
  00053	72 02		 jb	 SHORT $LN8@str@2
  00055	8b ca		 mov	 ecx, edx
$LN8@str@2:
  00057	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	2b c8		 sub	 ecx, eax
  0005e	d1 f9		 sar	 ecx, 1
  00060	51		 push	 ecx
  00061	33 d2		 xor	 edx, edx
  00063	bb 07 00 00 00	 mov	 ebx, 7
  00068	50		 push	 eax
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$152730[esp+100]
  0006d	89 5c 24 34	 mov	 DWORD PTR __Str$152730[esp+124], ebx
  00071	89 7c 24 30	 mov	 DWORD PTR __Str$152730[esp+120], edi
  00075	66 89 54 24 20	 mov	 WORD PTR __Str$152730[esp+104], dx
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007f	89 7c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], edi
$LN304@str@2:

; 65   : 			return (_Str);

  00083	6a ff		 push	 -1
  00085	57		 push	 edi
  00086	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$152730[esp+100]
  0008a	33 c0		 xor	 eax, eax
  0008c	51		 push	 ecx
  0008d	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00090	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00093	8b ce		 mov	 ecx, esi
  00095	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	83 7c 24 2c 08	 cmp	 DWORD PTR __Str$152730[esp+116], 8
  000a3	0f 82 9d 00 00
	00		 jb	 $LN292@str@2
  000a9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$152730[esp+96]
  000ad	52		 push	 edx
  000ae	e9 8b 00 00 00	 jmp	 $LN303@str@2
$LN4@str@2:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000b3	f6 c2 04	 test	 dl, 4
  000b6	75 43		 jne	 SHORT $LN2@str@2
  000b8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000bb	39 39		 cmp	 DWORD PTR [ecx], edi
  000bd	74 3c		 je	 SHORT $LN2@str@2

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000bf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000c4	8b 12		 mov	 edx, DWORD PTR [edx]
  000c6	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	2b c8		 sub	 ecx, eax
  000d0	d1 f9		 sar	 ecx, 1
  000d2	51		 push	 ecx
  000d3	33 d2		 xor	 edx, edx
  000d5	bb 07 00 00 00	 mov	 ebx, 7
  000da	50		 push	 eax
  000db	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$152733[esp+100]
  000df	89 5c 24 34	 mov	 DWORD PTR __Str$152733[esp+124], ebx
  000e3	89 7c 24 30	 mov	 DWORD PTR __Str$152733[esp+120], edi
  000e7	66 89 54 24 20	 mov	 WORD PTR __Str$152733[esp+104], dx
  000ec	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000f1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000f9	eb 88		 jmp	 SHORT $LN304@str@2
$LN2@str@2:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000fb	bb 07 00 00 00	 mov	 ebx, 7
  00100	33 c0		 xor	 eax, eax
  00102	89 5c 24 48	 mov	 DWORD PTR __Nul$152735[esp+116], ebx
  00106	89 7c 24 44	 mov	 DWORD PTR __Nul$152735[esp+112], edi
  0010a	66 89 44 24 34	 mov	 WORD PTR __Nul$152735[esp+96], ax

; 75   : 			return (_Nul);

  0010f	6a ff		 push	 -1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00116	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00119	57		 push	 edi
  0011a	8d 54 24 38	 lea	 edx, DWORD PTR __Nul$152735[esp+100]
  0011e	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00122	52		 push	 edx
  00123	8b ce		 mov	 ecx, esi
  00125	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00132	83 7c 24 48 08	 cmp	 DWORD PTR __Nul$152735[esp+116], 8
  00137	72 0d		 jb	 SHORT $LN292@str@2
  00139	8b 44 24 34	 mov	 eax, DWORD PTR __Nul$152735[esp+96]
  0013d	50		 push	 eax
$LN303@str@2:
  0013e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00143	83 c4 04	 add	 esp, 4
$LN292@str@2:
  00146	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  00148	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  0015b	33 cc		 xor	 ecx, esp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 4c	 add	 esp, 76			; 0000004cH
  00165	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$152730[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$152733[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$152735[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T178005 = -80						; size = 28
$T178004 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be ff ff ff 01	 mov	 esi, 33554431		; 01ffffffH
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T178005[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T178005[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T178005[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T178005[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T178005[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T178004[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T178004[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T178004[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T178005[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T178302 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T178302[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T178452 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T178452[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_falsena:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_falsena
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 181  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T178602 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T178602[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_truenam:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_truenam
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 186  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$153710 = -36					; size = 4
__Lock$178761 = -32					; size = 4
__Lock$153709 = -28					; size = 4
$T178754 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$178783 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$153709[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$153710[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$178761[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN10@use_facet:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$178761[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet
$LN30@use_facet:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet
$LN20@use_facet:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet
$LN16@use_facet:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$153710[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T178754[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T178754[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$153710[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$178783[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$178783[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$153709[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$153709[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$153745 = -36					; size = 4
__Lock$178808 = -32					; size = 4
__Lock$153744 = -28					; size = 4
$T178801 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$178830 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$153744[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$153745[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$178808[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$178808[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$153745[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T178801[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T178801[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$153745[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$178830[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$178830[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$153744[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$153744[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T178851 = -44						; size = 4
$T178848 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	8b c2		 mov	 eax, edx
  0002d	89 5c 24 0c	 mov	 DWORD PTR $T178851[esp+56], ebx
  00031	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T178848[esp+80], 15 ; 0000000fH
  00039	89 5c 24 24	 mov	 DWORD PTR $T178848[esp+76], ebx
  0003d	88 5c 24 14	 mov	 BYTE PTR $T178848[esp+60], bl
  00041	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL98@operator@18:
  00044	8a 08		 mov	 cl, BYTE PTR [eax]
  00046	40		 inc	 eax
  00047	3a cb		 cmp	 cl, bl
  00049	75 f9		 jne	 SHORT $LL98@operator@18
  0004b	2b c6		 sub	 eax, esi
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	8d 4c 24 18	 lea	 ecx, DWORD PTR $T178848[esp+64]
  00053	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00058	8b 44 24 44	 mov	 eax, DWORD PTR __Right$[esp+52]
  0005c	6a ff		 push	 -1
  0005e	53		 push	 ebx
  0005f	50		 push	 eax
  00060	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T178848[esp+68]
  00064	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00068	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006d	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00071	6a ff		 push	 -1
  00073	53		 push	 ebx
  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007b	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00089	83 7c 24 28 10	 cmp	 DWORD PTR $T178848[esp+80], 16 ; 00000010H
  0008e	72 0d		 jb	 SHORT $LN99@operator@18
  00090	8b 4c 24 14	 mov	 ecx, DWORD PTR $T178848[esp+60]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009a	83 c4 04	 add	 esp, 4
$LN99@operator@18:
  0009d	8b c6		 mov	 eax, esi

; 35   : 	}

  0009f	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T178848[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T179239 = -44						; size = 4
$T179236 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T179236[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T179239[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T179236[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T179236[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T179236[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@19:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@19
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T179236[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T179236[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@19
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T179236[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@19:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T179236[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T179601 = -44						; size = 4
$T179598 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T179598[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T179601[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T179598[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T179598[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T179598[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	6a ff		 push	 -1
  00055	57		 push	 edi
  00056	52		 push	 edx
  00057	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T179598[esp+68]
  0005b	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  0005f	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00064	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00068	6a ff		 push	 -1
  0006a	33 c9		 xor	 ecx, ecx
  0006c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	57		 push	 edi
  00077	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00083	83 7c 24 28 08	 cmp	 DWORD PTR $T179598[esp+80], 8
  00088	72 0d		 jb	 SHORT $LN94@operator@20
  0008a	8b 54 24 14	 mov	 edx, DWORD PTR $T179598[esp+60]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00094	83 c4 04	 add	 esp, 4
$LN94@operator@20:
  00097	8b c6		 mov	 eax, esi

; 25   : 	}

  00099	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T179598[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T179994 = -44						; size = 4
$T179991 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T179991[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T179994[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T179991[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T179991[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T179991[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@21:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@21
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T179991[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T179991[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@21
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T179991[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@21:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T179991[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::Partition,CipherShed::Partition>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T180405 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::Partition,CipherShed::Partition>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T180405[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@2
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0Partition@CipherShed@@QAE@ABU01@@Z
$LN3@Construct@2:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T180405[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::Partition,CipherShed::Partition>
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T180427 = -164						; size = 4
$T180421 = -160						; size = 4
$T180423 = -156						; size = 28
$T180422 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T180427[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@3
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@3

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T180421[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@3
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T180423[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T180422[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T180427[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@3:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@3
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T180422[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T180427[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@3
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T180423[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@3
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T180423[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@3:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T180421[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T180427[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T180427[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T180423[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T180590 = -164						; size = 4
$T180584 = -160						; size = 4
$T180586 = -156						; size = 28
$T180585 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T180590[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@4
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@4

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T180584[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@4
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T180586[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T180585[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T180590[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T180590[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@4
$LN4@Getcat@4:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@4:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@4
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T180585[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T180590[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@4:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@4
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T180586[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@4
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T180586[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@4:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T180584[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T180590[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@4
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T180590[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T180586[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@4:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T180590[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@4
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T180590[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T180585[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@4:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T180721 = -148						; size = 40
$T180719 = -148						; size = 40
$T180722 = -108						; size = 28
$T180720 = -108						; size = 28
$T180723 = -80						; size = 40
$T180724 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear@2

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear@2

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear@2:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear@2

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T180720[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T180720[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T180719[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T180719[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T180719[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear@2:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear@2

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T180722[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T180722[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T180721[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T180721[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T180721[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear@2:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T180724[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T180724[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T180723[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T180723[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T180723[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear@2:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T180720[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T180722[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T180724[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$180893 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@4
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$180893[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@4
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@4:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$180893[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@4:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	??_C@_0L@FEEFGEIL@CipherShed?$AA@		; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0L@FEEFGEIL@CipherShed?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0L@FEEFGEIL@CipherShed?$AA@ DB 'CipherShed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@
CONST	SEGMENT
??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@ DB 'Parame'
	DB	'ter incorrect.', 0aH, 0aH, 0aH, '(If you report a bug in conn'
	DB	'ection with this, please include the following technical info'
	DB	'rmation in the bug report:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$1
__ehfuncinfo$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	ENDS
;	COMDAT ?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
$T180899 = -100						; size = 28
$T180900 = -72						; size = 28
_msgBody$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parent$ = 8						; size = 4
?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::ParameterIncorrect::Show, COMDAT
; _this$ = ecx

; 57   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 58	 sub	 esp, 88			; 00000058H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 54	 mov	 DWORD PTR __$ArrayPad$[esp+100], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 68	 lea	 eax, DWORD PTR __$EHRec$[esp+116]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 58   : 			string msgBody = "Parameter incorrect.\n\n\n(If you report a bug in connection with this, please include the following technical information in the bug report:\n" + string (SrcPos) + ")";

  00031	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00034	8b 7c 24 78	 mov	 edi, DWORD PTR _parent$[esp+112]
  00038	33 db		 xor	 ebx, ebx
  0003a	8b c1		 mov	 eax, ecx
  0003c	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T180899[esp+140], 15 ; 0000000fH
  00044	89 5c 24 24	 mov	 DWORD PTR $T180899[esp+136], ebx
  00048	88 5c 24 14	 mov	 BYTE PTR $T180899[esp+120], bl
  0004c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0004f	90		 npad	 1
$LL126@Show@3:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	40		 inc	 eax
  00053	3a d3		 cmp	 dl, bl
  00055	75 f9		 jne	 SHORT $LL126@Show@3
  00057	2b c6		 sub	 eax, esi
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180899[esp+124]
  0005f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00064	8d 44 24 10	 lea	 eax, DWORD PTR $T180899[esp+116]
  00068	50		 push	 eax
  00069	8d 4c 24 30	 lea	 ecx, DWORD PTR $T180900[esp+120]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@
  00072	51		 push	 ecx
  00073	89 5c 24 7c	 mov	 DWORD PTR __$EHRec$[esp+136], ebx
  00077	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
  00081	50		 push	 eax
  00082	8d 54 24 5c	 lea	 edx, DWORD PTR _msgBody$[esp+136]
  00086	52		 push	 edx
  00087	c6 84 24 88 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+148], 1
  0008f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00094	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	39 74 24 44	 cmp	 DWORD PTR $T180900[esp+140], esi
  000a0	72 0d		 jb	 SHORT $LN58@Show@3
  000a2	8b 44 24 30	 mov	 eax, DWORD PTR $T180900[esp+120]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ac	83 c4 04	 add	 esp, 4
$LN58@Show@3:
  000af	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR $T180900[esp+140], 15 ; 0000000fH
  000b7	89 5c 24 40	 mov	 DWORD PTR $T180900[esp+136], ebx
  000bb	88 5c 24 30	 mov	 BYTE PTR $T180900[esp+120], bl
  000bf	39 74 24 28	 cmp	 DWORD PTR $T180899[esp+140], esi
  000c3	72 0d		 jb	 SHORT $LN84@Show@3
  000c5	8b 4c 24 14	 mov	 ecx, DWORD PTR $T180899[esp+120]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cf	83 c4 04	 add	 esp, 4
$LN84@Show@3:

; 59   : 			MessageBox (parent, msgBody.c_str(), "CipherShed", MB_ICONERROR | MB_SETFOREGROUND);

  000d2	8b 44 24 4c	 mov	 eax, DWORD PTR _msgBody$[esp+120]
  000d6	39 74 24 60	 cmp	 DWORD PTR _msgBody$[esp+140], esi
  000da	73 04		 jae	 SHORT $LN99@Show@3
  000dc	8d 44 24 4c	 lea	 eax, DWORD PTR _msgBody$[esp+120]
$LN99@Show@3:
  000e0	68 10 00 01 00	 push	 65552			; 00010010H
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  000ea	50		 push	 eax
  000eb	57		 push	 edi
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 60   : 		}

  000f2	39 74 24 60	 cmp	 DWORD PTR _msgBody$[esp+140], esi
  000f6	72 0d		 jb	 SHORT $LN116@Show@3
  000f8	8b 54 24 4c	 mov	 edx, DWORD PTR _msgBody$[esp+120]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00102	83 c4 04	 add	 esp, 4
$LN116@Show@3:
  00105	8b 4c 24 68	 mov	 ecx, DWORD PTR __$EHRec$[esp+116]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b 4c 24 54	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  00118	33 cc		 xor	 ecx, esp
  0011a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011f	83 c4 64	 add	 esp, 100		; 00000064H
  00122	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T180899[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T180900[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 9c	 lea	 eax, DWORD PTR [edx-100]
  00017	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 0c	 add	 eax, 12			; 0000000cH
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::ParameterIncorrect::Show
PUBLIC	_this$GSCopy$
PUBLIC	??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File
EXTRN	__imp__CreateFileA@28:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$4 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$0
__tryblocktable$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$4
__unwindtable$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$3
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z
_TEXT	SEGMENT
$T181404 = -28						; size = 8
_this$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_path$ = 8						; size = 28
_readOnly$ = 36						; size = 1
_create$ = 40						; size = 1
??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z PROC ; CipherShed::File::File, COMDAT
; _this$ = ecx

; 235  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00030	33 db		 xor	 ebx, ebx
  00032	88 1e		 mov	 BYTE PTR [esi], bl
  00034	88 5e 01	 mov	 BYTE PTR [esi+1], bl
  00037	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
  0003e	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	88 5e 1c	 mov	 BYTE PTR [esi+28], bl

; 236  : 		Handle = CreateFile (path.c_str(),
; 237  : 			readOnly ? GENERIC_READ : GENERIC_READ | GENERIC_WRITE,
; 238  : 			FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, create ? CREATE_ALWAYS : OPEN_EXISTING,
; 239  : 			FILE_FLAG_RANDOM_ACCESS | FILE_FLAG_WRITE_THROUGH, NULL);

  00047	83 7d 20 10	 cmp	 DWORD PTR _path$[ebp+24], 16 ; 00000010H
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp+4]
  0004e	73 03		 jae	 SHORT $LN53@File@2
  00050	8d 45 0c	 lea	 eax, DWORD PTR _path$[ebp+4]
$LN53@File@2:
  00053	0f b6 55 24	 movzx	 edx, BYTE PTR _readOnly$[ebp]
  00057	33 c9		 xor	 ecx, ecx
  00059	38 5d 28	 cmp	 BYTE PTR _create$[ebp], bl
  0005c	53		 push	 ebx
  0005d	0f 94 c1	 sete	 cl
  00060	68 00 00 00 90	 push	 -1879048192		; 90000000H
  00065	83 c1 02	 add	 ecx, 2
  00068	f7 da		 neg	 edx
  0006a	51		 push	 ecx
  0006b	1b d2		 sbb	 edx, edx
  0006d	53		 push	 ebx
  0006e	81 e2 00 00 00
	c0		 and	 edx, -1073741824	; c0000000H
  00074	6a 03		 push	 3
  00076	81 c2 00 00 00
	c0		 add	 edx, -1073741824	; c0000000H
  0007c	52		 push	 edx
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00084	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 240  : 
; 241  : 		try
; 242  : 		{

  00087	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 243  : 			throw_sys_if (Handle == INVALID_HANDLE_VALUE);

  0008b	83 f8 ff	 cmp	 eax, -1
  0008e	75 55		 jne	 SHORT $LN5@File@2
  00090	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T181404[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0009d	89 45 e8	 mov	 DWORD PTR $T181404[ebp+4], eax
  000a0	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000a5	8d 45 e4	 lea	 eax, DWORD PTR $T181404[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$0:

; 244  : 		}
; 245  : 		catch (SystemException &)
; 246  : 		{
; 247  : 			if (GetLastError() == ERROR_ACCESS_DENIED && IsUacSupported())

  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b4	83 f8 05	 cmp	 eax, 5
  000b7	75 23		 jne	 SHORT $LN2@File@2
  000b9	e8 00 00 00 00	 call	 _IsUacSupported
  000be	85 c0		 test	 eax, eax
  000c0	74 1a		 je	 SHORT $LN2@File@2

; 248  : 				Elevated = true;

  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000c5	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 251  : 		}

  000c8	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000cf	b8 00 00 00 00	 mov	 eax, $LN15@File@2
  000d4	c3		 ret	 0
$LN15@File@2:
  000d5	8b 75 ec	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000d8	33 db		 xor	 ebx, ebx
  000da	eb 10		 jmp	 SHORT $LN14@File@2
$LN2@File@2:

; 249  : 			else
; 250  : 				throw;

  000dc	33 db		 xor	 ebx, ebx
  000de	53		 push	 ebx
  000df	53		 push	 ebx
  000e0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@File@2:
  000e5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN14@File@2:

; 252  : 
; 253  : 		FileOpen = true;
; 254  : 		FilePointerPosition = 0;
; 255  : 		IsDevice = false;
; 256  : 		Path = path;

  000ec	6a ff		 push	 -1
  000ee	53		 push	 ebx
  000ef	8d 55 08	 lea	 edx, DWORD PTR _path$[ebp]
  000f2	52		 push	 edx
  000f3	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000f6	c6 46 01 01	 mov	 BYTE PTR [esi+1], 1
  000fa	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000fd	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00100	88 5e 14	 mov	 BYTE PTR [esi+20], bl
  00103	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 257  : 	}

  00108	83 7d 20 10	 cmp	 DWORD PTR _path$[ebp+24], 16 ; 00000010H
  0010c	72 0c		 jb	 SHORT $LN78@File@2
  0010e	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp+4]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00117	83 c4 04	 add	 esp, 4
$LN78@File@2:
  0011a	8b c6		 mov	 eax, esi
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 24 00	 ret	 36			; 00000024H
$LN90@File@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$2:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z$3:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ENDP ; CipherShed::File::File
PUBLIC	??_C@_04GBDIODIA@?2?2?4?2?$AA@			; `string'
PUBLIC	_this$GSCopy$
PUBLIC	??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
;	COMDAT ??_C@_04GBDIODIA@?2?2?4?2?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_04GBDIODIA@?2?2?4?2?$AA@ DB '\\.\', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0
__tryblocktable$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6
__ehfuncinfo$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4
	DD	01H
	DD	00H
	DD	01H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
$T181697 = -84						; size = 28
$T181696 = -56						; size = 28
$T181698 = -28						; size = 8
_this$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_path$ = 8						; size = 28
_readOnly$ = 36						; size = 1
??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CipherShed::Device::Device, COMDAT
; _this$ = ecx

; 341  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00030	33 db		 xor	 ebx, ebx
  00032	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00037	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0003a	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  0003d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00040	88 5e 1c	 mov	 BYTE PTR [esi+28], bl

; 342  : 		 FileOpen = false;
; 343  : 		 Elevated = false;
; 344  : 
; 345  : 		Handle = CreateFile ((string ("\\\\.\\") + path).c_str(),
; 346  : 			readOnly ? GENERIC_READ : GENERIC_READ | GENERIC_WRITE,
; 347  : 			FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
; 348  : 			FILE_FLAG_RANDOM_ACCESS | FILE_FLAG_WRITE_THROUGH, NULL);

  00043	6a 04		 push	 4
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDIODIA@?2?2?4?2?$AA@
  0004a	8d 4d c8	 lea	 ecx, DWORD PTR $T181696[ebp]
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00051	88 5e 01	 mov	 BYTE PTR [esi+1], bl
  00054	88 1e		 mov	 BYTE PTR [esi], bl
  00056	89 45 e0	 mov	 DWORD PTR $T181696[ebp+24], eax
  00059	89 5d dc	 mov	 DWORD PTR $T181696[ebp+20], ebx
  0005c	88 5d cc	 mov	 BYTE PTR $T181696[ebp+4], bl
  0005f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00064	8d 45 08	 lea	 eax, DWORD PTR _path$[ebp]
  00067	50		 push	 eax
  00068	8d 4d c8	 lea	 ecx, DWORD PTR $T181696[ebp]
  0006b	51		 push	 ecx
  0006c	8d 55 ac	 lea	 edx, DWORD PTR $T181697[ebp]
  0006f	52		 push	 edx
  00070	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00074	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00079	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00084	72 05		 jb	 SHORT $LN92@Device@2
  00086	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00089	eb 03		 jmp	 SHORT $LN93@Device@2
$LN92@Device@2:
  0008b	83 c0 04	 add	 eax, 4
$LN93@Device@2:
  0008e	0f b6 4d 24	 movzx	 ecx, BYTE PTR _readOnly$[ebp]
  00092	53		 push	 ebx
  00093	68 00 00 00 90	 push	 -1879048192		; 90000000H
  00098	f7 d9		 neg	 ecx
  0009a	6a 03		 push	 3
  0009c	1b c9		 sbb	 ecx, ecx
  0009e	53		 push	 ebx
  0009f	81 e1 00 00 00
	c0		 and	 ecx, -1073741824	; c0000000H
  000a5	6a 03		 push	 3
  000a7	81 c1 00 00 00
	c0		 add	 ecx, -1073741824	; c0000000H
  000ad	51		 push	 ecx
  000ae	50		 push	 eax
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  000b5	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000b8	39 7d c4	 cmp	 DWORD PTR $T181697[ebp+24], edi
  000bb	72 0c		 jb	 SHORT $LN110@Device@2
  000bd	8b 55 b0	 mov	 edx, DWORD PTR $T181697[ebp+4]
  000c0	52		 push	 edx
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c6	83 c4 04	 add	 esp, 4
$LN110@Device@2:
  000c9	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR $T181697[ebp+24], 15 ; 0000000fH
  000d0	89 5d c0	 mov	 DWORD PTR $T181697[ebp+20], ebx
  000d3	88 5d b0	 mov	 BYTE PTR $T181697[ebp+4], bl
  000d6	39 7d e0	 cmp	 DWORD PTR $T181696[ebp+24], edi
  000d9	72 0c		 jb	 SHORT $LN136@Device@2
  000db	8b 45 cc	 mov	 eax, DWORD PTR $T181696[ebp+4]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	83 c4 04	 add	 esp, 4
$LN136@Device@2:

; 349  : 
; 350  : 		try
; 351  : 		{
; 352  : 			throw_sys_if (Handle == INVALID_HANDLE_VALUE);

  000e7	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  000eb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000ef	75 58		 jne	 SHORT $LN5@Device@2
  000f1	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T181698[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000fe	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00103	8d 4d e4	 lea	 ecx, DWORD PTR $T181698[ebp]
  00106	51		 push	 ecx
  00107	89 45 e8	 mov	 DWORD PTR $T181698[ebp+4], eax
  0010a	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0:

; 353  : 		}
; 354  : 		catch (SystemException &)
; 355  : 		{
; 356  : 			if (GetLastError() == ERROR_ACCESS_DENIED && IsUacSupported())

  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00115	83 f8 05	 cmp	 eax, 5
  00118	75 26		 jne	 SHORT $LN2@Device@2
  0011a	e8 00 00 00 00	 call	 _IsUacSupported
  0011f	85 c0		 test	 eax, eax
  00121	74 1d		 je	 SHORT $LN2@Device@2

; 357  : 				Elevated = true;

  00123	8b 55 ec	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00126	c6 02 01	 mov	 BYTE PTR [edx], 1

; 360  : 		}

  00129	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00130	b8 00 00 00 00	 mov	 eax, $LN17@Device@2
  00135	c3		 ret	 0
$LN17@Device@2:
  00136	8b 75 ec	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00139	33 db		 xor	 ebx, ebx
  0013b	8d 7b 10	 lea	 edi, DWORD PTR [ebx+16]
  0013e	eb 10		 jmp	 SHORT $LN16@Device@2
$LN2@Device@2:

; 358  : 			else
; 359  : 				throw;

  00140	33 db		 xor	 ebx, ebx
  00142	53		 push	 ebx
  00143	53		 push	 ebx
  00144	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Device@2:
  00149	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN16@Device@2:

; 361  : 
; 362  : 		FileOpen = true;
; 363  : 		FilePointerPosition = 0;
; 364  : 		IsDevice = true;
; 365  : 		Path = path;

  00150	6a ff		 push	 -1
  00152	53		 push	 ebx
  00153	8d 45 08	 lea	 eax, DWORD PTR _path$[ebp]
  00156	50		 push	 eax
  00157	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0015a	c6 46 01 01	 mov	 BYTE PTR [esi+1], 1
  0015e	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00161	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00164	c6 46 14 01	 mov	 BYTE PTR [esi+20], 1
  00168	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 366  : 	}

  0016d	39 7d 20	 cmp	 DWORD PTR _path$[ebp+24], edi
  00170	72 0c		 jb	 SHORT $LN170@Device@2
  00172	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp+4]
  00175	51		 push	 ecx
  00176	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017b	83 c4 04	 add	 esp, 4
$LN170@Device@2:
  0017e	8b c6		 mov	 eax, esi
  00180	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00183	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018a	59		 pop	 ecx
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 20 00	 ret	 32			; 00000020H
$LN182@Device@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$2:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__unwindfunclet$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T181696[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CipherShed::Device::Device
PUBLIC	??4Partition@CipherShed@@QAEAAU01@ABU01@@Z	; CipherShed::Partition::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4Partition@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4Partition@CipherShed@@QAEAAU01@ABU01@@Z PROC		; CipherShed::Partition::operator=, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR ___that$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a ff		 push	 -1
  0000a	6a 00		 push	 0
  0000c	55		 push	 ebp
  0000d	8b d9		 mov	 ebx, ecx
  0000f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00014	6a ff		 push	 -1
  00016	8d 75 20	 lea	 esi, DWORD PTR [ebp+32]
  00019	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  0001c	b9 08 00 00 00	 mov	 ecx, 8
  00021	6a 00		 push	 0
  00023	8d 45 40	 lea	 eax, DWORD PTR [ebp+64]
  00026	f3 a5		 rep movsd
  00028	50		 push	 eax
  00029	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	8b 4d 5c	 mov	 ecx, DWORD PTR [ebp+92]
  00034	89 4b 5c	 mov	 DWORD PTR [ebx+92], ecx
  00037	8b 55 60	 mov	 edx, DWORD PTR [ebp+96]
  0003a	6a ff		 push	 -1
  0003c	6a 00		 push	 0
  0003e	83 c5 64	 add	 ebp, 100		; 00000064H
  00041	55		 push	 ebp
  00042	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  00045	89 53 60	 mov	 DWORD PTR [ebx+96], edx
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	8b c3		 mov	 eax, ebx
  00052	5b		 pop	 ebx
  00053	c2 04 00	 ret	 4
??4Partition@CipherShed@@QAEAAU01@ABU01@@Z ENDP		; CipherShed::Partition::operator=
_TEXT	ENDS
PUBLIC	??_C@_0BM@DMJIFPGL@FOR_MORE_INFO_ON_PARTITIONS?$AA@ ; `string'
PUBLIC	??_C@_0CE@LDACPNCN@TWO_SYSTEMS_IN_ONE_PARTITION_REM@ ; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
EXTRN	_GetString:PROC
;	COMDAT ??_C@_0BM@DMJIFPGL@FOR_MORE_INFO_ON_PARTITIONS?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BM@DMJIFPGL@FOR_MORE_INFO_ON_PARTITIONS?$AA@ DB 'FOR_MORE_INFO_ON_'
	DB	'PARTITIONS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LDACPNCN@TWO_SYSTEMS_IN_ONE_PARTITION_REM@
CONST	SEGMENT
??_C@_0CE@LDACPNCN@TWO_SYSTEMS_IN_ONE_PARTITION_REM@ DB 'TWO_SYSTEMS_IN_O'
	DB	'NE_PARTITION_REMARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
__ehfuncinfo$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T182428 = -100						; size = 4
$T182421 = -96						; size = 28
$T182423 = -68						; size = 28
$T182422 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; CipherShed::BootEncryption::GetRemarksOnHiddenOS, COMDAT
; _this$ = ecx

; 530  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 58	 sub	 esp, 88			; 00000058H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 531  : 		return (wstring (L"\n\n")

  00025	6a 02		 push	 2
  00027	33 ff		 xor	 edi, edi
  00029	33 c0		 xor	 eax, eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00030	8d 4c 24 18	 lea	 ecx, DWORD PTR $T182421[esp+120]
  00034	89 7c 24 14	 mov	 DWORD PTR $T182428[esp+120], edi
  00038	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR $T182421[esp+144], 7
  00040	89 7c 24 2c	 mov	 DWORD PTR $T182421[esp+140], edi
  00044	66 89 44 24 1c	 mov	 WORD PTR $T182421[esp+124], ax
  00049	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LDACPNCN@TWO_SYSTEMS_IN_ONE_PARTITION_REM@
  00053	89 7c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], edi
  00057	e8 00 00 00 00	 call	 _GetString
  0005c	50		 push	 eax
  0005d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T182421[esp+120]
  00061	51		 push	 ecx
  00062	8d 54 24 54	 lea	 edx, DWORD PTR $T182422[esp+124]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00071	50		 push	 eax
  00072	8d 44 24 44	 lea	 eax, DWORD PTR $T182423[esp+136]
  00076	50		 push	 eax
  00077	c6 84 24 88 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+148], 1
  0007f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00084	8b f0		 mov	 esi, eax
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DMJIFPGL@FOR_MORE_INFO_ON_PARTITIONS?$AA@
  0008b	c6 84 24 8c 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+152], 2
  00093	e8 00 00 00 00	 call	 _GetString
  00098	50		 push	 eax
  00099	56		 push	 esi
  0009a	8b b4 24 9c 00
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+148]
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000aa	83 7c 24 44 08	 cmp	 DWORD PTR $T182423[esp+136], 8
  000af	72 0d		 jb	 SHORT $LN64@GetRemarks
  000b1	8b 4c 24 30	 mov	 ecx, DWORD PTR $T182423[esp+116]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bb	83 c4 04	 add	 esp, 4
$LN64@GetRemarks:
  000be	33 d2		 xor	 edx, edx
  000c0	83 7c 24 60 08	 cmp	 DWORD PTR $T182422[esp+136], 8
  000c5	c7 44 24 44 07
	00 00 00	 mov	 DWORD PTR $T182423[esp+136], 7
  000cd	89 7c 24 40	 mov	 DWORD PTR $T182423[esp+132], edi
  000d1	66 89 54 24 30	 mov	 WORD PTR $T182423[esp+116], dx
  000d6	72 0d		 jb	 SHORT $LN92@GetRemarks
  000d8	8b 44 24 4c	 mov	 eax, DWORD PTR $T182422[esp+116]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
$LN92@GetRemarks:
  000e5	33 c9		 xor	 ecx, ecx
  000e7	83 7c 24 28 08	 cmp	 DWORD PTR $T182421[esp+136], 8
  000ec	c7 44 24 60 07
	00 00 00	 mov	 DWORD PTR $T182422[esp+136], 7
  000f4	89 7c 24 5c	 mov	 DWORD PTR $T182422[esp+132], edi
  000f8	66 89 4c 24 4c	 mov	 WORD PTR $T182422[esp+116], cx
  000fd	72 0d		 jb	 SHORT $LN130@GetRemarks
  000ff	8b 54 24 14	 mov	 edx, DWORD PTR $T182421[esp+116]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00109	83 c4 04	 add	 esp, 4
$LN130@GetRemarks:
  0010c	8b c6		 mov	 eax, esi

; 532  : 				+ GetString ("TWO_SYSTEMS_IN_ONE_PARTITION_REMARK")
; 533  : 				+ L"\n\n"
; 534  : 				+ GetString ("FOR_MORE_INFO_ON_PARTITIONS"));
; 535  : 	}

  0010e	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  00112	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00119	59		 pop	 ecx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	83 c4 64	 add	 esp, 100		; 00000064H
  0011f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T182421[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T182422[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00010	8d 4d bc	 lea	 ecx, DWORD PTR $T182423[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  0001f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
PUBLIC	__$ArrayPad$
PUBLIC	?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetWindowsDirectoryA
EXTRN	__imp__GetSystemDirectoryA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T182967 = -272						; size = 4
$T182965 = -272						; size = 8
_buf$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CipherShed::BootEncryption::GetWindowsDirectoryA, COMDAT
; _this$ = ecx

; 702  : 	{

  00000	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+272], eax
  00014	56		 push	 esi
  00015	8b b4 24 18 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+272]

; 703  : 		char buf[MAX_PATH];
; 704  : 		throw_sys_if (GetSystemDirectory (buf, sizeof (buf)) == 0);

  0001c	68 04 01 00 00	 push	 260			; 00000104H
  00021	8d 44 24 10	 lea	 eax, DWORD PTR _buf$[esp+280]
  00025	50		 push	 eax
  00026	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T182967[esp+284], 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  00034	85 c0		 test	 eax, eax
  00036	75 21		 jne	 SHORT $LN3@GetWindows
  00038	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR $T182965[esp+276], OFFSET ??_7SystemException@CipherShed@@6B@
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00046	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0004b	8d 4c 24 08	 lea	 ecx, DWORD PTR $T182965[esp+280]
  0004f	51		 push	 ecx
  00050	89 44 24 10	 mov	 DWORD PTR $T182965[esp+288], eax
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetWindows:

; 705  : 		
; 706  : 		return string (buf);

  00059	8d 44 24 0c	 lea	 eax, DWORD PTR _buf$[esp+276]
  0005d	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00064	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0006b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0006f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL49@GetWindows:
  00072	8a 08		 mov	 cl, BYTE PTR [eax]
  00074	40		 inc	 eax
  00075	84 c9		 test	 cl, cl
  00077	75 f9		 jne	 SHORT $LL49@GetWindows
  00079	2b c2		 sub	 eax, edx
  0007b	50		 push	 eax
  0007c	8d 54 24 10	 lea	 edx, DWORD PTR _buf$[esp+280]
  00080	52		 push	 edx
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 707  : 	}

  00088	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+276]
  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	33 cc		 xor	 ecx, esp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  0009f	c2 04 00	 ret	 4
$LN50@GetWindows:
?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CipherShed::BootEncryption::GetWindowsDirectoryA
_TEXT	ENDS
PUBLIC	??_C@_0CN@LHKOMNPL@CipherShed?3?3BootEncryption?3?3GetT@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetTempPathA
EXTRN	__imp__GetTempPathA@8:PROC
;	COMDAT ??_C@_0CN@LHKOMNPL@CipherShed?3?3BootEncryption?3?3GetT@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CN@LHKOMNPL@CipherShed?3?3BootEncryption?3?3GetT@ DB 'CipherShed::'
	DB	'BootEncryption::GetTempPathA:715', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T183128 = -272						; size = 4
$T183126 = -272						; size = 8
_tempPath$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CipherShed::BootEncryption::GetTempPathA, COMDAT
; _this$ = ecx

; 711  : 	{

  00000	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+272], eax
  00014	56		 push	 esi
  00015	8b b4 24 18 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+272]

; 712  : 		char tempPath[MAX_PATH];
; 713  : 		DWORD tempLen = ::GetTempPath (sizeof (tempPath), tempPath);

  0001c	8d 44 24 0c	 lea	 eax, DWORD PTR _tempPath$[esp+276]
  00020	50		 push	 eax
  00021	68 04 01 00 00	 push	 260			; 00000104H
  00026	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T183128[esp+284], 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8

; 714  : 		if (tempLen == 0 || tempLen > sizeof (tempPath))

  00034	85 c0		 test	 eax, eax
  00036	74 50		 je	 SHORT $LN1@GetTempPat
  00038	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  0003d	77 49		 ja	 SHORT $LN1@GetTempPat

; 716  : 
; 717  : 		return string (tempPath);

  0003f	8d 44 24 0c	 lea	 eax, DWORD PTR _tempPath$[esp+276]
  00043	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0004a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00051	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00055	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL47@GetTempPat:
  00058	8a 08		 mov	 cl, BYTE PTR [eax]
  0005a	40		 inc	 eax
  0005b	84 c9		 test	 cl, cl
  0005d	75 f9		 jne	 SHORT $LL47@GetTempPat
  0005f	2b c2		 sub	 eax, edx
  00061	50		 push	 eax
  00062	8d 4c 24 10	 lea	 ecx, DWORD PTR _tempPath$[esp+280]
  00066	51		 push	 ecx
  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 718  : 	}

  0006e	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+276]
  00075	8b c6		 mov	 eax, esi
  00077	5e		 pop	 esi
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00085	c2 04 00	 ret	 4
$LN1@GetTempPat:

; 715  : 			throw ParameterIncorrect (SRC_POS);

  00088	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0008d	8d 54 24 08	 lea	 edx, DWORD PTR $T183126[esp+280]
  00091	52		 push	 edx
  00092	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T183126[esp+284], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0009a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T183126[esp+288], OFFSET ??_C@_0CN@LHKOMNPL@CipherShed?3?3BootEncryption?3?3GetT@
  000a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN48@GetTempPat:
  000a7	cc		 int	 3
?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CipherShed::BootEncryption::GetTempPathA
_TEXT	ENDS
PUBLIC	??_C@_0BH@KENEBBHH@Original?5System?5Loader?$AA@ ; `string'
PUBLIC	??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__SHGetFolderPathA@20:PROC
;	COMDAT ??_C@_0BH@KENEBBHH@Original?5System?5Loader?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BH@KENEBBHH@Original?5System?5Loader?$AA@ DB 'Original System Load'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
CONST	SEGMENT
??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@ DB '\TrueCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
__ehfuncinfo$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T183294 = -368						; size = 4
$T183287 = -368						; size = 8
$T183288 = -360						; size = 28
$T183289 = -332						; size = 28
_path$ = -304						; size = 28
_pathBuf$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CipherShed::BootEncryption::GetSystemLoaderBackupPath, COMDAT
; _this$ = ecx

; 1359 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 60 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+368], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 74 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+384]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b bc 24 84 01
	00 00		 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+380]
  00041	33 db		 xor	 ebx, ebx

; 1360 : 		char pathBuf[MAX_PATH];
; 1361 : 
; 1362 : 		throw_sys_if (!SUCCEEDED (SHGetFolderPath (NULL, CSIDL_COMMON_APPDATA | CSIDL_FLAG_CREATE, NULL, 0, pathBuf)));

  00043	8d 44 24 6c	 lea	 eax, DWORD PTR _pathBuf$[esp+384]
  00047	50		 push	 eax
  00048	53		 push	 ebx
  00049	53		 push	 ebx
  0004a	68 23 80 00 00	 push	 32803			; 00008023H
  0004f	53		 push	 ebx
  00050	89 5c 24 24	 mov	 DWORD PTR $T183294[esp+404], ebx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0005a	85 c0		 test	 eax, eax
  0005c	7d 21		 jge	 SHORT $LN3@GetSystemL
  0005e	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T183287[esp+384], OFFSET ??_7SystemException@CipherShed@@6B@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0006c	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00071	8d 4c 24 14	 lea	 ecx, DWORD PTR $T183287[esp+388]
  00075	51		 push	 ecx
  00076	89 44 24 1c	 mov	 DWORD PTR $T183287[esp+396], eax
  0007a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetSystemL:

; 1363 : 		
; 1364 : 		string path = string (pathBuf) + "\\" TC_APP_NAME_LEGACY;

  0007f	8d 44 24 6c	 lea	 eax, DWORD PTR _pathBuf$[esp+384]
  00083	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T183288[esp+408], 15 ; 0000000fH
  0008b	89 5c 24 2c	 mov	 DWORD PTR $T183288[esp+404], ebx
  0008f	88 5c 24 1c	 mov	 BYTE PTR $T183288[esp+388], bl
  00093	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL136@GetSystemL:
  00096	8a 08		 mov	 cl, BYTE PTR [eax]
  00098	40		 inc	 eax
  00099	3a cb		 cmp	 cl, bl
  0009b	75 f9		 jne	 SHORT $LL136@GetSystemL
  0009d	2b c2		 sub	 eax, edx
  0009f	50		 push	 eax
  000a0	8d 54 24 70	 lea	 edx, DWORD PTR _pathBuf$[esp+388]
  000a4	52		 push	 edx
  000a5	8d 4c 24 20	 lea	 ecx, DWORD PTR $T183288[esp+392]
  000a9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
  000b3	8d 44 24 1c	 lea	 eax, DWORD PTR $T183288[esp+388]
  000b7	50		 push	 eax
  000b8	8d 4c 24 58	 lea	 ecx, DWORD PTR _path$[esp+392]
  000bc	51		 push	 ecx
  000bd	89 9c 24 88 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+404], ebx
  000c4	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cc	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  000d1	c6 84 24 7c 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+392], 2
  000d9	39 74 24 30	 cmp	 DWORD PTR $T183288[esp+408], esi
  000dd	72 0d		 jb	 SHORT $LN68@GetSystemL
  000df	8b 54 24 1c	 mov	 edx, DWORD PTR $T183288[esp+388]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e9	83 c4 04	 add	 esp, 4
$LN68@GetSystemL:

; 1365 : 		CreateDirectory (path.c_str(), NULL);

  000ec	8b 44 24 54	 mov	 eax, DWORD PTR _path$[esp+388]
  000f0	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T183288[esp+408], 15 ; 0000000fH
  000f8	89 5c 24 2c	 mov	 DWORD PTR $T183288[esp+404], ebx
  000fc	88 5c 24 1c	 mov	 BYTE PTR $T183288[esp+388], bl
  00100	39 74 24 68	 cmp	 DWORD PTR _path$[esp+408], esi
  00104	73 04		 jae	 SHORT $LN83@GetSystemL
  00106	8d 44 24 54	 lea	 eax, DWORD PTR _path$[esp+388]
$LN83@GetSystemL:
  0010a	53		 push	 ebx
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 1366 : 
; 1367 : 		return path + '\\' + TC_SYS_BOOT_LOADER_BACKUP_NAME;

  00112	6a 5c		 push	 92			; 0000005cH
  00114	8d 44 24 54	 lea	 eax, DWORD PTR _path$[esp+388]
  00118	50		 push	 eax
  00119	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T183289[esp+392]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KENEBBHH@Original?5System?5Loader?$AA@
  00128	50		 push	 eax
  00129	57		 push	 edi
  0012a	c6 84 24 94 01
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+416], 3
  00132	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00137	83 c4 18	 add	 esp, 24			; 00000018H
  0013a	39 74 24 4c	 cmp	 DWORD PTR $T183289[esp+408], esi
  0013e	72 0d		 jb	 SHORT $LN100@GetSystemL
  00140	8b 54 24 38	 mov	 edx, DWORD PTR $T183289[esp+388]
  00144	52		 push	 edx
  00145	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014a	83 c4 04	 add	 esp, 4
$LN100@GetSystemL:
  0014d	c7 44 24 4c 0f
	00 00 00	 mov	 DWORD PTR $T183289[esp+408], 15 ; 0000000fH
  00155	89 5c 24 48	 mov	 DWORD PTR $T183289[esp+404], ebx
  00159	88 5c 24 38	 mov	 BYTE PTR $T183289[esp+388], bl
  0015d	39 74 24 68	 cmp	 DWORD PTR _path$[esp+408], esi
  00161	72 0d		 jb	 SHORT $LN126@GetSystemL
  00163	8b 44 24 54	 mov	 eax, DWORD PTR _path$[esp+388]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0016d	83 c4 04	 add	 esp, 4
$LN126@GetSystemL:
  00170	8b c7		 mov	 eax, edi

; 1368 : 	}

  00172	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+384]
  00179	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00180	59		 pop	 ecx
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
  00184	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+368]
  0018b	33 cc		 xor	 ecx, esp
  0018d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00192	81 c4 70 01 00
	00		 add	 esp, 368		; 00000170H
  00198	c2 04 00	 ret	 4
$LN138@GetSystemL:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T183288[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  0000b	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00016	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T183289[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 82 90 fe ff
	ff		 lea	 eax, DWORD PTR [edx-368]
  0002b	8b 8a 8c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-372]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
PUBLIC	??_C@_0BL@PPCBILBO@Original?5System?5Loader?4bak?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::RenameDeprecatedSystemLoaderBackup
EXTRN	_rename:PROC
EXTRN	_FileExists:PROC
;	COMDAT ??_C@_0BL@PPCBILBO@Original?5System?5Loader?4bak?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BL@PPCBILBO@Original?5System?5Loader?4bak?$AA@ DB 'Original System'
	DB	' Loader.bak', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$3
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
$T183817 = -424						; size = 4
$T183812 = -424						; size = 8
$T183803 = -416						; size = 28
$T183805 = -388						; size = 28
$T183804 = -360						; size = 28
$T183811 = -332						; size = 28
$T183807 = -332						; size = 28
_path$149556 = -304					; size = 28
_pathBuf$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::RenameDeprecatedSystemLoaderBackup, COMDAT
; _this$ = ecx

; 1372 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 98 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+424], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 b0 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+444]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	33 f6		 xor	 esi, esi

; 1373 : 		char pathBuf[MAX_PATH];
; 1374 : 
; 1375 : 		if (SUCCEEDED (SHGetFolderPath (NULL, CSIDL_COMMON_APPDATA, NULL, 0, pathBuf)))

  0003d	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR _pathBuf$[esp+444]
  00044	50		 push	 eax
  00045	56		 push	 esi
  00046	56		 push	 esi
  00047	6a 23		 push	 35			; 00000023H
  00049	56		 push	 esi
  0004a	8b e9		 mov	 ebp, ecx
  0004c	89 74 24 28	 mov	 DWORD PTR $T183817[esp+464], esi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  00056	85 c0		 test	 eax, eax
  00058	0f 8c 04 02 00
	00		 jl	 $LN229@RenameDepr

; 1376 : 		{
; 1377 : 			string path = string (pathBuf) + "\\" TC_APP_NAME_LEGACY + '\\' + TC_SYS_BOOT_LOADER_BACKUP_NAME_LEGACY;

  0005e	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  00063	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR _pathBuf$[esp+444]
  0006a	89 5c 24 34	 mov	 DWORD PTR $T183803[esp+468], ebx
  0006e	89 74 24 30	 mov	 DWORD PTR $T183803[esp+464], esi
  00072	c6 44 24 20 00	 mov	 BYTE PTR $T183803[esp+448], 0
  00077	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL239@RenameDepr:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 c9		 test	 cl, cl
  00085	75 f9		 jne	 SHORT $LL239@RenameDepr
  00087	2b c2		 sub	 eax, edx
  00089	50		 push	 eax
  0008a	8d 8c 24 ac 00
	00 00		 lea	 ecx, DWORD PTR _pathBuf$[esp+448]
  00091	51		 push	 ecx
  00092	8d 4c 24 24	 lea	 ecx, DWORD PTR $T183803[esp+452]
  00096	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
  000a0	8d 54 24 20	 lea	 edx, DWORD PTR $T183803[esp+448]
  000a4	52		 push	 edx
  000a5	8d 44 24 5c	 lea	 eax, DWORD PTR $T183804[esp+452]
  000a9	50		 push	 eax
  000aa	89 b4 24 c4 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+464], esi
  000b1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000b6	6a 5c		 push	 92			; 0000005cH
  000b8	50		 push	 eax
  000b9	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T183805[esp+464]
  000bd	51		 push	 ecx
  000be	c6 84 24 d0 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+476], 1
  000c6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PPCBILBO@Original?5System?5Loader?4bak?$AA@
  000d0	50		 push	 eax
  000d1	8d 94 24 ac 00
	00 00		 lea	 edx, DWORD PTR _path$149556[esp+476]
  000d8	52		 push	 edx
  000d9	c6 84 24 dc 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+488], 2
  000e1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  000ee	39 7c 24 50	 cmp	 DWORD PTR $T183805[esp+468], edi
  000f2	72 0d		 jb	 SHORT $LN71@RenameDepr
  000f4	8b 44 24 3c	 mov	 eax, DWORD PTR $T183805[esp+448]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fe	83 c4 04	 add	 esp, 4
$LN71@RenameDepr:
  00101	89 5c 24 50	 mov	 DWORD PTR $T183805[esp+468], ebx
  00105	89 74 24 4c	 mov	 DWORD PTR $T183805[esp+464], esi
  00109	c6 44 24 3c 00	 mov	 BYTE PTR $T183805[esp+448], 0
  0010e	39 7c 24 6c	 cmp	 DWORD PTR $T183804[esp+468], edi
  00112	72 0d		 jb	 SHORT $LN97@RenameDepr
  00114	8b 4c 24 58	 mov	 ecx, DWORD PTR $T183804[esp+448]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011e	83 c4 04	 add	 esp, 4
$LN97@RenameDepr:
  00121	89 5c 24 6c	 mov	 DWORD PTR $T183804[esp+468], ebx
  00125	89 74 24 68	 mov	 DWORD PTR $T183804[esp+464], esi
  00129	c6 44 24 58 00	 mov	 BYTE PTR $T183804[esp+448], 0
  0012e	c6 84 24 b8 01
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+452], 6
  00136	39 7c 24 34	 cmp	 DWORD PTR $T183803[esp+468], edi
  0013a	72 0d		 jb	 SHORT $LN123@RenameDepr
  0013c	8b 54 24 20	 mov	 edx, DWORD PTR $T183803[esp+448]
  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00146	83 c4 04	 add	 esp, 4
$LN123@RenameDepr:

; 1378 : 
; 1379 : 			if (FileExists (path.c_str()) && !FileExists (GetSystemLoaderBackupPath().c_str()))

  00149	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _path$149556[esp+448]
  00150	89 5c 24 34	 mov	 DWORD PTR $T183803[esp+468], ebx
  00154	89 74 24 30	 mov	 DWORD PTR $T183803[esp+464], esi
  00158	c6 44 24 20 00	 mov	 BYTE PTR $T183803[esp+448], 0
  0015d	39 bc 24 a4 00
	00 00		 cmp	 DWORD PTR _path$149556[esp+468], edi
  00164	73 07		 jae	 SHORT $LN138@RenameDepr
  00166	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _path$149556[esp+448]
$LN138@RenameDepr:
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _FileExists
  00173	83 c4 04	 add	 esp, 4
  00176	85 c0		 test	 eax, eax
  00178	74 32		 je	 SHORT $LN9@RenameDepr
  0017a	8d 44 24 70	 lea	 eax, DWORD PTR $T183807[esp+444]
  0017e	50		 push	 eax
  0017f	8b cd		 mov	 ecx, ebp
  00181	e8 00 00 00 00	 call	 ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
  00186	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T183817[esp+444], 1
  0018e	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00191	72 05		 jb	 SHORT $LN143@RenameDepr
  00193	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00196	eb 03		 jmp	 SHORT $LN144@RenameDepr
$LN143@RenameDepr:
  00198	83 c0 04	 add	 eax, 4
$LN144@RenameDepr:
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _FileExists
  001a1	83 c4 04	 add	 esp, 4
  001a4	85 c0		 test	 eax, eax
  001a6	75 04		 jne	 SHORT $LN9@RenameDepr
  001a8	b3 01		 mov	 bl, 1
  001aa	eb 02		 jmp	 SHORT $LN10@RenameDepr
$LN9@RenameDepr:
  001ac	32 db		 xor	 bl, bl
$LN10@RenameDepr:
  001ae	f6 44 24 14 01	 test	 BYTE PTR $T183817[esp+444], 1
  001b3	74 16		 je	 SHORT $LN161@RenameDepr
  001b5	39 bc 24 88 00
	00 00		 cmp	 DWORD PTR $T183807[esp+468], edi
  001bc	72 0d		 jb	 SHORT $LN161@RenameDepr
  001be	8b 4c 24 74	 mov	 ecx, DWORD PTR $T183807[esp+448]
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c8	83 c4 04	 add	 esp, 4
$LN161@RenameDepr:
  001cb	84 db		 test	 bl, bl
  001cd	74 7a		 je	 SHORT $LN2@RenameDepr

; 1380 : 				throw_sys_if (rename (path.c_str(), GetSystemLoaderBackupPath().c_str()) != 0);

  001cf	8d 54 24 70	 lea	 edx, DWORD PTR $T183811[esp+444]
  001d3	52		 push	 edx
  001d4	8b cd		 mov	 ecx, ebp
  001d6	e8 00 00 00 00	 call	 ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
  001db	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  001de	72 05		 jb	 SHORT $LN175@RenameDepr
  001e0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e3	eb 03		 jmp	 SHORT $LN176@RenameDepr
$LN175@RenameDepr:
  001e5	83 c0 04	 add	 eax, 4
$LN176@RenameDepr:
  001e8	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _path$149556[esp+448]
  001ef	39 bc 24 a4 00
	00 00		 cmp	 DWORD PTR _path$149556[esp+468], edi
  001f6	73 07		 jae	 SHORT $LN182@RenameDepr
  001f8	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _path$149556[esp+448]
$LN182@RenameDepr:
  001ff	50		 push	 eax
  00200	51		 push	 ecx
  00201	e8 00 00 00 00	 call	 _rename
  00206	83 c4 08	 add	 esp, 8
  00209	85 c0		 test	 eax, eax
  0020b	0f 95 c3	 setne	 bl
  0020e	39 bc 24 88 00
	00 00		 cmp	 DWORD PTR $T183811[esp+468], edi
  00215	72 0d		 jb	 SHORT $LN199@RenameDepr
  00217	8b 44 24 74	 mov	 eax, DWORD PTR $T183811[esp+448]
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00221	83 c4 04	 add	 esp, 4
$LN199@RenameDepr:
  00224	84 db		 test	 bl, bl
  00226	74 21		 je	 SHORT $LN2@RenameDepr
  00228	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T183812[esp+444], OFFSET ??_7SystemException@CipherShed@@6B@
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00236	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0023b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T183812[esp+448]
  0023f	51		 push	 ecx
  00240	89 44 24 20	 mov	 DWORD PTR $T183812[esp+456], eax
  00244	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@RenameDepr:

; 1381 : 		}

  00249	39 bc 24 a4 00
	00 00		 cmp	 DWORD PTR _path$149556[esp+468], edi
  00250	72 10		 jb	 SHORT $LN229@RenameDepr
  00252	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _path$149556[esp+448]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0025f	83 c4 04	 add	 esp, 4
$LN229@RenameDepr:

; 1382 : 	}

  00262	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+444]
  00269	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00270	59		 pop	 ecx
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	5d		 pop	 ebp
  00274	5b		 pop	 ebx
  00275	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+424]
  0027c	33 cc		 xor	 ecx, esp
  0027e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00283	81 c4 a8 01 00
	00		 add	 esp, 424		; 000001a8H
  00289	c3		 ret	 0
$LN241@RenameDepr:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$0:
  00000	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T183803[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$1:
  0000b	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T183804[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$2:
  00016	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T183805[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ$3:
  00021	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _path$149556[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 82 54 fe ff
	ff		 lea	 eax, DWORD PTR [edx-428]
  00036	8b 8a 50 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-432]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	83 c0 10	 add	 eax, 16			; 00000010H
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenameDeprecatedSystemLoaderBackup@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::RenameDeprecatedSystemLoaderBackup
PUBLIC	??_C@_03OPPAHFLA@X?3?2?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsCDDrivePresent
EXTRN	__imp__GetDriveTypeA@4:PROC
;	COMDAT ??_C@_03OPPAHFLA@X?3?2?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_03OPPAHFLA@X?3?2?$AA@ DB 'X:\', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
_path$149628 = -32					; size = 28
__$ArrayPad$ = -4					; size = 4
?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::IsCDDrivePresent, COMDAT
; _this$ = ecx

; 1511 : 	{

  00000	83 ec 20	 sub	 esp, 32			; 00000020H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 1512 : 		for (char drive = 'Z'; drive >= 'C'; --drive)

  00010	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDriveTypeA@4
  00016	56		 push	 esi
  00017	b3 5a		 mov	 bl, 90			; 0000005aH
  00019	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0001e	8b ff		 npad	 2
$LL4@IsCDDriveP:

; 1513 : 		{
; 1514 : 			string path = "X:\\";

  00020	6a 03		 push	 3
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_03OPPAHFLA@X?3?2?$AA@
  00027	8d 4c 24 14	 lea	 ecx, DWORD PTR _path$149628[esp+52]
  0002b	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR _path$149628[esp+76], 15 ; 0000000fH
  00033	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _path$149628[esp+72], 0
  0003b	c6 44 24 18 00	 mov	 BYTE PTR _path$149628[esp+56], 0
  00040	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1515 : 			path[0] = drive;

  00045	8b 44 24 10	 mov	 eax, DWORD PTR _path$149628[esp+48]
  00049	39 74 24 24	 cmp	 DWORD PTR _path$149628[esp+68], esi
  0004d	73 04		 jae	 SHORT $LN53@IsCDDriveP
  0004f	8d 44 24 10	 lea	 eax, DWORD PTR _path$149628[esp+48]
$LN53@IsCDDriveP:
  00053	88 18		 mov	 BYTE PTR [eax], bl

; 1516 : 
; 1517 : 			if (GetDriveType (path.c_str()) == DRIVE_CDROM)

  00055	8b 44 24 10	 mov	 eax, DWORD PTR _path$149628[esp+48]
  00059	39 74 24 24	 cmp	 DWORD PTR _path$149628[esp+68], esi
  0005d	73 04		 jae	 SHORT $LN59@IsCDDriveP
  0005f	8d 44 24 10	 lea	 eax, DWORD PTR _path$149628[esp+48]
$LN59@IsCDDriveP:
  00063	50		 push	 eax
  00064	ff d5		 call	 ebp
  00066	83 f8 05	 cmp	 eax, 5
  00069	74 2e		 je	 SHORT $LN113@IsCDDriveP

; 1519 : 		}

  0006b	39 74 24 24	 cmp	 DWORD PTR _path$149628[esp+68], esi
  0006f	72 0d		 jb	 SHORT $LN102@IsCDDriveP
  00071	8b 44 24 10	 mov	 eax, DWORD PTR _path$149628[esp+48]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007b	83 c4 04	 add	 esp, 4
$LN102@IsCDDriveP:
  0007e	fe cb		 dec	 bl
  00080	80 fb 43	 cmp	 bl, 67			; 00000043H
  00083	7d 9b		 jge	 SHORT $LL4@IsCDDriveP
  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp

; 1520 : 
; 1521 : 		return false;

  00087	32 c0		 xor	 al, al
  00089	5b		 pop	 ebx

; 1522 : 	}

  0008a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  0008e	33 cc		 xor	 ecx, esp
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	83 c4 20	 add	 esp, 32			; 00000020H
  00098	c3		 ret	 0
$LN113@IsCDDriveP:

; 1518 : 				return true;

  00099	39 74 24 24	 cmp	 DWORD PTR _path$149628[esp+68], esi
  0009d	72 0d		 jb	 SHORT $LN76@IsCDDriveP
  0009f	8b 4c 24 10	 mov	 ecx, DWORD PTR _path$149628[esp+48]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a9	83 c4 04	 add	 esp, 4
$LN76@IsCDDriveP:

; 1522 : 	}

  000ac	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  000b0	5e		 pop	 esi
  000b1	5d		 pop	 ebp
  000b2	5b		 pop	 ebx
  000b3	33 cc		 xor	 ecx, esp
  000b5	b0 01		 mov	 al, 1
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	83 c4 20	 add	 esp, 32			; 00000020H
  000bf	c3		 ret	 0
?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::IsCDDrivePresent
_TEXT	ENDS
PUBLIC	??_C@_02EHLIIHJM@X?3?$AA@			; `string'
PUBLIC	??_C@_0DC@HEONFDLJ@CipherShed?3?3BootEncryption?3?3Veri@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::VerifyRescueDisk
;	COMDAT ??_C@_02EHLIIHJM@X?3?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_02EHLIIHJM@X?3?$AA@ DB 'X:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HEONFDLJ@CipherShed?3?3BootEncryption?3?3Veri@
CONST	SEGMENT
??_C@_0DC@HEONFDLJ@CipherShed?3?3BootEncryption?3?3Veri@ DB 'CipherShed::'
	DB	'BootEncryption::VerifyRescueDisk:1528', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$0
__tryblocktable$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ DD 00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$6
__ehfuncinfo$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ
	DD	01H
	DD	FLAT:__tryblocktable$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$4
	DD	02H
	DD	FLAT:__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$5
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
_buffer$149649 = -144					; size = 8
$T185409 = -136						; size = 12
$T185107 = -124						; size = 4
$T185106 = -120						; size = 8
_this$ = -112						; size = 4
_drive$149639 = -105					; size = 1
_path$149644 = -104					; size = 28
_driveDevice$149646 = -76				; size = 56
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::VerifyRescueDisk, COMDAT
; _this$ = ecx

; 1526 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 90	 mov	 DWORD PTR _this$[ebp], ecx

; 1527 : 		if (!RescueIsoImage)

  00034	33 db		 xor	 ebx, ebx
  00036	39 99 10 02 00
	00		 cmp	 DWORD PTR [ecx+528], ebx
  0003c	75 1c		 jne	 SHORT $LN7@VerifyResc

; 1528 : 			throw ParameterIncorrect (SRC_POS);

  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00043	8d 45 88	 lea	 eax, DWORD PTR $T185106[ebp]
  00046	50		 push	 eax
  00047	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T185106[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0004e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T185106[ebp+4], OFFSET ??_C@_0DC@HEONFDLJ@CipherShed?3?3BootEncryption?3?3Veri@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@VerifyResc:

; 1529 : 
; 1530 : 		for (char drive = 'Z'; drive >= 'C'; --drive)

  0005a	c6 45 97 5a	 mov	 BYTE PTR _drive$149639[ebp], 90 ; 0000005aH
  0005e	8b ff		 npad	 2
$LL6@VerifyResc:
  00060	80 7d 97 43	 cmp	 BYTE PTR _drive$149639[ebp], 67 ; 00000043H
  00064	0f 8c 26 02 00
	00		 jl	 $LN4@VerifyResc

; 1531 : 		{
; 1532 : 			try
; 1533 : 			{
; 1534 : 				string path = "X:";

  0006a	6a 02		 push	 2
  0006c	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_02EHLIIHJM@X?3?$AA@
  00076	8d 4d 98	 lea	 ecx, DWORD PTR _path$149644[ebp]
  00079	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0007c	89 75 b0	 mov	 DWORD PTR _path$149644[ebp+24], esi
  0007f	89 5d ac	 mov	 DWORD PTR _path$149644[ebp+20], ebx
  00082	88 5d 9c	 mov	 BYTE PTR _path$149644[ebp+4], bl
  00085	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1535 : 				path[0] = drive;

  0008a	83 7d b0 10	 cmp	 DWORD PTR _path$149644[ebp+24], 16 ; 00000010H
  0008e	8b 45 9c	 mov	 eax, DWORD PTR _path$149644[ebp+4]
  00091	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00095	73 03		 jae	 SHORT $LN71@VerifyResc
  00097	8d 45 9c	 lea	 eax, DWORD PTR _path$149644[ebp+4]
$LN71@VerifyResc:
  0009a	8a 4d 97	 mov	 cl, BYTE PTR _drive$149639[ebp]

; 1536 : 
; 1537 : 				Device driveDevice (path, true);

  0009d	6a 01		 push	 1
  0009f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000a2	88 08		 mov	 BYTE PTR [eax], cl
  000a4	8b cc		 mov	 ecx, esp
  000a6	89 65 84	 mov	 DWORD PTR $T185107[ebp], esp
  000a9	6a ff		 push	 -1
  000ab	53		 push	 ebx
  000ac	8d 55 98	 lea	 edx, DWORD PTR _path$149644[ebp]
  000af	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  000b2	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b5	52		 push	 edx
  000b6	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000b9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000be	8d 4d b4	 lea	 ecx, DWORD PTR _driveDevice$149646[ebp]
  000c1	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device

; 1538 : 				size_t verifiedSectorCount = (TC_CD_BOOTSECTOR_OFFSET + TC_ORIG_BOOT_LOADER_BACKUP_SECTOR_OFFSET + TC_BOOT_LOADER_AREA_SIZE) / 2048;
; 1539 : 				Buffer buffer ((verifiedSectorCount + 1) * 2048);

  000c6	68 00 d0 01 00	 push	 118784			; 0001d000H
  000cb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000cf	c7 85 74 ff ff
	ff 00 d0 01 00	 mov	 DWORD PTR _buffer$149649[ebp+4], 118784 ; 0001d000H
  000d9	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000de	8b f8		 mov	 edi, eax
  000e0	83 c4 04	 add	 esp, 4
  000e3	89 bd 70 ff ff
	ff		 mov	 DWORD PTR _buffer$149649[ebp], edi
  000e9	3b fb		 cmp	 edi, ebx
  000eb	75 2d		 jne	 SHORT $LN98@VerifyResc
  000ed	6a 01		 push	 1
  000ef	68 00 00 00 00	 push	 OFFSET __bad_alloc_Message
  000f4	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T185409[ebp]
  000fa	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBDH@Z ; std::exception::exception
  000ff	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00104	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T185409[ebp]
  0010a	50		 push	 eax
  0010b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T185409[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00115	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN98@VerifyResc:

; 1540 : 
; 1541 : 				DWORD bytesRead = driveDevice.Read (buffer.Ptr(), buffer.Size());

  0011a	68 00 d0 01 00	 push	 118784			; 0001d000H
  0011f	57		 push	 edi
  00120	8d 4d b4	 lea	 ecx, DWORD PTR _driveDevice$149646[ebp]
  00123	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00127	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1542 : 				if (bytesRead != buffer.Size())

  0012c	3d 00 d0 01 00	 cmp	 eax, 118784		; 0001d000H
  00131	74 5f		 je	 SHORT $LN2@VerifyResc

; 1543 : 					continue;

  00133	57		 push	 edi
  00134	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00139	83 c4 04	 add	 esp, 4
  0013c	38 5d b5	 cmp	 BYTE PTR _driveDevice$149646[ebp+1], bl
  0013f	74 12		 je	 SHORT $LN117@VerifyResc
  00141	38 5d b4	 cmp	 BYTE PTR _driveDevice$149646[ebp], bl
  00144	75 0a		 jne	 SHORT $LN116@VerifyResc
  00146	8b 4d c4	 mov	 ecx, DWORD PTR _driveDevice$149646[ebp+16]
  00149	51		 push	 ecx
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN116@VerifyResc:
  00150	88 5d b5	 mov	 BYTE PTR _driveDevice$149646[ebp+1], bl
$LN117@VerifyResc:
  00153	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00158	39 7d e4	 cmp	 DWORD PTR _driveDevice$149646[ebp+48], edi
  0015b	72 0c		 jb	 SHORT $LN136@VerifyResc
  0015d	8b 55 d0	 mov	 edx, DWORD PTR _driveDevice$149646[ebp+28]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00166	83 c4 04	 add	 esp, 4
$LN136@VerifyResc:
  00169	39 7d b0	 cmp	 DWORD PTR _path$149644[ebp+24], edi
  0016c	89 75 e4	 mov	 DWORD PTR _driveDevice$149646[ebp+48], esi
$LN309@VerifyResc:
  0016f	88 5d d0	 mov	 BYTE PTR _driveDevice$149646[ebp+28], bl
  00172	89 5d e0	 mov	 DWORD PTR _driveDevice$149646[ebp+44], ebx
  00175	72 0c		 jb	 SHORT $LN162@VerifyResc
  00177	8b 45 9c	 mov	 eax, DWORD PTR _path$149644[ebp+4]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00180	83 c4 04	 add	 esp, 4
$LN162@VerifyResc:
  00183	fe 4d 97	 dec	 BYTE PTR _drive$149639[ebp]

; 1552 : 	}

  00186	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0018d	e9 ce fe ff ff	 jmp	 $LL6@VerifyResc
$LN2@VerifyResc:

; 1544 : 
; 1545 : 				if (memcmp (buffer.Ptr(), RescueIsoImage, buffer.Size()) == 0)

  00192	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	8b 89 10 02 00
	00		 mov	 ecx, DWORD PTR [ecx+528]
  0019b	b8 00 d0 01 00	 mov	 eax, 118784		; 0001d000H
  001a0	8b f7		 mov	 esi, edi
$LL11@VerifyResc:
  001a2	83 f8 04	 cmp	 eax, 4
  001a5	72 11		 jb	 SHORT $LN302@VerifyResc
  001a7	8b 16		 mov	 edx, DWORD PTR [esi]
  001a9	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001ab	75 2f		 jne	 SHORT $LN1@VerifyResc
  001ad	83 e8 04	 sub	 eax, 4
  001b0	83 c1 04	 add	 ecx, 4
  001b3	83 c6 04	 add	 esi, 4
  001b6	eb ea		 jmp	 SHORT $LL11@VerifyResc
$LN302@VerifyResc:
  001b8	3b c3		 cmp	 eax, ebx
  001ba	74 65		 je	 SHORT $LN13@VerifyResc
  001bc	8a 11		 mov	 dl, BYTE PTR [ecx]
  001be	3a 16		 cmp	 dl, BYTE PTR [esi]
  001c0	75 1a		 jne	 SHORT $LN1@VerifyResc
  001c2	83 f8 01	 cmp	 eax, 1
  001c5	76 5a		 jbe	 SHORT $LN13@VerifyResc
  001c7	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  001ca	3a 56 01	 cmp	 dl, BYTE PTR [esi+1]
  001cd	75 0d		 jne	 SHORT $LN1@VerifyResc
  001cf	83 f8 02	 cmp	 eax, 2
  001d2	76 4d		 jbe	 SHORT $LN13@VerifyResc
  001d4	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  001d7	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  001da	74 45		 je	 SHORT $LN13@VerifyResc
$LN1@VerifyResc:

; 1547 : 			}

  001dc	57		 push	 edi
  001dd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001e2	83 c4 04	 add	 esp, 4
  001e5	38 5d b5	 cmp	 BYTE PTR _driveDevice$149646[ebp+1], bl
  001e8	74 12		 je	 SHORT $LN245@VerifyResc
  001ea	38 5d b4	 cmp	 BYTE PTR _driveDevice$149646[ebp], bl
  001ed	75 0a		 jne	 SHORT $LN244@VerifyResc
  001ef	8b 4d c4	 mov	 ecx, DWORD PTR _driveDevice$149646[ebp+16]
  001f2	51		 push	 ecx
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN244@VerifyResc:
  001f9	88 5d b5	 mov	 BYTE PTR _driveDevice$149646[ebp+1], bl
$LN245@VerifyResc:
  001fc	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00201	39 75 e4	 cmp	 DWORD PTR _driveDevice$149646[ebp+48], esi
  00204	72 0c		 jb	 SHORT $LN264@VerifyResc
  00206	8b 55 d0	 mov	 edx, DWORD PTR _driveDevice$149646[ebp+28]
  00209	52		 push	 edx
  0020a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0020f	83 c4 04	 add	 esp, 4
$LN264@VerifyResc:
  00212	39 75 b0	 cmp	 DWORD PTR _path$149644[ebp+24], esi
  00215	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR _driveDevice$149646[ebp+48], 15 ; 0000000fH
  0021c	e9 4e ff ff ff	 jmp	 $LN309@VerifyResc
$LN13@VerifyResc:

; 1546 : 					return true;

  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00227	83 c4 04	 add	 esp, 4
  0022a	38 5d b5	 cmp	 BYTE PTR _driveDevice$149646[ebp+1], bl
  0022d	74 12		 je	 SHORT $LN183@VerifyResc
  0022f	38 5d b4	 cmp	 BYTE PTR _driveDevice$149646[ebp], bl
  00232	75 0a		 jne	 SHORT $LN182@VerifyResc
  00234	8b 4d c4	 mov	 ecx, DWORD PTR _driveDevice$149646[ebp+16]
  00237	51		 push	 ecx
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN182@VerifyResc:
  0023e	88 5d b5	 mov	 BYTE PTR _driveDevice$149646[ebp+1], bl
$LN183@VerifyResc:
  00241	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00246	39 75 e4	 cmp	 DWORD PTR _driveDevice$149646[ebp+48], esi
  00249	72 0c		 jb	 SHORT $LN202@VerifyResc
  0024b	8b 55 d0	 mov	 edx, DWORD PTR _driveDevice$149646[ebp+28]
  0024e	52		 push	 edx
  0024f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00254	83 c4 04	 add	 esp, 4
$LN202@VerifyResc:
  00257	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR _driveDevice$149646[ebp+48], 15 ; 0000000fH
  0025e	89 5d e0	 mov	 DWORD PTR _driveDevice$149646[ebp+44], ebx
  00261	88 5d d0	 mov	 BYTE PTR _driveDevice$149646[ebp+28], bl
  00264	39 75 b0	 cmp	 DWORD PTR _path$149644[ebp+24], esi
  00267	72 0c		 jb	 SHORT $LN228@VerifyResc
  00269	8b 45 9c	 mov	 eax, DWORD PTR _path$149644[ebp+4]
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00272	83 c4 04	 add	 esp, 4
$LN228@VerifyResc:
  00275	b0 01		 mov	 al, 1
  00277	eb 19		 jmp	 SHORT $LN8@VerifyResc
__catch$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$0:

; 1548 : 			catch (...) { }

  00279	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00280	b8 00 00 00 00	 mov	 eax, $LN305@VerifyResc
  00285	c3		 ret	 0
$LN305@VerifyResc:
  00286	33 db		 xor	 ebx, ebx
  00288	fe 4d 97	 dec	 BYTE PTR _drive$149639[ebp]
  0028b	e9 d0 fd ff ff	 jmp	 $LL6@VerifyResc
$LN4@VerifyResc:

; 1549 : 		}
; 1550 : 
; 1551 : 		return false;

  00290	32 c0		 xor	 al, al
$LN8@VerifyResc:

; 1552 : 	}

  00292	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00295	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0029c	59		 pop	 ecx
  0029d	5f		 pop	 edi
  0029e	5e		 pop	 esi
  0029f	5b		 pop	 ebx
  002a0	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a3	33 cd		 xor	 ecx, ebp
  002a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
$LN307@VerifyResc:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$2:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR _path$149644[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$4:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR _driveDevice$149646[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ$5:
  00010	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$149649[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1Buffer@CipherShed@@QAE@XZ ; CipherShed::Buffer::~Buffer
__ehhandler$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::VerifyRescueDisk
PUBLIC	??_C@_0DC@PMGJGMIM@SYSTEM?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0DC@DDPDEKGA@SYSTEM?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0EL@DAJCBMFB@SYSTEM?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0EL@LBBGNDAK@SYSTEM?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_07LMLHFMEG@Service?$AA@			; `string'
PUBLIC	??_C@_0CL@GLOJDCBD@Mounts?5CipherShed?5system?5favorit@ ; `string'
PUBLIC	??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@ ; `string'
PUBLIC	??_C@_0BL@PJLIINBJ@TrueCrypt?5System?5Favorites?$AA@ ; `string'
PUBLIC	??_C@_09ENFKIOHO@Event?5Log?$AA@		; `string'
PUBLIC	??_C@_0BK@KLJIEDOC@?$CC?5?1systemFavoritesService?$AA@ ; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@		; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService
EXTRN	__imp__DeleteService@4:PROC
EXTRN	__imp__OpenServiceA@12:PROC
EXTRN	_DeleteLocalMachineRegistryKey:PROC
EXTRN	_WriteLocalMachineRegistryString:PROC
EXTRN	__imp__ChangeServiceConfig2A@12:PROC
EXTRN	__imp__CreateServiceA@52:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; GetServiceConfigPath
EXTRN	__imp__OpenSCManagerA@12:PROC
;	COMDAT ??_C@_0DC@PMGJGMIM@SYSTEM?2CurrentControlSet?2Control@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0DC@PMGJGMIM@SYSTEM?2CurrentControlSet?2Control@ DB 'SYSTEM\Current'
	DB	'ControlSet\Control\SafeBoot\Network', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DDPDEKGA@SYSTEM?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0DC@DDPDEKGA@SYSTEM?2CurrentControlSet?2Control@ DB 'SYSTEM\Current'
	DB	'ControlSet\Control\SafeBoot\Minimal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@DAJCBMFB@SYSTEM?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0EL@DAJCBMFB@SYSTEM?2CurrentControlSet?2Control@ DB 'SYSTEM\Current'
	DB	'ControlSet\Control\SafeBoot\Network\TrueCryptSystemFavorites', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@LBBGNDAK@SYSTEM?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0EL@LBBGNDAK@SYSTEM?2CurrentControlSet?2Control@ DB 'SYSTEM\Current'
	DB	'ControlSet\Control\SafeBoot\Minimal\TrueCryptSystemFavorites', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LMLHFMEG@Service?$AA@
CONST	SEGMENT
??_C@_07LMLHFMEG@Service?$AA@ DB 'Service', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GLOJDCBD@Mounts?5CipherShed?5system?5favorit@
CONST	SEGMENT
??_C@_0CL@GLOJDCBD@Mounts?5CipherShed?5system?5favorit@ DB 'Mounts Cipher'
	DB	'Shed system favorite volumes.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
CONST	SEGMENT
??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@ DB 'TrueCryptSystemFavor'
	DB	'ites', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PJLIINBJ@TrueCrypt?5System?5Favorites?$AA@
CONST	SEGMENT
??_C@_0BL@PJLIINBJ@TrueCrypt?5System?5Favorites?$AA@ DB 'TrueCrypt System'
	DB	' Favorites', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09ENFKIOHO@Event?5Log?$AA@
CONST	SEGMENT
??_C@_09ENFKIOHO@Event?5Log?$AA@ DB 'Event Log', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KLJIEDOC@?$CC?5?1systemFavoritesService?$AA@
CONST	SEGMENT
??_C@_0BK@KLJIEDOC@?$CC?5?1systemFavoritesService?$AA@ DB '" /systemFavor'
	DB	'itesService', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@ DB 'CipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$2
__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$3
__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$0
__ehfuncinfo$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z
	DD	03H
	DD	FLAT:__tryblocktable$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$10
	DD	07H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$11
	DD	05H
	DD	05H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$12
__unwindtable$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$6
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z
_TEXT	SEGMENT
$T186379 = -160						; size = 28
$T186378 = -132						; size = 28
$T186380 = -104						; size = 28
$T186381 = -76						; size = 8
$T186375 = -68						; size = 8
$T186383 = -60						; size = 8
$T186377 = -52						; size = 8
$T186376 = -44						; size = 8
$T186382 = -36						; size = 8
_scm$ = -28						; size = 4
_this$GSCopy$ = -24					; size = 4
_configMap$186462 = -20					; size = 4
_description$149994 = -20				; size = 4
__$EHRec$ = -16						; size = 16
_servicePath$ = 0					; size = 28
_appPath$149966 = 28					; size = 260
__$ArrayPad$ = 288					; size = 4
_registerService$ = 300					; size = 4
?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z PROC ; CipherShed::BootEncryption::RegisterSystemFavoritesService, COMDAT
; _this$ = ecx

; 1781 : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 dc fe
	ff ff		 lea	 ebp, DWORD PTR [esp-292]
  00008	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 20 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b f9		 mov	 edi, ecx

; 1782 : 		if (!IsAdmin() && IsUacSupported())

  00041	89 7d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00044	e8 00 00 00 00	 call	 _IsAdmin
  00049	85 c0		 test	 eax, eax
  0004b	75 1d		 jne	 SHORT $LN30@RegisterSy@2
  0004d	e8 00 00 00 00	 call	 _IsUacSupported
  00052	85 c0		 test	 eax, eax
  00054	74 14		 je	 SHORT $LN30@RegisterSy@2

; 1783 : 		{
; 1784 : 			Elevator::RegisterSystemFavoritesService (registerService);

  00056	8b 85 2c 01 00
	00		 mov	 eax, DWORD PTR _registerService$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@Elevator@CipherShed@@SAXH@Z ; CipherShed::Elevator::RegisterSystemFavoritesService
  00062	83 c4 04	 add	 esp, 4

; 1785 : 			return;

  00065	e9 f4 02 00 00	 jmp	 $LN31@RegisterSy@2
$LN30@RegisterSy@2:

; 1786 : 		}
; 1787 : 
; 1788 : 		SC_HANDLE scm = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  0006a	68 3f 00 0f 00	 push	 983103			; 000f003fH
  0006f	33 db		 xor	 ebx, ebx
  00071	53		 push	 ebx
  00072	53		 push	 ebx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12
  00079	8b f0		 mov	 esi, eax
  0007b	89 75 e4	 mov	 DWORD PTR _scm$[ebp], esi

; 1789 : 		throw_sys_if (!scm);

  0007e	3b f3		 cmp	 esi, ebx
  00080	75 1e		 jne	 SHORT $LN28@RegisterSy@2
  00082	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T186375[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008f	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00094	8d 4d bc	 lea	 ecx, DWORD PTR $T186375[ebp]
  00097	51		 push	 ecx
  00098	89 45 c0	 mov	 DWORD PTR $T186375[ebp+4], eax
  0009b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@RegisterSy@2:

; 1790 : 
; 1791 : 		string servicePath = GetServiceConfigPath (TC_APP_NAME ".exe");

  000a0	8d 55 00	 lea	 edx, DWORD PTR _servicePath$[ebp]
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
  000a8	52		 push	 edx
  000a9	e8 00 00 00 00	 call	 ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
  000ae	83 c4 08	 add	 esp, 8
  000b1	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 1792 : 
; 1793 : 		if (registerService)

  000b4	39 9d 2c 01 00
	00		 cmp	 DWORD PTR _registerService$[ebp], ebx
  000ba	0f 84 cb 01 00
	00		 je	 $LN25@RegisterSy@2

; 1794 : 		{
; 1795 : 			try
; 1796 : 			{
; 1797 : 				RegisterSystemFavoritesService (FALSE);

  000c0	53		 push	 ebx
  000c1	8b cf		 mov	 ecx, edi
  000c3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000c7	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService
  000cc	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000cf	eb 13		 jmp	 SHORT $LN23@RegisterSy@2
__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$0:

; 1798 : 			}
; 1799 : 			catch (...) { }

  000d1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000d8	b8 00 00 00 00	 mov	 eax, $LN96@RegisterSy@2
  000dd	c3		 ret	 0
$LN96@RegisterSy@2:
  000de	8b 75 e4	 mov	 esi, DWORD PTR _scm$[ebp]
  000e1	8b 7d e8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN23@RegisterSy@2:

; 1800 : 
; 1801 : 			char appPath[TC_MAX_PATH];
; 1802 : 			throw_sys_if (!GetModuleFileName (NULL, appPath, sizeof (appPath)));

  000e4	68 04 01 00 00	 push	 260			; 00000104H
  000e9	8d 45 1c	 lea	 eax, DWORD PTR _appPath$149966[ebp]
  000ec	50		 push	 eax
  000ed	6a 00		 push	 0
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  000f5	85 c0		 test	 eax, eax
  000f7	75 1e		 jne	 SHORT $LN22@RegisterSy@2
  000f9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T186376[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00106	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0010b	8d 4d d4	 lea	 ecx, DWORD PTR $T186376[ebp]
  0010e	51		 push	 ecx
  0010f	89 45 d8	 mov	 DWORD PTR $T186376[ebp+4], eax
  00112	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN22@RegisterSy@2:

; 1803 : 
; 1804 : 			throw_sys_if (!CopyFile (appPath, servicePath.c_str(), FALSE));

  00117	8b 45 04	 mov	 eax, DWORD PTR _servicePath$[ebp+4]
  0011a	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  0011f	39 5d 18	 cmp	 DWORD PTR _servicePath$[ebp+24], ebx
  00122	73 03		 jae	 SHORT $LN62@RegisterSy@2
  00124	8d 45 04	 lea	 eax, DWORD PTR _servicePath$[ebp+4]
$LN62@RegisterSy@2:
  00127	6a 00		 push	 0
  00129	50		 push	 eax
  0012a	8d 55 1c	 lea	 edx, DWORD PTR _appPath$149966[ebp]
  0012d	52		 push	 edx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileA@12
  00134	85 c0		 test	 eax, eax
  00136	75 1e		 jne	 SHORT $LN18@RegisterSy@2
  00138	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T186377[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00145	89 45 d0	 mov	 DWORD PTR $T186377[ebp+4], eax
  00148	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0014d	8d 45 cc	 lea	 eax, DWORD PTR $T186377[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@RegisterSy@2:

; 1805 : 
; 1806 : 			SC_HANDLE service = CreateService (scm,
; 1807 : 				TC_SYSTEM_FAVORITES_SERVICE_NAME,
; 1808 : 				TC_APP_NAME_LEGACY " System Favorites",
; 1809 : 				SERVICE_ALL_ACCESS,
; 1810 : 				SERVICE_WIN32_OWN_PROCESS,
; 1811 : 				SERVICE_AUTO_START,
; 1812 : 				SERVICE_ERROR_NORMAL,
; 1813 : 				(string ("\"") + servicePath + "\" " TC_SYSTEM_FAVORITES_SERVICE_CMDLINE_OPTION).c_str(),
; 1814 : 				TC_SYSTEM_FAVORITES_SERVICE_LOAD_ORDER_GROUP,
; 1815 : 				NULL,
; 1816 : 				NULL,
; 1817 : 				NULL,
; 1818 : 				NULL);

  00156	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  0015b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T186378[ebp]
  00161	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00166	8d 4d 00	 lea	 ecx, DWORD PTR _servicePath$[ebp]
  00169	51		 push	 ecx
  0016a	50		 push	 eax
  0016b	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T186379[ebp]
  00171	52		 push	 edx
  00172	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00176	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KLJIEDOC@?$CC?5?1systemFavoritesService?$AA@
  00180	50		 push	 eax
  00181	8d 45 98	 lea	 eax, DWORD PTR $T186380[ebp]
  00184	50		 push	 eax
  00185	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00189	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0018e	83 c4 18	 add	 esp, 24			; 00000018H
  00191	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  00194	72 05		 jb	 SHORT $LN71@RegisterSy@2
  00196	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00199	eb 03		 jmp	 SHORT $LN72@RegisterSy@2
$LN71@RegisterSy@2:
  0019b	83 c0 04	 add	 eax, 4
$LN72@RegisterSy@2:
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	6a 00		 push	 0
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_09ENFKIOHO@Event?5Log?$AA@
  001ab	50		 push	 eax
  001ac	6a 01		 push	 1
  001ae	6a 02		 push	 2
  001b0	53		 push	 ebx
  001b1	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PJLIINBJ@TrueCrypt?5System?5Favorites?$AA@
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  001c0	56		 push	 esi
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateServiceA@52
  001c7	8d 4d 98	 lea	 ecx, DWORD PTR $T186380[ebp]
  001ca	8b f0		 mov	 esi, eax
  001cc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d1	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T186379[ebp]
  001d7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001dc	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T186378[ebp]
  001e2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  001e6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1819 : 
; 1820 : 			throw_sys_if (!service);

  001eb	85 f6		 test	 esi, esi
  001ed	75 16		 jne	 SHORT $LN14@RegisterSy@2
  001ef	8d 4d b4	 lea	 ecx, DWORD PTR $T186381[ebp]
  001f2	e8 00 00 00 00	 call	 ??0SystemException@CipherShed@@QAE@XZ ; CipherShed::SystemException::SystemException
  001f7	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001fc	8d 4d b4	 lea	 ecx, DWORD PTR $T186381[ebp]
  001ff	51		 push	 ecx
  00200	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@RegisterSy@2:

; 1821 : 
; 1822 : 			SERVICE_DESCRIPTION description;
; 1823 : 			description.lpDescription = "Mounts CipherShed system favorite volumes.";
; 1824 : 			ChangeServiceConfig2 (service, SERVICE_CONFIG_DESCRIPTION, &description);

  00205	8d 55 ec	 lea	 edx, DWORD PTR _description$149994[ebp]
  00208	52		 push	 edx
  00209	6a 01		 push	 1
  0020b	56		 push	 esi
  0020c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _description$149994[ebp], OFFSET ??_C@_0CL@GLOJDCBD@Mounts?5CipherShed?5system?5favorit@
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ChangeServiceConfig2A@12

; 1825 : 
; 1826 : 			CloseServiceHandle (service);

  00219	56		 push	 esi
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 1827 : 
; 1828 : 			try
; 1829 : 			{
; 1830 : 				WriteLocalMachineRegistryString ("SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\" TC_SYSTEM_FAVORITES_SERVICE_NAME, NULL, "Service", FALSE);

  00220	6a 00		 push	 0
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_07LMLHFMEG@Service?$AA@
  00227	6a 00		 push	 0
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@LBBGNDAK@SYSTEM?2CurrentControlSet?2Control@
  0022e	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00232	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryString

; 1831 : 				WriteLocalMachineRegistryString ("SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\" TC_SYSTEM_FAVORITES_SERVICE_NAME, NULL, "Service", FALSE);

  00237	6a 00		 push	 0
  00239	68 00 00 00 00	 push	 OFFSET ??_C@_07LMLHFMEG@Service?$AA@
  0023e	6a 00		 push	 0
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DAJCBMFB@SYSTEM?2CurrentControlSet?2Control@
  00245	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryString
  0024a	83 c4 20	 add	 esp, 32			; 00000020H

; 1832 : 
; 1833 : 				SetDriverConfigurationFlag (TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES, true);

  0024d	6a 01		 push	 1
  0024f	6a 02		 push	 2
  00251	8b cf		 mov	 ecx, edi
  00253	e8 00 00 00 00	 call	 ?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z ; CipherShed::BootEncryption::SetDriverConfigurationFlag

; 1844 : 			}
; 1845 : 		}
; 1846 : 		else

  00258	e9 f9 00 00 00	 jmp	 $LN9@RegisterSy@2
__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$2:

; 1834 : 			}
; 1835 : 			catch (...)
; 1836 : 			{
; 1837 : 				try
; 1838 : 				{
; 1839 : 					RegisterSystemFavoritesService (false);

  0025d	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00260	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00263	6a 00		 push	 0
  00265	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00269	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService
  0026e	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
$LN46@RegisterSy@2:

; 1842 : 
; 1843 : 				throw;

  00275	6a 00		 push	 0
  00277	6a 00		 push	 0
  00279	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$3:

; 1840 : 				}
; 1841 : 				catch (...) { }

  0027e	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00285	b8 00 00 00 00	 mov	 eax, $LN46@RegisterSy@2
  0028a	c3		 ret	 0
$LN25@RegisterSy@2:

; 1847 : 		{
; 1848 : 			SetDriverConfigurationFlag (TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD_FOR_SYS_FAVORITES, false);

  0028b	8d 45 ec	 lea	 eax, DWORD PTR _configMap$186462[ebp]
  0028e	50		 push	 eax
  0028f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  00299	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  0029e	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a1	85 c0		 test	 eax, eax
  002a3	74 03		 je	 SHORT $LN77@RegisterSy@2
$LN98@RegisterSy@2:
  002a5	8b 45 ec	 mov	 eax, DWORD PTR _configMap$186462[ebp]
$LN77@RegisterSy@2:
  002a8	83 e0 fd	 and	 eax, -3			; fffffffdH
  002ab	50		 push	 eax
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  002b6	8b cf		 mov	 ecx, edi
  002b8	e8 00 00 00 00	 call	 ?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue

; 1849 : 
; 1850 : 			DeleteLocalMachineRegistryKey ("SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal", TC_SYSTEM_FAVORITES_SERVICE_NAME);

  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@DDPDEKGA@SYSTEM?2CurrentControlSet?2Control@
  002c7	e8 00 00 00 00	 call	 _DeleteLocalMachineRegistryKey

; 1851 : 			DeleteLocalMachineRegistryKey ("SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network", TC_SYSTEM_FAVORITES_SERVICE_NAME);

  002cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PMGJGMIM@SYSTEM?2CurrentControlSet?2Control@
  002d6	e8 00 00 00 00	 call	 _DeleteLocalMachineRegistryKey
  002db	83 c4 10	 add	 esp, 16			; 00000010H

; 1852 : 
; 1853 : 			SC_HANDLE service = OpenService (scm, TC_SYSTEM_FAVORITES_SERVICE_NAME, SERVICE_ALL_ACCESS);

  002de	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  002e8	56		 push	 esi
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  002ef	8b f0		 mov	 esi, eax

; 1854 : 			throw_sys_if (!service);

  002f1	3b f3		 cmp	 esi, ebx
  002f3	75 1e		 jne	 SHORT $LN7@RegisterSy@2
  002f5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T186382[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  002fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00302	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00307	8d 4d dc	 lea	 ecx, DWORD PTR $T186382[ebp]
  0030a	51		 push	 ecx
  0030b	89 45 e0	 mov	 DWORD PTR $T186382[ebp+4], eax
  0030e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@RegisterSy@2:

; 1855 : 
; 1856 : 			throw_sys_if (!DeleteService (service));

  00313	56		 push	 esi
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteService@4
  0031a	85 c0		 test	 eax, eax
  0031c	75 1e		 jne	 SHORT $LN3@RegisterSy@2
  0031e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T186383[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0032b	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00330	8d 55 c4	 lea	 edx, DWORD PTR $T186383[ebp]
  00333	52		 push	 edx
  00334	89 45 c8	 mov	 DWORD PTR $T186383[ebp+4], eax
  00337	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@RegisterSy@2:

; 1857 : 			CloseServiceHandle (service);

  0033c	56		 push	 esi
  0033d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 1858 : 
; 1859 : 			DeleteFile (servicePath.c_str());

  00343	83 7d 18 10	 cmp	 DWORD PTR _servicePath$[ebp+24], 16 ; 00000010H
  00347	8b 45 04	 mov	 eax, DWORD PTR _servicePath$[ebp+4]
  0034a	73 03		 jae	 SHORT $LN93@RegisterSy@2
  0034c	8d 45 04	 lea	 eax, DWORD PTR _servicePath$[ebp+4]
$LN93@RegisterSy@2:
  0034f	50		 push	 eax
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
$LN9@RegisterSy@2:

; 1860 : 		}
; 1861 : 	}

  00356	8d 4d 00	 lea	 ecx, DWORD PTR _servicePath$[ebp]
  00359	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN31@RegisterSy@2:
  0035e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00361	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00368	59		 pop	 ecx
  00369	5f		 pop	 edi
  0036a	5e		 pop	 esi
  0036b	5b		 pop	 ebx
  0036c	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00372	33 cd		 xor	 ecx, ebp
  00374	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00379	81 c5 24 01 00
	00		 add	 ebp, 292		; 00000124H
  0037f	8b e5		 mov	 esp, ebp
  00381	5d		 pop	 ebp
  00382	c2 04 00	 ret	 4
$LN100@RegisterSy@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$6:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR _servicePath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$7:
  00008	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T186378[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z$8:
  00013	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T186379[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 8a 2c 01 00
	00		 mov	 ecx, DWORD PTR [edx+300]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ENDP ; CipherShed::BootEncryption::RegisterSystemFavoritesService
PUBLIC	??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0M@BHFNFFHI@PagingFiles?$AA@		; `string'
PUBLIC	??_C@_0BE@GGLBNJIB@X?3?2pagefile?4sys?50?50?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RestrictPagingFilesToSystemPartition@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::RestrictPagingFilesToSystemPartition
EXTRN	_WriteLocalMachineRegistryMultiString:PROC
EXTRN	_strncpy:PROC
;	COMDAT ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ DB 'System\Current'
	DB	'ControlSet\Control\Session Manager\Memory Management', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
CONST	SEGMENT
??_C@_0M@BHFNFFHI@PagingFiles?$AA@ DB 'PagingFiles', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGLBNJIB@X?3?2pagefile?4sys?50?50?$AA@
CONST	SEGMENT
??_C@_0BE@GGLBNJIB@X?3?2pagefile?4sys?50?50?$AA@ DB 'X:\pagefile.sys 0 0', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?RestrictPagingFilesToSystemPartition@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
$T186519 = -168						; size = 8
$T186518 = -160						; size = 28
_pagingFiles$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
?RestrictPagingFilesToSystemPartition@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::RestrictPagingFilesToSystemPartition, COMDAT
; _this$ = ecx

; 2313 : 	{

  00000	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+168], eax
  00014	56		 push	 esi

; 2314 : 		char pagingFiles[128];
; 2315 : 		strncpy (pagingFiles, "X:\\pagefile.sys 0 0", sizeof (pagingFiles));

  00015	68 80 00 00 00	 push	 128			; 00000080H
  0001a	8d 44 24 2c	 lea	 eax, DWORD PTR _pagingFiles$[esp+176]
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GGLBNJIB@X?3?2pagefile?4sys?50?50?$AA@
  00023	50		 push	 eax
  00024	8b f1		 mov	 esi, ecx
  00026	e8 00 00 00 00	 call	 _strncpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2316 : 		pagingFiles[0] = GetWindowsDirectory()[0];

  0002e	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T186518[esp+172]
  00032	51		 push	 ecx
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetWindowsDirectoryA
  0003a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003f	5e		 pop	 esi
  00040	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  00043	72 05		 jb	 SHORT $LN16@RestrictPa
  00045	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00048	eb 03		 jmp	 SHORT $LN17@RestrictPa
$LN16@RestrictPa:
  0004a	83 c0 04	 add	 eax, 4
$LN17@RestrictPa:
  0004d	8a 10		 mov	 dl, BYTE PTR [eax]
  0004f	88 54 24 24	 mov	 BYTE PTR _pagingFiles$[esp+168], dl
  00053	39 4c 24 20	 cmp	 DWORD PTR $T186518[esp+192], ecx
  00057	72 0d		 jb	 SHORT $LN34@RestrictPa
  00059	8b 44 24 0c	 mov	 eax, DWORD PTR $T186518[esp+172]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00063	83 c4 04	 add	 esp, 4
$LN34@RestrictPa:

; 2317 : 
; 2318 : 		throw_sys_if (!WriteLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", pagingFiles, strlen (pagingFiles) + 2));

  00066	8d 44 24 24	 lea	 eax, DWORD PTR _pagingFiles$[esp+168]
  0006a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0006d	8d 49 00	 npad	 3
$LL48@RestrictPa:
  00070	8a 08		 mov	 cl, BYTE PTR [eax]
  00072	40		 inc	 eax
  00073	84 c9		 test	 cl, cl
  00075	75 f9		 jne	 SHORT $LL48@RestrictPa
  00077	2b c2		 sub	 eax, edx
  00079	83 c0 02	 add	 eax, 2
  0007c	50		 push	 eax
  0007d	8d 4c 24 28	 lea	 ecx, DWORD PTR _pagingFiles$[esp+172]
  00081	51		 push	 ecx
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  0008c	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryMultiString
  00091	83 c4 10	 add	 esp, 16			; 00000010H
  00094	85 c0		 test	 eax, eax
  00096	75 20		 jne	 SHORT $LN2@RestrictPa
  00098	c7 04 24 00 00
	00 00		 mov	 DWORD PTR $T186519[esp+168], OFFSET ??_7SystemException@CipherShed@@6B@
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000a5	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000aa	8d 54 24 04	 lea	 edx, DWORD PTR $T186519[esp+172]
  000ae	52		 push	 edx
  000af	89 44 24 0c	 mov	 DWORD PTR $T186519[esp+180], eax
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@RestrictPa:

; 2319 : 	}

  000b8	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+168]
  000bf	33 cc		 xor	 ecx, esp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  000cc	c3		 ret	 0
$LN49@RestrictPa:
?RestrictPagingFilesToSystemPartition@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::RestrictPagingFilesToSystemPartition
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T186664 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T186664[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
; Function compile flags: /Ogtpy
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T186669 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T186669[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@3
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@3:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@4
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@4:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UPartition@CipherShed@@@std@@QAEXPAUPartition@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::Partition>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@UPartition@CipherShed@@@std@@QAEXPAUPartition@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UPartition@CipherShed@@@std@@QAEXPAUPartition@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::Partition>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::Partition,CipherShed::Partition>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UPartition@CipherShed@@@std@@QAEXPAUPartition@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::Partition>::construct
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T186704 = -20						; size = 4
__Lock$186728 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T186704[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T186704[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$186728[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$186728[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T186704[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T186743 = -20						; size = 4
__Lock$186767 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T186743[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T186743[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen@2
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$186767[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen@2
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen@2
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen@2:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$186767[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen@2
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen@2:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T186743[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$153934 = -36					; size = 4
__Lock$186790 = -32					; size = 4
__Lock$153933 = -28					; size = 4
$T186782 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$186812 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$153933[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$153934[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$186790[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$186790[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$153934[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T186782[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T186782[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$153934[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$186812[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$186812[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$153933[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$153933[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$154184 = -36					; size = 4
__Lock$186837 = -32					; size = 4
__Lock$154183 = -28					; size = 4
$T186829 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$186859 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$154183[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$154184[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@4
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$186837[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@4
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN10@use_facet@4:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$186837[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@4:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@4
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@4
$LN30@use_facet@4:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@4
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@4
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@4
$LN20@use_facet@4:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@4
$LN16@use_facet@4:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@4:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@4
$LN31@use_facet@4:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@4

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@4
$LN4@use_facet@4:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$154184[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@4

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T186829[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T186829[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@4:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$154184[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$186859[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@4
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@4:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$186859[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@4:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$154183[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$154183[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	??_C@_06IBDJIBGI@Filter?$AA@			; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0BH@CAKDGKKJ@?2drivers?2truecrypt?4sys?$AA@ ; `string'
PUBLIC	??_C@_09EFLFAGB@truecrypt?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ; CipherShed::BootEncryption::SetDriverServiceStartType
EXTRN	__imp__ChangeServiceConfigA@44:PROC
EXTRN	__imp__GetShortPathNameA@12:PROC
EXTRN	__imp__GetVolumeInformationA@32:PROC
EXTRN	__imp__GetVolumePathNameA@12:PROC
EXTRN	_IsOSAtLeast:PROC
;	COMDAT ??_C@_06IBDJIBGI@Filter?$AA@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_06IBDJIBGI@Filter?$AA@ DB 'Filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CAKDGKKJ@?2drivers?2truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0BH@CAKDGKKJ@?2drivers?2truecrypt?4sys?$AA@ DB '\drivers\truecrypt.'
	DB	'sys', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFLFAGB@truecrypt?$AA@
CONST	SEGMENT
??_C@_09EFLFAGB@truecrypt?$AA@ DB 'truecrypt', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$4
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z
_TEXT	SEGMENT
$T186884 = -512						; size = 8
$T186883 = -512						; size = 8
$T186879 = -512						; size = 8
_finally551$ = -504					; size = 4
$T186877 = -504						; size = 8
_finally556$ = -496					; size = 4
$T186878 = -496						; size = 8
$T186880 = -488						; size = 28
_driverPath$ = -460					; size = 28
_path$148540 = -432					; size = 28
_filesystem$148538 = -404				; size = 128
_pathBuf$148537 = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_startType$ = 8						; size = 4
?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z PROC ; CipherShed::BootEncryption::SetDriverServiceStartType, COMDAT
; _this$ = ecx

; 539  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec f4 01 00
	00		 sub	 esp, 500		; 000001f4H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 f0 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+512], eax
  00022	55		 push	 ebp
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 04 02
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+528]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b e9		 mov	 ebp, ecx

; 540  : 		if (!IsAdmin() && IsUacSupported())

  0003c	e8 00 00 00 00	 call	 _IsAdmin
  00041	85 c0		 test	 eax, eax
  00043	75 1e		 jne	 SHORT $LN23@SetDriverS@2
  00045	e8 00 00 00 00	 call	 _IsUacSupported
  0004a	85 c0		 test	 eax, eax
  0004c	74 15		 je	 SHORT $LN23@SetDriverS@2

; 541  : 		{
; 542  : 			Elevator::SetDriverServiceStartType (startType);

  0004e	8b 84 24 14 02
	00 00		 mov	 eax, DWORD PTR _startType$[esp+524]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@Elevator@CipherShed@@SAXK@Z ; CipherShed::Elevator::SetDriverServiceStartType
  0005b	83 c4 04	 add	 esp, 4

; 543  : 			return;

  0005e	e9 ec 02 00 00	 jmp	 $LN24@SetDriverS@2
$LN23@SetDriverS@2:

; 544  : 		}
; 545  : 
; 546  : 		BOOL startOnBoot = (startType == SERVICE_BOOT_START);

  00063	33 c9		 xor	 ecx, ecx
  00065	39 8c 24 14 02
	00 00		 cmp	 DWORD PTR _startType$[esp+524], ecx

; 547  : 
; 548  : 		SC_HANDLE serviceManager = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  0006c	68 3f 00 0f 00	 push	 983103			; 000f003fH
  00071	0f 94 c1	 sete	 cl
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	8b f9		 mov	 edi, ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12

; 549  : 		throw_sys_if (!serviceManager);

  00080	85 c0		 test	 eax, eax
  00082	75 21		 jne	 SHORT $LN21@SetDriverS@2
  00084	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T186877[esp+528], OFFSET ??_7SystemException@CipherShed@@6B@
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00092	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00097	8d 54 24 1c	 lea	 edx, DWORD PTR $T186877[esp+532]
  0009b	52		 push	 edx
  0009c	89 44 24 24	 mov	 DWORD PTR $T186877[esp+540], eax
  000a0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN21@SetDriverS@2:

; 550  : 
; 551  : 		finally_do_arg (SC_HANDLE, serviceManager, { CloseServiceHandle (finally_arg); });

  000a5	89 44 24 18	 mov	 DWORD PTR _finally551$[esp+528], eax

; 552  : 
; 553  : 		SC_HANDLE service = OpenService (serviceManager, "truecrypt", SERVICE_CHANGE_CONFIG);

  000a9	6a 02		 push	 2
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  000b0	50		 push	 eax
  000b1	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+548], 0
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  000c2	8b f0		 mov	 esi, eax

; 554  : 		throw_sys_if (!service);

  000c4	85 f6		 test	 esi, esi
  000c6	75 21		 jne	 SHORT $LN17@SetDriverS@2
  000c8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T186878[esp+528], OFFSET ??_7SystemException@CipherShed@@6B@
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d6	89 44 24 24	 mov	 DWORD PTR $T186878[esp+532], eax
  000da	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000df	8d 44 24 24	 lea	 eax, DWORD PTR $T186878[esp+532]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN17@SetDriverS@2:

; 555  : 
; 556  : 		finally_do_arg (SC_HANDLE, service, { CloseServiceHandle (finally_arg); });

  000e9	89 74 24 20	 mov	 DWORD PTR _finally556$[esp+528], esi

; 557  : 
; 558  : 		// Windows versions preceding Vista can be installed on FAT filesystem which does not
; 559  : 		// support long filenames during boot. Convert the driver path to short form if required.
; 560  : 		string driverPath;

  000ed	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR _driverPath$[esp+552], 15 ; 0000000fH
  000f5	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR _driverPath$[esp+548], 0
  000fd	c6 44 24 48 00	 mov	 BYTE PTR _driverPath$[esp+532], 0
  00102	c6 84 24 0c 02
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+536], 2

; 561  : 		if (startOnBoot && !IsOSAtLeast (WIN_VISTA))

  0010a	85 ff		 test	 edi, edi
  0010c	0f 84 80 01 00
	00		 je	 $LN113@SetDriverS@2
  00112	6a 0b		 push	 11			; 0000000bH
  00114	e8 00 00 00 00	 call	 _IsOSAtLeast
  00119	83 c4 04	 add	 esp, 4
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 62 01 00
	00		 jne	 $LN115@SetDriverS@2

; 562  : 		{
; 563  : 			char pathBuf[MAX_PATH];
; 564  : 			char filesystem[128];
; 565  : 
; 566  : 			string path (GetWindowsDirectory());

  00124	8d 4c 24 60	 lea	 ecx, DWORD PTR _path$148540[esp+528]
  00128	51		 push	 ecx
  00129	8b cd		 mov	 ecx, ebp
  0012b	e8 00 00 00 00	 call	 ?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetWindowsDirectoryA

; 567  : 			path += "\\drivers\\truecrypt.sys";

  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CAKDGKKJ@?2drivers?2truecrypt?4sys?$AA@
  00135	8d 4c 24 64	 lea	 ecx, DWORD PTR _path$148540[esp+532]
  00139	c6 84 24 10 02
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+540], 3
  00141	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 568  : 
; 569  : 			if (GetVolumePathName (path.c_str(), pathBuf, sizeof (pathBuf))
; 570  : 				&& GetVolumeInformation (pathBuf, NULL, 0, NULL, NULL, NULL, filesystem, sizeof(filesystem))
; 571  : 				&& memcmp (filesystem, "FAT", 3) == 0)

  00146	8b 44 24 64	 mov	 eax, DWORD PTR _path$148540[esp+532]
  0014a	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0014f	39 6c 24 78	 cmp	 DWORD PTR _path$148540[esp+552], ebp
  00153	73 04		 jae	 SHORT $LN86@SetDriverS@2
  00155	8d 44 24 64	 lea	 eax, DWORD PTR _path$148540[esp+532]
$LN86@SetDriverS@2:
  00159	68 04 01 00 00	 push	 260			; 00000104H
  0015e	8d 94 24 00 01
	00 00		 lea	 edx, DWORD PTR _pathBuf$148537[esp+532]
  00165	52		 push	 edx
  00166	50		 push	 eax
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  0016d	85 c0		 test	 eax, eax
  0016f	0f 84 fe 00 00
	00		 je	 $LN13@SetDriverS@2
  00175	68 80 00 00 00	 push	 128			; 00000080H
  0017a	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR _filesystem$148538[esp+532]
  00181	50		 push	 eax
  00182	6a 00		 push	 0
  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _pathBuf$148537[esp+556]
  00193	51		 push	 ecx
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  0019a	85 c0		 test	 eax, eax
  0019c	0f 84 d1 00 00
	00		 je	 $LN13@SetDriverS@2
  001a2	80 7c 24 7c 46	 cmp	 BYTE PTR _filesystem$148538[esp+528], 70 ; 00000046H
  001a7	0f 85 c6 00 00
	00		 jne	 $LN13@SetDriverS@2
  001ad	80 7c 24 7d 41	 cmp	 BYTE PTR _filesystem$148538[esp+529], 65 ; 00000041H
  001b2	0f 85 bb 00 00
	00		 jne	 $LN13@SetDriverS@2
  001b8	80 7c 24 7e 54	 cmp	 BYTE PTR _filesystem$148538[esp+530], 84 ; 00000054H
  001bd	0f 85 b0 00 00
	00		 jne	 $LN13@SetDriverS@2

; 572  : 			{
; 573  : 				throw_sys_if (GetShortPathName (path.c_str(), pathBuf, sizeof (pathBuf)) == 0);

  001c3	8b 44 24 64	 mov	 eax, DWORD PTR _path$148540[esp+532]
  001c7	39 6c 24 78	 cmp	 DWORD PTR _path$148540[esp+552], ebp
  001cb	73 04		 jae	 SHORT $LN92@SetDriverS@2
  001cd	8d 44 24 64	 lea	 eax, DWORD PTR _path$148540[esp+532]
$LN92@SetDriverS@2:
  001d1	68 04 01 00 00	 push	 260			; 00000104H
  001d6	8d 94 24 00 01
	00 00		 lea	 edx, DWORD PTR _pathBuf$148537[esp+532]
  001dd	52		 push	 edx
  001de	50		 push	 eax
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetShortPathNameA@12
  001e5	85 c0		 test	 eax, eax
  001e7	75 18		 jne	 SHORT $LN11@SetDriverS@2
  001e9	8d 4c 24 10	 lea	 ecx, DWORD PTR $T186879[esp+528]
  001ed	e8 00 00 00 00	 call	 ??0SystemException@CipherShed@@QAE@XZ ; CipherShed::SystemException::SystemException
  001f2	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001f7	8d 44 24 14	 lea	 eax, DWORD PTR $T186879[esp+532]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@SetDriverS@2:

; 574  : 
; 575  : 				// Convert absolute path to relative to the Windows directory
; 576  : 				driverPath = pathBuf;

  00201	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR _pathBuf$148537[esp+528]
  00208	51		 push	 ecx
  00209	8d 4c 24 48	 lea	 ecx, DWORD PTR _driverPath$[esp+532]
  0020d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 577  : 				driverPath = driverPath.substr (driverPath.rfind ("\\", driverPath.rfind ("\\", driverPath.rfind ("\\") - 1) - 1) + 1);

  00212	6a ff		 push	 -1
  00214	6a ff		 push	 -1
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  0021b	8d 4c 24 50	 lea	 ecx, DWORD PTR _driverPath$[esp+540]
  0021f	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00224	48		 dec	 eax
  00225	50		 push	 eax
  00226	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  0022b	8d 4c 24 50	 lea	 ecx, DWORD PTR _driverPath$[esp+540]
  0022f	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00234	48		 dec	 eax
  00235	50		 push	 eax
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  0023b	8d 4c 24 50	 lea	 ecx, DWORD PTR _driverPath$[esp+540]
  0023f	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00244	40		 inc	 eax
  00245	50		 push	 eax
  00246	8d 54 24 30	 lea	 edx, DWORD PTR $T186880[esp+536]
  0024a	52		 push	 edx
  0024b	8d 4c 24 50	 lea	 ecx, DWORD PTR _driverPath$[esp+540]
  0024f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00254	6a ff		 push	 -1
  00256	6a 00		 push	 0
  00258	50		 push	 eax
  00259	8d 4c 24 50	 lea	 ecx, DWORD PTR _driverPath$[esp+540]
  0025d	c6 84 24 18 02
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+548], 4
  00265	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0026a	8d 4c 24 28	 lea	 ecx, DWORD PTR $T186880[esp+528]
  0026e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN13@SetDriverS@2:

; 578  : 			}
; 579  : 		}

  00273	8d 4c 24 60	 lea	 ecx, DWORD PTR _path$148540[esp+528]
  00277	c6 84 24 0c 02
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+536], 2
  0027f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00284	eb 05		 jmp	 SHORT $LN8@SetDriverS@2
$LN115@SetDriverS@2:
  00286	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
$LN8@SetDriverS@2:

; 580  : 
; 581  : 		throw_sys_if (!ChangeServiceConfig (service, SERVICE_NO_CHANGE, SERVICE_NO_CHANGE,
; 582  : 			startOnBoot ? SERVICE_ERROR_SEVERE : SERVICE_ERROR_NORMAL,
; 583  : 			driverPath.empty() ? NULL : driverPath.c_str(),
; 584  : 			startOnBoot ? "Filter" : NULL,
; 585  : 			NULL, NULL, NULL, NULL, NULL));

  0028b	83 7c 24 58 00	 cmp	 DWORD PTR _driverPath$[esp+548], 0
  00290	75 04		 jne	 SHORT $LN26@SetDriverS@2
$LN113@SetDriverS@2:
  00292	33 c0		 xor	 eax, eax
  00294	eb 0e		 jmp	 SHORT $LN104@SetDriverS@2
$LN26@SetDriverS@2:
  00296	8b 44 24 48	 mov	 eax, DWORD PTR _driverPath$[esp+532]
  0029a	39 6c 24 5c	 cmp	 DWORD PTR _driverPath$[esp+552], ebp
  0029e	73 04		 jae	 SHORT $LN104@SetDriverS@2
  002a0	8d 44 24 48	 lea	 eax, DWORD PTR _driverPath$[esp+532]
$LN104@SetDriverS@2:
  002a4	6a 00		 push	 0
  002a6	6a 00		 push	 0
  002a8	8b cf		 mov	 ecx, edi
  002aa	f7 d9		 neg	 ecx
  002ac	1b c9		 sbb	 ecx, ecx
  002ae	6a 00		 push	 0
  002b0	81 e1 00 00 00
	00		 and	 ecx, OFFSET ??_C@_06IBDJIBGI@Filter?$AA@
  002b6	33 d2		 xor	 edx, edx
  002b8	6a 00		 push	 0
  002ba	85 ff		 test	 edi, edi
  002bc	6a 00		 push	 0
  002be	0f 95 c2	 setne	 dl
  002c1	51		 push	 ecx
  002c2	50		 push	 eax
  002c3	42		 inc	 edx
  002c4	52		 push	 edx
  002c5	6a ff		 push	 -1
  002c7	6a ff		 push	 -1
  002c9	56		 push	 esi
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ChangeServiceConfigA@44
  002d0	85 c0		 test	 eax, eax
  002d2	75 21		 jne	 SHORT $LN7@SetDriverS@2
  002d4	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T186883[esp+528], OFFSET ??_7SystemException@CipherShed@@6B@
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  002e2	89 44 24 14	 mov	 DWORD PTR $T186883[esp+532], eax
  002e6	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  002eb	8d 44 24 14	 lea	 eax, DWORD PTR $T186883[esp+532]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@SetDriverS@2:

; 586  : 
; 587  : 		// ChangeServiceConfig() rejects SERVICE_BOOT_START with ERROR_INVALID_PARAMETER
; 588  : 		throw_sys_if (!WriteLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", "Start", startType));

  002f5	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR _startType$[esp+524]
  002fc	51		 push	 ecx
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_05FHMJPCKA@Start?$AA@
  00302	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  00307	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryDword
  0030c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030f	85 c0		 test	 eax, eax
  00311	75 21		 jne	 SHORT $LN3@SetDriverS@2
  00313	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T186884[esp+528], OFFSET ??_7SystemException@CipherShed@@6B@
  0031b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00321	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00326	8d 54 24 14	 lea	 edx, DWORD PTR $T186884[esp+532]
  0032a	52		 push	 edx
  0032b	89 44 24 1c	 mov	 DWORD PTR $T186884[esp+540], eax
  0032f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@SetDriverS@2:

; 589  : 	}

  00334	8d 4c 24 44	 lea	 ecx, DWORD PTR _driverPath$[esp+528]
  00338	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0033d	8d 44 24 20	 lea	 eax, DWORD PTR _finally556$[esp+528]
  00341	e8 00 00 00 00	 call	 ??1Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::~Finally556
  00346	8d 44 24 18	 lea	 eax, DWORD PTR _finally551$[esp+528]
  0034a	e8 00 00 00 00	 call	 ??1Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::~Finally551
$LN24@SetDriverS@2:
  0034f	8b 8c 24 04 02
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+528]
  00356	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035d	59		 pop	 ecx
  0035e	5f		 pop	 edi
  0035f	5e		 pop	 esi
  00360	5d		 pop	 ebp
  00361	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+512]
  00368	33 cc		 xor	 ecx, esp
  0036a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036f	81 c4 00 02 00
	00		 add	 esp, 512		; 00000200H
  00375	c2 04 00	 ret	 4
$LN118@SetDriverS@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$0:
  00000	8d 85 08 fe ff
	ff		 lea	 eax, DWORD PTR _finally551$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Finally551@?8??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`9'::Finally551::~Finally551
__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$1:
  0000b	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR _finally556$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Finally556@?O@??SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z@QAE@XZ ; `CipherShed::BootEncryption::SetDriverServiceStartType'::`14'::Finally556::~Finally556
__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$2:
  00016	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _driverPath$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$3:
  00021	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _path$148540[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z$4:
  0002c	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T186880[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z:
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 82 00 fe ff
	ff		 lea	 eax, DWORD PTR [edx-512]
  00041	8b 8a fc fd ff
	ff		 mov	 ecx, DWORD PTR [edx-516]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00051	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ENDP ; CipherShed::BootEncryption::SetDriverServiceStartType
PUBLIC	??_C@_0BK@HBDIJMEI@TEMP_NOT_ON_SYS_PARTITION?$AA@ ; `string'
PUBLIC	??_C@_0CC@GBKHKMEM@USER_PROFILE_NOT_ON_SYS_PARTITIO@ ; `string'
PUBLIC	??_C@_05JLNEMJLN@dummy?$AA@			; `string'
PUBLIC	__TI2?AUErrorException@CipherShed@@
PUBLIC	??_C@_0CH@FJCBOPJI@RESTRICT_PAGING_FILES_TO_SYS_PAR@ ; `string'
PUBLIC	??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@ ; `string'
PUBLIC	??_C@_0CB@KMEGGAHA@PAGING_FILE_NOT_ON_SYS_PARTITION@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS
PUBLIC	??1ErrorException@CipherShed@@QAE@XZ		; CipherShed::ErrorException::~ErrorException
PUBLIC	__CTA2?AUErrorException@CipherShed@@
PUBLIC	__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
PUBLIC	??0ErrorException@CipherShed@@QAE@ABU01@@Z	; CipherShed::ErrorException::ErrorException
EXTRN	_GetConfigPath:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	_AskWarnYesNoString:PROC
EXTRN	_ReadLocalMachineRegistryMultiString:PROC
EXTRN	_toupper:PROC
EXTRN	__chkstk:PROC
;	COMDAT __CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36 DD 00H
	DD	FLAT:??_R0?AUErrorException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	024H
	DD	FLAT:??0ErrorException@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUErrorException@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUErrorException@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUErrorException@CipherShed@@@8??0ErrorException@CipherShed@@QAE@ABU01@@Z36
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT ??_C@_0BK@HBDIJMEI@TEMP_NOT_ON_SYS_PARTITION?$AA@
CONST	SEGMENT
??_C@_0BK@HBDIJMEI@TEMP_NOT_ON_SYS_PARTITION?$AA@ DB 'TEMP_NOT_ON_SYS_PAR'
	DB	'TITION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GBKHKMEM@USER_PROFILE_NOT_ON_SYS_PARTITIO@
CONST	SEGMENT
??_C@_0CC@GBKHKMEM@USER_PROFILE_NOT_ON_SYS_PARTITIO@ DB 'USER_PROFILE_NOT'
	DB	'_ON_SYS_PARTITION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLNEMJLN@dummy?$AA@
CONST	SEGMENT
??_C@_05JLNEMJLN@dummy?$AA@ DB 'dummy', 00H		; `string'
CONST	ENDS
;	COMDAT __TI2?AUErrorException@CipherShed@@
xdata$x	SEGMENT
__TI2?AUErrorException@CipherShed@@ DD 00H
	DD	FLAT:??1ErrorException@CipherShed@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AUErrorException@CipherShed@@
xdata$x	ENDS
;	COMDAT ??_C@_0CH@FJCBOPJI@RESTRICT_PAGING_FILES_TO_SYS_PAR@
CONST	SEGMENT
??_C@_0CH@FJCBOPJI@RESTRICT_PAGING_FILES_TO_SYS_PAR@ DB 'RESTRICT_PAGING_'
	DB	'FILES_TO_SYS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@
CONST	SEGMENT
??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@ DB 'LEAKS_OUTSIDE_SY'
	DB	'SPART_UNIVERSAL_EXPLANATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KMEGGAHA@PAGING_FILE_NOT_ON_SYS_PARTITION@
CONST	SEGMENT
??_C@_0CB@KMEGGAHA@PAGING_FILE_NOT_ON_SYS_PARTITION@ DB 'PAGING_FILE_NOT_'
	DB	'ON_SYS_PARTITION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$5
	DD	03H
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$7
	DD	05H
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$10
	DD	07H
	DD	FLAT:__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$11
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
_windowsDrive$ = -65774					; size = 1
_pagingFilesOk$ = -65773				; size = 1
_pagingFileRegDataSize$ = -65772			; size = 4
$T187144 = -65768					; size = 28
$T187141 = -65768					; size = 28
$T187138 = -65768					; size = 28
$T187134 = -65768					; size = 28
$T187131 = -65768					; size = 28
$T187140 = -65740					; size = 36
$T187137 = -65740					; size = 36
$T187136 = -65740					; size = 28
_this$GSCopy$ = -65704					; size = 4
$T187142 = -65700					; size = 28
$T187139 = -65700					; size = 28
$T187135 = -65700					; size = 28
$T187133 = -65672					; size = 28
$T187146 = -65644					; size = 28
$T187145 = -65616					; size = 36
$T187147 = -65580					; size = 28
_pagingFileRegData$ = -65552				; size = 65536
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS, COMDAT
; _this$ = ecx

; 1928 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 e4 00 01 00	 mov	 eax, 65764		; 000100e4H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 e0 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65776], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c4		 xor	 eax, esp
  00031	50		 push	 eax
  00032	8d 84 24 f8 00
	01 00		 lea	 eax, DWORD PTR __$EHRec$[esp+65796]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1929 : 		char windowsDrive = (char) toupper (GetWindowsDirectory()[0]);

  0003f	8d 44 24 1c	 lea	 eax, DWORD PTR $T187131[esp+65796]
  00043	8b e9		 mov	 ebp, ecx
  00045	50		 push	 eax

; 1951 : 		{
; 1952 : 			if (AskWarnYesNoString ((wchar_t *) (wstring (GetString ("PAGING_FILE_NOT_ON_SYS_PARTITION")) 
; 1953 : 				+ GetString ("LEAKS_OUTSIDE_SYSPART_UNIVERSAL_EXPLANATION")
; 1954 : 				+ L"\n\n\n"
; 1955 : 				+ GetString ("RESTRICT_PAGING_FILES_TO_SYS_PARTITION")
; 1956 : 				).c_str()) == IDYES)

  00046	89 6c 24 60	 mov	 DWORD PTR _this$GSCopy$[esp+65800], ebp
  0004a	e8 00 00 00 00	 call	 ?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetWindowsDirectoryA
  0004f	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00054	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00057	72 05		 jb	 SHORT $LN36@InitialSec

; 1929 : 		char windowsDrive = (char) toupper (GetWindowsDirectory()[0]);

  00059	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005c	eb 03		 jmp	 SHORT $LN37@InitialSec
$LN36@InitialSec:
  0005e	83 c0 04	 add	 eax, 4
$LN37@InitialSec:
  00061	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _toupper
  0006a	83 c4 04	 add	 esp, 4
  0006d	8a d8		 mov	 bl, al
  0006f	88 5c 24 16	 mov	 BYTE PTR _windowsDrive$[esp+65796], bl
  00073	39 74 24 34	 cmp	 DWORD PTR $T187131[esp+65820], esi
  00077	72 0d		 jb	 SHORT $LN54@InitialSec
  00079	8b 54 24 20	 mov	 edx, DWORD PTR $T187131[esp+65800]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 04	 add	 esp, 4
$LN54@InitialSec:

; 1930 : 
; 1931 : 		// Paging files
; 1932 : 		bool pagingFilesOk = !IsPagingFileActive (TRUE);

  00086	e8 00 00 00 00	 call	 _IsAdmin
  0008b	85 c0		 test	 eax, eax
  0008d	75 1f		 jne	 SHORT $LN64@InitialSec
  0008f	e8 00 00 00 00	 call	 _IsUacSupported
  00094	85 c0		 test	 eax, eax
  00096	74 16		 je	 SHORT $LN64@InitialSec
  00098	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a7	6a 01		 push	 1
  000a9	50		 push	 eax
  000aa	ff d2		 call	 edx
  000ac	eb 0a		 jmp	 SHORT $LN448@InitialSec
$LN64@InitialSec:
  000ae	6a 01		 push	 1
  000b0	e8 00 00 00 00	 call	 _IsPagingFileActive
  000b5	83 c4 04	 add	 esp, 4
$LN448@InitialSec:
  000b8	85 c0		 test	 eax, eax
  000ba	0f 95 c0	 setne	 al
  000bd	84 c0		 test	 al, al

; 1933 : 
; 1934 : 		char pagingFileRegData[65536];
; 1935 : 		DWORD pagingFileRegDataSize = sizeof (pagingFileRegData);
; 1936 : 
; 1937 : 		if (ReadLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", pagingFileRegData, &pagingFileRegDataSize)
; 1938 : 			&& pagingFileRegDataSize > 4)

  000bf	8d 44 24 18	 lea	 eax, DWORD PTR _pagingFileRegDataSize$[esp+65796]
  000c3	50		 push	 eax
  000c4	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _pagingFileRegData$[esp+65800]
  000cb	51		 push	 ecx
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  000d6	0f 94 44 24 27	 sete	 BYTE PTR _pagingFilesOk$[esp+65812]
  000db	c7 44 24 28 00
	00 01 00	 mov	 DWORD PTR _pagingFileRegDataSize$[esp+65812], 65536 ; 00010000H
  000e3	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryMultiString
  000e8	83 c4 10	 add	 esp, 16			; 00000010H
  000eb	85 c0		 test	 eax, eax
  000ed	74 59		 je	 SHORT $LN6@InitialSec
  000ef	8b 44 24 18	 mov	 eax, DWORD PTR _pagingFileRegDataSize$[esp+65796]
  000f3	83 f8 04	 cmp	 eax, 4
  000f6	76 50		 jbe	 SHORT $LN6@InitialSec

; 1939 : 		{
; 1940 : 			for (size_t i = 1; i < pagingFileRegDataSize - 2; ++i)

  000f8	be 01 00 00 00	 mov	 esi, 1
  000fd	8d 50 fe	 lea	 edx, DWORD PTR [eax-2]
  00100	3b d6		 cmp	 edx, esi
  00102	76 3f		 jbe	 SHORT $LN445@InitialSec
  00104	b3 5c		 mov	 bl, 92			; 0000005cH
$LL8@InitialSec:

; 1941 : 			{
; 1942 : 				if (memcmp (pagingFileRegData + i, ":\\", 2) == 0 && toupper (pagingFileRegData[i - 1]) != windowsDrive)

  00106	80 bc 34 f4 00
	00 00 3a	 cmp	 BYTE PTR _pagingFileRegData$[esp+esi+65796], 58 ; 0000003aH
  0010e	75 27		 jne	 SHORT $LN7@InitialSec
  00110	38 9c 34 f5 00
	00 00		 cmp	 BYTE PTR _pagingFileRegData$[esp+esi+65797], bl
  00117	75 1e		 jne	 SHORT $LN7@InitialSec
  00119	0f be 84 34 f3
	00 00 00	 movsx	 eax, BYTE PTR _pagingFileRegData$[esp+esi+65795]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _toupper
  00127	0f be 4c 24 1a	 movsx	 ecx, BYTE PTR _windowsDrive$[esp+65800]
  0012c	83 c4 04	 add	 esp, 4
  0012f	3b c1		 cmp	 eax, ecx
  00131	75 20		 jne	 SHORT $LN441@InitialSec
  00133	8b 44 24 18	 mov	 eax, DWORD PTR _pagingFileRegDataSize$[esp+65796]
$LN7@InitialSec:

; 1939 : 		{
; 1940 : 			for (size_t i = 1; i < pagingFileRegDataSize - 2; ++i)

  00137	46		 inc	 esi
  00138	8d 50 fe	 lea	 edx, DWORD PTR [eax-2]
  0013b	3b f2		 cmp	 esi, edx
  0013d	72 c7		 jb	 SHORT $LL8@InitialSec
  0013f	8a 5c 24 16	 mov	 bl, BYTE PTR _windowsDrive$[esp+65796]
$LN445@InitialSec:
  00143	be 10 00 00 00	 mov	 esi, 16			; 00000010H
$LN6@InitialSec:

; 1943 : 				{
; 1944 : 					pagingFilesOk = false;
; 1945 : 					break;
; 1946 : 				}
; 1947 : 			}
; 1948 : 		}
; 1949 : 
; 1950 : 		if (!pagingFilesOk)

  00148	80 7c 24 17 00	 cmp	 BYTE PTR _pagingFilesOk$[esp+65796], 0
  0014d	0f 85 0d 02 00
	00		 jne	 $LN4@InitialSec
$LN441@InitialSec:

; 1951 : 		{
; 1952 : 			if (AskWarnYesNoString ((wchar_t *) (wstring (GetString ("PAGING_FILE_NOT_ON_SYS_PARTITION")) 
; 1953 : 				+ GetString ("LEAKS_OUTSIDE_SYSPART_UNIVERSAL_EXPLANATION")
; 1954 : 				+ L"\n\n\n"
; 1955 : 				+ GetString ("RESTRICT_PAGING_FILES_TO_SYS_PARTITION")
; 1956 : 				).c_str()) == IDYES)

  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KMEGGAHA@PAGING_FILE_NOT_ON_SYS_PARTITION@
  00158	e8 00 00 00 00	 call	 _GetString
  0015d	33 ff		 xor	 edi, edi
  0015f	83 c4 04	 add	 esp, 4
  00162	33 c9		 xor	 ecx, ecx
  00164	66 89 8c 24 80
	00 00 00	 mov	 WORD PTR $T187133[esp+65800], cx
  0016c	bd 07 00 00 00	 mov	 ebp, 7
  00171	8b c8		 mov	 ecx, eax
  00173	89 ac 24 94 00
	00 00		 mov	 DWORD PTR $T187133[esp+65820], ebp
  0017a	89 bc 24 90 00
	00 00		 mov	 DWORD PTR $T187133[esp+65816], edi
  00181	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
$LL442@InitialSec:
  00184	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00187	83 c1 02	 add	 ecx, 2
  0018a	66 3b d7	 cmp	 dx, di
  0018d	75 f5		 jne	 SHORT $LL442@InitialSec
  0018f	2b ce		 sub	 ecx, esi
  00191	d1 f9		 sar	 ecx, 1
  00193	51		 push	 ecx
  00194	50		 push	 eax
  00195	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR $T187133[esp+65804]
  0019c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@
  001a6	89 bc 24 04 01
	01 00		 mov	 DWORD PTR __$EHRec$[esp+65808], edi
  001ad	e8 00 00 00 00	 call	 _GetString
  001b2	50		 push	 eax
  001b3	8d 94 24 84 00
	00 00		 lea	 edx, DWORD PTR $T187133[esp+65804]
  001ba	52		 push	 edx
  001bb	8d 44 24 28	 lea	 eax, DWORD PTR $T187134[esp+65808]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
  001ca	50		 push	 eax
  001cb	8d 4c 24 78	 lea	 ecx, DWORD PTR $T187135[esp+65820]
  001cf	51		 push	 ecx
  001d0	c6 84 24 1c 01
	01 00 01	 mov	 BYTE PTR __$EHRec$[esp+65832], 1
  001d8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001dd	8b f0		 mov	 esi, eax
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FJCBOPJI@RESTRICT_PAGING_FILES_TO_SYS_PAR@
  001e4	c6 84 24 20 01
	01 00 02	 mov	 BYTE PTR __$EHRec$[esp+65836], 2
  001ec	e8 00 00 00 00	 call	 _GetString
  001f1	50		 push	 eax
  001f2	8d 54 24 5c	 lea	 edx, DWORD PTR $T187136[esp+65832]
  001f6	56		 push	 esi
  001f7	52		 push	 edx
  001f8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001fd	be 08 00 00 00	 mov	 esi, 8
  00202	83 c4 2c	 add	 esp, 44			; 0000002cH
  00205	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00208	72 05		 jb	 SHORT $LN111@InitialSec
  0020a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0020d	eb 03		 jmp	 SHORT $LN112@InitialSec
$LN111@InitialSec:
  0020f	83 c0 04	 add	 eax, 4
$LN112@InitialSec:
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _AskWarnYesNoString
  00218	83 c4 04	 add	 esp, 4
  0021b	83 f8 06	 cmp	 eax, 6
  0021e	0f 94 c3	 sete	 bl
  00221	39 74 24 50	 cmp	 DWORD PTR $T187136[esp+65820], esi
  00225	72 0d		 jb	 SHORT $LN131@InitialSec
  00227	8b 44 24 3c	 mov	 eax, DWORD PTR $T187136[esp+65800]
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00231	83 c4 04	 add	 esp, 4
$LN131@InitialSec:
  00234	33 c9		 xor	 ecx, ecx
  00236	89 6c 24 50	 mov	 DWORD PTR $T187136[esp+65820], ebp
  0023a	89 7c 24 4c	 mov	 DWORD PTR $T187136[esp+65816], edi
  0023e	66 89 4c 24 3c	 mov	 WORD PTR $T187136[esp+65800], cx
  00243	39 74 24 78	 cmp	 DWORD PTR $T187135[esp+65820], esi
  00247	72 0d		 jb	 SHORT $LN159@InitialSec
  00249	8b 54 24 64	 mov	 edx, DWORD PTR $T187135[esp+65800]
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00253	83 c4 04	 add	 esp, 4
$LN159@InitialSec:
  00256	33 c0		 xor	 eax, eax
  00258	89 6c 24 78	 mov	 DWORD PTR $T187135[esp+65820], ebp
  0025c	89 7c 24 74	 mov	 DWORD PTR $T187135[esp+65816], edi
  00260	66 89 44 24 64	 mov	 WORD PTR $T187135[esp+65800], ax
  00265	39 74 24 34	 cmp	 DWORD PTR $T187134[esp+65820], esi
  00269	72 0d		 jb	 SHORT $LN187@InitialSec
  0026b	8b 4c 24 20	 mov	 ecx, DWORD PTR $T187134[esp+65800]
  0026f	51		 push	 ecx
  00270	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00275	83 c4 04	 add	 esp, 4
$LN187@InitialSec:
  00278	33 d2		 xor	 edx, edx
  0027a	89 6c 24 34	 mov	 DWORD PTR $T187134[esp+65820], ebp
  0027e	89 7c 24 30	 mov	 DWORD PTR $T187134[esp+65816], edi
  00282	66 89 54 24 20	 mov	 WORD PTR $T187134[esp+65800], dx
  00287	c7 84 24 00 01
	01 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+65804], -1
  00292	39 b4 24 94 00
	00 00		 cmp	 DWORD PTR $T187133[esp+65820], esi
  00299	72 10		 jb	 SHORT $LN215@InitialSec
  0029b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR $T187133[esp+65800]
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002a8	83 c4 04	 add	 esp, 4
$LN215@InitialSec:
  002ab	84 db		 test	 bl, bl
  002ad	74 13		 je	 SHORT $LN3@InitialSec

; 1957 : 			{
; 1958 : 				RestrictPagingFilesToSystemPartition();

  002af	8b 4c 24 5c	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+65796]
  002b3	e8 00 00 00 00	 call	 ?RestrictPagingFilesToSystemPartition@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::RestrictPagingFilesToSystemPartition

; 1959 : 				RestartComputer();

  002b8	e8 00 00 00 00	 call	 _RestartComputer

; 1960 : 				AbortProcessSilent();

  002bd	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN3@InitialSec:

; 1961 : 			}
; 1962 : 
; 1963 : 			throw ErrorException (wstring (GetString ("PAGING_FILE_NOT_ON_SYS_PARTITION")) 
; 1964 : 				+ GetString ("LEAKS_OUTSIDE_SYSPART_UNIVERSAL_EXPLANATION"));

  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KMEGGAHA@PAGING_FILE_NOT_ON_SYS_PARTITION@
  002c7	e8 00 00 00 00	 call	 _GetString
  002cc	83 c4 04	 add	 esp, 4
  002cf	33 c9		 xor	 ecx, ecx
  002d1	66 89 4c 24 20	 mov	 WORD PTR $T187138[esp+65800], cx
  002d6	8b c8		 mov	 ecx, eax
  002d8	89 6c 24 34	 mov	 DWORD PTR $T187138[esp+65820], ebp
  002dc	89 7c 24 30	 mov	 DWORD PTR $T187138[esp+65816], edi
  002e0	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
$LL443@InitialSec:
  002e3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002e6	83 c1 02	 add	 ecx, 2
  002e9	66 3b d7	 cmp	 dx, di
  002ec	75 f5		 jne	 SHORT $LL443@InitialSec
  002ee	2b ce		 sub	 ecx, esi
  002f0	d1 f9		 sar	 ecx, 1
  002f2	51		 push	 ecx
  002f3	50		 push	 eax
  002f4	8d 4c 24 24	 lea	 ecx, DWORD PTR $T187138[esp+65804]
  002f8	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@
  00302	c7 84 24 04 01
	01 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+65808], 3
  0030d	e8 00 00 00 00	 call	 _GetString
  00312	50		 push	 eax
  00313	8d 54 24 24	 lea	 edx, DWORD PTR $T187138[esp+65804]
  00317	52		 push	 edx
  00318	8d 44 24 6c	 lea	 eax, DWORD PTR $T187139[esp+65808]
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00322	83 c4 10	 add	 esp, 16			; 00000010H
  00325	6a ff		 push	 -1
  00327	33 c9		 xor	 ecx, ecx
  00329	57		 push	 edi
  0032a	66 89 4c 24 4c	 mov	 WORD PTR $T187137[esp+65816], cx
  0032f	50		 push	 eax
  00330	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T187137[esp+65816]
  00334	c6 84 24 0c 01
	01 00 04	 mov	 BYTE PTR __$EHRec$[esp+65816], 4
  0033c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR $T187137[esp+65808], OFFSET ??_7ErrorException@CipherShed@@6B@
  00344	89 6c 24 64	 mov	 DWORD PTR $T187137[esp+65840], ebp
  00348	89 7c 24 60	 mov	 DWORD PTR $T187137[esp+65836], edi
  0034c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00351	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00356	8d 54 24 3c	 lea	 edx, DWORD PTR $T187137[esp+65800]
  0035a	52		 push	 edx
  0035b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@InitialSec:

; 1965 : 		}
; 1966 : 
; 1967 : 		// User profile
; 1968 : 		char *configPath = GetConfigPath ("dummy");

  00360	68 00 00 00 00	 push	 OFFSET ??_C@_05JLNEMJLN@dummy?$AA@
  00365	e8 00 00 00 00	 call	 _GetConfigPath

; 1969 : 		if (configPath && toupper (configPath[0]) != windowsDrive)

  0036a	33 ff		 xor	 edi, edi
  0036c	83 c4 04	 add	 esp, 4
  0036f	3b c7		 cmp	 eax, edi
  00371	0f 84 8f 00 00
	00		 je	 $LN2@InitialSec
  00377	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0037a	50		 push	 eax
  0037b	e8 00 00 00 00	 call	 _toupper
  00380	0f be cb	 movsx	 ecx, bl
  00383	83 c4 04	 add	 esp, 4
  00386	3b c1		 cmp	 eax, ecx
  00388	74 7c		 je	 SHORT $LN2@InitialSec

; 1970 : 		{
; 1971 : 			throw ErrorException (wstring (GetString ("USER_PROFILE_NOT_ON_SYS_PARTITION")) 
; 1972 : 				+ GetString ("LEAKS_OUTSIDE_SYSPART_UNIVERSAL_EXPLANATION"));

  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GBKHKMEM@USER_PROFILE_NOT_ON_SYS_PARTITIO@
  0038f	e8 00 00 00 00	 call	 _GetString
  00394	83 c4 04	 add	 esp, 4
  00397	50		 push	 eax
  00398	8d 4c 24 20	 lea	 ecx, DWORD PTR $T187141[esp+65800]
  0039c	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003a1	8b f0		 mov	 esi, eax
  003a3	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@
  003a8	c7 84 24 04 01
	01 00 05 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+65808], 5
  003b3	e8 00 00 00 00	 call	 _GetString
  003b8	50		 push	 eax
  003b9	8d 54 24 68	 lea	 edx, DWORD PTR $T187142[esp+65804]
  003bd	56		 push	 esi
  003be	52		 push	 edx
  003bf	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003c4	83 c4 10	 add	 esp, 16			; 00000010H
  003c7	6a ff		 push	 -1
  003c9	33 c9		 xor	 ecx, ecx
  003cb	57		 push	 edi
  003cc	66 89 4c 24 4c	 mov	 WORD PTR $T187140[esp+65816], cx
  003d1	50		 push	 eax
  003d2	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T187140[esp+65816]
  003d6	c6 84 24 0c 01
	01 00 06	 mov	 BYTE PTR __$EHRec$[esp+65816], 6
  003de	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR $T187140[esp+65808], OFFSET ??_7ErrorException@CipherShed@@6B@
  003e6	c7 44 24 64 07
	00 00 00	 mov	 DWORD PTR $T187140[esp+65840], 7
  003ee	89 7c 24 60	 mov	 DWORD PTR $T187140[esp+65836], edi
  003f2	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  003f7	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  003fc	8d 54 24 3c	 lea	 edx, DWORD PTR $T187140[esp+65800]
  00400	52		 push	 edx
  00401	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@InitialSec:

; 1973 : 		}
; 1974 : 
; 1975 : 		// Temporary files
; 1976 : 		if (toupper (GetTempPath()[0]) != windowsDrive)

  00406	8d 44 24 1c	 lea	 eax, DWORD PTR $T187144[esp+65796]
  0040a	50		 push	 eax
  0040b	8b cd		 mov	 ecx, ebp
  0040d	e8 00 00 00 00	 call	 ?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetTempPathA
  00412	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00415	72 05		 jb	 SHORT $LN339@InitialSec
  00417	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0041a	eb 03		 jmp	 SHORT $LN340@InitialSec
$LN339@InitialSec:
  0041c	83 c0 04	 add	 eax, 4
$LN340@InitialSec:
  0041f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _toupper
  00428	0f be d3	 movsx	 edx, bl
  0042b	83 c4 04	 add	 esp, 4
  0042e	3b c2		 cmp	 eax, edx
  00430	0f 95 c3	 setne	 bl
  00433	39 74 24 34	 cmp	 DWORD PTR $T187144[esp+65820], esi
  00437	72 0d		 jb	 SHORT $LN357@InitialSec
  00439	8b 44 24 20	 mov	 eax, DWORD PTR $T187144[esp+65800]
  0043d	50		 push	 eax
  0043e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00443	83 c4 04	 add	 esp, 4
$LN357@InitialSec:
  00446	84 db		 test	 bl, bl
  00448	0f 84 c6 00 00
	00		 je	 $LN1@InitialSec

; 1977 : 		{
; 1978 : 			throw ErrorException (wstring (GetString ("TEMP_NOT_ON_SYS_PARTITION")) 
; 1979 : 				+ GetString ("LEAKS_OUTSIDE_SYSPART_UNIVERSAL_EXPLANATION"));

  0044e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HBDIJMEI@TEMP_NOT_ON_SYS_PARTITION?$AA@
  00453	e8 00 00 00 00	 call	 _GetString
  00458	83 c4 04	 add	 esp, 4
  0045b	33 c9		 xor	 ecx, ecx
  0045d	66 89 8c 24 9c
	00 00 00	 mov	 WORD PTR $T187146[esp+65800], cx
  00465	bd 07 00 00 00	 mov	 ebp, 7
  0046a	8b c8		 mov	 ecx, eax
  0046c	89 ac 24 b0 00
	00 00		 mov	 DWORD PTR $T187146[esp+65820], ebp
  00473	89 bc 24 ac 00
	00 00		 mov	 DWORD PTR $T187146[esp+65816], edi
  0047a	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  0047d	8d 49 00	 npad	 3
$LL444@InitialSec:
  00480	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00483	83 c1 02	 add	 ecx, 2
  00486	66 3b d7	 cmp	 dx, di
  00489	75 f5		 jne	 SHORT $LL444@InitialSec
  0048b	2b ce		 sub	 ecx, esi
  0048d	d1 f9		 sar	 ecx, 1
  0048f	51		 push	 ecx
  00490	50		 push	 eax
  00491	8d 8c 24 a0 00
	00 00		 lea	 ecx, DWORD PTR $T187146[esp+65804]
  00498	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BBEONPDF@LEAKS_OUTSIDE_SYSPART_UNIVERSAL_@
  004a2	89 ac 24 04 01
	01 00		 mov	 DWORD PTR __$EHRec$[esp+65808], ebp
  004a9	e8 00 00 00 00	 call	 _GetString
  004ae	50		 push	 eax
  004af	8d 94 24 a0 00
	00 00		 lea	 edx, DWORD PTR $T187146[esp+65804]
  004b6	52		 push	 edx
  004b7	8d 84 24 e4 00
	00 00		 lea	 eax, DWORD PTR $T187147[esp+65808]
  004be	50		 push	 eax
  004bf	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  004c4	83 c4 10	 add	 esp, 16			; 00000010H
  004c7	6a ff		 push	 -1
  004c9	33 c9		 xor	 ecx, ecx
  004cb	57		 push	 edi
  004cc	66 89 8c 24 c8
	00 00 00	 mov	 WORD PTR $T187145[esp+65816], cx
  004d4	50		 push	 eax
  004d5	8d 8c 24 c8 00
	00 00		 lea	 ecx, DWORD PTR $T187145[esp+65816]
  004dc	c6 84 24 0c 01
	01 00 08	 mov	 BYTE PTR __$EHRec$[esp+65816], 8
  004e4	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T187145[esp+65808], OFFSET ??_7ErrorException@CipherShed@@6B@
  004ef	89 ac 24 e0 00
	00 00		 mov	 DWORD PTR $T187145[esp+65840], ebp
  004f6	89 bc 24 dc 00
	00 00		 mov	 DWORD PTR $T187145[esp+65836], edi
  004fd	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00502	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00507	8d 94 24 b8 00
	00 00		 lea	 edx, DWORD PTR $T187145[esp+65800]
  0050e	52		 push	 edx
  0050f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@InitialSec:

; 1980 : 		}
; 1981 : 	}

  00514	8b 8c 24 f8 00
	01 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+65796]
  0051b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00522	59		 pop	 ecx
  00523	5f		 pop	 edi
  00524	5e		 pop	 esi
  00525	5d		 pop	 ebp
  00526	5b		 pop	 ebx
  00527	8b 8c 24 e0 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65776]
  0052e	33 cc		 xor	 ecx, esp
  00530	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00535	81 c4 f0 00 01
	00		 add	 esp, 65776		; 000100f0H
  0053b	c3		 ret	 0
$LN447@InitialSec:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$1:
  00000	8d 8d 78 ff fe
	ff		 lea	 ecx, DWORD PTR $T187133[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$2:
  0000b	8d 8d 18 ff fe
	ff		 lea	 ecx, DWORD PTR $T187134[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$3:
  00016	8d 8d 5c ff fe
	ff		 lea	 ecx, DWORD PTR $T187135[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$5:
  00021	8d 8d 18 ff fe
	ff		 lea	 ecx, DWORD PTR $T187138[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$6:
  0002c	8d 8d 5c ff fe
	ff		 lea	 ecx, DWORD PTR $T187139[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$7:
  00037	8d 8d 18 ff fe
	ff		 lea	 ecx, DWORD PTR $T187141[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$8:
  00042	8d 8d 5c ff fe
	ff		 lea	 ecx, DWORD PTR $T187142[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$10:
  0004d	8d 8d 94 ff fe
	ff		 lea	 ecx, DWORD PTR $T187146[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ$11:
  00058	8d 8d d4 ff fe
	ff		 lea	 ecx, DWORD PTR $T187147[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ:
  00063	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00067	8d 82 0c ff fe
	ff		 lea	 eax, DWORD PTR [edx-65780]
  0006d	8b 8a 08 ff fe
	ff		 mov	 ecx, DWORD PTR [edx-65784]
  00073	33 c8		 xor	 ecx, eax
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	83 c0 10	 add	 eax, 16			; 00000010H
  0007d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00080	33 c8		 xor	 ecx, eax
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ
  0008c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS
; Function compile flags: /Ogtpy
;	COMDAT ??1ErrorException@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1ErrorException@CipherShed@@QAE@XZ PROC		; CipherShed::ErrorException::~ErrorException, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00007	72 0c		 jb	 SHORT $LN22@ErrorExcep
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN22@ErrorExcep:
  00015	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0001c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??1ErrorException@CipherShed@@QAE@XZ ENDP		; CipherShed::ErrorException::~ErrorException
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0ErrorException@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ErrorException@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::ErrorException::ErrorException, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ErrorException@CipherShed@@6B@
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00013	33 d2		 xor	 edx, edx
  00015	6a ff		 push	 -1
  00017	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001a	83 c0 08	 add	 eax, 8
  0001d	52		 push	 edx
  0001e	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00025	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002c	50		 push	 eax
  0002d	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00031	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	c2 04 00	 ret	 4
??0ErrorException@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::ErrorException::ErrorException
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
; Function compile flags: /Ogtpy
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate@2

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate@2
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate@2:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate@2:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
PUBLIC	?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T189219 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T189219[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN72@erase@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@4
$LN72@erase@4:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@4
$LN22@erase@4:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@4:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@4
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@4:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 23		 je	 SHORT $LN1@erase@4

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00059	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00067	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@4:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  0006a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006c	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00070	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  00074	5f		 pop	 edi
  00075	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00078	89 08		 mov	 DWORD PTR [eax], ecx
  0007a	5e		 pop	 esi

; 807  : 		}

  0007b	83 c4 08	 add	 esp, 8
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T189423 = -88						; size = 8
$T189418 = -88						; size = 4
$T189420 = -80						; size = 28
$T189419 = -80						; size = 28
$T189424 = -52						; size = 8
__Str$152767 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 75 01 00 00	 jmp	 $LN142@do_put
$LN5@do_put:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T189418[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T189418[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Str$152767[esp+136], 15 ; 0000000fH
  000ab	89 5c 24 58	 mov	 DWORD PTR __Str$152767[esp+132], ebx
  000af	88 5c 24 48	 mov	 BYTE PTR __Str$152767[esp+116], bl

; 1131 : 			if (_Val)

  000b3	80 bc 24 88 00
	00 00 00	 cmp	 BYTE PTR __Val$[esp+108], 0
  000bb	bb 01 00 00 00	 mov	 ebx, 1
  000c0	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx
  000c4	74 31		 je	 SHORT $LN3@do_put

; 1132 : 				_Str.assign(_Punct_fac.truename());

  000c6	8d 54 24 20	 lea	 edx, DWORD PTR $T189419[esp+112]
  000ca	52		 push	 edx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  000d2	6a ff		 push	 -1
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$152767[esp+124]
  000db	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e5	83 7c 24 38 10	 cmp	 DWORD PTR $T189419[esp+136], 16 ; 00000010H
  000ea	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000ee	72 3e		 jb	 SHORT $LN94@do_put
  000f0	8b 44 24 24	 mov	 eax, DWORD PTR $T189419[esp+116]
  000f4	50		 push	 eax

; 1133 : 			else

  000f5	eb 2f		 jmp	 SHORT $LN155@do_put
$LN3@do_put:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f7	8d 4c 24 20	 lea	 ecx, DWORD PTR $T189420[esp+112]
  000fb	51		 push	 ecx
  000fc	8b ce		 mov	 ecx, esi
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$152767[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00116	83 7c 24 38 10	 cmp	 DWORD PTR $T189420[esp+136], 16 ; 00000010H
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN94@do_put
  00121	8b 54 24 24	 mov	 edx, DWORD PTR $T189420[esp+116]
  00125	52		 push	 edx
$LN155@do_put:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN94@do_put:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$152767[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00154	83 f8 40	 cmp	 eax, 64			; 00000040H
  00157	74 30		 je	 SHORT $LN1@do_put

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00159	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0015d	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+108]
  00161	56		 push	 esi
  00162	53		 push	 ebx
  00163	51		 push	 ecx
  00164	52		 push	 edx
  00165	8d 44 24 28	 lea	 eax, DWORD PTR $T189423[esp+128]
  00169	50		 push	 eax
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  00179	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017c	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$152767[esp+156]
  00180	83 c4 18	 add	 esp, 24			; 00000018H
  00183	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00187	33 f6		 xor	 esi, esi
$LN1@do_put:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00189	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$152767[esp+136], 16 ; 00000010H
  0018e	8b 44 24 48	 mov	 eax, DWORD PTR __Str$152767[esp+116]
  00192	73 04		 jae	 SHORT $LN123@do_put
  00194	8d 44 24 48	 lea	 eax, DWORD PTR __Str$152767[esp+116]
$LN123@do_put:
  00198	51		 push	 ecx
  00199	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019d	50		 push	 eax
  0019e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a5	50		 push	 eax
  001a6	51		 push	 ecx
  001a7	8d 54 24 4c	 lea	 edx, DWORD PTR $T189424[esp+128]
  001ab	52		 push	 edx
  001ac	57		 push	 edi
  001ad	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b4	56		 push	 esi
  001b5	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001b9	53		 push	 ebx
  001ba	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c4	50		 push	 eax
  001c5	51		 push	 ecx
  001c6	56		 push	 esi
  001c7	57		 push	 edi
  001c8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001cf	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001db	83 c4 30	 add	 esp, 48			; 00000030H
  001de	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$152767[esp+136], 16 ; 00000010H
  001e3	72 0d		 jb	 SHORT $LN142@do_put
  001e5	8b 44 24 48	 mov	 eax, DWORD PTR __Str$152767[esp+116]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ef	83 c4 04	 add	 esp, 4
$LN142@do_put:
  001f2	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f4	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00208	33 cc		 xor	 ecx, esp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	83 c4 5c	 add	 esp, 92			; 0000005cH
  00212	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T189418[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$152767[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T189419[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T189420[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@5
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@5:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@5
  0003a	5b		 pop	 ebx
$LN1@clear@5:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z$0
__unwindtable$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z$2
__ehfuncinfo$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	68 88 00 00 00	 push	 136			; 00000088H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	8b f0		 mov	 esi, eax
  00037	83 c4 04	 add	 esp, 4
  0003a	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00044	85 f6		 test	 esi, esi
  00046	74 05		 je	 SHORT $LN27@Buynode@2
  00048	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@2:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	85 c0		 test	 eax, eax
  00052	74 05		 je	 SHORT $LN37@Buynode@2
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@2:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00059	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  0005c	52		 push	 edx
  0005d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Construct@UPartition@CipherShed@@U12@@std@@YAXPAUPartition@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::Partition,CipherShed::Partition>
  00066	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00069	8b c6		 mov	 eax, esi

; 1209 : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@2:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
__Enders$ = -112					; size = 3
__Fillcount$ = -108					; size = 4
__Kseparator$ = -104					; size = 1
__Lock$190172 = -104					; size = 4
$T190138 = -100						; size = 8
$T190137 = -100						; size = 8
$T190136 = -100						; size = 8
$T190135 = -100						; size = 8
$T190134 = -100						; size = 8
$T190133 = -100						; size = 8
__Prefix$ = -100					; size = 4
$T190413 = -92						; size = 1
$T190146 = -92						; size = 8
$T190145 = -92						; size = 8
$T190144 = -92						; size = 8
$T190141 = -92						; size = 8
$T190140 = -92						; size = 8
$T190139 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T190128 = -76						; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 64	 sub	 esp, 100		; 00000064H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+112], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 78	 lea	 eax, DWORD PTR __$EHRec$[esp+132]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  00039	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+128]
  00040	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR __Buf$[esp+128]
  00047	8d 54 24 38	 lea	 edx, DWORD PTR $T190128[esp+132]
  0004b	52		 push	 edx
  0004c	89 44 24 38	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+136], eax
  00050	89 4c 24 34	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+136], ecx
  00054	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00059	50		 push	 eax
  0005a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+144], 0
  00065	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0006a	8b 6c 24 3c	 mov	 ebp, DWORD PTR $T190128[esp+136]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	89 5c 24 28	 mov	 DWORD PTR __Punct_fac$[esp+132], ebx
  00077	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+140], -1
  00082	85 ed		 test	 ebp, ebp
  00084	74 3d		 je	 SHORT $LN31@Fput
  00086	6a 00		 push	 0
  00088	8d 4c 24 20	 lea	 ecx, DWORD PTR __Lock$190172[esp+136]
  0008c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00091	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00094	85 c0		 test	 eax, eax
  00096	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	73 04		 jae	 SHORT $LN33@Fput
  0009d	48		 dec	 eax
  0009e	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN33@Fput:
  000a1	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  000a4	f7 de		 neg	 esi
  000a6	1b f6		 sbb	 esi, esi
  000a8	f7 d6		 not	 esi
  000aa	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$190172[esp+132]
  000ae	23 f5		 and	 esi, ebp
  000b0	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b5	85 f6		 test	 esi, esi
  000b7	74 0a		 je	 SHORT $LN31@Fput
  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	8b 10		 mov	 edx, DWORD PTR [eax]
  000bd	6a 01		 push	 1
  000bf	8b ce		 mov	 ecx, esi
  000c1	ff d2		 call	 edx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000c3	8d 44 24 58	 lea	 eax, DWORD PTR __Grouping$[esp+132]
  000c7	50		 push	 eax
  000c8	8b cb		 mov	 ecx, ebx
  000ca	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000cf	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d4	be 01 00 00 00	 mov	 esi, 1
  000d9	8b cb		 mov	 ecx, ebx
  000db	89 b4 24 80 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+140], esi
  000e2	ff d0		 call	 eax

; 1318 : 		string _Groupstring;

  000e4	33 c9		 xor	 ecx, ecx
  000e6	88 44 24 1c	 mov	 BYTE PTR __Kseparator$[esp+132], al
  000ea	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  000f2	89 4c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ecx
  000f6	88 4c 24 40	 mov	 BYTE PTR __Groupstring$[esp+136], cl

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000fa	8a 07		 mov	 al, BYTE PTR [edi]
  000fc	c6 84 24 80 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+140], 2
  00104	3c 2b		 cmp	 al, 43			; 0000002bH
  00106	74 08		 je	 SHORT $LN19@Fput
  00108	89 4c 24 20	 mov	 DWORD PTR __Prefix$[esp+132], ecx
  0010c	3c 2d		 cmp	 al, 45			; 0000002dH
  0010e	75 04		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  00110	89 74 24 20	 mov	 DWORD PTR __Prefix$[esp+132], esi
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00114	e8 00 00 00 00	 call	 _localeconv
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0011b	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+128]
  00122	8a 11		 mov	 dl, BYTE PTR [ecx]
  00124	53		 push	 ebx
  00125	6a 65		 push	 101			; 00000065H
  00127	57		 push	 edi
  00128	88 54 24 20	 mov	 BYTE PTR __Enders$[esp+144], dl
  0012c	c6 44 24 21 65	 mov	 BYTE PTR __Enders$[esp+145], 101 ; 00000065H
  00131	c6 44 24 22 00	 mov	 BYTE PTR __Enders$[esp+146], 0
  00136	e8 00 00 00 00	 call	 _memchr
  0013b	8b f0		 mov	 esi, eax

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0013d	0f be 44 24 20	 movsx	 eax, BYTE PTR __Enders$[esp+144]
  00142	53		 push	 ebx
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	e8 00 00 00 00	 call	 _memchr
  0014a	8b e8		 mov	 ebp, eax
  0014c	83 c4 18	 add	 esp, 24			; 00000018H

; 1331 : 		if (_Pointptr == 0)

  0014f	85 ed		 test	 ebp, ebp
  00151	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00153	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+128], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0015a	8b 4c 24 70	 mov	 ecx, DWORD PTR __Grouping$[esp+156]
  0015e	8b 54 24 5c	 mov	 edx, DWORD PTR __Grouping$[esp+136]
  00162	8b c2		 mov	 eax, edx
  00164	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00167	73 04		 jae	 SHORT $LN78@Fput
  00169	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN78@Fput:
  0016d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00170	0f 84 47 01 00
	00		 je	 $LN111@Fput
  00176	8b c2		 mov	 eax, edx
  00178	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0017b	73 04		 jae	 SHORT $LN84@Fput
  0017d	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN84@Fput:
  00181	80 38 00	 cmp	 BYTE PTR [eax], 0
  00184	0f 8e 33 01 00
	00		 jle	 $LN111@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  0018a	53		 push	 ebx
  0018b	57		 push	 edi
  0018c	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  00190	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  00195	85 f6		 test	 esi, esi
  00197	75 1c		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  00199	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+128]
  001a0	6a 30		 push	 48			; 00000030H
  001a2	51		 push	 ecx
  001a3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001a7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ac	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
  001b3	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001b5	85 ed		 test	 ebp, ebp
  001b7	75 17		 jne	 SHORT $LN183@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001b9	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR __Beforepoint$[esp+128]
  001c0	6a 30		 push	 48			; 00000030H
  001c2	52		 push	 edx
  001c3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001c7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  001cc	33 db		 xor	 ebx, ebx
  001ce	eb 07		 jmp	 SHORT $LN12@Fput
$LN183@Fput:
  001d0	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  001d7	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+128]
  001de	6a 30		 push	 48			; 00000030H
  001e0	50		 push	 eax
  001e1	2b f7		 sub	 esi, edi
  001e3	56		 push	 esi
  001e4	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  001e8	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  001ed	6a 30		 push	 48			; 00000030H
  001ef	85 ed		 test	 ebp, ebp
  001f1	75 0c		 jne	 SHORT $LN11@Fput
  001f3	53		 push	 ebx
  001f4	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001f8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  001fd	eb 31		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  001ff	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+132]
  00206	8b f5		 mov	 esi, ebp
  00208	2b f7		 sub	 esi, edi
  0020a	51		 push	 ecx
  0020b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0020e	52		 push	 edx
  0020f	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00213	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00218	6a 30		 push	 48			; 00000030H
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00220	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  00225	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+128], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  00230	8b 7c 24 5c	 mov	 edi, DWORD PTR __Grouping$[esp+136]
  00234	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00239	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+128], 0
  00244	39 5c 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], ebx
  00248	73 04		 jae	 SHORT $LN90@Fput
  0024a	8d 7c 24 5c	 lea	 edi, DWORD PTR __Grouping$[esp+136]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  0024e	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  00252	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  00256	73 04		 jae	 SHORT $LN100@Fput
  00258	8d 44 24 40	 lea	 eax, DWORD PTR __Groupstring$[esp+136]
$LN100@Fput:
  0025c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Enders$[esp+132]
  00260	51		 push	 ecx
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _strcspn
  00267	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00269	8a 07		 mov	 al, BYTE PTR [edi]
  0026b	83 c4 08	 add	 esp, 8
  0026e	3c 7f		 cmp	 al, 127			; 0000007fH
  00270	74 2e		 je	 SHORT $LN8@Fput
$LL9@Fput:
  00272	84 c0		 test	 al, al
  00274	7e 2a		 jle	 SHORT $LN8@Fput
  00276	8b d6		 mov	 edx, esi
  00278	2b 54 24 20	 sub	 edx, DWORD PTR __Prefix$[esp+132]
  0027c	0f be c0	 movsx	 eax, al
  0027f	3b c2		 cmp	 eax, edx
  00281	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  00283	6a 00		 push	 0
  00285	2b f0		 sub	 esi, eax
  00287	6a 01		 push	 1
  00289	56		 push	 esi
  0028a	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  0028e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  00293	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00297	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00299	47		 inc	 edi
$LN7@Fput:
  0029a	8a 07		 mov	 al, BYTE PTR [edi]
  0029c	3c 7f		 cmp	 al, 127			; 0000007fH
  0029e	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002a0	8b 7c 24 40	 mov	 edi, DWORD PTR __Groupstring$[esp+136]
  002a4	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  002a8	73 04		 jae	 SHORT $LN110@Fput
  002aa	8d 7c 24 40	 lea	 edi, DWORD PTR __Groupstring$[esp+136]
$LN110@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002ae	8b 5c 24 50	 mov	 ebx, DWORD PTR __Groupstring$[esp+152]
  002b2	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
$LN111@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  002bd	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+128]
  002c4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+128]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  002cb	8b 54 24 30	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]
  002cf	03 c1		 add	 eax, ecx
  002d1	03 84 24 ac 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+128]
  002d8	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  002db	03 c3		 add	 eax, ebx
  002dd	85 c9		 test	 ecx, ecx
  002df	7e 0c		 jle	 SHORT $LN21@Fput
  002e1	3b c8		 cmp	 ecx, eax
  002e3	76 08		 jbe	 SHORT $LN21@Fput
  002e5	2b c8		 sub	 ecx, eax
  002e7	89 4c 24 18	 mov	 DWORD PTR __Fillcount$[esp+132], ecx
  002eb	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  002ed	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+132], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  002f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  002f8	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _this$[esp+128]
  002ff	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00304	83 f8 40	 cmp	 eax, 64			; 00000040H
  00307	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  0030d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00312	74 3d		 je	 SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00314	8b 54 24 18	 mov	 edx, DWORD PTR __Fillcount$[esp+132]
  00318	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+128]
  0031f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  00326	52		 push	 edx
  00327	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0032e	50		 push	 eax
  0032f	51		 push	 ecx
  00330	52		 push	 edx
  00331	8d 44 24 30	 lea	 eax, DWORD PTR $T190133[esp+148]
  00335	50		 push	 eax
  00336	56		 push	 esi
  00337	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  00345	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00348	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx

; 1385 : 			_Fillcount = 0;

  0034f	eb 78		 jmp	 SHORT $LN192@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00351	83 7c 24 20 00	 cmp	 DWORD PTR __Prefix$[esp+132], 0
  00356	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  00358	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0035f	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+128]
  00366	6a 01		 push	 1
  00368	57		 push	 edi
  00369	50		 push	 eax
  0036a	51		 push	 ecx
  0036b	8d 54 24 30	 lea	 edx, DWORD PTR $T190134[esp+148]
  0036f	52		 push	 edx
  00370	56		 push	 esi
  00371	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00376	8b 08		 mov	 ecx, DWORD PTR [eax]
  00378	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  0037f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00382	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  00385	47		 inc	 edi
  00386	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0038d	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0038e	8b 44 24 18	 mov	 eax, DWORD PTR __Fillcount$[esp+132]
  00392	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+128]
  00399	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  003a0	50		 push	 eax
  003a1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  003a8	51		 push	 ecx
  003a9	52		 push	 edx
  003aa	50		 push	 eax
  003ab	8d 4c 24 30	 lea	 ecx, DWORD PTR $T190135[esp+148]
  003af	51		 push	 ecx
  003b0	56		 push	 esi
  003b1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003b6	8b 10		 mov	 edx, DWORD PTR [eax]
  003b8	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  003bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
$LN192@Fput:

; 1395 : 			_Fillcount = 0;

  003c9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+156], 0
  003d1	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  003d4	0f be 4c 24 14	 movsx	 ecx, BYTE PTR __Enders$[esp+132]
  003d9	53		 push	 ebx
  003da	51		 push	 ecx
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 _memchr
  003e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  003e4	85 c0		 test	 eax, eax
  003e6	0f 84 e9 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  003ec	8b 54 24 1c	 mov	 edx, DWORD PTR __Kseparator$[esp+132]
  003f0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  003f7	2b c7		 sub	 eax, edi
  003f9	40		 inc	 eax
  003fa	52		 push	 edx
  003fb	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  00402	8b e8		 mov	 ebp, eax
  00404	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00407	50		 push	 eax
  00408	57		 push	 edi
  00409	51		 push	 ecx
  0040a	52		 push	 edx
  0040b	8d 44 24 34	 lea	 eax, DWORD PTR $T190136[esp+152]
  0040f	50		 push	 eax
  00410	56		 push	 esi
  00411	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	89 8c 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], ecx
  0041f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00422	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+156]
  00429	51		 push	 ecx
  0042a	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00431	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00434	8b 00		 mov	 eax, DWORD PTR [eax]
  00436	6a 30		 push	 48			; 00000030H
  00438	52		 push	 edx
  00439	50		 push	 eax
  0043a	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T190137[esp+176]
  0043e	51		 push	 ecx
  0043f	56		 push	 esi
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 10		 mov	 edx, DWORD PTR [eax]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  00447	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Punct_fac$[esp+184]
  0044b	89 94 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], edx
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	89 84 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], eax
  0045c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0045e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00461	83 c4 34	 add	 esp, 52			; 00000034H
  00464	ff d0		 call	 eax
  00466	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0046d	6a 01		 push	 1
  0046f	88 44 24 2c	 mov	 BYTE PTR $T190413[esp+136], al
  00473	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T190413[esp+136]
  00477	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	50		 push	 eax
  00481	8d 4c 24 30	 lea	 ecx, DWORD PTR $T190138[esp+148]
  00485	51		 push	 ecx
  00486	56		 push	 esi
  00487	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0048c	8b 10		 mov	 edx, DWORD PTR [eax]
  0048e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00495	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00498	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR __Afterpoint$[esp+152]
  0049f	52		 push	 edx
  004a0	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004aa	8b 10		 mov	 edx, DWORD PTR [eax]
  004ac	6a 30		 push	 48			; 00000030H
  004ae	51		 push	 ecx
  004af	52		 push	 edx
  004b0	8d 44 24 50	 lea	 eax, DWORD PTR $T190139[esp+172]
  004b4	50		 push	 eax
  004b5	56		 push	 esi
  004b6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bd	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+176], ecx
  004c4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004c7	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  004ca	03 fd		 add	 edi, ebp
  004cc	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  004d3	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  004d5	53		 push	 ebx
  004d6	6a 65		 push	 101			; 00000065H
  004d8	57		 push	 edi
  004d9	e8 00 00 00 00	 call	 _memchr
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  004e1	85 c0		 test	 eax, eax
  004e3	0f 84 bd 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  004e9	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  004f0	2b c7		 sub	 eax, edi
  004f2	40		 inc	 eax
  004f3	8b e8		 mov	 ebp, eax
  004f5	8b 44 24 1c	 mov	 eax, DWORD PTR __Kseparator$[esp+132]
  004f9	50		 push	 eax
  004fa	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  00501	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  00504	51		 push	 ecx
  00505	57		 push	 edi
  00506	52		 push	 edx
  00507	50		 push	 eax
  00508	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T190140[esp+152]
  0050c	51		 push	 ecx
  0050d	56		 push	 esi
  0050e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00513	8b 10		 mov	 edx, DWORD PTR [eax]
  00515	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  0051c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  0051f	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  00526	52		 push	 edx
  00527	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0052e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00531	8b 10		 mov	 edx, DWORD PTR [eax]
  00533	6a 30		 push	 48			; 00000030H
  00535	51		 push	 ecx
  00536	52		 push	 edx
  00537	8d 44 24 54	 lea	 eax, DWORD PTR $T190141[esp+176]
  0053b	50		 push	 eax
  0053c	56		 push	 esi
  0053d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  0054b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+184]
  0054f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00552	83 c4 34	 add	 esp, 52			; 00000034H
  00555	f6 41 10 04	 test	 BYTE PTR [ecx+16], 4
  00559	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  00560	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
  0056b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  00570	75 05		 jne	 SHORT $LN24@Fput
  00572	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  00577	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057a	8b 00		 mov	 eax, DWORD PTR [eax]
  0057c	6a 01		 push	 1
  0057e	51		 push	 ecx
  0057f	52		 push	 edx
  00580	50		 push	 eax
  00581	8d 4c 24 38	 lea	 ecx, DWORD PTR $T190144[esp+148]
  00585	51		 push	 ecx
  00586	56		 push	 esi
  00587	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0058c	8b 10		 mov	 edx, DWORD PTR [eax]
  0058e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00595	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00598	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  0059b	03 fd		 add	 edi, ebp
  0059d	89 84 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], eax
  005a4	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005a6	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Kseparator$[esp+132]
  005aa	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  005b1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+128]
  005b8	51		 push	 ecx
  005b9	53		 push	 ebx
  005ba	57		 push	 edi
  005bb	52		 push	 edx
  005bc	50		 push	 eax
  005bd	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T190145[esp+152]
  005c1	51		 push	 ecx
  005c2	56		 push	 esi
  005c3	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  005c8	8b 10		 mov	 edx, DWORD PTR [eax]
  005ca	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  005d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  005d4	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  005db	52		 push	 edx
  005dc	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  005e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005e6	8b 10		 mov	 edx, DWORD PTR [eax]
  005e8	6a 30		 push	 48			; 00000030H
  005ea	51		 push	 ecx
  005eb	52		 push	 edx
  005ec	8d 44 24 54	 lea	 eax, DWORD PTR $T190146[esp+176]
  005f0	50		 push	 eax
  005f1	56		 push	 esi
  005f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  005f7	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  005f9	8b 54 24 64	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+184]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  005fd	8b 7c 24 68	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+184]
  00601	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx
  00608	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0060b	33 db		 xor	 ebx, ebx
  0060d	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  00610	8b 54 24 4c	 mov	 edx, DWORD PTR __Fillcount$[esp+184]
  00614	52		 push	 edx
  00615	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+184]
  0061c	52		 push	 edx
  0061d	50		 push	 eax
  0061e	51		 push	 ecx
  0061f	57		 push	 edi
  00620	56		 push	 esi
  00621	89 84 24 e0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+208], eax
  00628	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00632	83 c4 4c	 add	 esp, 76			; 0000004cH
  00635	39 74 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], esi
  00639	72 0d		 jb	 SHORT $LN143@Fput
  0063b	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00645	83 c4 04	 add	 esp, 4
$LN143@Fput:
  00648	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  00650	89 5c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ebx
  00654	c6 44 24 40 00	 mov	 BYTE PTR __Groupstring$[esp+136], 0
  00659	39 74 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], esi
  0065d	72 0d		 jb	 SHORT $LN181@Fput
  0065f	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Grouping$[esp+136]
  00663	51		 push	 ecx
  00664	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00669	83 c4 04	 add	 esp, 4
$LN181@Fput:
  0066c	8b c7		 mov	 eax, edi

; 1427 : 		}

  0066e	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  00672	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00679	59		 pop	 ecx
  0067a	5f		 pop	 edi
  0067b	5e		 pop	 esi
  0067c	5d		 pop	 ebp
  0067d	5b		 pop	 ebx
  0067e	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+112]
  00682	33 cc		 xor	 ecx, esp
  00684	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00689	83 c4 70	 add	 esp, 112		; 00000070H
  0068c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR $T190128[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 8c	 lea	 eax, DWORD PTR [edx-116]
  0001f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
__Lock$190703 = -76					; size = 4
$T190677 = -76						; size = 8
$T190675 = -76						; size = 8
__Prefix$ = -76						; size = 4
__Iosbase$GSCopy$ = -68					; size = 4
$T190768 = -64						; size = 1
__Punct_fac$ = -64					; size = 4
$T190678 = -60						; size = 8
$T190676 = -60						; size = 8
__Pg$153385 = -60					; size = 4
$T190667 = -52						; size = 4
___$ReturnUdt$GSCopy$ = -48				; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 54	 lea	 eax, DWORD PTR __$EHRec$[esp+96]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+92]
  00036	8b 4c 24 74	 mov	 ecx, DWORD PTR __Iosbase$[esp+92]
  0003a	8b 5c 24 7c	 mov	 ebx, DWORD PTR __Buf$[esp+92]

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0003e	8d 54 24 2c	 lea	 edx, DWORD PTR $T190667[esp+96]
  00042	52		 push	 edx
  00043	89 44 24 34	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+100], eax
  00047	89 4c 24 20	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+100], ecx
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	50		 push	 eax
  00051	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+108], 0
  00059	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005e	8b 6c 24 30	 mov	 ebp, DWORD PTR $T190667[esp+100]
  00062	83 c4 04	 add	 esp, 4
  00065	8b f0		 mov	 esi, eax
  00067	89 74 24 20	 mov	 DWORD PTR __Punct_fac$[esp+96], esi
  0006b	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+104], -1
  00073	85 ed		 test	 ebp, ebp
  00075	74 3d		 je	 SHORT $LN22@Iput
  00077	6a 00		 push	 0
  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$190703[esp+100]
  0007d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00082	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00085	85 c0		 test	 eax, eax
  00087	76 09		 jbe	 SHORT $LN24@Iput
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	73 04		 jae	 SHORT $LN24@Iput
  0008e	48		 dec	 eax
  0008f	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN24@Iput:
  00092	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00095	f7 df		 neg	 edi
  00097	1b ff		 sbb	 edi, edi
  00099	f7 d7		 not	 edi
  0009b	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$190703[esp+96]
  0009f	23 fd		 and	 edi, ebp
  000a1	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000a6	85 ff		 test	 edi, edi
  000a8	74 0a		 je	 SHORT $LN22@Iput
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	8b 10		 mov	 edx, DWORD PTR [eax]
  000ae	6a 01		 push	 1
  000b0	8b cf		 mov	 ecx, edi
  000b2	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000b4	8d 44 24 34	 lea	 eax, DWORD PTR __Grouping$[esp+96]
  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000c0	8a 03		 mov	 al, BYTE PTR [ebx]
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	89 4c 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], ecx
  000cb	3c 2b		 cmp	 al, 43			; 0000002bH
  000cd	74 27		 je	 SHORT $LN10@Iput
  000cf	3c 2d		 cmp	 al, 45			; 0000002dH
  000d1	74 23		 je	 SHORT $LN10@Iput
  000d3	3c 30		 cmp	 al, 48			; 00000030H
  000d5	75 15		 jne	 SHORT $LN12@Iput
  000d7	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000da	3c 78		 cmp	 al, 120			; 00000078H
  000dc	74 04		 je	 SHORT $LN11@Iput
  000de	3c 58		 cmp	 al, 88			; 00000058H
  000e0	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000e2	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 2
  000ea	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000ec	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 0
  000f4	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  000f6	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+96], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000fa	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Grouping$[esp+120]
  000fe	8b 54 24 38	 mov	 edx, DWORD PTR __Grouping$[esp+100]
  00102	8b c2		 mov	 eax, edx
  00104	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00107	73 04		 jae	 SHORT $LN33@Iput
  00109	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN33@Iput:
  0010d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00110	74 7e		 je	 SHORT $LN87@Iput
  00112	8b c2		 mov	 eax, edx
  00114	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00117	73 04		 jae	 SHORT $LN39@Iput
  00119	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN39@Iput:
  0011d	80 38 00	 cmp	 BYTE PTR [eax], 0
  00120	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  00122	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00125	72 06		 jb	 SHORT $LN44@Iput
  00127	89 54 24 24	 mov	 DWORD PTR __Pg$153385[esp+96], edx
  0012b	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  0012d	8d 4c 24 38	 lea	 ecx, DWORD PTR __Grouping$[esp+100]
  00131	89 4c 24 24	 mov	 DWORD PTR __Pg$153385[esp+96], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00135	8b 54 24 24	 mov	 edx, DWORD PTR __Pg$153385[esp+96]
  00139	8a 02		 mov	 al, BYTE PTR [edx]
  0013b	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
  00142	8b f5		 mov	 esi, ebp
  00144	3c 7f		 cmp	 al, 127			; 0000007fH
  00146	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00148	84 c0		 test	 al, al
  0014a	7e 4b		 jle	 SHORT $LN5@Iput
  0014c	8b ce		 mov	 ecx, esi
  0014e	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+96]
  00152	0f be c0	 movsx	 eax, al
  00155	3b c1		 cmp	 eax, ecx
  00157	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00159	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  0015b	8b d5		 mov	 edx, ebp
  0015d	2b d6		 sub	 edx, esi
  0015f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00162	50		 push	 eax
  00163	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00166	57		 push	 edi
  00167	50		 push	 eax
  00168	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  00172	8b 44 24 34	 mov	 eax, DWORD PTR __Pg$153385[esp+112]
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	c6 07 00	 mov	 BYTE PTR [edi], 0
  0017c	45		 inc	 ebp
  0017d	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  00181	7e 05		 jle	 SHORT $LN4@Iput
  00183	40		 inc	 eax
  00184	89 44 24 24	 mov	 DWORD PTR __Pg$153385[esp+96], eax
$LN4@Iput:
  00188	8a 00		 mov	 al, BYTE PTR [eax]
  0018a	3c 7f		 cmp	 al, 127			; 0000007fH
  0018c	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  0018e	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  00190	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  00197	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+96]
  0019b	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0019e	85 ff		 test	 edi, edi
  001a0	7e 08		 jle	 SHORT $LN15@Iput
  001a2	3b fd		 cmp	 edi, ebp
  001a4	76 04		 jbe	 SHORT $LN15@Iput
  001a6	2b fd		 sub	 edi, ebp
  001a8	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001aa	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;
; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ac	8b 74 24 64	 mov	 esi, DWORD PTR _this$[esp+92]
  001b0	8b d1		 mov	 edx, ecx
  001b2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001ba	83 f8 40	 cmp	 eax, 64			; 00000040H
  001bd	0f 84 95 00 00
	00		 je	 $LN1@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001c3	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+96]
  001c7	8b 54 24 6c	 mov	 edx, DWORD PTR __Dest$[esp+92]
  001cb	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d0	74 28		 je	 SHORT $LN85@Iput
  001d2	8b 44 24 78	 mov	 eax, DWORD PTR __Fill$[esp+92]
  001d6	57		 push	 edi
  001d7	50		 push	 eax
  001d8	51		 push	 ecx
  001d9	52		 push	 edx
  001da	8d 44 24 24	 lea	 eax, DWORD PTR $T190675[esp+112]
  001de	50		 push	 eax
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx
  001ee	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001f1	83 c4 18	 add	 esp, 24			; 00000018H
  001f4	89 54 24 70	 mov	 DWORD PTR __Dest$[esp+96], edx

; 1492 : 			_Fillcount = 0;

  001f8	eb 5c		 jmp	 SHORT $LN94@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001fa	8b 44 24 14	 mov	 eax, DWORD PTR __Prefix$[esp+96]
  001fe	50		 push	 eax
  001ff	53		 push	 ebx
  00200	51		 push	 ecx
  00201	52		 push	 edx
  00202	8d 44 24 34	 lea	 eax, DWORD PTR $T190676[esp+112]
  00206	50		 push	 eax
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00216	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+120]
  0021a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0021d	57		 push	 edi
  0021e	03 d9		 add	 ebx, ecx
  00220	2b e9		 sub	 ebp, ecx
  00222	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+120]
  00229	51		 push	 ecx
  0022a	89 94 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+128], edx
  00231	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	52		 push	 edx
  00237	50		 push	 eax
  00238	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T190677[esp+136]
  0023c	51		 push	 ecx
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00243	8b 10		 mov	 edx, DWORD PTR [eax]
  00245	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0024c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0024f	83 c4 30	 add	 esp, 48			; 00000030H
  00252	89 44 24 70	 mov	 DWORD PTR __Dest$[esp+96], eax
$LN94@Iput:
  00256	33 ff		 xor	 edi, edi
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  00258	8b 4c 24 20	 mov	 ecx, DWORD PTR __Punct_fac$[esp+96]
  0025c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00261	ff d0		 call	 eax
  00263	8b 54 24 70	 mov	 edx, DWORD PTR __Dest$[esp+96]
  00267	88 44 24 20	 mov	 BYTE PTR $T190768[esp+96], al
  0026b	8b 4c 24 20	 mov	 ecx, DWORD PTR $T190768[esp+96]
  0026f	8b 44 24 6c	 mov	 eax, DWORD PTR __Dest$[esp+92]
  00273	51		 push	 ecx
  00274	55		 push	 ebp
  00275	53		 push	 ebx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8d 4c 24 38	 lea	 ecx, DWORD PTR $T190678[esp+116]
  0027c	51		 push	 ecx
  0027d	56		 push	 esi
  0027e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00285	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+124]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00289	57		 push	 edi
  0028a	8b 7c 24 50	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+128]
  0028e	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  00295	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00298	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  0029f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+124]
  002a6	52		 push	 edx
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	57		 push	 edi
  002aa	56		 push	 esi
  002ab	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+148], eax
  002b2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002b7	83 c4 34	 add	 esp, 52			; 00000034H
  002ba	83 7c 24 4c 10	 cmp	 DWORD PTR __Grouping$[esp+120], 16 ; 00000010H
  002bf	72 0d		 jb	 SHORT $LN86@Iput
  002c1	8b 44 24 38	 mov	 eax, DWORD PTR __Grouping$[esp+100]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cb	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002ce	8b c7		 mov	 eax, edi

; 1505 : 		}

  002d0	8b 4c 24 54	 mov	 ecx, DWORD PTR __$EHRec$[esp+96]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5d		 pop	 ebp
  002df	5b		 pop	 ebx
  002e0	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  002e4	33 cc		 xor	 ecx, esp
  002e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002eb	83 c4 4c	 add	 esp, 76			; 0000004cH
  002ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T190667[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	88 46 30	 mov	 BYTE PTR [esi+48], al
  00026	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	83 c8 04	 or	 eax, 4
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00038	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003d	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00045	83 c4 04	 add	 esp, 4
  00048	5e		 pop	 esi

; 144  : 		}

  00049	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00053	5e		 pop	 esi

; 144  : 		}

  00054	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtpy
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  00027	75 10		 jne	 SHORT $LN11@init@2

; 138  : 			setstate(badbit);

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	83 c8 04	 or	 eax, 4
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init@2:

; 139  : 
; 140  : 		if (_Isstd)

  00039	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003e	74 0d		 je	 SHORT $LN2@init@2

; 141  : 			_Addstd(this);	// special handling for standard streams

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00046	83 c4 04	 add	 esp, 4
  00049	5e		 pop	 esi

; 144  : 		}

  0004a	c2 08 00	 ret	 8
$LN2@init@2:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00054	5e		 pop	 esi

; 144  : 		}

  00055	c2 08 00	 ret	 8
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtpy
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush@2
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush@2

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush@2:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush@2
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush@2
  00040	83 c8 04	 or	 eax, 4
$LN19@flush@2:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush@2:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
_TEXT	ENDS
PUBLIC	?pop_front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::pop_front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?pop_front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T191038 = -8						; size = 8
?pop_front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::pop_front, COMDAT
; _this$ = ecx

; 665  : 		erase(begin());

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	8b 11		 mov	 edx, DWORD PTR [ecx]
  00007	83 ec 08	 sub	 esp, 8
  0000a	50		 push	 eax
  0000b	52		 push	 edx
  0000c	8d 54 24 08	 lea	 edx, DWORD PTR $T191038[esp+16]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase

; 666  : 		}

  00016	83 c4 08	 add	 esp, 8
  00019	c3		 ret	 0
?pop_front@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::pop_front
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUPartition@CipherShed@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUPartition@CipherShed@@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUPartition@CipherShed@@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Signed$152883 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@2

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@2
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@2:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@2
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@2:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@2
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@2

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@2

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$152883[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@2
$LN17@do_put@2:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$152883[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@2:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@2
$LN52@do_put@2:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@2
$LN58@do_put@2:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@2

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@2

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@2
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@2
$LN73@do_put@2:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@2:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@2
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@2

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@2:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$152883[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@2

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@2:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@2
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@2:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@2
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@2:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@2
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@2
$LN67@do_put@2:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@2

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@2:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@2
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@2
$LN34@do_put@2:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@2:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Signed$152911 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@3

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@3
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$152911[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@3
$LN49@do_put@3:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@3
$LN17@do_put@3:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$152911[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@3
$LN55@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@3

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@3

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@3
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN70@do_put@3:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@3
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@3

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@3:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$152911[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@3

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@3
$LN64@do_put@3:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@3
$LN43@do_put@3:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@3:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@3
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@3
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@3:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@3
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@3
$LN36@do_put@3:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@3
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry@2
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry@2:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry@2
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry@2

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN1@sentry@2:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx@2

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN8@Osfx@2:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx@2
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T191551 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T191551[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T191551[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191551[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T191551[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T191571 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T191571[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T191571[esp+28], 1
$LN1@basic_istr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191571[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T191571[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T191591 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$154525 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert
$LN41@Insert:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert
$LN89@Insert:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert
$LN66@Insert:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert
$LN88@Insert:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert
$LN30@Insert:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$154525[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$154525[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$154525[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T191591[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert
$LN1@Insert:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
PUBLIC	??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXABUPartition@CipherShed@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXABUPartition@CipherShed@@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXABUPartition@CipherShed@@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::push_back
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
$T191943 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T191943[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T191943[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00088	88 46 30	 mov	 BYTE PTR [esi+48], al
  0008b	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008e	75 12		 jne	 SHORT $LN31@basic_iost
  00090	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00093	83 c8 04	 or	 eax, 4
  00096	83 c8 04	 or	 eax, 4
  00099	53		 push	 ebx
  0009a	50		 push	 eax
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a2	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a5	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000b3	8b 07		 mov	 eax, DWORD PTR [edi]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 915  : 		}

  000bf	8b c7		 mov	 eax, edi
  000c1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191943[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T191943[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
$T192061 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T192061[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost@2
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T192061[esp+36], 1
$LN1@basic_iost@2:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
  00088	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  0008c	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008f	75 12		 jne	 SHORT $LN31@basic_iost@2
  00091	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00094	83 c8 04	 or	 eax, 4
  00097	83 c8 04	 or	 eax, 4
  0009a	53		 push	 ebx
  0009b	50		 push	 eax
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost@2:
  000a3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a6	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 915  : 		}

  000c0	8b c7		 mov	 eax, edi
  000c2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T192061[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T192061[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost@2:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@3

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@3:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@3
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@3:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@4

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1@sentry@4:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@4
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@4:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 742  : 	typedef char _Elem;
; 743  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 744  : 	ios_base::iostate _State = ios_base::goodbit;
; 745  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL134@operator@22:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL134@operator@22

; 746  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 747  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN17@operator@22
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN17@operator@22
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN18@operator@22
$LN17@operator@22:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@22:

; 748  : 	const typename _Myos::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 749  : 
; 750  : 	if (!_Ok)

  0006a	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN14@operator@22

; 751  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 752  : 	else

  0007c	e9 9b 00 00 00	 jmp	 $LN22@operator@22
$LN14@operator@22:

; 753  : 		{	// state okay, insert
; 754  : 		_TRY_IO_BEGIN
; 755  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00081	8b 16		 mov	 edx, DWORD PTR [esi]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  0008a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0008f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00093	83 f8 40	 cmp	 eax, 64			; 00000040H
  00096	74 53		 je	 SHORT $LN132@operator@22
$LL10@operator@22:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00098	85 db		 test	 ebx, ebx
  0009a	7e 49		 jle	 SHORT $LN8@operator@22

; 757  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 758  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0009c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a1	8a 44 32 30	 mov	 al, BYTE PTR [edx+esi+48]
  000a5	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  000a8	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000ab	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ae	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b1	74 1e		 je	 SHORT $LN42@operator@22
  000b3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b6	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b9	7e 16		 jle	 SHORT $LN42@operator@22
  000bb	ff 0a		 dec	 DWORD PTR [edx]
  000bd	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  000c5	89 19		 mov	 DWORD PTR [ecx], ebx
  000c7	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000ca	88 02		 mov	 BYTE PTR [edx], al
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	eb 0b		 jmp	 SHORT $LN43@operator@22
$LN42@operator@22:
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	50		 push	 eax
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	ff d0		 call	 eax
$LN43@operator@22:
  000dc	83 f8 ff	 cmp	 eax, -1
  000df	75 7f		 jne	 SHORT $LN9@operator@22

; 759  : 					{	// insertion failed, quit
; 760  : 					_State |= ios_base::badbit;

  000e1	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@22:

; 761  : 					break;
; 762  : 					}
; 763  : 
; 764  : 		if (_State == ios_base::goodbit
; 765  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000e9	75 1f		 jne	 SHORT $LN2@operator@22
$LN132@operator@22:
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f0	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000f9	57		 push	 edi
  000fa	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000fd	ff d2		 call	 edx
  000ff	3b c7		 cmp	 eax, edi
  00101	74 6d		 je	 SHORT $LL133@operator@22

; 766  : 			_State |= ios_base::badbit;

  00103	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@22:

; 775  : 					}
; 776  : 		_Ostr.width(0);

  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c6		 add	 eax, esi
  00111	33 c9		 xor	 ecx, ecx
  00113	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00116	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@22:
  00119	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@22:

; 778  : 		}
; 779  : 
; 780  : 	_Ostr.setstate(_State);

  0011c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00121	03 ce		 add	 ecx, esi
  00123	85 d2		 test	 edx, edx
  00125	74 16		 je	 SHORT $LN125@operator@22
  00127	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0012a	0b c2		 or	 eax, edx
  0012c	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00130	75 03		 jne	 SHORT $LN127@operator@22
  00132	83 c8 04	 or	 eax, 4
$LN127@operator@22:
  00135	6a 00		 push	 0
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@22:

; 781  : 	return (_Ostr);

  0013d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00147	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0014c	8b c6		 mov	 eax, esi

; 782  : 	}

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN9@operator@22:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00160	4b		 dec	 ebx
  00161	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00164	e9 2f ff ff ff	 jmp	 $LL10@operator@22
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL133@operator@22:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00170	85 db		 test	 ebx, ebx
  00172	7e 96		 jle	 SHORT $LN2@operator@22

; 770  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 771  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00179	8a 44 31 30	 mov	 al, BYTE PTR [ecx+esi+48]
  0017d	03 ce		 add	 ecx, esi
  0017f	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00182	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00185	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00188	74 1b		 je	 SHORT $LN68@operator@22
  0018a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0018d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00190	7e 13		 jle	 SHORT $LN68@operator@22
  00192	ff 0a		 dec	 DWORD PTR [edx]
  00194	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00197	8b 11		 mov	 edx, DWORD PTR [ecx]
  00199	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0019c	89 39		 mov	 DWORD PTR [ecx], edi
  0019e	88 02		 mov	 BYTE PTR [edx], al
  001a0	0f b6 c0	 movzx	 eax, al
  001a3	eb 0b		 jmp	 SHORT $LN69@operator@22
$LN68@operator@22:
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	50		 push	 eax
  001ab	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ae	ff d0		 call	 eax
$LN69@operator@22:
  001b0	83 f8 ff	 cmp	 eax, -1
  001b3	75 09		 jne	 SHORT $LN3@operator@22

; 772  : 					{	// insertion failed, quit
; 773  : 					_State |= ios_base::badbit;

  001b5	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 774  : 					break;

  001b9	e9 4c ff ff ff	 jmp	 $LN2@operator@22
$LN3@operator@22:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001be	4b		 dec	 ebx
  001bf	eb af		 jmp	 SHORT $LL133@operator@22
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 777  : 		_CATCH_IO_(_Ostr)

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c9	03 c1		 add	 eax, ecx
  001cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ce	83 c9 04	 or	 ecx, 4
  001d1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001d5	75 03		 jne	 SHORT $LN93@operator@22
  001d7	83 c9 04	 or	 ecx, 4
$LN93@operator@22:
  001da	83 e1 17	 and	 ecx, 23			; 00000017H
  001dd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001e0	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001e3	75 15		 jne	 SHORT $LN102@operator@22
  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001ec	b8 00 00 00 00	 mov	 eax, $LN23@operator@22
  001f1	c3		 ret	 0
$LN23@operator@22:
  001f2	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001f5	e9 1f ff ff ff	 jmp	 $LN141@operator@22
$LN102@operator@22:
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@22:
  00203	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 01H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$11
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$10
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -44						; size = 8
$T192638 = -36						; size = 1
tv542 = -32						; size = 4
$T192549 = -28						; size = 4
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 655  : 	{	// insert NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 656  : 	ios_base::iostate _State = ios_base::goodbit;
; 657  : 	streamsize _Count = (streamsize)::strlen(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL173@operator@23:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL173@operator@23

; 658  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 659  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN20@operator@23
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN20@operator@23
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN21@operator@23
$LN20@operator@23:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN21@operator@23:

; 660  : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 661  : 
; 662  : 	if (!_Ok)

  0006a	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN17@operator@23

; 663  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 664  : 	else

  0007c	e9 d2 01 00 00	 jmp	 $LN27@operator@23
$LN17@operator@23:

; 665  : 		{	// state okay, insert characters
; 666  : 		_TRY_IO_BEGIN
; 667  : 		const ctype<_Elem>& _Ctype_fac = _USE(_Ostr.getloc(), ctype<_Elem>);

  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00086	8d 55 e4	 lea	 edx, DWORD PTR $T192549[ebp]
  00089	52		 push	 edx
  0008a	03 ce		 add	 ecx, esi
  0008c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00090	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00095	50		 push	 eax
  00096	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0009a	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0009f	83 c4 04	 add	 esp, 4
  000a2	8d 4d e4	 lea	 ecx, DWORD PTR $T192549[ebp]
  000a5	89 45 e0	 mov	 DWORD PTR tv542[ebp], eax
  000a8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ac	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 668  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000b1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b6	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  000ba	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000bf	83 f8 40	 cmp	 eax, 64			; 00000040H
  000c2	74 5c		 je	 SHORT $LL171@operator@23
$LL13@operator@23:

; 669  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000c4	85 db		 test	 ebx, ebx
  000c6	7e 58		 jle	 SHORT $LL171@operator@23

; 670  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 671  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cd	0f b7 54 31 30	 movzx	 edx, WORD PTR [ecx+esi+48]
  000d2	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  000d5	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000d8	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000db	83 38 00	 cmp	 DWORD PTR [eax], 0
  000de	74 1f		 je	 SHORT $LN44@operator@23
  000e0	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000e3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e6	7e 17		 jle	 SHORT $LN44@operator@23
  000e8	ff 08		 dec	 DWORD PTR [eax]
  000ea	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ef	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000f2	89 19		 mov	 DWORD PTR [ecx], ebx
  000f4	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000f7	66 89 10	 mov	 WORD PTR [eax], dx
  000fa	0f b7 c2	 movzx	 eax, dx
  000fd	eb 0e		 jmp	 SHORT $LN45@operator@23
$LN44@operator@23:
  000ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00101	52		 push	 edx
  00102	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00105	ff d2		 call	 edx
  00107	0f b7 c0	 movzx	 eax, ax
  0010a	0f b7 c0	 movzx	 eax, ax
$LN45@operator@23:
  0010d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00112	66 3b c8	 cmp	 cx, ax
  00115	75 67		 jne	 SHORT $LN12@operator@23

; 672  : 					{	// insertion failed, quit
; 673  : 					_State |= ios_base::badbit;

  00117	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
  0011b	eb 03 8d 49 00	 npad	 5
$LL171@operator@23:

; 674  : 					break;
; 675  : 					}
; 676  : 
; 677  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  00120	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00124	0f 85 da 00 00
	00		 jne	 $LN2@operator@23
  0012a	85 ff		 test	 edi, edi
  0012c	0f 8e 7e 00 00
	00		 jle	 $LL172@operator@23

; 678  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 679  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))

  00132	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00135	8a 02		 mov	 al, BYTE PTR [edx]
  00137	8b 4d e0	 mov	 ecx, DWORD PTR tv542[ebp]
  0013a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013c	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0013f	88 45 dc	 mov	 BYTE PTR $T192638[ebp], al
  00142	8b 45 dc	 mov	 eax, DWORD PTR $T192638[ebp]
  00145	50		 push	 eax
  00146	ff d2		 call	 edx
  00148	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0014d	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  00151	0f b7 c0	 movzx	 eax, ax
  00154	0f b7 d0	 movzx	 edx, ax
  00157	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0015a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0015d	74 28		 je	 SHORT $LN66@operator@23
  0015f	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00162	83 38 00	 cmp	 DWORD PTR [eax], 0
  00165	7e 20		 jle	 SHORT $LN66@operator@23
  00167	ff 08		 dec	 DWORD PTR [eax]
  00169	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0016c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016e	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00171	89 19		 mov	 DWORD PTR [ecx], ebx
  00173	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  00176	66 89 10	 mov	 WORD PTR [eax], dx
  00179	0f b7 c2	 movzx	 eax, dx
  0017c	eb 17		 jmp	 SHORT $LN67@operator@23
$LN12@operator@23:

; 669  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0017e	4b		 dec	 ebx
  0017f	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00182	e9 3d ff ff ff	 jmp	 $LL13@operator@23

; 678  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 679  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))

$LN66@operator@23:
  00187	8b 01		 mov	 eax, DWORD PTR [ecx]
  00189	52		 push	 edx
  0018a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0018d	ff d2		 call	 edx
  0018f	0f b7 c0	 movzx	 eax, ax
  00192	0f b7 c0	 movzx	 eax, ax
$LN67@operator@23:
  00195	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0019a	66 3b c8	 cmp	 cx, ax
  0019d	75 07		 jne	 SHORT $LN8@operator@23

; 680  : 					_State |= ios_base::badbit;

  0019f	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN8@operator@23:

; 674  : 					break;
; 675  : 					}
; 676  : 
; 677  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  001a6	4f		 dec	 edi
  001a7	ff 45 0c	 inc	 DWORD PTR __Val$[ebp]
  001aa	e9 71 ff ff ff	 jmp	 $LL171@operator@23
  001af	90		 npad	 1
$LL172@operator@23:

; 681  : 
; 682  : 		if (_State == ios_base::goodbit)
; 683  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001b0	85 db		 test	 ebx, ebx
  001b2	7e 50		 jle	 SHORT $LN2@operator@23

; 684  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 685  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  001b4	8b 16		 mov	 edx, DWORD PTR [esi]
  001b6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001b9	8b 4c 30 28	 mov	 ecx, DWORD PTR [eax+esi+40]
  001bd	0f b7 54 30 30	 movzx	 edx, WORD PTR [eax+esi+48]
  001c2	03 c6		 add	 eax, esi
  001c4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  001c7	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ca	74 1c		 je	 SHORT $LN88@operator@23
  001cc	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  001cf	83 38 00	 cmp	 DWORD PTR [eax], 0
  001d2	7e 14		 jle	 SHORT $LN88@operator@23
  001d4	ff 08		 dec	 DWORD PTR [eax]
  001d6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001db	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  001de	89 39		 mov	 DWORD PTR [ecx], edi
  001e0	66 89 10	 mov	 WORD PTR [eax], dx
  001e3	0f b7 c2	 movzx	 eax, dx
  001e6	eb 0e		 jmp	 SHORT $LN89@operator@23
$LN88@operator@23:
  001e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ea	52		 push	 edx
  001eb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001ee	ff d2		 call	 edx
  001f0	0f b7 c0	 movzx	 eax, ax
  001f3	0f b7 c0	 movzx	 eax, ax
$LN89@operator@23:
  001f6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001fb	66 3b c8	 cmp	 cx, ax
  001fe	75 15		 jne	 SHORT $LN3@operator@23

; 686  : 					{	// insertion failed, quit
; 687  : 					_State |= ios_base::badbit;

  00200	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN2@operator@23:

; 688  : 					break;
; 689  : 					}
; 690  : 		_Ostr.width(0);

  00204	8b 16		 mov	 edx, DWORD PTR [esi]
  00206	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00209	03 c6		 add	 eax, esi
  0020b	33 c9		 xor	 ecx, ecx
  0020d	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00210	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00213	eb 3b		 jmp	 SHORT $LN181@operator@23
$LN3@operator@23:

; 681  : 
; 682  : 		if (_State == ios_base::goodbit)
; 683  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00215	4b		 dec	 ebx
  00216	eb 98		 jmp	 SHORT $LL172@operator@23
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0:

; 691  : 		_CATCH_IO_(_Ostr)

  00218	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0021b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0021d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00220	03 c1		 add	 eax, ecx
  00222	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00225	83 c9 04	 or	 ecx, 4
  00228	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0022c	75 03		 jne	 SHORT $LN113@operator@23
  0022e	83 c9 04	 or	 ecx, 4
$LN113@operator@23:
  00231	83 e1 17	 and	 ecx, 23			; 00000017H
  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00237	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  0023a	0f 85 7f 00 00
	00		 jne	 $LN122@operator@23
  00240	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00247	b8 00 00 00 00	 mov	 eax, $LN178@operator@23
  0024c	c3		 ret	 0
$LN178@operator@23:
  0024d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN181@operator@23:
  00250	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN27@operator@23:

; 692  : 		}
; 693  : 
; 694  : 	_Ostr.setstate(_State);

  00253	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00255	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00258	03 ce		 add	 ecx, esi
  0025a	85 d2		 test	 edx, edx
  0025c	74 16		 je	 SHORT $LN145@operator@23
  0025e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00261	0b c2		 or	 eax, edx
  00263	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00267	75 03		 jne	 SHORT $LN147@operator@23
  00269	83 c8 04	 or	 eax, 4
$LN147@operator@23:
  0026c	6a 00		 push	 0
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN145@operator@23:

; 695  : 	return (_Ostr);

  00274	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  0027b	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00280	84 c0		 test	 al, al
  00282	75 08		 jne	 SHORT $LN149@operator@23
  00284	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00287	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN149@operator@23:
  0028c	8b 45 d4	 mov	 eax, DWORD PTR __Ok$[ebp]
  0028f	8b 10		 mov	 edx, DWORD PTR [eax]
  00291	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00294	8b 44 01 28	 mov	 eax, DWORD PTR [ecx+eax+40]
  00298	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0029f	85 c0		 test	 eax, eax
  002a1	74 08		 je	 SHORT $LN160@operator@23
  002a3	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  002a6	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN160@operator@23:
  002ab	8b c6		 mov	 eax, esi

; 696  : 	}

  002ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b7	59		 pop	 ecx
  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c3		 ret	 0

; 691  : 		_CATCH_IO_(_Ostr)

$LN122@operator@23:
  002bf	6a 00		 push	 0
  002c1	6a 00		 push	 0
  002c3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN180@operator@23:
  002c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T192549[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$10:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T192947 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T192947[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 8
$T193045 = 16						; size = 1
__Last$ = 16						; size = 8
___formal$ = 24						; size = 1
??$_Assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 691  : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 692  : 		{	// assign [_First, _Last), input iterators
; 693  : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear

; 694  : 		insert(begin(), _First, _Last);

  00008	8b 54 24 10	 mov	 edx, DWORD PTR $T193045[esp]
  0000c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	52		 push	 edx
  00014	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp+8]
  0001d	52		 push	 edx
  0001e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  00022	52		 push	 edx
  00023	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
  00031	5e		 pop	 esi

; 695  : 		}

  00032	c2 14 00	 ret	 20			; 00000014H
??$_Assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??0SystemDriveConfiguration@CipherShed@@QAE@XZ	; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SystemDriveConfiguration@CipherShed@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$2
__ehfuncinfo$??0SystemDriveConfiguration@CipherShed@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0SystemDriveConfiguration@CipherShed@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0SystemDriveConfiguration@CipherShed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SystemDriveConfiguration@CipherShed@@QAE@XZ PROC	; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SystemDriveConfiguration@CipherShed@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00031	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00034	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00037	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0003a	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  0003d	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00040	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00044	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00047	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  0004a	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  0004d	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  00050	89 be 98 00 00
	00		 mov	 DWORD PTR [esi+152], edi
  00056	89 9e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ebx
  0005c	88 9e 84 00 00
	00		 mov	 BYTE PTR [esi+132], bl
  00062	33 c0		 xor	 eax, eax
  00064	c7 86 bc 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+188], 7
  0006e	89 9e b8 00 00
	00		 mov	 DWORD PTR [esi+184], ebx
  00074	66 89 86 a8 00
	00 00		 mov	 WORD PTR [esi+168], ax
  0007b	8d 8e d0 00 00
	00		 lea	 ecx, DWORD PTR [esi+208]
  00081	c6 44 24 1c 02	 mov	 BYTE PTR __$EHRec$[esp+40], 2
  00086	e8 00 00 00 00	 call	 ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
  0008b	89 be 08 01 00
	00		 mov	 DWORD PTR [esi+264], edi
  00091	89 9e 04 01 00
	00		 mov	 DWORD PTR [esi+260], ebx
  00097	88 9e f4 00 00
	00		 mov	 BYTE PTR [esi+244], bl
  0009d	89 be 48 01 00
	00		 mov	 DWORD PTR [esi+328], edi
  000a3	89 9e 44 01 00
	00		 mov	 DWORD PTR [esi+324], ebx
  000a9	88 9e 34 01 00
	00		 mov	 BYTE PTR [esi+308], bl
  000af	33 c9		 xor	 ecx, ecx
  000b1	c7 86 6c 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+364], 7
  000bb	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
  000c1	66 89 8e 58 01
	00 00		 mov	 WORD PTR [esi+344], cx
  000c8	8b c6		 mov	 eax, esi
  000ca	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 40	 add	 ecx, 64			; 00000040H
  00019	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__ehhandler$??0SystemDriveConfiguration@CipherShed@@QAE@XZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00025	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SystemDriveConfiguration@CipherShed@@QAE@XZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SystemDriveConfiguration@CipherShed@@QAE@XZ ENDP	; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration
PUBLIC	??1SystemDriveConfiguration@CipherShed@@QAE@XZ	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
; Function compile flags: /Ogtpy
;	COMDAT ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SystemDriveConfiguration@CipherShed@@QAE@XZ PROC	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0000b	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00010	8d be d0 00 00
	00		 lea	 edi, DWORD PTR [esi+208]
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	33 db		 xor	 ebx, ebx
  0002a	51		 push	 ecx
  0002b	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00039	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0003e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00043	39 7e 34	 cmp	 DWORD PTR [esi+52], edi
  00046	72 0c		 jb	 SHORT $LN46@SystemDriv
  00048	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
$LN46@SystemDriv:
  00054	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  0005b	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0005e	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00061	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00064	72 0c		 jb	 SHORT $LN72@SystemDriv
  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN72@SystemDriv:
  00072	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00075	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007c	5f		 pop	 edi
  0007d	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
??1SystemDriveConfiguration@CipherShed@@QAE@XZ ENDP	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
_TEXT	ENDS
PUBLIC	??1BootEncryption@CipherShed@@QAE@XZ		; CipherShed::BootEncryption::~BootEncryption
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	SEGMENT
__unwindtable$??1BootEncryption@CipherShed@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BootEncryption@CipherShed@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BootEncryption@CipherShed@@QAE@XZ$1
__ehfuncinfo$??1BootEncryption@CipherShed@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1BootEncryption@CipherShed@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1BootEncryption@CipherShed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BootEncryption@CipherShed@@QAE@XZ PROC		; CipherShed::BootEncryption::~BootEncryption, COMDAT
; _this$ = ecx

; 383  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1BootEncryption@CipherShed@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi

; 384  : 		if (RescueIsoImage)

  00028	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0002e	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 1
  00036	85 c0		 test	 eax, eax
  00038	74 09		 je	 SHORT $LN1@BootEncryp

; 385  : 			delete[] RescueIsoImage;

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00040	83 c4 04	 add	 esp, 4
$LN1@BootEncryp:

; 386  : 
; 387  : 		Elevator::Release();

  00043	83 2d 00 00 00
	00 01		 sub	 DWORD PTR ?ReferenceCount@Elevator@CipherShed@@1HA, 1 ; CipherShed::Elevator::ReferenceCount
  0004a	75 21		 jne	 SHORT $LN6@BootEncryp
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00051	85 c0		 test	 eax, eax
  00053	74 18		 je	 SHORT $LN6@BootEncryp
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005a	50		 push	 eax
  0005b	ff d2		 call	 edx
  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A, 0 ; CipherShed::Elevator::ElevatedComInstance
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
$LN6@BootEncryp:

; 388  : 	}

  0006d	8d 8e 90 01 00
	00		 lea	 ecx, DWORD PTR [esi+400]
  00073	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00078	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0007b	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00080	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5e		 pop	 esi
  0008d	83 c4 10	 add	 esp, 16			; 00000010H
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BootEncryption@CipherShed@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$??1BootEncryption@CipherShed@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	81 c1 90 01 00
	00		 add	 ecx, 400		; 00000190H
  00014	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__ehhandler$??1BootEncryption@CipherShed@@QAE@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BootEncryption@CipherShed@@QAE@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BootEncryption@CipherShed@@QAE@XZ ENDP		; CipherShed::BootEncryption::~BootEncryption
PUBLIC	??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::~ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::~ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::~ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T194816 = -48						; size = 8
$T194815 = -48						; size = 8
__Ok$ = -40						; size = 8
$T194835 = -32						; size = 1
$T194810 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 264  : 		{	// insert an int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 265  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 266  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 267  : 
; 268  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN14@operator@24

; 269  : 			{	// state okay, use facet to insert
; 270  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T194810[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T194810[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 271  : 			ios_base::fmtflags _Bfl =
; 272  : 				ios_base::flags() & ios_base::basefield;

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 273  : 			long _Tmp = (_Bfl == ios_base::oct
; 274  : 				|| _Bfl == ios_base::hex)
; 275  : 				? (long)(unsigned int)_Val : (long)_Val;
; 276  : 
; 277  : 			_TRY_IO_BEGIN
; 278  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 279  : 				_Myios::fill(), _Tmp).failed())

  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T194815[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T194835[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T194835[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T194815[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T194816[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T194816[ebp], 0

; 280  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@24
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@24:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN14@operator@24:

; 282  : 			}
; 283  : 
; 284  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN69@operator@24
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN71@operator@24
  000d2	83 c8 04	 or	 eax, 4
$LN71@operator@24:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN69@operator@24:

; 285  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 286  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 281  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN37@operator@24
  00118	83 c9 04	 or	 ecx, 4
$LN37@operator@24:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN46@operator@24
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN15@operator@24
  00132	c3		 ret	 0
$LN15@operator@24:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN14@operator@24
$LN46@operator@24:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN77@operator@24:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T194810[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T195004 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T195434 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@2
$LN28@list@2:
  00042	33 c0		 xor	 eax, eax
$LN29@list@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T195004[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T195434[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T195004[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@2:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T195451 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T195451[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@7
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T195451[esp+32], 1
$LN1@basic_stri@7:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T195451[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@7
  0000c	83 65 ec fe	 and	 DWORD PTR $T195451[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri@7:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T195473 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T195473[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@8
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T195473[esp+32], 1
$LN1@basic_stri@8:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T195473[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@8
  0000c	83 65 ec fe	 and	 DWORD PTR $T195473[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri@8:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z
_TEXT	SEGMENT
$T195599 = 8						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
??$assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 679  : 		void assign(_Iter _First, _Iter _Last)

  00000	53		 push	 ebx

; 680  : 		{	// assign [_First, _Last)
; 681  : 		_Assign(_First, _Last, _Iter_cat(_First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __First$[esp+4]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __First$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00012	8b 54 24 10	 mov	 edx, DWORD PTR $T195599[esp+8]
  00016	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	52		 push	 edx
  0001e	8b 54 24 20	 mov	 edx, DWORD PTR __Last$[esp+16]
  00022	52		 push	 edx
  00023	8b 54 24 20	 mov	 edx, DWORD PTR __Last$[esp+16]
  00027	52		 push	 edx
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 682  : 		}

  00036	c2 10 00	 ret	 16			; 00000010H
??$assign@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::assign<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
PUBLIC	??_R4?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?'
	DB	'$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@Cipher'
	DB	'Shed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next
$LN25@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next
$LN19@Next:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00034	74 09		 je	 SHORT $LN30@scalar@30
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN30@scalar@30:
  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z	; CipherShed::BootEncryption::BootEncryption
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
;	COMDAT ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z PROC	; CipherShed::BootEncryption::BootEncryption, COMDAT
; _this$ = ecx

; 377  : 	{

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _parent$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000a	89 06		 mov	 DWORD PTR [esi], eax
  0000c	e8 00 00 00 00	 call	 ??0SystemDriveConfiguration@CipherShed@@QAE@XZ
  00011	33 c0		 xor	 eax, eax
  00013	89 86 88 01 00
	00		 mov	 DWORD PTR [esi+392], eax
  00019	89 86 a4 01 00
	00		 mov	 DWORD PTR [esi+420], eax
  0001f	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00024	89 8e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ecx
  0002a	88 86 94 01 00
	00		 mov	 BYTE PTR [esi+404], al
  00030	89 8e e8 01 00
	00		 mov	 DWORD PTR [esi+488], ecx
  00036	89 86 e4 01 00
	00		 mov	 DWORD PTR [esi+484], eax
  0003c	88 86 d4 01 00
	00		 mov	 BYTE PTR [esi+468], al
  00042	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  00048	c7 86 0c 02 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+524], 7
  00052	33 c9		 xor	 ecx, ecx
  00054	66 89 8e f8 01
	00 00		 mov	 WORD PTR [esi+504], cx
  0005b	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  00061	88 86 14 06 00
	00		 mov	 BYTE PTR [esi+1556], al
  00067	88 86 15 06 00
	00		 mov	 BYTE PTR [esi+1557], al
  0006d	88 86 16 06 00
	00		 mov	 BYTE PTR [esi+1558], al
  00073	88 86 17 06 00
	00		 mov	 BYTE PTR [esi+1559], al

; 378  : 		Elevator::AddReference();

  00079	ff 05 00 00 00
	00		 inc	 DWORD PTR ?ReferenceCount@Elevator@CipherShed@@1HA ; CipherShed::Elevator::ReferenceCount

; 379  : 	}

  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi
  00082	c2 04 00	 ret	 4
??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ENDP	; CipherShed::BootEncryption::BootEncryption
_TEXT	ENDS
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@	; `string'
PUBLIC	??_C@_0L@DPPABKKK@?2Partition?$AA@		; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z ; CipherShed::BootEncryption::GetDrivePartitions
EXTRN	__imp__FindVolumeClose@4:PROC
EXTRN	__imp__FindNextVolumeW@12:PROC
EXTRN	__imp__QueryDosDeviceW@12:PROC
EXTRN	__imp__FindFirstVolumeW@8:PROC
EXTRN	_ResolveSymbolicLink:PROC
EXTRN	_GetDiskDeviceDriveLetter:PROC
EXTRN	__snwprintf:PROC
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@ DB '%', 00H, 'h', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
CONST	SEGMENT
??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@ DB '\Device\Harddisk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPPABKKK@?2Partition?$AA@
CONST	SEGMENT
??_C@_0L@DPPABKKK@?2Partition?$AA@ DB '\Partition', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$23 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$0
__tryblocktable$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z DD 05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$23
__ehfuncinfo$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$14
	DD	02H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$3
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$5
	DD	07H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$6
	DD	07H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$17
	DD	09H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$18
	DD	0aH
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$20
	DD	07H
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$7
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$8
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$11
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z
_TEXT	SEGMENT
$T197746 = -2628					; size = 4
$T196724 = -2624					; size = 4
$T196519 = -340						; size = 28
_ws$149001 = -312					; size = 136
_partPath$148756 = -176					; size = 136
_driveNumber$149023 = -40				; size = 4
_this$ = -36						; size = 4
_partNumber$148602 = -32				; size = 4
___$ReturnUdt$GSCopy$ = -28				; size = 4
$T196525 = -24						; size = 4
$T196518 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_diskPartInfo$148846 = 0				; size = 560
_part$148849 = 560					; size = 128
_volumeNameStr$149042 = 688				; size = 28
$T196517 = 688						; size = 28
$T196515 = 688						; size = 28
$T196512 = 688						; size = 28
$T196511 = 688						; size = 28
$T196510 = 688						; size = 28
_devicePath$149043 = 716				; size = 520
_volumePath$149029 = 1236				; size = 520
_volumeName$149034 = 1756				; size = 520
__$ArrayPad$ = 2276					; size = 4
___$ReturnUdt$ = 2288					; size = 4
_driveNumber$ = 2292					; size = 4
?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z PROC ; CipherShed::BootEncryption::GetDrivePartitions, COMDAT
; _this$ = ecx

; 620  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 18 f7
	ff ff		 lea	 ebp, DWORD PTR [esp-2280]
  00008	81 ec e8 08 00
	00		 sub	 esp, 2280		; 000008e8H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 e4 08 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 8d f0 08 00
	00		 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00048	33 db		 xor	 ebx, ebx
  0004a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 621  : 		PartitionList partList;

  0004d	89 4d e4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], ecx
  00050	89 5d e8	 mov	 DWORD PTR $T196525[ebp], ebx
  00053	e8 00 00 00 00	 call	 ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >

; 685  : 
; 686  : 		return partList;

  00058	33 f6		 xor	 esi, esi
  0005a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0005d	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T196525[ebp], 1
  00064	89 75 e0	 mov	 DWORD PTR _partNumber$148602[ebp], esi
$LL11@GetDrivePa:

; 622  : 
; 623  : 		for (int partNumber = 0; partNumber < 64; ++partNumber)

  00067	83 fe 40	 cmp	 esi, 64			; 00000040H
  0006a	0f 8d 35 06 00
	00		 jge	 $LN704@GetDrivePa

; 624  : 		{
; 625  : 			stringstream partPath;

  00070	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _partPath$148756[ebp], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0007a	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _partPath$148756[ebp+8], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00084	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _partPath$148756[ebp+84], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0008b	53		 push	 ebx
  0008c	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _partPath$148756[ebp+12]
  00092	bf 04 00 00 00	 mov	 edi, 4
  00097	09 7d e8	 or	 DWORD PTR $T196525[ebp], edi
  0009a	50		 push	 eax
  0009b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  000a1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000a8	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  000ad	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _partPath$148756[ebp]
  000b3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b6	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp+12]
  000bc	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000c3	c7 84 15 50 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _partPath$148756[ebp+edx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000ce	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  000d3	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _partPath$148756[ebp+12], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000dd	89 5d 98	 mov	 DWORD PTR _partPath$148756[ebp+72], ebx
  000e0	89 5d 9c	 mov	 DWORD PTR _partPath$148756[ebp+76], ebx

; 626  : 			partPath << "\\Device\\Harddisk" << driveNumber << "\\Partition" << partNumber;

  000e3	8b 85 f4 08 00
	00		 mov	 eax, DWORD PTR _driveNumber$[ebp]
  000e9	56		 push	 esi
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DPPABKKK@?2Partition?$AA@
  000ef	50		 push	 eax
  000f0	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp+8]
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  000fb	51		 push	 ecx
  000fc	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  000ff	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00104	83 c4 08	 add	 esp, 8
  00107	8b c8		 mov	 ecx, eax
  00109	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00114	83 c4 08	 add	 esp, 8
  00117	8b c8		 mov	 ecx, eax
  00119	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 627  : 
; 628  : 			DISK_PARTITION_INFO_STRUCT diskPartInfo;
; 629  : 			_snwprintf (diskPartInfo.deviceName, array_capacity (diskPartInfo.deviceName), L"%hs", partPath.str().c_str());

  0011e	8d 95 b0 02 00
	00		 lea	 edx, DWORD PTR $T196510[ebp]
  00124	52		 push	 edx
  00125	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  0012b	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00130	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00135	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00138	72 05		 jb	 SHORT $LN102@GetDrivePa
  0013a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013d	eb 03		 jmp	 SHORT $LN103@GetDrivePa
$LN102@GetDrivePa:
  0013f	83 c0 04	 add	 eax, 4
$LN103@GetDrivePa:
  00142	50		 push	 eax
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  00148	8d 45 00	 lea	 eax, DWORD PTR _diskPartInfo$148846[ebp]
  0014b	68 04 01 00 00	 push	 260			; 00000104H
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 __snwprintf
  00156	83 c4 10	 add	 esp, 16			; 00000010H
  00159	39 bd c8 02 00
	00		 cmp	 DWORD PTR $T196510[ebp+24], edi
  0015f	72 0f		 jb	 SHORT $LN120@GetDrivePa
  00161	8b 8d b4 02 00
	00		 mov	 ecx, DWORD PTR $T196510[ebp+4]
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0016d	83 c4 04	 add	 esp, 4
$LN120@GetDrivePa:

; 630  : 
; 631  : 			try
; 632  : 			{
; 633  : 				CallDriver (TC_IOCTL_GET_DRIVE_PARTITION_INFO, &diskPartInfo, sizeof (diskPartInfo), &diskPartInfo, sizeof (diskPartInfo));

  00170	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	68 30 02 00 00	 push	 560			; 00000230H
  00178	8d 55 00	 lea	 edx, DWORD PTR _diskPartInfo$148846[ebp]
  0017b	52		 push	 edx
  0017c	68 30 02 00 00	 push	 560			; 00000230H
  00181	8b c2		 mov	 eax, edx
  00183	50		 push	 eax
  00184	68 38 20 22 00	 push	 2236472			; 00222038H
  00189	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0018d	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 638  : 			}
; 639  : 
; 640  : 			Partition part;

  00192	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00197	33 c9		 xor	 ecx, ecx
  00199	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  001a0	89 85 48 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+24], eax
  001a6	89 9d 44 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+20], ebx
  001ac	88 9d 34 02 00
	00		 mov	 BYTE PTR _part$148849[ebp+4], bl
  001b2	89 85 88 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+88], eax
  001b8	89 9d 84 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+84], ebx
  001be	88 9d 74 02 00
	00		 mov	 BYTE PTR _part$148849[ebp+68], bl
  001c4	c7 85 ac 02 00
	00 07 00 00 00	 mov	 DWORD PTR _part$148849[ebp+124], 7
  001ce	89 9d a8 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+120], ebx
  001d4	66 89 8d 98 02
	00 00		 mov	 WORD PTR _part$148849[ebp+104], cx

; 641  : 			part.DevicePath = partPath.str();

  001db	8d 95 b0 02 00
	00		 lea	 edx, DWORD PTR $T196511[ebp]
  001e1	52		 push	 edx
  001e2	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  001e8	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  001ec	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001f1	6a ff		 push	 -1
  001f3	53		 push	 ebx
  001f4	50		 push	 eax
  001f5	8d 8d 30 02 00
	00		 lea	 ecx, DWORD PTR _part$148849[ebp]
  001fb	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  001ff	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00204	39 bd c8 02 00
	00		 cmp	 DWORD PTR $T196511[ebp+24], edi
  0020a	72 0f		 jb	 SHORT $LN250@GetDrivePa
  0020c	8b 85 b4 02 00
	00		 mov	 eax, DWORD PTR $T196511[ebp+4]
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00218	83 c4 04	 add	 esp, 4
$LN250@GetDrivePa:

; 642  : 			part.Number = partNumber;

  0021b	89 b5 8c 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+92], esi

; 643  : 			part.Info = diskPartInfo.partInfo;

  00221	b9 08 00 00 00	 mov	 ecx, 8
  00226	8d b5 08 02 00
	00		 lea	 esi, DWORD PTR _diskPartInfo$148846[ebp+520]
  0022c	8d bd 50 02 00
	00		 lea	 edi, DWORD PTR _part$148849[ebp+32]
  00232	f3 a5		 rep movsd

; 644  : 			part.IsGPT = diskPartInfo.IsGPT;

  00234	8b 8d 28 02 00
	00		 mov	 ecx, DWORD PTR _diskPartInfo$148846[ebp+552]
  0023a	89 8d 90 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+96], ecx

; 645  : 
; 646  : 			// Mount point
; 647  : 			wstringstream ws;

  00240	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$149001[ebp], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0024a	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$149001[ebp+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00254	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$149001[ebp+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0025e	83 4d e8 08	 or	 DWORD PTR $T196525[ebp], 8
  00262	53		 push	 ebx
  00263	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _ws$149001[ebp+12]
  00269	52		 push	 edx
  0026a	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp]
  00270	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  00274	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00279	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _ws$149001[ebp]
  0027f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00282	c7 84 0d c8 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ws$149001[ebp+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0028d	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp+12]
  00293	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  0029a	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  0029f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$149001[ebp+12], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  002a9	89 9d 10 ff ff
	ff		 mov	 DWORD PTR _ws$149001[ebp+72], ebx
  002af	89 9d 14 ff ff
	ff		 mov	 DWORD PTR _ws$149001[ebp+76], ebx

; 648  : 			ws << partPath.str().c_str();

  002b5	8d 95 b0 02 00
	00		 lea	 edx, DWORD PTR $T196512[ebp]
  002bb	52		 push	 edx
  002bc	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  002c2	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  002c6	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  002cb	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  002d0	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  002d4	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  002d7	72 05		 jb	 SHORT $LN325@GetDrivePa
  002d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002dc	eb 03		 jmp	 SHORT $LN326@GetDrivePa
$LN325@GetDrivePa:
  002de	83 c0 04	 add	 eax, 4
$LN326@GetDrivePa:
  002e1	50		 push	 eax
  002e2	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _ws$149001[ebp+8]
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  002ee	83 c4 08	 add	 esp, 8
  002f1	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  002f5	39 b5 c8 02 00
	00		 cmp	 DWORD PTR $T196512[ebp+24], esi
  002fb	72 0f		 jb	 SHORT $LN343@GetDrivePa
  002fd	8b 8d b4 02 00
	00		 mov	 ecx, DWORD PTR $T196512[ebp+4]
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00309	83 c4 04	 add	 esp, 4
$LN343@GetDrivePa:

; 649  : 			int driveNumber = GetDiskDeviceDriveLetter ((wchar_t *) ws.str().c_str());

  0030c	8d 95 b0 02 00
	00		 lea	 edx, DWORD PTR $T196515[ebp]
  00312	52		 push	 edx
  00313	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp]
  00319	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  0031e	bf 08 00 00 00	 mov	 edi, 8
  00323	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00326	72 05		 jb	 SHORT $LN357@GetDrivePa
  00328	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0032b	eb 03		 jmp	 SHORT $LN358@GetDrivePa
$LN357@GetDrivePa:
  0032d	83 c0 04	 add	 eax, 4
$LN358@GetDrivePa:
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00336	83 c4 04	 add	 esp, 4
  00339	89 45 d8	 mov	 DWORD PTR _driveNumber$149023[ebp], eax
  0033c	39 bd c8 02 00
	00		 cmp	 DWORD PTR $T196515[ebp+24], edi
  00342	72 12		 jb	 SHORT $LN377@GetDrivePa
  00344	8b 85 b4 02 00
	00		 mov	 eax, DWORD PTR $T196515[ebp+4]
  0034a	50		 push	 eax
  0034b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00350	8b 45 d8	 mov	 eax, DWORD PTR _driveNumber$149023[ebp]
  00353	83 c4 04	 add	 esp, 4
$LN377@GetDrivePa:

; 650  : 
; 651  : 			if (driveNumber >= 0)

  00356	3b c3		 cmp	 eax, ebx
  00358	7c 25		 jl	 SHORT $LN389@GetDrivePa

; 652  : 			{
; 653  : 				part.MountPoint += (char) (driveNumber + 'A');

  0035a	04 41		 add	 al, 65			; 00000041H
  0035c	0f b6 c8	 movzx	 ecx, al
  0035f	51		 push	 ecx
  00360	6a 01		 push	 1
  00362	8d 8d 70 02 00
	00		 lea	 ecx, DWORD PTR _part$148849[ebp+64]
  00368	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 654  : 				part.MountPoint += ":";

  0036d	6a 01		 push	 1
  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00374	8d 8d 70 02 00
	00		 lea	 ecx, DWORD PTR _part$148849[ebp+64]
  0037a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN389@GetDrivePa:

; 655  : 			}
; 656  : 
; 657  : 			// Volume ID
; 658  : 			wchar_t volumePath[TC_MAX_PATH];
; 659  : 			if (ResolveSymbolicLink ((wchar_t *) ws.str().c_str(), volumePath))

  0037f	8d 95 b0 02 00
	00		 lea	 edx, DWORD PTR $T196517[ebp]
  00385	52		 push	 edx
  00386	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp]
  0038c	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00391	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00394	72 05		 jb	 SHORT $LN399@GetDrivePa
  00396	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00399	eb 03		 jmp	 SHORT $LN400@GetDrivePa
$LN399@GetDrivePa:
  0039b	83 c0 04	 add	 eax, 4
$LN400@GetDrivePa:
  0039e	8d 8d d4 04 00
	00		 lea	 ecx, DWORD PTR _volumePath$149029[ebp]
  003a4	51		 push	 ecx
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 _ResolveSymbolicLink
  003ab	83 c4 08	 add	 esp, 8
  003ae	8b f0		 mov	 esi, eax
  003b0	39 bd c8 02 00
	00		 cmp	 DWORD PTR $T196517[ebp+24], edi
  003b6	72 0f		 jb	 SHORT $LN419@GetDrivePa
  003b8	8b 95 b4 02 00
	00		 mov	 edx, DWORD PTR $T196517[ebp+4]
  003be	52		 push	 edx
  003bf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003c4	83 c4 04	 add	 esp, 4
$LN419@GetDrivePa:
  003c7	3b f3		 cmp	 esi, ebx
  003c9	0f 84 a5 01 00
	00		 je	 $LN5@GetDrivePa

; 660  : 			{
; 661  : 				wchar_t volumeName[TC_MAX_PATH];
; 662  : 				HANDLE fh = FindFirstVolumeW (volumeName, array_capacity (volumeName));

  003cf	68 04 01 00 00	 push	 260			; 00000104H
  003d4	8d 85 dc 06 00
	00		 lea	 eax, DWORD PTR _volumeName$149034[ebp]
  003da	50		 push	 eax
  003db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstVolumeW@8
  003e1	8b f0		 mov	 esi, eax

; 663  : 				if (fh != INVALID_HANDLE_VALUE)

  003e3	83 fe ff	 cmp	 esi, -1
  003e6	0f 84 88 01 00
	00		 je	 $LN5@GetDrivePa
  003ec	8d 64 24 00	 npad	 4
$LL4@GetDrivePa:

; 664  : 				{
; 665  : 					do
; 666  : 					{
; 667  : 						wstring volumeNameStr = volumeName;

  003f0	33 c9		 xor	 ecx, ecx
  003f2	8d 85 dc 06 00
	00		 lea	 eax, DWORD PTR _volumeName$149034[ebp]
  003f8	c7 85 c8 02 00
	00 07 00 00 00	 mov	 DWORD PTR _volumeNameStr$149042[ebp+24], 7
  00402	89 9d c4 02 00
	00		 mov	 DWORD PTR _volumeNameStr$149042[ebp+20], ebx
  00408	66 89 8d b4 02
	00 00		 mov	 WORD PTR _volumeNameStr$149042[ebp+4], cx
  0040f	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL698@GetDrivePa:
  00412	66 8b 08	 mov	 cx, WORD PTR [eax]
  00415	83 c0 02	 add	 eax, 2
  00418	66 3b cb	 cmp	 cx, bx
  0041b	75 f5		 jne	 SHORT $LL698@GetDrivePa
  0041d	2b c2		 sub	 eax, edx
  0041f	d1 f8		 sar	 eax, 1
  00421	50		 push	 eax
  00422	8d 95 dc 06 00
	00		 lea	 edx, DWORD PTR _volumeName$149034[ebp]
  00428	52		 push	 edx
  00429	8d 8d b0 02 00
	00		 lea	 ecx, DWORD PTR _volumeNameStr$149042[ebp]
  0042f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 668  : 						wchar_t devicePath[TC_MAX_PATH];
; 669  : 
; 670  : 						if (QueryDosDeviceW (volumeNameStr.substr (4, volumeNameStr.size() - 1 - 4).c_str(), devicePath, array_capacity (devicePath)) != 0
; 671  : 							&& wcscmp (volumePath, devicePath) == 0)

  00434	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR _volumeNameStr$149042[ebp+20]
  0043a	83 c0 fb	 add	 eax, -5			; fffffffbH
  0043d	50		 push	 eax
  0043e	6a 04		 push	 4
  00440	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T196519[ebp]
  00446	51		 push	 ecx
  00447	8d 8d b0 02 00
	00		 lea	 ecx, DWORD PTR _volumeNameStr$149042[ebp]
  0044d	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  00451	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  00456	83 4d e8 02	 or	 DWORD PTR $T196525[ebp], 2
  0045a	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0045d	72 05		 jb	 SHORT $LN473@GetDrivePa
  0045f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00462	eb 03		 jmp	 SHORT $LN474@GetDrivePa
$LN473@GetDrivePa:
  00464	83 c0 04	 add	 eax, 4
$LN474@GetDrivePa:
  00467	68 04 01 00 00	 push	 260			; 00000104H
  0046c	8d 95 cc 02 00
	00		 lea	 edx, DWORD PTR _devicePath$149043[ebp]
  00472	52		 push	 edx
  00473	50		 push	 eax
  00474	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceW@12
  0047a	85 c0		 test	 eax, eax
  0047c	74 45		 je	 SHORT $LN18@GetDrivePa
  0047e	8d 8d cc 02 00
	00		 lea	 ecx, DWORD PTR _devicePath$149043[ebp]
  00484	8d 85 d4 04 00
	00		 lea	 eax, DWORD PTR _volumePath$149029[ebp]
  0048a	8d 9b 00 00 00
	00		 npad	 6
$LL699@GetDrivePa:
  00490	66 8b 10	 mov	 dx, WORD PTR [eax]
  00493	66 3b 11	 cmp	 dx, WORD PTR [ecx]
  00496	75 1e		 jne	 SHORT $LN700@GetDrivePa
  00498	66 3b d3	 cmp	 dx, bx
  0049b	74 15		 je	 SHORT $LN701@GetDrivePa
  0049d	66 8b 50 02	 mov	 dx, WORD PTR [eax+2]
  004a1	66 3b 51 02	 cmp	 dx, WORD PTR [ecx+2]
  004a5	75 0f		 jne	 SHORT $LN700@GetDrivePa
  004a7	83 c0 04	 add	 eax, 4
  004aa	83 c1 04	 add	 ecx, 4
  004ad	66 3b d3	 cmp	 dx, bx
  004b0	75 de		 jne	 SHORT $LL699@GetDrivePa
$LN701@GetDrivePa:
  004b2	33 c0		 xor	 eax, eax
  004b4	eb 05		 jmp	 SHORT $LN702@GetDrivePa
$LN700@GetDrivePa:
  004b6	1b c0		 sbb	 eax, eax
  004b8	83 d8 ff	 sbb	 eax, -1
$LN702@GetDrivePa:
  004bb	c6 45 ef 01	 mov	 BYTE PTR $T196518[ebp], 1
  004bf	3b c3		 cmp	 eax, ebx
  004c1	74 03		 je	 SHORT $LN19@GetDrivePa
$LN18@GetDrivePa:
  004c3	88 5d ef	 mov	 BYTE PTR $T196518[ebp], bl
$LN19@GetDrivePa:
  004c6	f6 45 e8 02	 test	 BYTE PTR $T196525[ebp], 2
  004ca	74 1b		 je	 SHORT $LN493@GetDrivePa
  004cc	83 65 e8 fd	 and	 DWORD PTR $T196525[ebp], -3 ; fffffffdH
  004d0	39 bd c4 fe ff
	ff		 cmp	 DWORD PTR $T196519[ebp+24], edi
  004d6	72 0f		 jb	 SHORT $LN493@GetDrivePa
  004d8	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T196519[ebp+4]
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004e4	83 c4 04	 add	 esp, 4
$LN493@GetDrivePa:
  004e7	38 5d ef	 cmp	 BYTE PTR $T196518[ebp], bl
  004ea	75 38		 jne	 SHORT $LN697@GetDrivePa

; 675  : 						}
; 676  : 
; 677  : 					} while (FindNextVolumeW (fh, volumeName, array_capacity (volumeName)));

  004ec	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  004f0	39 bd c8 02 00
	00		 cmp	 DWORD PTR _volumeNameStr$149042[ebp+24], edi
  004f6	72 0f		 jb	 SHORT $LN555@GetDrivePa
  004f8	8b 8d b4 02 00
	00		 mov	 ecx, DWORD PTR _volumeNameStr$149042[ebp+4]
  004fe	51		 push	 ecx
  004ff	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00504	83 c4 04	 add	 esp, 4
$LN555@GetDrivePa:
  00507	68 04 01 00 00	 push	 260			; 00000104H
  0050c	8d 95 dc 06 00
	00		 lea	 edx, DWORD PTR _volumeName$149034[ebp]
  00512	52		 push	 edx
  00513	56		 push	 esi
  00514	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextVolumeW@12
  0051a	85 c0		 test	 eax, eax
  0051c	0f 85 ce fe ff
	ff		 jne	 $LL4@GetDrivePa
  00522	eb 49		 jmp	 SHORT $LN2@GetDrivePa
$LN697@GetDrivePa:

; 672  : 						{
; 673  : 							part.VolumeNameId = volumeName;

  00524	8d 85 dc 06 00
	00		 lea	 eax, DWORD PTR _volumeName$149034[ebp]
  0052a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0052d	8d 49 00	 npad	 3
$LL703@GetDrivePa:
  00530	66 8b 08	 mov	 cx, WORD PTR [eax]
  00533	83 c0 02	 add	 eax, 2
  00536	66 3b cb	 cmp	 cx, bx
  00539	75 f5		 jne	 SHORT $LL703@GetDrivePa
  0053b	2b c2		 sub	 eax, edx
  0053d	d1 f8		 sar	 eax, 1
  0053f	50		 push	 eax
  00540	8d 85 dc 06 00
	00		 lea	 eax, DWORD PTR _volumeName$149034[ebp]
  00546	50		 push	 eax
  00547	8d 8d 94 02 00
	00		 lea	 ecx, DWORD PTR _part$148849[ebp+100]
  0054d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 674  : 							break;

  00552	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  00556	39 bd c8 02 00
	00		 cmp	 DWORD PTR _volumeNameStr$149042[ebp+24], edi
  0055c	72 0f		 jb	 SHORT $LN2@GetDrivePa
  0055e	8b 8d b4 02 00
	00		 mov	 ecx, DWORD PTR _volumeNameStr$149042[ebp+4]
  00564	51		 push	 ecx
  00565	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0056a	83 c4 04	 add	 esp, 4
$LN2@GetDrivePa:

; 678  : 
; 679  : 					FindVolumeClose (fh);

  0056d	56		 push	 esi
  0056e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindVolumeClose@4
$LN5@GetDrivePa:

; 680  : 				}
; 681  : 			}
; 682  : 
; 683  : 			partList.push_back (part);

  00574	8b 4d e4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00577	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  0057a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0057d	8d 95 30 02 00
	00		 lea	 edx, DWORD PTR _part$148849[ebp]
  00583	52		 push	 edx
  00584	50		 push	 eax
  00585	56		 push	 esi
  00586	e8 00 00 00 00	 call	 ?_Buynode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@0ABUPartition@CipherShed@@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Buynode
  0058b	8b 4d e4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0058e	6a 01		 push	 1
  00590	8b f8		 mov	 edi, eax
  00592	e8 00 00 00 00	 call	 ?_Incsize@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Incsize
  00597	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0059a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 684  : 		}

  0059d	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp+84]
  005a3	89 38		 mov	 DWORD PTR [eax], edi
  005a5	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  005a9	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005ae	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp+84]
  005b4	51		 push	 ecx
  005b5	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$149001[ebp+84], OFFSET ??_7ios_base@std@@6B@
  005bf	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  005c4	83 c4 04	 add	 esp, 4
  005c7	83 bd ac 02 00
	00 08		 cmp	 DWORD PTR _part$148849[ebp+124], 8
  005ce	72 0f		 jb	 SHORT $LN625@GetDrivePa
  005d0	8b 95 98 02 00
	00		 mov	 edx, DWORD PTR _part$148849[ebp+104]
  005d6	52		 push	 edx
  005d7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005dc	83 c4 04	 add	 esp, 4
$LN625@GetDrivePa:
  005df	33 c0		 xor	 eax, eax
  005e1	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  005e6	c7 85 ac 02 00
	00 07 00 00 00	 mov	 DWORD PTR _part$148849[ebp+124], 7
  005f0	89 9d a8 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+120], ebx
  005f6	66 89 85 98 02
	00 00		 mov	 WORD PTR _part$148849[ebp+104], ax
  005fd	39 bd 88 02 00
	00		 cmp	 DWORD PTR _part$148849[ebp+88], edi
  00603	72 0f		 jb	 SHORT $LN651@GetDrivePa
  00605	8b 8d 74 02 00
	00		 mov	 ecx, DWORD PTR _part$148849[ebp+68]
  0060b	51		 push	 ecx
  0060c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00611	83 c4 04	 add	 esp, 4
$LN651@GetDrivePa:
  00614	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00619	89 b5 88 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+88], esi
  0061f	89 9d 84 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+84], ebx
  00625	88 9d 74 02 00
	00		 mov	 BYTE PTR _part$148849[ebp+68], bl
  0062b	39 bd 48 02 00
	00		 cmp	 DWORD PTR _part$148849[ebp+24], edi
  00631	72 0f		 jb	 SHORT $LN677@GetDrivePa
  00633	8b 95 34 02 00
	00		 mov	 edx, DWORD PTR _part$148849[ebp+4]
  00639	52		 push	 edx
  0063a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0063f	83 c4 04	 add	 esp, 4
$LN677@GetDrivePa:
  00642	8d 4d a4	 lea	 ecx, DWORD PTR _partPath$148756[ebp+84]
  00645	89 b5 48 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+24], esi
  0064b	89 9d 44 02 00
	00		 mov	 DWORD PTR _part$148849[ebp+20], ebx
  00651	88 9d 34 02 00
	00		 mov	 BYTE PTR _part$148849[ebp+4], bl
  00657	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0065a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0065f	8d 45 a4	 lea	 eax, DWORD PTR _partPath$148756[ebp+84]
  00662	50		 push	 eax
  00663	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _partPath$148756[ebp+84], OFFSET ??_7ios_base@std@@6B@
  0066a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0066f	83 c4 04	 add	 esp, 4
  00672	ff 45 e0	 inc	 DWORD PTR _partNumber$148602[ebp]
  00675	8b 75 e0	 mov	 esi, DWORD PTR _partNumber$148602[ebp]
  00678	e9 ea f9 ff ff	 jmp	 $LL11@GetDrivePa
__catch$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$0:

; 634  : 			}
; 635  : 			catch (...)
; 636  : 			{
; 637  : 				continue;

  0067d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00684	b8 00 00 00 00	 mov	 eax, $LN37@GetDrivePa
  00689	c3		 ret	 0
$LN37@GetDrivePa:
  0068a	33 db		 xor	 ebx, ebx
  0068c	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  00692	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00695	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0069a	ff 45 e0	 inc	 DWORD PTR _partNumber$148602[ebp]
  0069d	8b 75 e0	 mov	 esi, DWORD PTR _partNumber$148602[ebp]
  006a0	e9 c2 f9 ff ff	 jmp	 $LL11@GetDrivePa
$LN704@GetDrivePa:

; 685  : 
; 686  : 		return partList;

  006a5	8b 45 e4	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 687  : 	}

  006a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  006ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006b2	59		 pop	 ecx
  006b3	5f		 pop	 edi
  006b4	5e		 pop	 esi
  006b5	5b		 pop	 ebx
  006b6	8b 8d e4 08 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006bc	33 cd		 xor	 ecx, ebp
  006be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c3	81 c5 e8 08 00
	00		 add	 ebp, 2280		; 000008e8H
  006c9	8b e5		 mov	 esp, ebp
  006cb	5d		 pop	 ebp
  006cc	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$2:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T196525[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN23@GetDrivePa
  0000c	83 65 e8 fe	 and	 DWORD PTR $T196525[ebp], -2 ; fffffffeH
  00010	8b 4d e4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
$LN23@GetDrivePa:
  00018	c3		 ret	 0
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$13:
  00019	8b 45 e8	 mov	 eax, DWORD PTR $T196525[ebp]
  0001c	83 e0 04	 and	 eax, 4
  0001f	0f 84 0c 00 00
	00		 je	 $LN42@GetDrivePa
  00025	83 65 e8 fb	 and	 DWORD PTR $T196525[ebp], -5 ; fffffffbH
  00029	8d 4d a4	 lea	 ecx, DWORD PTR _partPath$148756[ebp+84]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN42@GetDrivePa:
  00031	c3		 ret	 0
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$14:
  00032	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp+12]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$16:
  0003d	8b 8d c0 f5 ff
	ff		 mov	 ecx, DWORD PTR $T196724[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$3:
  00048	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _partPath$148756[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$5:
  00053	8d 8d 30 02 00
	00		 lea	 ecx, DWORD PTR _part$148849[ebp]
  00059	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$6:
  0005e	8d 8d b0 02 00
	00		 lea	 ecx, DWORD PTR $T196511[ebp]
  00064	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$17:
  00069	8b 45 e8	 mov	 eax, DWORD PTR $T196525[ebp]
  0006c	83 e0 08	 and	 eax, 8
  0006f	0f 84 0f 00 00
	00		 je	 $LN264@GetDrivePa
  00075	83 65 e8 f7	 and	 DWORD PTR $T196525[ebp], -9 ; fffffff7H
  00079	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp+84]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN264@GetDrivePa:
  00084	c3		 ret	 0
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$18:
  00085	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp+12]
  0008b	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$20:
  00090	8b 8d bc f5 ff
	ff		 mov	 ecx, DWORD PTR $T197746[ebp]
  00096	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$7:
  0009b	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ws$149001[ebp]
  000a1	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$8:
  000a6	8d 8d b0 02 00
	00		 lea	 ecx, DWORD PTR $T196512[ebp]
  000ac	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z$11:
  000b1	8d 8d b0 02 00
	00		 lea	 ecx, DWORD PTR _volumeNameStr$149042[ebp]
  000b7	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z:
  000bc	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000c3	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  000c9	33 c8		 xor	 ecx, eax
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b 8a f0 08 00
	00		 mov	 ecx, DWORD PTR [edx+2288]
  000d6	33 c8		 xor	 ecx, eax
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z
  000e2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z ENDP ; CipherShed::BootEncryption::GetDrivePartitions
PUBLIC	??_C@_0M@OJHKIMBP@?2Partition0?$AA@		; `string'
PUBLIC	?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z ; CipherShed::BootEncryption::GetDriveGeometry
EXTRN	_GetDriveGeometry:PROC
;	COMDAT ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_0M@OJHKIMBP@?2Partition0?$AA@ DB '\Partition0', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z$0
__ehfuncinfo$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z
_TEXT	SEGMENT
$T199430 = -184						; size = 8
$T199429 = -176						; size = 28
_devName$ = -148					; size = 136
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_driveNumber$ = 12					; size = 4
?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z PROC ; CipherShed::BootEncryption::GetDriveGeometry, COMDAT
; _this$ = ecx

; 691  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c4		 xor	 eax, esp
  0001d	50		 push	 eax
  0001e	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+196]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 692  : 		stringstream devName;

  0002b	6a 01		 push	 1
  0002d	6a 03		 push	 3
  0002f	8d 4c 24 38	 lea	 ecx, DWORD PTR _devName$[esp+204]
  00033	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 693  : 		devName << "\\Device\\Harddisk" << driveNumber << "\\Partition0";

  00038	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR _driveNumber$[esp+192]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
  00044	50		 push	 eax
  00045	8d 4c 24 40	 lea	 ecx, DWORD PTR _devName$[esp+212]
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  0004e	51		 push	 ecx
  0004f	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+220], 0
  0005a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0005f	83 c4 08	 add	 esp, 8
  00062	8b c8		 mov	 ecx, eax
  00064	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	83 c4 08	 add	 esp, 8

; 694  : 
; 695  : 		DISK_GEOMETRY geometry;
; 696  : 		throw_sys_if (!::GetDriveGeometry ((char *) devName.str().c_str(), &geometry));

  00072	8d 54 24 14	 lea	 edx, DWORD PTR $T199429[esp+196]
  00076	52		 push	 edx
  00077	8d 4c 24 34	 lea	 ecx, DWORD PTR _devName$[esp+200]
  0007b	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00080	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00084	72 05		 jb	 SHORT $LN15@GetDriveGe
  00086	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00089	eb 03		 jmp	 SHORT $LN16@GetDriveGe
$LN15@GetDriveGe:
  0008b	83 c0 04	 add	 eax, 4
$LN16@GetDriveGe:
  0008e	8b b4 24 c8 00
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+192]
  00095	56		 push	 esi
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _GetDriveGeometry
  0009c	83 c4 08	 add	 esp, 8
  0009f	85 c0		 test	 eax, eax
  000a1	0f 94 c3	 sete	 bl
  000a4	83 7c 24 2c 10	 cmp	 DWORD PTR $T199429[esp+220], 16 ; 00000010H
  000a9	72 0d		 jb	 SHORT $LN33@GetDriveGe
  000ab	8b 44 24 18	 mov	 eax, DWORD PTR $T199429[esp+200]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b5	83 c4 04	 add	 esp, 4
$LN33@GetDriveGe:
  000b8	84 db		 test	 bl, bl
  000ba	74 21		 je	 SHORT $LN3@GetDriveGe
  000bc	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T199430[esp+196], OFFSET ??_7SystemException@CipherShed@@6B@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000ca	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000cf	8d 4c 24 10	 lea	 ecx, DWORD PTR $T199430[esp+200]
  000d3	51		 push	 ecx
  000d4	89 44 24 18	 mov	 DWORD PTR $T199430[esp+208], eax
  000d8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetDriveGe:

; 697  : 		return geometry;

  000dd	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _devName$[esp+280]
  000e4	c7 84 24 c0 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+204], -1
  000ef	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  000f4	8d 94 24 84 00
	00 00		 lea	 edx, DWORD PTR _devName$[esp+280]
  000fb	52		 push	 edx
  000fc	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _devName$[esp+284], OFFSET ??_7ios_base@std@@6B@
  00107	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0010c	83 c4 04	 add	 esp, 4
  0010f	8b c6		 mov	 eax, esi

; 698  : 	}

  00111	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+196]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  00128	c2 08 00	 ret	 8
$LN55@GetDriveGe:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _devName$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__ehhandler$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 82 4c ff ff
	ff		 lea	 eax, DWORD PTR [edx-180]
  00015	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z ENDP ; CipherShed::BootEncryption::GetDriveGeometry
PUBLIC	??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z ; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$3
__ehfuncinfo$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	33 db		 xor	 ebx, ebx
  00030	6a ff		 push	 -1
  00032	53		 push	 ebx
  00033	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0003a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003d	57		 push	 edi
  0003e	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00046	6a ff		 push	 -1
  00048	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0004b	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0004e	53		 push	 ebx
  0004f	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00056	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00059	50		 push	 eax
  0005a	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  0005e	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00066	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00069	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  0006c	51		 push	 ecx
  0006d	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00070	c6 44 24 20 01	 mov	 BYTE PTR __$EHRec$[esp+44], 1
  00075	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00078	e8 00 00 00 00	 call	 ??0Partition@CipherShed@@QAE@ABU01@@Z
  0007d	8a 97 c0 00 00
	00		 mov	 dl, BYTE PTR [edi+192]
  00083	88 96 c0 00 00
	00		 mov	 BYTE PTR [esi+192], dl
  00089	8b 87 c8 00 00
	00		 mov	 eax, DWORD PTR [edi+200]
  0008f	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax
  00095	8b 8f cc 00 00
	00		 mov	 ecx, DWORD PTR [edi+204]
  0009b	8d 97 d0 00 00
	00		 lea	 edx, DWORD PTR [edi+208]
  000a1	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx
  000a7	52		 push	 edx
  000a8	8d 8e d0 00 00
	00		 lea	 ecx, DWORD PTR [esi+208]
  000ae	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  000b3	e8 00 00 00 00	 call	 ??0?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
  000b8	8d 87 f0 00 00
	00		 lea	 eax, DWORD PTR [edi+240]
  000be	50		 push	 eax
  000bf	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  000c5	c6 44 24 20 03	 mov	 BYTE PTR __$EHRec$[esp+44], 3
  000ca	e8 00 00 00 00	 call	 ??0Partition@CipherShed@@QAE@ABU01@@Z
  000cf	8b 8f 70 01 00
	00		 mov	 ecx, DWORD PTR [edi+368]
  000d5	89 8e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ecx
  000db	8b 97 74 01 00
	00		 mov	 edx, DWORD PTR [edi+372]
  000e1	89 96 74 01 00
	00		 mov	 DWORD PTR [esi+372], edx
  000e7	8a 87 78 01 00
	00		 mov	 al, BYTE PTR [edi+376]
  000ed	88 86 78 01 00
	00		 mov	 BYTE PTR [esi+376], al
  000f3	8b c6		 mov	 eax, esi
  000f5	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	83 c4 10	 add	 esp, 16			; 00000010H
  00107	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 40	 add	 ecx, 64			; 00000040H
  00019	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__unwindfunclet$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  00027	e9 00 00 00 00	 jmp	 ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
__ehhandler$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00033	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::SystemDriveConfiguration::SystemDriveConfiguration
PUBLIC	??4?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??4?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T200110 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::operator=, COMDAT
; _this$ = ecx

; 526  : 		if (this != &_Right)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	3b f0		 cmp	 esi, eax
  00009	74 2b		 je	 SHORT $LN71@operator@25
  0000b	53		 push	 ebx

; 527  : 			assign(_Right.begin(), _Right.end());

  0000c	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000e	55		 push	 ebp
  0000f	57		 push	 edi
  00010	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00013	8b 2f		 mov	 ebp, DWORD PTR [edi]
  00015	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR $T200110[esp+12]
  0001e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00025	52		 push	 edx
  00026	57		 push	 edi
  00027	53		 push	 ebx
  00028	55		 push	 ebp
  00029	53		 push	 ebx
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
  00033	5f		 pop	 edi
  00034	5d		 pop	 ebp
  00035	5b		 pop	 ebx
$LN71@operator@25:

; 528  : 		return (*this);

  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 529  : 		}

  00039	c2 04 00	 ret	 4
??4?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::operator=
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T200123 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T200123[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >::ContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
_TEXT	ENDS
PUBLIC	_buffer$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Write@File@CipherShed@@QAEXPAEK@Z		; CipherShed::File::Write
EXTRN	__imp__WriteFile@20:PROC
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__catchsym$?Write@File@CipherShed@@QAEXPAEK@Z$3 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?Write@File@CipherShed@@QAEXPAEK@Z$0
__tryblocktable$?Write@File@CipherShed@@QAEXPAEK@Z DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Write@File@CipherShed@@QAEXPAEK@Z$3
__unwindtable$?Write@File@CipherShed@@QAEXPAEK@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?Write@File@CipherShed@@QAEXPAEK@Z$2
__ehfuncinfo$?Write@File@CipherShed@@QAEXPAEK@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Write@File@CipherShed@@QAEXPAEK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Write@File@CipherShed@@QAEXPAEK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?Write@File@CipherShed@@QAEXPAEK@Z
_TEXT	SEGMENT
_e$148097 = -48						; size = 4
$T200129 = -44						; size = 8
$T200128 = -36						; size = 8
_this$GSCopy$ = -28					; size = 4
_buffer$GSCopy$ = -24					; size = 4
_bytesWritten$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_bootEnc$148100 = 0					; size = 1560
__$ArrayPad$ = 1560					; size = 4
_buffer$ = 1572						; size = 4
_size$ = 1576						; size = 4
?Write@File@CipherShed@@QAEXPAEK@Z PROC			; CipherShed::File::Write, COMDAT
; _this$ = ecx

; 300  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 e4 f9
	ff ff		 lea	 ebp, DWORD PTR [esp-1564]
  00008	81 ec 1c 06 00
	00		 sub	 esp, 1564		; 0000061cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?Write@File@CipherShed@@QAEXPAEK@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 24	 sub	 esp, 36			; 00000024H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 18 06 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003c	8b 85 24 06 00
	00		 mov	 eax, DWORD PTR _buffer$[ebp]

; 301  : 		DWORD bytesWritten;
; 302  : 
; 303  : 		try
; 304  : 		{
; 305  : 			if (Elevated)
; 306  : 			{
; 307  : 				Elevator::ReadWriteFile (true, IsDevice, Path, buffer, FilePointerPosition, size, &bytesWritten);

  00042	8b bd 28 06 00
	00		 mov	 edi, DWORD PTR _size$[ebp]
  00048	8b f1		 mov	 esi, ecx
  0004a	33 db		 xor	 ebx, ebx

; 319  : 				throw;

  0004c	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004f	89 45 e8	 mov	 DWORD PTR _buffer$GSCopy$[ebp], eax
  00052	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00055	38 1e		 cmp	 BYTE PTR [esi], bl
  00057	74 50		 je	 SHORT $LN9@Write
  00059	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR _bytesWritten$[ebp]
  0005f	51		 push	 ecx
  00060	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00063	57		 push	 edi
  00064	52		 push	 edx
  00065	51		 push	 ecx
  00066	50		 push	 eax
  00067	0f b6 46 14	 movzx	 eax, BYTE PTR [esi+20]
  0006b	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	6a 01		 push	 1
  00072	e8 00 00 00 00	 call	 ?ReadWriteFile@Elevator@CipherShed@@SAXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE_KIPAK@Z ; CipherShed::Elevator::ReadWriteFile
  00077	8b 45 ec	 mov	 eax, DWORD PTR _bytesWritten$[ebp]
  0007a	83 c4 20	 add	 esp, 32			; 00000020H
  0007d	01 46 08	 add	 DWORD PTR [esi+8], eax
  00080	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  00083	3b c7		 cmp	 eax, edi
  00085	0f 84 cf 00 00
	00		 je	 $LN22@Write
  0008b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T200128[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00098	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0009d	8d 4d dc	 lea	 ecx, DWORD PTR $T200128[ebp]
  000a0	51		 push	 ecx
  000a1	89 45 e0	 mov	 DWORD PTR $T200128[ebp+4], eax
  000a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@Write:

; 308  : 				FilePointerPosition += bytesWritten;
; 309  : 				throw_sys_if (bytesWritten != size);
; 310  : 			}
; 311  : 			else
; 312  : 			{
; 313  : 				throw_sys_if (!WriteFile (Handle, buffer, size, &bytesWritten, NULL) || bytesWritten != size);

  000a9	53		 push	 ebx
  000aa	8d 55 ec	 lea	 edx, DWORD PTR _bytesWritten$[ebp]
  000ad	52		 push	 edx
  000ae	57		 push	 edi
  000af	50		 push	 eax
  000b0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  000ba	85 c0		 test	 eax, eax
  000bc	74 09		 je	 SHORT $LN5@Write
  000be	39 7d ec	 cmp	 DWORD PTR _bytesWritten$[ebp], edi
  000c1	0f 84 93 00 00
	00		 je	 $LN22@Write
$LN5@Write:
  000c7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T200129[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000d9	8d 4d d4	 lea	 ecx, DWORD PTR $T200129[ebp]
  000dc	51		 push	 ecx
  000dd	89 45 d8	 mov	 DWORD PTR $T200129[ebp+4], eax
  000e0	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?Write@File@CipherShed@@QAEXPAEK@Z$0:

; 314  : 			}
; 315  : 		}
; 316  : 		catch (SystemException &e)
; 317  : 		{
; 318  : 			if (!IsDevice || e.ErrorCode != ERROR_WRITE_PROTECT)

  000e5	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000e8	80 7e 14 00	 cmp	 BYTE PTR [esi+20], 0
  000ec	0f 84 8f 00 00
	00		 je	 $LN3@Write
  000f2	8b 55 d0	 mov	 edx, DWORD PTR _e$148097[ebp]
  000f5	83 7a 04 13	 cmp	 DWORD PTR [edx+4], 19	; 00000013H
  000f9	0f 85 82 00 00
	00		 jne	 $LN3@Write

; 320  : 
; 321  : 			BootEncryption bootEnc (NULL);

  000ff	6a 00		 push	 0
  00101	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$148100[ebp]
  00104	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 322  : 
; 323  : 			while (size >= TC_SECTOR_SIZE_BIOS)

  00109	8b 9d 28 06 00
	00		 mov	 ebx, DWORD PTR _size$[ebp]
  0010f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00113	81 fb 00 02 00
	00		 cmp	 ebx, 512		; 00000200H
  00119	72 2d		 jb	 SHORT $LN1@Write
  0011b	8b 7d e8	 mov	 edi, DWORD PTR _buffer$GSCopy$[ebp]
  0011e	c1 eb 09	 shr	 ebx, 9
$LL2@Write:

; 324  : 			{
; 325  : 				bootEnc.WriteBootDriveSector (FilePointerPosition, buffer);

  00121	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00124	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00127	57		 push	 edi
  00128	50		 push	 eax
  00129	51		 push	 ecx
  0012a	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$148100[ebp]
  0012d	e8 00 00 00 00	 call	 ?WriteBootDriveSector@BootEncryption@CipherShed@@QAEX_KPAE@Z ; CipherShed::BootEncryption::WriteBootDriveSector

; 326  : 
; 327  : 				FilePointerPosition += TC_SECTOR_SIZE_BIOS;

  00132	81 46 08 00 02
	00 00		 add	 DWORD PTR [esi+8], 512	; 00000200H
  00139	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 328  : 				buffer += TC_SECTOR_SIZE_BIOS;

  0013d	81 c7 00 02 00
	00		 add	 edi, 512		; 00000200H
  00143	83 eb 01	 sub	 ebx, 1
  00146	75 d9		 jne	 SHORT $LL2@Write
$LN1@Write:

; 329  : 				size -= TC_SECTOR_SIZE_BIOS;
; 330  : 			}
; 331  : 		}

  00148	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$148100[ebp]
  0014b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0014f	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00154	b8 00 00 00 00	 mov	 eax, $LN22@Write
  00159	c3		 ret	 0
$LN22@Write:

; 332  : 	}

  0015a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00164	59		 pop	 ecx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 8d 18 06 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	33 cd		 xor	 ecx, ebp
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	81 c5 1c 06 00
	00		 add	 ebp, 1564		; 0000061cH
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
$LN3@Write:

; 319  : 				throw;

  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Write:
  0018a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Write@File@CipherShed@@QAEXPAEK@Z$2:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR _bootEnc$148100[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$?Write@File@CipherShed@@QAEXPAEK@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 8a 24 06 00
	00		 mov	 ecx, DWORD PTR [edx+1572]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Write@File@CipherShed@@QAEXPAEK@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Write@File@CipherShed@@QAEXPAEK@Z ENDP			; CipherShed::File::Write
PUBLIC	??4SystemDriveConfiguration@CipherShed@@QAEAAU01@ABU01@@Z ; CipherShed::SystemDriveConfiguration::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SystemDriveConfiguration@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
$T200481 = -8						; size = 8
tv315 = 8						; size = 4
$T200552 = 8						; size = 1
___that$ = 8						; size = 4
??4SystemDriveConfiguration@CipherShed@@QAEAAU01@ABU01@@Z PROC ; CipherShed::SystemDriveConfiguration::operator=, COMDAT
; _this$ = ecx
  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 18	 mov	 edi, DWORD PTR ___that$[esp+16]
  0000a	6a ff		 push	 -1
  0000c	6a 00		 push	 0
  0000e	57		 push	 edi
  0000f	8b f1		 mov	 esi, ecx
  00011	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00016	6a ff		 push	 -1
  00018	6a 00		 push	 0
  0001a	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0001d	50		 push	 eax
  0001e	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00026	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00029	8d 57 40	 lea	 edx, DWORD PTR [edi+64]
  0002c	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  0002f	52		 push	 edx
  00030	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00033	e8 00 00 00 00	 call	 ??4Partition@CipherShed@@QAEAAU01@ABU01@@Z
  00038	8a 87 c0 00 00
	00		 mov	 al, BYTE PTR [edi+192]
  0003e	88 86 c0 00 00
	00		 mov	 BYTE PTR [esi+192], al
  00044	8b 8f c8 00 00
	00		 mov	 ecx, DWORD PTR [edi+200]
  0004a	89 8e c8 00 00
	00		 mov	 DWORD PTR [esi+200], ecx
  00050	8b 97 cc 00 00
	00		 mov	 edx, DWORD PTR [edi+204]
  00056	8d 87 d0 00 00
	00		 lea	 eax, DWORD PTR [edi+208]
  0005c	8d 9e d0 00 00
	00		 lea	 ebx, DWORD PTR [esi+208]
  00062	89 96 cc 00 00
	00		 mov	 DWORD PTR [esi+204], edx
  00068	3b d8		 cmp	 ebx, eax
  0006a	74 3a		 je	 SHORT $LN77@operator@26
  0006c	55		 push	 ebp
  0006d	8b 68 14	 mov	 ebp, DWORD PTR [eax+20]
  00070	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	89 4c 24 14	 mov	 DWORD PTR $T200481[esp+28], ecx
  00079	8b cb		 mov	 ecx, ebx
  0007b	89 44 24 1c	 mov	 DWORD PTR tv315[esp+20], eax
  0007f	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00084	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00087	8b 02		 mov	 eax, DWORD PTR [edx]
  00089	8b 54 24 1c	 mov	 edx, DWORD PTR $T200552[esp+20]
  0008d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0008f	52		 push	 edx
  00090	8b 54 24 20	 mov	 edx, DWORD PTR tv315[esp+24]
  00094	55		 push	 ebp
  00095	8b 6c 24 1c	 mov	 ebp, DWORD PTR $T200481[esp+36]
  00099	52		 push	 edx
  0009a	55		 push	 ebp
  0009b	52		 push	 edx
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	8b cb		 mov	 ecx, ebx
  000a0	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >
  000a5	5d		 pop	 ebp
$LN77@operator@26:
  000a6	8d 87 f0 00 00
	00		 lea	 eax, DWORD PTR [edi+240]
  000ac	50		 push	 eax
  000ad	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  000b3	e8 00 00 00 00	 call	 ??4Partition@CipherShed@@QAEAAU01@ABU01@@Z
  000b8	8b 8f 70 01 00
	00		 mov	 ecx, DWORD PTR [edi+368]
  000be	89 8e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ecx
  000c4	8b 97 74 01 00
	00		 mov	 edx, DWORD PTR [edi+372]
  000ca	89 96 74 01 00
	00		 mov	 DWORD PTR [esi+372], edx
  000d0	8a 87 78 01 00
	00		 mov	 al, BYTE PTR [edi+376]
  000d6	88 86 78 01 00
	00		 mov	 BYTE PTR [esi+376], al
  000dc	5f		 pop	 edi
  000dd	8b c6		 mov	 eax, esi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	83 c4 08	 add	 esp, 8
  000e4	c2 04 00	 ret	 4
??4SystemDriveConfiguration@CipherShed@@QAEAAU01@ABU01@@Z ENDP ; CipherShed::SystemDriveConfiguration::operator=
_TEXT	ENDS
PUBLIC	??_C@_0DA@OOEJKOIP@CipherShed?3?3BootEncryption?3?3Regi@ ; `string'
PUBLIC	??_C@_03CGLHDMIP@?$CC?$AN?6?$AA@		; `string'
PUBLIC	??_C@_02JGFLNPEJ@?0?$CC?$AA@			; `string'
PUBLIC	??_C@_08OHAGLOJG@?$CC?00x0001?$AA@		; `string'
PUBLIC	??_C@_0CN@BKHLFBOK@Reg?$DNtruecrypt_reg?$AN?6?$AN?6?$FLtruecrypt_@ ; `string'
PUBLIC	??_C@_0O@HCLLBHKI@?$FLtruecrypt?$FN?$AN?6?$AA@	; `string'
PUBLIC	??_C@_03ENJJMCOJ@Del?$AA@			; `string'
PUBLIC	??_C@_04JBLMLCOF@8002?$AA@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add?$AA@			; `string'
PUBLIC	??_C@_04FLCDBBKO@0008?$AA@			; `string'
PUBLIC	??_C@_0BM@GBCKDJAI@?2truecrypt_driver_setup?4inf?$AA@ ; `string'
PUBLIC	??_C@_0N@KPKBADH@UpperFilters?$AA@		; `string'
PUBLIC	??_C@_0CO@FIPMIJLN@SYSTEM?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0M@DBKHNNPD@DumpFilters?$AA@		; `string'
PUBLIC	??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@		; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
EXTRN	__imp__SetupInstallFromInfSectionA@44:PROC
EXTRN	__imp__SetupOpenInfFileA@16:PROC
EXTRN	__imp__RegSetValueExA@24:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__SetupDiOpenClassRegKey@8:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
;	COMDAT ??_C@_0DA@OOEJKOIP@CipherShed?3?3BootEncryption?3?3Regi@
CONST	SEGMENT
??_C@_0DA@OOEJKOIP@CipherShed?3?3BootEncryption?3?3Regi@ DB 'CipherShed::'
	DB	'BootEncryption::RegisterFilter:1705', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CGLHDMIP@?$CC?$AN?6?$AA@
CONST	SEGMENT
??_C@_03CGLHDMIP@?$CC?$AN?6?$AA@ DB '"', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JGFLNPEJ@?0?$CC?$AA@
CONST	SEGMENT
??_C@_02JGFLNPEJ@?0?$CC?$AA@ DB ',"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHAGLOJG@?$CC?00x0001?$AA@
CONST	SEGMENT
??_C@_08OHAGLOJG@?$CC?00x0001?$AA@ DB '",0x0001', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BKHLFBOK@Reg?$DNtruecrypt_reg?$AN?6?$AN?6?$FLtruecrypt_@
CONST	SEGMENT
??_C@_0CN@BKHLFBOK@Reg?$DNtruecrypt_reg?$AN?6?$AN?6?$FLtruecrypt_@ DB 'Re'
	DB	'g=truecrypt_reg', 0dH, 0aH, 0dH, 0aH, '[truecrypt_reg]', 0dH, 0aH
	DB	'HKR,,"', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCLLBHKI@?$FLtruecrypt?$FN?$AN?6?$AA@
CONST	SEGMENT
??_C@_0O@HCLLBHKI@?$FLtruecrypt?$FN?$AN?6?$AA@ DB '[truecrypt]', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJMCOJ@Del?$AA@
CONST	SEGMENT
??_C@_03ENJJMCOJ@Del?$AA@ DB 'Del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBLMLCOF@8002?$AA@
CONST	SEGMENT
??_C@_04JBLMLCOF@8002?$AA@ DB '8002', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add?$AA@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add?$AA@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLCDBBKO@0008?$AA@
CONST	SEGMENT
??_C@_04FLCDBBKO@0008?$AA@ DB '0008', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GBCKDJAI@?2truecrypt_driver_setup?4inf?$AA@
CONST	SEGMENT
??_C@_0BM@GBCKDJAI@?2truecrypt_driver_setup?4inf?$AA@ DB '\truecrypt_driv'
	DB	'er_setup.inf', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KPKBADH@UpperFilters?$AA@
CONST	SEGMENT
??_C@_0N@KPKBADH@UpperFilters?$AA@ DB 'UpperFilters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FIPMIJLN@SYSTEM?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0CO@FIPMIJLN@SYSTEM?2CurrentControlSet?2Control@ DB 'SYSTEM\Current'
	DB	'ControlSet\Control\CrashControl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBKHNNPD@DumpFilters?$AA@
CONST	SEGMENT
??_C@_0M@DBKHNNPD@DumpFilters?$AA@ DB 'DumpFilters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@ DB 'truecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z DD 019930522H
	DD	01cH
	DD	FLAT:__unwindtable$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$11
	DD	0aH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$14
	DD	0dH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$15
	DD	0eH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$16
	DD	0fH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$17
	DD	010H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0fH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0eH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0dH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0cH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0bH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	0aH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	09H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	08H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	07H
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18
	DD	01aH
	DD	FLAT:__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$19
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -66032					; size = 4
_size$149836 = -66032					; size = 4
_regKey$ = -66028					; size = 4
_finally1744$149910 = -66024				; size = 4
$T200582 = -66024					; size = 8
$T200568 = -66024					; size = 4
$T200567 = -66024					; size = 4
$T200564 = -66024					; size = 8
$T200583 = -66016					; size = 8
$T200565 = -66016					; size = 8
$T200563 = -66016					; size = 8
_finally1708$ = -66008					; size = 4
$T200562 = -66008					; size = 8
$T200581 = -66000					; size = 28
$T200566 = -66000					; size = 28
$T200579 = -65972					; size = 28
$T200576 = -65944					; size = 28
$T200575 = -65916					; size = 28
$T200577 = -65888					; size = 28
$T200569 = -65860					; size = 28
$T200580 = -65832					; size = 28
$T200578 = -65804					; size = 28
$T200572 = -65776					; size = 28
_filterReg$ = -65748					; size = 28
_filter$ = -65720					; size = 28
_infFileName$149846 = -65692				; size = 28
_infTxt$149867 = -65664					; size = 28
_infFile$149850 = -65636				; size = 56
_finally1732$149865 = -65580				; size = 28
_regKeyBuf$149835 = -65552				; size = 65536
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_registerFilter$ = 8					; size = 1
_filterType$ = 12					; size = 4
_deviceClassGuid$ = 16					; size = 4
?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z PROC ; CipherShed::BootEncryption::RegisterFilter, COMDAT
; _this$ = ecx

; 1677 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 e4 01 01 00	 mov	 eax, 66020		; 000101e4H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 e0 01
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+66032], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c4		 xor	 eax, esp
  00031	50		 push	 eax
  00032	8d 84 24 f8 01
	01 00		 lea	 eax, DWORD PTR __$EHRec$[esp+66052]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	8b ac 24 10 02
	01 00		 mov	 ebp, DWORD PTR _deviceClassGuid$[esp+66048]

; 1678 : 		string filter;

  00046	33 db		 xor	 ebx, ebx
  00048	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0004d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+66052], ecx
  00051	89 bc 24 64 01
	00 00		 mov	 DWORD PTR _filter$[esp+66076], edi
  00058	89 9c 24 60 01
	00 00		 mov	 DWORD PTR _filter$[esp+66072], ebx
  0005f	88 9c 24 50 01
	00 00		 mov	 BYTE PTR _filter$[esp+66056], bl
  00066	89 9c 24 00 02
	01 00		 mov	 DWORD PTR __$EHRec$[esp+66060], ebx

; 1679 : 		string filterReg;

  0006d	89 bc 24 48 01
	00 00		 mov	 DWORD PTR _filterReg$[esp+66076], edi
  00074	89 9c 24 44 01
	00 00		 mov	 DWORD PTR _filterReg$[esp+66072], ebx
  0007b	88 9c 24 34 01
	00 00		 mov	 BYTE PTR _filterReg$[esp+66056], bl

; 1680 : 		HKEY regKey;
; 1681 : 
; 1682 : 		switch (filterType)

  00082	8b b4 24 0c 02
	01 00		 mov	 esi, DWORD PTR _filterType$[esp+66048]
  00089	3b f3		 cmp	 esi, ebx
  0008b	c6 84 24 00 02
	01 00 01	 mov	 BYTE PTR __$EHRec$[esp+66060], 1
  00093	0f 8c c6 06 00
	00		 jl	 $LN16@RegisterFi@2
  00099	83 fe 01	 cmp	 esi, 1
  0009c	0f 8e 81 00 00
	00		 jle	 $LN27@RegisterFi@2
  000a2	83 fe 02	 cmp	 esi, 2
  000a5	0f 85 b4 06 00
	00		 jne	 $LN16@RegisterFi@2

; 1690 : 
; 1691 : 			break;
; 1692 : 
; 1693 : 		case DumpFilter:
; 1694 : 			if (!IsOSAtLeast (WIN_VISTA))

  000ab	6a 0b		 push	 11			; 0000000bH
  000ad	e8 00 00 00 00	 call	 _IsOSAtLeast
  000b2	83 c4 04	 add	 esp, 4
  000b5	85 c0		 test	 eax, eax

; 1695 : 				return;

  000b7	0f 84 60 06 00
	00		 je	 $LN503@RegisterFi@2

; 1696 : 
; 1697 : 			filter = "truecrypt.sys";

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
  000c2	8d 8c 24 50 01
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+66056]
  000c9	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 1698 : 			filterReg = "DumpFilters";

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DBKHNNPD@DumpFilters?$AA@
  000d3	8d 8c 24 34 01
	00 00		 lea	 ecx, DWORD PTR _filterReg$[esp+66056]
  000da	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 1699 : 			SetLastError (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\CrashControl", 0, KEY_READ | KEY_WRITE, &regKey));

  000df	8d 44 24 18	 lea	 eax, DWORD PTR _regKey$[esp+66052]
  000e3	50		 push	 eax
  000e4	68 1f 00 02 00	 push	 131103			; 0002001fH
  000e9	53		 push	 ebx
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FIPMIJLN@SYSTEM?2CurrentControlSet?2Control@
  000ef	68 02 00 00 80	 push	 -2147483646		; 80000002H
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  000fa	50		 push	 eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 1700 : 			throw_sys_if (GetLastError() != ERROR_SUCCESS);

  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00107	85 c0		 test	 eax, eax
  00109	74 74		 je	 SHORT $LN498@RegisterFi@2
  0010b	8d 4c 24 24	 lea	 ecx, DWORD PTR $T200563[esp+66052]
  0010f	e8 00 00 00 00	 call	 ??0SystemException@CipherShed@@QAE@XZ ; CipherShed::SystemException::SystemException
  00114	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00119	8d 4c 24 28	 lea	 ecx, DWORD PTR $T200563[esp+66056]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@RegisterFi@2:

; 1683 : 		{
; 1684 : 		case DriveFilter:
; 1685 : 		case VolumeFilter:
; 1686 : 			filter = "truecrypt";

  00123	6a 09		 push	 9
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  0012a	8d 8c 24 54 01
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+66060]
  00131	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1687 : 			filterReg = "UpperFilters";

  00136	6a 0c		 push	 12			; 0000000cH
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KPKBADH@UpperFilters?$AA@
  0013d	8d 8c 24 38 01
	00 00		 lea	 ecx, DWORD PTR _filterReg$[esp+66060]
  00144	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1688 : 			regKey = SetupDiOpenClassRegKey (deviceClassGuid, KEY_READ | KEY_WRITE);

  00149	68 1f 00 02 00	 push	 131103			; 0002001fH
  0014e	55		 push	 ebp
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetupDiOpenClassRegKey@8
  00155	89 44 24 18	 mov	 DWORD PTR _regKey$[esp+66052], eax

; 1689 : 			throw_sys_if (regKey == INVALID_HANDLE_VALUE);

  00159	83 f8 ff	 cmp	 eax, -1
  0015c	75 25		 jne	 SHORT $LN25@RegisterFi@2
  0015e	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T200562[esp+66052], OFFSET ??_7SystemException@CipherShed@@6B@
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0016c	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00171	8d 54 24 30	 lea	 edx, DWORD PTR $T200562[esp+66056]
  00175	52		 push	 edx
  00176	89 44 24 38	 mov	 DWORD PTR $T200562[esp+66064], eax
  0017a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN498@RegisterFi@2:
  0017f	8b 44 24 18	 mov	 eax, DWORD PTR _regKey$[esp+66052]
$LN25@RegisterFi@2:

; 1706 : 		}
; 1707 : 
; 1708 : 		finally_do_arg (HKEY, regKey, { RegCloseKey (finally_arg); });

  00183	89 44 24 2c	 mov	 DWORD PTR _finally1708$[esp+66052], eax
  00187	c6 84 24 00 02
	01 00 02	 mov	 BYTE PTR __$EHRec$[esp+66060], 2

; 1709 : 
; 1710 : 		if (registerFilter && filterType != DumpFilter)

  0018f	38 9c 24 08 02
	01 00		 cmp	 BYTE PTR _registerFilter$[esp+66048], bl
  00196	0f 84 ee 00 00
	00		 je	 $LN15@RegisterFi@2
  0019c	83 fe 02	 cmp	 esi, 2
  0019f	0f 84 e5 00 00
	00		 je	 $LN15@RegisterFi@2

; 1711 : 		{
; 1712 : 			// Register class filter below all other filters in the stack
; 1713 : 
; 1714 : 			size_t strSize = filter.size() + 1;

  001a5	8b b4 24 60 01
	00 00		 mov	 esi, DWORD PTR _filter$[esp+66072]
  001ac	46		 inc	 esi

; 1715 : 			byte regKeyBuf[65536];
; 1716 : 			DWORD size = sizeof (regKeyBuf) - strSize;

  001ad	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H
  001b2	2b c6		 sub	 eax, esi

; 1717 : 
; 1718 : 			// SetupInstallFromInfSection() does not support prepending of values so we have to modify the registry directly
; 1719 : 			strncpy ((char *) regKeyBuf, filter.c_str(), sizeof (regKeyBuf));

  001b4	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  001b9	89 44 24 14	 mov	 DWORD PTR _size$149836[esp+66052], eax
  001bd	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR _filter$[esp+66056]
  001c4	39 bc 24 64 01
	00 00		 cmp	 DWORD PTR _filter$[esp+66076], edi
  001cb	73 07		 jae	 SHORT $LN149@RegisterFi@2
  001cd	8d 84 24 50 01
	00 00		 lea	 eax, DWORD PTR _filter$[esp+66056]
$LN149@RegisterFi@2:
  001d4	68 00 00 01 00	 push	 65536			; 00010000H
  001d9	50		 push	 eax
  001da	8d 8c 24 fc 01
	00 00		 lea	 ecx, DWORD PTR _regKeyBuf$149835[esp+66060]
  001e1	51		 push	 ecx
  001e2	e8 00 00 00 00	 call	 _strncpy

; 1720 : 
; 1721 : 			if (RegQueryValueEx (regKey, filterReg.c_str(), NULL, NULL, regKeyBuf + strSize, &size) != ERROR_SUCCESS)

  001e7	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR _filterReg$[esp+66068]
  001ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f1	39 bc 24 48 01
	00 00		 cmp	 DWORD PTR _filterReg$[esp+66076], edi
  001f8	73 07		 jae	 SHORT $LN155@RegisterFi@2
  001fa	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _filterReg$[esp+66056]
$LN155@RegisterFi@2:
  00201	8d 54 24 14	 lea	 edx, DWORD PTR _size$149836[esp+66052]
  00205	52		 push	 edx
  00206	8b 54 24 1c	 mov	 edx, DWORD PTR _regKey$[esp+66056]
  0020a	8d 8c 34 f8 01
	00 00		 lea	 ecx, DWORD PTR _regKeyBuf$149835[esp+esi+66056]
  00211	51		 push	 ecx
  00212	53		 push	 ebx
  00213	53		 push	 ebx
  00214	50		 push	 eax
  00215	52		 push	 edx
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0021c	85 c0		 test	 eax, eax
  0021e	74 08		 je	 SHORT $LN14@RegisterFi@2

; 1722 : 				size = 1;

  00220	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _size$149836[esp+66052], 1
$LN14@RegisterFi@2:

; 1723 : 
; 1724 : 			SetLastError (RegSetValueEx (regKey, filterReg.c_str(), 0, REG_MULTI_SZ, regKeyBuf, strSize + size));

  00228	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR _filterReg$[esp+66056]
  0022f	39 bc 24 48 01
	00 00		 cmp	 DWORD PTR _filterReg$[esp+66076], edi
  00236	73 07		 jae	 SHORT $LN161@RegisterFi@2
  00238	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _filterReg$[esp+66056]
$LN161@RegisterFi@2:
  0023f	8b 4c 24 14	 mov	 ecx, DWORD PTR _size$149836[esp+66052]
  00243	03 ce		 add	 ecx, esi
  00245	51		 push	 ecx
  00246	8d 94 24 f8 01
	00 00		 lea	 edx, DWORD PTR _regKeyBuf$149835[esp+66056]
  0024d	52		 push	 edx
  0024e	6a 07		 push	 7
  00250	53		 push	 ebx
  00251	50		 push	 eax
  00252	8b 44 24 2c	 mov	 eax, DWORD PTR _regKey$[esp+66072]
  00256	50		 push	 eax
  00257	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  0025d	50		 push	 eax
  0025e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 1725 : 			throw_sys_if (GetLastError() != ERROR_SUCCESS);

  00264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0026a	85 c0		 test	 eax, eax
  0026c	0f 84 a2 04 00
	00		 je	 $LN9@RegisterFi@2
  00272	8d 4c 24 24	 lea	 ecx, DWORD PTR $T200565[esp+66052]
  00276	e8 00 00 00 00	 call	 ??0SystemException@CipherShed@@QAE@XZ ; CipherShed::SystemException::SystemException
  0027b	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00280	8d 4c 24 28	 lea	 ecx, DWORD PTR $T200565[esp+66056]
  00284	51		 push	 ecx
  00285	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN15@RegisterFi@2:

; 1726 : 		}
; 1727 : 		else
; 1728 : 		{
; 1729 : 			string infFileName = GetTempPath() + "\\truecrypt_driver_setup.inf";

  0028a	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+66052]
  0028e	8d 54 24 34	 lea	 edx, DWORD PTR $T200566[esp+66052]
  00292	52		 push	 edx
  00293	e8 00 00 00 00	 call	 ?GetTempPathA@BootEncryption@CipherShed@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetTempPathA
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GBCKDJAI@?2truecrypt_driver_setup?4inf?$AA@
  0029d	50		 push	 eax
  0029e	8d 84 24 70 01
	00 00		 lea	 eax, DWORD PTR _infFileName$149846[esp+66060]
  002a5	50		 push	 eax
  002a6	c6 84 24 0c 02
	01 00 03	 mov	 BYTE PTR __$EHRec$[esp+66072], 3
  002ae	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b6	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  002bb	c6 84 24 00 02
	01 00 05	 mov	 BYTE PTR __$EHRec$[esp+66060], 5
  002c3	39 6c 24 4c	 cmp	 DWORD PTR $T200566[esp+66076], ebp
  002c7	72 0d		 jb	 SHORT $LN178@RegisterFi@2
  002c9	8b 4c 24 38	 mov	 ecx, DWORD PTR $T200566[esp+66056]
  002cd	51		 push	 ecx
  002ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d3	83 c4 04	 add	 esp, 4
$LN178@RegisterFi@2:

; 1730 : 
; 1731 : 			File infFile (infFileName, false, true);

  002d6	6a 01		 push	 1
  002d8	53		 push	 ebx
  002d9	83 ec 1c	 sub	 esp, 28			; 0000001cH
  002dc	8b cc		 mov	 ecx, esp
  002de	89 64 24 40	 mov	 DWORD PTR $T200567[esp+66088], esp
  002e2	6a ff		 push	 -1
  002e4	53		 push	 ebx
  002e5	8d 94 24 94 01
	00 00		 lea	 edx, DWORD PTR _infFileName$149846[esp+66096]
  002ec	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  002ef	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  002f2	52		 push	 edx
  002f3	89 7c 24 7c	 mov	 DWORD PTR $T200566[esp+66124], edi
  002f7	89 5c 24 78	 mov	 DWORD PTR $T200566[esp+66120], ebx
  002fb	88 5c 24 68	 mov	 BYTE PTR $T200566[esp+66104], bl
  002ff	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00302	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00307	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _infFile$149850[esp+66088]
  0030e	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File

; 1732 : 			finally_do_arg (string, infFileName, { DeleteFile (finally_arg.c_str()); });

  00313	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00316	8b cc		 mov	 ecx, esp
  00318	89 64 24 38	 mov	 DWORD PTR $T200568[esp+66080], esp
  0031c	6a ff		 push	 -1
  0031e	53		 push	 ebx
  0031f	8d 84 24 8c 01
	00 00		 lea	 eax, DWORD PTR _infFileName$149846[esp+66088]
  00326	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  00329	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0032c	50		 push	 eax
  0032d	c6 84 24 28 02
	01 00 06	 mov	 BYTE PTR __$EHRec$[esp+66100], 6
  00335	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00338	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0033d	8d b4 24 f4 01
	00 00		 lea	 esi, DWORD PTR _finally1732$149865[esp+66080]
  00344	e8 00 00 00 00	 call	 ??0Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::Finally1732
  00349	c6 84 24 00 02
	01 00 07	 mov	 BYTE PTR __$EHRec$[esp+66060], 7

; 1733 : 
; 1734 : 			string infTxt = "[truecrypt]\r\n"
; 1735 : 							+ string (registerFilter ? "Add" : "Del") + "Reg=truecrypt_reg\r\n\r\n"
; 1736 : 							"[truecrypt_reg]\r\n"
; 1737 : 							"HKR,,\"" + filterReg + "\",0x0001" + string (registerFilter ? "0008" : "8002") + ",\"" + filter + "\"\r\n";

  00351	38 9c 24 08 02
	01 00		 cmp	 BYTE PTR _registerFilter$[esp+66048], bl
  00358	74 0c		 je	 SHORT $LN32@RegisterFi@2
  0035a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04FLCDBBKO@0008?$AA@
  0035f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03LDFMNCOE@Add?$AA@
  00364	eb 0a		 jmp	 SHORT $LN35@RegisterFi@2
$LN32@RegisterFi@2:
  00366	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04JBLMLCOF@8002?$AA@
  0036b	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03ENJJMCOJ@Del?$AA@
$LN35@RegisterFi@2:
  00370	50		 push	 eax
  00371	8d 8c 24 c4 00
	00 00		 lea	 ecx, DWORD PTR $T200569[esp+66056]
  00378	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037d	8b f0		 mov	 esi, eax
  0037f	57		 push	 edi
  00380	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR $T200572[esp+66056]
  00387	c6 84 24 04 02
	01 00 08	 mov	 BYTE PTR __$EHRec$[esp+66064], 8
  0038f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00394	50		 push	 eax
  00395	8d 8c 24 8c 00
	00 00		 lea	 ecx, DWORD PTR $T200575[esp+66056]
  0039c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HCLLBHKI@?$FLtruecrypt?$FN?$AN?6?$AA@
  003a1	51		 push	 ecx
  003a2	c6 84 24 0c 02
	01 00 09	 mov	 BYTE PTR __$EHRec$[esp+66072], 9
  003aa	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BKHLFBOK@Reg?$DNtruecrypt_reg?$AN?6?$AN?6?$FLtruecrypt_@
  003b4	50		 push	 eax
  003b5	8d 94 24 80 00
	00 00		 lea	 edx, DWORD PTR $T200576[esp+66072]
  003bc	52		 push	 edx
  003bd	c6 84 24 18 02
	01 00 0a	 mov	 BYTE PTR __$EHRec$[esp+66084], 10 ; 0000000aH
  003c5	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003ca	8d 8c 24 48 01
	00 00		 lea	 ecx, DWORD PTR _filterReg$[esp+66076]
  003d1	51		 push	 ecx
  003d2	50		 push	 eax
  003d3	8d 94 24 c4 00
	00 00		 lea	 edx, DWORD PTR $T200577[esp+66084]
  003da	52		 push	 edx
  003db	c6 84 24 24 02
	01 00 0b	 mov	 BYTE PTR __$EHRec$[esp+66096], 11 ; 0000000bH
  003e3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_08OHAGLOJG@?$CC?00x0001?$AA@
  003ed	50		 push	 eax
  003ee	8d 84 24 24 01
	00 00		 lea	 eax, DWORD PTR $T200578[esp+66096]
  003f5	50		 push	 eax
  003f6	c6 84 24 30 02
	01 00 0c	 mov	 BYTE PTR __$EHRec$[esp+66108], 12 ; 0000000cH
  003fe	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00403	56		 push	 esi
  00404	50		 push	 eax
  00405	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR $T200579[esp+66108]
  0040c	51		 push	 ecx
  0040d	c6 84 24 3c 02
	01 00 0d	 mov	 BYTE PTR __$EHRec$[esp+66120], 13 ; 0000000dH
  00415	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_02JGFLNPEJ@?0?$CC?$AA@
  0041f	50		 push	 eax
  00420	8d 94 24 20 01
	00 00		 lea	 edx, DWORD PTR $T200580[esp+66120]
  00427	52		 push	 edx
  00428	c6 84 24 48 02
	01 00 0e	 mov	 BYTE PTR __$EHRec$[esp+66132], 14 ; 0000000eH
  00430	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00435	83 c4 48	 add	 esp, 72			; 00000048H
  00438	8d 8c 24 4c 01
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+66052]
  0043f	51		 push	 ecx
  00440	50		 push	 eax
  00441	8d 54 24 3c	 lea	 edx, DWORD PTR $T200581[esp+66060]
  00445	52		 push	 edx
  00446	c6 84 24 0c 02
	01 00 0f	 mov	 BYTE PTR __$EHRec$[esp+66072], 15 ; 0000000fH
  0044e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00453	68 00 00 00 00	 push	 OFFSET ??_C@_03CGLHDMIP@?$CC?$AN?6?$AA@
  00458	50		 push	 eax
  00459	8d 84 24 98 01
	00 00		 lea	 eax, DWORD PTR _infTxt$149867[esp+66072]
  00460	50		 push	 eax
  00461	c6 84 24 18 02
	01 00 10	 mov	 BYTE PTR __$EHRec$[esp+66084], 16 ; 00000010H
  00469	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0046e	83 c4 18	 add	 esp, 24			; 00000018H
  00471	39 6c 24 4c	 cmp	 DWORD PTR $T200581[esp+66076], ebp
  00475	72 0d		 jb	 SHORT $LN256@RegisterFi@2
  00477	8b 4c 24 38	 mov	 ecx, DWORD PTR $T200581[esp+66056]
  0047b	51		 push	 ecx
  0047c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00481	83 c4 04	 add	 esp, 4
$LN256@RegisterFi@2:
  00484	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00489	89 74 24 4c	 mov	 DWORD PTR $T200581[esp+66076], esi
  0048d	89 5c 24 48	 mov	 DWORD PTR $T200581[esp+66072], ebx
  00491	88 5c 24 38	 mov	 BYTE PTR $T200581[esp+66056], bl
  00495	39 ac 24 f4 00
	00 00		 cmp	 DWORD PTR $T200580[esp+66076], ebp
  0049c	72 10		 jb	 SHORT $LN282@RegisterFi@2
  0049e	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR $T200580[esp+66056]
  004a5	52		 push	 edx
  004a6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004ab	83 c4 04	 add	 esp, 4
$LN282@RegisterFi@2:
  004ae	89 b4 24 f4 00
	00 00		 mov	 DWORD PTR $T200580[esp+66076], esi
  004b5	89 9c 24 f0 00
	00 00		 mov	 DWORD PTR $T200580[esp+66072], ebx
  004bc	88 9c 24 e0 00
	00 00		 mov	 BYTE PTR $T200580[esp+66056], bl
  004c3	39 6c 24 68	 cmp	 DWORD PTR $T200579[esp+66076], ebp
  004c7	72 0d		 jb	 SHORT $LN308@RegisterFi@2
  004c9	8b 44 24 54	 mov	 eax, DWORD PTR $T200579[esp+66056]
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004d3	83 c4 04	 add	 esp, 4
$LN308@RegisterFi@2:
  004d6	89 74 24 68	 mov	 DWORD PTR $T200579[esp+66076], esi
  004da	89 5c 24 64	 mov	 DWORD PTR $T200579[esp+66072], ebx
  004de	88 5c 24 54	 mov	 BYTE PTR $T200579[esp+66056], bl
  004e2	39 ac 24 10 01
	00 00		 cmp	 DWORD PTR $T200578[esp+66076], ebp
  004e9	72 10		 jb	 SHORT $LN334@RegisterFi@2
  004eb	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR $T200578[esp+66056]
  004f2	51		 push	 ecx
  004f3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004f8	83 c4 04	 add	 esp, 4
$LN334@RegisterFi@2:
  004fb	89 b4 24 10 01
	00 00		 mov	 DWORD PTR $T200578[esp+66076], esi
  00502	89 9c 24 0c 01
	00 00		 mov	 DWORD PTR $T200578[esp+66072], ebx
  00509	88 9c 24 fc 00
	00 00		 mov	 BYTE PTR $T200578[esp+66056], bl
  00510	39 ac 24 bc 00
	00 00		 cmp	 DWORD PTR $T200577[esp+66076], ebp
  00517	72 10		 jb	 SHORT $LN360@RegisterFi@2
  00519	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR $T200577[esp+66056]
  00520	52		 push	 edx
  00521	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00526	83 c4 04	 add	 esp, 4
$LN360@RegisterFi@2:
  00529	89 b4 24 bc 00
	00 00		 mov	 DWORD PTR $T200577[esp+66076], esi
  00530	89 9c 24 b8 00
	00 00		 mov	 DWORD PTR $T200577[esp+66072], ebx
  00537	88 9c 24 a8 00
	00 00		 mov	 BYTE PTR $T200577[esp+66056], bl
  0053e	39 ac 24 84 00
	00 00		 cmp	 DWORD PTR $T200576[esp+66076], ebp
  00545	72 0d		 jb	 SHORT $LN386@RegisterFi@2
  00547	8b 44 24 70	 mov	 eax, DWORD PTR $T200576[esp+66056]
  0054b	50		 push	 eax
  0054c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00551	83 c4 04	 add	 esp, 4
$LN386@RegisterFi@2:
  00554	89 b4 24 84 00
	00 00		 mov	 DWORD PTR $T200576[esp+66076], esi
  0055b	89 9c 24 80 00
	00 00		 mov	 DWORD PTR $T200576[esp+66072], ebx
  00562	88 5c 24 70	 mov	 BYTE PTR $T200576[esp+66056], bl
  00566	39 ac 24 a0 00
	00 00		 cmp	 DWORD PTR $T200575[esp+66076], ebp
  0056d	72 10		 jb	 SHORT $LN412@RegisterFi@2
  0056f	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR $T200575[esp+66056]
  00576	51		 push	 ecx
  00577	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0057c	83 c4 04	 add	 esp, 4
$LN412@RegisterFi@2:
  0057f	89 b4 24 a0 00
	00 00		 mov	 DWORD PTR $T200575[esp+66076], esi
  00586	89 9c 24 9c 00
	00 00		 mov	 DWORD PTR $T200575[esp+66072], ebx
  0058d	88 9c 24 8c 00
	00 00		 mov	 BYTE PTR $T200575[esp+66056], bl
  00594	39 ac 24 2c 01
	00 00		 cmp	 DWORD PTR $T200572[esp+66076], ebp
  0059b	72 10		 jb	 SHORT $LN438@RegisterFi@2
  0059d	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR $T200572[esp+66056]
  005a4	52		 push	 edx
  005a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005aa	83 c4 04	 add	 esp, 4
$LN438@RegisterFi@2:
  005ad	89 b4 24 2c 01
	00 00		 mov	 DWORD PTR $T200572[esp+66076], esi
  005b4	89 9c 24 28 01
	00 00		 mov	 DWORD PTR $T200572[esp+66072], ebx
  005bb	88 9c 24 18 01
	00 00		 mov	 BYTE PTR $T200572[esp+66056], bl
  005c2	c6 84 24 00 02
	01 00 1a	 mov	 BYTE PTR __$EHRec$[esp+66060], 26 ; 0000001aH
  005ca	39 ac 24 d8 00
	00 00		 cmp	 DWORD PTR $T200569[esp+66076], ebp
  005d1	72 10		 jb	 SHORT $LN464@RegisterFi@2
  005d3	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR $T200569[esp+66056]
  005da	50		 push	 eax
  005db	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005e0	83 c4 04	 add	 esp, 4
$LN464@RegisterFi@2:

; 1738 : 
; 1739 : 			infFile.Write ((byte *) infTxt.c_str(), infTxt.size());

  005e3	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR _infTxt$149867[esp+66056]
  005ea	89 b4 24 d8 00
	00 00		 mov	 DWORD PTR $T200569[esp+66076], esi
  005f1	89 9c 24 d4 00
	00 00		 mov	 DWORD PTR $T200569[esp+66072], ebx
  005f8	88 9c 24 c4 00
	00 00		 mov	 BYTE PTR $T200569[esp+66056], bl
  005ff	39 ac 24 9c 01
	00 00		 cmp	 DWORD PTR _infTxt$149867[esp+66076], ebp
  00606	73 07		 jae	 SHORT $LN481@RegisterFi@2
  00608	8d 84 24 88 01
	00 00		 lea	 eax, DWORD PTR _infTxt$149867[esp+66056]
$LN481@RegisterFi@2:
  0060f	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR _infTxt$149867[esp+66072]
  00616	51		 push	 ecx
  00617	50		 push	 eax
  00618	8d 8c 24 a8 01
	00 00		 lea	 ecx, DWORD PTR _infFile$149850[esp+66060]
  0061f	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1740 : 			infFile.Close();

  00624	38 9c 24 a1 01
	00 00		 cmp	 BYTE PTR _infFile$149850[esp+66053], bl
  0062b	74 1e		 je	 SHORT $LN483@RegisterFi@2
  0062d	38 9c 24 a0 01
	00 00		 cmp	 BYTE PTR _infFile$149850[esp+66052], bl
  00634	75 0e		 jne	 SHORT $LN482@RegisterFi@2
  00636	8b 94 24 b0 01
	00 00		 mov	 edx, DWORD PTR _infFile$149850[esp+66068]
  0063d	52		 push	 edx
  0063e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN482@RegisterFi@2:
  00644	88 9c 24 a1 01
	00 00		 mov	 BYTE PTR _infFile$149850[esp+66053], bl
$LN483@RegisterFi@2:

; 1741 : 
; 1742 : 			HINF hInf = SetupOpenInfFile (infFileName.c_str(), NULL, INF_STYLE_OLDNT | INF_STYLE_WIN4, NULL);

  0064b	8b 84 24 6c 01
	00 00		 mov	 eax, DWORD PTR _infFileName$149846[esp+66056]
  00652	39 ac 24 80 01
	00 00		 cmp	 DWORD PTR _infFileName$149846[esp+66076], ebp
  00659	73 07		 jae	 SHORT $LN491@RegisterFi@2
  0065b	8d 84 24 6c 01
	00 00		 lea	 eax, DWORD PTR _infFileName$149846[esp+66056]
$LN491@RegisterFi@2:
  00662	53		 push	 ebx
  00663	6a 03		 push	 3
  00665	53		 push	 ebx
  00666	50		 push	 eax
  00667	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetupOpenInfFileA@16

; 1743 : 			throw_sys_if (hInf == INVALID_HANDLE_VALUE);

  0066d	83 f8 ff	 cmp	 eax, -1
  00670	75 21		 jne	 SHORT $LN7@RegisterFi@2
  00672	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T200582[esp+66052], OFFSET ??_7SystemException@CipherShed@@6B@
  0067a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00680	89 44 24 20	 mov	 DWORD PTR $T200582[esp+66056], eax
  00684	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00689	8d 44 24 20	 lea	 eax, DWORD PTR $T200582[esp+66056]
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@RegisterFi@2:

; 1744 : 			finally_do_arg (HINF, hInf, { SetupCloseInfFile (finally_arg); });

  00693	89 44 24 1c	 mov	 DWORD PTR _finally1744$149910[esp+66052], eax

; 1745 : 
; 1746 : 			throw_sys_if (!SetupInstallFromInfSection (ParentWindow, hInf, "truecrypt", SPINST_REGISTRY, regKey, NULL, 0, NULL, NULL, NULL, NULL));

  00697	8b 4c 24 18	 mov	 ecx, DWORD PTR _regKey$[esp+66052]
  0069b	8b 54 24 14	 mov	 edx, DWORD PTR _this$GSCopy$[esp+66052]
  0069f	53		 push	 ebx
  006a0	53		 push	 ebx
  006a1	53		 push	 ebx
  006a2	53		 push	 ebx
  006a3	53		 push	 ebx
  006a4	53		 push	 ebx
  006a5	51		 push	 ecx
  006a6	6a 04		 push	 4
  006a8	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  006ad	50		 push	 eax
  006ae	8b 02		 mov	 eax, DWORD PTR [edx]
  006b0	50		 push	 eax
  006b1	c6 84 24 2c 02
	01 00 1b	 mov	 BYTE PTR __$EHRec$[esp+66104], 27 ; 0000001bH
  006b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetupInstallFromInfSectionA@44
  006bf	85 c0		 test	 eax, eax
  006c1	75 18		 jne	 SHORT $LN3@RegisterFi@2
  006c3	8d 4c 24 24	 lea	 ecx, DWORD PTR $T200583[esp+66052]
  006c7	e8 00 00 00 00	 call	 ??0SystemException@CipherShed@@QAE@XZ ; CipherShed::SystemException::SystemException
  006cc	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  006d1	8d 4c 24 28	 lea	 ecx, DWORD PTR $T200583[esp+66056]
  006d5	51		 push	 ecx
  006d6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@RegisterFi@2:

; 1747 : 		}

  006db	8d 44 24 1c	 lea	 eax, DWORD PTR _finally1744$149910[esp+66052]
  006df	e8 00 00 00 00	 call	 ??1Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::~Finally1744
  006e4	8d 8c 24 84 01
	00 00		 lea	 ecx, DWORD PTR _infTxt$149867[esp+66052]
  006eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  006f0	8d b4 24 d8 01
	00 00		 lea	 esi, DWORD PTR _finally1732$149865[esp+66052]
  006f7	e8 00 00 00 00	 call	 ??1Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::~Finally1732
  006fc	8d 8c 24 a0 01
	00 00		 lea	 ecx, DWORD PTR _infFile$149850[esp+66052]
  00703	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
  00708	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _infFileName$149846[esp+66052]
  0070f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@RegisterFi@2:

; 1748 : 	}

  00714	8d 44 24 2c	 lea	 eax, DWORD PTR _finally1708$[esp+66052]
  00718	e8 00 00 00 00	 call	 ??1Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::~Finally1708
$LN503@RegisterFi@2:
  0071d	8d 8c 24 30 01
	00 00		 lea	 ecx, DWORD PTR _filterReg$[esp+66052]
  00724	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00729	8d 8c 24 4c 01
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+66052]
  00730	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00735	8b 8c 24 f8 01
	01 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+66052]
  0073c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00743	59		 pop	 ecx
  00744	5f		 pop	 edi
  00745	5e		 pop	 esi
  00746	5d		 pop	 ebp
  00747	5b		 pop	 ebx
  00748	8b 8c 24 e0 01
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+66032]
  0074f	33 cc		 xor	 ecx, esp
  00751	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00756	81 c4 f0 01 01
	00		 add	 esp, 66032		; 000101f0H
  0075c	c2 0c 00	 ret	 12			; 0000000cH
$LN16@RegisterFi@2:

; 1701 : 
; 1702 : 			break;
; 1703 : 
; 1704 : 		default:
; 1705 : 			throw ParameterIncorrect (SRC_POS);

  0075f	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00764	8d 54 24 20	 lea	 edx, DWORD PTR $T200564[esp+66056]
  00768	52		 push	 edx
  00769	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T200564[esp+66060], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00771	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T200564[esp+66064], OFFSET ??_C@_0DA@OOEJKOIP@CipherShed?3?3BootEncryption?3?3Regi@
  00779	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN502@RegisterFi@2:
  0077e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$0:
  00000	8d 8d 48 ff fe
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$1:
  0000b	8d 8d 2c ff fe
	ff		 lea	 ecx, DWORD PTR _filterReg$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$2:
  00016	8d 85 28 fe fe
	ff		 lea	 eax, DWORD PTR _finally1708$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1Finally1708@?O@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`14'::Finally1708::~Finally1708
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$3:
  00021	8d 8d 30 fe fe
	ff		 lea	 ecx, DWORD PTR $T200566[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$4:
  0002c	8d 8d 64 ff fe
	ff		 lea	 ecx, DWORD PTR _infFileName$149846[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$6:
  00037	8d 8d 9c ff fe
	ff		 lea	 ecx, DWORD PTR _infFile$149850[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$8:
  00042	8d b5 d4 ff fe
	ff		 lea	 esi, DWORD PTR _finally1732$149865[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1Finally1732@?BK@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`26'::Finally1732::~Finally1732
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$9:
  0004d	8d 8d bc fe fe
	ff		 lea	 ecx, DWORD PTR $T200569[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$10:
  00058	8d 8d 10 ff fe
	ff		 lea	 ecx, DWORD PTR $T200572[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$11:
  00063	8d 8d 84 fe fe
	ff		 lea	 ecx, DWORD PTR $T200575[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$12:
  0006e	8d 8d 68 fe fe
	ff		 lea	 ecx, DWORD PTR $T200576[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$13:
  00079	8d 8d a0 fe fe
	ff		 lea	 ecx, DWORD PTR $T200577[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$14:
  00084	8d 8d f4 fe fe
	ff		 lea	 ecx, DWORD PTR $T200578[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$15:
  0008f	8d 8d 4c fe fe
	ff		 lea	 ecx, DWORD PTR $T200579[ebp]
  00095	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$16:
  0009a	8d 8d d8 fe fe
	ff		 lea	 ecx, DWORD PTR $T200580[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$17:
  000a5	8d 8d 30 fe fe
	ff		 lea	 ecx, DWORD PTR $T200581[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$18:
  000b0	8d 8d 80 ff fe
	ff		 lea	 ecx, DWORD PTR _infTxt$149867[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z$19:
  000bb	8d 85 18 fe fe
	ff		 lea	 eax, DWORD PTR _finally1744$149910[ebp]
  000c1	e9 00 00 00 00	 jmp	 ??1Finally1744@?BP@??RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@23@PBU_GUID@@@Z@QAE@XZ ; `CipherShed::BootEncryption::RegisterFilter'::`31'::Finally1744::~Finally1744
__ehhandler$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z:
  000c6	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000ca	8d 82 0c fe fe
	ff		 lea	 eax, DWORD PTR [edx-66036]
  000d0	8b 8a 08 fe fe
	ff		 mov	 ecx, DWORD PTR [edx-66040]
  000d6	33 c8		 xor	 ecx, eax
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	83 c0 10	 add	 eax, 16			; 00000010H
  000e0	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000e3	33 c8		 xor	 ecx, eax
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z
  000ef	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ENDP ; CipherShed::BootEncryption::RegisterFilter
PUBLIC	??_C@_0DG@NJGMLFG@CipherShed?3?3BootEncryption?3?3Regi@ ; `string'
PUBLIC	?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z ; CipherShed::BootEncryption::RegisterFilterDriver
EXTRN	_GUID_DEVCLASS_DISKDRIVE:BYTE
EXTRN	_GUID_DEVCLASS_FLOPPYDISK:BYTE
EXTRN	_GUID_DEVCLASS_VOLUME:BYTE
;	COMDAT ??_C@_0DG@NJGMLFG@CipherShed?3?3BootEncryption?3?3Regi@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DG@NJGMLFG@CipherShed?3?3BootEncryption?3?3Regi@ DB 'CipherShed::B'
	DB	'ootEncryption::RegisterFilterDriver:1774', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z
_TEXT	SEGMENT
$T202346 = -8						; size = 8
_registerDriver$ = 8					; size = 1
_filterType$ = 12					; size = 4
?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z PROC ; CipherShed::BootEncryption::RegisterFilterDriver, COMDAT
; _this$ = ecx

; 1751 : 	{

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1752 : 		if (!IsAdmin() && IsUacSupported())

  00006	e8 00 00 00 00	 call	 _IsAdmin
  0000b	85 c0		 test	 eax, eax
  0000d	75 22		 jne	 SHORT $LN7@RegisterFi@3
  0000f	e8 00 00 00 00	 call	 _IsUacSupported
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $LN7@RegisterFi@3

; 1753 : 		{
; 1754 : 			Elevator::RegisterFilterDriver (registerDriver, filterType);

  00018	8b 44 24 14	 mov	 eax, DWORD PTR _filterType$[esp+8]
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR _registerDriver$[esp+8]
  00020	50		 push	 eax
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?RegisterFilterDriver@Elevator@CipherShed@@SAX_NW4FilterType@BootEncryption@2@@Z ; CipherShed::Elevator::RegisterFilterDriver
  00027	83 c4 08	 add	 esp, 8
  0002a	5e		 pop	 esi

; 1775 : 		}
; 1776 : 	}

  0002b	83 c4 08	 add	 esp, 8
  0002e	c2 08 00	 ret	 8
$LN7@RegisterFi@3:

; 1755 : 			return;
; 1756 : 		}
; 1757 : 
; 1758 : 		switch (filterType)

  00031	8b 44 24 14	 mov	 eax, DWORD PTR _filterType$[esp+8]
  00035	83 e8 00	 sub	 eax, 0
  00038	74 6b		 je	 SHORT $LN4@RegisterFi@3
  0003a	83 e8 01	 sub	 eax, 1
  0003d	74 3b		 je	 SHORT $LN3@RegisterFi@3
  0003f	83 e8 01	 sub	 eax, 1
  00042	74 1f		 je	 SHORT $LN2@RegisterFi@3

; 1771 : 			break;
; 1772 : 
; 1773 : 		default:
; 1774 : 			throw ParameterIncorrect (SRC_POS);

  00044	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00049	8d 54 24 08	 lea	 edx, DWORD PTR $T202346[esp+16]
  0004d	52		 push	 edx
  0004e	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T202346[esp+20], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00056	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T202346[esp+24], OFFSET ??_C@_0DG@NJGMLFG@CipherShed?3?3BootEncryption?3?3Regi@
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@RegisterFi@3:

; 1767 : 			break;
; 1768 : 
; 1769 : 		case DumpFilter:
; 1770 : 			RegisterFilter (registerDriver, filterType);

  00063	8b 44 24 10	 mov	 eax, DWORD PTR _registerDriver$[esp+8]
  00067	6a 00		 push	 0
  00069	6a 02		 push	 2
  0006b	50		 push	 eax
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  00073	5e		 pop	 esi

; 1775 : 		}
; 1776 : 	}

  00074	83 c4 08	 add	 esp, 8
  00077	c2 08 00	 ret	 8
$LN3@RegisterFi@3:
  0007a	57		 push	 edi

; 1762 : 			break;
; 1763 : 
; 1764 : 		case VolumeFilter:
; 1765 : 			RegisterFilter (registerDriver, filterType, &GUID_DEVCLASS_VOLUME);

  0007b	8b 7c 24 14	 mov	 edi, DWORD PTR _registerDriver$[esp+12]
  0007f	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_VOLUME
  00084	6a 01		 push	 1
  00086	57		 push	 edi
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter

; 1766 : 			RegisterFilter (registerDriver, filterType, &GUID_DEVCLASS_FLOPPYDISK);

  0008e	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_FLOPPYDISK
  00093	6a 01		 push	 1
  00095	57		 push	 edi
  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi

; 1775 : 		}
; 1776 : 	}

  0009f	83 c4 08	 add	 esp, 8
  000a2	c2 08 00	 ret	 8
$LN4@RegisterFi@3:

; 1759 : 		{
; 1760 : 		case DriveFilter:
; 1761 : 			RegisterFilter (registerDriver, filterType, &GUID_DEVCLASS_DISKDRIVE);

  000a5	8b 4c 24 10	 mov	 ecx, DWORD PTR _registerDriver$[esp+8]
  000a9	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_DISKDRIVE
  000ae	6a 00		 push	 0
  000b0	51		 push	 ecx
  000b1	8b ce		 mov	 ecx, esi
  000b3	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  000b8	5e		 pop	 esi

; 1775 : 		}
; 1776 : 	}

  000b9	83 c4 08	 add	 esp, 8
  000bc	c2 08 00	 ret	 8
$LN14@RegisterFi@3:
?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z ENDP ; CipherShed::BootEncryption::RegisterFilterDriver
_TEXT	ENDS
PUBLIC	?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::RegisterBootDriver
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$17 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$2
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$16 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$9
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$7
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$5
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$3
__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$0
__ehfuncinfo$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z
	DD	06H
	DD	FLAT:__tryblocktable$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
__tryblocktable$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$12
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$13
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$14
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$15
	DD	0aH
	DD	0aH
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$16
	DD	02H
	DD	02H
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$17
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z
_TEXT	SEGMENT
$T202746 = -76						; size = 8
$T202693 = -68						; size = 8
$T202640 = -60						; size = 8
$T202587 = -52						; size = 8
$T202534 = -44						; size = 8
$T202481 = -36						; size = 8
$T202427 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hiddenSystem$ = 8					; size = 1
?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z PROC ; CipherShed::BootEncryption::RegisterBootDriver, COMDAT
; _this$ = ecx

; 2423 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2424 : 		SetDriverServiceStartType (SERVICE_BOOT_START);

  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ; CipherShed::BootEncryption::SetDriverServiceStartType

; 2425 : 
; 2426 : 		try
; 2427 : 		{

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 2428 : 			RegisterFilterDriver (false, DriveFilter);

  0003e	e8 00 00 00 00	 call	 _IsAdmin
  00043	85 c0		 test	 eax, eax
  00045	75 48		 jne	 SHORT $LN40@RegisterBo
  00047	e8 00 00 00 00	 call	 _IsUacSupported
  0004c	85 c0		 test	 eax, eax
  0004e	74 3f		 je	 SHORT $LN40@RegisterBo
  00050	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	50		 push	 eax
  00064	ff d2		 call	 edx
  00066	85 c0		 test	 eax, eax
  00068	74 35		 je	 SHORT $LN38@RegisterBo
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  00071	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T202427[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0007e	89 45 e8	 mov	 DWORD PTR $T202427[ebp+4], eax
  00081	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00086	8d 45 e4	 lea	 eax, DWORD PTR $T202427[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@RegisterBo:
  0008f	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_DISKDRIVE
  00094	6a 00		 push	 0
  00096	6a 00		 push	 0
  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN38@RegisterBo:

; 2429 : 			RegisterFilterDriver (false, VolumeFilter);

  0009f	e8 00 00 00 00	 call	 _IsAdmin
  000a4	85 c0		 test	 eax, eax
  000a6	75 48		 jne	 SHORT $LN62@RegisterBo
  000a8	e8 00 00 00 00	 call	 _IsUacSupported
  000ad	85 c0		 test	 eax, eax
  000af	74 3f		 je	 SHORT $LN62@RegisterBo
  000b1	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000c0	6a 01		 push	 1
  000c2	6a 00		 push	 0
  000c4	50		 push	 eax
  000c5	ff d2		 call	 edx
  000c7	85 c0		 test	 eax, eax
  000c9	74 45		 je	 SHORT $LN59@RegisterBo
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  000d2	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T202481[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000df	89 45 e0	 mov	 DWORD PTR $T202481[ebp+4], eax
  000e2	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000e7	8d 45 dc	 lea	 eax, DWORD PTR $T202481[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@RegisterBo:
  000f0	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_VOLUME
  000f5	6a 01		 push	 1
  000f7	6a 00		 push	 0
  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  00100	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_FLOPPYDISK
  00105	6a 01		 push	 1
  00107	6a 00		 push	 0
  00109	8b ce		 mov	 ecx, esi
  0010b	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN59@RegisterBo:

; 2430 : 			RegisterFilterDriver (false, DumpFilter);

  00110	e8 00 00 00 00	 call	 _IsAdmin
  00115	85 c0		 test	 eax, eax
  00117	75 48		 jne	 SHORT $LN83@RegisterBo
  00119	e8 00 00 00 00	 call	 _IsUacSupported
  0011e	85 c0		 test	 eax, eax
  00120	74 3f		 je	 SHORT $LN83@RegisterBo
  00122	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00131	6a 02		 push	 2
  00133	6a 00		 push	 0
  00135	50		 push	 eax
  00136	ff d2		 call	 edx
  00138	85 c0		 test	 eax, eax
  0013a	74 3d		 je	 SHORT $LN23@RegisterBo
  0013c	50		 push	 eax
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  00143	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T202534[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00150	89 45 d8	 mov	 DWORD PTR $T202534[ebp+4], eax
  00153	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00158	8d 45 d4	 lea	 eax, DWORD PTR $T202534[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN83@RegisterBo:
  00161	6a 00		 push	 0
  00163	6a 02		 push	 2
  00165	6a 00		 push	 0
  00167	8b ce		 mov	 ecx, esi
  00169	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  0016e	eb 09		 jmp	 SHORT $LN23@RegisterBo
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$0:

; 2431 : 		}
; 2432 : 		catch (...) { }

  00170	b8 00 00 00 00	 mov	 eax, $LN189@RegisterBo
  00175	c3		 ret	 0
$LN189@RegisterBo:
  00176	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LN23@RegisterBo:

; 2433 : 
; 2434 : 		try
; 2435 : 		{

  00179	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 2436 : 			RegisterFilterDriver (true, DriveFilter);

  00180	e8 00 00 00 00	 call	 _IsAdmin
  00185	85 c0		 test	 eax, eax
  00187	75 48		 jne	 SHORT $LN104@RegisterBo
  00189	e8 00 00 00 00	 call	 _IsUacSupported
  0018e	85 c0		 test	 eax, eax
  00190	74 3f		 je	 SHORT $LN104@RegisterBo
  00192	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0019c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001a1	6a 00		 push	 0
  001a3	6a 01		 push	 1
  001a5	50		 push	 eax
  001a6	ff d2		 call	 edx
  001a8	85 c0		 test	 eax, eax
  001aa	74 35		 je	 SHORT $LN102@RegisterBo
  001ac	50		 push	 eax
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  001b3	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T202587[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  001ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001c0	89 45 d0	 mov	 DWORD PTR $T202587[ebp+4], eax
  001c3	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001c8	8d 45 cc	 lea	 eax, DWORD PTR $T202587[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN104@RegisterBo:
  001d1	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_DISKDRIVE
  001d6	6a 00		 push	 0
  001d8	6a 01		 push	 1
  001da	8b ce		 mov	 ecx, esi
  001dc	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN102@RegisterBo:

; 2437 : 
; 2438 : 			if (hiddenSystem)

  001e1	80 7d 08 00	 cmp	 BYTE PTR _hiddenSystem$[ebp], 0
  001e5	74 71		 je	 SHORT $LN122@RegisterBo

; 2439 : 				RegisterFilterDriver (true, VolumeFilter);

  001e7	e8 00 00 00 00	 call	 _IsAdmin
  001ec	85 c0		 test	 eax, eax
  001ee	75 48		 jne	 SHORT $LN125@RegisterBo
  001f0	e8 00 00 00 00	 call	 _IsUacSupported
  001f5	85 c0		 test	 eax, eax
  001f7	74 3f		 je	 SHORT $LN125@RegisterBo
  001f9	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00203	8b 08		 mov	 ecx, DWORD PTR [eax]
  00205	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00208	6a 01		 push	 1
  0020a	6a 01		 push	 1
  0020c	50		 push	 eax
  0020d	ff d2		 call	 edx
  0020f	85 c0		 test	 eax, eax
  00211	74 45		 je	 SHORT $LN122@RegisterBo
  00213	50		 push	 eax
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0021a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T202640[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00227	89 45 c8	 mov	 DWORD PTR $T202640[ebp+4], eax
  0022a	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0022f	8d 45 c4	 lea	 eax, DWORD PTR $T202640[ebp]
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN125@RegisterBo:
  00238	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_VOLUME
  0023d	6a 01		 push	 1
  0023f	6a 01		 push	 1
  00241	8b ce		 mov	 ecx, esi
  00243	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  00248	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_FLOPPYDISK
  0024d	6a 01		 push	 1
  0024f	6a 01		 push	 1
  00251	8b ce		 mov	 ecx, esi
  00253	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN122@RegisterBo:

; 2440 : 
; 2441 : 			RegisterFilterDriver (true, DumpFilter);

  00258	e8 00 00 00 00	 call	 _IsAdmin
  0025d	85 c0		 test	 eax, eax
  0025f	75 48		 jne	 SHORT $LN146@RegisterBo
  00261	e8 00 00 00 00	 call	 _IsUacSupported
  00266	85 c0		 test	 eax, eax
  00268	74 3f		 je	 SHORT $LN146@RegisterBo
  0026a	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00279	6a 02		 push	 2
  0027b	6a 01		 push	 1
  0027d	50		 push	 eax
  0027e	ff d2		 call	 edx
  00280	85 c0		 test	 eax, eax
  00282	74 32		 je	 SHORT $LN32@RegisterBo
  00284	50		 push	 eax
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0028b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T202693[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00298	89 45 c0	 mov	 DWORD PTR $T202693[ebp+4], eax
  0029b	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  002a0	8d 45 bc	 lea	 eax, DWORD PTR $T202693[ebp]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN146@RegisterBo:
  002a9	6a 00		 push	 0
  002ab	6a 02		 push	 2
  002ad	6a 01		 push	 1
  002af	8b ce		 mov	 ecx, esi
  002b1	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN32@RegisterBo:

; 2451 : 		}
; 2452 : 	}

  002b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c0	59		 pop	 ecx
  002c1	5f		 pop	 edi
  002c2	5e		 pop	 esi
  002c3	5b		 pop	 ebx
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c2 04 00	 ret	 4
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$2:

; 2442 : 		}
; 2443 : 		catch (...)
; 2444 : 		{
; 2445 : 			try { RegisterFilterDriver (false, DriveFilter); } catch (...) { }

  002ca	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  002d0	6a 00		 push	 0
  002d2	6a 00		 push	 0
  002d4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  002d8	e8 00 00 00 00	 call	 ?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z ; CipherShed::BootEncryption::RegisterFilterDriver
  002dd	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LN25@RegisterBo:

; 2446 : 			try { RegisterFilterDriver (false, VolumeFilter); } catch (...) { }

  002e4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002e7	6a 01		 push	 1
  002e9	6a 00		 push	 0
  002eb	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  002ef	e8 00 00 00 00	 call	 ?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z ; CipherShed::BootEncryption::RegisterFilterDriver
  002f4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LN27@RegisterBo:

; 2447 : 			try { RegisterFilterDriver (false, DumpFilter); } catch (...) { }

  002fb	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  002ff	e8 00 00 00 00	 call	 _IsAdmin
  00304	85 c0		 test	 eax, eax
  00306	75 62		 jne	 SHORT $LN167@RegisterBo
  00308	e8 00 00 00 00	 call	 _IsUacSupported
  0030d	85 c0		 test	 eax, eax
  0030f	74 59		 je	 SHORT $LN167@RegisterBo
  00311	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  0031b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00320	6a 02		 push	 2
  00322	6a 00		 push	 0
  00324	50		 push	 eax
  00325	ff d2		 call	 edx
  00327	85 c0		 test	 eax, eax
  00329	74 4d		 je	 SHORT $LN163@RegisterBo
  0032b	50		 push	 eax
  0032c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  00332	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T202746[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0033f	89 45 b8	 mov	 DWORD PTR $T202746[ebp+4], eax
  00342	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00347	8d 45 b4	 lea	 eax, DWORD PTR $T202746[ebp]
  0034a	50		 push	 eax
  0034b	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$3:

; 2442 : 		}
; 2443 : 		catch (...)
; 2444 : 		{
; 2445 : 			try { RegisterFilterDriver (false, DriveFilter); } catch (...) { }

  00350	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  00357	b8 00 00 00 00	 mov	 eax, $LN25@RegisterBo
  0035c	c3		 ret	 0
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$5:

; 2446 : 			try { RegisterFilterDriver (false, VolumeFilter); } catch (...) { }

  0035d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  00364	b8 00 00 00 00	 mov	 eax, $LN27@RegisterBo
  00369	c3		 ret	 0

; 2447 : 			try { RegisterFilterDriver (false, DumpFilter); } catch (...) { }

$LN167@RegisterBo:
  0036a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0036d	6a 00		 push	 0
  0036f	6a 02		 push	 2
  00371	6a 00		 push	 0
  00373	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN163@RegisterBo:
  00378	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LN29@RegisterBo:

; 2448 : 			try { SetDriverServiceStartType (SERVICE_SYSTEM_START); } catch (...) { }

  0037f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00382	6a 01		 push	 1
  00384	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00388	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ; CipherShed::BootEncryption::SetDriverServiceStartType
  0038d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LN31@RegisterBo:

; 2449 : 
; 2450 : 			throw;

  00394	6a 00		 push	 0
  00396	6a 00		 push	 0
  00398	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$7:

; 2447 : 			try { RegisterFilterDriver (false, DumpFilter); } catch (...) { }

  0039d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  003a4	b8 00 00 00 00	 mov	 eax, $LN29@RegisterBo
  003a9	c3		 ret	 0
__catch$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z$9:

; 2448 : 			try { SetDriverServiceStartType (SERVICE_SYSTEM_START); } catch (...) { }

  003aa	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  003b1	b8 00 00 00 00	 mov	 eax, $LN31@RegisterBo
  003b6	c3		 ret	 0
$LN195@RegisterBo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ENDP ; CipherShed::BootEncryption::RegisterBootDriver
PUBLIC	??_C@_0O@ICNEBHDC@PhysicalDrive?$AA@		; `string'
PUBLIC	??_C@_0DM@PBDPDOKF@CipherShed?3?3BootEncryption?3?3GetS@ ; `string'
PUBLIC	??_C@_1O@MIGMNGND@?$AA?2?$AAn?$AAt?$AAl?$AAd?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@EONGMCPP@?$AA?2?$AAb?$AAo?$AAo?$AAt?$AAm?$AAg?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_06JLGNLLFE@?2ntldr?$AA@			; `string'
PUBLIC	??_C@_08OINNAHG@?2bootmgr?$AA@			; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
EXTRN	?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:PROC ; ToUpperCase
EXTRN	__waccess:PROC
EXTRN	__access:PROC
;	COMDAT ??_C@_0O@ICNEBHDC@PhysicalDrive?$AA@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0O@ICNEBHDC@PhysicalDrive?$AA@ DB 'PhysicalDrive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@PBDPDOKF@CipherShed?3?3BootEncryption?3?3GetS@
CONST	SEGMENT
??_C@_0DM@PBDPDOKF@CipherShed?3?3BootEncryption?3?3GetS@ DB 'CipherShed::'
	DB	'BootEncryption::GetSystemDriveConfiguration:926', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@MIGMNGND@?$AA?2?$AAn?$AAt?$AAl?$AAd?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1O@MIGMNGND@?$AA?2?$AAn?$AAt?$AAl?$AAd?$AAr?$AA?$AA@ DB '\', 00H, 'n'
	DB	00H, 't', 00H, 'l', 00H, 'd', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@EONGMCPP@?$AA?2?$AAb?$AAo?$AAo?$AAt?$AAm?$AAg?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@EONGMCPP@?$AA?2?$AAb?$AAo?$AAo?$AAt?$AAm?$AAg?$AAr?$AA?$AA@ DB '\'
	DB	00H, 'b', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'm', 00H, 'g', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLGNLLFE@?2ntldr?$AA@
CONST	SEGMENT
??_C@_06JLGNLLFE@?2ntldr?$AA@ DB '\ntldr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OINNAHG@?2bootmgr?$AA@
CONST	SEGMENT
??_C@_08OINNAHG@?2bootmgr?$AA@ DB '\bootmgr', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$7
	DD	04H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$9
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$16
	DD	08H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$17
	DD	09H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$19
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$20
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$21
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$23
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$13
	DD	010H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$14
	DD	010H
	DD	FLAT:__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$15
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ
_TEXT	SEGMENT
$T205735 = -904						; size = 4
$T205375 = -900						; size = 4
$T202801 = -893						; size = 1
$T202795 = -893						; size = 1
$T202789 = -893						; size = 1
$T202820 = -892						; size = 4
_windowsFound$149182 = -886				; size = 1
_activePartitionFound$149183 = -885			; size = 1
$T207774 = -884						; size = 8
_driveNumber$149178 = -884				; size = 4
$T207775 = -876						; size = 8
$T206234 = -876						; size = 8
$T202818 = -876						; size = 8
_this$GSCopy$ = -868					; size = 4
$T207966 = -864						; size = 1
___$ReturnUdt$GSCopy$ = -864				; size = 4
_$S5$149227 = -860					; size = 52
$T202811 = -860						; size = 28
$T202808 = -860						; size = 28
$T202804 = -860						; size = 28
$T202796 = -860						; size = 28
$T202790 = -860						; size = 28
$T202803 = -808						; size = 28
$T202797 = -808						; size = 28
$T202791 = -808						; size = 28
_partitions$149184 = -780				; size = 28
_$S4$149188 = -752					; size = 52
_kernelPath$149223 = -700				; size = 136
_ss$149220 = -564					; size = 136
_winDir$ = -428						; size = 28
_config$ = -400						; size = 384
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ PROC ; CipherShed::BootEncryption::GetSystemDriveConfiguration, COMDAT
; _this$ = ecx

; 848  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 7c 03 00
	00		 sub	 esp, 892		; 0000037cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 78 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+904], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 90 03
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+924]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b ac 24 a0 03
	00 00		 mov	 ebp, DWORD PTR ___$ReturnUdt$[esp+920]
  00042	33 db		 xor	 ebx, ebx
  00044	8b f1		 mov	 esi, ecx

; 849  : 		if (DriveConfigValid)

  00046	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx

; 918  : 				}

  0004a	89 74 24 38	 mov	 DWORD PTR _this$GSCopy$[esp+924], esi
  0004e	89 6c 24 3c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+924], ebp
  00052	38 9e 14 06 00
	00		 cmp	 BYTE PTR [esi+1556], bl
  00058	74 37		 je	 SHORT $LN24@GetSystemD
  0005a	83 c6 08	 add	 esi, 8
  0005d	56		 push	 esi
  0005e	8b cd		 mov	 ecx, ebp
  00060	e8 00 00 00 00	 call	 ??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
  00065	8b c5		 mov	 eax, ebp
$LN25@GetSystemD:

; 927  : 	}

  00067	8b 8c 24 90 03
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+924]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
  00079	5b		 pop	 ebx
  0007a	8b 8c 24 78 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+904]
  00081	33 cc		 xor	 ecx, esp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	81 c4 88 03 00
	00		 add	 esp, 904		; 00000388H
  0008e	c2 04 00	 ret	 4
$LN24@GetSystemD:

; 850  : 			return DriveConfig;
; 851  : 
; 852  : 		SystemDriveConfiguration config;

  00091	8d 8c 24 0c 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+924]
  00098	e8 00 00 00 00	 call	 ??0SystemDriveConfiguration@CipherShed@@QAE@XZ

; 853  : 
; 854  : 		string winDir = GetWindowsDirectory();

  0009d	8d 84 24 f0 01
	00 00		 lea	 eax, DWORD PTR _winDir$[esp+924]
  000a4	50		 push	 eax
  000a5	8b ce		 mov	 ecx, esi
  000a7	c7 84 24 9c 03
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+936], 1
  000b2	e8 00 00 00 00	 call	 ?GetWindowsDirectoryA@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetWindowsDirectoryA
  000b7	c6 84 24 98 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+932], 2

; 855  : 
; 856  : 		// Scan all drives
; 857  : 		for (int driveNumber = 0; driveNumber < 32; ++driveNumber)

  000bf	89 5c 24 28	 mov	 DWORD PTR _driveNumber$149178[esp+924], ebx
  000c3	eb 04		 jmp	 SHORT $LN1182@GetSystemD
$LL1165@GetSystemD:
  000c5	8b 74 24 38	 mov	 esi, DWORD PTR _this$GSCopy$[esp+924]
$LN1182@GetSystemD:

; 858  : 		{
; 859  : 			bool windowsFound = false;
; 860  : 			bool activePartitionFound = false;
; 861  : 			config.ExtraBootPartitionPresent = false;
; 862  : 			config.SystemLoaderPresent = false;
; 863  : 
; 864  : 			PartitionList partitions = GetDrivePartitions (driveNumber);

  000c9	8b 4c 24 28	 mov	 ecx, DWORD PTR _driveNumber$149178[esp+924]
  000cd	51		 push	 ecx
  000ce	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _partitions$149184[esp+928]
  000d5	52		 push	 edx
  000d6	8b ce		 mov	 ecx, esi
  000d8	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  000dd	c6 44 24 2e 00	 mov	 BYTE PTR _windowsFound$149182[esp+932], 0
  000e2	c6 44 24 2f 00	 mov	 BYTE PTR _activePartitionFound$149183[esp+932], 0
  000e7	c6 84 24 d4 02
	00 00 00	 mov	 BYTE PTR _config$[esp+1124], 0
  000ef	c6 84 24 8c 03
	00 00 00	 mov	 BYTE PTR _config$[esp+1308], 0
  000f7	e8 00 00 00 00	 call	 ?GetDrivePartitions@BootEncryption@CipherShed@@IAE?AV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@H@Z ; CipherShed::BootEncryption::GetDrivePartitions

; 865  : 			foreach (const Partition &part, partitions)

  000fc	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _partitions$149184[esp+924]
  00103	50		 push	 eax
  00104	8d 8c 24 b0 00
	00 00		 lea	 ecx, DWORD PTR _$S4$149188[esp+928]
  0010b	51		 push	 ecx
  0010c	c6 84 24 a0 03
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+940], 3
  00114	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00119	83 c4 08	 add	 esp, 8
  0011c	8b 94 24 ac 00
	00 00		 mov	 edx, DWORD PTR _$S4$149188[esp+924]
  00123	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00126	8d 8c 24 ac 00
	00 00		 lea	 ecx, DWORD PTR _$S4$149188[esp+924]
  0012d	c6 84 24 98 03
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+932], 4
  00135	ff d0		 call	 eax
  00137	84 c0		 test	 al, al
  00139	0f 84 30 04 00
	00		 je	 $LN18@GetSystemD
  0013f	90		 npad	 1
$LL20@GetSystemD:
  00140	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+968]
  00147	85 c0		 test	 eax, eax
  00149	75 10		 jne	 SHORT $LN1157@GetSystemD
  0014b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00150	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+968]
  00157	85 c0		 test	 eax, eax
  00159	74 04		 je	 SHORT $LN94@GetSystemD
$LN1157@GetSystemD:
  0015b	8b 00		 mov	 eax, DWORD PTR [eax]
  0015d	eb 02		 jmp	 SHORT $LN95@GetSystemD
$LN94@GetSystemD:
  0015f	33 c0		 xor	 eax, eax
$LN95@GetSystemD:
  00161	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR _$S4$149188[esp+972]
  00168	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0016b	75 05		 jne	 SHORT $LN80@GetSystemD
  0016d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@GetSystemD:
  00172	8b ac 24 dc 00
	00 00		 mov	 ebp, DWORD PTR _$S4$149188[esp+972]
  00179	83 c5 08	 add	 ebp, 8
  0017c	80 bc 24 b1 00
	00 00 00	 cmp	 BYTE PTR _$S4$149188[esp+929], 0
  00184	0f 94 c0	 sete	 al
  00187	88 84 24 b1 00
	00 00		 mov	 BYTE PTR _$S4$149188[esp+929], al
  0018e	84 c0		 test	 al, al
  00190	0f 84 ab 03 00
	00		 je	 $LN19@GetSystemD
$LL100@GetSystemD:

; 866  : 			{
; 867  : 				if (!part.MountPoint.empty()
; 868  : 					&& (_access ((part.MountPoint + "\\bootmgr").c_str(), 0) == 0 || _access ((part.MountPoint + "\\ntldr").c_str(), 0) == 0))

  00196	83 7d 54 00	 cmp	 DWORD PTR [ebp+84], 0
  0019a	0f 84 7e 00 00
	00		 je	 $LN30@GetSystemD
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_08OINNAHG@?2bootmgr?$AA@
  001a5	8d 75 40	 lea	 esi, DWORD PTR [ebp+64]
  001a8	8d 54 24 44	 lea	 edx, DWORD PTR $T202790[esp+928]
  001ac	56		 push	 esi
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	83 cb 02	 or	 ebx, 2
  001b9	c6 84 24 98 03
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+932], 5
  001c1	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  001c5	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  001c8	72 05		 jb	 SHORT $LN110@GetSystemD
  001ca	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001cd	eb 03		 jmp	 SHORT $LN111@GetSystemD
$LN110@GetSystemD:
  001cf	83 c0 04	 add	 eax, 4
$LN111@GetSystemD:
  001d2	6a 00		 push	 0
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 __access
  001da	83 c4 08	 add	 esp, 8
  001dd	85 c0		 test	 eax, eax
  001df	74 36		 je	 SHORT $LN29@GetSystemD
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_06JLGNLLFE@?2ntldr?$AA@
  001e6	8d 44 24 78	 lea	 eax, DWORD PTR $T202791[esp+928]
  001ea	56		 push	 esi
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001f1	83 cb 04	 or	 ebx, 4
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f7	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  001fb	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  001fe	72 05		 jb	 SHORT $LN116@GetSystemD
  00200	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00203	eb 03		 jmp	 SHORT $LN117@GetSystemD
$LN116@GetSystemD:
  00205	83 c0 04	 add	 eax, 4
$LN117@GetSystemD:
  00208	6a 00		 push	 0
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 __access
  00210	83 c4 08	 add	 esp, 8
  00213	85 c0		 test	 eax, eax
  00215	75 07		 jne	 SHORT $LN30@GetSystemD
$LN29@GetSystemD:
  00217	c6 44 24 1f 01	 mov	 BYTE PTR $T202789[esp+924], 1
  0021c	eb 05		 jmp	 SHORT $LN31@GetSystemD
$LN30@GetSystemD:
  0021e	c6 44 24 1f 00	 mov	 BYTE PTR $T202789[esp+924], 0
$LN31@GetSystemD:
  00223	f6 c3 04	 test	 bl, 4
  00226	74 38		 je	 SHORT $LN142@GetSystemD
  00228	83 e3 fb	 and	 ebx, -5			; fffffffbH
  0022b	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  0022f	39 bc 24 8c 00
	00 00		 cmp	 DWORD PTR $T202791[esp+948], edi
  00236	72 0d		 jb	 SHORT $LN134@GetSystemD
  00238	8b 4c 24 78	 mov	 ecx, DWORD PTR $T202791[esp+928]
  0023c	51		 push	 ecx
  0023d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00242	83 c4 04	 add	 esp, 4
$LN134@GetSystemD:
  00245	c7 84 24 8c 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T202791[esp+948], 15 ; 0000000fH
  00250	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T202791[esp+944], 0
  0025b	c6 44 24 78 00	 mov	 BYTE PTR $T202791[esp+928], 0
$LN142@GetSystemD:
  00260	c7 84 24 98 03
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+932], 4
  0026b	f6 c3 02	 test	 bl, 2
  0026e	74 1a		 je	 SHORT $LN160@GetSystemD
  00270	83 e3 fd	 and	 ebx, -3			; fffffffdH
  00273	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  00277	39 7c 24 58	 cmp	 DWORD PTR $T202790[esp+948], edi
  0027b	72 0d		 jb	 SHORT $LN160@GetSystemD
  0027d	8b 54 24 44	 mov	 edx, DWORD PTR $T202790[esp+928]
  00281	52		 push	 edx
  00282	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00287	83 c4 04	 add	 esp, 4
$LN160@GetSystemD:
  0028a	80 7c 24 1f 00	 cmp	 BYTE PTR $T202789[esp+924], 0

; 869  : 				{
; 870  : 					config.SystemLoaderPresent = true;
; 871  : 				}
; 872  : 				else if (!part.VolumeNameId.empty()

  0028f	0f 85 00 01 00
	00		 jne	 $LN1183@GetSystemD

; 873  : 					&& (_waccess ((part.VolumeNameId + L"\\bootmgr").c_str(), 0) == 0 || _waccess ((part.VolumeNameId + L"\\ntldr").c_str(), 0) == 0))

  00295	83 7d 78 00	 cmp	 DWORD PTR [ebp+120], 0
  00299	0f 84 7f 00 00
	00		 je	 $LN33@GetSystemD
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@EONGMCPP@?$AA?2?$AAb?$AAo?$AAo?$AAt?$AAm?$AAg?$AAr?$AA?$AA@
  002a4	8d 75 64	 lea	 esi, DWORD PTR [ebp+100]
  002a7	8d 44 24 44	 lea	 eax, DWORD PTR $T202796[esp+928]
  002ab	56		 push	 esi
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b5	83 cb 08	 or	 ebx, 8
  002b8	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  002bc	c6 84 24 98 03
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+932], 6
  002c4	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  002c8	72 05		 jb	 SHORT $LN176@GetSystemD
  002ca	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002cd	eb 03		 jmp	 SHORT $LN177@GetSystemD
$LN176@GetSystemD:
  002cf	83 c0 04	 add	 eax, 4
$LN177@GetSystemD:
  002d2	6a 00		 push	 0
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 __waccess
  002da	83 c4 08	 add	 esp, 8
  002dd	85 c0		 test	 eax, eax
  002df	74 36		 je	 SHORT $LN32@GetSystemD
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_1O@MIGMNGND@?$AA?2?$AAn?$AAt?$AAl?$AAd?$AAr?$AA?$AA@
  002e6	8d 4c 24 78	 lea	 ecx, DWORD PTR $T202797[esp+928]
  002ea	56		 push	 esi
  002eb	51		 push	 ecx
  002ec	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002f1	0b df		 or	 ebx, edi
  002f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f6	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  002fa	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  002fe	72 05		 jb	 SHORT $LN182@GetSystemD
  00300	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00303	eb 03		 jmp	 SHORT $LN183@GetSystemD
$LN182@GetSystemD:
  00305	83 c0 04	 add	 eax, 4
$LN183@GetSystemD:
  00308	6a 00		 push	 0
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 __waccess
  00310	83 c4 08	 add	 esp, 8
  00313	85 c0		 test	 eax, eax
  00315	75 07		 jne	 SHORT $LN33@GetSystemD
$LN32@GetSystemD:
  00317	c6 44 24 1f 01	 mov	 BYTE PTR $T202795[esp+924], 1
  0031c	eb 05		 jmp	 SHORT $LN34@GetSystemD
$LN33@GetSystemD:
  0031e	c6 44 24 1f 00	 mov	 BYTE PTR $T202795[esp+924], 0
$LN34@GetSystemD:
  00323	f6 c3 10	 test	 bl, 16			; 00000010H
  00326	74 3b		 je	 SHORT $LN210@GetSystemD
  00328	83 e3 ef	 and	 ebx, -17		; ffffffefH
  0032b	83 bc 24 8c 00
	00 00 08	 cmp	 DWORD PTR $T202797[esp+948], 8
  00333	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  00337	72 0d		 jb	 SHORT $LN202@GetSystemD
  00339	8b 54 24 78	 mov	 edx, DWORD PTR $T202797[esp+928]
  0033d	52		 push	 edx
  0033e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00343	83 c4 04	 add	 esp, 4
$LN202@GetSystemD:
  00346	33 c0		 xor	 eax, eax
  00348	c7 84 24 8c 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T202797[esp+948], 7
  00353	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T202797[esp+944], 0
  0035e	66 89 44 24 78	 mov	 WORD PTR $T202797[esp+928], ax
$LN210@GetSystemD:
  00363	c7 84 24 98 03
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+932], 4
  0036e	f6 c3 08	 test	 bl, 8
  00371	74 1b		 je	 SHORT $LN230@GetSystemD
  00373	83 e3 f7	 and	 ebx, -9			; fffffff7H
  00376	83 7c 24 58 08	 cmp	 DWORD PTR $T202796[esp+948], 8
  0037b	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  0037f	72 0d		 jb	 SHORT $LN230@GetSystemD
  00381	8b 4c 24 44	 mov	 ecx, DWORD PTR $T202796[esp+928]
  00385	51		 push	 ecx
  00386	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0038b	83 c4 04	 add	 esp, 4
$LN230@GetSystemD:
  0038e	80 7c 24 1f 00	 cmp	 BYTE PTR $T202795[esp+924], 0
  00393	74 08		 je	 SHORT $LN12@GetSystemD
$LN1183@GetSystemD:

; 874  : 				{
; 875  : 					config.SystemLoaderPresent = true;

  00395	c6 84 24 84 03
	00 00 01	 mov	 BYTE PTR _config$[esp+1300], 1
$LN12@GetSystemD:

; 876  : 				}
; 877  : 
; 878  : 				if (!windowsFound && !part.MountPoint.empty() && ToUpperCase (winDir).find (ToUpperCase (part.MountPoint)) == 0)

  0039d	80 7c 24 26 00	 cmp	 BYTE PTR _windowsFound$149182[esp+924], 0
  003a2	75 68		 jne	 SHORT $LN35@GetSystemD
  003a4	83 7d 54 00	 cmp	 DWORD PTR [ebp+84], 0
  003a8	74 62		 je	 SHORT $LN35@GetSystemD
  003aa	8d 55 40	 lea	 edx, DWORD PTR [ebp+64]
  003ad	52		 push	 edx
  003ae	8d 44 24 44	 lea	 eax, DWORD PTR $T202804[esp+928]
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; ToUpperCase
  003b8	8b f0		 mov	 esi, eax
  003ba	8d 8c 24 f8 01
	00 00		 lea	 ecx, DWORD PTR _winDir$[esp+932]
  003c1	51		 push	 ecx
  003c2	8d 94 24 80 00
	00 00		 lea	 edx, DWORD PTR $T202803[esp+936]
  003c9	83 cb 20	 or	 ebx, 32			; 00000020H
  003cc	52		 push	 edx
  003cd	c6 84 24 a8 03
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+948], 7
  003d5	89 5c 24 30	 mov	 DWORD PTR $T202820[esp+940], ebx
  003d9	e8 00 00 00 00	 call	 ?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; ToUpperCase
  003de	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  003e1	83 cb 40	 or	 ebx, 64			; 00000040H
  003e4	83 c4 10	 add	 esp, 16			; 00000010H
  003e7	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  003eb	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  003ee	72 05		 jb	 SHORT $LN248@GetSystemD
  003f0	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  003f3	eb 03		 jmp	 SHORT $LN249@GetSystemD
$LN248@GetSystemD:
  003f5	83 c6 04	 add	 esi, 4
$LN249@GetSystemD:
  003f8	51		 push	 ecx
  003f9	6a 00		 push	 0
  003fb	56		 push	 esi
  003fc	8b c8		 mov	 ecx, eax
  003fe	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00403	c6 44 24 1f 01	 mov	 BYTE PTR $T202801[esp+924], 1
  00408	85 c0		 test	 eax, eax
  0040a	74 05		 je	 SHORT $LN36@GetSystemD
$LN35@GetSystemD:
  0040c	c6 44 24 1f 00	 mov	 BYTE PTR $T202801[esp+924], 0
$LN36@GetSystemD:
  00411	f6 c3 40	 test	 bl, 64			; 00000040H
  00414	74 38		 je	 SHORT $LN274@GetSystemD
  00416	83 e3 bf	 and	 ebx, -65		; ffffffbfH
  00419	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  0041d	39 bc 24 8c 00
	00 00		 cmp	 DWORD PTR $T202803[esp+948], edi
  00424	72 0d		 jb	 SHORT $LN266@GetSystemD
  00426	8b 44 24 78	 mov	 eax, DWORD PTR $T202803[esp+928]
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00430	83 c4 04	 add	 esp, 4
$LN266@GetSystemD:
  00433	c7 84 24 8c 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T202803[esp+948], 15 ; 0000000fH
  0043e	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T202803[esp+944], 0
  00449	c6 44 24 78 00	 mov	 BYTE PTR $T202803[esp+928], 0
$LN274@GetSystemD:
  0044e	c7 84 24 98 03
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+932], 4
  00459	f6 c3 20	 test	 bl, 32			; 00000020H
  0045c	74 1a		 je	 SHORT $LN292@GetSystemD
  0045e	83 e3 df	 and	 ebx, -33		; ffffffdfH
  00461	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  00465	39 7c 24 58	 cmp	 DWORD PTR $T202804[esp+948], edi
  00469	72 0d		 jb	 SHORT $LN292@GetSystemD
  0046b	8b 4c 24 44	 mov	 ecx, DWORD PTR $T202804[esp+928]
  0046f	51		 push	 ecx
  00470	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00475	83 c4 04	 add	 esp, 4
$LN292@GetSystemD:
  00478	80 7c 24 1f 00	 cmp	 BYTE PTR $T202801[esp+924], 0
  0047d	74 68		 je	 SHORT $LN11@GetSystemD

; 879  : 				{
; 880  : 					config.SystemPartition = part;

  0047f	6a ff		 push	 -1
  00481	6a 00		 push	 0
  00483	55		 push	 ebp
  00484	8d 8c 24 08 03
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1176]
  0048b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00490	6a ff		 push	 -1
  00492	8d 75 20	 lea	 esi, DWORD PTR [ebp+32]
  00495	b9 08 00 00 00	 mov	 ecx, 8
  0049a	8d bc 24 20 03
	00 00		 lea	 edi, DWORD PTR _config$[esp+1200]
  004a1	6a 00		 push	 0
  004a3	8d 55 40	 lea	 edx, DWORD PTR [ebp+64]
  004a6	f3 a5		 rep movsd
  004a8	52		 push	 edx
  004a9	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1240]
  004b0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  004b5	8b 45 5c	 mov	 eax, DWORD PTR [ebp+92]
  004b8	6a ff		 push	 -1
  004ba	89 84 24 5c 03
	00 00		 mov	 DWORD PTR _config$[esp+1260], eax
  004c1	8b 4d 60	 mov	 ecx, DWORD PTR [ebp+96]
  004c4	6a 00		 push	 0
  004c6	8d 55 64	 lea	 edx, DWORD PTR [ebp+100]
  004c9	89 8c 24 64 03
	00 00		 mov	 DWORD PTR _config$[esp+1268], ecx
  004d0	52		 push	 edx
  004d1	8d 8c 24 6c 03
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1276]
  004d8	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 881  : 					windowsFound = true;

  004dd	c6 44 24 26 01	 mov	 BYTE PTR _windowsFound$149182[esp+924], 1
  004e2	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
$LN11@GetSystemD:

; 882  : 				}
; 883  : 
; 884  : 				if (!activePartitionFound && part.Info.BootIndicator)

  004e7	80 7c 24 27 00	 cmp	 BYTE PTR _activePartitionFound$149183[esp+924], 0
  004ec	75 31		 jne	 SHORT $LN16@GetSystemD
  004ee	80 7d 39 00	 cmp	 BYTE PTR [ebp+57], 0
  004f2	74 2b		 je	 SHORT $LN16@GetSystemD

; 885  : 				{
; 886  : 					activePartitionFound = true;
; 887  : 
; 888  : 					if (part.Info.PartitionLength.QuadPart > 0 && part.Info.PartitionLength.QuadPart <= TC_MAX_EXTRA_BOOT_PARTITION_SIZE)

  004f4	8b 45 2c	 mov	 eax, DWORD PTR [ebp+44]
  004f7	8b 4d 28	 mov	 ecx, DWORD PTR [ebp+40]
  004fa	c6 44 24 27 01	 mov	 BYTE PTR _activePartitionFound$149183[esp+924], 1
  004ff	85 c0		 test	 eax, eax
  00501	7c 1c		 jl	 SHORT $LN16@GetSystemD
  00503	7f 04		 jg	 SHORT $LN1159@GetSystemD
  00505	85 c9		 test	 ecx, ecx
  00507	76 16		 jbe	 SHORT $LN16@GetSystemD
$LN1159@GetSystemD:
  00509	85 c0		 test	 eax, eax
  0050b	7f 12		 jg	 SHORT $LN16@GetSystemD
  0050d	7c 08		 jl	 SHORT $LN1160@GetSystemD
  0050f	81 f9 00 00 00
	20		 cmp	 ecx, 536870912		; 20000000H
  00515	77 08		 ja	 SHORT $LN16@GetSystemD
$LN1160@GetSystemD:

; 889  : 						config.ExtraBootPartitionPresent = true;

  00517	c6 84 24 cc 02
	00 00 01	 mov	 BYTE PTR _config$[esp+1116], 1
$LN16@GetSystemD:

; 865  : 			foreach (const Partition &part, partitions)

  0051f	80 bc 24 b1 00
	00 00 00	 cmp	 BYTE PTR _$S4$149188[esp+929], 0
  00527	c6 84 24 b0 00
	00 00 01	 mov	 BYTE PTR _$S4$149188[esp+928], 1
  0052f	0f 94 c0	 sete	 al
  00532	88 84 24 b1 00
	00 00		 mov	 BYTE PTR _$S4$149188[esp+929], al
  00539	84 c0		 test	 al, al
  0053b	0f 85 55 fc ff
	ff		 jne	 $LL100@GetSystemD
$LN19@GetSystemD:
  00541	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+924]
  00548	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0054b	8d 8c 24 ac 00
	00 00		 lea	 ecx, DWORD PTR _$S4$149188[esp+924]
  00552	ff d2		 call	 edx
  00554	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+924]
  0055b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0055e	8d 8c 24 ac 00
	00 00		 lea	 ecx, DWORD PTR _$S4$149188[esp+924]
  00565	ff d2		 call	 edx
  00567	84 c0		 test	 al, al
  00569	0f 85 d1 fb ff
	ff		 jne	 $LL20@GetSystemD
$LN18@GetSystemD:

; 890  : 				}
; 891  : 			}

  0056f	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+952]
  00576	8b 30		 mov	 esi, DWORD PTR [eax]
  00578	89 00		 mov	 DWORD PTR [eax], eax
  0057a	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+952]
  00581	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00584	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+952]
  0058b	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _$S4$149188[esp+956], 0
  00596	3b f0		 cmp	 esi, eax
  00598	0f 84 89 00 00
	00		 je	 $LN322@GetSystemD
  0059e	33 ed		 xor	 ebp, ebp
$LN324@GetSystemD:
  005a0	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  005a7	8b 3e		 mov	 edi, DWORD PTR [esi]
  005a9	72 0c		 jb	 SHORT $LN364@GetSystemD
  005ab	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005b4	83 c4 04	 add	 esp, 4
$LN364@GetSystemD:
  005b7	33 c0		 xor	 eax, eax
  005b9	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  005c3	89 ae 80 00 00
	00		 mov	 DWORD PTR [esi+128], ebp
  005c9	66 89 46 70	 mov	 WORD PTR [esi+112], ax
  005cd	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  005d1	72 0c		 jb	 SHORT $LN390@GetSystemD
  005d3	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  005d6	50		 push	 eax
  005d7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005dc	83 c4 04	 add	 esp, 4
$LN390@GetSystemD:
  005df	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH
  005e6	89 6e 5c	 mov	 DWORD PTR [esi+92], ebp
  005e9	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  005ed	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  005f1	72 0c		 jb	 SHORT $LN416@GetSystemD
  005f3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  005f6	50		 push	 eax
  005f7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005fc	83 c4 04	 add	 esp, 4
$LN416@GetSystemD:
  005ff	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00606	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00609	56		 push	 esi
  0060a	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  0060e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00613	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR _$S4$149188[esp+956]
  0061a	83 c4 04	 add	 esp, 4
  0061d	8b f7		 mov	 esi, edi
  0061f	3b f8		 cmp	 edi, eax
  00621	0f 85 79 ff ff
	ff		 jne	 $LN324@GetSystemD
$LN322@GetSystemD:
  00627	50		 push	 eax
  00628	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0062d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR _$S4$149188[esp+936]
  00634	33 ff		 xor	 edi, edi
  00636	51		 push	 ecx
  00637	89 bc 24 d0 00
	00 00		 mov	 DWORD PTR _$S4$149188[esp+960], edi
  0063e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00643	83 c4 08	 add	 esp, 8

; 892  : 
; 893  : 			if (windowsFound)

  00646	80 7c 24 26 00	 cmp	 BYTE PTR _windowsFound$149182[esp+924], 0
  0064b	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _$S4$149188[esp+924], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00656	75 69		 jne	 SHORT $LN1147@GetSystemD

; 923  : 			}
; 924  : 		}

  00658	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _partitions$149184[esp+924]
  0065f	c6 84 24 98 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+932], 2
  00667	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0066c	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR _partitions$149184[esp+944]
  00673	52		 push	 edx
  00674	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00679	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR _partitions$149184[esp+928]
  00680	50		 push	 eax
  00681	89 bc 24 ac 00
	00 00		 mov	 DWORD PTR _partitions$149184[esp+952], edi
  00688	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0068d	8b 44 24 30	 mov	 eax, DWORD PTR _driveNumber$149178[esp+932]
  00691	40		 inc	 eax
  00692	83 c4 08	 add	 esp, 8
  00695	83 f8 20	 cmp	 eax, 32			; 00000020H
  00698	89 44 24 28	 mov	 DWORD PTR _driveNumber$149178[esp+924], eax
  0069c	0f 8c 23 fa ff
	ff		 jl	 $LL1165@GetSystemD

; 925  : 
; 926  : 		throw ParameterIncorrect (SRC_POS);

  006a2	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  006a7	8d 54 24 34	 lea	 edx, DWORD PTR $T202818[esp+928]
  006ab	52		 push	 edx
  006ac	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T202818[esp+932], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  006b4	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T202818[esp+936], OFFSET ??_C@_0DM@PBDPDOKF@CipherShed?3?3BootEncryption?3?3GetS@
  006bc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1147@GetSystemD:

; 894  : 			{
; 895  : 				config.DriveNumber = driveNumber;

  006c1	8b 74 24 28	 mov	 esi, DWORD PTR _driveNumber$149178[esp+924]
  006c5	89 b4 24 44 02
	00 00		 mov	 DWORD PTR _config$[esp+980], esi

; 896  : 
; 897  : 				stringstream ss;

  006cc	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ss$149220[esp+924], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  006d7	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ss$149220[esp+932], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  006e2	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ss$149220[esp+1008], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  006ed	57		 push	 edi
  006ee	8d 8c 24 78 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+940]
  006f5	51		 push	 ecx
  006f6	81 cb 80 00 00
	00		 or	 ebx, 128		; 00000080H
  006fc	8d 8c 24 70 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+932]
  00703	c6 84 24 a0 03
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+940], 8
  0070b	89 5c 24 28	 mov	 DWORD PTR $T202820[esp+932], ebx
  0070f	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00714	8b 94 24 68 01
	00 00		 mov	 edx, DWORD PTR _ss$149220[esp+924]
  0071b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0071e	8d 8c 24 74 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+936]
  00725	c7 84 24 98 03
	00 00 09 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+932], 9
  00730	c7 84 04 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ss$149220[esp+eax+924], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0073b	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00740	bd 00 00 00 00	 mov	 ebp, OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00745	89 ac 24 74 01
	00 00		 mov	 DWORD PTR _ss$149220[esp+936], ebp
  0074c	89 bc 24 b0 01
	00 00		 mov	 DWORD PTR _ss$149220[esp+996], edi
  00753	89 bc 24 b4 01
	00 00		 mov	 DWORD PTR _ss$149220[esp+1000], edi

; 898  : 				ss << "PhysicalDrive" << driveNumber;

  0075a	56		 push	 esi
  0075b	8d 8c 24 74 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+936]
  00762	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ICNEBHDC@PhysicalDrive?$AA@
  00767	51		 push	 ecx
  00768	c6 84 24 a4 03
	00 00 0b	 mov	 BYTE PTR __$EHRec$[esp+944], 11 ; 0000000bH
  00770	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00775	83 c4 08	 add	 esp, 8
  00778	8b c8		 mov	 ecx, eax
  0077a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 899  : 				config.DevicePath = ss.str();

  0077f	8d 54 24 40	 lea	 edx, DWORD PTR $T202808[esp+924]
  00783	52		 push	 edx
  00784	8d 8c 24 6c 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+928]
  0078b	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00790	6a ff		 push	 -1
  00792	57		 push	 edi
  00793	50		 push	 eax
  00794	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+964]
  0079b	c6 84 24 a4 03
	00 00 0c	 mov	 BYTE PTR __$EHRec$[esp+944], 12 ; 0000000cH
  007a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  007a8	83 7c 24 58 10	 cmp	 DWORD PTR $T202808[esp+948], 16 ; 00000010H
  007ad	72 0d		 jb	 SHORT $LN528@GetSystemD
  007af	8b 44 24 44	 mov	 eax, DWORD PTR $T202808[esp+928]
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007b9	83 c4 04	 add	 esp, 4
$LN528@GetSystemD:

; 900  : 
; 901  : 				stringstream kernelPath;

  007bc	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _kernelPath$149223[esp+924], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  007c7	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _kernelPath$149223[esp+932], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  007d2	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _kernelPath$149223[esp+1008], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  007dd	57		 push	 edi
  007de	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+940]
  007e5	51		 push	 ecx
  007e6	81 cb 00 01 00
	00		 or	 ebx, 256		; 00000100H
  007ec	8d 8c 24 e8 00
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+932]
  007f3	c6 84 24 a0 03
	00 00 0d	 mov	 BYTE PTR __$EHRec$[esp+940], 13 ; 0000000dH
  007fb	89 5c 24 28	 mov	 DWORD PTR $T202820[esp+932], ebx
  007ff	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00804	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR _kernelPath$149223[esp+924]
  0080b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0080e	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+936]
  00815	c7 84 24 98 03
	00 00 0e 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+932], 14 ; 0000000eH
  00820	c7 84 04 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _kernelPath$149223[esp+eax+924], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0082b	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00830	89 ac 24 ec 00
	00 00		 mov	 DWORD PTR _kernelPath$149223[esp+936], ebp
  00837	89 bc 24 28 01
	00 00		 mov	 DWORD PTR _kernelPath$149223[esp+996], edi
  0083e	89 bc 24 2c 01
	00 00		 mov	 DWORD PTR _kernelPath$149223[esp+1000], edi

; 902  : 				kernelPath << "\\Device\\Harddisk" << driveNumber << "\\Partition0";

  00845	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
  0084a	56		 push	 esi
  0084b	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+940]
  00852	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  00857	51		 push	 ecx
  00858	c6 84 24 a8 03
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+948], 16 ; 00000010H
  00860	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00865	83 c4 08	 add	 esp, 8
  00868	8b c8		 mov	 ecx, eax
  0086a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0086f	50		 push	 eax
  00870	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00875	83 c4 08	 add	 esp, 8

; 903  : 				config.DeviceKernelPath = kernelPath.str();

  00878	8d 54 24 40	 lea	 edx, DWORD PTR $T202811[esp+924]
  0087c	52		 push	 edx
  0087d	8d 8c 24 e4 00
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+928]
  00884	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00889	6a ff		 push	 -1
  0088b	57		 push	 edi
  0088c	50		 push	 eax
  0088d	8d 8c 24 18 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+936]
  00894	c6 84 24 a4 03
	00 00 11	 mov	 BYTE PTR __$EHRec$[esp+944], 17 ; 00000011H
  0089c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  008a1	83 7c 24 58 10	 cmp	 DWORD PTR $T202811[esp+948], 16 ; 00000010H
  008a6	c6 84 24 98 03
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+932], 16 ; 00000010H
  008ae	72 0d		 jb	 SHORT $LN617@GetSystemD
  008b0	8b 44 24 44	 mov	 eax, DWORD PTR $T202811[esp+928]
  008b4	50		 push	 eax
  008b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008ba	83 c4 04	 add	 esp, 4
$LN617@GetSystemD:

; 904  : 
; 905  : 				config.DrivePartition = partitions.front();

  008bd	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _partitions$149184[esp+924]
  008c4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR _partitions$149184[esp+944]
  008cb	8b 29		 mov	 ebp, DWORD PTR [ecx]
  008cd	3b c7		 cmp	 eax, edi
  008cf	75 07		 jne	 SHORT $LN1156@GetSystemD
  008d1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  008d6	eb 02		 jmp	 SHORT $LN668@GetSystemD
$LN1156@GetSystemD:
  008d8	8b 38		 mov	 edi, DWORD PTR [eax]
$LN668@GetSystemD:
  008da	3b 6f 14	 cmp	 ebp, DWORD PTR [edi+20]
  008dd	75 05		 jne	 SHORT $LN654@GetSystemD
  008df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN654@GetSystemD:
  008e4	6a ff		 push	 -1
  008e6	6a 00		 push	 0
  008e8	83 c5 08	 add	 ebp, 8
  008eb	55		 push	 ebp
  008ec	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1000]
  008f3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  008f8	6a ff		 push	 -1
  008fa	8d 75 20	 lea	 esi, DWORD PTR [ebp+32]
  008fd	b9 08 00 00 00	 mov	 ecx, 8
  00902	8d bc 24 70 02
	00 00		 lea	 edi, DWORD PTR _config$[esp+1024]
  00909	6a 00		 push	 0
  0090b	8d 55 40	 lea	 edx, DWORD PTR [ebp+64]
  0090e	f3 a5		 rep movsd
  00910	52		 push	 edx
  00911	8d 8c 24 98 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1064]
  00918	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0091d	8b 45 5c	 mov	 eax, DWORD PTR [ebp+92]
  00920	6a ff		 push	 -1
  00922	89 84 24 ac 02
	00 00		 mov	 DWORD PTR _config$[esp+1084], eax
  00929	8b 4d 60	 mov	 ecx, DWORD PTR [ebp+96]
  0092c	6a 00		 push	 0
  0092e	89 8c 24 b4 02
	00 00		 mov	 DWORD PTR _config$[esp+1092], ecx
  00935	83 c5 64	 add	 ebp, 100		; 00000064H
  00938	55		 push	 ebp
  00939	8d 8c 24 bc 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1100]
  00940	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 906  : 				partitions.pop_front();

  00945	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR _partitions$149184[esp+944]
  0094c	8b 02		 mov	 eax, DWORD PTR [edx]
  0094e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _partitions$149184[esp+924]
  00955	50		 push	 eax
  00956	51		 push	 ecx
  00957	8d 44 24 38	 lea	 eax, DWORD PTR $T206234[esp+932]
  0095b	50		 push	 eax
  0095c	8d 8c 24 9c 00
	00 00		 lea	 ecx, DWORD PTR _partitions$149184[esp+936]
  00963	e8 00 00 00 00	 call	 ?erase@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::erase

; 907  : 				config.Partitions = partitions;

  00968	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR _partitions$149184[esp+944]
  0096f	8b 10		 mov	 edx, DWORD PTR [eax]
  00971	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _partitions$149184[esp+924]
  00978	89 44 24 2c	 mov	 DWORD PTR $T207774[esp+928], eax
  0097c	8b 84 24 f0 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1152]
  00983	8b 30		 mov	 esi, DWORD PTR [eax]
  00985	89 00		 mov	 DWORD PTR [eax], eax
  00987	8b 84 24 f0 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1152]
  0098e	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00991	8b 84 24 f0 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1152]
  00998	89 4c 24 28	 mov	 DWORD PTR $T207774[esp+924], ecx
  0099c	89 54 24 34	 mov	 DWORD PTR $T207775[esp+928], edx
  009a0	89 4c 24 30	 mov	 DWORD PTR $T207775[esp+924], ecx
  009a4	c7 84 24 f4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR _config$[esp+1156], 0
  009af	3b f0		 cmp	 esi, eax
  009b1	0f 84 89 00 00
	00		 je	 $LN756@GetSystemD
  009b7	33 ed		 xor	 ebp, ebp
$LN758@GetSystemD:
  009b9	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  009c0	8b 3e		 mov	 edi, DWORD PTR [esi]
  009c2	72 0c		 jb	 SHORT $LN798@GetSystemD
  009c4	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  009c7	50		 push	 eax
  009c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009cd	83 c4 04	 add	 esp, 4
$LN798@GetSystemD:
  009d0	33 c0		 xor	 eax, eax
  009d2	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  009dc	89 ae 80 00 00
	00		 mov	 DWORD PTR [esi+128], ebp
  009e2	66 89 46 70	 mov	 WORD PTR [esi+112], ax
  009e6	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  009ea	72 0c		 jb	 SHORT $LN824@GetSystemD
  009ec	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  009ef	50		 push	 eax
  009f0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009f5	83 c4 04	 add	 esp, 4
$LN824@GetSystemD:
  009f8	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH
  009ff	89 6e 5c	 mov	 DWORD PTR [esi+92], ebp
  00a02	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  00a06	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00a0a	72 0c		 jb	 SHORT $LN850@GetSystemD
  00a0c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a0f	50		 push	 eax
  00a10	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a15	83 c4 04	 add	 esp, 4
$LN850@GetSystemD:
  00a18	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00a1f	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00a22	56		 push	 esi
  00a23	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00a27	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a2c	8b 84 24 f4 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1156]
  00a33	83 c4 04	 add	 esp, 4
  00a36	8b f7		 mov	 esi, edi
  00a38	3b f8		 cmp	 edi, eax
  00a3a	0f 85 79 ff ff
	ff		 jne	 $LN758@GetSystemD
$LN756@GetSystemD:
  00a40	8b 54 24 3c	 mov	 edx, DWORD PTR $T207966[esp+924]
  00a44	8b 00		 mov	 eax, DWORD PTR [eax]
  00a46	8b 8c 24 dc 02
	00 00		 mov	 ecx, DWORD PTR _config$[esp+1132]
  00a4d	52		 push	 edx
  00a4e	8b 54 24 30	 mov	 edx, DWORD PTR $T207774[esp+932]
  00a52	52		 push	 edx
  00a53	8b 54 24 30	 mov	 edx, DWORD PTR $T207774[esp+932]
  00a57	52		 push	 edx
  00a58	8b 54 24 40	 mov	 edx, DWORD PTR $T207775[esp+940]
  00a5c	52		 push	 edx
  00a5d	8b 54 24 40	 mov	 edx, DWORD PTR $T207775[esp+940]
  00a61	52		 push	 edx
  00a62	50		 push	 eax
  00a63	51		 push	 ecx
  00a64	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1160]
  00a6b	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Insert<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1> >

; 908  : 
; 909  : 				config.InitialUnallocatedSpace = 0x7fffFFFFffffFFFFull;
; 910  : 				config.TotalUnallocatedSpace = config.DrivePartition.Info.PartitionLength.QuadPart;

  00a70	8b 84 24 74 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1028]
  00a77	8b 8c 24 78 02
	00 00		 mov	 ecx, DWORD PTR _config$[esp+1032]

; 911  : 
; 912  : 				foreach (const Partition &part, config.Partitions)

  00a7e	8d 94 24 dc 02
	00 00		 lea	 edx, DWORD PTR _config$[esp+1132]
  00a85	89 84 24 7c 03
	00 00		 mov	 DWORD PTR _config$[esp+1292], eax
  00a8c	52		 push	 edx
  00a8d	8d 44 24 44	 lea	 eax, DWORD PTR _$S5$149227[esp+928]
  00a91	50		 push	 eax
  00a92	c7 84 24 dc 02
	00 00 ff ff ff
	ff		 mov	 DWORD PTR _config$[esp+1132], -1
  00a9d	c7 84 24 e0 02
	00 00 ff ff ff
	7f		 mov	 DWORD PTR _config$[esp+1136], 2147483647 ; 7fffffffH
  00aa8	89 8c 24 88 03
	00 00		 mov	 DWORD PTR _config$[esp+1304], ecx
  00aaf	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00ab4	83 c4 08	 add	 esp, 8
  00ab7	8b 54 24 40	 mov	 edx, DWORD PTR _$S5$149227[esp+924]
  00abb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00abe	8d 4c 24 40	 lea	 ecx, DWORD PTR _$S5$149227[esp+924]
  00ac2	c6 84 24 98 03
	00 00 12	 mov	 BYTE PTR __$EHRec$[esp+932], 18 ; 00000012H
  00aca	ff d0		 call	 eax
  00acc	84 c0		 test	 al, al
  00ace	0f 84 b6 00 00
	00		 je	 $LN5@GetSystemD
$LL7@GetSystemD:
  00ad4	8b 44 24 6c	 mov	 eax, DWORD PTR _$S5$149227[esp+968]
  00ad8	85 c0		 test	 eax, eax
  00ada	75 0d		 jne	 SHORT $LN1158@GetSystemD
  00adc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00ae1	8b 44 24 6c	 mov	 eax, DWORD PTR _$S5$149227[esp+968]
  00ae5	85 c0		 test	 eax, eax
  00ae7	74 04		 je	 SHORT $LN909@GetSystemD
$LN1158@GetSystemD:
  00ae9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aeb	eb 02		 jmp	 SHORT $LN910@GetSystemD
$LN909@GetSystemD:
  00aed	33 c9		 xor	 ecx, ecx
$LN910@GetSystemD:
  00aef	8b 44 24 70	 mov	 eax, DWORD PTR _$S5$149227[esp+972]
  00af3	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00af6	75 09		 jne	 SHORT $LN895@GetSystemD
  00af8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00afd	8b 44 24 70	 mov	 eax, DWORD PTR _$S5$149227[esp+972]
$LN895@GetSystemD:
  00b01	80 7c 24 45 00	 cmp	 BYTE PTR _$S5$149227[esp+929], 0
  00b06	0f 94 c1	 sete	 cl
  00b09	88 4c 24 45	 mov	 BYTE PTR _$S5$149227[esp+929], cl
  00b0d	84 c9		 test	 cl, cl
  00b0f	74 57		 je	 SHORT $LN6@GetSystemD
  00b11	8b bc 24 d8 02
	00 00		 mov	 edi, DWORD PTR _config$[esp+1128]
  00b18	8b ac 24 d4 02
	00 00		 mov	 ebp, DWORD PTR _config$[esp+1124]
  00b1f	90		 npad	 1
$LL915@GetSystemD:

; 913  : 				{
; 914  : 					if (part.Info.StartingOffset.QuadPart < config.InitialUnallocatedSpace)

  00b20	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00b23	3b d7		 cmp	 edx, edi
  00b25	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00b28	7f 18		 jg	 SHORT $LN1@GetSystemD
  00b2a	7c 04		 jl	 SHORT $LN1161@GetSystemD
  00b2c	3b f5		 cmp	 esi, ebp
  00b2e	73 12		 jae	 SHORT $LN1@GetSystemD
$LN1161@GetSystemD:

; 915  : 						config.InitialUnallocatedSpace = part.Info.StartingOffset.QuadPart;

  00b30	8b ee		 mov	 ebp, esi
  00b32	8b fa		 mov	 edi, edx
  00b34	89 ac 24 d4 02
	00 00		 mov	 DWORD PTR _config$[esp+1124], ebp
  00b3b	89 bc 24 d8 02
	00 00		 mov	 DWORD PTR _config$[esp+1128], edi
$LN1@GetSystemD:

; 916  : 
; 917  : 					config.TotalUnallocatedSpace -= part.Info.PartitionLength.QuadPart;

  00b42	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00b45	29 94 24 7c 03
	00 00		 sub	 DWORD PTR _config$[esp+1292], edx
  00b4c	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00b4f	c6 44 24 44 01	 mov	 BYTE PTR _$S5$149227[esp+928], 1
  00b54	19 94 24 80 03
	00 00		 sbb	 DWORD PTR _config$[esp+1296], edx
  00b5b	84 c9		 test	 cl, cl
  00b5d	0f 94 c1	 sete	 cl
  00b60	88 4c 24 45	 mov	 BYTE PTR _$S5$149227[esp+929], cl
  00b64	84 c9		 test	 cl, cl
  00b66	75 b8		 jne	 SHORT $LL915@GetSystemD
$LN6@GetSystemD:

; 911  : 
; 912  : 				foreach (const Partition &part, config.Partitions)

  00b68	8b 44 24 40	 mov	 eax, DWORD PTR _$S5$149227[esp+924]
  00b6c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00b6f	8d 4c 24 40	 lea	 ecx, DWORD PTR _$S5$149227[esp+924]
  00b73	ff d2		 call	 edx
  00b75	8b 44 24 40	 mov	 eax, DWORD PTR _$S5$149227[esp+924]
  00b79	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00b7c	8d 4c 24 40	 lea	 ecx, DWORD PTR _$S5$149227[esp+924]
  00b80	ff d2		 call	 edx
  00b82	84 c0		 test	 al, al
  00b84	0f 85 4a ff ff
	ff		 jne	 $LL7@GetSystemD
$LN5@GetSystemD:

; 918  : 				}

  00b8a	8b 44 24 5c	 mov	 eax, DWORD PTR _$S5$149227[esp+952]
  00b8e	8b 30		 mov	 esi, DWORD PTR [eax]
  00b90	89 00		 mov	 DWORD PTR [eax], eax
  00b92	8b 44 24 5c	 mov	 eax, DWORD PTR _$S5$149227[esp+952]
  00b96	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00b99	8b 44 24 5c	 mov	 eax, DWORD PTR _$S5$149227[esp+952]
  00b9d	33 ed		 xor	 ebp, ebp
  00b9f	c6 84 24 98 03
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+932], 16 ; 00000010H
  00ba7	89 6c 24 60	 mov	 DWORD PTR _$S5$149227[esp+956], ebp
  00bab	3b f0		 cmp	 esi, eax
  00bad	0f 84 80 00 00
	00		 je	 $LN925@GetSystemD
$LN927@GetSystemD:
  00bb3	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  00bba	8b 3e		 mov	 edi, DWORD PTR [esi]
  00bbc	72 0c		 jb	 SHORT $LN967@GetSystemD
  00bbe	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00bc1	50		 push	 eax
  00bc2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00bc7	83 c4 04	 add	 esp, 4
$LN967@GetSystemD:
  00bca	33 c0		 xor	 eax, eax
  00bcc	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  00bd6	89 ae 80 00 00
	00		 mov	 DWORD PTR [esi+128], ebp
  00bdc	66 89 46 70	 mov	 WORD PTR [esi+112], ax
  00be0	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  00be4	72 0c		 jb	 SHORT $LN993@GetSystemD
  00be6	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00bef	83 c4 04	 add	 esp, 4
$LN993@GetSystemD:
  00bf2	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH
  00bf9	89 6e 5c	 mov	 DWORD PTR [esi+92], ebp
  00bfc	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  00c00	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00c04	72 0c		 jb	 SHORT $LN1019@GetSystemD
  00c06	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00c09	50		 push	 eax
  00c0a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c0f	83 c4 04	 add	 esp, 4
$LN1019@GetSystemD:
  00c12	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00c19	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00c1c	56		 push	 esi
  00c1d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00c21	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c26	8b 44 24 60	 mov	 eax, DWORD PTR _$S5$149227[esp+956]
  00c2a	83 c4 04	 add	 esp, 4
  00c2d	8b f7		 mov	 esi, edi
  00c2f	3b f8		 cmp	 edi, eax
  00c31	75 80		 jne	 SHORT $LN927@GetSystemD
$LN925@GetSystemD:
  00c33	50		 push	 eax
  00c34	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c39	8b 4c 24 4c	 mov	 ecx, DWORD PTR _$S5$149227[esp+936]
  00c3d	51		 push	 ecx
  00c3e	89 6c 24 64	 mov	 DWORD PTR _$S5$149227[esp+960], ebp
  00c42	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 919  : 
; 920  : 				DriveConfig = config;

  00c47	8b 7c 24 40	 mov	 edi, DWORD PTR _this$GSCopy$[esp+932]
  00c4b	83 c4 08	 add	 esp, 8
  00c4e	8d 94 24 0c 02
	00 00		 lea	 edx, DWORD PTR _config$[esp+924]
  00c55	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00c58	52		 push	 edx
  00c59	8b ce		 mov	 ecx, esi
  00c5b	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR _$S5$149227[esp+928], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00c63	e8 00 00 00 00	 call	 ??4SystemDriveConfiguration@CipherShed@@QAEAAU01@ABU01@@Z

; 921  : 				DriveConfigValid = true;

  00c68	c6 87 14 06 00
	00 01		 mov	 BYTE PTR [edi+1556], 1

; 922  : 				return DriveConfig;

  00c6f	8b 7c 24 3c	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+924]
  00c73	56		 push	 esi
  00c74	8b cf		 mov	 ecx, edi
  00c76	e8 00 00 00 00	 call	 ??0SystemDriveConfiguration@CipherShed@@QAE@ABU01@@Z
  00c7b	83 cb 01	 or	 ebx, 1
  00c7e	8d 8c 24 34 01
	00 00		 lea	 ecx, DWORD PTR _kernelPath$149223[esp+1008]
  00c85	89 5c 24 20	 mov	 DWORD PTR $T202820[esp+924], ebx
  00c89	c6 84 24 98 03
	00 00 0b	 mov	 BYTE PTR __$EHRec$[esp+932], 11 ; 0000000bH
  00c91	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00c96	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _kernelPath$149223[esp+1008]
  00c9d	be 00 00 00 00	 mov	 esi, OFFSET ??_7ios_base@std@@6B@
  00ca2	50		 push	 eax
  00ca3	89 b4 24 38 01
	00 00		 mov	 DWORD PTR _kernelPath$149223[esp+1012], esi
  00caa	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00caf	83 c4 04	 add	 esp, 4
  00cb2	8d 8c 24 bc 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+1008]
  00cb9	c6 84 24 98 03
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+932], 3
  00cc1	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00cc6	8d 8c 24 bc 01
	00 00		 lea	 ecx, DWORD PTR _ss$149220[esp+1008]
  00ccd	51		 push	 ecx
  00cce	89 b4 24 c0 01
	00 00		 mov	 DWORD PTR _ss$149220[esp+1012], esi
  00cd5	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00cda	83 c4 04	 add	 esp, 4
  00cdd	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _partitions$149184[esp+924]
  00ce4	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00ce9	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR _partitions$149184[esp+944]
  00cf0	52		 push	 edx
  00cf1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00cf6	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR _partitions$149184[esp+928]
  00cfd	50		 push	 eax
  00cfe	89 ac 24 ac 00
	00 00		 mov	 DWORD PTR _partitions$149184[esp+952], ebp
  00d05	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00d0a	83 c4 08	 add	 esp, 8
  00d0d	83 bc 24 08 02
	00 00 10	 cmp	 DWORD PTR _winDir$[esp+948], 16 ; 00000010H
  00d15	72 10		 jb	 SHORT $LN1103@GetSystemD
  00d17	8b 8c 24 f4 01
	00 00		 mov	 ecx, DWORD PTR _winDir$[esp+928]
  00d1e	51		 push	 ecx
  00d1f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00d24	83 c4 04	 add	 esp, 4
$LN1103@GetSystemD:
  00d27	8d 8c 24 0c 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+924]
  00d2e	c7 84 24 08 02
	00 00 0f 00 00
	00		 mov	 DWORD PTR _winDir$[esp+948], 15 ; 0000000fH
  00d39	89 ac 24 04 02
	00 00		 mov	 DWORD PTR _winDir$[esp+944], ebp
  00d40	c6 84 24 f4 01
	00 00 00	 mov	 BYTE PTR _winDir$[esp+928], 0
  00d48	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00d4d	8b c7		 mov	 eax, edi
  00d4f	e9 13 f3 ff ff	 jmp	 $LN25@GetSystemD
$LN1181@GetSystemD:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$0:
  00000	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN44@GetSystemD
  0000f	83 a5 84 fc ff
	ff fe		 and	 DWORD PTR $T202820[ebp], -2 ; fffffffeH
  00016	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
$LN44@GetSystemD:
  00021	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$1:
  00022	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _config$[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$2:
  0002d	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _winDir$[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$3:
  00038	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _partitions$149184[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$4:
  00043	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR _$S4$149188[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$5:
  0004e	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  00054	83 e0 02	 and	 eax, 2
  00057	0f 84 12 00 00
	00		 je	 $LN50@GetSystemD
  0005d	83 a5 84 fc ff
	ff fd		 and	 DWORD PTR $T202820[ebp], -3 ; fffffffdH
  00064	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T202790[ebp]
  0006a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN50@GetSystemD:
  0006f	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$7:
  00070	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  00076	83 e0 08	 and	 eax, 8
  00079	0f 84 12 00 00
	00		 je	 $LN56@GetSystemD
  0007f	83 a5 84 fc ff
	ff f7		 and	 DWORD PTR $T202820[ebp], -9 ; fffffff7H
  00086	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T202796[ebp]
  0008c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN56@GetSystemD:
  00091	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$9:
  00092	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  00098	83 e0 20	 and	 eax, 32			; 00000020H
  0009b	0f 84 12 00 00
	00		 je	 $LN62@GetSystemD
  000a1	83 a5 84 fc ff
	ff df		 and	 DWORD PTR $T202820[ebp], -33 ; ffffffdfH
  000a8	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T202804[ebp]
  000ae	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN62@GetSystemD:
  000b3	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$16:
  000b4	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  000ba	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000bf	0f 84 15 00 00
	00		 je	 $LN452@GetSystemD
  000c5	81 a5 84 fc ff
	ff 7f ff ff ff	 and	 DWORD PTR $T202820[ebp], -129 ; ffffff7fH
  000cf	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _ss$149220[ebp+84]
  000d5	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN452@GetSystemD:
  000da	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$17:
  000db	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _ss$149220[ebp+12]
  000e1	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$19:
  000e6	8b 8d 7c fc ff
	ff		 mov	 ecx, DWORD PTR $T205375[ebp]
  000ec	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$11:
  000f1	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _ss$149220[ebp]
  000f7	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$12:
  000fc	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T202808[ebp]
  00102	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$20:
  00107	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR $T202820[ebp]
  0010d	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00112	0f 84 15 00 00
	00		 je	 $LN542@GetSystemD
  00118	81 a5 84 fc ff
	ff ff fe ff ff	 and	 DWORD PTR $T202820[ebp], -257 ; fffffeffH
  00122	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR _kernelPath$149223[ebp+84]
  00128	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN542@GetSystemD:
  0012d	c3		 ret	 0
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$21:
  0012e	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR _kernelPath$149223[ebp+12]
  00134	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$23:
  00139	8b 8d 78 fc ff
	ff		 mov	 ecx, DWORD PTR $T205735[ebp]
  0013f	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$13:
  00144	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR _kernelPath$149223[ebp]
  0014a	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$14:
  0014f	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T202811[ebp]
  00155	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ$15:
  0015a	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _$S5$149227[ebp]
  00160	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__ehhandler$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ:
  00165	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00169	8d 82 74 fc ff
	ff		 lea	 eax, DWORD PTR [edx-908]
  0016f	8b 8a 70 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-912]
  00175	33 c8		 xor	 ecx, eax
  00177	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017c	83 c0 10	 add	 eax, 16			; 00000010H
  0017f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00182	33 c8		 xor	 ecx, eax
  00184	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00189	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ
  0018e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ENDP ; CipherShed::BootEncryption::GetSystemDriveConfiguration
PUBLIC	__$ArrayPad$
PUBLIC	?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
; Function compile flags: /Ogtpy
;	COMDAT ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
_config$ = -388						; size = 384
__$ArrayPad$ = -4					; size = 4
?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive, COMDAT
; _this$ = ecx

; 931  : 	{

  00000	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+388], eax
  00014	53		 push	 ebx

; 932  : 		SystemDriveConfiguration config = GetSystemDriveConfiguration();

  00015	8d 44 24 04	 lea	 eax, DWORD PTR _config$[esp+392]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration

; 933  : 
; 934  : 		if (IsOSAtLeast (WIN_7)
; 935  : 			&& config.Partitions.size() == 2
; 936  : 			&& config.ExtraBootPartitionPresent
; 937  : 			&& config.DrivePartition.Info.PartitionLength.QuadPart - config.SystemPartition.Info.PartitionLength.QuadPart < 164 * BYTES_PER_MB)

  0001f	6a 0d		 push	 13			; 0000000dH
  00021	e8 00 00 00 00	 call	 _IsOSAtLeast
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR _config$[esp+624]
  00032	74 54		 je	 SHORT $LN1@SystemPart
  00034	83 f8 02	 cmp	 eax, 2
  00037	75 4f		 jne	 SHORT $LN1@SystemPart
  00039	80 bc 24 c4 00
	00 00 00	 cmp	 BYTE PTR _config$[esp+584], 0
  00041	74 72		 je	 SHORT $LN4@SystemPart
  00043	8b 4c 24 6c	 mov	 ecx, DWORD PTR _config$[esp+496]
  00047	2b 8c 24 1c 01
	00 00		 sub	 ecx, DWORD PTR _config$[esp+672]
  0004e	8b 44 24 70	 mov	 eax, DWORD PTR _config$[esp+500]
  00052	1b 84 24 20 01
	00 00		 sbb	 eax, DWORD PTR _config$[esp+676]
  00059	85 c0		 test	 eax, eax
  0005b	7f 58		 jg	 SHORT $LN4@SystemPart
  0005d	7c 08		 jl	 SHORT $LN11@SystemPart
  0005f	81 f9 00 00 40
	0a		 cmp	 ecx, 171966464		; 0a400000H
  00065	73 4e		 jae	 SHORT $LN4@SystemPart
$LN11@SystemPart:

; 938  : 		{
; 939  : 			return true;

  00067	8d 4c 24 04	 lea	 ecx, DWORD PTR _config$[esp+392]
  0006b	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00070	b0 01		 mov	 al, 1
  00072	5b		 pop	 ebx

; 944  : 	}

  00073	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+388]
  0007a	33 cc		 xor	 ecx, esp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	81 c4 84 01 00
	00		 add	 esp, 388		; 00000184H
  00087	c3		 ret	 0
$LN1@SystemPart:

; 940  : 		}
; 941  : 
; 942  : 		return config.Partitions.size() == 1
; 943  : 			&& config.DrivePartition.Info.PartitionLength.QuadPart - config.SystemPartition.Info.PartitionLength.QuadPart < 64 * BYTES_PER_MB;

  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 28		 jne	 SHORT $LN4@SystemPart
  0008d	8b 4c 24 6c	 mov	 ecx, DWORD PTR _config$[esp+496]
  00091	2b 8c 24 1c 01
	00 00		 sub	 ecx, DWORD PTR _config$[esp+672]
  00098	8b 44 24 70	 mov	 eax, DWORD PTR _config$[esp+500]
  0009c	1b 84 24 20 01
	00 00		 sbb	 eax, DWORD PTR _config$[esp+676]
  000a3	85 c0		 test	 eax, eax
  000a5	7f 0e		 jg	 SHORT $LN4@SystemPart
  000a7	7c 08		 jl	 SHORT $LN12@SystemPart
  000a9	81 f9 00 00 00
	04		 cmp	 ecx, 67108864		; 04000000H
  000af	73 04		 jae	 SHORT $LN4@SystemPart
$LN12@SystemPart:
  000b1	b3 01		 mov	 bl, 1
  000b3	eb 02		 jmp	 SHORT $LN5@SystemPart
$LN4@SystemPart:
  000b5	32 db		 xor	 bl, bl
$LN5@SystemPart:
  000b7	8d 4c 24 04	 lea	 ecx, DWORD PTR _config$[esp+392]
  000bb	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 944  : 	}

  000c0	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+392]
  000c7	8a c3		 mov	 al, bl
  000c9	5b		 pop	 ebx
  000ca	33 cc		 xor	 ecx, esp
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	81 c4 84 01 00
	00		 add	 esp, 388		; 00000184H
  000d7	c3		 ret	 0
?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
_TEXT	ENDS
PUBLIC	??_C@_0DK@IJDAGOA@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_0DK@CGPBEDKG@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_0DK@FJMAAJLK@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_0DK@EKEFBFPB@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_03POBHGEJB@BIN?$AA@			; `string'
PUBLIC	??_C@_0DJ@PBJEIPGH@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
PUBLIC	??_C@_0DJ@NBOFJLJJ@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	_buffer$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z ; CipherShed::BootEncryption::CreateBootLoaderInMemory
EXTRN	_MirrorBytes16:PROC
EXTRN	_MapResource:PROC
EXTRN	__stricmp:PROC
;	COMDAT ??_C@_0DK@IJDAGOA@CipherShed?3?3BootEncryption?3?3Crea@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DK@IJDAGOA@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::B'
	DB	'ootEncryption::CreateBootLoaderInMemory:1027', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CGPBEDKG@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DK@CGPBEDKG@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateBootLoaderInMemory:1054', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FJMAAJLK@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DK@FJMAAJLK@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateBootLoaderInMemory:1061', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EKEFBFPB@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DK@EKEFBFPB@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateBootLoaderInMemory:1080', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03POBHGEJB@BIN?$AA@
CONST	SEGMENT
??_C@_03POBHGEJB@BIN?$AA@ DB 'BIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PBJEIPGH@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DJ@PBJEIPGH@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateBootLoaderInMemory:997', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NBOFJLJJ@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DJ@NBOFJLJJ@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateBootLoaderInMemory:964', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$0
__catchsym$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$1
__ehfuncinfo$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z
	DD	02H
	DD	FLAT:__tryblocktable$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$7
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$8
__unwindtable$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$6
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z
_TEXT	SEGMENT
$T209911 = -80						; size = 8
$T209907 = -72						; size = 8
$T209904 = -64						; size = 8
$T209910 = -56						; size = 8
$T209906 = -48						; size = 8
$T209912 = -40						; size = 8
_this$GSCopy$ = -32					; size = 4
tv466 = -28						; size = 4
_buffer$GSCopy$ = -28					; size = 4
$T209908 = -28						; size = 4
_size$ = -24						; size = 4
_bootLoaderId$ = -20					; size = 4
_ea$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_properties$149291 = 0					; size = 596
_headerSector$149321 = 84				; size = 512
$T209909 = 596						; size = 384
_request$149281 = 724					; size = 256
$T209905 = 980						; size = 94
_device$149319 = 1016					; size = 56
__$ArrayPad$ = 1076					; size = 4
_buffer$ = 1088						; size = 4
_bufferSize$ = 1092					; size = 4
_rescueDisk$ = 1096					; size = 1
_hiddenOSCreation$ = 1100				; size = 1
?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z PROC ; CipherShed::BootEncryption::CreateBootLoaderInMemory, COMDAT
; _this$ = ecx

; 962  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 c8 fb
	ff ff		 lea	 ebp, DWORD PTR [esp-1080]
  00008	81 ec 38 04 00
	00		 sub	 esp, 1080		; 00000438H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 44	 sub	 esp, 68			; 00000044H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 34 04 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 963  : 		if (bufferSize < TC_BOOT_LOADER_AREA_SIZE - TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE)

  0003c	8b 85 44 04 00
	00		 mov	 eax, DWORD PTR _bufferSize$[ebp]
  00042	8b b5 40 04 00
	00		 mov	 esi, DWORD PTR _buffer$[ebp]
  00048	8b d9		 mov	 ebx, ecx
  0004a	89 5d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  0004d	89 75 e4	 mov	 DWORD PTR _buffer$GSCopy$[ebp], esi
  00050	3d 00 7c 00 00	 cmp	 eax, 31744		; 00007c00H
  00055	73 1c		 jae	 SHORT $LN28@CreateBoot

; 964  : 			throw ParameterIncorrect (SRC_POS);

  00057	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0005c	8d 45 c0	 lea	 eax, DWORD PTR $T209904[ebp]
  0005f	50		 push	 eax
  00060	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T209904[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00067	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T209904[ebp+4], OFFSET ??_C@_0DJ@NBOFJLJJ@CipherShed?3?3BootEncryption?3?3Crea@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@CreateBoot:

; 965  : 
; 966  : 		ZeroMemory (buffer, bufferSize);

  00073	50		 push	 eax
  00074	6a 00		 push	 0
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _memset
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 967  : 
; 968  : 		int ea = 0;
; 969  : 		if (GetStatus().DriveMounted)

  0007f	6a 5e		 push	 94			; 0000005eH
  00081	8d 8d d4 03 00
	00		 lea	 ecx, DWORD PTR $T209905[ebp]
  00087	51		 push	 ecx
  00088	33 ff		 xor	 edi, edi
  0008a	57		 push	 edi
  0008b	57		 push	 edi
  0008c	68 48 20 22 00	 push	 2236488			; 00222048H
  00091	8b cb		 mov	 ecx, ebx
  00093	89 7d ec	 mov	 DWORD PTR _ea$[ebp], edi
  00096	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  0009b	39 bd da 03 00
	00		 cmp	 DWORD PTR $T209905[ebp+6], edi
  000a1	0f 84 c6 00 00
	00		 je	 $LN27@CreateBoot

; 970  : 		{
; 971  : 			try
; 972  : 			{
; 973  : 				GetBootEncryptionAlgorithmNameRequest request;
; 974  : 				CallDriver (TC_IOCTL_GET_BOOT_ENCRYPTION_ALGORITHM_NAME, NULL, 0, &request, sizeof (request));

  000a7	68 00 01 00 00	 push	 256			; 00000100H
  000ac	8d 95 d4 02 00
	00		 lea	 edx, DWORD PTR _request$149281[ebp]
  000b2	52		 push	 edx
  000b3	57		 push	 edi
  000b4	57		 push	 edi
  000b5	68 60 20 22 00	 push	 2236512			; 00222060H
  000ba	8b cb		 mov	 ecx, ebx
  000bc	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  000bf	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 975  : 
; 976  : 				if (_stricmp (request.BootEncryptionAlgorithmName, "AES") == 0)

  000c4	8d 85 d4 02 00
	00		 lea	 eax, DWORD PTR _request$149281[ebp]
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 __stricmp
  000d5	83 c4 08	 add	 esp, 8
  000d8	85 c0		 test	 eax, eax
  000da	75 0f		 jne	 SHORT $LN25@CreateBoot

; 977  : 					ea = AES;

  000dc	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e6	e9 aa 00 00 00	 jmp	 $LN19@CreateBoot
$LN25@CreateBoot:

; 978  : 				else if (_stricmp (request.BootEncryptionAlgorithmName, "Serpent") == 0)

  000eb	8d 8d d4 02 00
	00		 lea	 ecx, DWORD PTR _request$149281[ebp]
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 __stricmp
  000fc	83 c4 08	 add	 esp, 8
  000ff	85 c0		 test	 eax, eax
  00101	75 0f		 jne	 SHORT $LN23@CreateBoot

; 979  : 					ea = SERPENT;

  00103	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  00106	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0010d	e9 83 00 00 00	 jmp	 $LN19@CreateBoot
$LN23@CreateBoot:

; 980  : 				else if (_stricmp (request.BootEncryptionAlgorithmName, "Twofish") == 0)

  00112	8d 95 d4 02 00
	00		 lea	 edx, DWORD PTR _request$149281[ebp]
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 __stricmp
  00123	83 c4 08	 add	 esp, 8
  00126	85 c0		 test	 eax, eax
  00128	75 03		 jne	 SHORT $LN21@CreateBoot

; 981  : 					ea = TWOFISH;

  0012a	8d 78 03	 lea	 edi, DWORD PTR [eax+3]
$LN21@CreateBoot:
  0012d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00134	eb 5f		 jmp	 SHORT $LN19@CreateBoot
__catch$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$0:

; 982  : 			}
; 983  : 			catch (...)
; 984  : 			{
; 985  : 				try
; 986  : 				{
; 987  : 					VOLUME_PROPERTIES_STRUCT properties;
; 988  : 					GetVolumeProperties (&properties);

  00136	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00139	8d 45 00	 lea	 eax, DWORD PTR _properties$149291[ebp]
  0013c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0013f	50		 push	 eax
  00140	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00144	e8 00 00 00 00	 call	 ?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z ; CipherShed::BootEncryption::GetVolumeProperties

; 989  : 					ea = properties.ea;

  00149	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _properties$149291[ebp+536]
  0014f	89 4d ec	 mov	 DWORD PTR _ea$[ebp], ecx
$LN39@CreateBoot:

; 990  : 				}
; 991  : 				catch (...) { }
; 992  : 			}

  00152	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00159	b8 00 00 00 00	 mov	 eax, $LN70@CreateBoot
  0015e	c3		 ret	 0
__catch$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$1:
  0015f	b8 00 00 00 00	 mov	 eax, $LN39@CreateBoot
  00164	c3		 ret	 0
$LN70@CreateBoot:
  00165	8b 7d ec	 mov	 edi, DWORD PTR _ea$[ebp]
  00168	8b 75 e4	 mov	 esi, DWORD PTR _buffer$GSCopy$[ebp]

; 993  : 		}
; 994  : 		else

  0016b	eb 28		 jmp	 SHORT $LN19@CreateBoot
$LN27@CreateBoot:

; 995  : 		{
; 996  : 			if (SelectedEncryptionAlgorithmId == 0)

  0016d	8b 9b 88 01 00
	00		 mov	 ebx, DWORD PTR [ebx+392]
  00173	85 db		 test	 ebx, ebx
  00175	75 1c		 jne	 SHORT $LN18@CreateBoot

; 997  : 				throw ParameterIncorrect (SRC_POS);

  00177	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0017c	8d 55 d0	 lea	 edx, DWORD PTR $T209906[ebp]
  0017f	52		 push	 edx
  00180	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T209906[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00187	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T209906[ebp+4], OFFSET ??_C@_0DJ@PBJEIPGH@CipherShed?3?3BootEncryption?3?3Crea@
  0018e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@CreateBoot:

; 998  : 
; 999  : 			ea = SelectedEncryptionAlgorithmId;

  00193	8b fb		 mov	 edi, ebx
$LN19@CreateBoot:

; 1000 : 		}
; 1001 : 
; 1002 : 		int bootSectorId = rescueDisk ? IDR_RESCUE_BOOT_SECTOR : IDR_BOOT_SECTOR;

  00195	8a 9d 48 04 00
	00		 mov	 bl, BYTE PTR _rescueDisk$[ebp]
  0019b	0f b6 c3	 movzx	 eax, bl
  0019e	f7 d8		 neg	 eax
  001a0	1b c0		 sbb	 eax, eax
  001a2	83 e0 09	 and	 eax, 9

; 1003 : 		int bootLoaderId = rescueDisk ? IDR_RESCUE_LOADER : IDR_BOOT_LOADER;

  001a5	33 c9		 xor	 ecx, ecx
  001a7	05 08 02 00 00	 add	 eax, 520		; 00000208H
  001ac	84 db		 test	 bl, bl
  001ae	0f 95 c1	 setne	 cl

; 1004 : 
; 1005 : 		switch (ea)

  001b1	83 ef 01	 sub	 edi, 1
  001b4	8d 0c cd 0d 02
	00 00		 lea	 ecx, DWORD PTR [ecx*8+525]
  001bb	89 4d ec	 mov	 DWORD PTR _bootLoaderId$[ebp], ecx
  001be	74 4b		 je	 SHORT $LN15@CreateBoot
  001c0	83 ef 01	 sub	 edi, 1
  001c3	74 24		 je	 SHORT $LN14@CreateBoot
  001c5	83 ef 01	 sub	 edi, 1
  001c8	75 61		 jne	 SHORT $LN16@CreateBoot

; 1016 : 
; 1017 : 		case TWOFISH:
; 1018 : 			bootSectorId = rescueDisk ? IDR_RESCUE_BOOT_SECTOR_TWOFISH : IDR_BOOT_SECTOR_TWOFISH;

  001ca	0f b6 c3	 movzx	 eax, bl
  001cd	f7 d8		 neg	 eax
  001cf	1b c0		 sbb	 eax, eax
  001d1	83 e0 09	 and	 eax, 9

; 1019 : 			bootLoaderId = rescueDisk ? IDR_RESCUE_LOADER_TWOFISH : IDR_BOOT_LOADER_TWOFISH;

  001d4	33 d2		 xor	 edx, edx
  001d6	05 0b 02 00 00	 add	 eax, 523		; 0000020bH
  001db	84 db		 test	 bl, bl
  001dd	0f 95 c2	 setne	 dl
  001e0	8d 14 d5 10 02
	00 00		 lea	 edx, DWORD PTR [edx*8+528]

; 1020 : 			break;

  001e7	eb 3f		 jmp	 SHORT $LN76@CreateBoot
$LN14@CreateBoot:

; 1010 : 			break;
; 1011 : 
; 1012 : 		case SERPENT:
; 1013 : 			bootSectorId = rescueDisk ? IDR_RESCUE_BOOT_SECTOR_SERPENT : IDR_BOOT_SECTOR_SERPENT;

  001e9	0f b6 c3	 movzx	 eax, bl
  001ec	f7 d8		 neg	 eax
  001ee	1b c0		 sbb	 eax, eax
  001f0	83 e0 09	 and	 eax, 9

; 1014 : 			bootLoaderId = rescueDisk ? IDR_RESCUE_LOADER_SERPENT : IDR_BOOT_LOADER_SERPENT;

  001f3	33 c9		 xor	 ecx, ecx
  001f5	05 0a 02 00 00	 add	 eax, 522		; 0000020aH
  001fa	84 db		 test	 bl, bl
  001fc	0f 95 c1	 setne	 cl
  001ff	8d 0c cd 0f 02
	00 00		 lea	 ecx, DWORD PTR [ecx*8+527]
  00206	89 4d ec	 mov	 DWORD PTR _bootLoaderId$[ebp], ecx

; 1015 : 			break;

  00209	eb 20		 jmp	 SHORT $LN16@CreateBoot
$LN15@CreateBoot:

; 1006 : 		{
; 1007 : 		case AES:
; 1008 : 			bootSectorId = rescueDisk ? IDR_RESCUE_BOOT_SECTOR_AES : IDR_BOOT_SECTOR_AES;

  0020b	0f b6 c3	 movzx	 eax, bl
  0020e	f7 d8		 neg	 eax
  00210	1b c0		 sbb	 eax, eax
  00212	83 e0 09	 and	 eax, 9

; 1009 : 			bootLoaderId = rescueDisk ? IDR_RESCUE_LOADER_AES : IDR_BOOT_LOADER_AES;

  00215	33 d2		 xor	 edx, edx
  00217	05 09 02 00 00	 add	 eax, 521		; 00000209H
  0021c	84 db		 test	 bl, bl
  0021e	0f 95 c2	 setne	 dl
  00221	8d 14 d5 0e 02
	00 00		 lea	 edx, DWORD PTR [edx*8+526]
$LN76@CreateBoot:
  00228	89 55 ec	 mov	 DWORD PTR _bootLoaderId$[ebp], edx
$LN16@CreateBoot:

; 1021 : 		}
; 1022 : 
; 1023 : 		// Boot sector
; 1024 : 		DWORD size;
; 1025 : 		byte *bootSecResourceImg = MapResource ("BIN", bootSectorId, &size);

  0022b	8d 4d e8	 lea	 ecx, DWORD PTR _size$[ebp]
  0022e	51		 push	 ecx
  0022f	50		 push	 eax
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_03POBHGEJB@BIN?$AA@
  00235	e8 00 00 00 00	 call	 _MapResource
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1026 : 		if (!bootSecResourceImg || size != TC_SECTOR_SIZE_BIOS)

  0023d	85 c0		 test	 eax, eax
  0023f	0f 84 58 02 00
	00		 je	 $LN11@CreateBoot
  00245	81 7d e8 00 02
	00 00		 cmp	 DWORD PTR _size$[ebp], 512 ; 00000200H
  0024c	0f 85 4b 02 00
	00		 jne	 $LN11@CreateBoot

; 1028 : 
; 1029 : 		memcpy (buffer, bootSecResourceImg, size);

  00252	68 00 02 00 00	 push	 512			; 00000200H
  00257	50		 push	 eax
  00258	56		 push	 esi
  00259	e8 00 00 00 00	 call	 _memcpy

; 1030 : 
; 1031 : 		*(uint16 *) (buffer + TC_BOOT_SECTOR_VERSION_OFFSET) = BE16 (VERSION_NUM);

  0025e	68 30 07 00 00	 push	 1840			; 00000730H
  00263	e8 00 00 00 00	 call	 _MirrorBytes16

; 1032 : 
; 1033 : 		if (IsOSAtLeast (WIN_VISTA))

  00268	6a 0b		 push	 11			; 0000000bH
  0026a	66 89 86 ae 01
	00 00		 mov	 WORD PTR [esi+430], ax
  00271	e8 00 00 00 00	 call	 _IsOSAtLeast
  00276	83 c4 14	 add	 esp, 20			; 00000014H
  00279	85 c0		 test	 eax, eax
  0027b	74 07		 je	 SHORT $LN10@CreateBoot

; 1034 : 			buffer[TC_BOOT_SECTOR_CONFIG_OFFSET] |= TC_BOOT_CFG_FLAG_WINDOWS_VISTA_OR_LATER;

  0027d	80 8e b7 01 00
	00 04		 or	 BYTE PTR [esi+439], 4
$LN10@CreateBoot:

; 1035 : 
; 1036 : 		if (rescueDisk && (ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION))

  00284	8b 7d e0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00287	84 db		 test	 bl, bl
  00289	74 12		 je	 SHORT $LN9@CreateBoot
  0028b	8b cf		 mov	 ecx, edi
  0028d	e8 00 00 00 00	 call	 ?ReadDriverConfigurationFlags@BootEncryption@CipherShed@@QAEIXZ ; CipherShed::BootEncryption::ReadDriverConfigurationFlags
  00292	a8 08		 test	 al, 8
  00294	74 07		 je	 SHORT $LN9@CreateBoot

; 1037 : 			buffer[TC_BOOT_SECTOR_CONFIG_OFFSET] |= TC_BOOT_CFG_FLAG_RESCUE_DISABLE_HW_ENCRYPTION;

  00296	80 8e b7 01 00
	00 10		 or	 BYTE PTR [esi+439], 16	; 00000010H
$LN9@CreateBoot:

; 1038 : 
; 1039 : 		// Checksum of the backup header of the outer volume for the hidden system
; 1040 : 		if (hiddenOSCreation)

  0029d	80 bd 4c 04 00
	00 00		 cmp	 BYTE PTR _hiddenOSCreation$[ebp], 0
  002a4	0f 84 ac 00 00
	00		 je	 $LN8@CreateBoot

; 1041 : 		{
; 1042 : 			Device device (GetSystemDriveConfiguration().DevicePath);

  002aa	6a 00		 push	 0
  002ac	8d 95 54 02 00
	00		 lea	 edx, DWORD PTR $T209909[ebp]
  002b2	52		 push	 edx
  002b3	8b cf		 mov	 ecx, edi
  002b5	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  002ba	83 ec 1c	 sub	 esp, 28			; 0000001cH
  002bd	83 c0 1c	 add	 eax, 28			; 0000001cH
  002c0	8b cc		 mov	 ecx, esp
  002c2	89 65 e4	 mov	 DWORD PTR $T209908[ebp], esp
  002c5	50		 push	 eax
  002c6	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  002cd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002d2	8d 8d f8 03 00
	00		 lea	 ecx, DWORD PTR _device$149319[ebp]
  002d8	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  002dd	8d 8d 54 02 00
	00		 lea	 ecx, DWORD PTR $T209909[ebp]
  002e3	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  002e7	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1043 : 			byte headerSector[TC_SECTOR_SIZE_BIOS];
; 1044 : 
; 1045 : 			device.SeekAt (HiddenOSCandidatePartition.Info.StartingOffset.QuadPart + HiddenOSCandidatePartition.Info.PartitionLength.QuadPart - TC_VOLUME_HEADER_GROUP_SIZE + TC_VOLUME_HEADER_EFFECTIVE_SIZE);

  002ec	8b 87 b8 01 00
	00		 mov	 eax, DWORD PTR [edi+440]
  002f2	03 87 b0 01 00
	00		 add	 eax, DWORD PTR [edi+432]
  002f8	8b 8f bc 01 00
	00		 mov	 ecx, DWORD PTR [edi+444]
  002fe	13 8f b4 01 00
	00		 adc	 ecx, DWORD PTR [edi+436]
  00304	2d 00 fe 01 00	 sub	 eax, 130560		; 0001fe00H
  00309	83 d9 00	 sbb	 ecx, 0
  0030c	51		 push	 ecx
  0030d	50		 push	 eax
  0030e	8d 8d f8 03 00
	00		 lea	 ecx, DWORD PTR _device$149319[ebp]
  00314	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 1046 : 			device.Read (headerSector, sizeof (headerSector));

  00319	68 00 02 00 00	 push	 512			; 00000200H
  0031e	8d 55 54	 lea	 edx, DWORD PTR _headerSector$149321[ebp]
  00321	52		 push	 edx
  00322	8d 8d f8 03 00
	00		 lea	 ecx, DWORD PTR _device$149319[ebp]
  00328	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1047 : 
; 1048 : 			*(uint32 *) (buffer + TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET) = GetCrc32 (headerSector, sizeof (headerSector));

  0032d	8d 45 54	 lea	 eax, DWORD PTR _headerSector$149321[ebp]
  00330	68 00 02 00 00	 push	 512			; 00000200H
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 _GetCrc32
  0033b	83 c4 08	 add	 esp, 8

; 1049 : 		}

  0033e	8d 8d f8 03 00
	00		 lea	 ecx, DWORD PTR _device$149319[ebp]
  00344	89 86 92 01 00
	00		 mov	 DWORD PTR [esi+402], eax
  0034a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00351	e8 00 00 00 00	 call	 ??1Device@CipherShed@@QAE@XZ
$LN8@CreateBoot:

; 1050 : 
; 1051 : 		// Decompressor
; 1052 : 		byte *decompressor = MapResource ("BIN", IDR_BOOT_LOADER_DECOMPRESSOR, &size);

  00356	8d 4d e8	 lea	 ecx, DWORD PTR _size$[ebp]
  00359	51		 push	 ecx
  0035a	68 0c 02 00 00	 push	 524			; 0000020cH
  0035f	68 00 00 00 00	 push	 OFFSET ??_C@_03POBHGEJB@BIN?$AA@
  00364	e8 00 00 00 00	 call	 _MapResource
  00369	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1053 : 		if (!decompressor || size > TC_BOOT_LOADER_DECOMPRESSOR_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS)

  0036c	85 c0		 test	 eax, eax
  0036e	0f 84 0d 01 00
	00		 je	 $LN6@CreateBoot
  00374	8b 4d e8	 mov	 ecx, DWORD PTR _size$[ebp]
  00377	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  0037d	0f 87 fe 00 00
	00		 ja	 $LN6@CreateBoot

; 1055 : 
; 1056 : 		memcpy (buffer + TC_SECTOR_SIZE_BIOS, decompressor, size);

  00383	51		 push	 ecx
  00384	50		 push	 eax
  00385	8d be 00 02 00
	00		 lea	 edi, DWORD PTR [esi+512]
  0038b	57		 push	 edi
  0038c	e8 00 00 00 00	 call	 _memcpy

; 1057 : 
; 1058 : 		// Compressed boot loader
; 1059 : 		byte *bootLoader = MapResource ("BIN", bootLoaderId, &size);

  00391	8b 45 ec	 mov	 eax, DWORD PTR _bootLoaderId$[ebp]
  00394	8d 55 e8	 lea	 edx, DWORD PTR _size$[ebp]
  00397	52		 push	 edx
  00398	50		 push	 eax
  00399	68 00 00 00 00	 push	 OFFSET ??_C@_03POBHGEJB@BIN?$AA@
  0039e	e8 00 00 00 00	 call	 _MapResource
  003a3	83 c4 18	 add	 esp, 24			; 00000018H

; 1060 : 		if (!bootLoader || size > TC_MAX_BOOT_LOADER_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS)

  003a6	85 c0		 test	 eax, eax
  003a8	0f 84 b7 00 00
	00		 je	 $LN4@CreateBoot
  003ae	8b 4d e8	 mov	 ecx, DWORD PTR _size$[ebp]
  003b1	81 f9 00 72 00
	00		 cmp	 ecx, 29184		; 00007200H
  003b7	0f 87 a8 00 00
	00		 ja	 $LN4@CreateBoot

; 1062 : 
; 1063 : 		memcpy (buffer + TC_SECTOR_SIZE_BIOS + TC_BOOT_LOADER_DECOMPRESSOR_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS, bootLoader, size);

  003bd	51		 push	 ecx
  003be	50		 push	 eax
  003bf	8d 8e 00 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2560]
  003c5	51		 push	 ecx
  003c6	e8 00 00 00 00	 call	 _memcpy

; 1064 : 
; 1065 : 		// Boot loader and decompressor checksum
; 1066 : 		*(uint16 *) (buffer + TC_BOOT_SECTOR_LOADER_LENGTH_OFFSET) = static_cast <uint16> (size);

  003cb	8b 45 e8	 mov	 eax, DWORD PTR _size$[ebp]

; 1067 : 		*(uint32 *) (buffer + TC_BOOT_SECTOR_LOADER_CHECKSUM_OFFSET) = GetChecksum (buffer + TC_SECTOR_SIZE_BIOS,
; 1068 : 			TC_BOOT_LOADER_DECOMPRESSOR_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS + size);

  003ce	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  003d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d4	66 89 86 b0 01
	00 00		 mov	 WORD PTR [esi+432], ax
  003db	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  003e0	50		 push	 eax
  003e1	57		 push	 edi
  003e2	89 45 e4	 mov	 DWORD PTR tv466[ebp], eax
  003e5	e8 00 00 00 00	 call	 ?GetChecksum@BootEncryption@CipherShed@@IAEIPAEI@Z ; CipherShed::BootEncryption::GetChecksum

; 1069 : 
; 1070 : 		// Backup of decompressor and boot loader
; 1071 : 		if (size + TC_BOOT_LOADER_DECOMPRESSOR_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS <= TC_BOOT_LOADER_BACKUP_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS)

  003ea	81 7d e4 00 3c
	00 00		 cmp	 DWORD PTR tv466[ebp], 15360 ; 00003c00H
  003f1	89 86 b2 01 00
	00		 mov	 DWORD PTR [esi+434], eax
  003f7	77 43		 ja	 SHORT $LN3@CreateBoot

; 1072 : 		{
; 1073 : 			memcpy (buffer + TC_SECTOR_SIZE_BIOS + TC_BOOT_LOADER_BACKUP_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS,
; 1074 : 				buffer + TC_SECTOR_SIZE_BIOS, TC_BOOT_LOADER_BACKUP_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS);

  003f9	68 00 3c 00 00	 push	 15360			; 00003c00H
  003fe	8d 96 00 3e 00
	00		 lea	 edx, DWORD PTR [esi+15872]
  00404	57		 push	 edi
  00405	52		 push	 edx
  00406	e8 00 00 00 00	 call	 _memcpy
  0040b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1075 : 
; 1076 : 			buffer[TC_BOOT_SECTOR_CONFIG_OFFSET] |= TC_BOOT_CFG_FLAG_BACKUP_LOADER_AVAILABLE;

  0040e	80 8e b7 01 00
	00 02		 or	 BYTE PTR [esi+439], 2
$LN1@CreateBoot:

; 1081 : 		}
; 1082 : 	}

  00415	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00418	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0041f	59		 pop	 ecx
  00420	5f		 pop	 edi
  00421	5e		 pop	 esi
  00422	5b		 pop	 ebx
  00423	8b 8d 34 04 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00429	33 cd		 xor	 ecx, ebp
  0042b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00430	81 c5 38 04 00
	00		 add	 ebp, 1080		; 00000438H
  00436	8b e5		 mov	 esp, ebp
  00438	5d		 pop	 ebp
  00439	c2 10 00	 ret	 16			; 00000010H
$LN3@CreateBoot:

; 1077 : 		}
; 1078 : 		else if (!rescueDisk && bootLoaderId != IDR_BOOT_LOADER)

  0043c	84 db		 test	 bl, bl
  0043e	75 d5		 jne	 SHORT $LN1@CreateBoot
  00440	81 7d ec 0d 02
	00 00		 cmp	 DWORD PTR _bootLoaderId$[ebp], 525 ; 0000020dH
  00447	74 cc		 je	 SHORT $LN1@CreateBoot

; 1079 : 		{
; 1080 : 			throw ParameterIncorrect (SRC_POS);

  00449	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0044e	8d 45 d8	 lea	 eax, DWORD PTR $T209912[ebp]
  00451	50		 push	 eax
  00452	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T209912[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00459	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T209912[ebp+4], OFFSET ??_C@_0DK@EKEFBFPB@CipherShed?3?3BootEncryption?3?3Crea@
  00460	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@CreateBoot:

; 1061 : 			throw ParameterIncorrect (SRC_POS);

  00465	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0046a	8d 4d b0	 lea	 ecx, DWORD PTR $T209911[ebp]
  0046d	51		 push	 ecx
  0046e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T209911[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00475	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T209911[ebp+4], OFFSET ??_C@_0DK@FJMAAJLK@CipherShed?3?3BootEncryption?3?3Crea@
  0047c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@CreateBoot:

; 1054 : 			throw ParameterIncorrect (SRC_POS);

  00481	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00486	8d 55 c8	 lea	 edx, DWORD PTR $T209910[ebp]
  00489	52		 push	 edx
  0048a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T209910[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00491	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T209910[ebp+4], OFFSET ??_C@_0DK@CGPBEDKG@CipherShed?3?3BootEncryption?3?3Crea@
  00498	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@CreateBoot:

; 1027 : 			throw ParameterIncorrect (SRC_POS);

  0049d	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  004a2	8d 45 b8	 lea	 eax, DWORD PTR $T209907[ebp]
  004a5	50		 push	 eax
  004a6	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T209907[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  004ad	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T209907[ebp+4], OFFSET ??_C@_0DK@IJDAGOA@CipherShed?3?3BootEncryption?3?3Crea@
  004b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN75@CreateBoot:
  004b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$4:
  00000	8d 8d 54 02 00
	00		 lea	 ecx, DWORD PTR $T209909[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z$6:
  0000b	8d 8d f8 03 00
	00		 lea	 ecx, DWORD PTR _device$149319[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 8a 40 04 00
	00		 mov	 ecx, DWORD PTR [edx+1088]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z ENDP ; CipherShed::BootEncryption::CreateBootLoaderInMemory
PUBLIC	??_C@_0DG@MLLBFIJL@CipherShed?3?3BootEncryption?3?3Read@ ; `string'
PUBLIC	_bootLoaderVersion$GSCopy$
PUBLIC	_customUserMessage$GSCopy$
PUBLIC	_userConfig$GSCopy$
PUBLIC	_config$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
;	COMDAT ??_C@_0DG@MLLBFIJL@CipherShed?3?3BootEncryption?3?3Read@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DG@MLLBFIJL@CipherShed?3?3BootEncryption?3?3Read@ DB 'CipherShed::'
	DB	'BootEncryption::ReadBootSectorConfig:1088', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z$0
__unwindtable$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z$3
__ehfuncinfo$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
_TEXT	SEGMENT
$T209999 = -424						; size = 384
$T209998 = -40						; size = 8
_config$GSCopy$ = -32					; size = 4
_userConfig$GSCopy$ = -28				; size = 4
_customUserMessage$GSCopy$ = -24			; size = 4
_bootLoaderVersion$GSCopy$ = -20			; size = 4
__$EHRec$ = -16						; size = 16
_request$ = 0						; size = 553
__$ArrayPad$ = 556					; size = 4
_config$ = 568						; size = 4
_bufLength$ = 572					; size = 4
_userConfig$ = 576					; size = 4
_customUserMessage$ = 580				; size = 4
_bootLoaderVersion$ = 584				; size = 4
?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z PROC ; CipherShed::BootEncryption::ReadBootSectorConfig, COMDAT
; _this$ = ecx

; 1086 : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 d0 fd
	ff ff		 lea	 ebp, DWORD PTR [esp-560]
  00008	81 ec 30 02 00
	00		 sub	 esp, 560		; 00000230H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 2c 02 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b b5 38 02 00
	00		 mov	 esi, DWORD PTR _config$[ebp]
  00045	8b 9d 40 02 00
	00		 mov	 ebx, DWORD PTR _userConfig$[ebp]

; 1121 : 
; 1122 : 			if (bootLoaderVersion)

  0004b	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR _customUserMessage$[ebp]
  00051	8b f9		 mov	 edi, ecx
  00053	8b 8d 48 02 00
	00		 mov	 ecx, DWORD PTR _bootLoaderVersion$[ebp]
  00059	89 75 e0	 mov	 DWORD PTR _config$GSCopy$[ebp], esi
  0005c	89 5d e4	 mov	 DWORD PTR _userConfig$GSCopy$[ebp], ebx
  0005f	89 45 e8	 mov	 DWORD PTR _customUserMessage$GSCopy$[ebp], eax
  00062	89 4d ec	 mov	 DWORD PTR _bootLoaderVersion$GSCopy$[ebp], ecx
  00065	85 f6		 test	 esi, esi
  00067	74 25		 je	 SHORT $LN10@ReadBootSe

; 1087 : 		if (config && bufLength < TC_BOOT_CFG_FLAG_AREA_SIZE)

  00069	83 bd 3c 02 00
	00 01		 cmp	 DWORD PTR _bufLength$[ebp], 1
  00070	73 1c		 jae	 SHORT $LN10@ReadBootSe

; 1088 : 			throw ParameterIncorrect (SRC_POS);

  00072	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00077	8d 55 d8	 lea	 edx, DWORD PTR $T209998[ebp]
  0007a	52		 push	 edx
  0007b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T209998[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00082	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T209998[ebp+4], OFFSET ??_C@_0DG@MLLBFIJL@CipherShed?3?3BootEncryption?3?3Read@
  00089	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@ReadBootSe:

; 1089 : 
; 1090 : 		GetSystemDriveConfigurationRequest request;
; 1091 : 		_snwprintf (request.DevicePath, array_capacity (request.DevicePath), L"%hs", GetSystemDriveConfiguration().DeviceKernelPath.c_str());

  0008e	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR $T209999[ebp]
  00094	50		 push	 eax
  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0009c	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000a0	72 05		 jb	 SHORT $LN26@ReadBootSe
  000a2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a5	eb 03		 jmp	 SHORT $LN27@ReadBootSe
$LN26@ReadBootSe:
  000a7	83 c0 04	 add	 eax, 4
$LN27@ReadBootSe:
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  000b0	8d 4d 00	 lea	 ecx, DWORD PTR _request$[ebp]
  000b3	68 04 01 00 00	 push	 260			; 00000104H
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 __snwprintf
  000be	83 c4 10	 add	 esp, 16			; 00000010H
  000c1	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T209999[ebp]
  000c7	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1092 : 
; 1093 : 		try
; 1094 : 		{
; 1095 : 			CallDriver (TC_IOCTL_GET_SYSTEM_DRIVE_CONFIG, &request, sizeof (request), &request, sizeof (request));

  000cc	68 29 02 00 00	 push	 553			; 00000229H
  000d1	8d 55 00	 lea	 edx, DWORD PTR _request$[ebp]
  000d4	52		 push	 edx
  000d5	68 29 02 00 00	 push	 553			; 00000229H
  000da	8b c2		 mov	 eax, edx
  000dc	50		 push	 eax
  000dd	68 70 20 22 00	 push	 2236528			; 00222070H
  000e2	8b cf		 mov	 ecx, edi
  000e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000eb	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1096 : 			if (config)

  000f0	85 f6		 test	 esi, esi
  000f2	74 08		 je	 SHORT $LN8@ReadBootSe

; 1097 : 				*config = request.Configuration;

  000f4	8a 8d 08 02 00
	00		 mov	 cl, BYTE PTR _request$[ebp+520]
  000fa	88 0e		 mov	 BYTE PTR [esi], cl
$LN8@ReadBootSe:

; 1098 : 
; 1099 : 			if (userConfig)

  000fc	85 db		 test	 ebx, ebx
  000fe	74 08		 je	 SHORT $LN7@ReadBootSe

; 1100 : 				*userConfig = request.UserConfiguration;

  00100	8a 95 0f 02 00
	00		 mov	 dl, BYTE PTR _request$[ebp+527]
  00106	88 13		 mov	 BYTE PTR [ebx], dl
$LN7@ReadBootSe:

; 1101 : 			
; 1102 : 			if (customUserMessage)

  00108	8b 75 e8	 mov	 esi, DWORD PTR _customUserMessage$GSCopy$[ebp]
  0010b	85 f6		 test	 esi, esi
  0010d	74 29		 je	 SHORT $LN28@ReadBootSe

; 1103 : 			{
; 1104 : 				request.CustomUserMessage[TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH] = 0;
; 1105 : 				*customUserMessage = request.CustomUserMessage;

  0010f	8d 85 10 02 00
	00		 lea	 eax, DWORD PTR _request$[ebp+528]
  00115	c6 85 28 02 00
	00 00		 mov	 BYTE PTR _request$[ebp+552], 0
  0011c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0011f	90		 npad	 1
$LL35@ReadBootSe:
  00120	8a 08		 mov	 cl, BYTE PTR [eax]
  00122	40		 inc	 eax
  00123	84 c9		 test	 cl, cl
  00125	75 f9		 jne	 SHORT $LL35@ReadBootSe
  00127	2b c2		 sub	 eax, edx
  00129	50		 push	 eax
  0012a	8d 85 10 02 00
	00		 lea	 eax, DWORD PTR _request$[ebp+528]
  00130	50		 push	 eax
  00131	8b ce		 mov	 ecx, esi
  00133	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN28@ReadBootSe:

; 1106 : 			}
; 1107 : 
; 1108 : 			if (bootLoaderVersion)

  00138	8b 45 ec	 mov	 eax, DWORD PTR _bootLoaderVersion$GSCopy$[ebp]
  0013b	85 c0		 test	 eax, eax
  0013d	74 0a		 je	 SHORT $LN17@ReadBootSe

; 1109 : 				*bootLoaderVersion = request.BootLoaderVersion;

  0013f	66 8b 8d 0d 02
	00 00		 mov	 cx, WORD PTR _request$[ebp+525]
  00146	66 89 08	 mov	 WORD PTR [eax], cx
$LN17@ReadBootSe:

; 1125 : 	}

  00149	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 8d 2c 02 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015d	33 cd		 xor	 ecx, ebp
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	81 c5 30 02 00
	00		 add	 ebp, 560		; 00000230H
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 14 00	 ret	 20			; 00000014H
__catch$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z$0:

; 1110 : 		}
; 1111 : 		catch (...)
; 1112 : 		{
; 1113 : 			if (config)

  00170	8b 45 e0	 mov	 eax, DWORD PTR _config$GSCopy$[ebp]
  00173	85 c0		 test	 eax, eax
  00175	74 03		 je	 SHORT $LN4@ReadBootSe

; 1114 : 				*config = 0;

  00177	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN4@ReadBootSe:

; 1115 : 
; 1116 : 			if (userConfig)

  0017a	8b 45 e4	 mov	 eax, DWORD PTR _userConfig$GSCopy$[ebp]
  0017d	85 c0		 test	 eax, eax
  0017f	74 03		 je	 SHORT $LN3@ReadBootSe

; 1117 : 				*userConfig = 0;

  00181	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN3@ReadBootSe:

; 1118 : 			
; 1119 : 			if (customUserMessage)

  00184	8b 4d e8	 mov	 ecx, DWORD PTR _customUserMessage$GSCopy$[ebp]
  00187	85 c9		 test	 ecx, ecx
  00189	74 05		 je	 SHORT $LN2@ReadBootSe

; 1120 : 				customUserMessage->clear();

  0018b	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
$LN2@ReadBootSe:

; 1121 : 
; 1122 : 			if (bootLoaderVersion)

  00190	8b 45 ec	 mov	 eax, DWORD PTR _bootLoaderVersion$GSCopy$[ebp]
  00193	85 c0		 test	 eax, eax
  00195	74 05		 je	 SHORT $LN1@ReadBootSe

; 1123 : 				*bootLoaderVersion = 0;

  00197	33 d2		 xor	 edx, edx
  00199	66 89 10	 mov	 WORD PTR [eax], dx
$LN1@ReadBootSe:

; 1124 : 		}

  0019c	b8 00 00 00 00	 mov	 eax, $LN17@ReadBootSe
  001a1	c3		 ret	 0
$LN37@ReadBootSe:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 54 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-428]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a 38 02 00
	00		 mov	 ecx, DWORD PTR [edx+568]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ENDP ; CipherShed::BootEncryption::ReadBootSectorConfig
PUBLIC	??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig
;	COMDAT ??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@ DB 'ERROR_MBR_PROTECTED', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z$2
__ehfuncinfo$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z
_TEXT	SEGMENT
$T210242 = -1524					; size = 8
$T210219 = -1524					; size = 8
$T210195 = -1524					; size = 8
$T210062 = -1524					; size = 4
$T210064 = -1516					; size = 36
$T210063 = -1480					; size = 384
_device$ = -1096					; size = 56
_mbr$ = -1040						; size = 512
_mbrVerificationBuf$ = -528				; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newConfig$ = 8						; size = 4
?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z PROC ; CipherShed::BootEncryption::WriteBootSectorConfig, COMDAT
; _this$ = ecx

; 1129 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e8 05 00
	00		 sub	 esp, 1512		; 000005e8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 e4 05
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1524], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 f8 05
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1540]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b bc 24 08 06
	00 00		 mov	 edi, DWORD PTR _newConfig$[esp+1536]

; 1130 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  00041	33 db		 xor	 ebx, ebx
  00043	53		 push	 ebx
  00044	8d 44 24 40	 lea	 eax, DWORD PTR $T210063[esp+1544]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0004e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00051	8b cc		 mov	 ecx, esp
  00053	89 64 24 30	 mov	 DWORD PTR $T210062[esp+1572], esp
  00057	6a ff		 push	 -1
  00059	83 c0 1c	 add	 eax, 28			; 0000001cH
  0005c	53		 push	 ebx
  0005d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00064	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00067	50		 push	 eax
  00068	89 9c 24 2c 06
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1592], ebx
  0006f	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00072	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00077	8d 8c 24 dc 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1572]
  0007e	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  00083	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T210063[esp+1540]
  00087	c6 84 24 00 06
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+1548], 2
  0008f	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1131 : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 1132 : 
; 1133 : 		device.SeekAt (0);

  00094	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetFilePointerEx@20
  0009a	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+1548], ebx
  000a1	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+1552], ebx
  000a8	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+1540], bl
  000af	75 37		 jne	 SHORT $LN38@WriteBootS
  000b1	53		 push	 ebx
  000b2	53		 push	 ebx
  000b3	33 c9		 xor	 ecx, ecx
  000b5	51		 push	 ecx
  000b6	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1568]
  000bd	33 c0		 xor	 eax, eax
  000bf	50		 push	 eax
  000c0	51		 push	 ecx
  000c1	ff d6		 call	 esi
  000c3	85 c0		 test	 eax, eax
  000c5	75 21		 jne	 SHORT $LN38@WriteBootS
  000c7	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T210195[esp+1540], OFFSET ??_7SystemException@CipherShed@@6B@
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d5	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000da	8d 54 24 14	 lea	 edx, DWORD PTR $T210195[esp+1544]
  000de	52		 push	 edx
  000df	89 44 24 1c	 mov	 DWORD PTR $T210195[esp+1552], eax
  000e3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@WriteBootS:

; 1134 : 		device.Read (mbr, sizeof (mbr));

  000e8	68 00 02 00 00	 push	 512			; 00000200H
  000ed	8d 84 24 f8 01
	00 00		 lea	 eax, DWORD PTR _mbr$[esp+1544]
  000f4	50		 push	 eax
  000f5	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1548]
  000fc	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1135 : 
; 1136 : 		memcpy (mbr + TC_BOOT_SECTOR_CONFIG_OFFSET, newConfig, TC_BOOT_CFG_FLAG_AREA_SIZE);

  00101	8a 0f		 mov	 cl, BYTE PTR [edi]
  00103	88 8c 24 ab 03
	00 00		 mov	 BYTE PTR _mbr$[esp+1979], cl

; 1137 : 
; 1138 : 		device.SeekAt (0);

  0010a	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+1548], ebx
  00111	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+1552], ebx
  00118	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+1540], bl
  0011f	75 37		 jne	 SHORT $LN50@WriteBootS
  00121	8b 94 24 cc 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1556]
  00128	53		 push	 ebx
  00129	53		 push	 ebx
  0012a	33 c9		 xor	 ecx, ecx
  0012c	51		 push	 ecx
  0012d	33 c0		 xor	 eax, eax
  0012f	50		 push	 eax
  00130	52		 push	 edx
  00131	ff d6		 call	 esi
  00133	85 c0		 test	 eax, eax
  00135	75 21		 jne	 SHORT $LN50@WriteBootS
  00137	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T210219[esp+1540], OFFSET ??_7SystemException@CipherShed@@6B@
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00145	89 44 24 14	 mov	 DWORD PTR $T210219[esp+1544], eax
  00149	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0014e	8d 44 24 14	 lea	 eax, DWORD PTR $T210219[esp+1544]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN50@WriteBootS:

; 1139 : 		device.Write (mbr, sizeof (mbr));

  00158	68 00 02 00 00	 push	 512			; 00000200H
  0015d	8d 8c 24 f8 01
	00 00		 lea	 ecx, DWORD PTR _mbr$[esp+1544]
  00164	51		 push	 ecx
  00165	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1548]
  0016c	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1140 : 
; 1141 : 		byte mbrVerificationBuf[TC_SECTOR_SIZE_BIOS];
; 1142 : 		device.SeekAt (0);

  00171	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+1548], ebx
  00178	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+1552], ebx
  0017f	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+1540], bl
  00186	75 37		 jne	 SHORT $LN61@WriteBootS
  00188	8b 94 24 cc 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1556]
  0018f	53		 push	 ebx
  00190	53		 push	 ebx
  00191	33 c9		 xor	 ecx, ecx
  00193	51		 push	 ecx
  00194	33 c0		 xor	 eax, eax
  00196	50		 push	 eax
  00197	52		 push	 edx
  00198	ff d6		 call	 esi
  0019a	85 c0		 test	 eax, eax
  0019c	75 21		 jne	 SHORT $LN61@WriteBootS
  0019e	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T210242[esp+1540], OFFSET ??_7SystemException@CipherShed@@6B@
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001ac	89 44 24 14	 mov	 DWORD PTR $T210242[esp+1544], eax
  001b0	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001b5	8d 44 24 14	 lea	 eax, DWORD PTR $T210242[esp+1544]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN61@WriteBootS:

; 1143 : 		device.Read (mbrVerificationBuf, sizeof (mbr));

  001bf	68 00 02 00 00	 push	 512			; 00000200H
  001c4	8d 8c 24 f8 03
	00 00		 lea	 ecx, DWORD PTR _mbrVerificationBuf$[esp+1544]
  001cb	51		 push	 ecx
  001cc	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1548]
  001d3	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1144 : 
; 1145 : 		if (memcmp (mbr, mbrVerificationBuf, sizeof (mbr)) != 0)

  001d8	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  001dd	33 c9		 xor	 ecx, ecx
  001df	90		 npad	 1
$LL5@WriteBootS:
  001e0	8b 94 0c f4 01
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+ecx+1540]
  001e7	3b 94 0c f4 03
	00 00		 cmp	 edx, DWORD PTR _mbrVerificationBuf$[esp+ecx+1540]
  001ee	75 75		 jne	 SHORT $LN7@WriteBootS
  001f0	83 e8 04	 sub	 eax, 4
  001f3	83 c1 04	 add	 ecx, 4
  001f6	83 f8 04	 cmp	 eax, 4
  001f9	73 e5		 jae	 SHORT $LL5@WriteBootS

; 1147 : 	}

  001fb	38 9c 24 bd 01
	00 00		 cmp	 BYTE PTR _device$[esp+1541], bl
  00202	74 1e		 je	 SHORT $LN114@WriteBootS
  00204	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+1540], bl
  0020b	75 0e		 jne	 SHORT $LN113@WriteBootS
  0020d	8b 94 24 cc 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1556]
  00214	52		 push	 edx
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN113@WriteBootS:
  0021b	88 9c 24 bd 01
	00 00		 mov	 BYTE PTR _device$[esp+1541], bl
$LN114@WriteBootS:
  00222	83 bc 24 ec 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1588], 16 ; 00000010H
  0022a	72 10		 jb	 SHORT $LN133@WriteBootS
  0022c	8b 84 24 d8 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+1568]
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00239	83 c4 04	 add	 esp, 4
$LN133@WriteBootS:
  0023c	8b 8c 24 f8 05
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1540]
  00243	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024a	59		 pop	 ecx
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx
  0024e	8b 8c 24 e4 05
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1524]
  00255	33 cc		 xor	 ecx, esp
  00257	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025c	81 c4 f4 05 00
	00		 add	 esp, 1524		; 000005f4H
  00262	c2 04 00	 ret	 4
$LN7@WriteBootS:

; 1146 : 			throw ErrorException ("ERROR_MBR_PROTECTED");

  00265	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0026a	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T210064[esp+1544]
  0026e	33 c0		 xor	 eax, eax
  00270	51		 push	 ecx
  00271	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T210064[esp+1548], OFFSET ??_7ErrorException@CipherShed@@6B@
  00279	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T210064[esp+1552], OFFSET ??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@
  00281	c7 44 24 40 07
	00 00 00	 mov	 DWORD PTR $T210064[esp+1580], 7
  00289	89 5c 24 3c	 mov	 DWORD PTR $T210064[esp+1576], ebx
  0028d	66 89 44 24 2c	 mov	 WORD PTR $T210064[esp+1560], ax
  00292	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN148@WriteBootS:
  00297	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z$0:
  00000	8d 8d 38 fa ff
	ff		 lea	 ecx, DWORD PTR $T210063[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z$2:
  0000b	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 0c fa ff
	ff		 lea	 eax, DWORD PTR [edx-1524]
  00020	8b 8a 08 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1528]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ENDP ; CipherShed::BootEncryption::WriteBootSectorConfig
PUBLIC	??_C@_0DL@JENEJFML@CipherShed?3?3BootEncryption?3?3Writ@ ; `string'
PUBLIC	??_C@_09EMKKFGIH@TrueCrypt?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::WriteBootSectorUserConfig
EXTRN	_BufferContainsString:PROC
;	COMDAT ??_C@_0DL@JENEJFML@CipherShed?3?3BootEncryption?3?3Writ@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DL@JENEJFML@CipherShed?3?3BootEncryption?3?3Writ@ DB 'CipherShed::'
	DB	'BootEncryption::WriteBootSectorUserConfig:1171', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EMKKFGIH@TrueCrypt?$AA@
CONST	SEGMENT
??_C@_09EMKKFGIH@TrueCrypt?$AA@ DB 'TrueCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T210795 = -1524					; size = 8
$T210656 = -1524					; size = 8
$T210654 = -1524					; size = 4
$T210657 = -1516					; size = 36
$T210655 = -1480					; size = 384
_device$ = -1096					; size = 56
_mbr$ = -1040						; size = 512
_mbrVerificationBuf$ = -528				; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_userConfig$ = 8					; size = 1
_customUserMessage$ = 12				; size = 4
?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::BootEncryption::WriteBootSectorUserConfig, COMDAT
; _this$ = ecx

; 1151 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e8 05 00
	00		 sub	 esp, 1512		; 000005e8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 e4 05
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1524], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c4		 xor	 eax, esp
  0002b	50		 push	 eax
  0002c	8d 84 24 f4 05
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1536]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	8b b4 24 08 06
	00 00		 mov	 esi, DWORD PTR _customUserMessage$[esp+1532]

; 1152 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  00040	33 db		 xor	 ebx, ebx
  00042	53		 push	 ebx
  00043	8d 44 24 3c	 lea	 eax, DWORD PTR $T210655[esp+1540]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0004d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00050	8b cc		 mov	 ecx, esp
  00052	89 64 24 2c	 mov	 DWORD PTR $T210654[esp+1568], esp
  00056	6a ff		 push	 -1
  00058	83 c0 1c	 add	 eax, 28			; 0000001cH
  0005b	53		 push	 ebx
  0005c	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00063	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00066	50		 push	 eax
  00067	89 9c 24 28 06
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1588], ebx
  0006e	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00071	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00076	8d 8c 24 d8 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1568]
  0007d	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  00082	8d 4c 24 38	 lea	 ecx, DWORD PTR $T210655[esp+1536]
  00086	c6 84 24 fc 05
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+1544], 2
  0008e	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1153 : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 1154 : 
; 1155 : 		device.SeekAt (0);

  00093	89 9c 24 c0 01
	00 00		 mov	 DWORD PTR _device$[esp+1544], ebx
  0009a	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+1548], ebx
  000a1	38 9c 24 b8 01
	00 00		 cmp	 BYTE PTR _device$[esp+1536], bl
  000a8	75 3b		 jne	 SHORT $LN42@WriteBootS@2
  000aa	53		 push	 ebx
  000ab	53		 push	 ebx
  000ac	33 c9		 xor	 ecx, ecx
  000ae	51		 push	 ecx
  000af	8b 8c 24 d4 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1564]
  000b6	33 c0		 xor	 eax, eax
  000b8	50		 push	 eax
  000b9	51		 push	 ecx
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000c0	85 c0		 test	 eax, eax
  000c2	75 21		 jne	 SHORT $LN42@WriteBootS@2
  000c4	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T210795[esp+1536], OFFSET ??_7SystemException@CipherShed@@6B@
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d2	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000d7	8d 54 24 10	 lea	 edx, DWORD PTR $T210795[esp+1540]
  000db	52		 push	 edx
  000dc	89 44 24 18	 mov	 DWORD PTR $T210795[esp+1548], eax
  000e0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@WriteBootS@2:

; 1156 : 		device.Read (mbr, sizeof (mbr));

  000e5	68 00 02 00 00	 push	 512			; 00000200H
  000ea	8d 84 24 f4 01
	00 00		 lea	 eax, DWORD PTR _mbr$[esp+1540]
  000f1	50		 push	 eax
  000f2	8d 8c 24 c0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1544]
  000f9	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1157 : 
; 1158 : 		if (!BufferContainsString (mbr, sizeof (mbr), TC_APP_NAME_LEGACY)
; 1159 : 			|| BE16 (*(uint16 *) (mbr + TC_BOOT_SECTOR_VERSION_OFFSET)) != VERSION_NUM)

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  00103	8d 8c 24 f4 01
	00 00		 lea	 ecx, DWORD PTR _mbr$[esp+1540]
  0010a	68 00 02 00 00	 push	 512			; 00000200H
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _BufferContainsString
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	85 c0		 test	 eax, eax
  0011a	0f 84 88 01 00
	00		 je	 $LN4@WriteBootS@2
  00120	8b 94 24 9e 03
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+1966]
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 _MirrorBytes16
  0012d	b9 30 07 00 00	 mov	 ecx, 1840		; 00000730H
  00132	83 c4 04	 add	 esp, 4
  00135	66 3b c1	 cmp	 ax, cx
  00138	0f 85 6a 01 00
	00		 jne	 $LN4@WriteBootS@2

; 1162 : 		}
; 1163 : 
; 1164 : 		mbr[TC_BOOT_SECTOR_USER_CONFIG_OFFSET] = userConfig;

  0013e	8a 94 24 04 06
	00 00		 mov	 dl, BYTE PTR _userConfig$[esp+1532]

; 1165 : 
; 1166 : 		memset (mbr + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, 0, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH);

  00145	33 c0		 xor	 eax, eax
  00147	89 84 24 86 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1942], eax
  0014e	89 84 24 8a 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1946], eax
  00155	89 84 24 8e 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1950], eax
  0015c	89 84 24 92 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1954], eax
  00163	89 84 24 96 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1958], eax
  0016a	89 84 24 9a 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1962], eax

; 1167 : 
; 1168 : 		if (!customUserMessage.empty())

  00171	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00174	88 94 24 a6 03
	00 00		 mov	 BYTE PTR _mbr$[esp+1974], dl
  0017b	3b c3		 cmp	 eax, ebx
  0017d	74 44		 je	 SHORT $LN3@WriteBootS@2

; 1169 : 		{
; 1170 : 			if (customUserMessage.size() > TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH)

  0017f	83 f8 18	 cmp	 eax, 24			; 00000018H
  00182	76 1f		 jbe	 SHORT $LN2@WriteBootS@2

; 1171 : 				throw ParameterIncorrect (SRC_POS);

  00184	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00189	8d 44 24 10	 lea	 eax, DWORD PTR $T210656[esp+1540]
  0018d	50		 push	 eax
  0018e	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T210656[esp+1544], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00196	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T210656[esp+1548], OFFSET ??_C@_0DL@JENEJFML@CipherShed?3?3BootEncryption?3?3Writ@
  0019e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@WriteBootS@2:

; 1172 : 
; 1173 : 			memcpy (mbr + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, customUserMessage.c_str(), customUserMessage.size());

  001a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  001a7	72 05		 jb	 SHORT $LN101@WriteBootS@2
  001a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001ac	eb 03		 jmp	 SHORT $LN102@WriteBootS@2
$LN101@WriteBootS@2:
  001ae	83 c6 04	 add	 esi, 4
$LN102@WriteBootS@2:
  001b1	50		 push	 eax
  001b2	8d 8c 24 8a 03
	00 00		 lea	 ecx, DWORD PTR _mbr$[esp+1946]
  001b9	56		 push	 esi
  001ba	51		 push	 ecx
  001bb	e8 00 00 00 00	 call	 _memcpy
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@WriteBootS@2:

; 1174 : 		}
; 1175 : 
; 1176 : 		device.SeekAt (0);

  001c3	53		 push	 ebx
  001c4	53		 push	 ebx
  001c5	8d 8c 24 c0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1544]
  001cc	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 1177 : 		device.Write (mbr, sizeof (mbr));

  001d1	68 00 02 00 00	 push	 512			; 00000200H
  001d6	8d 94 24 f4 01
	00 00		 lea	 edx, DWORD PTR _mbr$[esp+1540]
  001dd	52		 push	 edx
  001de	8d 8c 24 c0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1544]
  001e5	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1178 : 
; 1179 : 		byte mbrVerificationBuf[TC_SECTOR_SIZE_BIOS];
; 1180 : 		device.SeekAt (0);

  001ea	53		 push	 ebx
  001eb	53		 push	 ebx
  001ec	8d 8c 24 c0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1544]
  001f3	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 1181 : 		device.Read (mbrVerificationBuf, sizeof (mbr));

  001f8	68 00 02 00 00	 push	 512			; 00000200H
  001fd	8d 84 24 f4 03
	00 00		 lea	 eax, DWORD PTR _mbrVerificationBuf$[esp+1540]
  00204	50		 push	 eax
  00205	8d 8c 24 c0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1544]
  0020c	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1182 : 
; 1183 : 		if (memcmp (mbr, mbrVerificationBuf, sizeof (mbr)) != 0)

  00211	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00216	33 c9		 xor	 ecx, ecx
  00218	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL9@WriteBootS@2:
  00220	8b 94 0c f0 01
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+ecx+1536]
  00227	3b 94 0c f0 03
	00 00		 cmp	 edx, DWORD PTR _mbrVerificationBuf$[esp+ecx+1536]
  0022e	75 46		 jne	 SHORT $LN11@WriteBootS@2
  00230	83 e8 04	 sub	 eax, 4
  00233	83 c1 04	 add	 ecx, 4
  00236	83 f8 04	 cmp	 eax, 4
  00239	73 e5		 jae	 SHORT $LL9@WriteBootS@2

; 1185 : 	}

  0023b	38 9c 24 b9 01
	00 00		 cmp	 BYTE PTR _device$[esp+1537], bl
  00242	74 1e		 je	 SHORT $LN146@WriteBootS@2
  00244	38 9c 24 b8 01
	00 00		 cmp	 BYTE PTR _device$[esp+1536], bl
  0024b	75 0e		 jne	 SHORT $LN145@WriteBootS@2
  0024d	8b 94 24 c8 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1552]
  00254	52		 push	 edx
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN145@WriteBootS@2:
  0025b	88 9c 24 b9 01
	00 00		 mov	 BYTE PTR _device$[esp+1537], bl
$LN146@WriteBootS@2:
  00262	83 bc 24 e8 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1584], 16 ; 00000010H
  0026a	72 7d		 jb	 SHORT $LN77@WriteBootS@2
  0026c	8b 84 24 d4 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+1564]
  00273	50		 push	 eax
  00274	eb 6b		 jmp	 SHORT $LN181@WriteBootS@2
$LN11@WriteBootS@2:

; 1184 : 			throw ErrorException ("ERROR_MBR_PROTECTED");

  00276	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0027b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T210657[esp+1540]
  0027f	33 c0		 xor	 eax, eax
  00281	51		 push	 ecx
  00282	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T210657[esp+1544], OFFSET ??_7ErrorException@CipherShed@@6B@
  0028a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T210657[esp+1548], OFFSET ??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@
  00292	c7 44 24 3c 07
	00 00 00	 mov	 DWORD PTR $T210657[esp+1576], 7
  0029a	89 5c 24 38	 mov	 DWORD PTR $T210657[esp+1572], ebx
  0029e	66 89 44 24 28	 mov	 WORD PTR $T210657[esp+1556], ax
  002a3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@WriteBootS@2:

; 1160 : 		{
; 1161 : 			return;

  002a8	38 9c 24 b9 01
	00 00		 cmp	 BYTE PTR _device$[esp+1537], bl
  002af	74 1e		 je	 SHORT $LN58@WriteBootS@2
  002b1	38 9c 24 b8 01
	00 00		 cmp	 BYTE PTR _device$[esp+1536], bl
  002b8	75 0e		 jne	 SHORT $LN57@WriteBootS@2
  002ba	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1552]
  002c1	51		 push	 ecx
  002c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN57@WriteBootS@2:
  002c8	88 9c 24 b9 01
	00 00		 mov	 BYTE PTR _device$[esp+1537], bl
$LN58@WriteBootS@2:
  002cf	83 bc 24 e8 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1584], 16 ; 00000010H
  002d7	72 10		 jb	 SHORT $LN77@WriteBootS@2
  002d9	8b 94 24 d4 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1564]
  002e0	52		 push	 edx
$LN181@WriteBootS@2:
  002e1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002e6	83 c4 04	 add	 esp, 4
$LN77@WriteBootS@2:

; 1185 : 	}

  002e9	8b 8c 24 f4 05
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1536]
  002f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f7	59		 pop	 ecx
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx
  002fa	8b 8c 24 e4 05
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1524]
  00301	33 cc		 xor	 ecx, esp
  00303	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00308	81 c4 f4 05 00
	00		 add	 esp, 1524		; 000005f4H
  0030e	c2 08 00	 ret	 8
$LN180@WriteBootS@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 8d 38 fa ff
	ff		 lea	 ecx, DWORD PTR $T210655[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  0000b	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 10 fa ff
	ff		 lea	 eax, DWORD PTR [edx-1520]
  00020	8b 8a 0c fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1524]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 08	 add	 eax, 8
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::BootEncryption::WriteBootSectorUserConfig
PUBLIC	?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ ; CipherShed::BootEncryption::GetHiddenOSCreationPhase
; Function compile flags: /Ogtpy
;	COMDAT ?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ
_TEXT	SEGMENT
_configFlags$ = -1					; size = 1
?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ PROC ; CipherShed::BootEncryption::GetHiddenOSCreationPhase, COMDAT
; _this$ = ecx

; 1189 : 	{

  00000	51		 push	 ecx

; 1190 : 		byte configFlags [TC_BOOT_CFG_FLAG_AREA_SIZE];
; 1191 : 
; 1192 : 		ReadBootSectorConfig (configFlags, sizeof(configFlags));

  00001	6a 00		 push	 0
  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 01		 push	 1
  00009	8d 44 24 13	 lea	 eax, DWORD PTR _configFlags$[esp+20]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig

; 1193 : 
; 1194 : 		return (configFlags[0] & TC_BOOT_CFG_MASK_HIDDEN_OS_CREATION_PHASE);

  00013	0f b6 44 24 03	 movzx	 eax, BYTE PTR _configFlags$[esp+4]
  00018	25 c0 00 00 00	 and	 eax, 192		; 000000c0H

; 1195 : 	}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ ENDP ; CipherShed::BootEncryption::GetHiddenOSCreationPhase
_TEXT	ENDS
PUBLIC	?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z ; CipherShed::BootEncryption::SetHiddenOSCreationPhase
; Function compile flags: /Ogtpy
;	COMDAT ?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z
_TEXT	SEGMENT
_configFlags$ = -1					; size = 1
_newPhase$ = 8						; size = 4
?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z PROC ; CipherShed::BootEncryption::SetHiddenOSCreationPhase, COMDAT
; _this$ = ecx

; 1199 : 	{

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 1200 : #if TC_BOOT_CFG_FLAG_AREA_SIZE != 1
; 1201 : #	error TC_BOOT_CFG_FLAG_AREA_SIZE != 1; revise GetHiddenOSCreationPhase() and SetHiddenOSCreationPhase()
; 1202 : #endif
; 1203 : 		byte configFlags [TC_BOOT_CFG_FLAG_AREA_SIZE];
; 1204 : 
; 1205 : 		ReadBootSectorConfig (configFlags, sizeof(configFlags));

  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	8d 44 24 17	 lea	 eax, DWORD PTR _configFlags$[esp+24]
  0000e	50		 push	 eax
  0000f	8b f1		 mov	 esi, ecx
  00011	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig

; 1206 : 
; 1207 : 		configFlags[0] &= (byte) ~TC_BOOT_CFG_MASK_HIDDEN_OS_CREATION_PHASE;

  00016	8a 4c 24 07	 mov	 cl, BYTE PTR _configFlags$[esp+8]
  0001a	80 e1 3f	 and	 cl, 63			; 0000003fH

; 1208 : 
; 1209 : 		configFlags[0] |= newPhase;

  0001d	0a 4c 24 0c	 or	 cl, BYTE PTR _newPhase$[esp+4]

; 1210 : 
; 1211 : 		WriteBootSectorConfig (configFlags);

  00021	8d 54 24 07	 lea	 edx, DWORD PTR _configFlags$[esp+8]
  00025	88 4c 24 07	 mov	 BYTE PTR _configFlags$[esp+8], cl
  00029	52		 push	 edx
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig
  00031	5e		 pop	 esi

; 1212 : 	}

  00032	59		 pop	 ecx
  00033	c2 04 00	 ret	 4
?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z ENDP ; CipherShed::BootEncryption::SetHiddenOSCreationPhase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$2
__catchsym$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$0
__unwindtable$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ
	DD	02H
	DD	FLAT:__tryblocktable$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$4
	DD	00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_configFlags$211441 = 11				; size = 1
??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ PROC ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::~Finally1278, COMDAT

; 1278 : 		});

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 30		 mov	 esi, DWORD PTR [eax]
  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 01		 push	 1
  00036	8d 4d 0b	 lea	 ecx, DWORD PTR _configFlags$211441[ebp]
  00039	51		 push	 ecx
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8b ce		 mov	 ecx, esi
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00047	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  0004c	80 65 0b 3f	 and	 BYTE PTR _configFlags$211441[ebp], 63 ; 0000003fH
  00050	8d 55 0b	 lea	 edx, DWORD PTR _configFlags$211441[ebp]
  00053	52		 push	 edx
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig
$LN12@Finally127:
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
__catch$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$0:
  0006f	b8 00 00 00 00	 mov	 eax, $LN12@Finally127
  00074	c3		 ret	 0
__catch$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ$2:
  00075	b8 00 00 00 00	 mov	 eax, $LN12@Finally127
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ ENDP ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::~Finally1278
PUBLIC	__$ArrayPad$
PUBLIC	?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z ; CipherShed::BootEncryption::InstallBootLoader
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z$2
__ehfuncinfo$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z
_TEXT	SEGMENT
$T211858 = -33276					; size = 8
$T211643 = -33276					; size = 8
$T211620 = -33276					; size = 8
$T211596 = -33276					; size = 8
$T211456 = -33276					; size = 4
$T211458 = -33268					; size = 36
$T211457 = -33232					; size = 384
_device$ = -32848					; size = 56
_mbr$ = -32792						; size = 512
_mbrVerificationBuf$ = -32280				; size = 512
_bootLoaderBuf$ = -31768				; size = 31744
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_preserveUserConfig$ = 8				; size = 1
_hiddenOSCreation$ = 12					; size = 1
?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z PROC ; CipherShed::BootEncryption::InstallBootLoader, COMDAT
; _this$ = ecx

; 1319 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	b8 ec 81 00 00	 mov	 eax, 33260		; 000081ecH
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	89 84 24 e8 81
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+33276], eax
  0002d	53		 push	 ebx
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c4		 xor	 eax, esp
  00037	50		 push	 eax
  00038	8d 84 24 00 82
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+33292]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1320 : 		byte bootLoaderBuf[TC_BOOT_LOADER_AREA_SIZE - TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE];
; 1321 : 		CreateBootLoaderInMemory (bootLoaderBuf, sizeof (bootLoaderBuf), false, hiddenOSCreation);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _hiddenOSCreation$[ebp]
  00048	50		 push	 eax
  00049	33 db		 xor	 ebx, ebx
  0004b	53		 push	 ebx
  0004c	8b f1		 mov	 esi, ecx
  0004e	68 00 7c 00 00	 push	 31744			; 00007c00H
  00053	8d 8c 24 00 06
	00 00		 lea	 ecx, DWORD PTR _bootLoaderBuf$[esp+33304]
  0005a	51		 push	 ecx
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z ; CipherShed::BootEncryption::CreateBootLoaderInMemory

; 1322 : 
; 1323 : 		// Write MBR
; 1324 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  00062	53		 push	 ebx
  00063	8d 54 24 40	 lea	 edx, DWORD PTR $T211457[esp+33296]
  00067	52		 push	 edx
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0006f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00072	8b cc		 mov	 ecx, esp
  00074	89 64 24 30	 mov	 DWORD PTR $T211456[esp+33324], esp
  00078	6a ff		 push	 -1
  0007a	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007d	53		 push	 ebx
  0007e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00085	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00088	50		 push	 eax
  00089	89 9c 24 34 82
	00 00		 mov	 DWORD PTR __$EHRec$[esp+33344], ebx
  00090	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00093	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00098	8d 8c 24 dc 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33324]
  0009f	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  000a4	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T211457[esp+33292]
  000a8	c6 84 24 08 82
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+33300], 2
  000b0	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1325 : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 1326 : 
; 1327 : 		device.SeekAt (0);

  000b5	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+33300], ebx
  000bc	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+33304], ebx
  000c3	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+33292], bl
  000ca	75 3b		 jne	 SHORT $LN40@InstallBoo
  000cc	53		 push	 ebx
  000cd	53		 push	 ebx
  000ce	33 c9		 xor	 ecx, ecx
  000d0	33 c0		 xor	 eax, eax
  000d2	51		 push	 ecx
  000d3	50		 push	 eax
  000d4	8b 84 24 dc 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+33324]
  000db	50		 push	 eax
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000e2	85 c0		 test	 eax, eax
  000e4	75 21		 jne	 SHORT $LN40@InstallBoo
  000e6	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T211596[esp+33292], OFFSET ??_7SystemException@CipherShed@@6B@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000f4	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000f9	8d 4c 24 14	 lea	 ecx, DWORD PTR $T211596[esp+33296]
  000fd	51		 push	 ecx
  000fe	89 44 24 1c	 mov	 DWORD PTR $T211596[esp+33304], eax
  00102	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@InstallBoo:

; 1328 : 		device.Read (mbr, sizeof (mbr));

  00107	68 00 02 00 00	 push	 512			; 00000200H
  0010c	8d 94 24 f8 01
	00 00		 lea	 edx, DWORD PTR _mbr$[esp+33296]
  00113	52		 push	 edx
  00114	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33300]
  0011b	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1329 : 
; 1330 : 		if (preserveUserConfig && BufferContainsString (mbr, sizeof (mbr), TC_APP_NAME_LEGACY))

  00120	38 5d 08	 cmp	 BYTE PTR _preserveUserConfig$[ebp], bl
  00123	0f 84 95 00 00
	00		 je	 $LN2@InstallBoo
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  0012e	8d 84 24 f8 01
	00 00		 lea	 eax, DWORD PTR _mbr$[esp+33296]
  00135	68 00 02 00 00	 push	 512			; 00000200H
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _BufferContainsString
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
  00143	85 c0		 test	 eax, eax
  00145	74 77		 je	 SHORT $LN2@InstallBoo

; 1331 : 		{
; 1332 : 			uint16 version = BE16 (*(uint16 *) (mbr + TC_BOOT_SECTOR_VERSION_OFFSET));

  00147	8b 8c 24 a2 03
	00 00		 mov	 ecx, DWORD PTR _mbr$[esp+33722]
  0014e	51		 push	 ecx
  0014f	e8 00 00 00 00	 call	 _MirrorBytes16
  00154	83 c4 04	 add	 esp, 4

; 1333 : 			if (version != 0)

  00157	66 85 c0	 test	 ax, ax
  0015a	74 62		 je	 SHORT $LN2@InstallBoo

; 1334 : 			{
; 1335 : 				bootLoaderBuf[TC_BOOT_SECTOR_USER_CONFIG_OFFSET] = mbr[TC_BOOT_SECTOR_USER_CONFIG_OFFSET];

  0015c	8a 94 24 aa 03
	00 00		 mov	 dl, BYTE PTR _mbr$[esp+33730]

; 1336 : 				memcpy (bootLoaderBuf + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, mbr + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH);

  00163	8b 84 24 8a 03
	00 00		 mov	 eax, DWORD PTR _mbr$[esp+33698]
  0016a	8b 8c 24 8e 03
	00 00		 mov	 ecx, DWORD PTR _mbr$[esp+33702]
  00171	88 94 24 aa 07
	00 00		 mov	 BYTE PTR _bootLoaderBuf$[esp+33730], dl
  00178	8b 94 24 92 03
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+33706]
  0017f	89 84 24 8a 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33698], eax
  00186	8b 84 24 96 03
	00 00		 mov	 eax, DWORD PTR _mbr$[esp+33710]
  0018d	89 8c 24 8e 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33702], ecx
  00194	8b 8c 24 9a 03
	00 00		 mov	 ecx, DWORD PTR _mbr$[esp+33714]
  0019b	89 94 24 92 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33706], edx
  001a2	8b 94 24 9e 03
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+33718]
  001a9	89 84 24 96 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33710], eax
  001b0	89 8c 24 9a 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33714], ecx
  001b7	89 94 24 9e 07
	00 00		 mov	 DWORD PTR _bootLoaderBuf$[esp+33718], edx
$LN2@InstallBoo:

; 1337 : 			}
; 1338 : 		}
; 1339 : 
; 1340 : 		memcpy (mbr, bootLoaderBuf, TC_MAX_MBR_BOOT_CODE_SIZE);

  001be	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  001c3	8d b4 24 f4 05
	00 00		 lea	 esi, DWORD PTR _bootLoaderBuf$[esp+33292]
  001ca	8d bc 24 f4 01
	00 00		 lea	 edi, DWORD PTR _mbr$[esp+33292]
  001d1	f3 a5		 rep movsd

; 1341 : 
; 1342 : 		device.SeekAt (0);

  001d3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetFilePointerEx@20
  001d9	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+33300], ebx
  001e0	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+33304], ebx
  001e7	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+33292], bl
  001ee	75 35		 jne	 SHORT $LN52@InstallBoo
  001f0	53		 push	 ebx
  001f1	53		 push	 ebx
  001f2	33 c0		 xor	 eax, eax
  001f4	53		 push	 ebx
  001f5	50		 push	 eax
  001f6	8b 84 24 dc 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+33324]
  001fd	50		 push	 eax
  001fe	ff d6		 call	 esi
  00200	85 c0		 test	 eax, eax
  00202	75 21		 jne	 SHORT $LN52@InstallBoo
  00204	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T211620[esp+33292], OFFSET ??_7SystemException@CipherShed@@6B@
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00212	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00217	8d 4c 24 14	 lea	 ecx, DWORD PTR $T211620[esp+33296]
  0021b	51		 push	 ecx
  0021c	89 44 24 1c	 mov	 DWORD PTR $T211620[esp+33304], eax
  00220	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@InstallBoo:

; 1343 : 		device.Write (mbr, sizeof (mbr));

  00225	68 00 02 00 00	 push	 512			; 00000200H
  0022a	8d 94 24 f8 01
	00 00		 lea	 edx, DWORD PTR _mbr$[esp+33296]
  00231	52		 push	 edx
  00232	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33300]
  00239	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1344 : 
; 1345 : 		byte mbrVerificationBuf[TC_SECTOR_SIZE_BIOS];
; 1346 : 		device.SeekAt (0);

  0023e	89 9c 24 c4 01
	00 00		 mov	 DWORD PTR _device$[esp+33300], ebx
  00245	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+33304], ebx
  0024c	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+33292], bl
  00253	75 35		 jne	 SHORT $LN63@InstallBoo
  00255	53		 push	 ebx
  00256	53		 push	 ebx
  00257	33 c0		 xor	 eax, eax
  00259	53		 push	 ebx
  0025a	50		 push	 eax
  0025b	8b 84 24 dc 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+33324]
  00262	50		 push	 eax
  00263	ff d6		 call	 esi
  00265	85 c0		 test	 eax, eax
  00267	75 21		 jne	 SHORT $LN63@InstallBoo
  00269	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T211643[esp+33292], OFFSET ??_7SystemException@CipherShed@@6B@
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00277	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0027c	8d 4c 24 14	 lea	 ecx, DWORD PTR $T211643[esp+33296]
  00280	51		 push	 ecx
  00281	89 44 24 1c	 mov	 DWORD PTR $T211643[esp+33304], eax
  00285	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@InstallBoo:

; 1347 : 		device.Read (mbrVerificationBuf, sizeof (mbr));

  0028a	68 00 02 00 00	 push	 512			; 00000200H
  0028f	8d 94 24 f8 03
	00 00		 lea	 edx, DWORD PTR _mbrVerificationBuf$[esp+33296]
  00296	52		 push	 edx
  00297	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33300]
  0029e	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1348 : 
; 1349 : 		if (memcmp (mbr, mbrVerificationBuf, sizeof (mbr)) != 0)

  002a3	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  002a8	33 c9		 xor	 ecx, ecx
  002aa	8d 9b 00 00 00
	00		 npad	 6
$LL7@InstallBoo:
  002b0	8b 94 0c f4 01
	00 00		 mov	 edx, DWORD PTR _mbr$[esp+ecx+33292]
  002b7	3b 94 0c f4 03
	00 00		 cmp	 edx, DWORD PTR _mbrVerificationBuf$[esp+ecx+33292]
  002be	75 5e		 jne	 SHORT $LN9@InstallBoo
  002c0	83 e8 04	 sub	 eax, 4
  002c3	83 c1 04	 add	 ecx, 4
  002c6	83 f8 04	 cmp	 eax, 4
  002c9	73 e5		 jae	 SHORT $LL7@InstallBoo

; 1351 : 
; 1352 : 		// Write boot loader
; 1353 : 		device.SeekAt (TC_SECTOR_SIZE_BIOS);

  002cb	c7 84 24 c4 01
	00 00 00 02 00
	00		 mov	 DWORD PTR _device$[esp+33300], 512 ; 00000200H
  002d6	89 9c 24 c8 01
	00 00		 mov	 DWORD PTR _device$[esp+33304], ebx
  002dd	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+33292], bl
  002e4	75 6a		 jne	 SHORT $LN112@InstallBoo
  002e6	8b 94 24 cc 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+33308]
  002ed	53		 push	 ebx
  002ee	53		 push	 ebx
  002ef	53		 push	 ebx
  002f0	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  002f5	50		 push	 eax
  002f6	52		 push	 edx
  002f7	ff d6		 call	 esi
  002f9	85 c0		 test	 eax, eax
  002fb	75 53		 jne	 SHORT $LN112@InstallBoo
  002fd	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T211858[esp+33292], OFFSET ??_7SystemException@CipherShed@@6B@
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0030b	89 44 24 14	 mov	 DWORD PTR $T211858[esp+33296], eax
  0030f	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00314	8d 44 24 14	 lea	 eax, DWORD PTR $T211858[esp+33296]
  00318	50		 push	 eax
  00319	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@InstallBoo:

; 1350 : 			throw ErrorException ("ERROR_MBR_PROTECTED");

  0031e	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00323	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T211458[esp+33296]
  00327	33 c0		 xor	 eax, eax
  00329	51		 push	 ecx
  0032a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T211458[esp+33300], OFFSET ??_7ErrorException@CipherShed@@6B@
  00332	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T211458[esp+33304], OFFSET ??_C@_0BE@GPJOEGCF@ERROR_MBR_PROTECTED?$AA@
  0033a	c7 44 24 40 07
	00 00 00	 mov	 DWORD PTR $T211458[esp+33332], 7
  00342	89 5c 24 3c	 mov	 DWORD PTR $T211458[esp+33328], ebx
  00346	66 89 44 24 2c	 mov	 WORD PTR $T211458[esp+33312], ax
  0034b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1351 : 
; 1352 : 		// Write boot loader
; 1353 : 		device.SeekAt (TC_SECTOR_SIZE_BIOS);

$LN112@InstallBoo:

; 1354 : 		device.Write (bootLoaderBuf + TC_SECTOR_SIZE_BIOS, sizeof (bootLoaderBuf) - TC_SECTOR_SIZE_BIOS);

  00350	68 00 7a 00 00	 push	 31232			; 00007a00H
  00355	8d 8c 24 f8 07
	00 00		 lea	 ecx, DWORD PTR _bootLoaderBuf$[esp+33808]
  0035c	51		 push	 ecx
  0035d	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33300]
  00364	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1355 : 	}

  00369	38 9c 24 bd 01
	00 00		 cmp	 BYTE PTR _device$[esp+33293], bl
  00370	74 1e		 je	 SHORT $LN127@InstallBoo
  00372	38 9c 24 bc 01
	00 00		 cmp	 BYTE PTR _device$[esp+33292], bl
  00379	75 0e		 jne	 SHORT $LN126@InstallBoo
  0037b	8b 94 24 cc 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+33308]
  00382	52		 push	 edx
  00383	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN126@InstallBoo:
  00389	88 9c 24 bd 01
	00 00		 mov	 BYTE PTR _device$[esp+33293], bl
$LN127@InstallBoo:
  00390	83 bc 24 ec 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+33340], 16 ; 00000010H
  00398	72 10		 jb	 SHORT $LN146@InstallBoo
  0039a	8b 84 24 d8 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+33320]
  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003a7	83 c4 04	 add	 esp, 4
$LN146@InstallBoo:
  003aa	8b 8c 24 00 82
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+33292]
  003b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b8	59		 pop	 ecx
  003b9	5f		 pop	 edi
  003ba	5e		 pop	 esi
  003bb	5b		 pop	 ebx
  003bc	8b 8c 24 e8 81
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+33276]
  003c3	33 cc		 xor	 ecx, esp
  003c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ca	8b e5		 mov	 esp, ebp
  003cc	5d		 pop	 ebp
  003cd	c2 08 00	 ret	 8
$LN162@InstallBoo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z$0:
  00000	8d 8d 30 7e ff
	ff		 lea	 ecx, DWORD PTR $T211457[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z$2:
  0000b	8d 8d b0 7f ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 04 7e ff
	ff		 lea	 eax, DWORD PTR [edx-33276]
  00020	8b 8a 00 7e ff
	ff		 mov	 ecx, DWORD PTR [edx-33280]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z ENDP ; CipherShed::BootEncryption::InstallBootLoader
PUBLIC	??_C@_0CH@FHEPLLOO@SYS_LOADER_UNAVAILABLE_FOR_RESCU@ ; `string'
PUBLIC	??_C@_0DG@FJDECNBN@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	??_C@_07DAAEPPCP@?$PPCD001?$AB?$AA@		; `string'
PUBLIC	??_C@_0BO@DHOJLLGB@CD001?$ABEL?5TORITO?5SPECIFICATION?$AA@ ; `string'
PUBLIC	??_C@_0CB@CJJIHEGK@CipherShed?5Rescue?5Disk?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_07NKOFPJFH@?$ABCD001?$AB?$AA@		; `string'
PUBLIC	??_C@_0DG@HGGNIJB@CipherShed?3?3BootEncryption?3?3Crea@ ; `string'
PUBLIC	_isoImagePath$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
EXTRN	_Warning:PROC
EXTRN	_MirrorBytes32:PROC
;	COMDAT ??_C@_0CH@FHEPLLOO@SYS_LOADER_UNAVAILABLE_FOR_RESCU@
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.h
CONST	SEGMENT
??_C@_0CH@FHEPLLOO@SYS_LOADER_UNAVAILABLE_FOR_RESCU@ DB 'SYS_LOADER_UNAVA'
	DB	'ILABLE_FOR_RESCUE_DISK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FJDECNBN@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DG@FJDECNBN@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::'
	DB	'BootEncryption::CreateRescueIsoImage:1468', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DAAEPPCP@?$PPCD001?$AB?$AA@
CONST	SEGMENT
??_C@_07DAAEPPCP@?$PPCD001?$AB?$AA@ DB 0ffH, 'CD001', 01H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DHOJLLGB@CD001?$ABEL?5TORITO?5SPECIFICATION?$AA@
CONST	SEGMENT
??_C@_0BO@DHOJLLGB@CD001?$ABEL?5TORITO?5SPECIFICATION?$AA@ DB 'CD001', 01H
	DB	'EL TORITO SPECIFICATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CJJIHEGK@CipherShed?5Rescue?5Disk?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CB@CJJIHEGK@CipherShed?5Rescue?5Disk?5?5?5?5?5?5?5?5?5?5@ DB 'Ciph'
	DB	'erShed Rescue Disk          ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NKOFPJFH@?$ABCD001?$AB?$AA@
CONST	SEGMENT
??_C@_07NKOFPJFH@?$ABCD001?$AB?$AA@ DB 01H, 'CD001', 01H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HGGNIJB@CipherShed?3?3BootEncryption?3?3Crea@
CONST	SEGMENT
??_C@_0DG@HGGNIJB@CipherShed?3?3BootEncryption?3?3Crea@ DB 'CipherShed::B'
	DB	'ootEncryption::CreateRescueIsoImage:1390', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff80H
	DD	FLAT:__catch$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__tryblocktable$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 04H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10
__ehfuncinfo$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	00H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$7
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T212073 = -612						; size = 384
_encStatus$ = -228					; size = 94
_e$149611 = -128					; size = 4
$T212076 = -124						; size = 12
_imageBuf$ = -112					; size = 8
$T212070 = -104						; size = 8
$T212071 = -96						; size = 8
_isoImagePath$GSCopy$ = -88				; size = 4
$T212077 = -84						; size = 4
$T212074 = -84						; size = 4
$T212072 = -84						; size = 4
_this$GSCopy$ = -80					; size = 4
_isoFile$149619 = -76					; size = 56
_sysBakFile$149609 = -76				; size = 56
_bootDevice$149605 = -76				; size = 56
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_initialSetup$ = 8					; size = 1
_isoImagePath$ = 12					; size = 4
?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::BootEncryption::CreateRescueIsoImage, COMDAT
; _this$ = ecx

; 1387 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 58 02 00
	00		 sub	 esp, 600		; 00000258H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1505 : 		}

  00031	8b 45 0c	 mov	 eax, DWORD PTR _isoImagePath$[ebp]
  00034	6a 5e		 push	 94			; 0000005eH
  00036	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR _encStatus$[ebp]
  0003c	52		 push	 edx
  0003d	6a 00		 push	 0
  0003f	6a 00		 push	 0
  00041	68 48 20 22 00	 push	 2236488			; 00222048H
  00046	89 4d b0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00049	89 45 a8	 mov	 DWORD PTR _isoImagePath$GSCopy$[ebp], eax
  0004c	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  00051	83 bd 5a ff ff
	ff 00		 cmp	 DWORD PTR _encStatus$[ebp+62], 0
  00058	74 1c		 je	 SHORT $LN7@CreateResc
  0005a	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0005f	8d 45 98	 lea	 eax, DWORD PTR $T212070[ebp]
  00062	50		 push	 eax
  00063	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T212070[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0006a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T212070[ebp+4], OFFSET ??_C@_0DG@HGGNIJB@CipherShed?3?3BootEncryption?3?3Crea@
  00071	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@CreateResc:

; 1388 : 		BootEncryptionStatus encStatus = GetStatus();
; 1389 : 		if (encStatus.SetupInProgress)
; 1390 : 			throw ParameterIncorrect (SRC_POS);
; 1391 : 
; 1392 : 		Buffer imageBuf (RescueIsoImageSize);

  00076	68 00 00 1c 00	 push	 1835008			; 001c0000H
  0007b	8d 4d 90	 lea	 ecx, DWORD PTR _imageBuf$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0Buffer@CipherShed@@QAE@I@Z ; CipherShed::Buffer::Buffer

; 1393 : 		
; 1394 : 		byte *image = imageBuf.Ptr();
; 1395 : 		memset (image, 0, RescueIsoImageSize);

  00083	8b 5d 90	 mov	 ebx, DWORD PTR _imageBuf$[ebp]
  00086	68 00 00 1c 00	 push	 1835008			; 001c0000H
  0008b	6a 00		 push	 0
  0008d	53		 push	 ebx
  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00095	e8 00 00 00 00	 call	 _memset

; 1396 : 
; 1397 : 		// Primary volume descriptor
; 1398 : 		strcpy ((char *)image + 0x8000, "\001CD001\001");

  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07NKOFPJFH@?$ABCD001?$AB?$AA@
  000a0	89 8b 00 80 00
	00		 mov	 DWORD PTR [ebx+32768], ecx
  000a6	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07NKOFPJFH@?$ABCD001?$AB?$AA@+4
  000ac	89 93 04 80 00
	00		 mov	 DWORD PTR [ebx+32772], edx

; 1399 : 		strcpy ((char *)image + 0x7fff + 41, "CipherShed Rescue Disk          ");

  000b2	8d bb 28 80 00
	00		 lea	 edi, DWORD PTR [ebx+32808]
  000b8	b9 08 00 00 00	 mov	 ecx, 8
  000bd	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CB@CJJIHEGK@CipherShed?5Rescue?5Disk?5?5?5?5?5?5?5?5?5?5@
  000c2	f3 a5		 rep movsd
  000c4	a4		 movsb

; 1400 : 		*(uint32 *) (image + 0x7fff + 81) = RescueIsoImageSize / 2048;
; 1401 : 		*(uint32 *) (image + 0x7fff + 85) = BE32 (RescueIsoImageSize / 2048);

  000c5	68 80 03 00 00	 push	 896			; 00000380H
  000ca	c7 83 50 80 00
	00 80 03 00 00	 mov	 DWORD PTR [ebx+32848], 896 ; 00000380H
  000d4	e8 00 00 00 00	 call	 _MirrorBytes32
  000d9	89 83 54 80 00
	00		 mov	 DWORD PTR [ebx+32852], eax

; 1402 : 		image[0x7fff + 121] = 1;

  000df	c6 83 78 80 00
	00 01		 mov	 BYTE PTR [ebx+32888], 1

; 1403 : 		image[0x7fff + 124] = 1;

  000e6	c6 83 7b 80 00
	00 01		 mov	 BYTE PTR [ebx+32891], 1

; 1404 : 		image[0x7fff + 125] = 1;

  000ed	c6 83 7c 80 00
	00 01		 mov	 BYTE PTR [ebx+32892], 1

; 1405 : 		image[0x7fff + 128] = 1;

  000f4	c6 83 7f 80 00
	00 01		 mov	 BYTE PTR [ebx+32895], 1

; 1406 : 		image[0x7fff + 130] = 8;

  000fb	c6 83 81 80 00
	00 08		 mov	 BYTE PTR [ebx+32897], 8

; 1407 : 		image[0x7fff + 131] = 8;

  00102	c6 83 82 80 00
	00 08		 mov	 BYTE PTR [ebx+32898], 8

; 1408 : 
; 1409 : 		image[0x7fff + 133] = 10;
; 1410 : 		image[0x7fff + 140] = 10;
; 1411 : 		image[0x7fff + 141] = 0x14;

  00109	c6 83 8c 80 00
	00 14		 mov	 BYTE PTR [ebx+32908], 20 ; 00000014H
  00110	b0 0a		 mov	 al, 10			; 0000000aH
  00112	88 83 84 80 00
	00		 mov	 BYTE PTR [ebx+32900], al
  00118	88 83 8b 80 00
	00		 mov	 BYTE PTR [ebx+32907], al

; 1412 : 		image[0x7fff + 157] = 0x22;
; 1413 : 		image[0x7fff + 159] = 0x18;

  0011e	b0 18		 mov	 al, 24			; 00000018H
  00120	88 83 9e 80 00
	00		 mov	 BYTE PTR [ebx+32926], al
  00126	b2 22		 mov	 dl, 34			; 00000022H
  00128	88 93 9c 80 00
	00		 mov	 BYTE PTR [ebx+32924], dl

; 1414 : 
; 1415 : 		// Boot record volume descriptor
; 1416 : 		strcpy ((char *)image + 0x8801, "CD001\001EL TORITO SPECIFICATION");

  0012e	8d bb 01 88 00
	00		 lea	 edi, DWORD PTR [ebx+34817]
  00134	b9 07 00 00 00	 mov	 ecx, 7
  00139	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BO@DHOJLLGB@CD001?$ABEL?5TORITO?5SPECIFICATION?$AA@
  0013e	f3 a5		 rep movsd
  00140	66 a5		 movsw

; 1417 : 		image[0x8800 + 0x47] = 0x19;

  00142	c6 83 47 88 00
	00 19		 mov	 BYTE PTR [ebx+34887], 25 ; 00000019H

; 1418 : 
; 1419 : 		// Volume descriptor set terminator
; 1420 : 		strcpy ((char *)image + 0x9000, "\377CD001\001");

  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07DAAEPPCP@?$PPCD001?$AB?$AA@
  0014f	89 8b 00 90 00
	00		 mov	 DWORD PTR [ebx+36864], ecx
  00155	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07DAAEPPCP@?$PPCD001?$AB?$AA@+4
  0015b	89 8b 04 90 00
	00		 mov	 DWORD PTR [ebx+36868], ecx

; 1421 : 
; 1422 : 		// Path table
; 1423 : 		image[0xA000 + 0] = 1;
; 1424 : 		image[0xA000 + 2] = 0x18;
; 1425 : 		image[0xA000 + 6] = 1;
; 1426 : 
; 1427 : 		// Root directory
; 1428 : 		image[0xc000 + 0] = 0x22;

  00161	88 93 00 c0 00
	00		 mov	 BYTE PTR [ebx+49152], dl

; 1429 : 		image[0xc000 + 2] = 0x18;
; 1430 : 		image[0xc000 + 9] = 0x18;
; 1431 : 		image[0xc000 + 11] = 0x08;
; 1432 : 		image[0xc000 + 16] = 0x08;
; 1433 : 		image[0xc000 + 25] = 0x02;
; 1434 : 		image[0xc000 + 28] = 0x01;
; 1435 : 		image[0xc000 + 31] = 0x01;
; 1436 : 		image[0xc000 + 32] = 0x01;
; 1437 : 		image[0xc000 + 34] = 0x22;

  00167	88 93 22 c0 00
	00		 mov	 BYTE PTR [ebx+49186], dl
  0016d	88 83 02 a0 00
	00		 mov	 BYTE PTR [ebx+40962], al
  00173	88 83 02 c0 00
	00		 mov	 BYTE PTR [ebx+49154], al
  00179	88 83 09 c0 00
	00		 mov	 BYTE PTR [ebx+49161], al

; 1438 : 		image[0xc000 + 36] = 0x18;

  0017f	88 83 24 c0 00
	00		 mov	 BYTE PTR [ebx+49188], al

; 1439 : 		image[0xc000 + 43] = 0x18;

  00185	88 83 2b c0 00
	00		 mov	 BYTE PTR [ebx+49195], al
  0018b	c6 83 00 a0 00
	00 01		 mov	 BYTE PTR [ebx+40960], 1
  00192	c6 83 06 a0 00
	00 01		 mov	 BYTE PTR [ebx+40966], 1
  00199	c6 83 0b c0 00
	00 08		 mov	 BYTE PTR [ebx+49163], 8
  001a0	c6 83 10 c0 00
	00 08		 mov	 BYTE PTR [ebx+49168], 8
  001a7	c6 83 1c c0 00
	00 01		 mov	 BYTE PTR [ebx+49180], 1
  001ae	c6 83 1f c0 00
	00 01		 mov	 BYTE PTR [ebx+49183], 1
  001b5	c6 83 20 c0 00
	00 01		 mov	 BYTE PTR [ebx+49184], 1

; 1440 : 		image[0xc000 + 45] = 0x08;

  001bc	c6 83 2d c0 00
	00 08		 mov	 BYTE PTR [ebx+49197], 8

; 1441 : 		image[0xc000 + 50] = 0x08;

  001c3	c6 83 32 c0 00
	00 08		 mov	 BYTE PTR [ebx+49202], 8

; 1442 : 		image[0xc000 + 59] = 0x02;
; 1443 : 		image[0xc000 + 62] = 0x01;

  001ca	c6 83 3e c0 00
	00 01		 mov	 BYTE PTR [ebx+49214], 1

; 1444 : 		*(uint32 *) (image + 0xc000 + 65) = 0x010101;

  001d1	c7 83 41 c0 00
	00 01 01 01 00	 mov	 DWORD PTR [ebx+49217], 65793 ; 00010101H

; 1445 : 
; 1446 : 		// Validation entry
; 1447 : 		image[0xc800] = 1;

  001db	c6 83 00 c8 00
	00 01		 mov	 BYTE PTR [ebx+51200], 1
  001e2	b1 02		 mov	 cl, 2
  001e4	88 8b 19 c0 00
	00		 mov	 BYTE PTR [ebx+49177], cl
  001ea	88 8b 3b c0 00
	00		 mov	 BYTE PTR [ebx+49211], cl

; 1448 : 		int offset = 0xc800 + 0x1c;
; 1449 : 		image[offset++] = 0xaa;

  001f0	b2 aa		 mov	 dl, 170			; 000000aaH
  001f2	88 93 1c c8 00
	00		 mov	 BYTE PTR [ebx+51228], dl

; 1450 : 		image[offset++] = 0x55;

  001f8	b0 55		 mov	 al, 85			; 00000055H
  001fa	88 83 1d c8 00
	00		 mov	 BYTE PTR [ebx+51229], al

; 1451 : 		image[offset++] = 0x55;

  00200	88 83 1e c8 00
	00		 mov	 BYTE PTR [ebx+51230], al

; 1452 : 		image[offset] = 0xaa;

  00206	88 93 1f c8 00
	00		 mov	 BYTE PTR [ebx+51231], dl

; 1453 : 
; 1454 : 		// Initial entry
; 1455 : 		offset = 0xc820;
; 1456 : 		image[offset++] = 0x88;

  0020c	c6 83 20 c8 00
	00 88		 mov	 BYTE PTR [ebx+51232], 136 ; 00000088H
  00213	83 c4 10	 add	 esp, 16			; 00000010H

; 1457 : 		image[offset++] = 2;

  00216	88 8b 21 c8 00
	00		 mov	 BYTE PTR [ebx+51233], cl

; 1458 : 		image[0xc820 + 6] = 1;

  0021c	c6 83 26 c8 00
	00 01		 mov	 BYTE PTR [ebx+51238], 1

; 1459 : 		image[0xc820 + 8] = TC_CD_BOOT_LOADER_SECTOR;

  00223	c6 83 28 c8 00
	00 1a		 mov	 BYTE PTR [ebx+51240], 26 ; 0000001aH

; 1460 : 
; 1461 : 		// CipherShed Boot Loader
; 1462 : 		CreateBootLoaderInMemory (image + TC_CD_BOOTSECTOR_OFFSET, TC_BOOT_LOADER_AREA_SIZE, true);

  0022a	6a 00		 push	 0
  0022c	8b 75 b0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0022f	6a 01		 push	 1
  00231	68 00 7e 00 00	 push	 32256			; 00007e00H
  00236	8d 93 00 d0 00
	00		 lea	 edx, DWORD PTR [ebx+53248]
  0023c	52		 push	 edx
  0023d	8b ce		 mov	 ecx, esi
  0023f	e8 00 00 00 00	 call	 ?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z ; CipherShed::BootEncryption::CreateBootLoaderInMemory

; 1463 : 
; 1464 : 		// Volume header
; 1465 : 		if (initialSetup)

  00244	80 7d 08 00	 cmp	 BYTE PTR _initialSetup$[ebp], 0
  00248	74 3d		 je	 SHORT $LN6@CreateResc

; 1466 : 		{
; 1467 : 			if (!RescueVolumeHeaderValid)

  0024a	80 be 16 06 00
	00 00		 cmp	 BYTE PTR [esi+1558], 0
  00251	75 1c		 jne	 SHORT $LN5@CreateResc

; 1468 : 				throw ParameterIncorrect (SRC_POS);

  00253	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00258	8d 45 a0	 lea	 eax, DWORD PTR $T212071[ebp]
  0025b	50		 push	 eax
  0025c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T212071[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00263	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T212071[ebp+4], OFFSET ??_C@_0DG@FJDECNBN@CipherShed?3?3BootEncryption?3?3Crea@
  0026a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@CreateResc:

; 1469 : 
; 1470 : 			memcpy (image + TC_CD_BOOTSECTOR_OFFSET + TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET, RescueVolumeHeader, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  0026f	81 c6 14 02 00
	00		 add	 esi, 532		; 00000214H
  00275	8d bb 00 4c 01
	00		 lea	 edi, DWORD PTR [ebx+84992]
  0027b	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00280	f3 a5		 rep movsd

; 1471 : 		}
; 1472 : 		else

  00282	8b 75 b0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00285	eb 7d		 jmp	 SHORT $LN4@CreateResc
$LN6@CreateResc:

; 1473 : 		{
; 1474 : 			Device bootDevice (GetSystemDriveConfiguration().DevicePath, true);

  00287	6a 01		 push	 1
  00289	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T212073[ebp]
  0028f	51		 push	 ecx
  00290	8b ce		 mov	 ecx, esi
  00292	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00297	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0029a	8b cc		 mov	 ecx, esp
  0029c	89 65 ac	 mov	 DWORD PTR $T212072[ebp], esp
  0029f	6a ff		 push	 -1
  002a1	83 c0 1c	 add	 eax, 28			; 0000001cH
  002a4	6a 00		 push	 0
  002a6	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  002ad	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  002b4	50		 push	 eax
  002b5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  002b9	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  002bd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  002c2	8d 4d b4	 lea	 ecx, DWORD PTR _bootDevice$149605[ebp]
  002c5	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  002ca	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T212073[ebp]
  002d0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002d4	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1475 : 			bootDevice.SeekAt (TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET);

  002d9	6a 00		 push	 0
  002db	68 00 7c 00 00	 push	 31744			; 00007c00H
  002e0	8d 4d b4	 lea	 ecx, DWORD PTR _bootDevice$149605[ebp]
  002e3	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 1476 : 			bootDevice.Read (image + TC_CD_BOOTSECTOR_OFFSET + TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  002e8	68 00 02 00 00	 push	 512			; 00000200H
  002ed	8d 93 00 4c 01
	00		 lea	 edx, DWORD PTR [ebx+84992]
  002f3	52		 push	 edx
  002f4	8d 4d b4	 lea	 ecx, DWORD PTR _bootDevice$149605[ebp]
  002f7	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1477 : 		}

  002fc	8d 4d b4	 lea	 ecx, DWORD PTR _bootDevice$149605[ebp]
  002ff	e8 00 00 00 00	 call	 ??1Device@CipherShed@@QAE@XZ
$LN4@CreateResc:

; 1478 : 
; 1479 : 		// Original system loader
; 1480 : 		try
; 1481 : 		{
; 1482 : 			File sysBakFile (GetSystemLoaderBackupPath(), true);

  00304	6a 00		 push	 0
  00306	6a 01		 push	 1
  00308	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0030b	8b c4		 mov	 eax, esp
  0030d	89 65 ac	 mov	 DWORD PTR $T212074[ebp], esp
  00310	50		 push	 eax
  00311	8b ce		 mov	 ecx, esi
  00313	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00317	e8 00 00 00 00	 call	 ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
  0031c	8d 4d b4	 lea	 ecx, DWORD PTR _sysBakFile$149609[ebp]
  0031f	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File

; 1483 : 			sysBakFile.Read (image + TC_CD_BOOTSECTOR_OFFSET + TC_ORIG_BOOT_LOADER_BACKUP_SECTOR_OFFSET, TC_BOOT_LOADER_AREA_SIZE);

  00324	68 00 7e 00 00	 push	 32256			; 00007e00H
  00329	8d 8b 00 4e 01
	00		 lea	 ecx, DWORD PTR [ebx+85504]
  0032f	51		 push	 ecx
  00330	8d 4d b4	 lea	 ecx, DWORD PTR _sysBakFile$149609[ebp]
  00333	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00337	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1484 : 			
; 1485 : 			image[TC_CD_BOOTSECTOR_OFFSET + TC_BOOT_SECTOR_CONFIG_OFFSET] |= TC_BOOT_CFG_FLAG_RESCUE_DISK_ORIG_SYS_LOADER;

  0033c	80 8b b7 d1 00
	00 20		 or	 BYTE PTR [ebx+53687], 32 ; 00000020H

; 1486 : 		}

  00343	8d 4d b4	 lea	 ecx, DWORD PTR _sysBakFile$149609[ebp]
  00346	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
  0034b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00352	eb 2f		 jmp	 SHORT $LN21@CreateResc
__catch$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:

; 1487 : 		catch (Exception &e)
; 1488 : 		{
; 1489 : 			e.Show (ParentWindow);

  00354	8b 4d 80	 mov	 ecx, DWORD PTR _e$149611[ebp]
  00357	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0035a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035c	8b 00		 mov	 eax, DWORD PTR [eax]
  0035e	8b 12		 mov	 edx, DWORD PTR [edx]
  00360	50		 push	 eax
  00361	ff d2		 call	 edx

; 1490 : 			Warning ("SYS_LOADER_UNAVAILABLE_FOR_RESCUE_DISK");

  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FHEPLLOO@SYS_LOADER_UNAVAILABLE_FOR_RESCU@
  00368	e8 00 00 00 00	 call	 _Warning
  0036d	83 c4 04	 add	 esp, 4

; 1491 : 		}

  00370	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00377	b8 00 00 00 00	 mov	 eax, $LN67@CreateResc
  0037c	c3		 ret	 0
$LN67@CreateResc:
  0037d	8b 5d 90	 mov	 ebx, DWORD PTR _imageBuf$[ebp]
  00380	8b 75 b0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN21@CreateResc:

; 1492 : 		
; 1493 : 		// Boot loader backup
; 1494 : 		CreateBootLoaderInMemory (image + TC_CD_BOOTSECTOR_OFFSET + TC_BOOT_LOADER_BACKUP_RESCUE_DISK_SECTOR_OFFSET, TC_BOOT_LOADER_AREA_SIZE, false);

  00383	6a 00		 push	 0
  00385	6a 00		 push	 0
  00387	68 00 7e 00 00	 push	 32256			; 00007e00H
  0038c	8d 83 00 cc 01
	00		 lea	 eax, DWORD PTR [ebx+117760]
  00392	50		 push	 eax
  00393	8b ce		 mov	 ecx, esi
  00395	e8 00 00 00 00	 call	 ?CreateBootLoaderInMemory@BootEncryption@CipherShed@@IAEXPAEI_N1@Z ; CipherShed::BootEncryption::CreateBootLoaderInMemory

; 1495 : 
; 1496 : 		RescueIsoImage = new byte[RescueIsoImageSize];

  0039a	68 00 00 1c 00	 push	 1835008			; 001c0000H
  0039f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  003a4	83 c4 04	 add	 esp, 4
  003a7	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax

; 1497 : 		if (!RescueIsoImage)

  003ad	85 c0		 test	 eax, eax
  003af	75 24		 jne	 SHORT $LN2@CreateResc

; 1498 : 			throw bad_alloc();

  003b1	6a 01		 push	 1
  003b3	68 00 00 00 00	 push	 OFFSET __bad_alloc_Message
  003b8	8d 4d 84	 lea	 ecx, DWORD PTR $T212076[ebp]
  003bb	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBDH@Z ; std::exception::exception
  003c0	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  003c5	8d 4d 84	 lea	 ecx, DWORD PTR $T212076[ebp]
  003c8	51		 push	 ecx
  003c9	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T212076[ebp], OFFSET ??_7bad_alloc@std@@6B@
  003d0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@CreateResc:

; 1499 : 		memcpy (RescueIsoImage, image, RescueIsoImageSize);

  003d5	68 00 00 1c 00	 push	 1835008			; 001c0000H
  003da	53		 push	 ebx
  003db	50		 push	 eax
  003dc	e8 00 00 00 00	 call	 _memcpy

; 1500 : 
; 1501 : 		if (!isoImagePath.empty())

  003e1	8b 45 a8	 mov	 eax, DWORD PTR _isoImagePath$GSCopy$[ebp]
  003e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e7	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  003eb	74 34		 je	 SHORT $LN1@CreateResc

; 1502 : 		{
; 1503 : 			File isoFile (isoImagePath, false, true);

  003ed	6a 01		 push	 1
  003ef	6a 00		 push	 0
  003f1	83 ec 1c	 sub	 esp, 28			; 0000001cH
  003f4	8b cc		 mov	 ecx, esp
  003f6	89 65 ac	 mov	 DWORD PTR $T212077[ebp], esp
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003ff	8d 4d b4	 lea	 ecx, DWORD PTR _isoFile$149619[ebp]
  00402	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File

; 1504 : 			isoFile.Write (image, RescueIsoImageSize);

  00407	68 00 00 1c 00	 push	 1835008			; 001c0000H
  0040c	53		 push	 ebx
  0040d	8d 4d b4	 lea	 ecx, DWORD PTR _isoFile$149619[ebp]
  00410	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00414	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1505 : 		}

  00419	8d 4d b4	 lea	 ecx, DWORD PTR _isoFile$149619[ebp]
  0041c	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
$LN1@CreateResc:

; 1506 : 	}

  00421	53		 push	 ebx
  00422	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00427	83 c4 04	 add	 esp, 4
  0042a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0042d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00434	59		 pop	 ecx
  00435	5f		 pop	 edi
  00436	5e		 pop	 esi
  00437	5b		 pop	 ebx
  00438	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043b	33 cd		 xor	 ecx, ebp
  0043d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00442	8b e5		 mov	 esp, ebp
  00444	5d		 pop	 ebp
  00445	c2 08 00	 ret	 8
$LN69@CreateResc:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR _imageBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Buffer@CipherShed@@QAE@XZ ; CipherShed::Buffer::~Buffer
__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00008	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T212073[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
  00013	8d 4d b4	 lea	 ecx, DWORD PTR _bootDevice$149605[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$7:
  0001b	8d 4d b4	 lea	 ecx, DWORD PTR _sysBakFile$149609[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__unwindfunclet$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9:
  00023	8d 4d b4	 lea	 ecx, DWORD PTR _isoFile$149619[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__ehhandler$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a 98 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-616]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::BootEncryption::CreateRescueIsoImage
PUBLIC	??_C@_0DF@BLHMMPKG@CipherShed?3?3BootEncryption?3?3Inst@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::InstallVolumeHeader
;	COMDAT ??_C@_0DF@BLHMMPKG@CipherShed?3?3BootEncryption?3?3Inst@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DF@BLHMMPKG@CipherShed?3?3BootEncryption?3?3Inst@ DB 'CipherShed::'
	DB	'BootEncryption::InstallVolumeHeader:1597', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ$2
__ehfuncinfo$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ
_TEXT	SEGMENT
$T212252 = -472						; size = 4
$T212251 = -472						; size = 8
$T212388 = -464						; size = 8
$T212253 = -456						; size = 384
_device$ = -72						; size = 56
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ PROC ; CipherShed::BootEncryption::InstallVolumeHeader, COMDAT
; _this$ = ecx

; 1595 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 c8 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+472], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c4		 xor	 eax, esp
  0002b	50		 push	 eax
  0002c	8d 84 24 d8 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+484]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	8b f1		 mov	 esi, ecx

; 1596 : 		if (!VolumeHeaderValid)

  0003b	33 db		 xor	 ebx, ebx
  0003d	38 9e 17 06 00
	00		 cmp	 BYTE PTR [esi+1559], bl
  00043	75 1f		 jne	 SHORT $LN1@InstallVol

; 1597 : 			throw ParameterIncorrect (SRC_POS);

  00045	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0004a	8d 44 24 10	 lea	 eax, DWORD PTR $T212251[esp+488]
  0004e	50		 push	 eax
  0004f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T212251[esp+492], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00057	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T212251[esp+496], OFFSET ??_C@_0DF@BLHMMPKG@CipherShed?3?3BootEncryption?3?3Inst@
  0005f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@InstallVol:

; 1598 : 
; 1599 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  00064	53		 push	 ebx
  00065	8d 4c 24 20	 lea	 ecx, DWORD PTR $T212253[esp+488]
  00069	51		 push	 ecx
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00071	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00074	8b cc		 mov	 ecx, esp
  00076	89 64 24 2c	 mov	 DWORD PTR $T212252[esp+516], esp
  0007a	6a ff		 push	 -1
  0007c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007f	53		 push	 ebx
  00080	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00087	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0008a	50		 push	 eax
  0008b	89 9c 24 0c 02
	00 00		 mov	 DWORD PTR __$EHRec$[esp+536], ebx
  00092	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00095	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0009a	8d 8c 24 bc 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+516]
  000a1	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  000a6	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T212253[esp+484]
  000aa	c6 84 24 e0 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+492], 2
  000b2	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1600 : 
; 1601 : 		device.SeekAt (TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET);

  000b7	b8 00 7c 00 00	 mov	 eax, 31744		; 00007c00H
  000bc	89 84 24 a4 01
	00 00		 mov	 DWORD PTR _device$[esp+492], eax
  000c3	89 9c 24 a8 01
	00 00		 mov	 DWORD PTR _device$[esp+496], ebx
  000ca	38 9c 24 9c 01
	00 00		 cmp	 BYTE PTR _device$[esp+484], bl
  000d1	75 39		 jne	 SHORT $LN38@InstallVol
  000d3	8b 94 24 ac 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+500]
  000da	53		 push	 ebx
  000db	53		 push	 ebx
  000dc	33 c9		 xor	 ecx, ecx
  000de	51		 push	 ecx
  000df	50		 push	 eax
  000e0	52		 push	 edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000e7	85 c0		 test	 eax, eax
  000e9	75 21		 jne	 SHORT $LN38@InstallVol
  000eb	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T212388[esp+484], OFFSET ??_7SystemException@CipherShed@@6B@
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000f9	89 44 24 18	 mov	 DWORD PTR $T212388[esp+488], eax
  000fd	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00102	8d 44 24 18	 lea	 eax, DWORD PTR $T212388[esp+488]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@InstallVol:

; 1602 : 		device.Write ((byte *) VolumeHeader, sizeof (VolumeHeader));

  0010c	68 00 02 00 00	 push	 512			; 00000200H
  00111	81 c6 14 04 00
	00		 add	 esi, 1044		; 00000414H
  00117	56		 push	 esi
  00118	8d 8c 24 a4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+492]
  0011f	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1603 : 	}

  00124	38 9c 24 9d 01
	00 00		 cmp	 BYTE PTR _device$[esp+485], bl
  0012b	74 1e		 je	 SHORT $LN54@InstallVol
  0012d	38 9c 24 9c 01
	00 00		 cmp	 BYTE PTR _device$[esp+484], bl
  00134	75 0e		 jne	 SHORT $LN53@InstallVol
  00136	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+500]
  0013d	51		 push	 ecx
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN53@InstallVol:
  00144	88 9c 24 9d 01
	00 00		 mov	 BYTE PTR _device$[esp+485], bl
$LN54@InstallVol:
  0014b	83 bc 24 cc 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+532], 16 ; 00000010H
  00153	72 10		 jb	 SHORT $LN73@InstallVol
  00155	8b 94 24 b8 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+512]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00162	83 c4 04	 add	 esp, 4
$LN73@InstallVol:
  00165	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+484]
  0016c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00173	59		 pop	 ecx
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+472]
  0017d	33 cc		 xor	 ecx, esp
  0017f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00184	81 c4 d8 01 00
	00		 add	 esp, 472		; 000001d8H
  0018a	c3		 ret	 0
$LN84@InstallVol:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ$0:
  00000	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T212253[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ$2:
  0000b	8d 4d b8	 lea	 ecx, DWORD PTR _device$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 82 2c fe ff
	ff		 lea	 eax, DWORD PTR [edx-468]
  0001d	8b 8a 28 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-472]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	83 c0 08	 add	 eax, 8
  0002d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ ENDP ; CipherShed::BootEncryption::InstallVolumeHeader
PUBLIC	__TI2?AUUserAbort@CipherShed@@
PUBLIC	??_C@_0CB@MECAALD@TC_BOOT_LOADER_ALREADY_INSTALLED@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::BackupSystemLoader
PUBLIC	__CTA2?AUUserAbort@CipherShed@@
PUBLIC	__CT??_R0?AUUserAbort@CipherShed@@@8??0UserAbort@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0UserAbort@CipherShed@@QAE@ABU01@@Z		; CipherShed::UserAbort::UserAbort
EXTRN	_AskWarnNoYes:PROC
;	COMDAT __CT??_R0?AUUserAbort@CipherShed@@@8??0UserAbort@CipherShed@@QAE@ABU01@@Z4
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__CT??_R0?AUUserAbort@CipherShed@@@8??0UserAbort@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUUserAbort@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0UserAbort@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUUserAbort@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUUserAbort@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUUserAbort@CipherShed@@@8??0UserAbort@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUUserAbort@CipherShed@@
xdata$x	SEGMENT
__TI2?AUUserAbort@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUUserAbort@CipherShed@@
xdata$x	ENDS
;	COMDAT ??_C@_0CB@MECAALD@TC_BOOT_LOADER_ALREADY_INSTALLED@
CONST	SEGMENT
??_C@_0CB@MECAALD@TC_BOOT_LOADER_ALREADY_INSTALLED@ DB 'TC_BOOT_LOADER_AL'
	DB	'READY_INSTALLED', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$4
__ehfuncinfo$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ
_TEXT	SEGMENT
$T212747 = -32776					; size = 8
$T212607 = -32776					; size = 4
$T212606 = -32776					; size = 4
$T212604 = -32776					; size = 4
$T212605 = -32768					; size = 384
_device$ = -32384					; size = 56
_backupFile$ = -32328					; size = 56
_bootLoaderBuf$ = -32272				; size = 32256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ PROC ; CipherShed::BootEncryption::BackupSystemLoader, COMDAT
; _this$ = ecx

; 1629 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 fc 7f 00 00	 mov	 eax, 32764		; 00007ffcH
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 f8 7f
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+32776], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c4		 xor	 eax, esp
  00031	50		 push	 eax
  00032	8d 84 24 10 80
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+32796]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1630 : 		Device device (GetSystemDriveConfiguration().DevicePath, true);

  0003f	6a 01		 push	 1
  00041	8d 44 24 20	 lea	 eax, DWORD PTR $T212605[esp+32800]
  00045	50		 push	 eax
  00046	8b f9		 mov	 edi, ecx
  00048	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0004d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00050	8b cc		 mov	 ecx, esp
  00052	89 64 24 34	 mov	 DWORD PTR $T212604[esp+32828], esp
  00056	33 db		 xor	 ebx, ebx
  00058	6a ff		 push	 -1
  0005a	83 c0 1c	 add	 eax, 28			; 0000001cH
  0005d	53		 push	 ebx
  0005e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00065	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00068	50		 push	 eax
  00069	89 9c 24 44 80
	00 00		 mov	 DWORD PTR __$EHRec$[esp+32848], ebx
  00070	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	8d 8c 24 bc 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+32828]
  0007f	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  00084	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T212605[esp+32796]
  00088	c6 84 24 18 80
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+32804], 2
  00090	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1631 : 	
; 1632 : 		byte bootLoaderBuf[TC_BOOT_LOADER_AREA_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS];
; 1633 : 
; 1634 : 		device.SeekAt (0);

  00095	89 9c 24 a4 01
	00 00		 mov	 DWORD PTR _device$[esp+32804], ebx
  0009c	89 9c 24 a8 01
	00 00		 mov	 DWORD PTR _device$[esp+32808], ebx
  000a3	38 9c 24 9c 01
	00 00		 cmp	 BYTE PTR _device$[esp+32796], bl
  000aa	75 3b		 jne	 SHORT $LN44@BackupSyst
  000ac	53		 push	 ebx
  000ad	53		 push	 ebx
  000ae	33 c9		 xor	 ecx, ecx
  000b0	51		 push	 ecx
  000b1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+32824]
  000b8	33 c0		 xor	 eax, eax
  000ba	50		 push	 eax
  000bb	51		 push	 ecx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000c2	85 c0		 test	 eax, eax
  000c4	75 21		 jne	 SHORT $LN44@BackupSyst
  000c6	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T212747[esp+32796], OFFSET ??_7SystemException@CipherShed@@6B@
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000d9	8d 54 24 18	 lea	 edx, DWORD PTR $T212747[esp+32800]
  000dd	52		 push	 edx
  000de	89 44 24 20	 mov	 DWORD PTR $T212747[esp+32808], eax
  000e2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@BackupSyst:

; 1635 : 		device.Read (bootLoaderBuf, sizeof (bootLoaderBuf));

  000e7	68 00 7e 00 00	 push	 32256			; 00007e00H
  000ec	8d 84 24 10 02
	00 00		 lea	 eax, DWORD PTR _bootLoaderBuf$[esp+32800]
  000f3	50		 push	 eax
  000f4	8d 8c 24 a4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+32804]
  000fb	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1636 : 
; 1637 : 		// Prevent CipherShed loader from being backed up
; 1638 : 		for (size_t i = 0; i < sizeof (bootLoaderBuf) - strlen (TC_APP_NAME_LEGACY); ++i)

  00100	33 f6		 xor	 esi, esi
$LL5@BackupSyst:

; 1639 : 		{
; 1640 : 			if (memcmp (bootLoaderBuf + i, TC_APP_NAME_LEGACY, strlen (TC_APP_NAME_LEGACY)) == 0)

  00102	b8 09 00 00 00	 mov	 eax, 9
  00107	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  0010c	8d 94 34 0c 02
	00 00		 lea	 edx, DWORD PTR _bootLoaderBuf$[esp+esi+32796]
$LL9@BackupSyst:
  00113	8b 2a		 mov	 ebp, DWORD PTR [edx]
  00115	3b 29		 cmp	 ebp, DWORD PTR [ecx]
  00117	75 18		 jne	 SHORT $LN4@BackupSyst
  00119	83 e8 04	 sub	 eax, 4
  0011c	83 c1 04	 add	 ecx, 4
  0011f	83 c2 04	 add	 edx, 4
  00122	83 f8 04	 cmp	 eax, 4
  00125	73 ec		 jae	 SHORT $LL9@BackupSyst
  00127	8a 09		 mov	 cl, BYTE PTR [ecx]
  00129	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0012b	0f 84 0e 01 00
	00		 je	 $LN163@BackupSyst
$LN4@BackupSyst:

; 1636 : 
; 1637 : 		// Prevent CipherShed loader from being backed up
; 1638 : 		for (size_t i = 0; i < sizeof (bootLoaderBuf) - strlen (TC_APP_NAME_LEGACY); ++i)

  00131	46		 inc	 esi
  00132	81 fe f7 7d 00
	00		 cmp	 esi, 32247		; 00007df7H
  00138	72 c8		 jb	 SHORT $LL5@BackupSyst

; 1645 : 			}
; 1646 : 		}
; 1647 : 
; 1648 : 		File backupFile (GetSystemLoaderBackupPath(), false, true);

  0013a	6a 01		 push	 1
  0013c	53		 push	 ebx
  0013d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00140	8b d4		 mov	 edx, esp
  00142	89 64 24 38	 mov	 DWORD PTR $T212607[esp+32832], esp
  00146	52		 push	 edx
  00147	8b cf		 mov	 ecx, edi
  00149	e8 00 00 00 00	 call	 ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
  0014e	8d 8c 24 f8 01
	00 00		 lea	 ecx, DWORD PTR _backupFile$[esp+32832]
  00155	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File

; 1649 : 		backupFile.Write (bootLoaderBuf, sizeof (bootLoaderBuf));

  0015a	68 00 7e 00 00	 push	 32256			; 00007e00H
  0015f	8d 84 24 10 02
	00 00		 lea	 eax, DWORD PTR _bootLoaderBuf$[esp+32800]
  00166	50		 push	 eax
  00167	8d 8c 24 dc 01
	00 00		 lea	 ecx, DWORD PTR _backupFile$[esp+32804]
  0016e	c6 84 24 20 80
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+32812], 3
  00176	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1650 : 	}

  0017b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00181	38 9c 24 d5 01
	00 00		 cmp	 BYTE PTR _backupFile$[esp+32797], bl
  00188	74 1a		 je	 SHORT $LN96@BackupSyst
  0018a	38 9c 24 d4 01
	00 00		 cmp	 BYTE PTR _backupFile$[esp+32796], bl
  00191	75 0a		 jne	 SHORT $LN95@BackupSyst
  00193	8b 8c 24 e4 01
	00 00		 mov	 ecx, DWORD PTR _backupFile$[esp+32812]
  0019a	51		 push	 ecx
  0019b	ff d6		 call	 esi
$LN95@BackupSyst:
  0019d	88 9c 24 d5 01
	00 00		 mov	 BYTE PTR _backupFile$[esp+32797], bl
$LN96@BackupSyst:
  001a4	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  001a9	39 bc 24 04 02
	00 00		 cmp	 DWORD PTR _backupFile$[esp+32844], edi
  001b0	72 10		 jb	 SHORT $LN115@BackupSyst
  001b2	8b 94 24 f0 01
	00 00		 mov	 edx, DWORD PTR _backupFile$[esp+32824]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001bf	83 c4 04	 add	 esp, 4
$LN115@BackupSyst:
  001c2	c7 84 24 04 02
	00 00 0f 00 00
	00		 mov	 DWORD PTR _backupFile$[esp+32844], 15 ; 0000000fH
  001cd	89 9c 24 00 02
	00 00		 mov	 DWORD PTR _backupFile$[esp+32840], ebx
  001d4	88 9c 24 f0 01
	00 00		 mov	 BYTE PTR _backupFile$[esp+32824], bl
  001db	38 9c 24 9d 01
	00 00		 cmp	 BYTE PTR _device$[esp+32797], bl
  001e2	74 1a		 je	 SHORT $LN130@BackupSyst
  001e4	38 9c 24 9c 01
	00 00		 cmp	 BYTE PTR _device$[esp+32796], bl
  001eb	75 0a		 jne	 SHORT $LN129@BackupSyst
  001ed	8b 84 24 ac 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+32812]
  001f4	50		 push	 eax
  001f5	ff d6		 call	 esi
$LN129@BackupSyst:
  001f7	88 9c 24 9d 01
	00 00		 mov	 BYTE PTR _device$[esp+32797], bl
$LN130@BackupSyst:
  001fe	39 bc 24 cc 01
	00 00		 cmp	 DWORD PTR _device$[esp+32844], edi
$LN168@BackupSyst:
  00205	72 10		 jb	 SHORT $LN149@BackupSyst
  00207	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+32824]
  0020e	51		 push	 ecx
  0020f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00214	83 c4 04	 add	 esp, 4
$LN149@BackupSyst:
  00217	8b 8c 24 10 80
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+32796]
  0021e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00225	59		 pop	 ecx
  00226	5f		 pop	 edi
  00227	5e		 pop	 esi
  00228	5d		 pop	 ebp
  00229	5b		 pop	 ebx
  0022a	8b 8c 24 f8 7f
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32776]
  00231	33 cc		 xor	 ecx, esp
  00233	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00238	81 c4 08 80 00
	00		 add	 esp, 32776		; 00008008H
  0023e	c3		 ret	 0
$LN163@BackupSyst:

; 1641 : 			{
; 1642 : 				if (AskWarnNoYes ("TC_BOOT_LOADER_ALREADY_INSTALLED") == IDNO)

  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MECAALD@TC_BOOT_LOADER_ALREADY_INSTALLED@
  00244	e8 00 00 00 00	 call	 _AskWarnNoYes
  00249	83 c4 04	 add	 esp, 4
  0024c	83 f8 07	 cmp	 eax, 7
  0024f	75 17		 jne	 SHORT $LN1@BackupSyst

; 1643 : 					throw UserAbort (SRC_POS);

  00251	68 00 00 00 00	 push	 OFFSET __TI2?AUUserAbort@CipherShed@@
  00256	8d 54 24 18	 lea	 edx, DWORD PTR $T212606[esp+32800]
  0025a	52		 push	 edx
  0025b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T212606[esp+32804], OFFSET ??_7UserAbort@CipherShed@@6B@
  00263	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@BackupSyst:

; 1644 : 				return;

  00268	38 9c 24 9d 01
	00 00		 cmp	 BYTE PTR _device$[esp+32797], bl
  0026f	74 1e		 je	 SHORT $LN64@BackupSyst
  00271	38 9c 24 9c 01
	00 00		 cmp	 BYTE PTR _device$[esp+32796], bl
  00278	75 0e		 jne	 SHORT $LN63@BackupSyst
  0027a	8b 84 24 ac 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+32812]
  00281	50		 push	 eax
  00282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN63@BackupSyst:
  00288	88 9c 24 9d 01
	00 00		 mov	 BYTE PTR _device$[esp+32797], bl
$LN64@BackupSyst:
  0028f	83 bc 24 cc 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+32844], 16 ; 00000010H
  00297	e9 69 ff ff ff	 jmp	 $LN168@BackupSyst
$LN167@BackupSyst:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$0:
  00000	8d 8d 00 80 ff
	ff		 lea	 ecx, DWORD PTR $T212605[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$2:
  0000b	8d 8d 80 81 ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ$4:
  00016	8d 8d b8 81 ff
	ff		 lea	 ecx, DWORD PTR _backupFile$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__ehhandler$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 82 f4 7f ff
	ff		 lea	 eax, DWORD PTR [edx-32780]
  0002b	8b 8a f0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32784]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	83 c0 10	 add	 eax, 16			; 00000010H
  0003b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ ENDP ; CipherShed::BootEncryption::BackupSystemLoader
; Function compile flags: /Ogtpy
;	COMDAT ??0UserAbort@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0UserAbort@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::UserAbort::UserAbort, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7UserAbort@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0UserAbort@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::UserAbort::UserAbort
_TEXT	ENDS
PUBLIC	??_C@_0DF@HPNODEPP@CipherShed?3?3BootEncryption?3?3Rest@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::RestoreSystemLoader
;	COMDAT ??_C@_0DF@HPNODEPP@CipherShed?3?3BootEncryption?3?3Rest@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DF@HPNODEPP@CipherShed?3?3BootEncryption?3?3Rest@ DB 'CipherShed::'
	DB	'BootEncryption::RestoreSystemLoader:1660', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$4
__ehfuncinfo$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ
_TEXT	SEGMENT
$T213462 = -33296					; size = 8
$T213324 = -33296					; size = 4
$T213323 = -33296					; size = 8
$T213322 = -33296					; size = 4
$T213486 = -33288					; size = 8
$T213325 = -33280					; size = 384
_device$ = -32896					; size = 56
_backupFile$ = -32840					; size = 56
_mbr$ = -32784						; size = 512
_bootLoaderBuf$ = -32272				; size = 32256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ PROC ; CipherShed::BootEncryption::RestoreSystemLoader, COMDAT
; _this$ = ecx

; 1654 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 04 82 00 00	 mov	 eax, 33284		; 00008204H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 00 82
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+33296], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c4		 xor	 eax, esp
  00031	50		 push	 eax
  00032	8d 84 24 18 82
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+33316]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1655 : 		byte bootLoaderBuf[TC_BOOT_LOADER_AREA_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS];
; 1656 : 
; 1657 : 		File backupFile (GetSystemLoaderBackupPath(), true);

  0003f	33 db		 xor	 ebx, ebx
  00041	53		 push	 ebx
  00042	6a 01		 push	 1
  00044	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00047	8b c4		 mov	 eax, esp
  00049	89 64 24 38	 mov	 DWORD PTR $T213322[esp+33352], esp
  0004d	50		 push	 eax
  0004e	8b f1		 mov	 esi, ecx
  00050	e8 00 00 00 00	 call	 ?GetSystemLoaderBackupPath@BootEncryption@CipherShed@@IAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::BootEncryption::GetSystemLoaderBackupPath
  00055	8d 8c 24 00 02
	00 00		 lea	 ecx, DWORD PTR _backupFile$[esp+33352]
  0005c	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File

; 1658 : 		
; 1659 : 		if (backupFile.Read (bootLoaderBuf, sizeof (bootLoaderBuf)) != sizeof (bootLoaderBuf))

  00061	68 00 7e 00 00	 push	 32256			; 00007e00H
  00066	8d 8c 24 18 04
	00 00		 lea	 ecx, DWORD PTR _bootLoaderBuf$[esp+33320]
  0006d	51		 push	 ecx
  0006e	8d 8c 24 e4 01
	00 00		 lea	 ecx, DWORD PTR _backupFile$[esp+33324]
  00075	89 9c 24 28 82
	00 00		 mov	 DWORD PTR __$EHRec$[esp+33332], ebx
  0007c	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read
  00081	3d 00 7e 00 00	 cmp	 eax, 32256		; 00007e00H
  00086	74 1f		 je	 SHORT $LN1@RestoreSys

; 1660 : 			throw ParameterIncorrect (SRC_POS);

  00088	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0008d	8d 54 24 18	 lea	 edx, DWORD PTR $T213323[esp+33320]
  00091	52		 push	 edx
  00092	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T213323[esp+33324], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0009a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T213323[esp+33328], OFFSET ??_C@_0DF@HPNODEPP@CipherShed?3?3BootEncryption?3?3Rest@
  000a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@RestoreSys:

; 1661 : 
; 1662 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  000a7	53		 push	 ebx
  000a8	8d 44 24 28	 lea	 eax, DWORD PTR $T213325[esp+33320]
  000ac	50		 push	 eax
  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  000b4	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000b7	8b cc		 mov	 ecx, esp
  000b9	89 64 24 34	 mov	 DWORD PTR $T213324[esp+33348], esp
  000bd	6a ff		 push	 -1
  000bf	83 c0 1c	 add	 eax, 28			; 0000001cH
  000c2	53		 push	 ebx
  000c3	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000ca	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000cd	50		 push	 eax
  000ce	c6 84 24 4c 82
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+33368], 1
  000d6	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000de	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33348]
  000e5	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  000ea	8d 4c 24 24	 lea	 ecx, DWORD PTR $T213325[esp+33316]
  000ee	c6 84 24 20 82
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+33324], 3
  000f6	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1663 : 
; 1664 : 		// Preserve current partition table
; 1665 : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 1666 : 		device.SeekAt (0);

  000fb	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetFilePointerEx@20
  00101	89 9c 24 ac 01
	00 00		 mov	 DWORD PTR _device$[esp+33324], ebx
  00108	89 9c 24 b0 01
	00 00		 mov	 DWORD PTR _device$[esp+33328], ebx
  0010f	38 9c 24 a4 01
	00 00		 cmp	 BYTE PTR _device$[esp+33316], bl
  00116	75 37		 jne	 SHORT $LN40@RestoreSys
  00118	53		 push	 ebx
  00119	53		 push	 ebx
  0011a	33 c9		 xor	 ecx, ecx
  0011c	51		 push	 ecx
  0011d	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+33344]
  00124	33 c0		 xor	 eax, eax
  00126	50		 push	 eax
  00127	51		 push	 ecx
  00128	ff d5		 call	 ebp
  0012a	85 c0		 test	 eax, eax
  0012c	75 21		 jne	 SHORT $LN40@RestoreSys
  0012e	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T213462[esp+33316], OFFSET ??_7SystemException@CipherShed@@6B@
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0013c	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00141	8d 54 24 18	 lea	 edx, DWORD PTR $T213462[esp+33320]
  00145	52		 push	 edx
  00146	89 44 24 20	 mov	 DWORD PTR $T213462[esp+33328], eax
  0014a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@RestoreSys:

; 1667 : 		device.Read (mbr, sizeof (mbr));

  0014f	68 00 02 00 00	 push	 512			; 00000200H
  00154	8d 84 24 18 02
	00 00		 lea	 eax, DWORD PTR _mbr$[esp+33320]
  0015b	50		 push	 eax
  0015c	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33324]
  00163	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1668 : 		memcpy (bootLoaderBuf + TC_MAX_MBR_BOOT_CODE_SIZE, mbr + TC_MAX_MBR_BOOT_CODE_SIZE, sizeof (mbr) - TC_MAX_MBR_BOOT_CODE_SIZE);

  00168	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0016d	8d b4 24 cc 03
	00 00		 lea	 esi, DWORD PTR _mbr$[esp+33756]
  00174	8d bc 24 cc 05
	00 00		 lea	 edi, DWORD PTR _bootLoaderBuf$[esp+33756]
  0017b	f3 a5		 rep movsd

; 1669 : 
; 1670 : 		device.SeekAt (0);

  0017d	89 9c 24 ac 01
	00 00		 mov	 DWORD PTR _device$[esp+33324], ebx
  00184	89 9c 24 b0 01
	00 00		 mov	 DWORD PTR _device$[esp+33328], ebx
  0018b	38 9c 24 a4 01
	00 00		 cmp	 BYTE PTR _device$[esp+33316], bl
  00192	75 37		 jne	 SHORT $LN52@RestoreSys
  00194	53		 push	 ebx
  00195	53		 push	 ebx
  00196	33 c9		 xor	 ecx, ecx
  00198	51		 push	 ecx
  00199	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+33344]
  001a0	33 c0		 xor	 eax, eax
  001a2	50		 push	 eax
  001a3	51		 push	 ecx
  001a4	ff d5		 call	 ebp
  001a6	85 c0		 test	 eax, eax
  001a8	75 21		 jne	 SHORT $LN52@RestoreSys
  001aa	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T213486[esp+33316], OFFSET ??_7SystemException@CipherShed@@6B@
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001b8	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001bd	8d 54 24 20	 lea	 edx, DWORD PTR $T213486[esp+33320]
  001c1	52		 push	 edx
  001c2	89 44 24 28	 mov	 DWORD PTR $T213486[esp+33328], eax
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@RestoreSys:

; 1671 : 		device.Write (bootLoaderBuf, sizeof (bootLoaderBuf));

  001cb	68 00 7e 00 00	 push	 32256			; 00007e00H
  001d0	8d 84 24 18 04
	00 00		 lea	 eax, DWORD PTR _bootLoaderBuf$[esp+33320]
  001d7	50		 push	 eax
  001d8	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+33324]
  001df	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 1672 : 	}

  001e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  001ea	38 9c 24 a5 01
	00 00		 cmp	 BYTE PTR _device$[esp+33317], bl
  001f1	74 1a		 je	 SHORT $LN67@RestoreSys
  001f3	38 9c 24 a4 01
	00 00		 cmp	 BYTE PTR _device$[esp+33316], bl
  001fa	75 0a		 jne	 SHORT $LN66@RestoreSys
  001fc	8b 8c 24 b4 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+33332]
  00203	51		 push	 ecx
  00204	ff d6		 call	 esi
$LN66@RestoreSys:
  00206	88 9c 24 a5 01
	00 00		 mov	 BYTE PTR _device$[esp+33317], bl
$LN67@RestoreSys:
  0020d	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00212	39 bc 24 d4 01
	00 00		 cmp	 DWORD PTR _device$[esp+33364], edi
  00219	72 10		 jb	 SHORT $LN86@RestoreSys
  0021b	8b 94 24 c0 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+33344]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00228	83 c4 04	 add	 esp, 4
$LN86@RestoreSys:
  0022b	c7 84 24 d4 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _device$[esp+33364], 15 ; 0000000fH
  00236	89 9c 24 d0 01
	00 00		 mov	 DWORD PTR _device$[esp+33360], ebx
  0023d	88 9c 24 c0 01
	00 00		 mov	 BYTE PTR _device$[esp+33344], bl
  00244	38 9c 24 dd 01
	00 00		 cmp	 BYTE PTR _backupFile$[esp+33317], bl
  0024b	74 1a		 je	 SHORT $LN99@RestoreSys
  0024d	38 9c 24 dc 01
	00 00		 cmp	 BYTE PTR _backupFile$[esp+33316], bl
  00254	75 0a		 jne	 SHORT $LN98@RestoreSys
  00256	8b 84 24 ec 01
	00 00		 mov	 eax, DWORD PTR _backupFile$[esp+33332]
  0025d	50		 push	 eax
  0025e	ff d6		 call	 esi
$LN98@RestoreSys:
  00260	88 9c 24 dd 01
	00 00		 mov	 BYTE PTR _backupFile$[esp+33317], bl
$LN99@RestoreSys:
  00267	39 bc 24 0c 02
	00 00		 cmp	 DWORD PTR _backupFile$[esp+33364], edi
  0026e	72 10		 jb	 SHORT $LN118@RestoreSys
  00270	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR _backupFile$[esp+33344]
  00277	51		 push	 ecx
  00278	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0027d	83 c4 04	 add	 esp, 4
$LN118@RestoreSys:
  00280	8b 8c 24 18 82
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+33316]
  00287	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0028e	59		 pop	 ecx
  0028f	5f		 pop	 edi
  00290	5e		 pop	 esi
  00291	5d		 pop	 ebp
  00292	5b		 pop	 ebx
  00293	8b 8c 24 00 82
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+33296]
  0029a	33 cc		 xor	 ecx, esp
  0029c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a1	81 c4 10 82 00
	00		 add	 esp, 33296		; 00008210H
  002a7	c3		 ret	 0
$LN129@RestoreSys:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$1:
  00000	8d 8d b8 7f ff
	ff		 lea	 ecx, DWORD PTR _backupFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$2:
  0000b	8d 8d 00 7e ff
	ff		 lea	 ecx, DWORD PTR $T213325[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ$4:
  00016	8d 8d 80 7f ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 82 ec 7d ff
	ff		 lea	 eax, DWORD PTR [edx-33300]
  0002b	8b 8a e8 7d ff
	ff		 mov	 ecx, DWORD PTR [edx-33304]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	83 c0 10	 add	 eax, 16			; 00000010H
  0003b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ ENDP ; CipherShed::BootEncryption::RestoreSystemLoader
PUBLIC	??_C@_0CL@NPPONIMP@CipherShed?3?3BootEncryption?3?3Dein@ ; `string'
PUBLIC	??_C@_0BK@DNPPNAJB@SYS_LOADER_RESTORE_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0CL@IOOLBDBO@CipherShed?3?3BootEncryption?3?3Dein@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z	; CipherShed::BootEncryption::Deinstall
EXTRN	_DisplayStaticModelessWaitDlg:PROC
;	COMDAT ??_C@_0CL@NPPONIMP@CipherShed?3?3BootEncryption?3?3Dein@
CONST	SEGMENT
??_C@_0CL@NPPONIMP@CipherShed?3?3BootEncryption?3?3Dein@ DB 'CipherShed::'
	DB	'BootEncryption::Deinstall:1991', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DNPPNAJB@SYS_LOADER_RESTORE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BK@DNPPNAJB@SYS_LOADER_RESTORE_FAILED?$AA@ DB 'SYS_LOADER_RESTORE_'
	DB	'FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IOOLBDBO@CipherShed?3?3BootEncryption?3?3Dein@
CONST	SEGMENT
??_C@_0CL@IOOLBDBO@CipherShed?3?3BootEncryption?3?3Dein@ DB 'CipherShed::'
	DB	'BootEncryption::Deinstall:2005', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$15 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$6
__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$4
__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$0
__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$1
__ehfuncinfo$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z
	DD	04H
	DD	FLAT:__tryblocktable$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$12
	DD	02H
	DD	02H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$13
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$14
	DD	08H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$15
__unwindtable$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$10
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	FLAT:__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$11
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z
_TEXT	SEGMENT
_encStatus$ = -204					; size = 94
$T213857 = -108						; size = 36
_e$150173 = -72						; size = 4
$T213855 = -68						; size = 4
$T214149 = -64						; size = 8
$T213856 = -56						; size = 8
$T214047 = -48						; size = 8
$T213854 = -40						; size = 8
$T214096 = -32						; size = 8
_this$GSCopy$ = -24					; size = 4
_finally2039$150172 = -17				; size = 1
__$EHRec$ = -16						; size = 16
_config$ = 0						; size = 384
_device$150146 = 384					; size = 56
_header$150148 = 440					; size = 512
__$ArrayPad$ = 952					; size = 4
_displayWaitDialog$ = 964				; size = 1
?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z PROC	; CipherShed::BootEncryption::Deinstall, COMDAT
; _this$ = ecx

; 1987 : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 44 fc
	ff ff		 lea	 ebp, DWORD PTR [esp-956]
  00008	81 ec bc 03 00
	00		 sub	 esp, 956		; 000003bcH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 b8 03 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1988 : 		BootEncryptionStatus encStatus = GetStatus();

  0003f	6a 5e		 push	 94			; 0000005eH
  00041	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _encStatus$[ebp]
  00047	50		 push	 eax
  00048	33 ff		 xor	 edi, edi
  0004a	57		 push	 edi
  0004b	57		 push	 edi
  0004c	8b f1		 mov	 esi, ecx
  0004e	68 48 20 22 00	 push	 2236488			; 00222048H
  00053	89 75 e8	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00056	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 1989 : 
; 1990 : 		if (encStatus.DriveEncrypted || encStatus.DriveMounted)

  0005b	39 bd 42 ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+14], edi
  00061	0f 85 da 02 00
	00		 jne	 $LN8@Deinstall
  00067	39 bd 3a ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+6], edi
  0006d	0f 85 ce 02 00
	00		 jne	 $LN8@Deinstall

; 1991 : 			throw ParameterIncorrect (SRC_POS);
; 1992 : 
; 1993 : 		SystemDriveConfiguration config = GetSystemDriveConfiguration ();

  00073	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00076	51		 push	 ecx
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0007e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi

; 1994 : 
; 1995 : 		if (encStatus.VolumeHeaderPresent)

  00081	39 bd 3e ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+10], edi
  00087	0f 84 9b 00 00
	00		 je	 $LN7@Deinstall

; 1996 : 		{
; 1997 : 			// Verify CRC of header salt
; 1998 : 			Device device (config.DevicePath, true);

  0008d	6a 01		 push	 1
  0008f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00092	8b cc		 mov	 ecx, esp
  00094	89 65 bc	 mov	 DWORD PTR $T213855[ebp], esp
  00097	6a ff		 push	 -1
  00099	57		 push	 edi
  0009a	8d 55 1c	 lea	 edx, DWORD PTR _config$[ebp+28]
  0009d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000a4	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  000a7	52		 push	 edx
  000a8	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  000ac	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b1	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150146[ebp]
  000b7	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device

; 1999 : 			byte header[TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE];
; 2000 : 
; 2001 : 			device.SeekAt (TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET);

  000bc	57		 push	 edi
  000bd	68 00 7c 00 00	 push	 31744			; 00007c00H
  000c2	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150146[ebp]
  000c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000cc	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 2002 : 			device.Read (header, sizeof (header));

  000d1	68 00 02 00 00	 push	 512			; 00000200H
  000d6	8d 85 b8 01 00
	00		 lea	 eax, DWORD PTR _header$150148[ebp]
  000dc	50		 push	 eax
  000dd	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150146[ebp]
  000e3	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 2003 : 
; 2004 : 			if (encStatus.VolumeHeaderSaltCrc32 != GetCrc32 ((byte *) header, PKCS5_SALT_SIZE))

  000e8	8d 8d b8 01 00
	00		 lea	 ecx, DWORD PTR _header$150148[ebp]
  000ee	6a 40		 push	 64			; 00000040H
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _GetCrc32
  000f6	83 c4 08	 add	 esp, 8
  000f9	39 85 6e ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+58], eax
  000ff	74 1c		 je	 SHORT $LN6@Deinstall

; 2005 : 				throw ParameterIncorrect (SRC_POS);

  00101	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00106	8d 55 c8	 lea	 edx, DWORD PTR $T213856[ebp]
  00109	52		 push	 edx
  0010a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T213856[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00111	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T213856[ebp+4], OFFSET ??_C@_0CL@IOOLBDBO@CipherShed?3?3BootEncryption?3?3Dein@
  00118	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@Deinstall:

; 2006 : 		}

  0011d	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150146[ebp]
  00123	e8 00 00 00 00	 call	 ??1Device@CipherShed@@QAE@XZ
$LN7@Deinstall:

; 2007 : 
; 2008 : 		try
; 2009 : 		{

  00128	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 2010 : 			RegisterFilterDriver (false, DriveFilter);

  0012c	e8 00 00 00 00	 call	 _IsAdmin
  00131	85 c0		 test	 eax, eax
  00133	75 46		 jne	 SHORT $LN74@Deinstall
  00135	e8 00 00 00 00	 call	 _IsUacSupported
  0013a	85 c0		 test	 eax, eax
  0013c	74 3d		 je	 SHORT $LN74@Deinstall
  0013e	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00148	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0014d	57		 push	 edi
  0014e	57		 push	 edi
  0014f	50		 push	 eax
  00150	ff d2		 call	 edx
  00152	3b c7		 cmp	 eax, edi
  00154	74 33		 je	 SHORT $LN72@Deinstall
  00156	50		 push	 eax
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0015d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T214047[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0016a	89 45 d4	 mov	 DWORD PTR $T214047[ebp+4], eax
  0016d	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00172	8d 45 d0	 lea	 eax, DWORD PTR $T214047[ebp]
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN74@Deinstall:
  0017b	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_DISKDRIVE
  00180	57		 push	 edi
  00181	57		 push	 edi
  00182	8b ce		 mov	 ecx, esi
  00184	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN72@Deinstall:

; 2011 : 			RegisterFilterDriver (false, VolumeFilter);

  00189	e8 00 00 00 00	 call	 _IsAdmin
  0018e	85 c0		 test	 eax, eax
  00190	75 47		 jne	 SHORT $LN96@Deinstall
  00192	e8 00 00 00 00	 call	 _IsUacSupported
  00197	85 c0		 test	 eax, eax
  00199	74 3e		 je	 SHORT $LN96@Deinstall
  0019b	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001aa	6a 01		 push	 1
  001ac	57		 push	 edi
  001ad	50		 push	 eax
  001ae	ff d2		 call	 edx
  001b0	3b c7		 cmp	 eax, edi
  001b2	74 43		 je	 SHORT $LN93@Deinstall
  001b4	50		 push	 eax
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  001bb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T214096[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001c8	89 45 e4	 mov	 DWORD PTR $T214096[ebp+4], eax
  001cb	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  001d0	8d 45 e0	 lea	 eax, DWORD PTR $T214096[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN96@Deinstall:
  001d9	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_VOLUME
  001de	6a 01		 push	 1
  001e0	57		 push	 edi
  001e1	8b ce		 mov	 ecx, esi
  001e3	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
  001e8	68 00 00 00 00	 push	 OFFSET _GUID_DEVCLASS_FLOPPYDISK
  001ed	6a 01		 push	 1
  001ef	57		 push	 edi
  001f0	8b ce		 mov	 ecx, esi
  001f2	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN93@Deinstall:

; 2012 : 			RegisterFilterDriver (false, DumpFilter);

  001f7	e8 00 00 00 00	 call	 _IsAdmin
  001fc	85 c0		 test	 eax, eax
  001fe	75 47		 jne	 SHORT $LN117@Deinstall
  00200	e8 00 00 00 00	 call	 _IsUacSupported
  00205	85 c0		 test	 eax, eax
  00207	74 3e		 je	 SHORT $LN117@Deinstall
  00209	e8 00 00 00 00	 call	 ?Elevate@Elevator@CipherShed@@KAXXZ ; CipherShed::Elevator::Elevate
  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ElevatedComInstance@Elevator@CipherShed@@1PAUICipherShedMainCom@@A ; CipherShed::Elevator::ElevatedComInstance
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00218	6a 02		 push	 2
  0021a	57		 push	 edi
  0021b	50		 push	 eax
  0021c	ff d2		 call	 edx
  0021e	3b c7		 cmp	 eax, edi
  00220	74 30		 je	 SHORT $LN113@Deinstall
  00222	50		 push	 eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  00229	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T214149[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00236	89 45 c4	 mov	 DWORD PTR $T214149[ebp+4], eax
  00239	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  0023e	8d 45 c0	 lea	 eax, DWORD PTR $T214149[ebp]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN117@Deinstall:
  00247	57		 push	 edi
  00248	6a 02		 push	 2
  0024a	57		 push	 edi
  0024b	8b ce		 mov	 ecx, esi
  0024d	e8 00 00 00 00	 call	 ?RegisterFilter@BootEncryption@CipherShed@@IAEX_NW4FilterType@12@PBU_GUID@@@Z ; CipherShed::BootEncryption::RegisterFilter
$LN113@Deinstall:

; 2013 : 			SetDriverServiceStartType (SERVICE_SYSTEM_START);

  00252	6a 01		 push	 1
  00254	8b ce		 mov	 ecx, esi
  00256	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ; CipherShed::BootEncryption::SetDriverServiceStartType

; 2024 : 		}
; 2025 : 
; 2026 : 		SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE);	// In case RestoreSystemLoader() fails

  0025b	57		 push	 edi
  0025c	8b ce		 mov	 ecx, esi
  0025e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00261	e8 00 00 00 00	 call	 ?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z ; CipherShed::BootEncryption::SetHiddenOSCreationPhase

; 2027 : 
; 2028 : 		try
; 2029 : 		{
; 2030 : 			RegisterSystemFavoritesService (false);

  00266	57		 push	 edi
  00267	8b ce		 mov	 ecx, esi
  00269	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  0026d	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService
  00272	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00275	eb 10		 jmp	 SHORT $LN29@Deinstall
__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$4:

; 2031 : 		}
; 2032 : 		catch (...) { }

  00277	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0027e	b8 00 00 00 00	 mov	 eax, $LN138@Deinstall
  00283	c3		 ret	 0
$LN138@Deinstall:
  00284	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN29@Deinstall:

; 2033 : 
; 2034 : 		try
; 2035 : 		{
; 2036 : 			if (displayWaitDialog)

  00287	8a 9d c4 03 00
	00		 mov	 bl, BYTE PTR _displayWaitDialog$[ebp]
  0028d	84 db		 test	 bl, bl
  0028f	74 0b		 je	 SHORT $LN1@Deinstall

; 2037 : 				DisplayStaticModelessWaitDlg (ParentWindow);

  00291	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00293	51		 push	 ecx
  00294	e8 00 00 00 00	 call	 _DisplayStaticModelessWaitDlg
  00299	83 c4 04	 add	 esp, 4
$LN1@Deinstall:

; 2038 : 
; 2039 : 			finally_do_arg (bool, displayWaitDialog, { if (finally_arg) CloseStaticModelessWaitDlg(); });

  0029c	88 5d ef	 mov	 BYTE PTR _finally2039$150172[ebp], bl

; 2040 : 
; 2041 : 			RestoreSystemLoader ();

  0029f	8b ce		 mov	 ecx, esi
  002a1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  002a5	e8 00 00 00 00	 call	 ?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::RestoreSystemLoader

; 2042 : 		}

  002aa	8d 45 ef	 lea	 eax, DWORD PTR _finally2039$150172[ebp]
  002ad	e8 00 00 00 00	 call	 ??1Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@XZ ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::~Finally2039

; 2047 : 		}
; 2048 : 	}

  002b2	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  002b5	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  002ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c4	59		 pop	 ecx
  002c5	5f		 pop	 edi
  002c6	5e		 pop	 esi
  002c7	5b		 pop	 ebx
  002c8	8b 8d b8 03 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ce	33 cd		 xor	 ecx, ebp
  002d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d5	81 c5 bc 03 00
	00		 add	 ebp, 956		; 000003bcH
  002db	8b e5		 mov	 esp, ebp
  002dd	5d		 pop	 ebp
  002de	c2 04 00	 ret	 4
__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$6:

; 2043 : 		catch (Exception &e)
; 2044 : 		{
; 2045 : 			e.Show (ParentWindow);

  002e1	8b 4d b8	 mov	 ecx, DWORD PTR _e$150173[ebp]
  002e4	8b 45 e8	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  002e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e9	8b 00		 mov	 eax, DWORD PTR [eax]
  002eb	8b 12		 mov	 edx, DWORD PTR [edx]
  002ed	50		 push	 eax
  002ee	ff d2		 call	 edx

; 2046 : 			throw ErrorException ("SYS_LOADER_RESTORE_FAILED");

  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DNPPNAJB@SYS_LOADER_RESTORE_FAILED?$AA@
  002f5	8d 4d 94	 lea	 ecx, DWORD PTR $T213857[ebp]
  002f8	e8 00 00 00 00	 call	 ??0ErrorException@CipherShed@@QAE@PAD@Z ; CipherShed::ErrorException::ErrorException
  002fd	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00302	8d 45 94	 lea	 eax, DWORD PTR $T213857[ebp]
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$0:

; 2014 : 		}
; 2015 : 		catch (...)
; 2016 : 		{
; 2017 : 			try
; 2018 : 			{
; 2019 : 				RegisterBootDriver (IsHiddenSystemRunning());

  0030b	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0030e	8b ce		 mov	 ecx, esi
  00310	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00313	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00317	e8 00 00 00 00	 call	 ?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsHiddenSystemRunning
  0031c	8b ce		 mov	 ecx, esi
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 ?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::RegisterBootDriver
  00324	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LN25@Deinstall:

; 2022 : 
; 2023 : 			throw;

  0032b	6a 00		 push	 0
  0032d	6a 00		 push	 0
  0032f	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$1:

; 2020 : 			}
; 2021 : 			catch (...) { }

  00334	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  0033b	b8 00 00 00 00	 mov	 eax, $LN25@Deinstall
  00340	c3		 ret	 0
$LN8@Deinstall:
  00341	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00346	8d 4d d8	 lea	 ecx, DWORD PTR $T213854[ebp]
  00349	51		 push	 ecx
  0034a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T213854[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00351	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T213854[ebp+4], OFFSET ??_C@_0CL@NPPONIMP@CipherShed?3?3BootEncryption?3?3Dein@
  00358	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@Deinstall:
  0035d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$8:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$10:
  00008	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150146[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z$11:
  00013	8d 45 ef	 lea	 eax, DWORD PTR _finally2039$150172[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1Finally2039@?BC@??Deinstall@BootEncryption@CipherShed@@QAEX_N@Z@QAE@XZ ; `CipherShed::BootEncryption::Deinstall'::`18'::Finally2039::~Finally2039
__ehhandler$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 8a c4 03 00
	00		 mov	 ecx, DWORD PTR [edx+964]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ENDP	; CipherShed::BootEncryption::Deinstall
PUBLIC	??_C@_0DA@MAGEBJB@CipherShed?3?3BootEncryption?3?3Chan@ ; `string'
PUBLIC	??_C@_0DA@GJIGMJL@CipherShed?3?3BootEncryption?3?3Chan@ ; `string'
PUBLIC	??_C@_0DA@CPPDIBAB@CipherShed?3?3BootEncryption?3?3Chan@ ; `string'
PUBLIC	_oldPassword$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_newPassword$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z ; CipherShed::BootEncryption::ChangePassword
EXTRN	_WaitCursor:PROC
EXTRN	_NormalCursor:PROC
EXTRN	_handleError:PROC
;	COMDAT ??_C@_0DA@MAGEBJB@CipherShed?3?3BootEncryption?3?3Chan@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DA@MAGEBJB@CipherShed?3?3BootEncryption?3?3Chan@ DB 'CipherShed::B'
	DB	'ootEncryption::ChangePassword:2085', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GJIGMJL@CipherShed?3?3BootEncryption?3?3Chan@
CONST	SEGMENT
??_C@_0DA@GJIGMJL@CipherShed?3?3BootEncryption?3?3Chan@ DB 'CipherShed::B'
	DB	'ootEncryption::ChangePassword:2065', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CPPDIBAB@CipherShed?3?3BootEncryption?3?3Chan@
CONST	SEGMENT
??_C@_0DA@CPPDIBAB@CipherShed?3?3BootEncryption?3?3Chan@ DB 'CipherShed::'
	DB	'BootEncryption::ChangePassword:2056', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$9 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff94H
	DD	FLAT:__catch$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$0
__tryblocktable$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z DD 05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$9
__ehfuncinfo$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$7
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$8
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z
_TEXT	SEGMENT
_encStatus$ = -204					; size = 94
_e$150283 = -108					; size = 4
$T214193 = -104						; size = 8
$T214195 = -96						; size = 8
$T214763 = -88						; size = 8
$T214202 = -80						; size = 8
$T214204 = -72						; size = 8
_tmpCryptoInfo$150275 = -64				; size = 4
_cryptoInfo$ = -60					; size = 4
_backupHeader$150267 = -56				; size = 4
$T214194 = -56						; size = 4
_this$GSCopy$ = -52					; size = 4
_finally2094$ = -48					; size = 4
_backupHeaderOffset$ = -44				; size = 8
_newPassword$GSCopy$ = -36				; size = 4
_finally2188$150299 = -36				; size = 4
_oldPassword$GSCopy$ = -32				; size = 4
_result$ = -32						; size = 4
_headerOffset$ = -28					; size = 8
_headerUpdated$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
_config$ = 0						; size = 384
_reopenRequest$150285 = 384				; size = 72
_$S7$150209 = 404					; size = 52
_device$ = 456						; size = 56
_header$ = 512						; size = 512
__$ArrayPad$ = 1024					; size = 4
_oldPassword$ = 1036					; size = 4
_newPassword$ = 1040					; size = 4
_pkcs5$ = 1044						; size = 4
?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z PROC ; CipherShed::BootEncryption::ChangePassword, COMDAT
; _this$ = ecx

; 2052 : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 fc fb
	ff ff		 lea	 ebp, DWORD PTR [esp-1028]
  00008	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 00 04 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2095 : 
; 2096 : 		if (status != 0)

  0003f	8b 85 0c 04 00
	00		 mov	 eax, DWORD PTR _oldPassword$[ebp]
  00045	6a 5e		 push	 94			; 0000005eH
  00047	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _encStatus$[ebp]
  0004d	52		 push	 edx
  0004e	8b f9		 mov	 edi, ecx

; 2192 : 
; 2193 : 		return result;

  00050	8b 8d 10 04 00
	00		 mov	 ecx, DWORD PTR _newPassword$[ebp]
  00056	33 db		 xor	 ebx, ebx
  00058	53		 push	 ebx
  00059	53		 push	 ebx
  0005a	89 4d dc	 mov	 DWORD PTR _newPassword$GSCopy$[ebp], ecx
  0005d	68 48 20 22 00	 push	 2236488			; 00222048H
  00062	8b cf		 mov	 ecx, edi
  00064	89 7d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00067	89 45 e0	 mov	 DWORD PTR _oldPassword$GSCopy$[ebp], eax
  0006a	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  0006f	39 9d 72 ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+62], ebx
  00075	74 1c		 je	 SHORT $LN28@ChangePass
  00077	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0007c	8d 45 98	 lea	 eax, DWORD PTR $T214193[ebp]
  0007f	50		 push	 eax
  00080	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T214193[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00087	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T214193[ebp+4], OFFSET ??_C@_0DA@CPPDIBAB@CipherShed?3?3BootEncryption?3?3Chan@
  0008e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@ChangePass:

; 2053 : 		BootEncryptionStatus encStatus = GetStatus();
; 2054 : 
; 2055 : 		if (encStatus.SetupInProgress)
; 2056 : 			throw ParameterIncorrect (SRC_POS);
; 2057 : 
; 2058 : 		SystemDriveConfiguration config = GetSystemDriveConfiguration ();

  00093	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00096	51		 push	 ecx
  00097	8b cf		 mov	 ecx, edi
  00099	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration

; 2059 : 
; 2060 : 		char header[TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE];
; 2061 : 		Device device (config.DevicePath);

  0009e	53		 push	 ebx
  0009f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000a2	8b cc		 mov	 ecx, esp
  000a4	89 65 c8	 mov	 DWORD PTR $T214194[ebp], esp
  000a7	83 ce ff	 or	 esi, -1
  000aa	56		 push	 esi
  000ab	53		 push	 ebx
  000ac	8d 55 1c	 lea	 edx, DWORD PTR _config$[ebp+28]
  000af	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000b6	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b9	52		 push	 edx
  000ba	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000bd	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000c0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c5	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  000cb	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  000d0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 2062 : 
; 2063 : 		// Only one algorithm is currently supported
; 2064 : 		if (pkcs5 != 0)

  000d4	39 9d 14 04 00
	00		 cmp	 DWORD PTR _pkcs5$[ebp], ebx
  000da	74 1c		 je	 SHORT $LN27@ChangePass

; 2065 : 			throw ParameterIncorrect (SRC_POS);

  000dc	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  000e1	8d 45 a0	 lea	 eax, DWORD PTR $T214195[ebp]
  000e4	50		 push	 eax
  000e5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T214195[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  000ec	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T214195[ebp+4], OFFSET ??_C@_0DA@GJIGMJL@CipherShed?3?3BootEncryption?3?3Chan@
  000f3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@ChangePass:

; 2066 : 
; 2067 : 		int64 headerOffset = TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET;

  000f8	c7 45 e4 00 7c
	00 00		 mov	 DWORD PTR _headerOffset$[ebp], 31744 ; 00007c00H
  000ff	89 5d e8	 mov	 DWORD PTR _headerOffset$[ebp+4], ebx

; 2068 : 		int64 backupHeaderOffset = -1;

  00102	89 75 d4	 mov	 DWORD PTR _backupHeaderOffset$[ebp], esi
  00105	89 75 d8	 mov	 DWORD PTR _backupHeaderOffset$[ebp+4], esi

; 2069 : 
; 2070 : 		if (encStatus.HiddenSystem)

  00108	39 5d 82	 cmp	 DWORD PTR _encStatus$[ebp+78], ebx
  0010b	0f 84 6b 01 00
	00		 je	 $LN18@ChangePass

; 2071 : 		{
; 2072 : 			headerOffset = encStatus.HiddenSystemPartitionStart + TC_HIDDEN_VOLUME_HEADER_OFFSET;

  00111	8b 45 86	 mov	 eax, DWORD PTR _encStatus$[ebp+82]
  00114	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  00119	89 45 e4	 mov	 DWORD PTR _headerOffset$[ebp], eax
  0011c	8b 45 8a	 mov	 eax, DWORD PTR _encStatus$[ebp+86]

; 2073 : 
; 2074 : 			// Find hidden system partition
; 2075 : 			foreach (const Partition &partition, config.Partitions)

  0011f	8d 8d d0 00 00
	00		 lea	 ecx, DWORD PTR _config$[ebp+208]
  00125	51		 push	 ecx
  00126	8d 95 94 01 00
	00		 lea	 edx, DWORD PTR _$S7$150209[ebp]
  0012c	13 c3		 adc	 eax, ebx
  0012e	52		 push	 edx
  0012f	89 45 e8	 mov	 DWORD PTR _headerOffset$[ebp+4], eax
  00132	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00137	83 c4 08	 add	 esp, 8
  0013a	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp]
  00140	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00143	8d 8d 94 01 00
	00		 lea	 ecx, DWORD PTR _$S7$150209[ebp]
  00149	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0014d	ff d2		 call	 edx
  0014f	84 c0		 test	 al, al
  00151	0f 84 c4 00 00
	00		 je	 $LN23@ChangePass
  00157	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL25@ChangePass:
  00160	8b 85 c0 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp+44]
  00166	3b c3		 cmp	 eax, ebx
  00168	75 0f		 jne	 SHORT $LN242@ChangePass
  0016a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0016f	8b 85 c0 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp+44]
  00175	3b c3		 cmp	 eax, ebx
  00177	74 04		 je	 SHORT $LN102@ChangePass
$LN242@ChangePass:
  00179	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017b	eb 02		 jmp	 SHORT $LN103@ChangePass
$LN102@ChangePass:
  0017d	33 c9		 xor	 ecx, ecx
$LN103@ChangePass:
  0017f	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp+48]
  00185	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00188	75 0b		 jne	 SHORT $LN88@ChangePass
  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0018f	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp+48]
$LN88@ChangePass:
  00195	38 9d 99 01 00
	00		 cmp	 BYTE PTR _$S7$150209[ebp+5], bl
  0019b	0f 94 c1	 sete	 cl
  0019e	88 8d 99 01 00
	00		 mov	 BYTE PTR _$S7$150209[ebp+5], cl
  001a4	3a cb		 cmp	 cl, bl
  001a6	74 49		 je	 SHORT $LN24@ChangePass
  001a8	8b 75 8a	 mov	 esi, DWORD PTR _encStatus$[ebp+86]
  001ab	eb 03 8d 49 00	 npad	 5
$LL108@ChangePass:

; 2076 : 			{
; 2077 : 				if (partition.Info.StartingOffset.QuadPart == encStatus.HiddenSystemPartitionStart)

  001b0	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  001b3	3b 55 86	 cmp	 edx, DWORD PTR _encStatus$[ebp+82]
  001b6	75 07		 jne	 SHORT $LN243@ChangePass
  001b8	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  001bb	3b d6		 cmp	 edx, esi
  001bd	74 18		 je	 SHORT $LN239@ChangePass
$LN243@ChangePass:

; 2073 : 
; 2074 : 			// Find hidden system partition
; 2075 : 			foreach (const Partition &partition, config.Partitions)

  001bf	3a cb		 cmp	 cl, bl
  001c1	0f 94 c1	 sete	 cl
  001c4	c6 85 98 01 00
	00 01		 mov	 BYTE PTR _$S7$150209[ebp+4], 1
  001cb	88 8d 99 01 00
	00		 mov	 BYTE PTR _$S7$150209[ebp+5], cl
  001d1	3a cb		 cmp	 cl, bl
  001d3	75 db		 jne	 SHORT $LL108@ChangePass

; 2076 : 			{
; 2077 : 				if (partition.Info.StartingOffset.QuadPart == encStatus.HiddenSystemPartitionStart)

  001d5	eb 1a		 jmp	 SHORT $LN24@ChangePass
$LN239@ChangePass:

; 2078 : 				{
; 2079 : 					backupHeaderOffset = partition.Info.StartingOffset.QuadPart + partition.Info.PartitionLength.QuadPart - TC_VOLUME_HEADER_SIZE;

  001d7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001da	03 48 28	 add	 ecx, DWORD PTR [eax+40]
  001dd	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  001e0	13 50 2c	 adc	 edx, DWORD PTR [eax+44]
  001e3	81 e9 00 00 01
	00		 sub	 ecx, 65536		; 00010000H
  001e9	1b d3		 sbb	 edx, ebx
  001eb	89 4d d4	 mov	 DWORD PTR _backupHeaderOffset$[ebp], ecx
  001ee	89 55 d8	 mov	 DWORD PTR _backupHeaderOffset$[ebp+4], edx
$LN24@ChangePass:
  001f1	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp]
  001f7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001fa	8d 8d 94 01 00
	00		 lea	 ecx, DWORD PTR _$S7$150209[ebp]
  00200	ff d2		 call	 edx
  00202	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp]
  00208	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0020b	8d 8d 94 01 00
	00		 lea	 ecx, DWORD PTR _$S7$150209[ebp]
  00211	ff d2		 call	 edx
  00213	84 c0		 test	 al, al
  00215	0f 85 45 ff ff
	ff		 jne	 $LL25@ChangePass
$LN23@ChangePass:

; 2080 : 					break;
; 2081 : 				}
; 2082 : 			}

  0021b	8d 8d 9c 01 00
	00		 lea	 ecx, DWORD PTR _$S7$150209[ebp+8]
  00221	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00225	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0022a	8b 85 b0 01 00
	00		 mov	 eax, DWORD PTR _$S7$150209[ebp+28]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00236	8b 8d 9c 01 00
	00		 mov	 ecx, DWORD PTR _$S7$150209[ebp+8]
  0023c	51		 push	 ecx
  0023d	89 9d b0 01 00
	00		 mov	 DWORD PTR _$S7$150209[ebp+28], ebx
  00243	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 2083 : 
; 2084 : 			if (backupHeaderOffset == -1)

  00248	8b 55 d4	 mov	 edx, DWORD PTR _backupHeaderOffset$[ebp]
  0024b	23 55 d8	 and	 edx, DWORD PTR _backupHeaderOffset$[ebp+4]
  0024e	83 c4 08	 add	 esp, 8
  00251	c7 85 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR _$S7$150209[ebp], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0025b	83 fa ff	 cmp	 edx, -1
  0025e	75 1c		 jne	 SHORT $LN18@ChangePass

; 2085 : 				throw ParameterIncorrect (SRC_POS);

  00260	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00265	8d 45 b0	 lea	 eax, DWORD PTR $T214202[ebp]
  00268	50		 push	 eax
  00269	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T214202[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00270	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T214202[ebp+4], OFFSET ??_C@_0DA@MAGEBJB@CipherShed?3?3BootEncryption?3?3Chan@
  00277	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@ChangePass:

; 2086 : 		}
; 2087 : 
; 2088 : 		device.SeekAt (headerOffset);

  0027c	8b 4d e8	 mov	 ecx, DWORD PTR _headerOffset$[ebp+4]
  0027f	8b 55 e4	 mov	 edx, DWORD PTR _headerOffset$[ebp]
  00282	51		 push	 ecx
  00283	52		 push	 edx
  00284	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  0028a	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 2089 : 		device.Read ((byte *) header, sizeof (header));

  0028f	68 00 02 00 00	 push	 512			; 00000200H
  00294	8d 85 00 02 00
	00		 lea	 eax, DWORD PTR _header$[ebp]
  0029a	50		 push	 eax
  0029b	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  002a1	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 2090 : 
; 2091 : 		PCRYPTO_INFO cryptoInfo = NULL;
; 2092 : 		
; 2093 : 		int status = ReadVolumeHeader (!encStatus.HiddenSystem, header, oldPassword, &cryptoInfo, NULL);

  002a6	8b 55 e0	 mov	 edx, DWORD PTR _oldPassword$GSCopy$[ebp]
  002a9	53		 push	 ebx
  002aa	8d 4d c4	 lea	 ecx, DWORD PTR _cryptoInfo$[ebp]
  002ad	51		 push	 ecx
  002ae	33 c9		 xor	 ecx, ecx
  002b0	39 5d 82	 cmp	 DWORD PTR _encStatus$[ebp+78], ebx
  002b3	52		 push	 edx
  002b4	0f 94 c1	 sete	 cl
  002b7	8d 85 00 02 00
	00		 lea	 eax, DWORD PTR _header$[ebp]
  002bd	50		 push	 eax
  002be	89 5d c4	 mov	 DWORD PTR _cryptoInfo$[ebp], ebx
  002c1	51		 push	 ecx
  002c2	e8 00 00 00 00	 call	 _ReadVolumeHeader

; 2094 : 		finally_do_arg (PCRYPTO_INFO, cryptoInfo, { if (finally_arg) crypto_close (finally_arg); });

  002c7	8b 55 c4	 mov	 edx, DWORD PTR _cryptoInfo$[ebp]
  002ca	83 c4 14	 add	 esp, 20			; 00000014H
  002cd	8b f0		 mov	 esi, eax
  002cf	89 55 d0	 mov	 DWORD PTR _finally2094$[ebp], edx
  002d2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 2095 : 
; 2096 : 		if (status != 0)

  002d6	3b f3		 cmp	 esi, ebx
  002d8	74 2e		 je	 SHORT $LN15@ChangePass

; 2097 : 		{
; 2098 : 			handleError (ParentWindow, status);

  002da	8b 07		 mov	 eax, DWORD PTR [edi]
  002dc	56		 push	 esi
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 _handleError
  002e3	83 c4 08	 add	 esp, 8

; 2099 : 			return status;

  002e6	8d 45 d0	 lea	 eax, DWORD PTR _finally2094$[ebp]
  002e9	e8 00 00 00 00	 call	 ??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094
  002ee	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  002f4	e8 00 00 00 00	 call	 ??1Device@CipherShed@@QAE@XZ
  002f9	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  002fc	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00301	8b c6		 mov	 eax, esi
  00303	e9 f6 02 00 00	 jmp	 $LN29@ChangePass
$LN15@ChangePass:

; 2100 : 		}
; 2101 : 
; 2102 : 		// Change the PKCS-5 PRF if requested by user
; 2103 : 		if (pkcs5 != 0)
; 2104 : 		{
; 2105 : 			cryptoInfo->pkcs5 = pkcs5;
; 2106 : 			RandSetHashFunction (pkcs5);
; 2107 : 		}
; 2108 : 
; 2109 : 		throw_sys_if (Randinit () != 0);

  00308	e8 00 00 00 00	 call	 _Randinit
  0030d	85 c0		 test	 eax, eax
  0030f	74 1e		 je	 SHORT $LN14@ChangePass
  00311	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T214204[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  00318	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0031e	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00323	8d 4d b8	 lea	 ecx, DWORD PTR $T214204[ebp]
  00326	51		 push	 ecx
  00327	89 45 bc	 mov	 DWORD PTR $T214204[ebp+4], eax
  0032a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@ChangePass:

; 2110 : 		finally_do ({ RandStop (FALSE); });
; 2111 : 
; 2112 : 		NormalCursor();

  0032f	e8 00 00 00 00	 call	 _NormalCursor

; 2113 : 		UserEnrichRandomPool (ParentWindow);

  00334	8b 17		 mov	 edx, DWORD PTR [edi]
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _UserEnrichRandomPool
  0033c	83 c4 04	 add	 esp, 4

; 2114 : 		WaitCursor();

  0033f	e8 00 00 00 00	 call	 _WaitCursor

; 2115 : 
; 2116 : 		/* The header will be re-encrypted PRAND_DISK_WIPE_PASSES times to prevent adversaries from using 
; 2117 : 		techniques such as magnetic force microscopy or magnetic force scanning tunnelling microscopy
; 2118 : 		to recover the overwritten header. According to Peter Gutmann, data should be overwritten 22
; 2119 : 		times (ideally, 35 times) using non-random patterns and pseudorandom data. However, as users might
; 2120 : 		impatiently interupt the process (etc.) we will not use the Gutmann's patterns but will write the
; 2121 : 		valid re-encrypted header, i.e. pseudorandom data, and there will be many more passes than Guttman
; 2122 : 		recommends. During each pass we will write a valid working header. Each pass will use the same master
; 2123 : 		key, and also the same header key, secondary key (XTS), etc., derived from the new password. The only
; 2124 : 		item that will be different for each pass will be the salt. This is sufficient to cause each "version"
; 2125 : 		of the header to differ substantially and in a random manner from the versions written during the
; 2126 : 		other passes. */
; 2127 : 
; 2128 : 		bool headerUpdated = false;
; 2129 : 		int result = ERR_SUCCESS;
; 2130 : 
; 2131 : 		try
; 2132 : 		{
; 2133 : 			BOOL backupHeader = FALSE;

  00344	8b 4d 82	 mov	 ecx, DWORD PTR _encStatus$[ebp+78]
  00347	88 5d ef	 mov	 BYTE PTR _headerUpdated$[ebp], bl
  0034a	89 5d e0	 mov	 DWORD PTR _result$[ebp], ebx
  0034d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00351	89 5d c8	 mov	 DWORD PTR _backupHeader$150267[ebp], ebx
  00354	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL10@ChangePass:

; 2134 : 			while (TRUE)
; 2135 : 			{
; 2136 : 				for (int wipePass = 0; wipePass < PRAND_DISK_WIPE_PASSES; wipePass++)

  00360	33 f6		 xor	 esi, esi
$LL8@ChangePass:
  00362	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  00368	0f 8d c1 01 00
	00		 jge	 $LN6@ChangePass

; 2137 : 				{
; 2138 : 					PCRYPTO_INFO tmpCryptoInfo = NULL;
; 2139 : 
; 2140 : 					status = CreateVolumeHeaderInMemory (!encStatus.HiddenSystem,
; 2141 : 						header,
; 2142 : 						cryptoInfo->ea,
; 2143 : 						cryptoInfo->mode,
; 2144 : 						newPassword,
; 2145 : 						cryptoInfo->pkcs5,
; 2146 : 						(char *) cryptoInfo->master_keydata,
; 2147 : 						&tmpCryptoInfo,
; 2148 : 						cryptoInfo->VolumeSize.Value,
; 2149 : 						cryptoInfo->hiddenVolumeSize,
; 2150 : 						cryptoInfo->EncryptedAreaStart.Value,
; 2151 : 						cryptoInfo->EncryptedAreaLength.Value,
; 2152 : 						cryptoInfo->RequiredProgramVersion,
; 2153 : 						cryptoInfo->HeaderFlags | TC_HEADER_FLAG_ENCRYPTED_SYSTEM,
; 2154 : 						cryptoInfo->SectorSize,
; 2155 : 						wipePass < PRAND_DISK_WIPE_PASSES - 1);

  0036e	33 c0		 xor	 eax, eax
  00370	89 5d c0	 mov	 DWORD PTR _tmpCryptoInfo$150275[ebp], ebx
  00373	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00379	0f 9c c0	 setl	 al
  0037c	50		 push	 eax
  0037d	8b 45 c4	 mov	 eax, DWORD PTR _cryptoInfo$[ebp]
  00380	8b 90 40 44 00
	00		 mov	 edx, DWORD PTR [eax+17472]
  00386	52		 push	 edx
  00387	8b 90 60 44 00
	00		 mov	 edx, DWORD PTR [eax+17504]
  0038d	83 ca 01	 or	 edx, 1
  00390	52		 push	 edx
  00391	0f b7 90 38 44
	00 00		 movzx	 edx, WORD PTR [eax+17464]
  00398	52		 push	 edx
  00399	8b 90 5c 44 00
	00		 mov	 edx, DWORD PTR [eax+17500]
  0039f	52		 push	 edx
  003a0	8b 90 58 44 00
	00		 mov	 edx, DWORD PTR [eax+17496]
  003a6	52		 push	 edx
  003a7	8b 90 54 44 00
	00		 mov	 edx, DWORD PTR [eax+17492]
  003ad	52		 push	 edx
  003ae	8b 90 50 44 00
	00		 mov	 edx, DWORD PTR [eax+17488]
  003b4	52		 push	 edx
  003b5	8b 90 14 44 00
	00		 mov	 edx, DWORD PTR [eax+17428]
  003bb	52		 push	 edx
  003bc	8b 90 10 44 00
	00		 mov	 edx, DWORD PTR [eax+17424]
  003c2	52		 push	 edx
  003c3	8b 90 4c 44 00
	00		 mov	 edx, DWORD PTR [eax+17484]
  003c9	52		 push	 edx
  003ca	8b 90 48 44 00
	00		 mov	 edx, DWORD PTR [eax+17480]
  003d0	52		 push	 edx
  003d1	8d 55 c0	 lea	 edx, DWORD PTR _tmpCryptoInfo$150275[ebp]
  003d4	52		 push	 edx
  003d5	8d 90 a8 41 00
	00		 lea	 edx, DWORD PTR [eax+16808]
  003db	52		 push	 edx
  003dc	8b 90 ec 43 00
	00		 mov	 edx, DWORD PTR [eax+17388]
  003e2	52		 push	 edx
  003e3	8b 55 dc	 mov	 edx, DWORD PTR _newPassword$GSCopy$[ebp]
  003e6	52		 push	 edx
  003e7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003ea	8b 00		 mov	 eax, DWORD PTR [eax]
  003ec	52		 push	 edx
  003ed	50		 push	 eax
  003ee	33 c0		 xor	 eax, eax
  003f0	3b cb		 cmp	 ecx, ebx
  003f2	0f 94 c0	 sete	 al
  003f5	8d 95 00 02 00
	00		 lea	 edx, DWORD PTR _header$[ebp]
  003fb	52		 push	 edx
  003fc	50		 push	 eax
  003fd	e8 00 00 00 00	 call	 _CreateVolumeHeaderInMemory
  00402	8b f8		 mov	 edi, eax

; 2156 : 
; 2157 : 					if (tmpCryptoInfo)

  00404	8b 45 c0	 mov	 eax, DWORD PTR _tmpCryptoInfo$150275[ebp]
  00407	83 c4 50	 add	 esp, 80			; 00000050H
  0040a	3b c3		 cmp	 eax, ebx
  0040c	74 09		 je	 SHORT $LN5@ChangePass

; 2158 : 						crypto_close (tmpCryptoInfo);

  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 _crypto_close
  00414	83 c4 04	 add	 esp, 4
$LN5@ChangePass:

; 2159 : 
; 2160 : 					if (status != 0)

  00417	3b fb		 cmp	 edi, ebx
  00419	74 7c		 je	 SHORT $LN4@ChangePass

; 2161 : 					{
; 2162 : 						handleError (ParentWindow, status);

  0041b	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0041e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00420	57		 push	 edi
  00421	52		 push	 edx
  00422	e8 00 00 00 00	 call	 _handleError
  00427	83 c4 08	 add	 esp, 8

; 2163 : 						return status;

  0042a	e8 00 00 00 00	 call	 ??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`28'::Finally2110::~Finally2110
  0042f	8d 45 d0	 lea	 eax, DWORD PTR _finally2094$[ebp]
  00432	e8 00 00 00 00	 call	 ??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094
  00437	38 9d c9 01 00
	00		 cmp	 BYTE PTR _device$[ebp+1], bl
  0043d	74 1b		 je	 SHORT $LN153@ChangePass
  0043f	38 9d c8 01 00
	00		 cmp	 BYTE PTR _device$[ebp], bl
  00445	75 0d		 jne	 SHORT $LN152@ChangePass
  00447	8b 85 d8 01 00
	00		 mov	 eax, DWORD PTR _device$[ebp+16]
  0044d	50		 push	 eax
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN152@ChangePass:
  00454	88 9d c9 01 00
	00		 mov	 BYTE PTR _device$[ebp+1], bl
$LN153@ChangePass:
  0045a	83 bd f8 01 00
	00 10		 cmp	 DWORD PTR _device$[ebp+48], 16 ; 00000010H
  00461	72 0f		 jb	 SHORT $LN172@ChangePass
  00463	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR _device$[ebp+28]
  00469	51		 push	 ecx
  0046a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0046f	83 c4 04	 add	 esp, 4
$LN172@ChangePass:
  00472	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00475	c7 85 f8 01 00
	00 0f 00 00 00	 mov	 DWORD PTR _device$[ebp+48], 15 ; 0000000fH
  0047f	89 9d f4 01 00
	00		 mov	 DWORD PTR _device$[ebp+44], ebx
  00485	88 9d e4 01 00
	00		 mov	 BYTE PTR _device$[ebp+28], bl
  0048b	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00490	8b c7		 mov	 eax, edi
  00492	e9 67 01 00 00	 jmp	 $LN29@ChangePass
$LN4@ChangePass:

; 2164 : 					}
; 2165 : 
; 2166 : 					device.SeekAt (headerOffset);

  00497	8b 45 e4	 mov	 eax, DWORD PTR _headerOffset$[ebp]
  0049a	8b 4d e8	 mov	 ecx, DWORD PTR _headerOffset$[ebp+4]
  0049d	89 85 d0 01 00
	00		 mov	 DWORD PTR _device$[ebp+8], eax
  004a3	89 8d d4 01 00
	00		 mov	 DWORD PTR _device$[ebp+12], ecx
  004a9	38 9d c8 01 00
	00		 cmp	 BYTE PTR _device$[ebp], bl
  004af	75 33		 jne	 SHORT $LN183@ChangePass
  004b1	8b 95 d8 01 00
	00		 mov	 edx, DWORD PTR _device$[ebp+16]
  004b7	53		 push	 ebx
  004b8	53		 push	 ebx
  004b9	51		 push	 ecx
  004ba	50		 push	 eax
  004bb	52		 push	 edx
  004bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  004c2	85 c0		 test	 eax, eax
  004c4	75 1e		 jne	 SHORT $LN183@ChangePass
  004c6	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T214763[ebp], OFFSET ??_7SystemException@CipherShed@@6B@
  004cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  004d3	89 45 ac	 mov	 DWORD PTR $T214763[ebp+4], eax
  004d6	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  004db	8d 45 a8	 lea	 eax, DWORD PTR $T214763[ebp]
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN183@ChangePass:

; 2167 : 					device.Write ((byte *) header, sizeof (header));

  004e4	68 00 02 00 00	 push	 512			; 00000200H
  004e9	8d 8d 00 02 00
	00		 lea	 ecx, DWORD PTR _header$[ebp]
  004ef	51		 push	 ecx
  004f0	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  004f6	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write
  004fb	8b 4d 82	 mov	 ecx, DWORD PTR _encStatus$[ebp+78]

; 2168 : 					headerUpdated = true;

  004fe	c6 45 ef 01	 mov	 BYTE PTR _headerUpdated$[ebp], 1
  00502	46		 inc	 esi
  00503	e9 5a fe ff ff	 jmp	 $LL8@ChangePass
__catch$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$0:

; 2177 : 		}
; 2178 : 		catch (Exception &e)
; 2179 : 		{
; 2180 : 			e.Show (ParentWindow);

  00508	8b 4d 94	 mov	 ecx, DWORD PTR _e$150283[ebp]
  0050b	8b 45 cc	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0050e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00510	8b 00		 mov	 eax, DWORD PTR [eax]
  00512	8b 12		 mov	 edx, DWORD PTR [edx]
  00514	50		 push	 eax
  00515	ff d2		 call	 edx

; 2181 : 			result = ERR_OS_ERROR;

  00517	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1

; 2182 : 		}

  0051e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00525	b8 00 00 00 00	 mov	 eax, $LN43@ChangePass
  0052a	c3		 ret	 0
$LN43@ChangePass:
  0052b	33 db		 xor	 ebx, ebx
  0052d	eb 28		 jmp	 SHORT $LN42@ChangePass
$LN6@ChangePass:

; 2169 : 				}
; 2170 : 
; 2171 : 				if (!encStatus.HiddenSystem || backupHeader)

  0052f	3b cb		 cmp	 ecx, ebx
  00531	74 1d		 je	 SHORT $LN2@ChangePass
  00533	39 5d c8	 cmp	 DWORD PTR _backupHeader$150267[ebp], ebx
  00536	75 18		 jne	 SHORT $LN2@ChangePass

; 2172 : 					break;
; 2173 : 
; 2174 : 				backupHeader = TRUE;
; 2175 : 				headerOffset = backupHeaderOffset;

  00538	8b 45 d4	 mov	 eax, DWORD PTR _backupHeaderOffset$[ebp]
  0053b	8b 55 d8	 mov	 edx, DWORD PTR _backupHeaderOffset$[ebp+4]
  0053e	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _backupHeader$150267[ebp], 1
  00545	89 45 e4	 mov	 DWORD PTR _headerOffset$[ebp], eax
  00548	89 55 e8	 mov	 DWORD PTR _headerOffset$[ebp+4], edx

; 2176 : 			}

  0054b	e9 10 fe ff ff	 jmp	 $LL10@ChangePass
$LN2@ChangePass:
  00550	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
$LN42@ChangePass:

; 2183 : 
; 2184 : 		if (headerUpdated)

  00557	38 5d ef	 cmp	 BYTE PTR _headerUpdated$[ebp], bl
  0055a	74 39		 je	 SHORT $LN1@ChangePass

; 2185 : 		{
; 2186 : 			ReopenBootVolumeHeaderRequest reopenRequest;
; 2187 : 			reopenRequest.VolumePassword = *newPassword;

  0055c	8b 75 dc	 mov	 esi, DWORD PTR _newPassword$GSCopy$[ebp]
  0055f	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00564	8d bd 80 01 00
	00		 lea	 edi, DWORD PTR _reopenRequest$150285[ebp]

; 2188 : 			finally_do_arg (ReopenBootVolumeHeaderRequest*, &reopenRequest, { burn (finally_arg, sizeof (*finally_arg)); });

  0056a	8d 85 80 01 00
	00		 lea	 eax, DWORD PTR _reopenRequest$150285[ebp]
  00570	f3 a5		 rep movsd
  00572	89 45 dc	 mov	 DWORD PTR _finally2188$150299[ebp], eax

; 2189 : 
; 2190 : 			CallDriver (TC_IOCTL_REOPEN_BOOT_VOLUME_HEADER, &reopenRequest, sizeof (reopenRequest));

  00575	53		 push	 ebx
  00576	53		 push	 ebx
  00577	6a 48		 push	 72			; 00000048H
  00579	8b c8		 mov	 ecx, eax
  0057b	51		 push	 ecx
  0057c	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0057f	68 5c 20 22 00	 push	 2236508			; 0022205cH
  00584	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00588	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2191 : 		}

  0058d	8d 45 dc	 lea	 eax, DWORD PTR _finally2188$150299[ebp]
  00590	e8 00 00 00 00	 call	 ??1Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::~Finally2188
$LN1@ChangePass:

; 2192 : 
; 2193 : 		return result;

  00595	e8 00 00 00 00	 call	 ??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`28'::Finally2110::~Finally2110
  0059a	8d 45 d0	 lea	 eax, DWORD PTR _finally2094$[ebp]
  0059d	e8 00 00 00 00	 call	 ??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094
  005a2	38 9d c9 01 00
	00		 cmp	 BYTE PTR _device$[ebp+1], bl
  005a8	74 1b		 je	 SHORT $LN201@ChangePass
  005aa	38 9d c8 01 00
	00		 cmp	 BYTE PTR _device$[ebp], bl
  005b0	75 0d		 jne	 SHORT $LN200@ChangePass
  005b2	8b 95 d8 01 00
	00		 mov	 edx, DWORD PTR _device$[ebp+16]
  005b8	52		 push	 edx
  005b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN200@ChangePass:
  005bf	88 9d c9 01 00
	00		 mov	 BYTE PTR _device$[ebp+1], bl
$LN201@ChangePass:
  005c5	83 bd f8 01 00
	00 10		 cmp	 DWORD PTR _device$[ebp+48], 16 ; 00000010H
  005cc	72 0f		 jb	 SHORT $LN220@ChangePass
  005ce	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR _device$[ebp+28]
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005da	83 c4 04	 add	 esp, 4
$LN220@ChangePass:
  005dd	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  005e0	c7 85 f8 01 00
	00 0f 00 00 00	 mov	 DWORD PTR _device$[ebp+48], 15 ; 0000000fH
  005ea	89 9d f4 01 00
	00		 mov	 DWORD PTR _device$[ebp+44], ebx
  005f0	88 9d e4 01 00
	00		 mov	 BYTE PTR _device$[ebp+28], bl
  005f6	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  005fb	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
$LN29@ChangePass:

; 2194 : 	}

  005fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00601	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00608	59		 pop	 ecx
  00609	5f		 pop	 edi
  0060a	5e		 pop	 esi
  0060b	5b		 pop	 ebx
  0060c	8b 8d 00 04 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00612	33 cd		 xor	 ecx, ebp
  00614	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00619	81 c5 04 04 00
	00		 add	 ebp, 1028		; 00000404H
  0061f	8b e5		 mov	 esp, ebp
  00621	5d		 pop	 ebp
  00622	c2 0c 00	 ret	 12			; 0000000cH
$LN246@ChangePass:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$2:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$4:
  00008	8d 8d c8 01 00
	00		 lea	 ecx, DWORD PTR _device$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$5:
  00013	8d 8d 94 01 00
	00		 lea	 ecx, DWORD PTR _$S7$150209[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$6:
  0001e	8d 45 d0	 lea	 eax, DWORD PTR _finally2094$[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1Finally2094@?BB@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`17'::Finally2094::~Finally2094
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$7:
  00026	e9 00 00 00 00	 jmp	 ??1Finally2110@?BM@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`28'::Finally2110::~Finally2110
__unwindfunclet$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z$8:
  0002b	8d 45 dc	 lea	 eax, DWORD PTR _finally2188$150299[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1Finally2188@?CN@??ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z@QAE@XZ ; `CipherShed::BootEncryption::ChangePassword'::`45'::Finally2188::~Finally2188
__ehhandler$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z:
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 8a 0c 04 00
	00		 mov	 ecx, DWORD PTR [edx+1036]
  0004d	33 c8		 xor	 ecx, eax
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z
  00059	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z ENDP ; CipherShed::BootEncryption::ChangePassword
PUBLIC	??_C@_0CJ@NEJBKJP@CipherShed?3?3BootEncryption?3?3Inst@ ; `string'
PUBLIC	?Install@BootEncryption@CipherShed@@QAEX_N@Z	; CipherShed::BootEncryption::Install
;	COMDAT ??_C@_0CJ@NEJBKJP@CipherShed?3?3BootEncryption?3?3Inst@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0CJ@NEJBKJP@CipherShed?3?3BootEncryption?3?3Inst@ DB 'CipherShed::B'
	DB	'ootEncryption::Install:2207', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Install@BootEncryption@CipherShed@@QAEX_N@Z$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?Install@BootEncryption@CipherShed@@QAEX_N@Z$0
__catchsym$?Install@BootEncryption@CipherShed@@QAEX_N@Z$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?Install@BootEncryption@CipherShed@@QAEX_N@Z$1
__unwindtable$?Install@BootEncryption@CipherShed@@QAEX_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?Install@BootEncryption@CipherShed@@QAEX_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Install@BootEncryption@CipherShed@@QAEX_N@Z
	DD	02H
	DD	FLAT:__tryblocktable$?Install@BootEncryption@CipherShed@@QAEX_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Install@BootEncryption@CipherShed@@QAEX_N@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Install@BootEncryption@CipherShed@@QAEX_N@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Install@BootEncryption@CipherShed@@QAEX_N@Z$5
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?Install@BootEncryption@CipherShed@@QAEX_N@Z
_TEXT	SEGMENT
_encStatus$ = -128					; size = 94
$T214993 = -32						; size = 8
_e$150341 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hiddenSystem$ = 8					; size = 1
?Install@BootEncryption@CipherShed@@QAEX_N@Z PROC	; CipherShed::BootEncryption::Install, COMDAT
; _this$ = ecx

; 2204 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Install@BootEncryption@CipherShed@@QAEX_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 74	 sub	 esp, 116		; 00000074H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2205 : 		BootEncryptionStatus encStatus = GetStatus();

  00030	6a 5e		 push	 94			; 0000005eH
  00032	8d 45 80	 lea	 eax, DWORD PTR _encStatus$[ebp]
  00035	50		 push	 eax
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	68 48 20 22 00	 push	 2236488			; 00222048H
  0003f	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2206 : 		if (encStatus.DriveMounted)

  00044	83 7d 86 00	 cmp	 DWORD PTR _encStatus$[ebp+6], 0
  00048	74 1c		 je	 SHORT $LN4@Install

; 2207 : 			throw ParameterIncorrect (SRC_POS);

  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0004f	8d 4d e0	 lea	 ecx, DWORD PTR $T214993[ebp]
  00052	51		 push	 ecx
  00053	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T214993[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0005a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T214993[ebp+4], OFFSET ??_C@_0CJ@NEJBKJP@CipherShed?3?3BootEncryption?3?3Inst@
  00061	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Install:

; 2208 : 
; 2209 : 		try
; 2210 : 		{
; 2211 : 			InstallBootLoader (false, hiddenSystem);

  00066	8b 5d 08	 mov	 ebx, DWORD PTR _hiddenSystem$[ebp]
  00069	53		 push	 ebx
  0006a	6a 00		 push	 0
  0006c	8b ce		 mov	 ecx, esi
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	e8 00 00 00 00	 call	 ?InstallBootLoader@BootEncryption@CipherShed@@QAEX_N0@Z ; CipherShed::BootEncryption::InstallBootLoader

; 2212 : 
; 2213 : 			if (!hiddenSystem)

  0007a	84 db		 test	 bl, bl
  0007c	75 07		 jne	 SHORT $LN2@Install

; 2214 : 				InstallVolumeHeader ();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?InstallVolumeHeader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::InstallVolumeHeader
$LN2@Install:

; 2215 : 
; 2216 : 			RegisterBootDriver (hiddenSystem);

  00085	53		 push	 ebx
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::RegisterBootDriver

; 2230 : 		}
; 2231 : 	}

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
__catch$?Install@BootEncryption@CipherShed@@QAEX_N@Z$0:

; 2217 : 		}
; 2218 : 		catch (Exception &)
; 2219 : 		{
; 2220 : 			try
; 2221 : 			{
; 2222 : 				RestoreSystemLoader ();

  000a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000a7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000ab	e8 00 00 00 00	 call	 ?RestoreSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::RestoreSystemLoader
  000b0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN12@Install:

; 2228 : 
; 2229 : 			throw;

  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 __CxxThrowException@8
__catch$?Install@BootEncryption@CipherShed@@QAEX_N@Z$1:

; 2223 : 			}
; 2224 : 			catch (Exception &e)
; 2225 : 			{
; 2226 : 				e.Show (ParentWindow);

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _e$150341[ebp]
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ca	8b 12		 mov	 edx, DWORD PTR [edx]
  000cc	50		 push	 eax
  000cd	ff d2		 call	 edx

; 2227 : 			}

  000cf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000d6	b8 00 00 00 00	 mov	 eax, $LN12@Install
  000db	c3		 ret	 0
$LN23@Install:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Install@BootEncryption@CipherShed@@QAEX_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Install@BootEncryption@CipherShed@@QAEX_N@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Install@BootEncryption@CipherShed@@QAEX_N@Z ENDP	; CipherShed::BootEncryption::Install
PUBLIC	??_C@_0CC@PECBFKPM@PARTITION_TOO_SMALL_FOR_HIDDEN_O@ ; `string'
PUBLIC	__real@3ff0cccccccccccd
PUBLIC	??_C@_0CH@NLNOGBOO@PARTITION_TOO_SMALL_FOR_HIDDEN_O@ ; `string'
PUBLIC	__real@4000cccccccccccd
PUBLIC	??_C@_0CE@MAHFALCP@NO_PARTITION_FOLLOWS_BOOT_PARTIT@ ; `string'
PUBLIC	??_C@_0BM@FBNGAMD@SYSTEM_PARTITION_NOT_ACTIVE?$AA@ ; `string'
PUBLIC	??_C@_0DI@DGIOJMCI@CipherShed?3?3BootEncryption?3?3GetP@ ; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
;	COMDAT ??_C@_0CC@PECBFKPM@PARTITION_TOO_SMALL_FOR_HIDDEN_O@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CC@PECBFKPM@PARTITION_TOO_SMALL_FOR_HIDDEN_O@ DB 'PARTITION_TOO_SM'
	DB	'ALL_FOR_HIDDEN_OS', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3ff0cccccccccccd
CONST	SEGMENT
__real@3ff0cccccccccccd DQ 03ff0cccccccccccdr	; 1.05
CONST	ENDS
;	COMDAT ??_C@_0CH@NLNOGBOO@PARTITION_TOO_SMALL_FOR_HIDDEN_O@
CONST	SEGMENT
??_C@_0CH@NLNOGBOO@PARTITION_TOO_SMALL_FOR_HIDDEN_O@ DB 'PARTITION_TOO_SM'
	DB	'ALL_FOR_HIDDEN_OS_NTFS', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4000cccccccccccd
CONST	SEGMENT
__real@4000cccccccccccd DQ 04000cccccccccccdr	; 2.1
CONST	ENDS
;	COMDAT ??_C@_0CE@MAHFALCP@NO_PARTITION_FOLLOWS_BOOT_PARTIT@
CONST	SEGMENT
??_C@_0CE@MAHFALCP@NO_PARTITION_FOLLOWS_BOOT_PARTIT@ DB 'NO_PARTITION_FOL'
	DB	'LOWS_BOOT_PARTITION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FBNGAMD@SYSTEM_PARTITION_NOT_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0BM@FBNGAMD@SYSTEM_PARTITION_NOT_ACTIVE?$AA@ DB 'SYSTEM_PARTITION_N'
	DB	'OT_ACTIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DGIOJMCI@CipherShed?3?3BootEncryption?3?3GetP@
CONST	SEGMENT
??_C@_0DI@DGIOJMCI@CipherShed?3?3BootEncryption?3?3GetP@ DB 'CipherShed::'
	DB	'BootEncryption::GetPartitionForHiddenOS:423', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$5
	DD	02H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$8
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$9
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$12
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$18
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ
_TEXT	SEGMENT
_activePartitionFound$ = -918				; size = 1
_candidateForHiddenOSFound$ = -917			; size = 1
_minOffsetFound$148393 = -916				; size = 8
_minOffsetFound$148347 = -916				; size = 8
$T215027 = -916						; size = 8
_this$GSCopy$ = -908					; size = 4
___$ReturnUdt$GSCopy$ = -904				; size = 4
$T215062 = -900						; size = 36
$T215058 = -900						; size = 36
$T215054 = -900						; size = 36
$T215050 = -900						; size = 36
$T215040 = -900						; size = 36
_$S2$148352 = -900					; size = 52
$T215064 = -848						; size = 4
_$S3$148396 = -844					; size = 52
_$S1$148311 = -792					; size = 52
$T215061 = -740						; size = 28
$T215057 = -740						; size = 28
$T215052 = -740						; size = 28
$T215042 = -740						; size = 28
$T215060 = -712						; size = 28
$T215056 = -712						; size = 28
$T215053 = -712						; size = 28
$T215041 = -712						; size = 28
$T215059 = -684						; size = 28
$T215055 = -684						; size = 28
$T215051 = -684						; size = 28
$T215043 = -684						; size = 28
_partitionBehindBoot$148349 = -656			; size = 128
_config$ = -528						; size = 384
_bootPartition$148348 = -144				; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ PROC ; CipherShed::BootEncryption::GetPartitionForHiddenOS, COMDAT
; _this$ = ecx

; 410  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 8c 03 00
	00		 sub	 esp, 908		; 0000038cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 88 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+920], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 a0 03
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+940]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b 84 24 b0 03
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+936]
  00042	33 ff		 xor	 edi, edi
  00044	89 7c 24 5c	 mov	 DWORD PTR $T215064[esp+940], edi

; 411  : 		Partition candidatePartition;

  00048	89 78 14	 mov	 DWORD PTR [eax+20], edi
  0004b	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  00050	89 58 18	 mov	 DWORD PTR [eax+24], ebx
  00053	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00057	89 58 58	 mov	 DWORD PTR [eax+88], ebx
  0005a	89 78 54	 mov	 DWORD PTR [eax+84], edi
  0005d	8b e9		 mov	 ebp, ecx
  0005f	c6 40 44 00	 mov	 BYTE PTR [eax+68], 0
  00063	33 c9		 xor	 ecx, ecx
  00065	c7 40 7c 07 00
	00 00		 mov	 DWORD PTR [eax+124], 7
  0006c	89 78 78	 mov	 DWORD PTR [eax+120], edi

; 412  : 
; 413  : 		memset (&candidatePartition, 0, sizeof(candidatePartition));
; 414  : 
; 415  : 		// The user may have modified/added/deleted partitions since the time the partition table was last scanned
; 416  : 		InvalidateCachedSysDriveProperties();
; 417  : 
; 418  : 		SystemDriveConfiguration config = GetSystemDriveConfiguration ();
; 419  : 		bool activePartitionFound = false;
; 420  : 		bool candidateForHiddenOSFound = false;

  0006f	89 6c 24 20	 mov	 DWORD PTR _this$GSCopy$[esp+940], ebp
  00073	89 44 24 24	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+940], eax
  00077	66 89 48 68	 mov	 WORD PTR [eax+104], cx

; 517  : 		return candidatePartition;

  0007b	68 80 00 00 00	 push	 128			; 00000080H
  00080	57		 push	 edi
  00081	be 01 00 00 00	 mov	 esi, 1
  00086	50		 push	 eax
  00087	89 bc 24 b4 03
	00 00		 mov	 DWORD PTR __$EHRec$[esp+960], edi
  0008e	89 74 24 68	 mov	 DWORD PTR $T215064[esp+952], esi
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8d 94 24 9c 01
	00 00		 lea	 edx, DWORD PTR _config$[esp+940]
  000a1	52		 push	 edx
  000a2	8b cd		 mov	 ecx, ebp
  000a4	c6 85 14 06 00
	00 00		 mov	 BYTE PTR [ebp+1556], 0
  000ab	c6 85 15 06 00
	00 00		 mov	 BYTE PTR [ebp+1557], 0
  000b2	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  000b7	89 b4 24 a8 03
	00 00		 mov	 DWORD PTR __$EHRec$[esp+948], esi
  000be	c6 44 24 16 00	 mov	 BYTE PTR _activePartitionFound$[esp+940], 0
  000c3	c6 44 24 17 00	 mov	 BYTE PTR _candidateForHiddenOSFound$[esp+940], 0
  000c8	39 bc 24 ec 02
	00 00		 cmp	 DWORD PTR _config$[esp+1276], edi
  000cf	74 1f		 je	 SHORT $LN32@GetPartiti
  000d1	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  000d6	8d 44 24 1c	 lea	 eax, DWORD PTR $T215027[esp+944]
  000da	50		 push	 eax
  000db	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T215027[esp+948], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  000e3	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T215027[esp+952], OFFSET ??_C@_0DI@DGIOJMCI@CipherShed?3?3BootEncryption?3?3GetP@
  000eb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN32@GetPartiti:

; 421  : 
; 422  : 		if (config.SystemPartition.IsGPT)
; 423  : 			throw ParameterIncorrect (SRC_POS);	// It is assumed that CheckRequirements() had been called
; 424  : 
; 425  : 		// Find the first active partition on the system drive 
; 426  : 		foreach (const Partition &partition, config.Partitions)

  000f0	8d 8c 24 6c 02
	00 00		 lea	 ecx, DWORD PTR _config$[esp+1148]
  000f7	51		 push	 ecx
  000f8	8d 94 24 98 00
	00 00		 lea	 edx, DWORD PTR _$S1$148311[esp+944]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00105	83 c4 08	 add	 esp, 8
  00108	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+940]
  0010f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00112	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _$S1$148311[esp+940]
  00119	c6 84 24 a8 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+948], 2
  00121	ff d2		 call	 edx
  00123	84 c0		 test	 al, al
  00125	0f 84 bb 03 00
	00		 je	 $LN29@GetPartiti
  0012b	eb 03 8d 49 00	 npad	 5
$LL31@GetPartiti:
  00130	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+984]
  00137	3b c7		 cmp	 eax, edi
  00139	75 10		 jne	 SHORT $LN999@GetPartiti
  0013b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00140	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+984]
  00147	3b c7		 cmp	 eax, edi
  00149	74 04		 je	 SHORT $LN189@GetPartiti
$LN999@GetPartiti:
  0014b	8b 00		 mov	 eax, DWORD PTR [eax]
  0014d	eb 02		 jmp	 SHORT $LN190@GetPartiti
$LN189@GetPartiti:
  0014f	33 c0		 xor	 eax, eax
$LN190@GetPartiti:
  00151	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR _$S1$148311[esp+988]
  00158	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0015b	75 05		 jne	 SHORT $LN175@GetPartiti
  0015d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN175@GetPartiti:
  00162	8b b4 24 c4 00
	00 00		 mov	 esi, DWORD PTR _$S1$148311[esp+988]
  00169	83 c6 08	 add	 esi, 8
  0016c	80 bc 24 99 00
	00 00 00	 cmp	 BYTE PTR _$S1$148311[esp+945], 0
  00174	0f 94 c0	 sete	 al
  00177	88 84 24 99 00
	00 00		 mov	 BYTE PTR _$S1$148311[esp+945], al
  0017e	84 c0		 test	 al, al
  00180	0f 84 32 03 00
	00		 je	 $LN30@GetPartiti
$LL195@GetPartiti:

; 427  : 		{
; 428  : 			if (partition.Info.BootIndicator)

  00186	80 7e 39 00	 cmp	 BYTE PTR [esi+57], 0
  0018a	75 1d		 jne	 SHORT $LN989@GetPartiti
  0018c	84 c0		 test	 al, al
  0018e	0f 94 c0	 sete	 al
  00191	c6 84 24 98 00
	00 00 01	 mov	 BYTE PTR _$S1$148311[esp+944], 1
  00199	88 84 24 99 00
	00 00		 mov	 BYTE PTR _$S1$148311[esp+945], al
  001a0	84 c0		 test	 al, al
  001a2	75 e2		 jne	 SHORT $LL195@GetPartiti
  001a4	e9 0f 03 00 00	 jmp	 $LN30@GetPartiti
$LN989@GetPartiti:

; 429  : 			{
; 430  : 				if (partition.Info.PartitionNumber != config.SystemPartition.Number)

  001a9	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001ac	3b 94 24 e8 02
	00 00		 cmp	 edx, DWORD PTR _config$[esp+1272]
  001b3	0f 84 fa 02 00
	00		 je	 $LN24@GetPartiti

; 431  : 				{
; 432  : 					// If there is an extra boot partition, the system partition must be located right behind it
; 433  : 					if (IsOSAtLeast (WIN_7) && config.ExtraBootPartitionPresent)

  001b9	6a 0d		 push	 13			; 0000000dH
  001bb	e8 00 00 00 00	 call	 _IsOSAtLeast
  001c0	83 c4 04	 add	 esp, 4
  001c3	85 c0		 test	 eax, eax
  001c5	0f 84 8b 04 00
	00		 je	 $LN23@GetPartiti
  001cb	80 bc 24 5c 02
	00 00 00	 cmp	 BYTE PTR _config$[esp+1132], 0
  001d3	0f 84 7d 04 00
	00		 je	 $LN23@GetPartiti

; 434  : 					{
; 435  : 						int64 minOffsetFound = config.DrivePartition.Info.PartitionLength.QuadPart;

  001d9	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR _config$[esp+1048]
  001e0	8b 84 24 04 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1044]
  001e7	89 4c 24 1c	 mov	 DWORD PTR _minOffsetFound$148347[esp+944], ecx

; 436  : 						Partition bootPartition = partition;

  001eb	56		 push	 esi
  001ec	8d 8c 24 20 03
	00 00		 lea	 ecx, DWORD PTR _bootPartition$148348[esp+944]
  001f3	89 44 24 1c	 mov	 DWORD PTR _minOffsetFound$148347[esp+944], eax
  001f7	e8 00 00 00 00	 call	 ??0Partition@CipherShed@@QAE@ABU01@@Z

; 437  : 						Partition partitionBehindBoot;

  001fc	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00201	33 d2		 xor	 edx, edx
  00203	89 84 24 34 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+964], eax
  0020a	89 bc 24 30 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+960], edi
  00211	c6 84 24 20 01
	00 00 00	 mov	 BYTE PTR _partitionBehindBoot$148349[esp+944], 0
  00219	89 84 24 74 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1028], eax
  00220	89 bc 24 70 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1024], edi
  00227	c6 84 24 60 01
	00 00 00	 mov	 BYTE PTR _partitionBehindBoot$148349[esp+1008], 0
  0022f	c7 84 24 98 01
	00 00 07 00 00
	00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1064], 7
  0023a	89 bc 24 94 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1060], edi
  00241	66 89 94 24 84
	01 00 00	 mov	 WORD PTR _partitionBehindBoot$148349[esp+1044], dx

; 438  : 
; 439  : 						foreach (const Partition &partition, config.Partitions)

  00249	8d 84 24 6c 02
	00 00		 lea	 eax, DWORD PTR _config$[esp+1148]
  00250	50		 push	 eax
  00251	8d 4c 24 2c	 lea	 ecx, DWORD PTR _$S2$148352[esp+944]
  00255	51		 push	 ecx
  00256	c6 84 24 b0 03
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+956], 4
  0025e	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00263	83 c4 08	 add	 esp, 8
  00266	8b 54 24 28	 mov	 edx, DWORD PTR _$S2$148352[esp+940]
  0026a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0026d	8d 4c 24 28	 lea	 ecx, DWORD PTR _$S2$148352[esp+940]
  00271	c6 84 24 a8 03
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+948], 5
  00279	ff d0		 call	 eax
  0027b	84 c0		 test	 al, al
  0027d	0f 84 1b 01 00
	00		 je	 $LN20@GetPartiti
$LL22@GetPartiti:
  00283	8b 44 24 54	 mov	 eax, DWORD PTR _$S2$148352[esp+984]
  00287	3b c7		 cmp	 eax, edi
  00289	75 0d		 jne	 SHORT $LN1000@GetPartiti
  0028b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00290	8b 44 24 54	 mov	 eax, DWORD PTR _$S2$148352[esp+984]
  00294	3b c7		 cmp	 eax, edi
  00296	74 04		 je	 SHORT $LN321@GetPartiti
$LN1000@GetPartiti:
  00298	8b 00		 mov	 eax, DWORD PTR [eax]
  0029a	eb 02		 jmp	 SHORT $LN322@GetPartiti
$LN321@GetPartiti:
  0029c	33 c0		 xor	 eax, eax
$LN322@GetPartiti:
  0029e	8b 4c 24 58	 mov	 ecx, DWORD PTR _$S2$148352[esp+988]
  002a2	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  002a5	75 05		 jne	 SHORT $LN307@GetPartiti
  002a7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN307@GetPartiti:
  002ac	8b 6c 24 58	 mov	 ebp, DWORD PTR _$S2$148352[esp+988]
  002b0	83 c5 08	 add	 ebp, 8
  002b3	80 7c 24 2d 00	 cmp	 BYTE PTR _$S2$148352[esp+945], 0
  002b8	0f 94 c2	 sete	 dl
  002bb	88 54 24 2d	 mov	 BYTE PTR _$S2$148352[esp+945], dl
  002bf	84 d2		 test	 dl, dl
  002c1	0f 84 b5 00 00
	00		 je	 $LN21@GetPartiti
  002c7	8d 5d 20	 lea	 ebx, DWORD PTR [ebp+32]
  002ca	8d 9b 00 00 00
	00		 npad	 6
$LL327@GetPartiti:

; 440  : 						{
; 441  : 							if (partition.Info.StartingOffset.QuadPart > bootPartition.Info.StartingOffset.QuadPart
; 442  : 								&& partition.Info.StartingOffset.QuadPart < minOffsetFound)

  002d0	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  002d3	3b 84 24 40 03
	00 00		 cmp	 eax, DWORD PTR _bootPartition$148348[esp+976]
  002da	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  002dc	0f 8c 84 00 00
	00		 jl	 $LN18@GetPartiti
  002e2	7f 09		 jg	 SHORT $LN1002@GetPartiti
  002e4	3b 8c 24 3c 03
	00 00		 cmp	 ecx, DWORD PTR _bootPartition$148348[esp+972]
  002eb	76 79		 jbe	 SHORT $LN18@GetPartiti
$LN1002@GetPartiti:
  002ed	3b 44 24 1c	 cmp	 eax, DWORD PTR _minOffsetFound$148347[esp+944]
  002f1	7f 73		 jg	 SHORT $LN18@GetPartiti
  002f3	7c 06		 jl	 SHORT $LN1003@GetPartiti
  002f5	3b 4c 24 18	 cmp	 ecx, DWORD PTR _minOffsetFound$148347[esp+940]
  002f9	73 6b		 jae	 SHORT $LN18@GetPartiti
$LN1003@GetPartiti:

; 443  : 							{
; 444  : 								minOffsetFound = partition.Info.StartingOffset.QuadPart;
; 445  : 								partitionBehindBoot = partition;

  002fb	6a ff		 push	 -1
  002fd	6a 00		 push	 0
  002ff	89 4c 24 20	 mov	 DWORD PTR _minOffsetFound$148347[esp+948], ecx
  00303	55		 push	 ebp
  00304	8d 8c 24 28 01
	00 00		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+952]
  0030b	89 44 24 28	 mov	 DWORD PTR _minOffsetFound$148347[esp+956], eax
  0030f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00314	6a ff		 push	 -1
  00316	b9 08 00 00 00	 mov	 ecx, 8
  0031b	8b f3		 mov	 esi, ebx
  0031d	8d bc 24 40 01
	00 00		 lea	 edi, DWORD PTR _partitionBehindBoot$148349[esp+976]
  00324	6a 00		 push	 0
  00326	8d 55 40	 lea	 edx, DWORD PTR [ebp+64]
  00329	f3 a5		 rep movsd
  0032b	52		 push	 edx
  0032c	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+1016]
  00333	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00338	8b 45 5c	 mov	 eax, DWORD PTR [ebp+92]
  0033b	6a ff		 push	 -1
  0033d	89 84 24 7c 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1036], eax
  00344	8b 4d 60	 mov	 ecx, DWORD PTR [ebp+96]
  00347	6a 00		 push	 0
  00349	8d 55 64	 lea	 edx, DWORD PTR [ebp+100]
  0034c	89 8c 24 84 01
	00 00		 mov	 DWORD PTR _partitionBehindBoot$148349[esp+1044], ecx
  00353	52		 push	 edx
  00354	8d 8c 24 8c 01
	00 00		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+1052]
  0035b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00360	8a 54 24 2d	 mov	 dl, BYTE PTR _$S2$148352[esp+945]
  00364	33 ff		 xor	 edi, edi
$LN18@GetPartiti:
  00366	84 d2		 test	 dl, dl
  00368	0f 94 c2	 sete	 dl
  0036b	c6 44 24 2c 01	 mov	 BYTE PTR _$S2$148352[esp+944], 1
  00370	88 54 24 2d	 mov	 BYTE PTR _$S2$148352[esp+945], dl
  00374	84 d2		 test	 dl, dl
  00376	0f 85 54 ff ff
	ff		 jne	 $LL327@GetPartiti
$LN21@GetPartiti:

; 438  : 
; 439  : 						foreach (const Partition &partition, config.Partitions)

  0037c	8b 44 24 28	 mov	 eax, DWORD PTR _$S2$148352[esp+940]
  00380	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00383	8d 4c 24 28	 lea	 ecx, DWORD PTR _$S2$148352[esp+940]
  00387	ff d2		 call	 edx
  00389	8b 44 24 28	 mov	 eax, DWORD PTR _$S2$148352[esp+940]
  0038d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00390	8d 4c 24 28	 lea	 ecx, DWORD PTR _$S2$148352[esp+940]
  00394	ff d2		 call	 edx
  00396	84 c0		 test	 al, al
  00398	0f 85 e5 fe ff
	ff		 jne	 $LL22@GetPartiti
$LN20@GetPartiti:

; 446  : 							}
; 447  : 						}

  0039e	8b 44 24 44	 mov	 eax, DWORD PTR _$S2$148352[esp+968]
  003a2	8b 30		 mov	 esi, DWORD PTR [eax]
  003a4	89 00		 mov	 DWORD PTR [eax], eax
  003a6	8b 44 24 44	 mov	 eax, DWORD PTR _$S2$148352[esp+968]
  003aa	89 40 04	 mov	 DWORD PTR [eax+4], eax
  003ad	8b 44 24 44	 mov	 eax, DWORD PTR _$S2$148352[esp+968]
  003b1	89 7c 24 48	 mov	 DWORD PTR _$S2$148352[esp+972], edi
  003b5	3b f0		 cmp	 esi, eax
  003b7	74 7d		 je	 SHORT $LN351@GetPartiti
  003b9	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
$LN353@GetPartiti:
  003be	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  003c5	8b 1e		 mov	 ebx, DWORD PTR [esi]
  003c7	72 0c		 jb	 SHORT $LN393@GetPartiti
  003c9	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  003cc	50		 push	 eax
  003cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003d2	83 c4 04	 add	 esp, 4
$LN393@GetPartiti:
  003d5	33 c0		 xor	 eax, eax
  003d7	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  003e1	89 be 80 00 00
	00		 mov	 DWORD PTR [esi+128], edi
  003e7	66 89 46 70	 mov	 WORD PTR [esi+112], ax
  003eb	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  003ef	72 0c		 jb	 SHORT $LN419@GetPartiti
  003f1	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003fa	83 c4 04	 add	 esp, 4
$LN419@GetPartiti:
  003fd	89 6e 60	 mov	 DWORD PTR [esi+96], ebp
  00400	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  00403	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  00407	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  0040b	72 0c		 jb	 SHORT $LN445@GetPartiti
  0040d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00416	83 c4 04	 add	 esp, 4
$LN445@GetPartiti:
  00419	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0041c	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0041f	56		 push	 esi
  00420	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00424	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00429	8b 44 24 48	 mov	 eax, DWORD PTR _$S2$148352[esp+972]
  0042d	83 c4 04	 add	 esp, 4
  00430	8b f3		 mov	 esi, ebx
  00432	3b d8		 cmp	 ebx, eax
  00434	75 88		 jne	 SHORT $LN353@GetPartiti
$LN351@GetPartiti:
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0043c	8b 4c 24 34	 mov	 ecx, DWORD PTR _$S2$148352[esp+952]
  00440	51		 push	 ecx
  00441	89 7c 24 4c	 mov	 DWORD PTR _$S2$148352[esp+976], edi
  00445	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 448  : 
; 449  : 						if (minOffsetFound != config.DrivePartition.Info.PartitionLength.QuadPart
; 450  : 							&& partitionBehindBoot.Number == config.SystemPartition.Number)

  0044a	8b 54 24 20	 mov	 edx, DWORD PTR _minOffsetFound$148347[esp+948]
  0044e	83 c4 08	 add	 esp, 8
  00451	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _$S2$148352[esp+940], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00459	3b 94 24 04 02
	00 00		 cmp	 edx, DWORD PTR _config$[esp+1044]
  00460	75 11		 jne	 SHORT $LN1004@GetPartiti
  00462	8b 44 24 1c	 mov	 eax, DWORD PTR _minOffsetFound$148347[esp+944]
  00466	3b 84 24 08 02
	00 00		 cmp	 eax, DWORD PTR _config$[esp+1048]
  0046d	0f 84 c3 01 00
	00		 je	 $LN15@GetPartiti
$LN1004@GetPartiti:
  00473	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+1032]
  0047a	3b 8c 24 e8 02
	00 00		 cmp	 ecx, DWORD PTR _config$[esp+1272]
  00481	0f 85 af 01 00
	00		 jne	 $LN15@GetPartiti

; 451  : 						{
; 452  : 							activePartitionFound = true;
; 453  : 							break;

  00487	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+940]
  0048e	c6 44 24 16 01	 mov	 BYTE PTR _activePartitionFound$[esp+940], 1
  00493	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00498	8d 8c 24 1c 03
	00 00		 lea	 ecx, DWORD PTR _bootPartition$148348[esp+940]
  0049f	c6 84 24 a8 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+948], 2
  004a7	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  004ac	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  004b1	eb 05		 jmp	 SHORT $LN30@GetPartiti
$LN24@GetPartiti:

; 459  : 				}
; 460  : 
; 461  : 				activePartitionFound = true;

  004b3	c6 44 24 16 01	 mov	 BYTE PTR _activePartitionFound$[esp+940], 1
$LN30@GetPartiti:

; 421  : 
; 422  : 		if (config.SystemPartition.IsGPT)
; 423  : 			throw ParameterIncorrect (SRC_POS);	// It is assumed that CheckRequirements() had been called
; 424  : 
; 425  : 		// Find the first active partition on the system drive 
; 426  : 		foreach (const Partition &partition, config.Partitions)

  004b8	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR _$S1$148311[esp+940]
  004bf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004c2	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _$S1$148311[esp+940]
  004c9	ff d0		 call	 eax
  004cb	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR _$S1$148311[esp+940]
  004d2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004d5	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _$S1$148311[esp+940]
  004dc	ff d0		 call	 eax
  004de	84 c0		 test	 al, al
  004e0	0f 85 4a fc ff
	ff		 jne	 $LL31@GetPartiti
$LN29@GetPartiti:

; 462  : 				break;
; 463  : 			}
; 464  : 		}

  004e6	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+968]
  004ed	8b 30		 mov	 esi, DWORD PTR [eax]
  004ef	89 00		 mov	 DWORD PTR [eax], eax
  004f1	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+968]
  004f8	89 40 04	 mov	 DWORD PTR [eax+4], eax
  004fb	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+968]
  00502	c6 84 24 a8 03
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+948], 1
  0050a	89 bc 24 b4 00
	00 00		 mov	 DWORD PTR _$S1$148311[esp+972], edi
  00511	3b f0		 cmp	 esi, eax
  00513	74 7b		 je	 SHORT $LN554@GetPartiti
$LL556@GetPartiti:
  00515	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  0051c	8b 2e		 mov	 ebp, DWORD PTR [esi]
  0051e	72 0c		 jb	 SHORT $LN596@GetPartiti
  00520	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00523	50		 push	 eax
  00524	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00529	83 c4 04	 add	 esp, 4
$LN596@GetPartiti:
  0052c	33 c9		 xor	 ecx, ecx
  0052e	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  00538	89 be 80 00 00
	00		 mov	 DWORD PTR [esi+128], edi
  0053e	66 89 4e 70	 mov	 WORD PTR [esi+112], cx
  00542	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  00546	72 0c		 jb	 SHORT $LN622@GetPartiti
  00548	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0054b	50		 push	 eax
  0054c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00551	83 c4 04	 add	 esp, 4
$LN622@GetPartiti:
  00554	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  00557	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0055a	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  0055e	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00562	72 0c		 jb	 SHORT $LN648@GetPartiti
  00564	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0056d	83 c4 04	 add	 esp, 4
$LN648@GetPartiti:
  00570	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00573	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00576	56		 push	 esi
  00577	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  0057b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00580	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR _$S1$148311[esp+972]
  00587	83 c4 04	 add	 esp, 4
  0058a	8b f5		 mov	 esi, ebp
  0058c	3b e8		 cmp	 ebp, eax
  0058e	75 85		 jne	 SHORT $LL556@GetPartiti
$LN554@GetPartiti:
  00590	50		 push	 eax
  00591	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00596	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR _$S1$148311[esp+952]
  0059d	52		 push	 edx
  0059e	89 bc 24 b8 00
	00 00		 mov	 DWORD PTR _$S1$148311[esp+976], edi
  005a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005aa	83 c4 08	 add	 esp, 8

; 465  : 
; 466  : 		/* WARNING: Note that the partition number at the end of a device path (\Device\HarddiskY\PartitionX) must
; 467  : 		NOT be used to find the first partition physically located behind the active one. The reason is that the 
; 468  : 		user may have deleted and created partitions during this session and e.g. the second partition could have 
; 469  : 		a higer number than the third one. */
; 470  : 
; 471  : 		
; 472  : 		// Find the first partition physically located behind the active partition
; 473  : 		if (activePartitionFound)

  005ad	80 7c 24 16 00	 cmp	 BYTE PTR _activePartitionFound$[esp+940], 0
  005b2	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _$S1$148311[esp+940], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  005bd	0f 84 81 05 00
	00		 je	 $LN14@GetPartiti

; 474  : 		{
; 475  : 			int64 minOffsetFound = config.DrivePartition.Info.PartitionLength.QuadPart;

  005c3	8b 84 24 04 02
	00 00		 mov	 eax, DWORD PTR _config$[esp+1044]
  005ca	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR _config$[esp+1048]

; 476  : 
; 477  : 			foreach (const Partition &partition, config.Partitions)

  005d1	8d 94 24 6c 02
	00 00		 lea	 edx, DWORD PTR _config$[esp+1148]
  005d8	89 44 24 18	 mov	 DWORD PTR _minOffsetFound$148393[esp+940], eax
  005dc	52		 push	 edx
  005dd	8d 44 24 64	 lea	 eax, DWORD PTR _$S3$148396[esp+944]
  005e1	50		 push	 eax
  005e2	89 4c 24 24	 mov	 DWORD PTR _minOffsetFound$148393[esp+952], ecx
  005e6	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  005eb	83 c4 08	 add	 esp, 8
  005ee	8b 54 24 60	 mov	 edx, DWORD PTR _$S3$148396[esp+940]
  005f2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005f5	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S3$148396[esp+940]
  005f9	c6 84 24 a8 03
	00 00 09	 mov	 BYTE PTR __$EHRec$[esp+948], 9
  00601	ff d0		 call	 eax
  00603	84 c0		 test	 al, al
  00605	0f 84 fb 01 00
	00		 je	 $LN11@GetPartiti
  0060b	eb 03 8d 49 00	 npad	 5
$LL13@GetPartiti:
  00610	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR _$S3$148396[esp+984]
  00617	3b c7		 cmp	 eax, edi
  00619	75 14		 jne	 SHORT $LN1001@GetPartiti
  0061b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00620	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR _$S3$148396[esp+984]
  00627	3b c7		 cmp	 eax, edi
  00629	0f 84 ea 00 00
	00		 je	 $LN702@GetPartiti
$LN1001@GetPartiti:
  0062f	8b 00		 mov	 eax, DWORD PTR [eax]
  00631	e9 e5 00 00 00	 jmp	 $LN703@GetPartiti
$LN15@GetPartiti:

; 454  : 						}
; 455  : 					}

  00636	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[esp+940]
  0063d	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00642	8d 8c 24 1c 03
	00 00		 lea	 ecx, DWORD PTR _bootPartition$148348[esp+940]
  00649	c6 84 24 a8 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+948], 2
  00651	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
$LN23@GetPartiti:

; 456  : 
; 457  : 					throw ErrorException (wstring (GetString ("SYSTEM_PARTITION_NOT_ACTIVE"))
; 458  : 						+ GetRemarksOnHiddenOS());

  00656	8d 8c 24 e4 00
	00 00		 lea	 ecx, DWORD PTR $T215041[esp+940]
  0065d	51		 push	 ecx
  0065e	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+944]
  00662	e8 00 00 00 00	 call	 ?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
  00667	8b f0		 mov	 esi, eax
  00669	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FBNGAMD@SYSTEM_PARTITION_NOT_ACTIVE?$AA@
  0066e	c6 84 24 ac 03
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+952], 6
  00676	e8 00 00 00 00	 call	 _GetString
  0067b	83 c4 04	 add	 esp, 4
  0067e	bd 07 00 00 00	 mov	 ebp, 7
  00683	33 d2		 xor	 edx, edx
  00685	8b c8		 mov	 ecx, eax
  00687	89 ac 24 e0 00
	00 00		 mov	 DWORD PTR $T215042[esp+964], ebp
  0068e	89 bc 24 dc 00
	00 00		 mov	 DWORD PTR $T215042[esp+960], edi
  00695	66 89 94 24 cc
	00 00 00	 mov	 WORD PTR $T215042[esp+944], dx
  0069d	8d 59 02	 lea	 ebx, DWORD PTR [ecx+2]
$LL1005@GetPartiti:
  006a0	66 8b 11	 mov	 dx, WORD PTR [ecx]
  006a3	83 c1 02	 add	 ecx, 2
  006a6	66 3b d7	 cmp	 dx, di
  006a9	75 f5		 jne	 SHORT $LL1005@GetPartiti
  006ab	2b cb		 sub	 ecx, ebx
  006ad	d1 f9		 sar	 ecx, 1
  006af	51		 push	 ecx
  006b0	50		 push	 eax
  006b1	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR $T215042[esp+948]
  006b8	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  006bd	56		 push	 esi
  006be	8d 84 24 cc 00
	00 00		 lea	 eax, DWORD PTR $T215042[esp+944]
  006c5	50		 push	 eax
  006c6	8d 8c 24 08 01
	00 00		 lea	 ecx, DWORD PTR $T215043[esp+948]
  006cd	51		 push	 ecx
  006ce	c6 84 24 b4 03
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+960], 7
  006d6	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  006db	83 c4 0c	 add	 esp, 12			; 0000000cH
  006de	6a ff		 push	 -1
  006e0	57		 push	 edi
  006e1	33 d2		 xor	 edx, edx
  006e3	50		 push	 eax
  006e4	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T215040[esp+960]
  006e8	c6 84 24 b4 03
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+960], 8
  006f0	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T215040[esp+952], OFFSET ??_7ErrorException@CipherShed@@6B@
  006f8	89 6c 24 54	 mov	 DWORD PTR $T215040[esp+984], ebp
  006fc	89 7c 24 50	 mov	 DWORD PTR $T215040[esp+980], edi
  00700	66 89 54 24 40	 mov	 WORD PTR $T215040[esp+964], dx
  00705	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0070a	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0070f	8d 44 24 2c	 lea	 eax, DWORD PTR $T215040[esp+944]
  00713	50		 push	 eax
  00714	e8 00 00 00 00	 call	 __CxxThrowException@8

; 476  : 
; 477  : 			foreach (const Partition &partition, config.Partitions)

$LN702@GetPartiti:
  00719	33 c0		 xor	 eax, eax
$LN703@GetPartiti:
  0071b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _$S3$148396[esp+988]
  00722	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00725	75 05		 jne	 SHORT $LN688@GetPartiti
  00727	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN688@GetPartiti:
  0072c	8b ac 24 90 00
	00 00		 mov	 ebp, DWORD PTR _$S3$148396[esp+988]
  00733	83 c5 08	 add	 ebp, 8
  00736	80 7c 24 65 00	 cmp	 BYTE PTR _$S3$148396[esp+945], 0
  0073b	0f 94 c2	 sete	 dl
  0073e	88 54 24 65	 mov	 BYTE PTR _$S3$148396[esp+945], dl
  00742	84 d2		 test	 dl, dl
  00744	0f 84 9a 00 00
	00		 je	 $LN12@GetPartiti
$LN708@GetPartiti:

; 478  : 			{
; 479  : 				if (partition.Info.StartingOffset.QuadPart > config.SystemPartition.Info.StartingOffset.QuadPart
; 480  : 					&& partition.Info.StartingOffset.QuadPart < minOffsetFound)

  0074a	8b 45 24	 mov	 eax, DWORD PTR [ebp+36]
  0074d	3b 84 24 b0 02
	00 00		 cmp	 eax, DWORD PTR _config$[esp+1216]
  00754	8b 4d 20	 mov	 ecx, DWORD PTR [ebp+32]
  00757	7c 75		 jl	 SHORT $LN9@GetPartiti
  00759	7f 09		 jg	 SHORT $LN1006@GetPartiti
  0075b	3b 8c 24 ac 02
	00 00		 cmp	 ecx, DWORD PTR _config$[esp+1212]
  00762	76 6a		 jbe	 SHORT $LN9@GetPartiti
$LN1006@GetPartiti:
  00764	3b 44 24 1c	 cmp	 eax, DWORD PTR _minOffsetFound$148393[esp+944]
  00768	7f 64		 jg	 SHORT $LN9@GetPartiti
  0076a	7c 06		 jl	 SHORT $LN1007@GetPartiti
  0076c	3b 4c 24 18	 cmp	 ecx, DWORD PTR _minOffsetFound$148393[esp+940]
  00770	73 5c		 jae	 SHORT $LN9@GetPartiti
$LN1007@GetPartiti:

; 481  : 				{
; 482  : 					minOffsetFound = partition.Info.StartingOffset.QuadPart;
; 483  : 
; 484  : 					candidatePartition = partition;

  00772	8b 5c 24 24	 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$[esp+940]
  00776	6a ff		 push	 -1
  00778	6a 00		 push	 0
  0077a	89 4c 24 20	 mov	 DWORD PTR _minOffsetFound$148393[esp+948], ecx
  0077e	55		 push	 ebp
  0077f	8b cb		 mov	 ecx, ebx
  00781	89 44 24 28	 mov	 DWORD PTR _minOffsetFound$148393[esp+956], eax
  00785	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0078a	6a ff		 push	 -1
  0078c	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  0078f	b9 08 00 00 00	 mov	 ecx, 8
  00794	8d 75 20	 lea	 esi, DWORD PTR [ebp+32]
  00797	6a 00		 push	 0
  00799	8d 55 40	 lea	 edx, DWORD PTR [ebp+64]
  0079c	f3 a5		 rep movsd
  0079e	52		 push	 edx
  0079f	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  007a2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  007a7	8b 45 5c	 mov	 eax, DWORD PTR [ebp+92]
  007aa	6a ff		 push	 -1
  007ac	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
  007af	8b 4d 60	 mov	 ecx, DWORD PTR [ebp+96]
  007b2	6a 00		 push	 0
  007b4	8d 55 64	 lea	 edx, DWORD PTR [ebp+100]
  007b7	89 4b 60	 mov	 DWORD PTR [ebx+96], ecx
  007ba	52		 push	 edx
  007bb	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  007be	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 485  : 
; 486  : 					candidateForHiddenOSFound = true;

  007c3	8a 54 24 65	 mov	 dl, BYTE PTR _$S3$148396[esp+945]
  007c7	c6 44 24 17 01	 mov	 BYTE PTR _candidateForHiddenOSFound$[esp+940], 1
  007cc	33 ff		 xor	 edi, edi
$LN9@GetPartiti:
  007ce	84 d2		 test	 dl, dl
  007d0	0f 94 c2	 sete	 dl
  007d3	c6 44 24 64 01	 mov	 BYTE PTR _$S3$148396[esp+944], 1
  007d8	88 54 24 65	 mov	 BYTE PTR _$S3$148396[esp+945], dl
  007dc	84 d2		 test	 dl, dl
  007de	0f 85 66 ff ff
	ff		 jne	 $LN708@GetPartiti
$LN12@GetPartiti:

; 476  : 
; 477  : 			foreach (const Partition &partition, config.Partitions)

  007e4	8b 44 24 60	 mov	 eax, DWORD PTR _$S3$148396[esp+940]
  007e8	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  007eb	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S3$148396[esp+940]
  007ef	ff d2		 call	 edx
  007f1	8b 44 24 60	 mov	 eax, DWORD PTR _$S3$148396[esp+940]
  007f5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007f8	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S3$148396[esp+940]
  007fc	ff d2		 call	 edx
  007fe	84 c0		 test	 al, al
  00800	0f 85 0a fe ff
	ff		 jne	 $LL13@GetPartiti
$LN11@GetPartiti:

; 487  : 				}
; 488  : 			}

  00806	8b 44 24 7c	 mov	 eax, DWORD PTR _$S3$148396[esp+968]
  0080a	8b 30		 mov	 esi, DWORD PTR [eax]
  0080c	89 00		 mov	 DWORD PTR [eax], eax
  0080e	8b 44 24 7c	 mov	 eax, DWORD PTR _$S3$148396[esp+968]
  00812	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00815	8b 44 24 7c	 mov	 eax, DWORD PTR _$S3$148396[esp+968]
  00819	c6 84 24 a8 03
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+948], 1
  00821	89 bc 24 80 00
	00 00		 mov	 DWORD PTR _$S3$148396[esp+972], edi
  00828	3b f0		 cmp	 esi, eax
  0082a	0f 84 80 00 00
	00		 je	 $LN732@GetPartiti
  00830	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
$LN734@GetPartiti:
  00835	83 be 84 00 00
	00 08		 cmp	 DWORD PTR [esi+132], 8
  0083c	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0083e	72 0c		 jb	 SHORT $LN774@GetPartiti
  00840	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00843	50		 push	 eax
  00844	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00849	83 c4 04	 add	 esp, 4
$LN774@GetPartiti:
  0084c	33 c0		 xor	 eax, eax
  0084e	c7 86 84 00 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+132], 7
  00858	89 be 80 00 00
	00		 mov	 DWORD PTR [esi+128], edi
  0085e	66 89 46 70	 mov	 WORD PTR [esi+112], ax
  00862	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  00866	72 0c		 jb	 SHORT $LN800@GetPartiti
  00868	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0086b	50		 push	 eax
  0086c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00871	83 c4 04	 add	 esp, 4
$LN800@GetPartiti:
  00874	89 6e 60	 mov	 DWORD PTR [esi+96], ebp
  00877	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0087a	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0
  0087e	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00882	72 0c		 jb	 SHORT $LN826@GetPartiti
  00884	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00887	50		 push	 eax
  00888	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0088d	83 c4 04	 add	 esp, 4
$LN826@GetPartiti:
  00890	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  00893	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00896	56		 push	 esi
  00897	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  0089b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008a0	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _$S3$148396[esp+972]
  008a7	83 c4 04	 add	 esp, 4
  008aa	8b f3		 mov	 esi, ebx
  008ac	3b d8		 cmp	 ebx, eax
  008ae	75 85		 jne	 SHORT $LN734@GetPartiti
$LN732@GetPartiti:
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008b6	8b 4c 24 6c	 mov	 ecx, DWORD PTR _$S3$148396[esp+952]
  008ba	51		 push	 ecx
  008bb	89 bc 24 84 00
	00 00		 mov	 DWORD PTR _$S3$148396[esp+976], edi
  008c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008c7	83 c4 08	 add	 esp, 8

; 489  : 
; 490  : 			if (!candidateForHiddenOSFound)

  008ca	80 7c 24 17 00	 cmp	 BYTE PTR _candidateForHiddenOSFound$[esp+940], 0
  008cf	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR _$S3$148396[esp+940], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  008d7	0f 85 c3 00 00
	00		 jne	 $LN6@GetPartiti

; 491  : 			{
; 492  : 				throw ErrorException (wstring (GetString ("NO_PARTITION_FOLLOWS_BOOT_PARTITION"))
; 493  : 					+ GetRemarksOnHiddenOS());

  008dd	8b 4c 24 20	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+940]
  008e1	8d 94 24 00 01
	00 00		 lea	 edx, DWORD PTR $T215051[esp+940]
  008e8	52		 push	 edx
  008e9	e8 00 00 00 00	 call	 ?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
  008ee	8b f0		 mov	 esi, eax
  008f0	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MAHFALCP@NO_PARTITION_FOLLOWS_BOOT_PARTIT@
  008f5	c6 84 24 ac 03
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+952], 10 ; 0000000aH
  008fd	e8 00 00 00 00	 call	 _GetString
  00902	83 c4 04	 add	 esp, 4
  00905	33 c9		 xor	 ecx, ecx
  00907	66 89 8c 24 cc
	00 00 00	 mov	 WORD PTR $T215052[esp+944], cx
  0090f	bd 07 00 00 00	 mov	 ebp, 7
  00914	8b c8		 mov	 ecx, eax
  00916	89 ac 24 e0 00
	00 00		 mov	 DWORD PTR $T215052[esp+964], ebp
  0091d	89 bc 24 dc 00
	00 00		 mov	 DWORD PTR $T215052[esp+960], edi
  00924	8d 59 02	 lea	 ebx, DWORD PTR [ecx+2]
$LL1008@GetPartiti:
  00927	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0092a	83 c1 02	 add	 ecx, 2
  0092d	66 3b d7	 cmp	 dx, di
  00930	75 f5		 jne	 SHORT $LL1008@GetPartiti
  00932	2b cb		 sub	 ecx, ebx
  00934	d1 f9		 sar	 ecx, 1
  00936	51		 push	 ecx
  00937	50		 push	 eax
  00938	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR $T215052[esp+948]
  0093f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00944	56		 push	 esi
  00945	8d 94 24 cc 00
	00 00		 lea	 edx, DWORD PTR $T215052[esp+944]
  0094c	52		 push	 edx
  0094d	8d 84 24 ec 00
	00 00		 lea	 eax, DWORD PTR $T215053[esp+948]
  00954	50		 push	 eax
  00955	c6 84 24 b4 03
	00 00 0b	 mov	 BYTE PTR __$EHRec$[esp+960], 11 ; 0000000bH
  0095d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00962	83 c4 0c	 add	 esp, 12			; 0000000cH
  00965	6a ff		 push	 -1
  00967	33 c9		 xor	 ecx, ecx
  00969	57		 push	 edi
  0096a	66 89 4c 24 3c	 mov	 WORD PTR $T215050[esp+960], cx
  0096f	50		 push	 eax
  00970	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T215050[esp+960]
  00974	c6 84 24 b4 03
	00 00 0c	 mov	 BYTE PTR __$EHRec$[esp+960], 12 ; 0000000cH
  0097c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T215050[esp+952], OFFSET ??_7ErrorException@CipherShed@@6B@
  00984	89 6c 24 54	 mov	 DWORD PTR $T215050[esp+984], ebp
  00988	89 7c 24 50	 mov	 DWORD PTR $T215050[esp+980], edi
  0098c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00991	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00996	8d 54 24 2c	 lea	 edx, DWORD PTR $T215050[esp+944]
  0099a	52		 push	 edx
  0099b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@GetPartiti:

; 494  : 			}
; 495  : 
; 496  : 			if (config.SystemPartition.Info.PartitionLength.QuadPart > TC_MAX_FAT_SECTOR_COUNT * TC_SECTOR_SIZE_BIOS)

  009a0	81 bc 24 b8 02
	00 00 00 02 00
	00		 cmp	 DWORD PTR _config$[esp+1224], 512 ; 00000200H
  009ab	0f 82 be 00 00
	00		 jb	 $LN5@GetPartiti
  009b1	77 0d		 ja	 SHORT $LN1009@GetPartiti
  009b3	39 bc 24 b4 02
	00 00		 cmp	 DWORD PTR _config$[esp+1220], edi
  009ba	0f 86 af 00 00
	00		 jbe	 $LN5@GetPartiti
$LN1009@GetPartiti:

; 497  : 			{
; 498  : 				if ((double) candidatePartition.Info.PartitionLength.QuadPart / config.SystemPartition.Info.PartitionLength.QuadPart < MIN_HIDDENOS_DECOY_PARTITION_SIZE_RATIO_NTFS)

  009c0	8b 74 24 24	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+940]
  009c4	df 6e 28	 fild	 QWORD PTR [esi+40]
  009c7	df ac 24 b4 02
	00 00		 fild	 QWORD PTR _config$[esp+1220]
  009ce	de f9		 fdivp	 ST(1), ST(0)
  009d0	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@4000cccccccccccd
  009d6	df e0		 fnstsw	 ax
  009d8	f6 c4 05	 test	 ah, 5
  009db	0f 8a 1b 01 00
	00		 jp	 $LN2@GetPartiti

; 499  : 				{
; 500  : 					throw ErrorException (wstring (GetString ("PARTITION_TOO_SMALL_FOR_HIDDEN_OS_NTFS"))
; 501  : 						+ GetRemarksOnHiddenOS());

  009e1	8b 4c 24 20	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+940]
  009e5	8d 84 24 00 01
	00 00		 lea	 eax, DWORD PTR $T215055[esp+940]
  009ec	50		 push	 eax
  009ed	e8 00 00 00 00	 call	 ?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
  009f2	8b f0		 mov	 esi, eax
  009f4	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NLNOGBOO@PARTITION_TOO_SMALL_FOR_HIDDEN_O@
  009f9	c6 84 24 ac 03
	00 00 0d	 mov	 BYTE PTR __$EHRec$[esp+952], 13 ; 0000000dH
  00a01	e8 00 00 00 00	 call	 _GetString
  00a06	83 c4 04	 add	 esp, 4
  00a09	50		 push	 eax
  00a0a	8d 8c 24 e8 00
	00 00		 lea	 ecx, DWORD PTR $T215056[esp+944]
  00a11	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00a16	56		 push	 esi
  00a17	50		 push	 eax
  00a18	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR $T215057[esp+948]
  00a1f	51		 push	 ecx
  00a20	c6 84 24 b4 03
	00 00 0e	 mov	 BYTE PTR __$EHRec$[esp+960], 14 ; 0000000eH
  00a28	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00a2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a30	6a ff		 push	 -1
  00a32	57		 push	 edi
  00a33	33 d2		 xor	 edx, edx
  00a35	50		 push	 eax
  00a36	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T215054[esp+960]
  00a3a	c6 84 24 b4 03
	00 00 0f	 mov	 BYTE PTR __$EHRec$[esp+960], 15 ; 0000000fH
  00a42	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T215054[esp+952], OFFSET ??_7ErrorException@CipherShed@@6B@
  00a4a	c7 44 24 54 07
	00 00 00	 mov	 DWORD PTR $T215054[esp+984], 7
  00a52	89 7c 24 50	 mov	 DWORD PTR $T215054[esp+980], edi
  00a56	66 89 54 24 40	 mov	 WORD PTR $T215054[esp+964], dx
  00a5b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00a60	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00a65	8d 44 24 2c	 lea	 eax, DWORD PTR $T215054[esp+944]
  00a69	50		 push	 eax
  00a6a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@GetPartiti:

; 502  : 				}
; 503  : 			}
; 504  : 			else if ((double) candidatePartition.Info.PartitionLength.QuadPart / config.SystemPartition.Info.PartitionLength.QuadPart < MIN_HIDDENOS_DECOY_PARTITION_SIZE_RATIO_FAT)

  00a6f	8b 74 24 24	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+940]
  00a73	df 6e 28	 fild	 QWORD PTR [esi+40]
  00a76	df ac 24 b4 02
	00 00		 fild	 QWORD PTR _config$[esp+1220]
  00a7d	de f9		 fdivp	 ST(1), ST(0)
  00a7f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0cccccccccccd
  00a85	df e0		 fnstsw	 ax
  00a87	f6 c4 05	 test	 ah, 5
  00a8a	7a 70		 jp	 SHORT $LN2@GetPartiti

; 505  : 			{
; 506  : 				throw ErrorException (wstring (GetString ("PARTITION_TOO_SMALL_FOR_HIDDEN_OS"))
; 507  : 					+ GetRemarksOnHiddenOS());

  00a8c	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR $T215059[esp+940]
  00a93	51		 push	 ecx
  00a94	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+944]
  00a98	e8 00 00 00 00	 call	 ?GetRemarksOnHiddenOS@BootEncryption@CipherShed@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::BootEncryption::GetRemarksOnHiddenOS
  00a9d	8b f0		 mov	 esi, eax
  00a9f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PECBFKPM@PARTITION_TOO_SMALL_FOR_HIDDEN_O@
  00aa4	c6 84 24 ac 03
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+952], 16 ; 00000010H
  00aac	e8 00 00 00 00	 call	 _GetString
  00ab1	83 c4 04	 add	 esp, 4
  00ab4	50		 push	 eax
  00ab5	8d 8c 24 e8 00
	00 00		 lea	 ecx, DWORD PTR $T215060[esp+944]
  00abc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00ac1	56		 push	 esi
  00ac2	50		 push	 eax
  00ac3	8d 94 24 d0 00
	00 00		 lea	 edx, DWORD PTR $T215061[esp+948]
  00aca	52		 push	 edx
  00acb	c6 84 24 b4 03
	00 00 11	 mov	 BYTE PTR __$EHRec$[esp+960], 17 ; 00000011H
  00ad3	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00ad8	83 c4 0c	 add	 esp, 12			; 0000000cH
  00adb	50		 push	 eax
  00adc	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T215058[esp+944]
  00ae0	c6 84 24 ac 03
	00 00 12	 mov	 BYTE PTR __$EHRec$[esp+952], 18 ; 00000012H
  00ae8	e8 00 00 00 00	 call	 ??0ErrorException@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::ErrorException::ErrorException
  00aed	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00af2	8d 44 24 2c	 lea	 eax, DWORD PTR $T215058[esp+944]
  00af6	50		 push	 eax
  00af7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@GetPartiti:

; 514  : 		}
; 515  : 
; 516  : 		HiddenOSCandidatePartition = candidatePartition;

  00afc	8b 4c 24 20	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+940]
  00b00	56		 push	 esi
  00b01	81 c1 90 01 00
	00		 add	 ecx, 400		; 00000190H
  00b07	e8 00 00 00 00	 call	 ??4Partition@CipherShed@@QAEAAU01@ABU01@@Z

; 517  : 		return candidatePartition;

  00b0c	8d 8c 24 9c 01
	00 00		 lea	 ecx, DWORD PTR _config$[esp+940]
  00b13	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00b18	8b c6		 mov	 eax, esi

; 518  : 	}

  00b1a	8b 8c 24 a0 03
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+940]
  00b21	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b28	59		 pop	 ecx
  00b29	5f		 pop	 edi
  00b2a	5e		 pop	 esi
  00b2b	5d		 pop	 ebp
  00b2c	5b		 pop	 ebx
  00b2d	8b 8c 24 88 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+920]
  00b34	33 cc		 xor	 ecx, esp
  00b36	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b3b	81 c4 98 03 00
	00		 add	 esp, 920		; 00000398H
  00b41	c2 04 00	 ret	 4
$LN14@GetPartiti:

; 508  : 			}
; 509  : 		}
; 510  : 		else
; 511  : 		{
; 512  : 			// No active partition on the system drive
; 513  : 			throw ErrorException ("SYSTEM_PARTITION_NOT_ACTIVE");

  00b44	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00b49	8d 54 24 2c	 lea	 edx, DWORD PTR $T215062[esp+944]
  00b4d	33 c9		 xor	 ecx, ecx
  00b4f	52		 push	 edx
  00b50	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T215062[esp+948], OFFSET ??_7ErrorException@CipherShed@@6B@
  00b58	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T215062[esp+952], OFFSET ??_C@_0BM@FBNGAMD@SYSTEM_PARTITION_NOT_ACTIVE?$AA@
  00b60	c7 44 24 50 07
	00 00 00	 mov	 DWORD PTR $T215062[esp+980], 7
  00b68	89 7c 24 4c	 mov	 DWORD PTR $T215062[esp+976], edi
  00b6c	66 89 4c 24 3c	 mov	 WORD PTR $T215062[esp+960], cx
  00b71	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1015@GetPartiti:
  00b76	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$0:
  00000	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR $T215064[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN42@GetPartiti
  0000f	83 a5 b0 fc ff
	ff fe		 and	 DWORD PTR $T215064[ebp], -2 ; fffffffeH
  00016	8b 8d 78 fc ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
$LN42@GetPartiti:
  00021	c3		 ret	 0
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$1:
  00022	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _config$[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$2:
  0002d	8d 8d e8 fc ff
	ff		 lea	 ecx, DWORD PTR _$S1$148311[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$3:
  00038	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _bootPartition$148348[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$4:
  00043	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _partitionBehindBoot$148349[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$5:
  0004e	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _$S2$148352[ebp]
  00054	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$9:
  00059	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR _$S3$148396[ebp]
  0005f	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$6:
  00064	8d 8d 38 fd ff
	ff		 lea	 ecx, DWORD PTR $T215041[ebp]
  0006a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$7:
  0006f	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T215042[ebp]
  00075	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$8:
  0007a	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T215043[ebp]
  00080	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$10:
  00085	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T215051[ebp]
  0008b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$11:
  00090	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T215052[ebp]
  00096	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$12:
  0009b	8d 8d 38 fd ff
	ff		 lea	 ecx, DWORD PTR $T215053[ebp]
  000a1	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$13:
  000a6	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T215055[ebp]
  000ac	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$14:
  000b1	8d 8d 38 fd ff
	ff		 lea	 ecx, DWORD PTR $T215056[ebp]
  000b7	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$15:
  000bc	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T215057[ebp]
  000c2	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$16:
  000c7	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T215059[ebp]
  000cd	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$17:
  000d2	8d 8d 38 fd ff
	ff		 lea	 ecx, DWORD PTR $T215060[ebp]
  000d8	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ$18:
  000dd	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T215061[ebp]
  000e3	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ:
  000e8	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000ec	8d 82 64 fc ff
	ff		 lea	 eax, DWORD PTR [edx-924]
  000f2	8b 8a 60 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-928]
  000f8	33 c8		 xor	 ecx, eax
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	83 c0 10	 add	 eax, 16			; 00000010H
  00102	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00105	33 c8		 xor	 ecx, eax
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ
  00111	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ENDP ; CipherShed::BootEncryption::GetPartitionForHiddenOS
PUBLIC	__TI2?AUTimeOut@CipherShed@@
PUBLIC	__$ArrayPad$
PUBLIC	?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::ProbeRealSystemDriveSize
PUBLIC	__CTA2?AUTimeOut@CipherShed@@
PUBLIC	__CT??_R0?AUTimeOut@CipherShed@@@8??0TimeOut@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0TimeOut@CipherShed@@QAE@ABU01@@Z		; CipherShed::TimeOut::TimeOut
;	COMDAT __CT??_R0?AUTimeOut@CipherShed@@@8??0TimeOut@CipherShed@@QAE@ABU01@@Z4
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
xdata$x	SEGMENT
__CT??_R0?AUTimeOut@CipherShed@@@8??0TimeOut@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUTimeOut@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0TimeOut@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUTimeOut@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUTimeOut@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUTimeOut@CipherShed@@@8??0TimeOut@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUTimeOut@CipherShed@@
xdata$x	SEGMENT
__TI2?AUTimeOut@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUTimeOut@CipherShed@@
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
$T221717 = -924						; size = 4
$T221716 = -920						; size = 384
_request$ = -536					; size = 532
__$ArrayPad$ = -4					; size = 4
?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::ProbeRealSystemDriveSize, COMDAT
; _this$ = ecx

; 593  : 	{

  00000	81 ec 9c 03 00
	00		 sub	 esp, 924		; 0000039cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 98 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+924], eax
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx

; 594  : 		if (RealSystemDriveSizeValid)

  00017	80 be 15 06 00
	00 00		 cmp	 BYTE PTR [esi+1557], 0
  0001e	0f 85 99 00 00
	00		 jne	 $LN1@ProbeRealS

; 595  : 			return;
; 596  : 
; 597  : 		GetSystemDriveConfiguration();

  00024	8d 44 24 08	 lea	 eax, DWORD PTR $T221716[esp+928]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0002e	8d 4c 24 08	 lea	 ecx, DWORD PTR $T221716[esp+928]
  00032	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 598  : 
; 599  : 		ProbeRealDriveSizeRequest request;
; 600  : 		_snwprintf (request.DeviceName, array_capacity (request.DeviceName), L"%hs", DriveConfig.DrivePartition.DevicePath.c_str());

  00037	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H
  0003b	72 05		 jb	 SHORT $LN10@ProbeRealS
  0003d	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00040	eb 03		 jmp	 SHORT $LN11@ProbeRealS
$LN10@ProbeRealS:
  00042	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
$LN11@ProbeRealS:
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  0004b	8d 8c 24 90 01
	00 00		 lea	 ecx, DWORD PTR _request$[esp+936]
  00052	68 04 01 00 00	 push	 260			; 00000104H
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 __snwprintf
  0005d	83 c4 10	 add	 esp, 16			; 00000010H

; 601  : 		
; 602  : 		CallDriver (TC_IOCTL_PROBE_REAL_DRIVE_SIZE, &request, sizeof (request), &request, sizeof (request));

  00060	68 14 02 00 00	 push	 532			; 00000214H
  00065	8d 94 24 8c 01
	00 00		 lea	 edx, DWORD PTR _request$[esp+932]
  0006c	52		 push	 edx
  0006d	68 14 02 00 00	 push	 532			; 00000214H
  00072	8b c2		 mov	 eax, edx
  00074	50		 push	 eax
  00075	68 40 20 22 00	 push	 2236480			; 00222040H
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 603  : 		DriveConfig.DrivePartition.Info.PartitionLength = request.RealDriveSize;
; 604  : 
; 605  : 		RealSystemDriveSizeValid = true;
; 606  : 
; 607  : 		if (request.TimeOut)

  00081	83 bc 24 98 03
	00 00 00	 cmp	 DWORD PTR _request$[esp+1456], 0
  00089	8b 8c 24 90 03
	00 00		 mov	 ecx, DWORD PTR _request$[esp+1448]
  00090	8b 94 24 94 03
	00 00		 mov	 edx, DWORD PTR _request$[esp+1452]
  00097	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
  0009a	89 56 74	 mov	 DWORD PTR [esi+116], edx
  0009d	c6 86 15 06 00
	00 01		 mov	 BYTE PTR [esi+1557], 1
  000a4	74 17		 je	 SHORT $LN1@ProbeRealS

; 608  : 			throw TimeOut (SRC_POS);

  000a6	68 00 00 00 00	 push	 OFFSET __TI2?AUTimeOut@CipherShed@@
  000ab	8d 44 24 08	 lea	 eax, DWORD PTR $T221717[esp+932]
  000af	50		 push	 eax
  000b0	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T221717[esp+936], OFFSET ??_7TimeOut@CipherShed@@6B@
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@ProbeRealS:

; 609  : 	}

  000bd	8b 8c 24 9c 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+928]
  000c4	5e		 pop	 esi
  000c5	33 cc		 xor	 ecx, esp
  000c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cc	81 c4 9c 03 00
	00		 add	 esp, 924		; 0000039cH
  000d2	c3		 ret	 0
$LN16@ProbeRealS:
?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::ProbeRealSystemDriveSize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0TimeOut@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0TimeOut@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::TimeOut::TimeOut, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TimeOut@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0TimeOut@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::TimeOut::TimeOut
_TEXT	ENDS
PUBLIC	??_C@_0EB@OKFBGJJP@CipherShed?3?3BootEncryption?3?3Syst@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z ; CipherShed::BootEncryption::SystemDriveContainsPartitionType
;	COMDAT ??_C@_0EB@OKFBGJJP@CipherShed?3?3BootEncryption?3?3Syst@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0EB@OKFBGJJP@CipherShed?3?3BootEncryption?3?3Syst@ DB 'CipherShed::'
	DB	'BootEncryption::SystemDriveContainsPartitionType:793', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z$2
__ehfuncinfo$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z
_TEXT	SEGMENT
$T221890 = -976						; size = 8
$T221754 = -976						; size = 8
$T221752 = -976						; size = 4
$T221753 = -968						; size = 384
_device$ = -584						; size = 56
_mbrBuf$ = -528						; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z PROC ; CipherShed::BootEncryption::SystemDriveContainsPartitionType, COMDAT
; _this$ = ecx

; 784  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec c4 03 00
	00		 sub	 esp, 964		; 000003c4H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 c0 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+976], eax
  00022	53		 push	 ebx
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c4		 xor	 eax, esp
  0002a	50		 push	 eax
  0002b	8d 84 24 cc 03
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+984]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 785  : 		Device device (GetSystemDriveConfiguration().DevicePath, true);

  00038	6a 01		 push	 1
  0003a	8d 44 24 14	 lea	 eax, DWORD PTR $T221753[esp+988]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00044	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00047	8b cc		 mov	 ecx, esp
  00049	89 64 24 28	 mov	 DWORD PTR $T221752[esp+1016], esp
  0004d	33 db		 xor	 ebx, ebx
  0004f	6a ff		 push	 -1
  00051	83 c0 1c	 add	 eax, 28			; 0000001cH
  00054	53		 push	 ebx
  00055	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0005c	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0005f	50		 push	 eax
  00060	89 9c 24 00 04
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1036], ebx
  00067	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  0006a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006f	8d 8c 24 b0 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1016]
  00076	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  0007b	8d 4c 24 10	 lea	 ecx, DWORD PTR $T221753[esp+984]
  0007f	c6 84 24 d4 03
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+992], 2
  00087	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 786  : 
; 787  : 		byte mbrBuf[TC_SECTOR_SIZE_BIOS];
; 788  : 		device.SeekAt (0);

  0008c	89 9c 24 98 01
	00 00		 mov	 DWORD PTR _device$[esp+992], ebx
  00093	89 9c 24 9c 01
	00 00		 mov	 DWORD PTR _device$[esp+996], ebx
  0009a	38 9c 24 90 01
	00 00		 cmp	 BYTE PTR _device$[esp+984], bl
  000a1	75 3b		 jne	 SHORT $LN38@SystemDriv@2
  000a3	53		 push	 ebx
  000a4	53		 push	 ebx
  000a5	33 c9		 xor	 ecx, ecx
  000a7	51		 push	 ecx
  000a8	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1012]
  000af	33 c0		 xor	 eax, eax
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000b9	85 c0		 test	 eax, eax
  000bb	75 21		 jne	 SHORT $LN38@SystemDriv@2
  000bd	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T221890[esp+984], OFFSET ??_7SystemException@CipherShed@@6B@
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000cb	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  000d0	8d 54 24 0c	 lea	 edx, DWORD PTR $T221890[esp+988]
  000d4	52		 push	 edx
  000d5	89 44 24 14	 mov	 DWORD PTR $T221890[esp+996], eax
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@SystemDriv@2:

; 789  : 		device.Read (mbrBuf, sizeof (mbrBuf));

  000de	68 00 02 00 00	 push	 512			; 00000200H
  000e3	8d 84 24 cc 01
	00 00		 lea	 eax, DWORD PTR _mbrBuf$[esp+988]
  000ea	50		 push	 eax
  000eb	8d 8c 24 98 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+992]
  000f2	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 790  : 
; 791  : 		MBR *mbr = reinterpret_cast <MBR *> (mbrBuf);
; 792  : 		if (mbr->Signature != 0xaa55)

  000f7	b9 55 aa 00 00	 mov	 ecx, 43605		; 0000aa55H
  000fc	66 39 8c 24 c6
	03 00 00	 cmp	 WORD PTR _mbrBuf$[esp+1494], cx
  00104	74 1f		 je	 SHORT $LN5@SystemDriv@2

; 793  : 			throw ParameterIncorrect (SRC_POS);

  00106	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0010b	8d 54 24 0c	 lea	 edx, DWORD PTR $T221754[esp+988]
  0010f	52		 push	 edx
  00110	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T221754[esp+992], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00118	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T221754[esp+996], OFFSET ??_C@_0EB@OKFBGJJP@CipherShed?3?3BootEncryption?3?3Syst@
  00120	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@SystemDriv@2:

; 794  : 
; 795  : 		for (size_t i = 0; i < array_capacity (mbr->Partitions); ++i)

  00125	8a 94 24 dc 03
	00 00		 mov	 dl, BYTE PTR _type$[esp+980]
  0012c	33 c0		 xor	 eax, eax
  0012e	8d 8c 24 8a 03
	00 00		 lea	 ecx, DWORD PTR _mbrBuf$[esp+1434]
$LL4@SystemDriv@2:

; 796  : 		{
; 797  : 			if (mbr->Partitions[i].Type == type)

  00135	38 11		 cmp	 BYTE PTR [ecx], dl
  00137	74 73		 je	 SHORT $LN122@SystemDriv@2
  00139	40		 inc	 eax
  0013a	83 c1 10	 add	 ecx, 16			; 00000010H
  0013d	83 f8 04	 cmp	 eax, 4
  00140	72 f3		 jb	 SHORT $LL4@SystemDriv@2

; 799  : 		}
; 800  : 
; 801  : 		return false;

  00142	38 9c 24 91 01
	00 00		 cmp	 BYTE PTR _device$[esp+985], bl
  00149	74 1e		 je	 SHORT $LN92@SystemDriv@2
  0014b	38 9c 24 90 01
	00 00		 cmp	 BYTE PTR _device$[esp+984], bl
  00152	75 0e		 jne	 SHORT $LN91@SystemDriv@2
  00154	8b 94 24 a0 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1000]
  0015b	52		 push	 edx
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN91@SystemDriv@2:
  00162	88 9c 24 91 01
	00 00		 mov	 BYTE PTR _device$[esp+985], bl
$LN92@SystemDriv@2:
  00169	83 bc 24 c0 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1032], 16 ; 00000010H
  00171	72 10		 jb	 SHORT $LN111@SystemDriv@2
  00173	8b 84 24 ac 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+1012]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00180	83 c4 04	 add	 esp, 4
$LN111@SystemDriv@2:
  00183	32 c0		 xor	 al, al
$LN6@SystemDriv@2:

; 802  : 	}

  00185	8b 8c 24 cc 03
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+984]
  0018c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00193	59		 pop	 ecx
  00194	5b		 pop	 ebx
  00195	8b 8c 24 c0 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+976]
  0019c	33 cc		 xor	 ecx, esp
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	81 c4 d0 03 00
	00		 add	 esp, 976		; 000003d0H
  001a9	c2 04 00	 ret	 4
$LN122@SystemDriv@2:

; 798  : 				return true;

  001ac	38 9c 24 91 01
	00 00		 cmp	 BYTE PTR _device$[esp+985], bl
  001b3	74 1e		 je	 SHORT $LN58@SystemDriv@2
  001b5	38 9c 24 90 01
	00 00		 cmp	 BYTE PTR _device$[esp+984], bl
  001bc	75 0e		 jne	 SHORT $LN57@SystemDriv@2
  001be	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+1000]
  001c5	50		 push	 eax
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN57@SystemDriv@2:
  001cc	88 9c 24 91 01
	00 00		 mov	 BYTE PTR _device$[esp+985], bl
$LN58@SystemDriv@2:
  001d3	83 bc 24 c0 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1032], 16 ; 00000010H
  001db	72 10		 jb	 SHORT $LN77@SystemDriv@2
  001dd	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1012]
  001e4	51		 push	 ecx
  001e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ea	83 c4 04	 add	 esp, 4
$LN77@SystemDriv@2:
  001ed	b0 01		 mov	 al, 1
  001ef	eb 94		 jmp	 SHORT $LN6@SystemDriv@2
$LN125@SystemDriv@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z$0:
  00000	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR $T221753[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z$2:
  0000b	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 38 fc ff
	ff		 lea	 eax, DWORD PTR [edx-968]
  00020	8b 8a 34 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-972]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 04	 add	 eax, 4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z ENDP ; CipherShed::BootEncryption::SystemDriveContainsPartitionType
PUBLIC	?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
; Function compile flags: /Ogtpy
;	COMDAT ?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition, COMDAT
; _this$ = ecx

; 806  : 	{

  00000	56		 push	 esi

; 807  : 		return SystemDriveContainsPartitionType (PARTITION_EXTENDED) || SystemDriveContainsPartitionType (PARTITION_XINT13_EXTENDED);

  00001	6a 05		 push	 5
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z ; CipherShed::BootEncryption::SystemDriveContainsPartitionType
  0000a	84 c0		 test	 al, al
  0000c	75 11		 jne	 SHORT $LN3@SystemDriv@3
  0000e	6a 0f		 push	 15			; 0000000fH
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z ; CipherShed::BootEncryption::SystemDriveContainsPartitionType
  00017	84 c0		 test	 al, al
  00019	75 04		 jne	 SHORT $LN3@SystemDriv@3
  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 808  : 	}

  0001e	c3		 ret	 0
$LN3@SystemDriv@3:

; 807  : 		return SystemDriveContainsPartitionType (PARTITION_EXTENDED) || SystemDriveContainsPartitionType (PARTITION_XINT13_EXTENDED);

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	5e		 pop	 esi

; 808  : 	}

  00025	c3		 ret	 0
?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
_TEXT	ENDS
PUBLIC	?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
; Function compile flags: /Ogtpy
;	COMDAT ?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions, COMDAT
; _this$ = ecx

; 812  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 813  : 		for (int partitionType = 1; partitionType <= 0xff; ++partitionType)

  00004	be 01 00 00 00	 mov	 esi, 1
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL7@SystemDriv@4:

; 814  : 		{
; 815  : 			switch (partitionType)

  00010	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00013	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00016	77 0e		 ja	 SHORT $LN3@SystemDriv@4
  00018	0f b6 8e ff ff
	ff ff		 movzx	 ecx, BYTE PTR $LN13@SystemDriv@4[esi-1]
  0001f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN14@SystemDriv@4[ecx*4]
$LN3@SystemDriv@4:

; 816  : 			{
; 817  : 			case PARTITION_FAT_12:
; 818  : 			case PARTITION_FAT_16:
; 819  : 			case PARTITION_EXTENDED:
; 820  : 			case PARTITION_HUGE:
; 821  : 			case PARTITION_IFS:
; 822  : 			case PARTITION_FAT32:
; 823  : 			case PARTITION_FAT32_XINT13:
; 824  : 			case PARTITION_XINT13:
; 825  : 			case PARTITION_XINT13_EXTENDED:
; 826  : 				continue;
; 827  : 			}
; 828  : 
; 829  : 			if (SystemDriveContainsPartitionType ((byte) partitionType))

  00026	56		 push	 esi
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ?SystemDriveContainsPartitionType@BootEncryption@CipherShed@@QAE_NE@Z ; CipherShed::BootEncryption::SystemDriveContainsPartitionType
  0002e	84 c0		 test	 al, al
  00030	75 0e		 jne	 SHORT $LN11@SystemDriv@4
$LN6@SystemDriv@4:

; 813  : 		for (int partitionType = 1; partitionType <= 0xff; ++partitionType)

  00032	46		 inc	 esi
  00033	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00039	7e d5		 jle	 SHORT $LL7@SystemDriv@4
  0003b	5f		 pop	 edi

; 831  : 		}
; 832  : 
; 833  : 		return false;

  0003c	32 c0		 xor	 al, al
  0003e	5e		 pop	 esi

; 834  : 	}

  0003f	c3		 ret	 0
$LN11@SystemDriv@4:
  00040	5f		 pop	 edi

; 830  : 				return true;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 834  : 	}

  00044	c3		 ret	 0
  00045	8d 49 00	 npad	 3
$LN14@SystemDriv@4:
  00048	00 00 00 00	 DD	 $LN6@SystemDriv@4
  0004c	00 00 00 00	 DD	 $LN3@SystemDriv@4
$LN13@SystemDriv@4:
  00050	00		 DB	 0
  00051	01		 DB	 1
  00052	01		 DB	 1
  00053	00		 DB	 0
  00054	00		 DB	 0
  00055	00		 DB	 0
  00056	00		 DB	 0
  00057	01		 DB	 1
  00058	01		 DB	 1
  00059	01		 DB	 1
  0005a	00		 DB	 0
  0005b	00		 DB	 0
  0005c	01		 DB	 1
  0005d	00		 DB	 0
  0005e	00		 DB	 0
?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SystemDriveIsDynamic@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveIsDynamic
; Function compile flags: /Ogtpy
;	COMDAT ?SystemDriveIsDynamic@BootEncryption@CipherShed@@QAE_NXZ
_TEXT	SEGMENT
$T222313 = -944						; size = 384
_request$ = -560					; size = 553
__$ArrayPad$ = -4					; size = 4
?SystemDriveIsDynamic@BootEncryption@CipherShed@@QAE_NXZ PROC ; CipherShed::BootEncryption::SystemDriveIsDynamic, COMDAT
; _this$ = ecx

; 838  : 	{

  00000	81 ec b0 03 00
	00		 sub	 esp, 944		; 000003b0H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 ac 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+944], eax
  00014	56		 push	 esi

; 839  : 		GetSystemDriveConfigurationRequest request;
; 840  : 		_snwprintf (request.DevicePath, array_capacity (request.DevicePath), L"%hs", GetSystemDriveConfiguration().DeviceKernelPath.c_str());

  00015	8d 44 24 04	 lea	 eax, DWORD PTR $T222313[esp+948]
  00019	50		 push	 eax
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00021	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00025	72 05		 jb	 SHORT $LN8@SystemDriv@5
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	eb 03		 jmp	 SHORT $LN9@SystemDriv@5
$LN8@SystemDriv@5:
  0002c	83 c0 04	 add	 eax, 4
$LN9@SystemDriv@5:
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  00035	8d 8c 24 8c 01
	00 00		 lea	 ecx, DWORD PTR _request$[esp+956]
  0003c	68 04 01 00 00	 push	 260			; 00000104H
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 __snwprintf
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T222313[esp+948]
  0004e	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 841  : 
; 842  : 		CallDriver (TC_IOCTL_GET_SYSTEM_DRIVE_CONFIG, &request, sizeof (request), &request, sizeof (request));

  00053	68 29 02 00 00	 push	 553			; 00000229H
  00058	8d 94 24 88 01
	00 00		 lea	 edx, DWORD PTR _request$[esp+952]
  0005f	52		 push	 edx
  00060	68 29 02 00 00	 push	 553			; 00000229H
  00065	8b c2		 mov	 eax, edx
  00067	50		 push	 eax
  00068	68 70 20 22 00	 push	 2236528			; 00222070H
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 843  : 		return request.DriveIsDynamic ? true : false;

  00074	83 bc 24 8d 03
	00 00 00	 cmp	 DWORD PTR _request$[esp+1469], 0

; 844  : 	}

  0007c	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+948]
  00083	0f 95 c0	 setne	 al
  00086	5e		 pop	 esi
  00087	33 cc		 xor	 ecx, esp
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	81 c4 b0 03 00
	00		 add	 esp, 944		; 000003b0H
  00094	c3		 ret	 0
?SystemDriveIsDynamic@BootEncryption@CipherShed@@QAE_NXZ ENDP ; CipherShed::BootEncryption::SystemDriveIsDynamic
_TEXT	ENDS
PUBLIC	??_C@_0DM@HONNNDBN@CipherShed?3?3BootEncryption?3?3Wipe@ ; `string'
PUBLIC	??_C@_0DM@EGHFJMJF@CipherShed?3?3BootEncryption?3?3Wipe@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig
;	COMDAT ??_C@_0DM@HONNNDBN@CipherShed?3?3BootEncryption?3?3Wipe@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DM@HONNNDBN@CipherShed?3?3BootEncryption?3?3Wipe@ DB 'CipherShed::'
	DB	'BootEncryption::WipeHiddenOSCreationConfig:1264', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EGHFJMJF@CipherShed?3?3BootEncryption?3?3Wipe@
CONST	SEGMENT
??_C@_0DM@EGHFJMJF@CipherShed?3?3BootEncryption?3?3Wipe@ DB 'CipherShed::'
	DB	'BootEncryption::WipeHiddenOSCreationConfig:1286', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$3
__ehfuncinfo$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
_configFlags$222516 = -1240				; size = 1
_configFlags$222512 = -1240				; size = 1
_configFlags$222508 = -1239				; size = 1
_configFlags$222504 = -1238				; size = 1
_configFlags$222500 = -1237				; size = 1
$T222484 = -1236					; size = 8
$T222337 = -1236					; size = 8
$T222334 = -1236					; size = 8
_finally1278$ = -1228					; size = 4
$T222335 = -1228					; size = 4
$T222336 = -1224					; size = 384
_device$ = -840						; size = 56
_mbr$ = -784						; size = 512
_randData$ = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec cc 04 00
	00		 sub	 esp, 1228		; 000004ccH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 c8 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1240], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 e0 04
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1260]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b f1		 mov	 esi, ecx

; 1263 : 		if (IsHiddenOSRunning() || Randinit() != ERR_SUCCESS)

  0003d	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00042	85 c0		 test	 eax, eax
  00044	0f 85 d9 02 00
	00		 jne	 $LN12@WipeHidden
  0004a	e8 00 00 00 00	 call	 _Randinit
  0004f	85 c0		 test	 eax, eax
  00051	0f 85 cc 02 00
	00		 jne	 $LN12@WipeHidden

; 1265 : 
; 1266 : 		Device device (GetSystemDriveConfiguration().DevicePath);

  00057	33 db		 xor	 ebx, ebx
  00059	53		 push	 ebx
  0005a	8d 44 24 28	 lea	 eax, DWORD PTR $T222336[esp+1264]
  0005e	50		 push	 eax
  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00066	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00069	8b cc		 mov	 ecx, esp
  0006b	89 64 24 40	 mov	 DWORD PTR $T222335[esp+1292], esp
  0006f	6a ff		 push	 -1
  00071	83 c0 1c	 add	 eax, 28			; 0000001cH
  00074	53		 push	 ebx
  00075	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0007c	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0007f	50		 push	 eax
  00080	89 9c 24 14 05
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1312], ebx
  00087	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  0008a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008f	8d 8c 24 c4 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1292]
  00096	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  0009b	8d 4c 24 24	 lea	 ecx, DWORD PTR $T222336[esp+1260]
  0009f	c6 84 24 e8 04
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+1268], 2
  000a7	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 1267 : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 1268 : 
; 1269 : 		device.SeekAt (0);

  000ac	53		 push	 ebx
  000ad	53		 push	 ebx
  000ae	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1268]
  000b5	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 1270 : 		device.Read (mbr, sizeof (mbr));

  000ba	68 00 02 00 00	 push	 512			; 00000200H
  000bf	8d 8c 24 e0 01
	00 00		 lea	 ecx, DWORD PTR _mbr$[esp+1264]
  000c6	51		 push	 ecx
  000c7	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1268]
  000ce	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read

; 1271 : 		
; 1272 : 		finally_do_arg (BootEncryption *, this,
; 1273 : 		{
; 1274 : 			try
; 1275 : 			{
; 1276 : 				finally_arg->SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE);
; 1277 : 			} catch (...) { }
; 1278 : 		});

  000d3	89 74 24 20	 mov	 DWORD PTR _finally1278$[esp+1260], esi

; 1279 : 
; 1280 : #if PRAND_DISK_WIPE_PASSES > RNG_POOL_SIZE
; 1281 : #	error PRAND_DISK_WIPE_PASSES > RNG_POOL_SIZE
; 1282 : #endif
; 1283 : 
; 1284 : 		byte randData[PRAND_DISK_WIPE_PASSES];
; 1285 : 		if (!RandgetBytes (randData, sizeof (randData), FALSE))

  000d7	53		 push	 ebx
  000d8	8d 94 24 e0 03
	00 00		 lea	 edx, DWORD PTR _randData$[esp+1264]
  000df	68 00 01 00 00	 push	 256			; 00000100H
  000e4	52		 push	 edx
  000e5	c6 84 24 f4 04
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+1280], 3
  000ed	e8 00 00 00 00	 call	 _RandgetBytes
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	85 c0		 test	 eax, eax
  000f7	75 1f		 jne	 SHORT $LN11@WipeHidden

; 1286 : 			throw ParameterIncorrect (SRC_POS);

  000f9	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  000fe	8d 44 24 1c	 lea	 eax, DWORD PTR $T222337[esp+1264]
  00102	50		 push	 eax
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222337[esp+1268], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0010b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T222337[esp+1272], OFFSET ??_C@_0DM@EGHFJMJF@CipherShed?3?3BootEncryption?3?3Wipe@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@WipeHidden:

; 1287 : 
; 1288 : 		for (int wipePass = 0; wipePass < PRAND_DISK_WIPE_PASSES; wipePass++)

  00118	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetFilePointerEx@20
  0011e	33 ff		 xor	 edi, edi
$LL10@WipeHidden:
  00120	8a 84 3c dc 03
	00 00		 mov	 al, BYTE PTR _randData$[esp+edi+1260]

; 1289 : 		{
; 1290 : 			for (int i = 0; i < TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_SIZE; ++i)
; 1291 : 			{
; 1292 : 				mbr[TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET + i] = randData[wipePass];

  00127	8a c8		 mov	 cl, al
  00129	0f b6 c9	 movzx	 ecx, cl
  0012c	69 c9 01 01 01
	01		 imul	 ecx, 16843009		; 01010101H
  00132	89 8c 24 6e 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1662], ecx

; 1293 : 			}
; 1294 : 
; 1295 : 			mbr[TC_BOOT_SECTOR_CONFIG_OFFSET] &= (byte) ~TC_BOOT_CFG_MASK_HIDDEN_OS_CREATION_PHASE;
; 1296 : 			mbr[TC_BOOT_SECTOR_CONFIG_OFFSET] |= randData[wipePass] & TC_BOOT_CFG_MASK_HIDDEN_OS_CREATION_PHASE;

  00139	8a c8		 mov	 cl, al
  0013b	32 8c 24 93 03
	00 00		 xor	 cl, BYTE PTR _mbr$[esp+1699]
  00142	80 e1 3f	 and	 cl, 63			; 0000003fH
  00145	32 c8		 xor	 cl, al
  00147	88 8c 24 93 03
	00 00		 mov	 BYTE PTR _mbr$[esp+1699], cl

; 1297 : 
; 1298 : 			if (wipePass == PRAND_DISK_WIPE_PASSES - 1)

  0014e	81 ff ff 00 00
	00		 cmp	 edi, 255		; 000000ffH
  00154	75 07		 jne	 SHORT $LN4@WipeHidden

; 1299 : 				memset (mbr + TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET, 0, TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_SIZE);

  00156	89 9c 24 6e 03
	00 00		 mov	 DWORD PTR _mbr$[esp+1662], ebx
$LN4@WipeHidden:

; 1300 : 
; 1301 : 			device.SeekAt (0);

  0015d	89 9c 24 ac 01
	00 00		 mov	 DWORD PTR _device$[esp+1268], ebx
  00164	89 9c 24 b0 01
	00 00		 mov	 DWORD PTR _device$[esp+1272], ebx
  0016b	38 9c 24 a4 01
	00 00		 cmp	 BYTE PTR _device$[esp+1260], bl
  00172	75 1a		 jne	 SHORT $LN57@WipeHidden
  00174	8b 94 24 b4 01
	00 00		 mov	 edx, DWORD PTR _device$[esp+1276]
  0017b	53		 push	 ebx
  0017c	53		 push	 ebx
  0017d	33 c9		 xor	 ecx, ecx
  0017f	51		 push	 ecx
  00180	33 c0		 xor	 eax, eax
  00182	50		 push	 eax
  00183	52		 push	 edx
  00184	ff d5		 call	 ebp
  00186	85 c0		 test	 eax, eax
  00188	0f 84 74 01 00
	00		 je	 $LN115@WipeHidden
$LN57@WipeHidden:

; 1302 : 			device.Write (mbr, sizeof (mbr));

  0018e	68 00 02 00 00	 push	 512			; 00000200H
  00193	8d 84 24 e0 01
	00 00		 lea	 eax, DWORD PTR _mbr$[esp+1264]
  0019a	50		 push	 eax
  0019b	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$[esp+1268]
  001a2	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write
  001a7	47		 inc	 edi
  001a8	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  001ae	0f 8c 6c ff ff
	ff		 jl	 $LL10@WipeHidden

; 1303 : 		}
; 1304 : 
; 1305 : 		for (int wipePass = 0; wipePass < PRAND_DISK_WIPE_PASSES/4 + 1; wipePass++)

  001b4	bf 41 00 00 00	 mov	 edi, 65			; 00000041H
  001b9	8d a4 24 00 00
	00 00		 npad	 7
$LL3@WipeHidden:

; 1306 : 		{
; 1307 : 			SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE);

  001c0	53		 push	 ebx
  001c1	53		 push	 ebx
  001c2	53		 push	 ebx
  001c3	6a 01		 push	 1
  001c5	8d 54 24 27	 lea	 edx, DWORD PTR _configFlags$222500[esp+1276]
  001c9	52		 push	 edx
  001ca	8b ce		 mov	 ecx, esi
  001cc	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  001d1	80 64 24 17 3f	 and	 BYTE PTR _configFlags$222500[esp+1260], 63 ; 0000003fH
  001d6	8d 44 24 17	 lea	 eax, DWORD PTR _configFlags$222500[esp+1260]
  001da	50		 push	 eax
  001db	8b ce		 mov	 ecx, esi
  001dd	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig

; 1308 : 			SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_CLONING);

  001e2	53		 push	 ebx
  001e3	53		 push	 ebx
  001e4	53		 push	 ebx
  001e5	6a 01		 push	 1
  001e7	8d 4c 24 26	 lea	 ecx, DWORD PTR _configFlags$222504[esp+1276]
  001eb	51		 push	 ecx
  001ec	8b ce		 mov	 ecx, esi
  001ee	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  001f3	0f b6 54 24 16	 movzx	 edx, BYTE PTR _configFlags$222504[esp+1260]
  001f8	80 e2 3f	 and	 dl, 63			; 0000003fH
  001fb	8d 44 24 16	 lea	 eax, DWORD PTR _configFlags$222504[esp+1260]
  001ff	80 ca 40	 or	 dl, 64			; 00000040H
  00202	50		 push	 eax
  00203	8b ce		 mov	 ecx, esi
  00205	88 54 24 1a	 mov	 BYTE PTR _configFlags$222504[esp+1264], dl
  00209	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig

; 1309 : 			SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_WIPING);

  0020e	53		 push	 ebx
  0020f	53		 push	 ebx
  00210	53		 push	 ebx
  00211	6a 01		 push	 1
  00213	8d 4c 24 25	 lea	 ecx, DWORD PTR _configFlags$222508[esp+1276]
  00217	51		 push	 ecx
  00218	8b ce		 mov	 ecx, esi
  0021a	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  0021f	0f b6 54 24 15	 movzx	 edx, BYTE PTR _configFlags$222508[esp+1260]
  00224	80 e2 3f	 and	 dl, 63			; 0000003fH
  00227	8d 44 24 15	 lea	 eax, DWORD PTR _configFlags$222508[esp+1260]
  0022b	80 ca 80	 or	 dl, 128			; 00000080H
  0022e	50		 push	 eax
  0022f	8b ce		 mov	 ecx, esi
  00231	88 54 24 19	 mov	 BYTE PTR _configFlags$222508[esp+1264], dl
  00235	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig

; 1310 : 			SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_WIPED);

  0023a	53		 push	 ebx
  0023b	53		 push	 ebx
  0023c	53		 push	 ebx
  0023d	6a 01		 push	 1
  0023f	8d 4c 24 24	 lea	 ecx, DWORD PTR _configFlags$222512[esp+1276]
  00243	51		 push	 ecx
  00244	8b ce		 mov	 ecx, esi
  00246	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  0024b	80 4c 24 14 c0	 or	 BYTE PTR _configFlags$222512[esp+1260], 192 ; 000000c0H
  00250	8d 54 24 14	 lea	 edx, DWORD PTR _configFlags$222512[esp+1260]
  00254	52		 push	 edx
  00255	8b ce		 mov	 ecx, esi
  00257	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig
  0025c	83 ef 01	 sub	 edi, 1
  0025f	0f 85 5b ff ff
	ff		 jne	 $LL3@WipeHidden

; 1311 : 		}
; 1312 : 		SetHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE);

  00265	53		 push	 ebx
  00266	53		 push	 ebx
  00267	53		 push	 ebx
  00268	6a 01		 push	 1
  0026a	8d 44 24 24	 lea	 eax, DWORD PTR _configFlags$222516[esp+1276]
  0026e	50		 push	 eax
  0026f	8b ce		 mov	 ecx, esi
  00271	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig
  00276	80 64 24 14 3f	 and	 BYTE PTR _configFlags$222516[esp+1260], 63 ; 0000003fH
  0027b	8d 4c 24 14	 lea	 ecx, DWORD PTR _configFlags$222516[esp+1260]
  0027f	51		 push	 ecx
  00280	8b ce		 mov	 ecx, esi
  00282	e8 00 00 00 00	 call	 ?WriteBootSectorConfig@BootEncryption@CipherShed@@QAEXQBE@Z ; CipherShed::BootEncryption::WriteBootSectorConfig

; 1313 : 	}

  00287	8d 54 24 20	 lea	 edx, DWORD PTR _finally1278$[esp+1260]
  0028b	52		 push	 edx
  0028c	c6 84 24 ec 04
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+1272], 2
  00294	e8 00 00 00 00	 call	 ??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::~Finally1278
  00299	38 9c 24 a5 01
	00 00		 cmp	 BYTE PTR _device$[esp+1261], bl
  002a0	74 1e		 je	 SHORT $LN83@WipeHidden
  002a2	38 9c 24 a4 01
	00 00		 cmp	 BYTE PTR _device$[esp+1260], bl
  002a9	75 0e		 jne	 SHORT $LN82@WipeHidden
  002ab	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR _device$[esp+1276]
  002b2	50		 push	 eax
  002b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN82@WipeHidden:
  002b9	88 9c 24 a5 01
	00 00		 mov	 BYTE PTR _device$[esp+1261], bl
$LN83@WipeHidden:
  002c0	83 bc 24 d4 01
	00 00 10	 cmp	 DWORD PTR _device$[esp+1308], 16 ; 00000010H
  002c8	72 10		 jb	 SHORT $LN110@WipeHidden
  002ca	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR _device$[esp+1288]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d7	83 c4 04	 add	 esp, 4
$LN110@WipeHidden:
  002da	8b 8c 24 e0 04
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1260]
  002e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e8	59		 pop	 ecx
  002e9	5f		 pop	 edi
  002ea	5e		 pop	 esi
  002eb	5d		 pop	 ebp
  002ec	5b		 pop	 ebx
  002ed	8b 8c 24 c8 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1240]
  002f4	33 cc		 xor	 ecx, esp
  002f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fb	81 c4 d8 04 00
	00		 add	 esp, 1240		; 000004d8H
  00301	c3		 ret	 0
$LN115@WipeHidden:

; 1300 : 
; 1301 : 			device.SeekAt (0);

  00302	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T222484[esp+1260], OFFSET ??_7SystemException@CipherShed@@6B@
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00310	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00315	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T222484[esp+1264]
  00319	51		 push	 ecx
  0031a	89 44 24 24	 mov	 DWORD PTR $T222484[esp+1272], eax
  0031e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@WipeHidden:

; 1264 : 			throw ParameterIncorrect (SRC_POS);

  00323	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00328	8d 54 24 1c	 lea	 edx, DWORD PTR $T222334[esp+1264]
  0032c	52		 push	 edx
  0032d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222334[esp+1268], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00335	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T222334[esp+1272], OFFSET ??_C@_0DM@HONNNDBN@CipherShed?3?3BootEncryption?3?3Wipe@
  0033d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN120@WipeHidden:
  00342	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$0:
  00000	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR $T222336[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$2:
  0000b	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__unwindfunclet$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ$3:
  00016	8d 85 34 fb ff
	ff		 lea	 eax, DWORD PTR _finally1278$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??1Finally1278@?3??WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ@QAE@XZ ; `CipherShed::BootEncryption::WipeHiddenOSCreationConfig'::`4'::Finally1278::~Finally1278
  00022	c3		 ret	 0
__ehhandler$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 82 24 fb ff
	ff		 lea	 eax, DWORD PTR [edx-1244]
  0002d	8b 8a 20 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1248]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	83 c0 10	 add	 eax, 16			; 00000010H
  0003d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig
PUBLIC	??_C@_0CA@PKMHCFDK@WINDOWS_NOT_ON_BOOT_DRIVE_ERROR?$AA@ ; `string'
PUBLIC	??_C@_0CE@NNOADDIE@SYSENC_UNSUPPORTED_SECTOR_SIZE_B@ ; `string'
PUBLIC	??_C@_0BJ@HICFFOOK@NO_SPACE_FOR_BOOT_LOADER?$AA@ ; `string'
PUBLIC	??_C@_0CE@HGBKLHHD@SYSENC_UNSUPPORTED_FOR_DYNAMIC_D@ ; `string'
PUBLIC	??_C@_0BL@CEKJKLIB@GPT_BOOT_DRIVE_UNSUPPORTED?$AA@ ; `string'
PUBLIC	??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@ ; `string'
PUBLIC	??_C@_0CI@OBNNMOKO@SYS_ENCRYPTION_UNSUPPORTED_ON_VI@ ; `string'
PUBLIC	??_C@_0CJ@BKBFFPJL@SYS_ENCRYPTION_UNSUPPORTED_ON_CU@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirements
EXTRN	_IsNonInstallMode:PROC
EXTRN	_CurrentOSServicePack:DWORD
EXTRN	_CurrentOSMinor:DWORD
EXTRN	_CurrentOSMajor:DWORD
EXTRN	_nCurrentOS:DWORD
;	COMDAT ?confirmed@?BM@??CheckRequirements@BootEncryption@CipherShed@@QAEXXZ@4_NA
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
_BSS	SEGMENT
?confirmed@?BM@??CheckRequirements@BootEncryption@CipherShed@@QAEXXZ@4_NA DB 01H DUP (?) ; `CipherShed::BootEncryption::CheckRequirements'::`28'::confirmed
_BSS	ENDS
;	COMDAT ??_C@_0CA@PKMHCFDK@WINDOWS_NOT_ON_BOOT_DRIVE_ERROR?$AA@
CONST	SEGMENT
??_C@_0CA@PKMHCFDK@WINDOWS_NOT_ON_BOOT_DRIVE_ERROR?$AA@ DB 'WINDOWS_NOT_O'
	DB	'N_BOOT_DRIVE_ERROR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NNOADDIE@SYSENC_UNSUPPORTED_SECTOR_SIZE_B@
CONST	SEGMENT
??_C@_0CE@NNOADDIE@SYSENC_UNSUPPORTED_SECTOR_SIZE_B@ DB 'SYSENC_UNSUPPORT'
	DB	'ED_SECTOR_SIZE_BIOS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HICFFOOK@NO_SPACE_FOR_BOOT_LOADER?$AA@
CONST	SEGMENT
??_C@_0BJ@HICFFOOK@NO_SPACE_FOR_BOOT_LOADER?$AA@ DB 'NO_SPACE_FOR_BOOT_LO'
	DB	'ADER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HGBKLHHD@SYSENC_UNSUPPORTED_FOR_DYNAMIC_D@
CONST	SEGMENT
??_C@_0CE@HGBKLHHD@SYSENC_UNSUPPORTED_FOR_DYNAMIC_D@ DB 'SYSENC_UNSUPPORT'
	DB	'ED_FOR_DYNAMIC_DISK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEKJKLIB@GPT_BOOT_DRIVE_UNSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BL@CEKJKLIB@GPT_BOOT_DRIVE_UNSUPPORTED?$AA@ DB 'GPT_BOOT_DRIVE_UNS'
	DB	'UPPORTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@
CONST	SEGMENT
??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@ DB 'FEATURE_REQUIRE'
	DB	'S_INSTALLATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OBNNMOKO@SYS_ENCRYPTION_UNSUPPORTED_ON_VI@
CONST	SEGMENT
??_C@_0CI@OBNNMOKO@SYS_ENCRYPTION_UNSUPPORTED_ON_VI@ DB 'SYS_ENCRYPTION_U'
	DB	'NSUPPORTED_ON_VISTA_SP0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BKBFFPJL@SYS_ENCRYPTION_UNSUPPORTED_ON_CU@
CONST	SEGMENT
??_C@_0CJ@BKBFFPJL@SYS_ENCRYPTION_UNSUPPORTED_ON_CU@ DB 'SYS_ENCRYPTION_U'
	DB	'NSUPPORTED_ON_CURRENT_OS', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ$1
__ehfuncinfo$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
_activePartitionFound$ = -481				; size = 1
_$S6$150056 = -480					; size = 52
$T222733 = -480						; size = 36
$T222732 = -480						; size = 36
$T222731 = -480						; size = 36
$T222730 = -480						; size = 36
$T222729 = -480						; size = 36
$T222728 = -480						; size = 36
$T222727 = -480						; size = 36
$T222740 = -428						; size = 4
_geometry$ = -424					; size = 24
_config$ = -400						; size = 384
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::CheckRequirements, COMDAT
; _this$ = ecx

; 1864 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 d4 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+484], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 e8 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+500]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1865 : 		if (nCurrentOS == WIN_2000)

  0003a	bf 07 00 00 00	 mov	 edi, 7
  0003f	8b f1		 mov	 esi, ecx
  00041	39 3d 00 00 00
	00		 cmp	 DWORD PTR _nCurrentOS, edi
  00047	75 32		 jne	 SHORT $LN18@CheckRequi@3

; 1866 : 			throw ErrorException ("SYS_ENCRYPTION_UNSUPPORTED_ON_CURRENT_OS");

  00049	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR $T222727[esp+504]
  00052	33 c0		 xor	 eax, eax
  00054	51		 push	 ecx
  00055	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T222727[esp+508], OFFSET ??_7ErrorException@CipherShed@@6B@
  0005d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222727[esp+512], OFFSET ??_C@_0CJ@BKBFFPJL@SYS_ENCRYPTION_UNSUPPORTED_ON_CU@
  00065	89 7c 24 3c	 mov	 DWORD PTR $T222727[esp+540], edi
  00069	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T222727[esp+536], 0
  00071	66 89 44 24 28	 mov	 WORD PTR $T222727[esp+520], ax
  00076	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@CheckRequi@3:

; 1867 :  
; 1868 : 		if (CurrentOSMajor == 6 && CurrentOSMinor == 0 && CurrentOSServicePack < 1)

  0007b	33 db		 xor	 ebx, ebx
  0007d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00084	75 3f		 jne	 SHORT $LN17@CheckRequi@3
  00086	39 1d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMinor, ebx
  0008c	75 37		 jne	 SHORT $LN17@CheckRequi@3
  0008e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _CurrentOSServicePack, 1
  00095	7d 2e		 jge	 SHORT $LN17@CheckRequi@3

; 1869 : 			throw ErrorException ("SYS_ENCRYPTION_UNSUPPORTED_ON_VISTA_SP0");

  00097	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0009c	8d 44 24 18	 lea	 eax, DWORD PTR $T222728[esp+504]
  000a0	33 d2		 xor	 edx, edx
  000a2	50		 push	 eax
  000a3	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T222728[esp+508], OFFSET ??_7ErrorException@CipherShed@@6B@
  000ab	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222728[esp+512], OFFSET ??_C@_0CI@OBNNMOKO@SYS_ENCRYPTION_UNSUPPORTED_ON_VI@
  000b3	89 7c 24 3c	 mov	 DWORD PTR $T222728[esp+540], edi
  000b7	89 5c 24 38	 mov	 DWORD PTR $T222728[esp+536], ebx
  000bb	66 89 54 24 28	 mov	 WORD PTR $T222728[esp+520], dx
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN17@CheckRequi@3:

; 1870 : 
; 1871 : 		if (IsNonInstallMode())

  000c5	e8 00 00 00 00	 call	 _IsNonInstallMode
  000ca	85 c0		 test	 eax, eax
  000cc	74 2e		 je	 SHORT $LN16@CheckRequi@3

; 1872 : 			throw ErrorException ("FEATURE_REQUIRES_INSTALLATION");

  000ce	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  000d3	8d 54 24 18	 lea	 edx, DWORD PTR $T222729[esp+504]
  000d7	33 c9		 xor	 ecx, ecx
  000d9	52		 push	 edx
  000da	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T222729[esp+508], OFFSET ??_7ErrorException@CipherShed@@6B@
  000e2	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222729[esp+512], OFFSET ??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@
  000ea	89 7c 24 3c	 mov	 DWORD PTR $T222729[esp+540], edi
  000ee	89 5c 24 38	 mov	 DWORD PTR $T222729[esp+536], ebx
  000f2	66 89 4c 24 28	 mov	 WORD PTR $T222729[esp+520], cx
  000f7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN16@CheckRequi@3:

; 1873 : 
; 1874 : 		SystemDriveConfiguration config = GetSystemDriveConfiguration ();

  000fc	8d 44 24 64	 lea	 eax, DWORD PTR _config$[esp+500]
  00100	50		 push	 eax
  00101	8b ce		 mov	 ecx, esi
  00103	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00108	89 9c 24 f0 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+508], ebx

; 1875 : 
; 1876 : 		if (config.SystemPartition.IsGPT)

  0010f	39 9c 24 b4 01
	00 00		 cmp	 DWORD PTR _config$[esp+836], ebx
  00116	74 2e		 je	 SHORT $LN15@CheckRequi@3

; 1877 : 			throw ErrorException ("GPT_BOOT_DRIVE_UNSUPPORTED");

  00118	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  0011d	8d 54 24 18	 lea	 edx, DWORD PTR $T222730[esp+504]
  00121	33 c9		 xor	 ecx, ecx
  00123	52		 push	 edx
  00124	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T222730[esp+508], OFFSET ??_7ErrorException@CipherShed@@6B@
  0012c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222730[esp+512], OFFSET ??_C@_0BL@CEKJKLIB@GPT_BOOT_DRIVE_UNSUPPORTED?$AA@
  00134	89 7c 24 3c	 mov	 DWORD PTR $T222730[esp+540], edi
  00138	89 5c 24 38	 mov	 DWORD PTR $T222730[esp+536], ebx
  0013c	66 89 4c 24 28	 mov	 WORD PTR $T222730[esp+520], cx
  00141	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN15@CheckRequi@3:

; 1878 : 
; 1879 : 		if (SystemDriveIsDynamic())

  00146	8b ce		 mov	 ecx, esi
  00148	e8 00 00 00 00	 call	 ?SystemDriveIsDynamic@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveIsDynamic
  0014d	84 c0		 test	 al, al
  0014f	74 2e		 je	 SHORT $LN14@CheckRequi@3

; 1880 : 			throw ErrorException ("SYSENC_UNSUPPORTED_FOR_DYNAMIC_DISK");

  00151	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  00156	8d 4c 24 18	 lea	 ecx, DWORD PTR $T222731[esp+504]
  0015a	33 c0		 xor	 eax, eax
  0015c	51		 push	 ecx
  0015d	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T222731[esp+508], OFFSET ??_7ErrorException@CipherShed@@6B@
  00165	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T222731[esp+512], OFFSET ??_C@_0CE@HGBKLHHD@SYSENC_UNSUPPORTED_FOR_DYNAMIC_D@
  0016d	89 7c 24 3c	 mov	 DWORD PTR $T222731[esp+540], edi
  00171	89 5c 24 38	 mov	 DWORD PTR $T222731[esp+536], ebx
  00175	66 89 44 24 28	 mov	 WORD PTR $T222731[esp+520], ax
  0017a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@CheckRequi@3:

; 1881 : 
; 1882 : 		if (config.InitialUnallocatedSpace < TC_BOOT_LOADER_AREA_SIZE)

  0017f	39 9c 24 30 01
	00 00		 cmp	 DWORD PTR _config$[esp+704], ebx
  00186	7f 2c		 jg	 SHORT $LN13@CheckRequi@3
  00188	7c 0d		 jl	 SHORT $LN234@CheckRequi@3
  0018a	81 bc 24 2c 01
	00 00 00 7e 00
	00		 cmp	 DWORD PTR _config$[esp+700], 32256 ; 00007e00H
  00195	73 1d		 jae	 SHORT $LN13@CheckRequi@3
$LN234@CheckRequi@3:

; 1883 : 			throw ErrorException ("NO_SPACE_FOR_BOOT_LOADER");

  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HICFFOOK@NO_SPACE_FOR_BOOT_LOADER?$AA@
  0019c	8d 4c 24 18	 lea	 ecx, DWORD PTR $T222732[esp+504]
  001a0	e8 00 00 00 00	 call	 ??0ErrorException@CipherShed@@QAE@PAD@Z ; CipherShed::ErrorException::ErrorException
  001a5	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  001aa	8d 54 24 18	 lea	 edx, DWORD PTR $T222732[esp+504]
  001ae	52		 push	 edx
  001af	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@CheckRequi@3:

; 1884 : 
; 1885 : 		DISK_GEOMETRY geometry = GetDriveGeometry (config.DriveNumber);

  001b4	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR _config$[esp+556]
  001bb	50		 push	 eax
  001bc	8d 4c 24 50	 lea	 ecx, DWORD PTR _geometry$[esp+504]
  001c0	51		 push	 ecx
  001c1	8b ce		 mov	 ecx, esi
  001c3	e8 00 00 00 00	 call	 ?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z ; CipherShed::BootEncryption::GetDriveGeometry

; 1886 : 
; 1887 : 		if (geometry.BytesPerSector != TC_SECTOR_SIZE_BIOS)

  001c8	81 7c 24 60 00
	02 00 00	 cmp	 DWORD PTR _geometry$[esp+520], 512 ; 00000200H
  001d0	74 1d		 je	 SHORT $LN12@CheckRequi@3

; 1888 : 			throw ErrorException ("SYSENC_UNSUPPORTED_SECTOR_SIZE_BIOS");

  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NNOADDIE@SYSENC_UNSUPPORTED_SECTOR_SIZE_B@
  001d7	8d 4c 24 18	 lea	 ecx, DWORD PTR $T222733[esp+504]
  001db	e8 00 00 00 00	 call	 ??0ErrorException@CipherShed@@QAE@PAD@Z ; CipherShed::ErrorException::ErrorException
  001e0	68 00 00 00 00	 push	 OFFSET __TI2?AUErrorException@CipherShed@@
  001e5	8d 54 24 18	 lea	 edx, DWORD PTR $T222733[esp+504]
  001e9	52		 push	 edx
  001ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@CheckRequi@3:

; 1889 : 
; 1890 : 		bool activePartitionFound = false;

  001ef	88 5c 24 13	 mov	 BYTE PTR _activePartitionFound$[esp+500], bl

; 1891 : 		if (!config.SystemPartition.IsGPT)

  001f3	39 9c 24 b4 01
	00 00		 cmp	 DWORD PTR _config$[esp+836], ebx
  001fa	0f 85 94 00 00
	00		 jne	 $LN11@CheckRequi@3

; 1892 : 		{
; 1893 : 			// Determine whether there is an Active partition on the system drive
; 1894 : 			foreach (const Partition &partition, config.Partitions)

  00200	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _config$[esp+708]
  00207	50		 push	 eax
  00208	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S6$150056[esp+504]
  0020c	51		 push	 ecx
  0020d	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@01@ABV?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> > >
  00212	83 c4 08	 add	 esp, 8
  00215	8b 54 24 14	 mov	 edx, DWORD PTR _$S6$150056[esp+500]
  00219	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0021c	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S6$150056[esp+500]
  00220	c6 84 24 f0 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+508], 1
  00228	ff d0		 call	 eax
  0022a	84 c0		 test	 al, al
  0022c	74 56		 je	 SHORT $LN8@CheckRequi@3
  0022e	8b ff		 npad	 2
$LL10@CheckRequi@3:
  00230	8d 4c 24 40	 lea	 ecx, DWORD PTR _$S6$150056[esp+544]
  00234	e8 00 00 00 00	 call	 ??D?$_Const_iterator@$00@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QBEABUPartition@CipherShed@@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Const_iterator<1>::operator*
  00239	38 5c 24 19	 cmp	 BYTE PTR _$S6$150056[esp+505], bl
  0023d	0f 94 c1	 sete	 cl
  00240	88 4c 24 19	 mov	 BYTE PTR _$S6$150056[esp+505], cl
  00244	3a cb		 cmp	 cl, bl
  00246	74 1e		 je	 SHORT $LN9@CheckRequi@3
$LL221@CheckRequi@3:

; 1895 : 			{
; 1896 : 				if (partition.Info.BootIndicator)

  00248	38 58 39	 cmp	 BYTE PTR [eax+57], bl
  0024b	75 14		 jne	 SHORT $LN231@CheckRequi@3
  0024d	3a cb		 cmp	 cl, bl
  0024f	0f 94 c1	 sete	 cl
  00252	c6 44 24 18 01	 mov	 BYTE PTR _$S6$150056[esp+504], 1
  00257	88 4c 24 19	 mov	 BYTE PTR _$S6$150056[esp+505], cl
  0025b	3a cb		 cmp	 cl, bl
  0025d	75 e9		 jne	 SHORT $LL221@CheckRequi@3
  0025f	eb 05		 jmp	 SHORT $LN9@CheckRequi@3
$LN231@CheckRequi@3:

; 1897 : 				{
; 1898 : 					activePartitionFound = true;

  00261	c6 44 24 13 01	 mov	 BYTE PTR _activePartitionFound$[esp+500], 1
$LN9@CheckRequi@3:

; 1892 : 		{
; 1893 : 			// Determine whether there is an Active partition on the system drive
; 1894 : 			foreach (const Partition &partition, config.Partitions)

  00266	8b 54 24 14	 mov	 edx, DWORD PTR _$S6$150056[esp+500]
  0026a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0026d	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S6$150056[esp+500]
  00271	ff d0		 call	 eax
  00273	8b 54 24 14	 mov	 edx, DWORD PTR _$S6$150056[esp+500]
  00277	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0027a	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S6$150056[esp+500]
  0027e	ff d0		 call	 eax
  00280	84 c0		 test	 al, al
  00282	75 ac		 jne	 SHORT $LL10@CheckRequi@3
$LN8@CheckRequi@3:

; 1899 : 					break;
; 1900 : 				}
; 1901 : 			}

  00284	8d 4c 24 14	 lea	 ecx, DWORD PTR _$S6$150056[esp+500]
  00288	88 9c 24 f0 01
	00 00		 mov	 BYTE PTR __$EHRec$[esp+508], bl
  0028f	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
$LN11@CheckRequi@3:

; 1902 : 		}
; 1903 : 
; 1904 : 		if (!config.SystemLoaderPresent || !activePartitionFound)

  00294	38 9c 24 dc 01
	00 00		 cmp	 BYTE PTR _config$[esp+876], bl
  0029b	74 06		 je	 SHORT $LN2@CheckRequi@3
  0029d	38 5c 24 13	 cmp	 BYTE PTR _activePartitionFound$[esp+500], bl
  002a1	75 37		 jne	 SHORT $LN3@CheckRequi@3
$LN2@CheckRequi@3:

; 1905 : 		{
; 1906 : 			static bool confirmed = false;
; 1907 : 
; 1908 : 			if (!confirmed && AskWarnNoYes ("WINDOWS_NOT_ON_BOOT_DRIVE_ERROR") == IDNO)

  002a3	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?confirmed@?BM@??CheckRequirements@BootEncryption@CipherShed@@QAEXXZ@4_NA, bl
  002a9	75 28		 jne	 SHORT $LN1@CheckRequi@3
  002ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PKMHCFDK@WINDOWS_NOT_ON_BOOT_DRIVE_ERROR?$AA@
  002b0	e8 00 00 00 00	 call	 _AskWarnNoYes
  002b5	83 c4 04	 add	 esp, 4
  002b8	3b c7		 cmp	 eax, edi
  002ba	75 17		 jne	 SHORT $LN1@CheckRequi@3

; 1909 : 				throw UserAbort (SRC_POS);

  002bc	68 00 00 00 00	 push	 OFFSET __TI2?AUUserAbort@CipherShed@@
  002c1	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T222740[esp+504]
  002c5	51		 push	 ecx
  002c6	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T222740[esp+508], OFFSET ??_7UserAbort@CipherShed@@6B@
  002ce	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CheckRequi@3:

; 1910 : 
; 1911 : 			confirmed = true;

  002d3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?confirmed@?BM@??CheckRequirements@BootEncryption@CipherShed@@QAEXXZ@4_NA, 1
$LN3@CheckRequi@3:

; 1912 : 		}
; 1913 : 	}

  002da	8d 4c 24 64	 lea	 ecx, DWORD PTR _config$[esp+500]
  002de	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  002e3	8b 8c 24 e8 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+500]
  002ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f1	59		 pop	 ecx
  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b 8c 24 d4 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+484]
  002fc	33 cc		 xor	 ecx, esp
  002fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00303	81 c4 e4 01 00
	00		 add	 esp, 484		; 000001e4H
  00309	c3		 ret	 0
$LN236@CheckRequi@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ$0:
  00000	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _config$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ$1:
  0000b	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _$S6$150056[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__ehhandler$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 1c fe ff
	ff		 lea	 eax, DWORD PTR [edx-484]
  00020	8b 8a 18 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-488]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::CheckRequirements
PUBLIC	?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirementsHiddenOS
; Function compile flags: /Ogtpy
;	COMDAT ?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ
_TEXT	SEGMENT
$T223748 = -128						; size = 128
?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ PROC ; CipherShed::BootEncryption::CheckRequirementsHiddenOS, COMDAT
; _this$ = ecx

; 1918 : 		// It is assumed that CheckRequirements() had been called (so we don't check e.g. whether it's GPT).
; 1919 : 
; 1920 : 		// The user may have modified/added/deleted partitions since the partition table was last scanned.
; 1921 : 		InvalidateCachedSysDriveProperties ();

  00000	32 c0		 xor	 al, al
  00002	88 81 14 06 00
	00		 mov	 BYTE PTR [ecx+1556], al
  00008	88 81 15 06 00
	00		 mov	 BYTE PTR [ecx+1557], al
  0000e	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 1922 : 
; 1923 : 		GetPartitionForHiddenOS ();

  00014	8d 04 24	 lea	 eax, DWORD PTR $T223748[esp+128]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
  0001d	8d 0c 24	 lea	 ecx, DWORD PTR $T223748[esp+128]
  00020	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 1924 : 	}

  00025	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0002b	c3		 ret	 0
?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ENDP ; CipherShed::BootEncryption::CheckRequirementsHiddenOS
_TEXT	ENDS
PUBLIC	??_C@_0DJ@PKACCBGF@CipherShed?3?3BootEncryption?3?3Prep@ ; `string'
PUBLIC	?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z ; CipherShed::BootEncryption::PrepareHiddenOSCreation
;	COMDAT ??_C@_0DJ@PKACCBGF@CipherShed?3?3BootEncryption?3?3Prep@
; File c:\home\public\desktop\projects\ciphershed\src\common\exception.h
CONST	SEGMENT
??_C@_0DJ@PKACCBGF@CipherShed?3?3BootEncryption?3?3Prep@ DB 'CipherShed::'
	DB	'BootEncryption::PrepareHiddenOSCreation:2238', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
CONST	ENDS
;	COMDAT ?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z
_TEXT	SEGMENT
$T223755 = -104						; size = 8
_encStatus$ = -96					; size = 94
_ea$ = 8						; size = 4
_mode$ = 12						; size = 4
_pkcs5$ = 16						; size = 4
?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z PROC ; CipherShed::BootEncryption::PrepareHiddenOSCreation, COMDAT
; _this$ = ecx

; 2235 : 	{

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	56		 push	 esi

; 2236 : 		BootEncryptionStatus encStatus = GetStatus();

  00004	6a 5e		 push	 94			; 0000005eH
  00006	8d 44 24 10	 lea	 eax, DWORD PTR _encStatus$[esp+112]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	68 48 20 22 00	 push	 2236488			; 00222048H
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 2237 : 		if (encStatus.DriveMounted)

  0001b	83 7c 24 12 00	 cmp	 DWORD PTR _encStatus$[esp+114], 0
  00020	74 1f		 je	 SHORT $LN1@PrepareHid

; 2238 : 			throw ParameterIncorrect (SRC_POS);

  00022	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00027	8d 4c 24 08	 lea	 ecx, DWORD PTR $T223755[esp+112]
  0002b	51		 push	 ecx
  0002c	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T223755[esp+116], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00034	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T223755[esp+120], OFFSET ??_C@_0DJ@PKACCBGF@CipherShed?3?3BootEncryption?3?3Prep@
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@PrepareHid:

; 2239 : 
; 2240 : 		CheckRequirements();

  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirements

; 2241 : 		BackupSystemLoader();

  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::BackupSystemLoader

; 2242 : 
; 2243 : 		SelectedEncryptionAlgorithmId = ea;

  0004f	8b 54 24 70	 mov	 edx, DWORD PTR _ea$[esp+104]
  00053	89 96 88 01 00
	00		 mov	 DWORD PTR [esi+392], edx
  00059	5e		 pop	 esi

; 2244 : 	}

  0005a	83 c4 68	 add	 esp, 104		; 00000068H
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@PrepareHid:
?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z ENDP ; CipherShed::BootEncryption::PrepareHiddenOSCreation
_TEXT	ENDS
PUBLIC	??_C@_0CM@NPKCCOOP@WHOLE_DRIVE_ENCRYPTION_PREVENTED@ ; `string'
PUBLIC	??_C@_0DF@JFGMMOLJ@CipherShed?3?3BootEncryption?3?3Prep@ ; `string'
PUBLIC	_password$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_rescueIsoImagePath$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::PrepareInstallation
;	COMDAT ??_C@_0CM@NPKCCOOP@WHOLE_DRIVE_ENCRYPTION_PREVENTED@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CM@NPKCCOOP@WHOLE_DRIVE_ENCRYPTION_PREVENTED@ DB 'WHOLE_DRIVE_ENCR'
	DB	'YPTION_PREVENTED_BY_DRIVERS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JFGMMOLJ@CipherShed?3?3BootEncryption?3?3Prep@
CONST	SEGMENT
??_C@_0DF@JFGMMOLJ@CipherShed?3?3BootEncryption?3?3Prep@ DB 'CipherShed::'
	DB	'BootEncryption::PrepareInstallation:2251', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__tryblocktable$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6
__ehfuncinfo$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\common\bootencryption.cpp
xdata$x	ENDS
;	COMDAT ?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_encStatus$ = -176					; size = 94
_geometry$150372 = -80					; size = 24
$T223773 = -56						; size = 4
_e$150378 = -52						; size = 4
$T223772 = -48						; size = 8
_password$GSCopy$ = -40					; size = 4
$T223774 = -36						; size = 4
_sector$150374 = -32					; size = 8
_rescueIsoImagePath$GSCopy$ = -24			; size = 4
_this$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_config$ = 0						; size = 384
_device$150375 = 384					; size = 56
__$ArrayPad$ = 440					; size = 4
_systemPartitionOnly$ = 452				; size = 1
_password$ = 456					; size = 4
_ea$ = 460						; size = 4
_mode$ = 464						; size = 4
_pkcs5$ = 468						; size = 4
_rescueIsoImagePath$ = 472				; size = 4
?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::BootEncryption::PrepareInstallation, COMDAT
; _this$ = ecx

; 2248 : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 44 fe
	ff ff		 lea	 ebp, DWORD PTR [esp-444]
  00008	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 b8 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2301 : 			CreateRescueIsoImage (true, rescueIsoImagePath);

  0003f	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR _password$[ebp]
  00045	6a 5e		 push	 94			; 0000005eH
  00047	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _encStatus$[ebp]
  0004d	52		 push	 edx
  0004e	8b f1		 mov	 esi, ecx
  00050	8b 8d d8 01 00
	00		 mov	 ecx, DWORD PTR _rescueIsoImagePath$[ebp]
  00056	33 db		 xor	 ebx, ebx
  00058	53		 push	 ebx
  00059	53		 push	 ebx
  0005a	89 4d e8	 mov	 DWORD PTR _rescueIsoImagePath$GSCopy$[ebp], ecx
  0005d	68 48 20 22 00	 push	 2236488			; 00222048H
  00062	8b ce		 mov	 ecx, esi
  00064	89 75 ec	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00067	89 45 d8	 mov	 DWORD PTR _password$GSCopy$[ebp], eax
  0006a	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver
  0006f	39 9d 56 ff ff
	ff		 cmp	 DWORD PTR _encStatus$[ebp+6], ebx
  00075	74 1c		 je	 SHORT $LN7@PrepareIns
  00077	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0007c	8d 45 d0	 lea	 eax, DWORD PTR $T223772[ebp]
  0007f	50		 push	 eax
  00080	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T223772[ebp], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00087	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T223772[ebp+4], OFFSET ??_C@_0DF@JFGMMOLJ@CipherShed?3?3BootEncryption?3?3Prep@
  0008e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PrepareIns:

; 2249 : 		BootEncryptionStatus encStatus = GetStatus();
; 2250 : 		if (encStatus.DriveMounted)
; 2251 : 			throw ParameterIncorrect (SRC_POS);
; 2252 : 
; 2253 : 		CheckRequirements ();

  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirements

; 2254 : 
; 2255 : 		SystemDriveConfiguration config = GetSystemDriveConfiguration();

  0009a	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  0009d	51		 push	 ecx
  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  000a5	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 2256 : 
; 2257 : 		// Some chipset drivers may prevent access to the last sector of the drive
; 2258 : 		if (!systemPartitionOnly)

  000a8	38 9d c4 01 00
	00		 cmp	 BYTE PTR _systemPartitionOnly$[ebp], bl
  000ae	0f 85 eb 00 00
	00		 jne	 $LN58@PrepareIns

; 2259 : 		{
; 2260 : 			DISK_GEOMETRY geometry = GetDriveGeometry (config.DriveNumber);

  000b4	8b 55 38	 mov	 edx, DWORD PTR _config$[ebp+56]
  000b7	52		 push	 edx
  000b8	8d 45 b0	 lea	 eax, DWORD PTR _geometry$150372[ebp]
  000bb	50		 push	 eax
  000bc	8b ce		 mov	 ecx, esi
  000be	e8 00 00 00 00	 call	 ?GetDriveGeometry@BootEncryption@CipherShed@@IAE?AU_DISK_GEOMETRY@@H@Z ; CipherShed::BootEncryption::GetDriveGeometry

; 2261 : 			Buffer sector (geometry.BytesPerSector);

  000c3	8b 4d c4	 mov	 ecx, DWORD PTR _geometry$150372[ebp+20]
  000c6	51		 push	 ecx
  000c7	8d 4d e0	 lea	 ecx, DWORD PTR _sector$150374[ebp]
  000ca	e8 00 00 00 00	 call	 ??0Buffer@CipherShed@@QAE@I@Z ; CipherShed::Buffer::Buffer

; 2262 : 
; 2263 : 			Device device (config.DevicePath);

  000cf	53		 push	 ebx
  000d0	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000d3	8b cc		 mov	 ecx, esp
  000d5	89 65 c8	 mov	 DWORD PTR $T223773[ebp], esp
  000d8	6a ff		 push	 -1
  000da	53		 push	 ebx
  000db	8d 55 1c	 lea	 edx, DWORD PTR _config$[ebp+28]
  000de	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000e5	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000e8	52		 push	 edx
  000e9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ed	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000f0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000f5	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150375[ebp]
  000fb	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device

; 2264 : 
; 2265 : 			try
; 2266 : 			{
; 2267 : 				device.SeekAt (config.DrivePartition.Info.PartitionLength.QuadPart - geometry.BytesPerSector);

  00100	8b 45 c4	 mov	 eax, DWORD PTR _geometry$150372[ebp+20]
  00103	8b 55 68	 mov	 edx, DWORD PTR _config$[ebp+104]
  00106	33 c9		 xor	 ecx, ecx
  00108	2b d0		 sub	 edx, eax
  0010a	8b 45 6c	 mov	 eax, DWORD PTR _config$[ebp+108]
  0010d	1b c1		 sbb	 eax, ecx
  0010f	50		 push	 eax
  00110	52		 push	 edx
  00111	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150375[ebp]
  00117	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0011b	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 2268 : 				device.Read (sector.Ptr(), sector.Size());

  00120	8b 4d e4	 mov	 ecx, DWORD PTR _sector$150374[ebp+4]
  00123	8b 55 e0	 mov	 edx, DWORD PTR _sector$150374[ebp]
  00126	51		 push	 ecx
  00127	52		 push	 edx
  00128	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150375[ebp]
  0012e	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read
  00133	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0013a	eb 49		 jmp	 SHORT $LN17@PrepareIns
__catch$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:

; 2269 : 			}
; 2270 : 			catch (SystemException &e)
; 2271 : 			{
; 2272 : 				if (e.ErrorCode != ERROR_CRC)

  0013c	8b 4d cc	 mov	 ecx, DWORD PTR _e$150378[ebp]
  0013f	83 79 04 17	 cmp	 DWORD PTR [ecx+4], 23	; 00000017H
  00143	74 2e		 je	 SHORT $LN4@PrepareIns

; 2273 : 				{
; 2274 : 					e.Show (ParentWindow);

  00145	8b 55 ec	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00148	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014a	8b 12		 mov	 edx, DWORD PTR [edx]
  0014c	8b 00		 mov	 eax, DWORD PTR [eax]
  0014e	52		 push	 edx
  0014f	ff d0		 call	 eax

; 2275 : 					Error ("WHOLE_DRIVE_ENCRYPTION_PREVENTED_BY_DRIVERS");

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NPKCCOOP@WHOLE_DRIVE_ENCRYPTION_PREVENTED@
  00156	e8 00 00 00 00	 call	 _Error
  0015b	83 c4 04	 add	 esp, 4

; 2276 : 					throw UserAbort (SRC_POS);

  0015e	68 00 00 00 00	 push	 OFFSET __TI2?AUUserAbort@CipherShed@@
  00163	8d 4d dc	 lea	 ecx, DWORD PTR $T223774[ebp]
  00166	51		 push	 ecx
  00167	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T223774[ebp], OFFSET ??_7UserAbort@CipherShed@@6B@
  0016e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PrepareIns:

; 2277 : 				}
; 2278 : 			}

  00173	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0017a	b8 00 00 00 00	 mov	 eax, $LN63@PrepareIns
  0017f	c3		 ret	 0
$LN63@PrepareIns:
  00180	8b 75 ec	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00183	33 db		 xor	 ebx, ebx
$LN17@PrepareIns:

; 2279 : 		}

  00185	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150375[ebp]
  0018b	e8 00 00 00 00	 call	 ??1Device@CipherShed@@QAE@XZ
  00190	8b 55 e0	 mov	 edx, DWORD PTR _sector$150374[ebp]
  00193	52		 push	 edx
  00194	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00197	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0019c	83 c4 04	 add	 esp, 4
$LN58@PrepareIns:

; 2280 : 
; 2281 : 		BackupSystemLoader ();

  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?BackupSystemLoader@BootEncryption@CipherShed@@IAEXXZ ; CipherShed::BootEncryption::BackupSystemLoader

; 2282 : 
; 2283 : 		uint64 volumeSize;
; 2284 : 		uint64 encryptedAreaStart;
; 2285 : 
; 2286 : 		if (systemPartitionOnly)

  001a6	38 9d c4 01 00
	00		 cmp	 BYTE PTR _systemPartitionOnly$[ebp], bl
  001ac	74 1a		 je	 SHORT $LN3@PrepareIns

; 2287 : 		{
; 2288 : 			volumeSize = config.SystemPartition.Info.PartitionLength.QuadPart;

  001ae	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR _config$[ebp+280]
  001b4	8b 8d 1c 01 00
	00		 mov	 ecx, DWORD PTR _config$[ebp+284]

; 2289 : 			encryptedAreaStart = config.SystemPartition.Info.StartingOffset.QuadPart;

  001ba	8b 95 10 01 00
	00		 mov	 edx, DWORD PTR _config$[ebp+272]
  001c0	8b bd 14 01 00
	00		 mov	 edi, DWORD PTR _config$[ebp+276]

; 2290 : 		}
; 2291 : 		else

  001c6	eb 1c		 jmp	 SHORT $LN2@PrepareIns
$LN3@PrepareIns:

; 2292 : 		{
; 2293 : 			volumeSize = config.DrivePartition.Info.PartitionLength.QuadPart - TC_BOOT_LOADER_AREA_SIZE;

  001c8	8b 45 68	 mov	 eax, DWORD PTR _config$[ebp+104]
  001cb	8b 4d 6c	 mov	 ecx, DWORD PTR _config$[ebp+108]

; 2294 : 			encryptedAreaStart = config.DrivePartition.Info.StartingOffset.QuadPart + TC_BOOT_LOADER_AREA_SIZE;

  001ce	8b 55 60	 mov	 edx, DWORD PTR _config$[ebp+96]
  001d1	8b 7d 64	 mov	 edi, DWORD PTR _config$[ebp+100]
  001d4	05 00 82 ff ff	 add	 eax, -32256		; ffff8200H
  001d9	83 d1 ff	 adc	 ecx, -1
  001dc	81 c2 00 7e 00
	00		 add	 edx, 32256		; 00007e00H
  001e2	13 fb		 adc	 edi, ebx
$LN2@PrepareIns:

; 2295 : 		}
; 2296 : 
; 2297 : 		SelectedEncryptionAlgorithmId = ea;

  001e4	8b 9d cc 01 00
	00		 mov	 ebx, DWORD PTR _ea$[ebp]
  001ea	89 9e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ebx

; 2298 : 		CreateVolumeHeader (volumeSize, encryptedAreaStart, &password, ea, mode, pkcs5);

  001f0	8b 9d d4 01 00
	00		 mov	 ebx, DWORD PTR _pkcs5$[ebp]
  001f6	53		 push	 ebx
  001f7	8b 9d d0 01 00
	00		 mov	 ebx, DWORD PTR _mode$[ebp]
  001fd	53		 push	 ebx
  001fe	8b 9d cc 01 00
	00		 mov	 ebx, DWORD PTR _ea$[ebp]
  00204	53		 push	 ebx
  00205	ff 75 d8	 push	 DWORD PTR _password$GSCopy$[ebp]
  00208	57		 push	 edi
  00209	52		 push	 edx
  0020a	51		 push	 ecx
  0020b	50		 push	 eax
  0020c	8b ce		 mov	 ecx, esi
  0020e	e8 00 00 00 00	 call	 ?CreateVolumeHeader@BootEncryption@CipherShed@@IAEX_K0PAUPassword@@HHH@Z ; CipherShed::BootEncryption::CreateVolumeHeader

; 2299 : 		
; 2300 : 		if (!rescueIsoImagePath.empty())

  00213	8b 45 e8	 mov	 eax, DWORD PTR _rescueIsoImagePath$GSCopy$[ebp]
  00216	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0021a	74 0a		 je	 SHORT $LN1@PrepareIns

; 2301 : 			CreateRescueIsoImage (true, rescueIsoImagePath);

  0021c	50		 push	 eax
  0021d	6a 01		 push	 1
  0021f	8b ce		 mov	 ecx, esi
  00221	e8 00 00 00 00	 call	 ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
$LN1@PrepareIns:

; 2302 : 	}

  00226	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00229	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  0022e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00231	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00238	59		 pop	 ecx
  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	5b		 pop	 ebx
  0023c	8b 8d b8 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00242	33 cd		 xor	 ecx, ebp
  00244	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00249	81 c5 bc 01 00
	00		 add	 ebp, 444		; 000001bcH
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c2 18 00	 ret	 24			; 00000018H
$LN66@PrepareIns:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR _config$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _sector$150374[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Buffer@CipherShed@@QAE@XZ ; CipherShed::Buffer::~Buffer
__unwindfunclet$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
  00010	8d 8d 80 01 00
	00		 lea	 ecx, DWORD PTR _device$150375[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1Device@CipherShed@@QAE@XZ
__ehhandler$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 8a c4 01 00
	00		 mov	 ecx, DWORD PTR [edx+452]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::BootEncryption::PrepareInstallation
PUBLIC	?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A ; Define_the_symbol__ATL_MIXED::clash
;	COMDAT ?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atldef.h
_DATA	SEGMENT
?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A DD FLAT:??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::clash
_DATA	ENDS
PUBLIC	?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A DB 01H DUP (?) ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
END
