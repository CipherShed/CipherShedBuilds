; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

S	DD	030fb40d4H
	DD	09fa0ff0bH
	DD	06beccd2fH
	DD	03f258c7aH
	DD	01e213f2fH
	DD	09c004dd3H
	DD	06003e540H
	DD	0cf9fc949H
	DD	0bfd4af27H
	DD	088bbbdb5H
	DD	0e2034090H
	DD	098d09675H
	DD	06e63a0e0H
	DD	015c361d2H
	DD	0c2e7661dH
	DD	022d4ff8eH
	DD	028683b6fH
	DD	0c07fd059H
	DD	0ff2379c8H
	DD	0775f50e2H
	DD	043c340d3H
	DD	0df2f8656H
	DD	0887ca41aH
	DD	0a2d2bd2dH
	DD	0a1c9e0d6H
	DD	0346c4819H
	DD	061b76d87H
	DD	022540f2fH
	DD	02abe32e1H
	DD	0aa54166bH
	DD	022568e3aH
	DD	0a2d341d0H
	DD	066db40c8H
	DD	0a784392fH
	DD	04dff2fH
	DD	02db9d2deH
	DD	097943facH
	DD	04a97c1d8H
	DD	0527644b7H
	DD	0b5f437a7H
	DD	0b82cbaefH
	DD	0d751d159H
	DD	06ff7f0edH
	DD	05a097a1fH
	DD	0827b68d0H
	DD	090ecf52eH
	DD	022b0c054H
	DD	0bc8e5935H
	DD	04b6d2f7fH
	DD	050bb64a2H
	DD	0d2664910H
	DD	0bee5812dH
	DD	0b7332290H
	DD	0e93b159fH
	DD	0b48ee411H
	DD	04bff345dH
	DD	0fd45c240H
	DD	0ad31973fH
	DD	0c4f6d02eH
	DD	055fc8165H
	DD	0d5b1caadH
	DD	0a1ac2daeH
	DD	0a2d4b76dH
	DD	0c19b0c50H
	DD	0882240f2H
	DD	0c6e4f38H
	DD	0a4e4bfd7H
	DD	04f5ba272H
	DD	0564c1d2fH
	DD	0c59c5319H
	DD	0b949e354H
	DD	0b04669feH
	DD	0b1b6ab8aH
	DD	0c71358ddH
	DD	06385c545H
	DD	0110f935dH
	DD	057538ad5H
	DD	06a390493H
	DD	0e63d37e0H
	DD	02a54f6b3H
	DD	03a787d5fH
	DD	06276a0b5H
	DD	019a6fcdfH
	DD	07a42206aH
	DD	029f9d4d5H
	DD	0f61b1891H
	DD	0bb72275eH
	DD	0aa508167H
	DD	038901091H
	DD	0c6b505ebH
	DD	084c7cb8cH
	DD	02ad75a0fH
	DD	0874a1427H
	DD	0a2d1936bH
	DD	02ad286afH
	DD	0aa56d291H
	DD	0d7894360H
	DD	0425c750dH
	DD	093b39e26H
	DD	0187184c9H
	DD	06c00b32dH
	DD	073e2bb14H
	DD	0a0bebc3cH
	DD	054623779H
	DD	064459eabH
	DD	03f328b82H
	DD	07718cf82H
	DD	059a2cea6H
	DD	04ee002eH
	DD	089fe78e6H
	DD	03fab0950H
	DD	0325ff6c2H
	DD	081383f05H
	DD	06963c5c8H
	DD	076cb5ad6H
	DD	0d49974c9H
	DD	0ca180dcfH
	DD	0380782d5H
	DD	0c7fa5cf6H
	DD	08ac31511H
	DD	035e79e13H
	DD	047da91d0H
	DD	0f40f9086H
	DD	0a7e2419eH
	DD	031366241H
	DD	051ef495H
	DD	0aa573b04H
	DD	04a805d8dH
	DD	0548300d0H
	DD	0322a3cH
	DD	0bf64cddfH
	DD	0ba57a68eH
	DD	075c6372bH
	DD	050afd341H
	DD	0a7c13275H
	DD	0915a0bf5H
	DD	06b54bfabH
	DD	02b0b1426H
	DD	0ab4cc9d7H
	DD	0449ccd82H
	DD	0f7fbf265H
	DD	0ab85c5f3H
	DD	01b55db94H
	DD	0aad4e324H
	DD	0cfa4bd3fH
	DD	02deaa3e2H
	DD	09e204d02H
	DD	0c8bd25acH
	DD	0eadf55b3H
	DD	0d5bd9e98H
	DD	0e31231b2H
	DD	02ad5ad6cH
	DD	0954329deH
	DD	0adbe4528H
	DD	0d8710f69H
	DD	0aa51c90fH
	DD	0aa786bf6H
	DD	022513f1eH
	DD	0aa51a79bH
	DD	02ad344ccH
	DD	07b5a41f0H
	DD	0d37cfbadH
	DD	01b069505H
	DD	041ece491H
	DD	0b4c332e6H
	DD	032268d4H
	DD	0c9600accH
	DD	0ce387e6dH
	DD	0bf6bb16cH
	DD	06a70fb78H
	DD	0d03d9c9H
	DD	0d4df39deH
	DD	0e01063daH
	DD	04736f464H
	DD	05ad328d8H
	DD	0b347cc96H
	DD	075bb0fc3H
	DD	098511bfbH
	DD	04ffbcc35H
	DD	0b58bcf6aH
	DD	0e11f0abcH
	DD	0bfc5fe4aH
	DD	0a70aec10H
	DD	0ac39570aH
	DD	03f04442fH
	DD	06188b153H
	DD	0e0397a2eH
	DD	05727cb79H
	DD	09ceb418fH
	DD	01cacd68dH
	DD	02ad37c96H
	DD	0175cb9dH
	DD	0c69dff09H
	DD	0c75b65f0H
	DD	0d9db40d8H
	DD	0ec0e7779H
	DD	04744ead4H
	DD	0b11c3274H
	DD	0dd24cb9eH
	DD	07e1c54bdH
	DD	0f01144f9H
	DD	0d2240eb1H
	DD	09675b3fdH
	DD	0a3ac3755H
	DD	0d47c27afH
	DD	051c85f4dH
	DD	056907596H
	DD	0a5bb15e6H
	DD	0580304f0H
	DD	0ca042cf1H
	DD	011a37eaH
	DD	08dbfaadbH
	DD	035ba3e4aH
	DD	03526ffa0H
	DD	0c37b4d09H
	DD	0bc306ed9H
	DD	098a52666H
	DD	05648f725H
	DD	0ff5e569dH
	DD	0ced63d0H
	DD	07c63b2cfH
	DD	0700b45e1H
	DD	0d5ea50f1H
	DD	085a92872H
	DD	0af1fbda7H
	DD	0d4234870H
	DD	0a7870bf3H
	DD	02d3b4d79H
	DD	042e04198H
	DD	0cd0ede7H
	DD	026470db8H
	DD	0f881814cH
	DD	0474d6ad7H
	DD	07c0c5e5cH
	DD	0d1231959H
	DD	0381b7298H
	DD	0f5d2f4dbH
	DD	0ab838653H
	DD	06e2f1e23H
	DD	083719c9eH
	DD	0bd91e046H
	DD	09a56456eH
	DD	0dc39200cH
	DD	020c8c571H
	DD	0962bda1cH
	DD	0e1e696ffH
	DD	0b141ab08H
	DD	07cca89b9H
	DD	01a69e783H
	DD	02cc4843H
	DD	0a2f7c579H
	DD	0429ef47dH
	DD	0427b169cH
	DD	05ac9f049H
	DD	0dd8f0f00H
	DD	05c8165bfH
	DD	01f201094H
	DD	0ef0ba75bH
	DD	069e3cf7eH
	DD	0393f4380H
	DD	0fe61cf7aH
	DD	0eec5207aH
	DD	055889c94H
	DD	072fc0651H
	DD	0ada7ef79H
	DD	04e1d7235H
	DD	0d55a63ceH
	DD	0de0436baH
	DD	099c430efH
	DD	05f0c0794H
	DD	018dcdb7dH
	DD	0a1d6eff3H
	DD	0a0b52f7bH
	DD	059e83605H
	DD	0ee15b094H
	DD	0e9ffd909H
	DD	0dc440086H
	DD	0ef944459H
	DD	0ba83ccb3H
	DD	0e0c3cdfbH
	DD	0d1da4181H
	DD	03b092ab1H
	DD	0f997f1c1H
	DD	0a5e6cf7bH
	DD	01420ddbH
	DD	0e4e7ef5bH
	DD	025a1ff41H
	DD	0e180f806H
	DD	01fc41080H
	DD	0179bee7aH
	DD	0d37ac6a9H
	DD	0fe5830a4H
	DD	098de8b7fH
	DD	077e83f4eH
	DD	079929269H
	DD	024fa9f7bH
	DD	0e113c85bH
	DD	0acc40083H
	DD	0d7503525H
	DD	0f7ea615fH
	DD	062143154H
	DD	0d554b63H
	DD	05d681121H
	DD	0c866c359H
	DD	03d63cf73H
	DD	0cee234c0H
	DD	0d4d87e87H
	DD	05c672b21H
	DD	071f6181H
	DD	039f7627fH
	DD	0361e3084H
	DD	0e4eb573bH
	DD	0602f64a4H
	DD	0d63acd9cH
	DD	01bbc4635H
	DD	09e81032dH
	DD	02701f50cH
	DD	099847ab4H
	DD	0a0e3df79H
	DD	0ba6cf38cH
	DD	010843094H
	DD	02537a95eH
	DD	0f46f6ffeH
	DD	0a1ff3b1fH
	DD	0208cfb6aH
	DD	08f458c74H
	DD	0d9e0a227H
	DD	04ec73a34H
	DD	0fc884f69H
	DD	03e4de8dfH
	DD	0ef0e0088H
	DD	03559648dH
	DD	08a45388cH
	DD	01d804366H
	DD	0721d9bfdH
	DD	0a58684bbH
	DD	0e8256333H
	DD	0844e8212H
	DD	0128d8098H
	DD	0fed33fb4H
	DD	0ce280ae1H
	DD	027e19ba5H
	DD	0d5a6c252H
	DD	0e49754bdH
	DD	0c5d655ddH
	DD	0eb667064H
	DD	077840b4dH
	DD	0a1b6a801H
	DD	084db26a9H
	DD	0e0b56714H
	DD	021f043b7H
	DD	0e5d05860H
	DD	054f03084H
	DD	066ff472H
	DD	0a31aa153H
	DD	0dadc4755H
	DD	0b5625dbfH
	DD	068561be6H
	DD	083ca6b94H
	DD	02d6ed23bH
	DD	0eccf01dbH
	DD	0a6d3d0baH
	DD	0b6803d5cH
	DD	0af77a709H
	DD	033b4a34cH
	DD	0397bc8d6H
	DD	05ee22b95H
	DD	05f0e5304H
	DD	081ed6f61H
	DD	020e74364H
	DD	0b45e1378H
	DD	0de18639bH
	DD	0881ca122H
	DD	0b96726d1H
	DD	08049a7e8H
	DD	022b7da7bH
	DD	05e552d25H
	DD	05272d237H
	DD	079d2951cH
	DD	0c60d894cH
	DD	0488cb402H
	DD	01ba4fe5bH
	DD	0a4b09f6bH
	DD	01ca815cfH
	DD	0a20c3005H
	DD	08871df63H
	DD	0b9de2fcbH
	DD	0cc6c9e9H
	DD	0beeff53H
	DD	0e3214517H
	DD	0b4542835H
	DD	09f63293cH
	DD	0ee41e729H
	DD	06e1d2d7cH
	DD	050045286H
	DD	01e6685f3H
	DD	0f33401c6H
	DD	030a22c95H
	DD	031a70850H
	DD	060930f13H
	DD	073f98417H
	DD	0a1269859H
	DD	0ec645c44H
	DD	052c877a9H
	DD	0cdff33a6H
	DD	0a02b1741H
	DD	07cbad9a2H
	DD	02180036fH
	DD	050d99c08H
	DD	0cb3f4861H
	DD	0c26bd765H
	DD	064a3f6abH
	DD	080342676H
	DD	025a75e7bH
	DD	0e4e6d1fcH
	DD	020c710e6H
	DD	0cdf0b680H
	DD	017844d3bH
	DD	031eef84dH
	DD	07e0824e4H
	DD	02ccb49ebH
	DD	0846a3baeH
	DD	08ff77888H
	DD	0ee5d60f6H
	DD	07af75673H
	DD	02fdd5cdbH
	DD	0a11631c1H
	DD	030f66f43H
	DD	0b3faec54H
	DD	0157fd7faH
	DD	0ef8579ccH
	DD	0d152de58H
	DD	0db2ffd5eH
	DD	08f32ce19H
	DD	0306af97aH
	DD	02f03ef8H
	DD	099319ad5H
	DD	0c242fa0fH
	DD	0a7e3ebb0H
	DD	0c68e4906H
	DD	0b8da230cH
	DD	080823028H
	DD	0dcdef3c8H
	DD	0d35fb171H
	DD	088a1bc8H
	DD	0bec0c560H
	DD	061a3c9e8H
	DD	0bca8f54dH
	DD	0c72feffaH
	DD	022822e99H
	DD	082c570b4H
	DD	0d8d94e89H
	DD	08b1c34bcH
	DD	0301e16e6H
	DD	0273be979H
	DD	0b0ffeaa6H
	DD	061d9b8c6H
	DD	0b24869H
	DD	0b7ffce3fH
	DD	08dc283bH
	DD	043daf65aH
	DD	0f7e19798H
	DD	07619b72fH
	DD	08f1c9ba4H
	DD	0dc8637a0H
	DD	016a7d3b1H
	DD	09fc393b7H
	DD	0a7136eebH
	DD	0c6bcc63eH
	DD	01a513742H
	DD	0ef6828bcH
	DD	0520365d6H
	DD	02d6a77abH
	DD	03527ed4bH
	DD	0821fd216H
	DD	095c6e2eH
	DD	0db92f2fbH
	DD	05eea29cbH
	DD	0145892f5H
	DD	091584f7fH
	DD	05483697bH
	DD	02667a8ccH
	DD	085196048H
	DD	08c4baceaH
	DD	0833860d4H
	DD	0d23e0f9H
	DD	06c387e8aH
	DD	0ae6d249H
	DD	0b284600cH
	DD	0d835731dH
	DD	0dcb1c647H
	DD	0ac4c56eaH
	DD	03ebd81b3H
	DD	0230eabb0H
	DD	06438bc87H
	DD	0f0b5b1faH
	DD	08f5ea2b3H
	DD	0fc184642H
	DD	0a036b7aH
	DD	04fb089bdH
	DD	0649da589H
	DD	0a345415eH
	DD	05c038323H
	DD	03e5d3bb9H
	DD	043d79572H
	DD	07e6dd07cH
	DD	06dfdf1eH
	DD	06c6cc4efH
	DD	07160a539H
	DD	073bfbe70H
	DD	083877605H
	DD	04523ecf1H
	DD	08defc240H
	DD	025fa5d9fH
	DD	0eb903dbfH
	DD	0e810c907H
	DD	047607fffH
	DD	0369fe44bH
	DD	08c1fc644H
	DD	0aececa90H
	DD	0beb1f9bfH
	DD	0eefbcaeaH
	DD	0e8cf1950H
	DD	051df07aeH
	DD	0920e8806H
	DD	0f0ad0548H
	DD	0e13c8d83H
	DD	0927010d5H
	DD	011107d9fH
	DD	07647db9H
	DD	0b2e3e4d4H
	DD	03d4f285eH
	DD	0b9afa820H
	DD	0fade82e0H
	DD	0a067268bH
	DD	08272792eH
	DD	0553fb2c0H
	DD	0489ae22bH
	DD	0d4ef9794H
	DD	0125e3fbcH
	DD	021fffceeH
	DD	0825b1bfdH
	DD	09255c5edH
	DD	01257a240H
	DD	04e1a8302H
	DD	0bae07fffH
	DD	0528246e7H
	DD	08e57140eH
	DD	03373f7bfH
	DD	08c9f8188H
	DD	0a6fc4ee8H
	DD	0c982b5a5H
	DD	0a8c01db7H
	DD	0579fc264H
	DD	067094f31H
	DD	0f2bd3f5fH
	DD	040fff7c1H
	DD	01fb78dfcH
	DD	08e6bd2c1H
	DD	0437be59bH
	DD	099b03dbfH
	DD	0b5dbc64bH
	DD	0638dc0e6H
	DD	055819d99H
	DD	0a197c81cH
	DD	04a012d6eH
	DD	0c5884a28H
	DD	0ccc36f71H
	DD	0b843c213H
	DD	06c0743f1H
	DD	08309893cH
	DD	0feddd5fH
	DD	02f7fe850H
	DD	0d7c07f7eH
	DD	02507fbfH
	DD	05afb9a04H
	DD	0a747d2d0H
	DD	01651192eH
	DD	0af70bf3eH
	DD	058c31380H
	DD	05f98302eH
	DD	0727cc3c4H
	DD	0a0fb402H
	DD	0f7fef82H
	DD	08c96fdadH
	DD	05d2c2aaeH
	DD	08ee99a49H
	DD	050da88b8H
	DD	08427f4a0H
	DD	01eac5790H
	DD	0796fb449H
	DD	08252dc15H
	DD	0efbd7d9bH
	DD	0a672597dH
	DD	0ada840d8H
	DD	045f54504H
	DD	0fa5d7403H
	DD	0e83ec305H
	DD	04f91751aH
	DD	0925669c2H
	DD	023efe941H
	DD	0a903f12eH
	DD	060270df2H
	DD	0276e4b6H
	DD	094fd6574H
	DD	0927985b2H
	DD	08276dbcbH
	DD	02778176H
	DD	0f8af918dH
	DD	04e48f79eH
	DD	08f616ddfH
	DD	0e29d840eH
	DD	0842f7d83H
	DD	0340ce5c8H
	DD	096bbb682H
	DD	093b4b148H
	DD	0ef303cabH
	DD	0984faf28H
	DD	0779faf9bH
	DD	092dc560dH
	DD	0224d1e20H
	DD	08437aa88H
	DD	07d29dc96H
	DD	02756d3dcH
	DD	08b907ceeH
	DD	0b51fd240H
	DD	0e7c07ce3H
	DD	0e566b4a1H
	DD	0c3e9615eH
	DD	03cf8209dH
	DD	06094d1e3H
	DD	0cd9ca341H
	DD	05c76460eH
	DD	0ea983bH
	DD	0d4d67881H
	DD	0fd47572cH
	DD	0f76cedd9H
	DD	0bda8229cH
	DD	0127dadaaH
	DD	0438a074eH
	DD	01f97c090H
	DD	081bdb8aH
	DD	093a07ebeH
	DD	0b938ca15H
	DD	097b03cffH
	DD	03dc2c0f8H
	DD	08d1ab2ecH
	DD	064380e51H
	DD	068cc7bfbH
	DD	0d90f2788H
	DD	012490181H
	DD	05de5ffd4H
	DD	0dd7ef86aH
	DD	076a2e214H
	DD	0b9a40368H
	DD	0925d958fH
	DD	04b39fffaH
	DD	0ba39aee9H
	DD	0a4ffd30bH
	DD	0faf7933bH
	DD	06d498623H
	DD	0193cbcfaH
	DD	027627545H
	DD	0825cf47aH
	DD	061bd8ba0H
	DD	0d11e42d1H
	DD	0cead04f4H
	DD	0127ea392H
	DD	010428db7H
	DD	08272a972H
	DD	09270c4a8H
	DD	0127de50bH
	DD	0285ba1c8H
	DD	03c62f44fH
	DD	035c0eaa5H
	DD	0e805d231H
	DD	0428929fbH
	DD	0b4fcdf82H
	DD	04fb66a53H
	DD	0e7dc15bH
	DD	01f081fabH
	DD	0108618aeH
	DD	0fcfd086dH
	DD	0f9ff2889H
	DD	0694bcc11H
	DD	0236a5caeH
	DD	012deca4dH
	DD	02c3f8cc5H
	DD	0d2d02dfeH
	DD	0f8ef5896H
	DD	0e4cf52daH
	DD	095155b67H
	DD	0494a488cH
	DD	0b9b6a80cH
	DD	05c8f82bcH
	DD	089d36b45H
	DD	03a609437H
	DD	0ec00c9a9H
	DD	044715253H
	DD	0a874b49H
	DD	0d773bc40H
	DD	07c34671cH
	DD	02717ef6H
	DD	04feb5536H
	DD	0a2d02fffH
	DD	0d2bf60c4H
	DD	0d43f03c0H
	DD	050b4ef6dH
	DD	07478cd1H
	DD	06e1888H
	DD	0a2e53f55H
	DD	0b9e6d4bcH
	DD	0a2048016H
	DD	097573833H
	DD	0d7207d67H
	DD	0de0f8f3dH
	DD	072f87b33H
	DD	0abcc4f33H
	DD	07688c55dH
	DD	07b00a6b0H
	DD	0947b0001H
	DD	0570075d2H
	DD	0f9bb88f8H
	DD	08942019eH
	DD	04264a5ffH
	DD	0856302e0H
	DD	072dbd92bH
	DD	0ee971b69H
	DD	06ea22fdeH
	DD	05f08ae2bH
	DD	0af7a616dH
	DD	0e5c98767H
	DD	0cf1febd2H
	DD	061efc8c2H
	DD	0f1ac2571H
	DD	0cc8239c2H
	DD	067214cb8H
	DD	0b1e583d1H
	DD	0b7dc3e62H
	DD	07f10bdceH
	DD	0f90a5c38H
	DD	0ff0443dH
	DD	0606e6dc6H
	DD	060543a49H
	DD	05727c148H
	DD	02be98a1dH
	DD	08ab41738H
	DD	020e1be24H
	DD	0af96da0fH
	DD	068458425H
	DD	099833be5H
	DD	0600d457dH
	DD	0282f9350H
	DD	08334b362H
	DD	0d91d1120H
	DD	02b6d8da0H
	DD	0642b1e31H
	DD	09c305a00H
	DD	052bce688H
	DD	01b03588aH
	DD	0f7baefd5H
	DD	04142ed9cH
	DD	0a4315c11H
	DD	083323ec5H
	DD	0dfef4636H
	DD	0a133c501H
	DD	0e9d3531cH
	DD	0ee353783H
	DD	09db30420H
	DD	01fb6e9deH
	DD	0a7be7befH
	DD	0d273a298H
	DD	04a4f7bdbH
	DD	064ad8c57H
	DD	085510443H
	DD	0fa020ed1H
	DD	07e287affH
	DD	0e60fb663H
	DD	095f35a1H
	DD	079ebf120H
	DD	0fd059d43H
	DD	06497b7b1H
	DD	0f3641f63H
	DD	0241e4adfH
	DD	028147f5fH
	DD	04fa2b8cdH
	DD	0c9430040H
	DD	0cc32220H
	DD	0fdd30b30H
	DD	0c0a5374fH
	DD	01d2d00d9H
	DD	024147b15H
	DD	0ee4d111aH
	DD	0fca5167H
	DD	071ff904cH
	DD	02d195ffeH
	DD	01a05645fH
	DD	0c13fefeH
	DD	081b08caH
	DD	05170121H
	DD	080530100H
	DD	0e83e5efeH
	DD	0ac9af4f8H
	DD	07fe72701H
	DD	0d2b8ee5fH
	DD	06df4261H
	DD	0bb9e9b8aH
	DD	07293ea25H
	DD	0ce84ffdfH
	DD	0f5718801H
	DD	03dd64b04H
	DD	0a26f263bH
	DD	07ed48400H
	DD	0547eebe6H
	DD	0446d4ca0H
	DD	06cf3d6f5H
	DD	02649abdfH
	DD	0aea0c7f5H
	DD	036338cc1H
	DD	0503f7e93H
	DD	0d3772061H
	DD	011b638e1H
	DD	072500e03H
	DD	0f80eb2bbH
	DD	0abe0502eH
	DD	0ec8d77deH
	DD	057971e81H
	DD	0e14f6746H
	DD	0c9335400H
	DD	06920318fH
	DD	081dbb99H
	DD	0ffc304a5H
	DD	04d351805H
	DD	07f3d5ce3H
	DD	0a6c866c6H
	DD	05d5bcca9H
	DD	0daec6feaH
	DD	09f926f91H
	DD	09f46222fH
	DD	03991467dH
	DD	0a5bf6d8eH
	DD	01143c44fH
	DD	043958302H
	DD	0d0214eebH
	DD	022083b8H
	DD	03fb6180cH
	DD	018f8931eH
	DD	0281658e6H
	DD	026486e3eH
	DD	08bd78a70H
	DD	07477e4c1H
	DD	0b506e07cH
	DD	0f32d0a25H
	DD	079098b02H
	DD	0e4eabb81H
	DD	028123b23H
	DD	069dead38H
	DD	01574ca16H
	DD	0df871b62H
	DD	0211c40b7H
	DD	0a51a9ef9H
	DD	014377bH
	DD	041e8ac8H
	DD	09114003H
	DD	0bd59e4d2H
	DD	0e3d156d5H
	DD	04fe876d5H
	DD	02f91a340H
	DD	0557be8deH
	DD	0eae4a7H
	DD	0ce5c2ecH
	DD	04db4bba6H
	DD	0e756bdffH
	DD	0dd3369acH
	DD	0ec17b035H
	DD	06572327H
	DD	099afc8b0H
	DD	056c8c391H
	DD	06b65811cH
	DD	05e146119H
	DD	06e85cb75H
	DD	0be07c002H
	DD	0c2325577H
	DD	0893ff4ecH
	DD	05bbfc92dH
	DD	0d0ec3b25H
	DD	0b7801ab7H
	DD	08d6d3b24H
	DD	020c763efH
	DD	0c366a5fcH
	DD	09c382880H
	DD	0ace3205H
	DD	0aac9548aH
	DD	0eca1d7c7H
	DD	041afa32H
	DD	01d16625aH
	DD	06701902cH
	DD	09b757a54H
	DD	031d477f7H
	DD	09126b031H
	DD	036cc6fdbH
	DD	0c70b8b46H
	DD	0d9e66a48H
	DD	056e55a79H
	DD	026a4cebH
	DD	052437effH
	DD	02f8f76b4H
	DD	0df980a5H
	DD	08674cde3H
	DD	0edda04ebH
	DD	017a9be04H
	DD	02c18f4dfH
	DD	0b7747f9dH
	DD	0ab2af7b4H
	DD	0efc34d20H
	DD	02e096b7cH
	DD	01741a254H
	DD	0e5b6a035H
	DD	0213d42f6H
	DD	02c1c7c26H
	DD	061c2f50fH
	DD	06552daf9H
	DD	0d2c231f8H
	DD	025130f69H
	DD	0d8167fa2H
	DD	0418f2c8H
	DD	01a96a6H
	DD	0d1526abH
	DD	063315c21H
	DD	05e0a72ecH
	DD	049bafefdH
	DD	0187908d9H
	DD	08d0dbd86H
	DD	0311170a7H
	DD	03e9b640cH
	DD	0cc3e10d7H
	DD	0d5cad3b6H
	DD	0caec388H
	DD	0f73001e1H
	DD	06c728affH
	DD	071eae2a1H
	DD	01f9af36eH
	DD	0cfcbd12fH
	DD	0c1de8417H
	DD	0ac07be6bH
	DD	0cb44a1d8H
	DD	08b9b0f56H
	DD	013988c3H
	DD	0b1c52fcaH
	DD	0b4be31cdH
	DD	0d8782806H
	DD	012a3a4e2H
	DD	06f7de532H
	DD	058fd7eb6H
	DD	0d01ee900H
	DD	024adffc2H
	DD	0f4990fc5H
	DD	09711aac5H
	DD	01d7b95H
	DD	082e5e7d2H
	DD	0109873f6H
	DD	0613096H
	DD	0c32d9521H
	DD	0ada121ffH
	DD	029908415H
	DD	07fbb977fH
	DD	0af9eb3dbH
	DD	029c9ed2aH
	DD	05ce2a465H
	DD	0a730f32cH
	DD	0d0aa3fe8H
	DD	08a5cc091H
	DD	0d49e2ce7H
	DD	0ce454a9H
	DD	0d60acd86H
	DD	015f1919H
	DD	077079103H
	DD	0dea03af6H
	DD	078a8565eH
	DD	0dee356dfH
	DD	021f05cbeH
	DD	08b75e387H
	DD	0b3c50651H
	DD	0b8a5c3efH
	DD	0d8eeb6d2H
	DD	0e523be77H
	DD	0c2154529H
	DD	02f69efdfH
	DD	0afe67afbH
	DD	0f470c4b2H
	DD	0f3e0eb5bH
	DD	0d6cc9876H
	DD	039e4460cH
	DD	01fda8538H
	DD	01987832fH
	DD	0ca007367H
	DD	0a99144f8H
	DD	0296b299eH
	DD	0492fc295H
	DD	09266beabH
	DD	0b5676e69H
	DD	09bd3dddaH
	DD	0df7e052fH
	DD	0db25701cH
	DD	01b5e51eeH
	DD	0f65324e6H
	DD	06afce36cH
	DD	0316cc04H
	DD	08644213eH
	DD	0b7dc59d0H
	DD	07965291fH
	DD	0ccd6fd43H
	DD	041823979H
	DD	0932bcdf6H
	DD	0b657c34dH
	DD	04edfd282H
	DD	07ae5290cH
	DD	03cb9536bH
	DD	0851e20feH
	DD	09833557eH
	DD	013ecf0b0H
	DD	0d3ffb372H
	DD	03f85c5c1H
	DD	0aef7ed2H
	DD	07ec90c04H
	DD	02c6e74b9H
	DD	09b0e66dfH
	DD	0a6337911H
	DD	0b86a7fffH
	DD	01dd358f5H
	DD	044dd9d44H
	DD	01731167fH
	DD	08fbf1faH
	DD	0e7f511ccH
	DD	0d2051b00H
	DD	0735aba00H
	DD	02ab722d8H
	DD	0386381cbH
	DD	0acf6243aH
	DD	069befd7aH
	DD	0e6a2e77fH
	DD	0f0c720cdH
	DD	0c4494816H
	DD	0ccf5c180H
	DD	038851640H
	DD	015b0a848H
	DD	0e68b18cbH
	DD	04caadeffH
	DD	05f480a01H
	DD	0412b2aaH
	DD	0259814fcH
	DD	041d0efe2H
	DD	04e40b48dH
	DD	0248eb6fbH
	DD	08dba1cfeH
	DD	041a99b02H
	DD	01a550a04H
	DD	0ba8f65cbH
	DD	07251f4e7H
	DD	095a51725H
	DD	0c106ecd7H
	DD	097a5980aH
	DD	0c539b9aaH
	DD	04d79fe6aH
	DD	0f2f3f763H
	DD	068af8040H
	DD	0ed0c9e56H
	DD	011b4958bH
	DD	0e1eb5a88H
	DD	08709e6b0H
	DD	0d7e07156H
	DD	04e29fea7H
	DD	06366e52dH
	DD	02d1c000H
	DD	0c4ac8e05H
	DD	09377f571H
	DD	0c05372aH
	DD	0578535f2H
	DD	02261be02H
	DD	0d642a0c9H
	DD	0df13a280H
	DD	074b55bd2H
	DD	0682199c0H
	DD	0d421e5ecH
	DD	053fb3ce8H
	DD	0c8adedb3H
	DD	028a87fc9H
	DD	03d959981H
	DD	05c1ff900H
	DD	0fe38d399H
	DD	0c4eff0bH
	DD	062407eaH
	DD	0aa2f4fb1H
	DD	04fb96976H
	DD	090c79505H
	DD	0b0a8a774H
	DD	0ef55a1ffH
	DD	0e59ca2c2H
	DD	0a6b62d27H
	DD	0e66a4263H
	DD	0df65001fH
	DD	0ec50966H
	DD	0dfdd55bcH
	DD	029de0655H
	DD	0911e739aH
	DD	017af8975H
	DD	032c7911cH
	DD	089f89468H
	DD	0d01e980H
	DD	0524755f4H
	DD	03b63cc9H
	DD	0cc844b2H
	DD	0bcf3f0aaH
	DD	087ac36e9H
	DD	0e53a7426H
	DD	01b3d82bH
	DD	01a9e7449H
	DD	064ee2d7eH
	DD	0cddbb1daH
	DD	01c94910H
	DD	0b868bf80H
	DD	0d26f3fdH
	DD	09342ede7H
	DD	04a5c284H
	DD	0636737b6H
	DD	050f5b616H
	DD	0f24766e3H
	DD	08eca36c1H
	DD	0136e05dbH
	DD	0fef18391H
	DD	0fb887a37H
	DD	0d6e7f7d4H
	DD	0c7fb7dc9H
	DD	03063fcdfH
	DD	0b6f589deH
	DD	0ec2941daH
	DD	026e46695H
	DD	0b7566419H
	DD	0f654efc5H
	DD	0d08d58b7H
	DD	048925401H
	DD	0c1bacb7fH
	DD	0e5ff550fH
	DD	0b6083049H
	DD	05bb5d0e8H
	DD	087d72e5aH
	DD	0ab6a6ee1H
	DD	0223a66ceH
	DD	0c62bf3cdH
	DD	09e0885f9H
	DD	068cb3e47H
	DD	086c010fH
	DD	0a21de820H
	DD	0d18b69deH
	DD	0f3f65777H
	DD	0fa02c3f6H
	DD	0407edac3H
	DD	0cbb3d550H
	DD	01793084dH
	DD	0b0d70ebaH
	DD	0ab378d5H
	DD	0d951fb0cH
	DD	0ded7da56H
	DD	04124bbe4H
	DD	094ca0b56H
	DD	0f5755d1H
	DD	0e0e1e56eH
	DD	06184b5beH
	DD	0580a249fH
	DD	094f74bc0H
	DD	0e327888eH
	DD	09f7b5561H
	DD	0c3dc0280H
	DD	05687715H
	DD	0646c6bd7H
	DD	044904db3H
	DD	066b4f0a3H
	DD	0c0f1648aH
	DD	0697ed5afH
	DD	049e92ff6H
	DD	0309e374fH
	DD	02cb6356aH
	DD	085808573H
	DD	04991f840H
	DD	076f0ae02H
	DD	083be84dH
	DD	028421c9aH
	DD	044489406H
	DD	0736e4cb8H
	DD	0c1092910H
	DD	08bc95fc6H
	DD	07d869cf4H
	DD	0134f616fH
	DD	02e77118dH
	DD	0b31b2be1H
	DD	0aa90b472H
	DD	03ca5d717H
	DD	07d161bbaH
	DD	09cad9010H
	DD	0af462ba2H
	DD	09fe459d2H
	DD	045d34559H
	DD	0d9f2da13H
	DD	0dbc65487H
	DD	0f3e4f94eH
	DD	0176d486fH
	DD	097c13eaH
	DD	0631da5c7H
	DD	0445f7382H
	DD	0175683f4H
	DD	0cdc66a97H
	DD	070be0288H
	DD	0b3cdcf72H
	DD	06e5dd2f3H
	DD	020936079H
	DD	0459b80a5H
	DD	0be60e2dbH
	DD	0a9c23101H
	DD	0eba5315cH
	DD	0224e42f2H
	DD	01c5c1572H
	DD	0f6721b2cH
	DD	01ad2fff3H
	DD	08c25404eH
	DD	0324ed72fH
	DD	04067b7fdH
	DD	0523138eH
	DD	05ca3bc78H
	DD	0dc0fd66eH
	DD	075922283H
	DD	0784d6b17H
	DD	058ebb16eH
	DD	044094f85H
	DD	03f481d87H
	DD	0fcfeae7bH
	DD	077b5ff76H
	DD	08c2302bfH
	DD	0aaf47556H
	DD	05f46b02aH
	DD	02b092801H
	DD	03d38f5f7H
	DD	0ca81f36H
	DD	052af4a8aH
	DD	066d5e7c0H
	DD	0df3b0874H
	DD	095055110H
	DD	01b5ad7a8H
	DD	0f61ed5adH
	DD	06cf6e479H
	DD	020758184H
	DD	0d0cefa65H
	DD	088f7be58H
	DD	04a046826H
	DD	0ff6f8f3H
	DD	0a09c7f70H
	DD	05346aba0H
	DD	05ce96c28H
	DD	0e176eda3H
	DD	06bac307fH
	DD	0376829d2H
	DD	085360fa9H
	DD	017e3fe2aH
	DD	024b79767H
	DD	0f5a96b20H
	DD	0d6cd2595H
	DD	068ff1ebfH
	DD	07555442cH
	DD	0f19f06beH
	DD	0f9e0659aH
	DD	0eeb9491dH
	DD	034010718H
	DD	0bb30cab8H
	DD	0e822fe15H
	DD	088570983H
	DD	0750e6249H
	DD	0da627e55H
	DD	05e76ffa8H
	DD	0b1534546H
	DD	06d47de08H
	DD	0efe9e7d4H
	DD	0f6fa8f9dH
	DD	02cac6ce1H
	DD	04ca34867H
	DD	0e2337f7cH
	DD	095db08e7H
	DD	016843b4H
	DD	0eced5cbcH
	DD	0325553acH
	DD	0bf9f0960H
	DD	0dfa1e2edH
	DD	083f0579dH
	DD	063ed86b9H
	DD	01ab6a6b8H
	DD	0de5ebe39H
	DD	0f38ff732H
	DD	08989b138H
	DD	033f14961H
	DD	0c01937bdH
	DD	0f506c6daH
	DD	0e4625e7eH
	DD	0a308ea99H
	DD	04e23e33cH
	DD	079cbd7ccH
	DD	048a14367H
	DD	0a3149619H
	DD	0fec94bd5H
	DD	0a114174aH
	DD	0eaa01866H
	DD	0a084db2dH
	DD	09a8486fH
	DD	0a888614aH
	DD	02900af98H
	DD	01665991H
	DD	0e1992863H
	DD	0c8f30c60H
	DD	02e78ef3cH
	DD	0d0d51932H
	DD	0cf0fec14H
	DD	0f7ca07d2H
	DD	0d0a82072H
	DD	0fd41197eH
	DD	09305a6b0H
	DD	0e86be3daH
	DD	074bed3cdH
	DD	0372da53cH
	DD	04c7f4448H
	DD	0dab5d440H
	DD	06dba0ec3H
	DD	083919a7H
	DD	09fbaeed9H
	DD	049dbcfb0H
	DD	04e670c53H
	DD	05c3d9c01H
	DD	064bdb941H
	DD	02c0e636aH
	DD	0ba7dd9cdH
	DD	0ea6f7388H
	DD	0e70bc762H
	DD	035f29adbH
	DD	05c4cdd8dH
	DD	0f0d48d8cH
	DD	0b88153e2H
	DD	08a19866H
	DD	01ae2eac8H
	DD	0284caf89H
	DD	0aa928223H
	DD	09334be53H
	DD	03b3a21bfH
	DD	016434be3H
	DD	09aea3906H
	DD	0efe8c36eH
	DD	0f890cdd9H
	DD	080226daeH
	DD	0c340a4a3H
	DD	0df7e9c09H
	DD	0a694a807H
	DD	05b7c5eccH
	DD	0221db3a6H
	DD	09a69a02fH
	DD	068818a54H
	DD	0ceb2296fH
	DD	053c0843aH
	DD	0fe893655H
	DD	025bfe68aH
	DD	0b4628abcH
	DD	0cf222ebfH
	DD	025ac6f48H
	DD	0a9a99387H
	DD	053bddb65H
	DD	0e76ffbe7H
	DD	0e967fd78H
	DD	0ba93563H
	DD	08e342bc1H
	DD	0e8a11be9H
	DD	04980740dH
	DD	0c8087dfcH
	DD	08de4bf99H
	DD	0a11101a0H
	DD	07fd37975H
	DD	0da5a26c0H
	DD	0e81f994fH
	DD	09528cd89H
	DD	0fd339fedH
	DD	0b87834bfH
	DD	05f04456dH
	DD	022258698H
	DD	0c9c4c83bH
	DD	02dc156beH
	DD	04f628daaH
	DD	057f55ec5H
	DD	0e2220abeH
	DD	0d2916ebfH
	DD	04ec75b95H
	DD	024f2c3c0H
	DD	042d15d99H
	DD	0cd0d7fa0H
	DD	07b6e27ffH
	DD	0a8dc8af0H
	DD	07345c106H
	DD	0f41e232fH
	DD	035162386H
	DD	0e6ea8926H
	DD	03333b094H
	DD	0157ec6f2H
	DD	0372b74afH
	DD	0692573e4H
	DD	0e9a9d848H
	DD	0f3160289H
	DD	03a62ef1dH
	DD	0a787e238H
	DD	0f3a5f676H
	DD	074364853H
	DD	020951063H
	DD	04576698dH
	DD	0b6fad407H
	DD	0592af950H
	DD	036f73523H
	DD	04cfb6e87H
	DD	07da4cec0H
	DD	06c152daaH
	DD	0cb0396a8H
	DD	0c50dfe5dH
	DD	0fcd707abH
	DD	0921c42fH
	DD	089dff0bbH
	DD	05fe2be78H
	DD	0448f4f33H
	DD	0754613c9H
	DD	02b05d08dH
	DD	048b9d585H
	DD	0dc049441H
	DD	0c8098f9bH
	DD	07dede786H
	DD	0c39a3373H
	DD	042410005H
	DD	06a091751H
	DD	0ef3c8a6H
	DD	0890072d6H
	DD	028207682H
	DD	0a9a9f7beH
	DD	0bf32679dH
	DD	0d45b5b75H
	DD	0b353fd00H
	DD	0cbb0e358H
	DD	0830f220aH
	DD	01f8fb214H
	DD	0d372cf08H
	DD	0cc3c4a13H
	DD	08cf63166H
	DD	061c87beH
	DD	088c98f88H
	DD	06062e397H
	DD	047cf8e7aH
	DD	0b6c85283H
	DD	03cc2acfbH
	DD	03fc06976H
	DD	04e8f0252H
	DD	064d8314dH
	DD	0da3870e3H
	DD	01e665459H
	DD	0c10908f0H
	DD	0513021a5H
	DD	06c5b68b7H
	DD	0822f8aa0H
	DD	03007cd3eH
	DD	074719eefH
	DD	0dc872681H
	DD	073340d4H
	DD	07e432fd9H
	DD	0c5ec241H
	DD	08809286cH
	DD	0f592d891H
	DD	08a930f6H
	DD	0957ef305H
	DD	0b7fbffbdH
	DD	0c266e96fH
	DD	06fe4ac98H
	DD	0b173ecc0H
	DD	0bc60b42aH
	DD	0953498daH
	DD	0fba1ae12H
	DD	02d4bd736H
	DD	0f25faabH
	DD	0a4f3fcebH
	DD	0e2969123H
	DD	0257f0c3dH
	DD	09348af49H
	DD	0361400bcH
	DD	0e8816f4aH
	DD	03814f200H
	DD	0a3f94043H
	DD	09c7a54c2H
	DD	0bc704f57H
	DD	0da41e7f9H
	DD	0c25ad33aH
	DD	054f4a084H
	DD	0b17f5505H
	DD	059357cbeH
	DD	0edbd15c8H
	DD	07f97c5abH
	DD	0ba5ac7b5H
	DD	0b6f6deafH
	DD	03a479c3aH
	DD	05302da25H
	DD	0653d7e6aH
	DD	054268d49H
	DD	051a477eaH
	DD	05017d55bH
	DD	0d7d25d88H
	DD	044136c76H
	DD	0404a8c8H
	DD	0b8e5a121H
	DD	0b81a928aH
	DD	060ed5869H
	DD	097c55b96H
	DD	0eaec991bH
	DD	029935913H
	DD	01fdb7f1H
	DD	088e8dfaH
	DD	09ab6f6f5H
	DD	03b4cbf9fH
	DD	04a5de3abH
	DD	0e6051d35H
	DD	0a0e1d855H
	DD	0d36b4cf1H
	DD	0f544edebH
	DD	0b0e93524H
	DD	0bebb8fbdH
	DD	0a2d762cfH
	DD	049c92f54H
	DD	038b5f331H
	DD	07128a454H
	DD	048392905H
	DD	0a65b1db8H
	DD	0851c97bdH
	DD	0d675cf2fH
	DD	085e04019H
	DD	0332bf567H
	DD	0662dbfffH
	DD	0cfc65693H
	DD	02a8d7f6fH
	DD	0ab9bc912H
	DD	0de6008a1H
	DD	02028da1fH
	DD	0227bce7H
	DD	04d642916H
	DD	018fac300H
	DD	050f18b82H
	DD	02cb2cb11H
	DD	0b232e75cH
	DD	04b3695f2H
	DD	0b28707deH
	DD	0a05fbcf6H
	DD	0cd4181e9H
	DD	0e150210cH
	DD	0e24ef1bdH
	DD	0b168c381H
	DD	0fde4e789H
	DD	05c79b0d8H
	DD	01e8bfd43H
	DD	04d495001H
	DD	038be4341H
	DD	0913cee1dH
	DD	092a79c3fH
	DD	089766beH
	DD	0baeeadf4H
	DD	01286becfH
	DD	0b6eacb19H
	DD	02660c200H
	DD	07565bde4H
	DD	064241f7aH
	DD	08248dca9H
	DD	0c3b3ad66H
	DD	028136086H
	DD	0bd8dfa8H
	DD	0356d1cf2H
	DD	0107789beH
	DD	0b3b2e9ceH
	DD	0502aa8fH
	DD	0bc0351eH
	DD	0166bf52aH
	DD	0eb12ff82H
	DD	0e3486911H
	DD	0d34d7516H
	DD	04e7b3affH
	DD	05f43671bH
	DD	09cf6e037H
	DD	04981ac83H
	DD	0334266ceH
	DD	08c9341b7H
	DD	0d0d854c0H
	DD	0cb3a6c88H
	DD	047bc2829H
	DD	04725ba37H
	DD	0a66ad22bH
	DD	07ad61f1eH
	DD	0c5cbafaH
	DD	04437f107H
	DD	0b6e79962H
	DD	042d2d816H
	DD	0a961288H
	DD	0e1a5c06eH
	DD	013749e67H
	DD	072fc081aH
	DD	0b1d139f7H
	DD	0f9583745H
	DD	0cf19df58H
	DD	0bec3f756H
	DD	0c06eba30H
	DD	07211b24H
	DD	045c28829H
	DD	0c95e317fH
	DD	0bc8ec511H
	DD	038bc46e9H
	DD	0c6e6fa14H
	DD	0bae8584aH
	DD	0ad4ebc46H
	DD	0468f508bH
	DD	07829435fH
	DD	0f124183bH
	DD	0821dba9fH
	DD	0aff60ff4H
	DD	0ea2c4e6dH
	DD	016e39264H
	DD	092544a8bH
	DD	09b4fc3H
	DD	0aba68cedH
	DD	09ac96f78H
	DD	06a5b79aH
	DD	0b2856e6eH
	DD	01aec3ca9H
	DD	0be838688H
	DD	0e0804e9H
	DD	055f1be56H
	DD	0e7e5363bH
	DD	0b3a1f25dH
	DD	0f7debb85H
	DD	061fe033cH
	DD	016746233H
	DD	03c034c28H
	DD	0da6d0c74H
	DD	079aac56cH
	DD	03ce4e1adH
	DD	051f0c802H
	DD	098f8f35aH
	DD	01626a49fH
	DD	0eed82b29H
	DD	01d382fe3H
	DD	0c4fb99aH
	DD	0bb325778H
	DD	03ec6d97bH
	DD	06e77a6a9H
	DD	0cb658b5cH
	DD	0d45230c7H
	DD	02bd1408bH
	DD	060c03eb7H
	DD	0b9068d78H
	DD	0a33754f4H
	DD	0f430c87dH
	DD	0c8a71302H
	DD	0b96d8c32H
	DD	0ebd4e7beH
	DD	0be8b9d2dH
	DD	07979fb06H
	DD	0e7225308H
	DD	08b75cf77H
	DD	011ef8da4H
	DD	0e083c858H
	DD	08d6b786fH
	DD	05a6317a6H
	DD	0fa5cf7a0H
	DD	05dda0033H
	DD	0f28ebfb0H
	DD	0f5b9c310H
	DD	0a0eac280H
	DD	08b9767aH
	DD	0a3d9d2b0H
	DD	079d34217H
	DD	021a718dH
	DD	09ac6336aH
	DD	02711fd60H
	DD	0438050e3H
	DD	069908a8H
	DD	03d7fedc4H
	DD	0826d2befH
	DD	04eeb8476H
	DD	0488dcf25H
	DD	036c9d566H
	DD	028e74e41H
	DD	0c2610acaH
	DD	03d49a9cfH
	DD	0bae3b9dfH
	DD	0b65f8de6H
	DD	092aeaf64H
	DD	03ac7d5e6H
	DD	09ea80509H
	DD	0f22b017dH
	DD	0a4173f70H
	DD	0dd1e16c3H
	DD	015e0d7f9H
	DD	050b1b887H
	DD	02b9f4fd5H
	DD	0625aba82H
	DD	06a017962H
	DD	02ec01b9cH
	DD	015488aa9H
	DD	0d716e740H
	DD	040055a2cH
	DD	093d29a22H
	DD	0e32dbf9aH
	DD	058745b9H
	DD	03453dc1eH
	DD	0d699296eH
	DD	0496cff6fH
	DD	01c9f4986H
	DD	0dfe2ed07H
	DD	0b87242d1H
	DD	019de7eaeH
	DD	053e561aH
	DD	015ad6f8cH
	DD	066626c1cH
	DD	07154c24cH
	DD	0ea082b2aH
	DD	093eb2939H
	DD	017dcb0f0H
	DD	058d4f2aeH
	DD	09ea294fbH
	DD	052cf564cH
	DD	09883fe66H
	DD	02ec40581H
	DD	0763953c3H
	DD	01d6692eH
	DD	0d3a0c108H
	DD	0a1e7160eH
	DD	0e4f2dfa6H
	DD	0693ed285H
	DD	074904698H
	DD	04c2b0eddH
	DD	04f757656H
	DD	05d393378H
	DD	0a132234fH
	DD	03d321c5dH
	DD	0c3f5e194H
	DD	04b269301H
	DD	0c79f022fH
	DD	03c997e7eH
	DD	05e4f9504H
	DD	03ffafbbdH
	DD	076f7ad0eH
	DD	0296693f4H
	DD	03d1fce6fH
	DD	0c61e45beH
	DD	0d3b5ab34H
	DD	0f72bf9b7H
	DD	01b0434c0H
	DD	04e72b567H
	DD	05592a33dH
	DD	0b5229301H
	DD	0cfd2a87fH
	DD	060aeb767H
	DD	01814386bH
	DD	030bcc33dH
	DD	038a0c07dH
	DD	0fd1606f2H
	DD	0c363519bH
	DD	0589dd390H
	DD	05479f8e6H
	DD	01cb8d647H
	DD	097fd61a9H
	DD	0ea7759f4H
	DD	02d57539dH
	DD	0569a58cfH
	DD	0e84e63adH
	DD	0462e1b78H
	DD	06580f87eH
	DD	0f3817914H
	DD	091da55f4H
	DD	040a230f3H
	DD	0d1988f35H
	DD	0b6e318d2H
	DD	03ffa50bcH
	DD	03d40f021H
	DD	0c3c0bdaeH
	DD	04958c24cH
	DD	0518f36b2H
	DD	084b1d370H
	DD	0fedce83H
	DD	0878ddadaH
	DD	0f2a279c7H
	DD	094e01be8H
	DD	090716f4bH
	DD	0954b8aa3H
	DD	0e216300dH
	DD	0bbddfffcH
	DD	0a7ebdabdH
	DD	035648095H
	DD	07789f8b7H
	DD	0e6c1121bH
	DD	0e241600H
	DD	052ce8b5H
	DD	011a9cfb0H
	DD	0e5952f11H
	DD	0ece7990aH
	DD	09386d174H
	DD	02a42931cH
	DD	076e38111H
	DD	0b12def3aH
	DD	037ddddfcH
	DD	0de9adeb1H
	DD	0a0cc32cH
	DD	0be197029H
	DD	084a00940H
	DD	0bb243a0fH
	DD	0b4d137cfH
	DD	0b44e79f0H
	DD	049eedfdH
	DD	0b15a15dH
	DD	0480d3168H
	DD	08bbbde5aH
	DD	0669ded42H
	DD	0c7ece831H
	DD	03f8f95e7H
	DD	072df191bH
	DD	07580330dH
	DD	094074251H
	DD	05c7dcdfaH
	DD	0abbe6d63H
	DD	0aa402164H
	DD	0b301d40aH
	DD	02e7d1caH
	DD	053571daeH
	DD	07a3182a2H
	DD	012a8ddecH
	DD	0fdaa335dH
	DD	0176f43e8H
	DD	071fb46d4H
	DD	038129022H
	DD	0ce949ad4H
	DD	0b84769adH
	DD	0965bd862H
	DD	082f3d055H
	DD	066fb9767H
	DD	015b80b4eH
	DD	01d5b47a0H
	DD	04cfde06fH
	DD	0c28ec4b8H
	DD	057e8726eH
	DD	0647a78fcH
	DD	099865d44H
	DD	0608bd593H
	DD	06c200e03H
	DD	039dc5ff6H
	DD	05d0b00a3H
	DD	0ae63aff2H
	DD	07e8bd632H
	DD	070108c0cH
	DD	0bbd35049H
	DD	02998df04H
	DD	0980cf42aH
	DD	09b6df491H
	DD	09e7edd53H
	DD	06918548H
	DD	058cb7e07H
	DD	03b74ef2eH
	DD	0522fffb1H
	DD	0d24708ccH
	DD	01c7e27cdH
	DD	0a4eb215bH
	DD	03cf1d2e2H
	DD	019b47a38H
	DD	0424f7618H
	DD	035856039H
	DD	09d17dee7H
	DD	027eb35e6H
	DD	0c9aff67bH
	DD	036baf5b8H
	DD	09c467cdH
	DD	0c18910b1H
	DD	0e11dbf7bH
	DD	06cd1af8H
	DD	07170c608H
	DD	02d5e3354H
	DD	0d4de495aH
	DD	064c6d006H
	DD	0bcc0c62cH
	DD	03dd00db3H
	DD	0708f8f34H
	DD	077d51b42H
	DD	0264f620fH
	DD	024b8d2bfH
	DD	015c1b79eH
	DD	046a52564H
	DD	0f8d7e54eH
	DD	03e378160H
	DD	07895cda5H
	DD	0859c15a5H
	DD	0e6459788H
	DD	0c37bc75fH
	DD	0db07ba0cH
	DD	0676a3abH
	DD	07f229b1eH
	DD	031842e7bH
	DD	024259fd7H
	DD	0f8bef472H
	DD	0835ffcb8H
	DD	06df4c1f2H
	DD	096f5b195H
	DD	0fd0af0fcH
	DD	0b0fe134cH
	DD	0e2506d3dH
	DD	04f9b12eaH
	DD	0f215f225H
	DD	0a223736fH
	DD	09fb4c428H
	DD	025d04979H
	DD	034c713f8H
	DD	0c4618187H
	DD	0ea7a6e98H
	DD	07cd16efcH
	DD	01436876cH
	DD	0f1544107H
	DD	0bedeee14H
	DD	056e9af27H
	DD	0a04aa441H
	DD	03cf7c899H
	DD	092ecbae6H
	DD	0dd67016dH
	DD	0151682ebH
	DD	0a842eedfH
	DD	0fdba60b4H
	DD	0f1907b75H
	DD	020e3030fH
	DD	024d8c29eH
	DD	0e139673bH
	DD	0efa63fb8H
	DD	071873054H
	DD	0b6f2cf3bH
	DD	09f326442H
	DD	0cb15a4ccH
	DD	0b01a4504H
	DD	0f1e47d8dH
	DD	0844a1be5H
	DD	0bae7dfdcH
	DD	042cbda70H
	DD	0cd7dae0aH
	DD	057e85b7aH
	DD	0d53f5af6H
	DD	020cf4d8cH
	DD	0cea4d428H
	DD	079d130a4H
	DD	03486ebfbH
	DD	033d3cddcH
	DD	077853b53H
	DD	037effcb5H
	DD	0c5068778H
	DD	0e580b3e6H
	DD	04e68b8f4H
	DD	0c5c8b37eH
	DD	0d809ea2H
	DD	0398feb7cH
	DD	0132a4f94H
	DD	043b7950eH
	DD	02fee7d1cH
	DD	0223613bdH
	DD	0dd06caa2H
	DD	037df932bH
	DD	0c4248289H
	DD	0acf3ebc3H
	DD	05715f6b7H
	DD	0ef3478ddH
	DD	0f267616fH
	DD	0c148cbe4H
	DD	09052815eH
	DD	05e410fabH
	DD	0b48a2465H
	DD	02eda7fa4H
	DD	0e87b40e4H
	DD	0e98ea084H
	DD	05889e9e1H
	DD	0efd390fcH
	DD	0dd07d35bH
	DD	0db485694H
	DD	038d7e5b2H
	DD	057720101H
	DD	0730edebcH
	DD	05b643113H
	DD	094917e4fH
	DD	0503c2fbaH
	DD	0646f1282H
	DD	07523d24aH
	DD	0e0779695H
	DD	0f9c17a8fH
	DD	07a5b2121H
	DD	0d187b896H
	DD	029263a4dH
	DD	0ba510cdfH
	DD	081f47c9fH
	DD	0ad1163edH
	DD	0ea7b5965H
	DD	01a00726eH
	DD	011403092H
	DD	0da6d77H
	DD	04a0cdd61H
	DD	0ad1f4603H
	DD	0605bdfb0H
	DD	09eedc364H
	DD	022ebe6a8H
	DD	0cee7d28aH
	DD	0a0e736a0H
	DD	05564a6b9H
	DD	010853209H
	DD	0c7eb8f37H
	DD	02de705caH
	DD	08951570fH
	DD	0df09822bH
	DD	0bd691a6cH
	DD	0aa12e4f2H
	DD	087451c0fH
	DD	0e0f6a27aH
	DD	03ada4819H
	DD	04cf1764fH
	DD	0d771c2bH
	DD	067cdb156H
	DD	0350d8384H
	DD	05938fa0fH
	DD	042399ef3H
	DD	036997b07H
	DD	0e84093dH
	DD	04aa93e61H
	DD	08360d87bH
	DD	01fa98b0cH
	DD	01149382cH
	DD	0e97625a5H
	DD	0614d1b7H
	DD	0e25244bH
	DD	0c768347H
	DD	0589e8d82H
	DD	0d2059d1H
	DD	0a466bb1eH
	DD	0f8da0a82H
	DD	04f19130H
	DD	0ba6e4ec0H
	DD	099265164H
	DD	01ee7230dH
	DD	050b2ad80H
	DD	0eaee6801H
	DD	08db2a283H
	DD	0ea8bf59eH
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed\src\crypto\cast.c
;	COMDAT rotlVariable
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotlVariable PROC					; COMDAT

; 25   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 26   : 	return (word32)((x<<y) | (x>>(sizeof(word32)*8-y)));

  00008	8b 44 24 10	 mov	 eax, DWORD PTR y$[rsp]
  0000c	0f b6 c8	 movzx	 ecx, al
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR x$[rsp]
  00013	d3 e2		 shl	 edx, cl
  00015	8b 4c 24 10	 mov	 ecx, DWORD PTR y$[rsp]
  00019	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0001e	48 2b c1	 sub	 rax, rcx
  00021	0f b6 c8	 movzx	 ecx, al
  00024	8b 44 24 08	 mov	 eax, DWORD PTR x$[rsp]
  00028	d3 e8		 shr	 eax, cl
  0002a	8b c8		 mov	 ecx, eax
  0002c	8b c2		 mov	 eax, edx
  0002e	0b c1		 or	 eax, ecx

; 27   : }

  00030	c3		 ret	 0
rotlVariable ENDP
PUBLIC	Cast5SetKey
;	COMDAT pdata
pdata	SEGMENT
$pdata$Cast5SetKey DD imagerel $LN9
	DD	imagerel $LN9+4433
	DD	imagerel $unwind$Cast5SetKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Cast5SetKey DD 011201H
	DD	0a212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Cast5SetKey
_TEXT	SEGMENT
Z$ = 32
i$ = 48
K$ = 56
X$ = 64
key$ = 96
keylength$ = 104
userKey$ = 112
Cast5SetKey PROC					; COMDAT

; 651  : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 652  : 	unsigned int i;
; 653  : 	word32 *K = key->K;

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR key$[rsp]
  00017	48 89 44 24 38	 mov	 QWORD PTR K$[rsp], rax

; 654  : 	word32 X[4], Z[4];
; 655  : 
; 656  : 	X[0] = BE32 (((word32 *)userKey)[0]);

  0001c	48 8b 44 24 70	 mov	 rax, QWORD PTR userKey$[rsp]
  00021	8b 08		 mov	 ecx, DWORD PTR [rax]
  00023	e8 00 00 00 00	 call	 MirrorBytes32
  00028	89 44 24 40	 mov	 DWORD PTR X$[rsp], eax

; 657  : 	X[1] = BE32 (((word32 *)userKey)[1]);

  0002c	48 8b 44 24 70	 mov	 rax, QWORD PTR userKey$[rsp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00034	e8 00 00 00 00	 call	 MirrorBytes32
  00039	89 44 24 44	 mov	 DWORD PTR X$[rsp+4], eax

; 658  : 	X[2] = BE32 (((word32 *)userKey)[2]);

  0003d	48 8b 44 24 70	 mov	 rax, QWORD PTR userKey$[rsp]
  00042	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00045	e8 00 00 00 00	 call	 MirrorBytes32
  0004a	89 44 24 48	 mov	 DWORD PTR X$[rsp+8], eax

; 659  : 	X[3] = BE32 (((word32 *)userKey)[3]);

  0004e	48 8b 44 24 70	 mov	 rax, QWORD PTR userKey$[rsp]
  00053	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00056	e8 00 00 00 00	 call	 MirrorBytes32
  0005b	89 44 24 4c	 mov	 DWORD PTR X$[rsp+12], eax

; 660  : 
; 661  : #define x(i) GETBYTE(X[i/4], 3-i%4)
; 662  : #define z(i) GETBYTE(Z[i/4], 3-i%4)
; 663  : 
; 664  : 	for (i=0; i<=16; i+=16)

  0005f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00067	eb 0b		 jmp	 SHORT $LN6@Cast5SetKe
$LN5@Cast5SetKe:
  00069	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0006d	83 c0 10	 add	 eax, 16
  00070	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN6@Cast5SetKe:
  00074	83 7c 24 30 10	 cmp	 DWORD PTR i$[rsp], 16
  00079	0f 87 94 10 00
	00		 ja	 $LN4@Cast5SetKe

; 665  : 	{
; 666  : 		// this part is copied directly from RFC 2144 (with some search and replace) by Wei Dai
; 667  : 		Z[0] = X[0] ^ S[4][x(0xD)] ^ S[5][x(0xF)] ^ S[6][x(0xC)] ^ S[7][x(0xE)] ^ S[6][x(0x8)];

  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00086	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  0008a	c1 e8 10	 shr	 eax, 16
  0008d	0f b6 c0	 movzx	 eax, al
  00090	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00097	44 8b 44 24 40	 mov	 r8d, DWORD PTR X$[rsp]
  0009c	44 33 c0	 xor	 r8d, eax
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  000a6	0f b6 44 24 4c	 movzx	 eax, BYTE PTR X$[rsp+12]
  000ab	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  000ba	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  000be	c1 e8 18	 shr	 eax, 24
  000c1	0f b6 c0	 movzx	 eax, al
  000c4	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  000d3	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  000d7	c1 e8 08	 shr	 eax, 8
  000da	0f b6 c0	 movzx	 eax, al
  000dd	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  000ec	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  000f0	c1 e8 18	 shr	 eax, 24
  000f3	0f b6 c8	 movzx	 ecx, al
  000f6	41 8b c0	 mov	 eax, r8d
  000f9	33 84 8a 00 18
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+6144]
  00100	89 44 24 20	 mov	 DWORD PTR Z$[rsp], eax

; 668  : 		Z[1] = X[2] ^ S[4][z(0x0)] ^ S[5][z(0x2)] ^ S[6][z(0x1)] ^ S[7][z(0x3)] ^ S[7][x(0xA)];

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0010b	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0010f	c1 e8 18	 shr	 eax, 24
  00112	0f b6 c0	 movzx	 eax, al
  00115	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  0011c	44 8b 44 24 48	 mov	 r8d, DWORD PTR X$[rsp+8]
  00121	44 33 c0	 xor	 r8d, eax
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0012b	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0012f	c1 e8 08	 shr	 eax, 8
  00132	0f b6 c0	 movzx	 eax, al
  00135	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00144	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00148	c1 e8 10	 shr	 eax, 16
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0015d	0f b6 44 24 20	 movzx	 eax, BYTE PTR Z$[rsp]
  00162	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00171	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00175	c1 e8 08	 shr	 eax, 8
  00178	0f b6 c8	 movzx	 ecx, al
  0017b	41 8b c0	 mov	 eax, r8d
  0017e	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00185	89 44 24 24	 mov	 DWORD PTR Z$[rsp+4], eax

; 669  : 		Z[2] = X[3] ^ S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[4][x(0x9)];

  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00190	0f b6 44 24 24	 movzx	 eax, BYTE PTR Z$[rsp+4]
  00195	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  0019c	44 8b 44 24 4c	 mov	 r8d, DWORD PTR X$[rsp+12]
  001a1	44 33 c0	 xor	 r8d, eax
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  001ab	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  001af	c1 e8 08	 shr	 eax, 8
  001b2	0f b6 c0	 movzx	 eax, al
  001b5	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  001c4	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  001c8	c1 e8 10	 shr	 eax, 16
  001cb	0f b6 c0	 movzx	 eax, al
  001ce	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  001dd	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  001e1	c1 e8 18	 shr	 eax, 24
  001e4	0f b6 c0	 movzx	 eax, al
  001e7	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  001f6	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  001fa	c1 e8 10	 shr	 eax, 16
  001fd	0f b6 c8	 movzx	 ecx, al
  00200	41 8b c0	 mov	 eax, r8d
  00203	33 84 8a 00 10
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+4096]
  0020a	89 44 24 28	 mov	 DWORD PTR Z$[rsp+8], eax

; 670  : 		Z[3] = X[1] ^ S[4][z(0xA)] ^ S[5][z(0x9)] ^ S[6][z(0xB)] ^ S[7][z(0x8)] ^ S[5][x(0xB)];

  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00215	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00219	c1 e8 08	 shr	 eax, 8
  0021c	0f b6 c0	 movzx	 eax, al
  0021f	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00226	44 8b 44 24 44	 mov	 r8d, DWORD PTR X$[rsp+4]
  0022b	44 33 c0	 xor	 r8d, eax
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00235	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00239	c1 e8 10	 shr	 eax, 16
  0023c	0f b6 c0	 movzx	 eax, al
  0023f	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0024e	0f b6 44 24 28	 movzx	 eax, BYTE PTR Z$[rsp+8]
  00253	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00262	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00266	c1 e8 18	 shr	 eax, 24
  00269	0f b6 c8	 movzx	 ecx, al
  0026c	41 8b c0	 mov	 eax, r8d
  0026f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0027d	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR X$[rsp+8]
  00282	33 84 8a 00 14
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+5120]
  00289	89 44 24 2c	 mov	 DWORD PTR Z$[rsp+12], eax

; 671  : 		K[i+0] = S[4][z(0x8)] ^ S[5][z(0x9)] ^ S[6][z(0x7)] ^ S[7][z(0x6)] ^ S[4][z(0x2)];

  0028d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00294	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00298	c1 e8 18	 shr	 eax, 24
  0029b	0f b6 d0	 movzx	 edx, al
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  002a5	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  002a9	c1 e8 10	 shr	 eax, 16
  002ac	0f b6 c0	 movzx	 eax, al
  002af	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  002b6	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  002be	33 d0		 xor	 edx, eax
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  002c7	0f b6 44 24 24	 movzx	 eax, BYTE PTR Z$[rsp+4]
  002cc	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  002da	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  002de	c1 e8 08	 shr	 eax, 8
  002e1	0f b6 c0	 movzx	 eax, al
  002e4	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  002f2	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  002f6	c1 e8 08	 shr	 eax, 8
  002f9	0f b6 c0	 movzx	 eax, al
  002fc	33 94 81 00 10
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+4096]
  00303	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  00307	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  0030c	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 672  : 		K[i+1] = S[4][z(0xA)] ^ S[5][z(0xB)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[5][z(0x6)];

  0030f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00316	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  0031a	c1 e8 08	 shr	 eax, 8
  0031d	0f b6 d0	 movzx	 edx, al
  00320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00327	0f b6 44 24 28	 movzx	 eax, BYTE PTR Z$[rsp+8]
  0032c	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00333	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  0033b	33 d0		 xor	 edx, eax
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00344	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00348	c1 e8 10	 shr	 eax, 16
  0034b	0f b6 c0	 movzx	 eax, al
  0034e	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0035c	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00360	c1 e8 18	 shr	 eax, 24
  00363	0f b6 c0	 movzx	 eax, al
  00366	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  0036d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00374	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00378	c1 e8 08	 shr	 eax, 8
  0037b	0f b6 c0	 movzx	 eax, al
  0037e	33 94 81 00 14
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+5120]
  00385	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00389	83 c0 01	 add	 eax, 1
  0038c	8b c8		 mov	 ecx, eax
  0038e	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00393	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 673  : 		K[i+2] = S[4][z(0xC)] ^ S[5][z(0xD)] ^ S[6][z(0x3)] ^ S[7][z(0x2)] ^ S[6][z(0x9)];

  00396	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  0039d	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  003a1	c1 e8 18	 shr	 eax, 24
  003a4	0f b6 d0	 movzx	 edx, al
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  003ae	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  003b2	c1 e8 10	 shr	 eax, 16
  003b5	0f b6 c0	 movzx	 eax, al
  003b8	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  003bf	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  003c7	33 d0		 xor	 edx, eax
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  003d0	0f b6 44 24 20	 movzx	 eax, BYTE PTR Z$[rsp]
  003d5	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  003dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  003e3	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  003e7	c1 e8 08	 shr	 eax, 8
  003ea	0f b6 c0	 movzx	 eax, al
  003ed	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  003fb	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  003ff	c1 e8 10	 shr	 eax, 16
  00402	0f b6 c0	 movzx	 eax, al
  00405	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  0040c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00410	83 c0 02	 add	 eax, 2
  00413	8b c8		 mov	 ecx, eax
  00415	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  0041a	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 674  : 		K[i+3] = S[4][z(0xE)] ^ S[5][z(0xF)] ^ S[6][z(0x1)] ^ S[7][z(0x0)] ^ S[7][z(0xC)];

  0041d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00424	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00428	c1 e8 08	 shr	 eax, 8
  0042b	0f b6 d0	 movzx	 edx, al
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00435	0f b6 44 24 2c	 movzx	 eax, BYTE PTR Z$[rsp+12]
  0043a	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00441	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00449	33 d0		 xor	 edx, eax
  0044b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00452	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00456	c1 e8 10	 shr	 eax, 16
  00459	0f b6 c0	 movzx	 eax, al
  0045c	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0046a	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0046e	c1 e8 18	 shr	 eax, 24
  00471	0f b6 c0	 movzx	 eax, al
  00474	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  0047b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00482	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00486	c1 e8 18	 shr	 eax, 24
  00489	0f b6 c0	 movzx	 eax, al
  0048c	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00493	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00497	83 c0 03	 add	 eax, 3
  0049a	8b c8		 mov	 ecx, eax
  0049c	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  004a1	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 675  : 		X[0] = Z[2] ^ S[4][z(0x5)] ^ S[5][z(0x7)] ^ S[6][z(0x4)] ^ S[7][z(0x6)] ^ S[6][z(0x0)];

  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  004ab	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  004af	c1 e8 10	 shr	 eax, 16
  004b2	0f b6 c0	 movzx	 eax, al
  004b5	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  004bc	44 8b 44 24 28	 mov	 r8d, DWORD PTR Z$[rsp+8]
  004c1	44 33 c0	 xor	 r8d, eax
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  004cb	0f b6 44 24 24	 movzx	 eax, BYTE PTR Z$[rsp+4]
  004d0	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  004d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  004df	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  004e3	c1 e8 18	 shr	 eax, 24
  004e6	0f b6 c0	 movzx	 eax, al
  004e9	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  004f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  004f8	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  004fc	c1 e8 08	 shr	 eax, 8
  004ff	0f b6 c0	 movzx	 eax, al
  00502	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  0050a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00511	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00515	c1 e8 18	 shr	 eax, 24
  00518	0f b6 c8	 movzx	 ecx, al
  0051b	41 8b c0	 mov	 eax, r8d
  0051e	33 84 8a 00 18
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+6144]
  00525	89 44 24 40	 mov	 DWORD PTR X$[rsp], eax

; 676  : 		X[1] = Z[0] ^ S[4][x(0x0)] ^ S[5][x(0x2)] ^ S[6][x(0x1)] ^ S[7][x(0x3)] ^ S[7][z(0x2)];

  00529	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00530	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00534	c1 e8 18	 shr	 eax, 24
  00537	0f b6 c0	 movzx	 eax, al
  0053a	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00541	44 8b 44 24 20	 mov	 r8d, DWORD PTR Z$[rsp]
  00546	44 33 c0	 xor	 r8d, eax
  00549	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00550	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00554	c1 e8 08	 shr	 eax, 8
  00557	0f b6 c0	 movzx	 eax, al
  0055a	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00562	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00569	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  0056d	c1 e8 10	 shr	 eax, 16
  00570	0f b6 c0	 movzx	 eax, al
  00573	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0057b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00582	0f b6 44 24 40	 movzx	 eax, BYTE PTR X$[rsp]
  00587	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  0058f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00596	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0059a	c1 e8 08	 shr	 eax, 8
  0059d	0f b6 c8	 movzx	 ecx, al
  005a0	41 8b c0	 mov	 eax, r8d
  005a3	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  005aa	89 44 24 44	 mov	 DWORD PTR X$[rsp+4], eax

; 677  : 		X[2] = Z[1] ^ S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[4][z(0x1)];

  005ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  005b5	0f b6 44 24 44	 movzx	 eax, BYTE PTR X$[rsp+4]
  005ba	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  005c1	44 8b 44 24 24	 mov	 r8d, DWORD PTR Z$[rsp+4]
  005c6	44 33 c0	 xor	 r8d, eax
  005c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  005d0	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  005d4	c1 e8 08	 shr	 eax, 8
  005d7	0f b6 c0	 movzx	 eax, al
  005da	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  005e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  005e9	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  005ed	c1 e8 10	 shr	 eax, 16
  005f0	0f b6 c0	 movzx	 eax, al
  005f3	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  005fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00602	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00606	c1 e8 18	 shr	 eax, 24
  00609	0f b6 c0	 movzx	 eax, al
  0060c	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  00614	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0061b	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0061f	c1 e8 10	 shr	 eax, 16
  00622	0f b6 c8	 movzx	 ecx, al
  00625	41 8b c0	 mov	 eax, r8d
  00628	33 84 8a 00 10
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+4096]
  0062f	89 44 24 48	 mov	 DWORD PTR X$[rsp+8], eax

; 678  : 		X[3] = Z[3] ^ S[4][x(0xA)] ^ S[5][x(0x9)] ^ S[6][x(0xB)] ^ S[7][x(0x8)] ^ S[5][z(0x3)];

  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0063a	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  0063e	c1 e8 08	 shr	 eax, 8
  00641	0f b6 c0	 movzx	 eax, al
  00644	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  0064b	44 8b 44 24 2c	 mov	 r8d, DWORD PTR Z$[rsp+12]
  00650	44 33 c0	 xor	 r8d, eax
  00653	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0065a	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  0065e	c1 e8 10	 shr	 eax, 16
  00661	0f b6 c0	 movzx	 eax, al
  00664	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  0066c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00673	0f b6 44 24 48	 movzx	 eax, BYTE PTR X$[rsp+8]
  00678	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00680	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00687	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  0068b	c1 e8 18	 shr	 eax, 24
  0068e	0f b6 c8	 movzx	 ecx, al
  00691	41 8b c0	 mov	 eax, r8d
  00694	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  0069b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  006a2	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Z$[rsp]
  006a7	33 84 8a 00 14
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+5120]
  006ae	89 44 24 4c	 mov	 DWORD PTR X$[rsp+12], eax

; 679  : 		K[i+4] = S[4][x(0x3)] ^ S[5][x(0x2)] ^ S[6][x(0xC)] ^ S[7][x(0xD)] ^ S[4][x(0x8)];

  006b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  006b9	0f b6 54 24 40	 movzx	 edx, BYTE PTR X$[rsp]
  006be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  006c5	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  006c9	c1 e8 08	 shr	 eax, 8
  006cc	0f b6 c0	 movzx	 eax, al
  006cf	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  006d6	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  006de	33 d0		 xor	 edx, eax
  006e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  006e7	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  006eb	c1 e8 18	 shr	 eax, 24
  006ee	0f b6 c0	 movzx	 eax, al
  006f1	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  006f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  006ff	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  00703	c1 e8 10	 shr	 eax, 16
  00706	0f b6 c0	 movzx	 eax, al
  00709	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00710	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00717	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  0071b	c1 e8 18	 shr	 eax, 24
  0071e	0f b6 c0	 movzx	 eax, al
  00721	33 94 81 00 10
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+4096]
  00728	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0072c	83 c0 04	 add	 eax, 4
  0072f	8b c8		 mov	 ecx, eax
  00731	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00736	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 680  : 		K[i+5] = S[4][x(0x1)] ^ S[5][x(0x0)] ^ S[6][x(0xE)] ^ S[7][x(0xF)] ^ S[5][x(0xD)];

  00739	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00740	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00744	c1 e8 10	 shr	 eax, 16
  00747	0f b6 d0	 movzx	 edx, al
  0074a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00751	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00755	c1 e8 18	 shr	 eax, 24
  00758	0f b6 c0	 movzx	 eax, al
  0075b	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00762	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  0076a	33 d0		 xor	 edx, eax
  0076c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00773	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  00777	c1 e8 08	 shr	 eax, 8
  0077a	0f b6 c0	 movzx	 eax, al
  0077d	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00784	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0078b	0f b6 44 24 4c	 movzx	 eax, BYTE PTR X$[rsp+12]
  00790	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00797	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0079e	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  007a2	c1 e8 10	 shr	 eax, 16
  007a5	0f b6 c0	 movzx	 eax, al
  007a8	33 94 81 00 14
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+5120]
  007af	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  007b3	83 c0 05	 add	 eax, 5
  007b6	8b c8		 mov	 ecx, eax
  007b8	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  007bd	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 681  : 		K[i+6] = S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x8)] ^ S[7][x(0x9)] ^ S[6][x(0x3)];

  007c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  007c7	0f b6 54 24 44	 movzx	 edx, BYTE PTR X$[rsp+4]
  007cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  007d3	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  007d7	c1 e8 08	 shr	 eax, 8
  007da	0f b6 c0	 movzx	 eax, al
  007dd	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  007e4	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  007ec	33 d0		 xor	 edx, eax
  007ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  007f5	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  007f9	c1 e8 18	 shr	 eax, 24
  007fc	0f b6 c0	 movzx	 eax, al
  007ff	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00806	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0080d	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00811	c1 e8 10	 shr	 eax, 16
  00814	0f b6 c0	 movzx	 eax, al
  00817	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  0081e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00825	0f b6 44 24 40	 movzx	 eax, BYTE PTR X$[rsp]
  0082a	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00831	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00835	83 c0 06	 add	 eax, 6
  00838	8b c8		 mov	 ecx, eax
  0083a	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  0083f	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 682  : 		K[i+7] = S[4][x(0x5)] ^ S[5][x(0x4)] ^ S[6][x(0xA)] ^ S[7][x(0xB)] ^ S[7][x(0x7)];

  00842	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00849	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  0084d	c1 e8 10	 shr	 eax, 16
  00850	0f b6 d0	 movzx	 edx, al
  00853	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0085a	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  0085e	c1 e8 18	 shr	 eax, 24
  00861	0f b6 c0	 movzx	 eax, al
  00864	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  0086b	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00873	33 d0		 xor	 edx, eax
  00875	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0087c	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00880	c1 e8 08	 shr	 eax, 8
  00883	0f b6 c0	 movzx	 eax, al
  00886	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  0088d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00894	0f b6 44 24 48	 movzx	 eax, BYTE PTR X$[rsp+8]
  00899	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  008a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  008a7	0f b6 44 24 44	 movzx	 eax, BYTE PTR X$[rsp+4]
  008ac	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  008b3	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  008b7	83 c0 07	 add	 eax, 7
  008ba	8b c8		 mov	 ecx, eax
  008bc	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  008c1	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 683  : 		Z[0] = X[0] ^ S[4][x(0xD)] ^ S[5][x(0xF)] ^ S[6][x(0xC)] ^ S[7][x(0xE)] ^ S[6][x(0x8)];

  008c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  008cb	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  008cf	c1 e8 10	 shr	 eax, 16
  008d2	0f b6 c0	 movzx	 eax, al
  008d5	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  008dc	44 8b 44 24 40	 mov	 r8d, DWORD PTR X$[rsp]
  008e1	44 33 c0	 xor	 r8d, eax
  008e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  008eb	0f b6 44 24 4c	 movzx	 eax, BYTE PTR X$[rsp+12]
  008f0	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  008f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  008ff	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  00903	c1 e8 18	 shr	 eax, 24
  00906	0f b6 c0	 movzx	 eax, al
  00909	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00911	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00918	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  0091c	c1 e8 08	 shr	 eax, 8
  0091f	0f b6 c0	 movzx	 eax, al
  00922	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  0092a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00931	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00935	c1 e8 18	 shr	 eax, 24
  00938	0f b6 c8	 movzx	 ecx, al
  0093b	41 8b c0	 mov	 eax, r8d
  0093e	33 84 8a 00 18
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+6144]
  00945	89 44 24 20	 mov	 DWORD PTR Z$[rsp], eax

; 684  : 		Z[1] = X[2] ^ S[4][z(0x0)] ^ S[5][z(0x2)] ^ S[6][z(0x1)] ^ S[7][z(0x3)] ^ S[7][x(0xA)];

  00949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00950	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00954	c1 e8 18	 shr	 eax, 24
  00957	0f b6 c0	 movzx	 eax, al
  0095a	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00961	44 8b 44 24 48	 mov	 r8d, DWORD PTR X$[rsp+8]
  00966	44 33 c0	 xor	 r8d, eax
  00969	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00970	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00974	c1 e8 08	 shr	 eax, 8
  00977	0f b6 c0	 movzx	 eax, al
  0097a	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00982	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00989	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  0098d	c1 e8 10	 shr	 eax, 16
  00990	0f b6 c0	 movzx	 eax, al
  00993	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0099b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  009a2	0f b6 44 24 20	 movzx	 eax, BYTE PTR Z$[rsp]
  009a7	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  009af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  009b6	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  009ba	c1 e8 08	 shr	 eax, 8
  009bd	0f b6 c8	 movzx	 ecx, al
  009c0	41 8b c0	 mov	 eax, r8d
  009c3	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  009ca	89 44 24 24	 mov	 DWORD PTR Z$[rsp+4], eax

; 685  : 		Z[2] = X[3] ^ S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[4][x(0x9)];

  009ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  009d5	0f b6 44 24 24	 movzx	 eax, BYTE PTR Z$[rsp+4]
  009da	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  009e1	44 8b 44 24 4c	 mov	 r8d, DWORD PTR X$[rsp+12]
  009e6	44 33 c0	 xor	 r8d, eax
  009e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  009f0	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  009f4	c1 e8 08	 shr	 eax, 8
  009f7	0f b6 c0	 movzx	 eax, al
  009fa	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00a02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00a09	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00a0d	c1 e8 10	 shr	 eax, 16
  00a10	0f b6 c0	 movzx	 eax, al
  00a13	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00a1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00a22	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00a26	c1 e8 18	 shr	 eax, 24
  00a29	0f b6 c0	 movzx	 eax, al
  00a2c	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  00a34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00a3b	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00a3f	c1 e8 10	 shr	 eax, 16
  00a42	0f b6 c8	 movzx	 ecx, al
  00a45	41 8b c0	 mov	 eax, r8d
  00a48	33 84 8a 00 10
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+4096]
  00a4f	89 44 24 28	 mov	 DWORD PTR Z$[rsp+8], eax

; 686  : 		Z[3] = X[1] ^ S[4][z(0xA)] ^ S[5][z(0x9)] ^ S[6][z(0xB)] ^ S[7][z(0x8)] ^ S[5][x(0xB)];

  00a53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00a5a	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00a5e	c1 e8 08	 shr	 eax, 8
  00a61	0f b6 c0	 movzx	 eax, al
  00a64	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00a6b	44 8b 44 24 44	 mov	 r8d, DWORD PTR X$[rsp+4]
  00a70	44 33 c0	 xor	 r8d, eax
  00a73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00a7a	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00a7e	c1 e8 10	 shr	 eax, 16
  00a81	0f b6 c0	 movzx	 eax, al
  00a84	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00a8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00a93	0f b6 44 24 28	 movzx	 eax, BYTE PTR Z$[rsp+8]
  00a98	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00aa0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00aa7	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00aab	c1 e8 18	 shr	 eax, 24
  00aae	0f b6 c8	 movzx	 ecx, al
  00ab1	41 8b c0	 mov	 eax, r8d
  00ab4	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00abb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00ac2	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR X$[rsp+8]
  00ac7	33 84 8a 00 14
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+5120]
  00ace	89 44 24 2c	 mov	 DWORD PTR Z$[rsp+12], eax

; 687  : 		K[i+8] = S[4][z(0x3)] ^ S[5][z(0x2)] ^ S[6][z(0xC)] ^ S[7][z(0xD)] ^ S[4][z(0x9)];

  00ad2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00ad9	0f b6 54 24 20	 movzx	 edx, BYTE PTR Z$[rsp]
  00ade	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00ae5	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00ae9	c1 e8 08	 shr	 eax, 8
  00aec	0f b6 c0	 movzx	 eax, al
  00aef	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00af6	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00afe	33 d0		 xor	 edx, eax
  00b00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00b07	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00b0b	c1 e8 18	 shr	 eax, 24
  00b0e	0f b6 c0	 movzx	 eax, al
  00b11	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00b18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00b1f	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00b23	c1 e8 10	 shr	 eax, 16
  00b26	0f b6 c0	 movzx	 eax, al
  00b29	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00b30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00b37	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00b3b	c1 e8 10	 shr	 eax, 16
  00b3e	0f b6 c0	 movzx	 eax, al
  00b41	33 94 81 00 10
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+4096]
  00b48	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00b4c	83 c0 08	 add	 eax, 8
  00b4f	8b c8		 mov	 ecx, eax
  00b51	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00b56	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 688  : 		K[i+9] = S[4][z(0x1)] ^ S[5][z(0x0)] ^ S[6][z(0xE)] ^ S[7][z(0xF)] ^ S[5][z(0xC)];

  00b59	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00b60	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00b64	c1 e8 10	 shr	 eax, 16
  00b67	0f b6 d0	 movzx	 edx, al
  00b6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00b71	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00b75	c1 e8 18	 shr	 eax, 24
  00b78	0f b6 c0	 movzx	 eax, al
  00b7b	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00b82	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00b8a	33 d0		 xor	 edx, eax
  00b8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00b93	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00b97	c1 e8 08	 shr	 eax, 8
  00b9a	0f b6 c0	 movzx	 eax, al
  00b9d	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00ba4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00bab	0f b6 44 24 2c	 movzx	 eax, BYTE PTR Z$[rsp+12]
  00bb0	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00bb7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00bbe	8b 44 24 2c	 mov	 eax, DWORD PTR Z$[rsp+12]
  00bc2	c1 e8 18	 shr	 eax, 24
  00bc5	0f b6 c0	 movzx	 eax, al
  00bc8	33 94 81 00 14
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+5120]
  00bcf	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00bd3	83 c0 09	 add	 eax, 9
  00bd6	8b c8		 mov	 ecx, eax
  00bd8	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00bdd	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 689  : 		K[i+10] = S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x8)] ^ S[7][z(0x9)] ^ S[6][z(0x2)];

  00be0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00be7	0f b6 54 24 24	 movzx	 edx, BYTE PTR Z$[rsp+4]
  00bec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00bf3	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00bf7	c1 e8 08	 shr	 eax, 8
  00bfa	0f b6 c0	 movzx	 eax, al
  00bfd	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00c04	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00c0c	33 d0		 xor	 edx, eax
  00c0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00c15	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00c19	c1 e8 18	 shr	 eax, 24
  00c1c	0f b6 c0	 movzx	 eax, al
  00c1f	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00c26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00c2d	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00c31	c1 e8 10	 shr	 eax, 16
  00c34	0f b6 c0	 movzx	 eax, al
  00c37	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00c3e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00c45	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00c49	c1 e8 08	 shr	 eax, 8
  00c4c	0f b6 c0	 movzx	 eax, al
  00c4f	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00c56	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00c5a	83 c0 0a	 add	 eax, 10
  00c5d	8b c8		 mov	 ecx, eax
  00c5f	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00c64	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 690  : 		K[i+11] = S[4][z(0x5)] ^ S[5][z(0x4)] ^ S[6][z(0xA)] ^ S[7][z(0xB)] ^ S[7][z(0x6)];

  00c67	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00c6e	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00c72	c1 e8 10	 shr	 eax, 16
  00c75	0f b6 d0	 movzx	 edx, al
  00c78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00c7f	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00c83	c1 e8 18	 shr	 eax, 24
  00c86	0f b6 c0	 movzx	 eax, al
  00c89	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00c90	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00c98	33 d0		 xor	 edx, eax
  00c9a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00ca1	8b 44 24 28	 mov	 eax, DWORD PTR Z$[rsp+8]
  00ca5	c1 e8 08	 shr	 eax, 8
  00ca8	0f b6 c0	 movzx	 eax, al
  00cab	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00cb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00cb9	0f b6 44 24 28	 movzx	 eax, BYTE PTR Z$[rsp+8]
  00cbe	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00cc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00ccc	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00cd0	c1 e8 08	 shr	 eax, 8
  00cd3	0f b6 c0	 movzx	 eax, al
  00cd6	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00cdd	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00ce1	83 c0 0b	 add	 eax, 11
  00ce4	8b c8		 mov	 ecx, eax
  00ce6	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00ceb	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 691  : 		X[0] = Z[2] ^ S[4][z(0x5)] ^ S[5][z(0x7)] ^ S[6][z(0x4)] ^ S[7][z(0x6)] ^ S[6][z(0x0)];

  00cee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00cf5	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00cf9	c1 e8 10	 shr	 eax, 16
  00cfc	0f b6 c0	 movzx	 eax, al
  00cff	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00d06	44 8b 44 24 28	 mov	 r8d, DWORD PTR Z$[rsp+8]
  00d0b	44 33 c0	 xor	 r8d, eax
  00d0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00d15	0f b6 44 24 24	 movzx	 eax, BYTE PTR Z$[rsp+4]
  00d1a	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00d22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00d29	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00d2d	c1 e8 18	 shr	 eax, 24
  00d30	0f b6 c0	 movzx	 eax, al
  00d33	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00d3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00d42	8b 44 24 24	 mov	 eax, DWORD PTR Z$[rsp+4]
  00d46	c1 e8 08	 shr	 eax, 8
  00d49	0f b6 c0	 movzx	 eax, al
  00d4c	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  00d54	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00d5b	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00d5f	c1 e8 18	 shr	 eax, 24
  00d62	0f b6 c8	 movzx	 ecx, al
  00d65	41 8b c0	 mov	 eax, r8d
  00d68	33 84 8a 00 18
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+6144]
  00d6f	89 44 24 40	 mov	 DWORD PTR X$[rsp], eax

; 692  : 		X[1] = Z[0] ^ S[4][x(0x0)] ^ S[5][x(0x2)] ^ S[6][x(0x1)] ^ S[7][x(0x3)] ^ S[7][z(0x2)];

  00d73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00d7a	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00d7e	c1 e8 18	 shr	 eax, 24
  00d81	0f b6 c0	 movzx	 eax, al
  00d84	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00d8b	44 8b 44 24 20	 mov	 r8d, DWORD PTR Z$[rsp]
  00d90	44 33 c0	 xor	 r8d, eax
  00d93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00d9a	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00d9e	c1 e8 08	 shr	 eax, 8
  00da1	0f b6 c0	 movzx	 eax, al
  00da4	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00dac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00db3	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  00db7	c1 e8 10	 shr	 eax, 16
  00dba	0f b6 c0	 movzx	 eax, al
  00dbd	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00dc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00dcc	0f b6 44 24 40	 movzx	 eax, BYTE PTR X$[rsp]
  00dd1	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  00dd9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00de0	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00de4	c1 e8 08	 shr	 eax, 8
  00de7	0f b6 c8	 movzx	 ecx, al
  00dea	41 8b c0	 mov	 eax, r8d
  00ded	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00df4	89 44 24 44	 mov	 DWORD PTR X$[rsp+4], eax

; 693  : 		X[2] = Z[1] ^ S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[4][z(0x1)];

  00df8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00dff	0f b6 44 24 44	 movzx	 eax, BYTE PTR X$[rsp+4]
  00e04	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00e0b	44 8b 44 24 24	 mov	 r8d, DWORD PTR Z$[rsp+4]
  00e10	44 33 c0	 xor	 r8d, eax
  00e13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00e1a	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00e1e	c1 e8 08	 shr	 eax, 8
  00e21	0f b6 c0	 movzx	 eax, al
  00e24	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00e2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00e33	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00e37	c1 e8 10	 shr	 eax, 16
  00e3a	0f b6 c0	 movzx	 eax, al
  00e3d	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00e45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00e4c	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00e50	c1 e8 18	 shr	 eax, 24
  00e53	0f b6 c0	 movzx	 eax, al
  00e56	44 33 84 81 00
	1c 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+7168]
  00e5e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00e65	8b 44 24 20	 mov	 eax, DWORD PTR Z$[rsp]
  00e69	c1 e8 10	 shr	 eax, 16
  00e6c	0f b6 c8	 movzx	 ecx, al
  00e6f	41 8b c0	 mov	 eax, r8d
  00e72	33 84 8a 00 10
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+4096]
  00e79	89 44 24 48	 mov	 DWORD PTR X$[rsp+8], eax

; 694  : 		X[3] = Z[3] ^ S[4][x(0xA)] ^ S[5][x(0x9)] ^ S[6][x(0xB)] ^ S[7][x(0x8)] ^ S[5][z(0x3)];

  00e7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00e84	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00e88	c1 e8 08	 shr	 eax, 8
  00e8b	0f b6 c0	 movzx	 eax, al
  00e8e	8b 84 81 00 10
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+4096]
  00e95	44 8b 44 24 2c	 mov	 r8d, DWORD PTR Z$[rsp+12]
  00e9a	44 33 c0	 xor	 r8d, eax
  00e9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00ea4	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00ea8	c1 e8 10	 shr	 eax, 16
  00eab	0f b6 c0	 movzx	 eax, al
  00eae	44 33 84 81 00
	14 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+5120]
  00eb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00ebd	0f b6 44 24 48	 movzx	 eax, BYTE PTR X$[rsp+8]
  00ec2	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  00eca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00ed1	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00ed5	c1 e8 18	 shr	 eax, 24
  00ed8	0f b6 c8	 movzx	 ecx, al
  00edb	41 8b c0	 mov	 eax, r8d
  00ede	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00ee5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00eec	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Z$[rsp]
  00ef1	33 84 8a 00 14
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+5120]
  00ef8	89 44 24 4c	 mov	 DWORD PTR X$[rsp+12], eax

; 695  : 		K[i+12] = S[4][x(0x8)] ^ S[5][x(0x9)] ^ S[6][x(0x7)] ^ S[7][x(0x6)] ^ S[4][x(0x3)];

  00efc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00f03	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00f07	c1 e8 18	 shr	 eax, 24
  00f0a	0f b6 d0	 movzx	 edx, al
  00f0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00f14	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00f18	c1 e8 10	 shr	 eax, 16
  00f1b	0f b6 c0	 movzx	 eax, al
  00f1e	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00f25	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00f2d	33 d0		 xor	 edx, eax
  00f2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00f36	0f b6 44 24 44	 movzx	 eax, BYTE PTR X$[rsp+4]
  00f3b	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00f42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00f49	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00f4d	c1 e8 08	 shr	 eax, 8
  00f50	0f b6 c0	 movzx	 eax, al
  00f53	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00f5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00f61	0f b6 44 24 40	 movzx	 eax, BYTE PTR X$[rsp]
  00f66	33 94 81 00 10
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+4096]
  00f6d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00f71	83 c0 0c	 add	 eax, 12
  00f74	8b c8		 mov	 ecx, eax
  00f76	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00f7b	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 696  : 		K[i+13] = S[4][x(0xA)] ^ S[5][x(0xB)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[5][x(0x7)];

  00f7e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  00f85	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  00f89	c1 e8 08	 shr	 eax, 8
  00f8c	0f b6 d0	 movzx	 edx, al
  00f8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00f96	0f b6 44 24 48	 movzx	 eax, BYTE PTR X$[rsp+8]
  00f9b	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00fa2	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  00faa	33 d0		 xor	 edx, eax
  00fac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00fb3	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00fb7	c1 e8 10	 shr	 eax, 16
  00fba	0f b6 c0	 movzx	 eax, al
  00fbd	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  00fc4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00fcb	8b 44 24 44	 mov	 eax, DWORD PTR X$[rsp+4]
  00fcf	c1 e8 18	 shr	 eax, 24
  00fd2	0f b6 c0	 movzx	 eax, al
  00fd5	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  00fdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00fe3	0f b6 44 24 44	 movzx	 eax, BYTE PTR X$[rsp+4]
  00fe8	33 94 81 00 14
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+5120]
  00fef	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00ff3	83 c0 0d	 add	 eax, 13
  00ff6	8b c8		 mov	 ecx, eax
  00ff8	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  00ffd	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 697  : 		K[i+14] = S[4][x(0xC)] ^ S[5][x(0xD)] ^ S[6][x(0x3)] ^ S[7][x(0x2)] ^ S[6][x(0x8)];

  01000	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  01007	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  0100b	c1 e8 18	 shr	 eax, 24
  0100e	0f b6 d0	 movzx	 edx, al
  01011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  01018	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  0101c	c1 e8 10	 shr	 eax, 16
  0101f	0f b6 c0	 movzx	 eax, al
  01022	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  01029	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  01031	33 d0		 xor	 edx, eax
  01033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0103a	0f b6 44 24 40	 movzx	 eax, BYTE PTR X$[rsp]
  0103f	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  01046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0104d	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  01051	c1 e8 08	 shr	 eax, 8
  01054	0f b6 c0	 movzx	 eax, al
  01057	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  0105e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  01065	8b 44 24 48	 mov	 eax, DWORD PTR X$[rsp+8]
  01069	c1 e8 18	 shr	 eax, 24
  0106c	0f b6 c0	 movzx	 eax, al
  0106f	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  01076	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0107a	83 c0 0e	 add	 eax, 14
  0107d	8b c8		 mov	 ecx, eax
  0107f	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  01084	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 698  : 		K[i+15] = S[4][x(0xE)] ^ S[5][x(0xF)] ^ S[6][x(0x1)] ^ S[7][x(0x0)] ^ S[7][x(0xD)];

  01087	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:S
  0108e	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  01092	c1 e8 08	 shr	 eax, 8
  01095	0f b6 d0	 movzx	 edx, al
  01098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0109f	0f b6 44 24 4c	 movzx	 eax, BYTE PTR X$[rsp+12]
  010a4	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  010ab	41 8b 94 90 00
	10 00 00	 mov	 edx, DWORD PTR [r8+rdx*4+4096]
  010b3	33 d0		 xor	 edx, eax
  010b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  010bc	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  010c0	c1 e8 10	 shr	 eax, 16
  010c3	0f b6 c0	 movzx	 eax, al
  010c6	33 94 81 00 18
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+6144]
  010cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  010d4	8b 44 24 40	 mov	 eax, DWORD PTR X$[rsp]
  010d8	c1 e8 18	 shr	 eax, 24
  010db	0f b6 c0	 movzx	 eax, al
  010de	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  010e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  010ec	8b 44 24 4c	 mov	 eax, DWORD PTR X$[rsp+12]
  010f0	c1 e8 10	 shr	 eax, 16
  010f3	0f b6 c0	 movzx	 eax, al
  010f6	33 94 81 00 1c
	00 00		 xor	 edx, DWORD PTR [rcx+rax*4+7168]
  010fd	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  01101	83 c0 0f	 add	 eax, 15
  01104	8b c8		 mov	 ecx, eax
  01106	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  0110b	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 699  : 	}

  0110e	e9 56 ef ff ff	 jmp	 $LN5@Cast5SetKe
$LN4@Cast5SetKe:

; 700  : 
; 701  : 	for (i=16; i<32; i++)

  01113	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR i$[rsp], 16
  0111b	eb 0b		 jmp	 SHORT $LN3@Cast5SetKe
$LN2@Cast5SetKe:
  0111d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  01121	83 c0 01	 add	 eax, 1
  01124	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN3@Cast5SetKe:
  01128	83 7c 24 30 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  0112d	73 1d		 jae	 SHORT $LN1@Cast5SetKe

; 702  : 		K[i] &= 0x1f;

  0112f	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  01133	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  01138	8b 14 88	 mov	 edx, DWORD PTR [rax+rcx*4]
  0113b	83 e2 1f	 and	 edx, 31
  0113e	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  01142	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp]
  01147	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  0114a	eb d1		 jmp	 SHORT $LN2@Cast5SetKe
$LN1@Cast5SetKe:

; 703  : }

  0114c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  01150	c3		 ret	 0
Cast5SetKey ENDP
_TEXT	ENDS
PUBLIC	Cast5Decrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$Cast5Decrypt DD imagerel $LN3
	DD	imagerel $LN3+2221
	DD	imagerel $unwind$Cast5Decrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Cast5Decrypt DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Cast5Decrypt
_TEXT	SEGMENT
K$ = 32
l$ = 40
r$ = 44
t$ = 48
inBlock$ = 80
outBlock$ = 88
key$ = 96
Cast5Decrypt PROC					; COMDAT

; 620  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 621  : 	word32 r = BE32 (((word32 *)inBlock)[0]);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR inBlock$[rsp]
  00018	8b 08		 mov	 ecx, DWORD PTR [rax]
  0001a	e8 00 00 00 00	 call	 MirrorBytes32
  0001f	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 622  : 	word32 l = BE32 (((word32 *)inBlock)[1]);

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR inBlock$[rsp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0002b	e8 00 00 00 00	 call	 MirrorBytes32
  00030	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 623  : 	word32 *K = key->K;

  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR key$[rsp]
  00039	48 89 44 24 20	 mov	 QWORD PTR K$[rsp], rax

; 624  : 	word32 t;
; 625  : 
; 626  : 	/* Only do full 16 rounds if key length > 80 bits */
; 627  : 	F1(r, l, 15, 16);

  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00043	8b 48 3c	 mov	 ecx, DWORD PTR [rax+60]
  00046	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0004f	8b 50 7c	 mov	 edx, DWORD PTR [rax+124]
  00052	e8 00 00 00 00	 call	 rotlVariable
  00057	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0005b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0005f	c1 e8 18	 shr	 eax, 24
  00062	44 0f b6 c0	 movzx	 r8d, al
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00074	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00078	c1 e8 10	 shr	 eax, 16
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00085	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00089	33 c8		 xor	 ecx, eax
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00092	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00096	c1 e8 08	 shr	 eax, 8
  00099	0f b6 c0	 movzx	 eax, al
  0009c	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  000aa	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  000af	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  000b6	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  000ba	33 c1		 xor	 eax, ecx
  000bc	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 628  : 	F3(l, r, 14, 16);

  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  000c5	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  000c9	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  000cc	2b c8		 sub	 ecx, eax
  000ce	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  000d3	8b 50 78	 mov	 edx, DWORD PTR [rax+120]
  000d6	e8 00 00 00 00	 call	 rotlVariable
  000db	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  000df	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  000e3	c1 e8 18	 shr	 eax, 24
  000e6	44 0f b6 c0	 movzx	 r8d, al
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  000f8	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  000fc	c1 e8 10	 shr	 eax, 16
  000ff	0f b6 c0	 movzx	 eax, al
  00102	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00106	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00114	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00118	c1 e8 08	 shr	 eax, 8
  0011b	0f b6 c0	 movzx	 eax, al
  0011e	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0012c	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00131	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  00138	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0013c	33 c1		 xor	 eax, ecx
  0013e	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 629  : 	F2(r, l, 13, 16);

  00142	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00147	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0014b	8b 49 34	 mov	 ecx, DWORD PTR [rcx+52]
  0014e	33 c8		 xor	 ecx, eax
  00150	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00155	8b 50 74	 mov	 edx, DWORD PTR [rax+116]
  00158	e8 00 00 00 00	 call	 rotlVariable
  0015d	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00161	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00165	c1 e8 18	 shr	 eax, 24
  00168	44 0f b6 c0	 movzx	 r8d, al
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0017a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0017e	c1 e8 10	 shr	 eax, 16
  00181	0f b6 c0	 movzx	 eax, al
  00184	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0018b	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  0018f	2b c8		 sub	 ecx, eax
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00198	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0019c	c1 e8 08	 shr	 eax, 8
  0019f	0f b6 c0	 movzx	 eax, al
  001a2	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  001b0	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  001b5	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  001bc	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  001c0	33 c1		 xor	 eax, ecx
  001c2	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 630  : 	F1(l, r, 12, 16);

  001c6	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  001cb	8b 48 30	 mov	 ecx, DWORD PTR [rax+48]
  001ce	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  001d2	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  001d7	8b 50 70	 mov	 edx, DWORD PTR [rax+112]
  001da	e8 00 00 00 00	 call	 rotlVariable
  001df	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  001e3	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  001e7	c1 e8 18	 shr	 eax, 24
  001ea	44 0f b6 c0	 movzx	 r8d, al
  001ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  001fc	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00200	c1 e8 10	 shr	 eax, 16
  00203	0f b6 c0	 movzx	 eax, al
  00206	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0020d	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00211	33 c8		 xor	 ecx, eax
  00213	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0021a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0021e	c1 e8 08	 shr	 eax, 8
  00221	0f b6 c0	 movzx	 eax, al
  00224	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0022b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00232	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00237	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0023e	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00242	33 c1		 xor	 eax, ecx
  00244	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 631  : 	F3(r, l, 11, 16);

  00248	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  0024d	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00251	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  00254	2b c8		 sub	 ecx, eax
  00256	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0025b	8b 50 6c	 mov	 edx, DWORD PTR [rax+108]
  0025e	e8 00 00 00 00	 call	 rotlVariable
  00263	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00267	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0026b	c1 e8 18	 shr	 eax, 24
  0026e	44 0f b6 c0	 movzx	 r8d, al
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00280	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00284	c1 e8 10	 shr	 eax, 16
  00287	0f b6 c0	 movzx	 eax, al
  0028a	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  0028e	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  00295	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0029c	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  002a0	c1 e8 08	 shr	 eax, 8
  002a3	0f b6 c0	 movzx	 eax, al
  002a6	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  002b4	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  002b9	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  002c0	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  002c4	33 c1		 xor	 eax, ecx
  002c6	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 632  : 	F2(l, r, 10, 16);

  002ca	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  002cf	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  002d3	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  002d6	33 c8		 xor	 ecx, eax
  002d8	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  002dd	8b 50 68	 mov	 edx, DWORD PTR [rax+104]
  002e0	e8 00 00 00 00	 call	 rotlVariable
  002e5	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  002e9	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  002ed	c1 e8 18	 shr	 eax, 24
  002f0	44 0f b6 c0	 movzx	 r8d, al
  002f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00302	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00306	c1 e8 10	 shr	 eax, 16
  00309	0f b6 c0	 movzx	 eax, al
  0030c	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00313	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00317	2b c8		 sub	 ecx, eax
  00319	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00320	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00324	c1 e8 08	 shr	 eax, 8
  00327	0f b6 c0	 movzx	 eax, al
  0032a	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00338	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  0033d	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  00344	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00348	33 c1		 xor	 eax, ecx
  0034a	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 633  : 	F1(r, l,  9, 16);

  0034e	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00353	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  00356	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  0035a	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0035f	8b 50 64	 mov	 edx, DWORD PTR [rax+100]
  00362	e8 00 00 00 00	 call	 rotlVariable
  00367	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0036b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0036f	c1 e8 18	 shr	 eax, 24
  00372	44 0f b6 c0	 movzx	 r8d, al
  00376	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00384	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00388	c1 e8 10	 shr	 eax, 16
  0038b	0f b6 c0	 movzx	 eax, al
  0038e	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00395	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00399	33 c8		 xor	 ecx, eax
  0039b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  003a2	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  003a6	c1 e8 08	 shr	 eax, 8
  003a9	0f b6 c0	 movzx	 eax, al
  003ac	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  003b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  003ba	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  003bf	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  003c6	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  003ca	33 c1		 xor	 eax, ecx
  003cc	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 634  : 	F3(l, r,  8, 16);

  003d0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  003d5	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  003d9	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  003dc	2b c8		 sub	 ecx, eax
  003de	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  003e3	8b 50 60	 mov	 edx, DWORD PTR [rax+96]
  003e6	e8 00 00 00 00	 call	 rotlVariable
  003eb	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  003ef	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  003f3	c1 e8 18	 shr	 eax, 24
  003f6	44 0f b6 c0	 movzx	 r8d, al
  003fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00401	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00408	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0040c	c1 e8 10	 shr	 eax, 16
  0040f	0f b6 c0	 movzx	 eax, al
  00412	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00416	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  0041d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00424	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00428	c1 e8 08	 shr	 eax, 8
  0042b	0f b6 c0	 movzx	 eax, al
  0042e	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  00435	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0043c	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00441	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  00448	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0044c	33 c1		 xor	 eax, ecx
  0044e	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 635  : 	F2(r, l,  7, 16);

  00452	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00457	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0045b	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  0045e	33 c8		 xor	 ecx, eax
  00460	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00465	8b 50 5c	 mov	 edx, DWORD PTR [rax+92]
  00468	e8 00 00 00 00	 call	 rotlVariable
  0046d	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00471	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00475	c1 e8 18	 shr	 eax, 24
  00478	44 0f b6 c0	 movzx	 r8d, al
  0047c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0048a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0048e	c1 e8 10	 shr	 eax, 16
  00491	0f b6 c0	 movzx	 eax, al
  00494	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0049b	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  0049f	2b c8		 sub	 ecx, eax
  004a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  004a8	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  004ac	c1 e8 08	 shr	 eax, 8
  004af	0f b6 c0	 movzx	 eax, al
  004b2	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  004c0	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  004c5	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  004cc	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  004d0	33 c1		 xor	 eax, ecx
  004d2	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 636  : 	F1(l, r,  6, 16);

  004d6	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  004db	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  004de	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  004e2	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  004e7	8b 50 58	 mov	 edx, DWORD PTR [rax+88]
  004ea	e8 00 00 00 00	 call	 rotlVariable
  004ef	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  004f3	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  004f7	c1 e8 18	 shr	 eax, 24
  004fa	44 0f b6 c0	 movzx	 r8d, al
  004fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0050c	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00510	c1 e8 10	 shr	 eax, 16
  00513	0f b6 c0	 movzx	 eax, al
  00516	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0051d	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00521	33 c8		 xor	 ecx, eax
  00523	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0052a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0052e	c1 e8 08	 shr	 eax, 8
  00531	0f b6 c0	 movzx	 eax, al
  00534	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0053b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00542	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00547	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0054e	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00552	33 c1		 xor	 eax, ecx
  00554	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 637  : 	F3(r, l,  5, 16);

  00558	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  0055d	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00561	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00564	2b c8		 sub	 ecx, eax
  00566	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0056b	8b 50 54	 mov	 edx, DWORD PTR [rax+84]
  0056e	e8 00 00 00 00	 call	 rotlVariable
  00573	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00577	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0057b	c1 e8 18	 shr	 eax, 24
  0057e	44 0f b6 c0	 movzx	 r8d, al
  00582	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00589	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00590	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00594	c1 e8 10	 shr	 eax, 16
  00597	0f b6 c0	 movzx	 eax, al
  0059a	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  0059e	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  005a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  005ac	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  005b0	c1 e8 08	 shr	 eax, 8
  005b3	0f b6 c0	 movzx	 eax, al
  005b6	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  005bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  005c4	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  005c9	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  005d0	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  005d4	33 c1		 xor	 eax, ecx
  005d6	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 638  : 	F2(l, r,  4, 16);

  005da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  005df	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  005e3	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  005e6	33 c8		 xor	 ecx, eax
  005e8	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  005ed	8b 50 50	 mov	 edx, DWORD PTR [rax+80]
  005f0	e8 00 00 00 00	 call	 rotlVariable
  005f5	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  005f9	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  005fd	c1 e8 18	 shr	 eax, 24
  00600	44 0f b6 c0	 movzx	 r8d, al
  00604	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0060b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00612	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00616	c1 e8 10	 shr	 eax, 16
  00619	0f b6 c0	 movzx	 eax, al
  0061c	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00623	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00627	2b c8		 sub	 ecx, eax
  00629	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00630	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00634	c1 e8 08	 shr	 eax, 8
  00637	0f b6 c0	 movzx	 eax, al
  0063a	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  00641	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00648	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  0064d	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  00654	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00658	33 c1		 xor	 eax, ecx
  0065a	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 639  : 	F1(r, l,  3, 16);

  0065e	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00663	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00666	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  0066a	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0066f	8b 50 4c	 mov	 edx, DWORD PTR [rax+76]
  00672	e8 00 00 00 00	 call	 rotlVariable
  00677	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0067b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0067f	c1 e8 18	 shr	 eax, 24
  00682	44 0f b6 c0	 movzx	 r8d, al
  00686	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0068d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00694	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00698	c1 e8 10	 shr	 eax, 16
  0069b	0f b6 c0	 movzx	 eax, al
  0069e	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  006a5	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  006a9	33 c8		 xor	 ecx, eax
  006ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  006b2	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  006b6	c1 e8 08	 shr	 eax, 8
  006b9	0f b6 c0	 movzx	 eax, al
  006bc	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  006c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  006ca	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  006cf	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  006d6	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  006da	33 c1		 xor	 eax, ecx
  006dc	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 640  : 	F3(l, r,  2, 16);

  006e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  006e5	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  006e9	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  006ec	2b c8		 sub	 ecx, eax
  006ee	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  006f3	8b 50 48	 mov	 edx, DWORD PTR [rax+72]
  006f6	e8 00 00 00 00	 call	 rotlVariable
  006fb	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  006ff	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00703	c1 e8 18	 shr	 eax, 24
  00706	44 0f b6 c0	 movzx	 r8d, al
  0070a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00711	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00718	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0071c	c1 e8 10	 shr	 eax, 16
  0071f	0f b6 c0	 movzx	 eax, al
  00722	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00726	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  0072d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00734	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00738	c1 e8 08	 shr	 eax, 8
  0073b	0f b6 c0	 movzx	 eax, al
  0073e	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  00745	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0074c	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00751	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  00758	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0075c	33 c1		 xor	 eax, ecx
  0075e	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 641  : 	F2(r, l,  1, 16);

  00762	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00767	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  0076b	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0076e	33 c8		 xor	 ecx, eax
  00770	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00775	8b 50 44	 mov	 edx, DWORD PTR [rax+68]
  00778	e8 00 00 00 00	 call	 rotlVariable
  0077d	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00781	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00785	c1 e8 18	 shr	 eax, 24
  00788	44 0f b6 c0	 movzx	 r8d, al
  0078c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00793	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0079a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0079e	c1 e8 10	 shr	 eax, 16
  007a1	0f b6 c0	 movzx	 eax, al
  007a4	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  007ab	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  007af	2b c8		 sub	 ecx, eax
  007b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  007b8	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  007bc	c1 e8 08	 shr	 eax, 8
  007bf	0f b6 c0	 movzx	 eax, al
  007c2	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  007c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  007d0	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  007d5	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  007dc	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  007e0	33 c1		 xor	 eax, ecx
  007e2	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 642  : 	F1(l, r,  0, 16);

  007e6	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  007eb	8b 08		 mov	 ecx, DWORD PTR [rax]
  007ed	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  007f1	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  007f6	8b 50 40	 mov	 edx, DWORD PTR [rax+64]
  007f9	e8 00 00 00 00	 call	 rotlVariable
  007fe	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00802	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00806	c1 e8 18	 shr	 eax, 24
  00809	44 0f b6 c0	 movzx	 r8d, al
  0080d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00814	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0081b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0081f	c1 e8 10	 shr	 eax, 16
  00822	0f b6 c0	 movzx	 eax, al
  00825	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0082c	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00830	33 c8		 xor	 ecx, eax
  00832	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00839	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0083d	c1 e8 08	 shr	 eax, 8
  00840	0f b6 c0	 movzx	 eax, al
  00843	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0084a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00851	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00856	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0085d	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  00861	33 c1		 xor	 eax, ecx
  00863	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 643  : 	/* Put l,r into outblock */
; 644  : 	((word32 *)outBlock)[0] = BE32 (l);

  00867	8b 4c 24 28	 mov	 ecx, DWORD PTR l$[rsp]
  0086b	e8 00 00 00 00	 call	 MirrorBytes32
  00870	44 8b d8	 mov	 r11d, eax
  00873	48 8b 44 24 58	 mov	 rax, QWORD PTR outBlock$[rsp]
  00878	44 89 18	 mov	 DWORD PTR [rax], r11d

; 645  : 	((word32 *)outBlock)[1] = BE32 (r);

  0087b	8b 4c 24 2c	 mov	 ecx, DWORD PTR r$[rsp]
  0087f	e8 00 00 00 00	 call	 MirrorBytes32
  00884	44 8b d8	 mov	 r11d, eax
  00887	48 8b 44 24 58	 mov	 rax, QWORD PTR outBlock$[rsp]
  0088c	44 89 58 04	 mov	 DWORD PTR [rax+4], r11d

; 646  : 	/* Wipe clean */
; 647  : 	t = l = r = 0;

  00890	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  00898	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0089c	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax
  008a0	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  008a4	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax

; 648  : }

  008a8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  008ac	c3		 ret	 0
Cast5Decrypt ENDP
_TEXT	ENDS
PUBLIC	Cast5Encrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$Cast5Encrypt DD imagerel $LN3
	DD	imagerel $LN3+2197
	DD	imagerel $unwind$Cast5Encrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Cast5Encrypt DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Cast5Encrypt
_TEXT	SEGMENT
K$ = 32
l$ = 40
r$ = 44
t$ = 48
inBlock$ = 80
outBlock$ = 88
key$ = 96
Cast5Encrypt PROC					; COMDAT

; 589  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 590  : 	word32 l = BE32 (((word32 *)inBlock)[0]);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR inBlock$[rsp]
  00018	8b 08		 mov	 ecx, DWORD PTR [rax]
  0001a	e8 00 00 00 00	 call	 MirrorBytes32
  0001f	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 591  : 	word32 r = BE32 (((word32 *)inBlock)[1]);

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR inBlock$[rsp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0002b	e8 00 00 00 00	 call	 MirrorBytes32
  00030	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 592  : 	word32 *K = key->K;

  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR key$[rsp]
  00039	48 89 44 24 20	 mov	 QWORD PTR K$[rsp], rax

; 593  : 	word32 t;
; 594  : 
; 595  : 	/* Do the work */
; 596  : 	F1(l, r,  0, 16);

  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00043	8b 08		 mov	 ecx, DWORD PTR [rax]
  00045	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0004e	8b 50 40	 mov	 edx, DWORD PTR [rax+64]
  00051	e8 00 00 00 00	 call	 rotlVariable
  00056	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0005a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0005e	c1 e8 18	 shr	 eax, 24
  00061	44 0f b6 c0	 movzx	 r8d, al
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00073	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00077	c1 e8 10	 shr	 eax, 16
  0007a	0f b6 c0	 movzx	 eax, al
  0007d	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00084	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00088	33 c8		 xor	 ecx, eax
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00091	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00095	c1 e8 08	 shr	 eax, 8
  00098	0f b6 c0	 movzx	 eax, al
  0009b	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  000a9	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  000ae	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  000b5	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  000b9	33 c1		 xor	 eax, ecx
  000bb	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 597  : 	F2(r, l,  1, 16);

  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  000c4	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  000c8	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  000cb	33 c8		 xor	 ecx, eax
  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  000d2	8b 50 44	 mov	 edx, DWORD PTR [rax+68]
  000d5	e8 00 00 00 00	 call	 rotlVariable
  000da	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  000de	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  000e2	c1 e8 18	 shr	 eax, 24
  000e5	44 0f b6 c0	 movzx	 r8d, al
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  000f7	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  000fb	c1 e8 10	 shr	 eax, 16
  000fe	0f b6 c0	 movzx	 eax, al
  00101	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00108	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  0010c	2b c8		 sub	 ecx, eax
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00115	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00119	c1 e8 08	 shr	 eax, 8
  0011c	0f b6 c0	 movzx	 eax, al
  0011f	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0012d	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00132	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  00139	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0013d	33 c1		 xor	 eax, ecx
  0013f	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 598  : 	F3(l, r,  2, 16);

  00143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00148	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0014c	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0014f	2b c8		 sub	 ecx, eax
  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00156	8b 50 48	 mov	 edx, DWORD PTR [rax+72]
  00159	e8 00 00 00 00	 call	 rotlVariable
  0015e	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00162	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00166	c1 e8 18	 shr	 eax, 24
  00169	44 0f b6 c0	 movzx	 r8d, al
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0017b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0017f	c1 e8 10	 shr	 eax, 16
  00182	0f b6 c0	 movzx	 eax, al
  00185	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00189	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00197	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0019b	c1 e8 08	 shr	 eax, 8
  0019e	0f b6 c0	 movzx	 eax, al
  001a1	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  001af	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  001b4	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  001bb	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  001bf	33 c1		 xor	 eax, ecx
  001c1	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 599  : 	F1(r, l,  3, 16);

  001c5	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  001ca	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  001cd	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  001d1	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  001d6	8b 50 4c	 mov	 edx, DWORD PTR [rax+76]
  001d9	e8 00 00 00 00	 call	 rotlVariable
  001de	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  001e2	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  001e6	c1 e8 18	 shr	 eax, 24
  001e9	44 0f b6 c0	 movzx	 r8d, al
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  001fb	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  001ff	c1 e8 10	 shr	 eax, 16
  00202	0f b6 c0	 movzx	 eax, al
  00205	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0020c	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00210	33 c8		 xor	 ecx, eax
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00219	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0021d	c1 e8 08	 shr	 eax, 8
  00220	0f b6 c0	 movzx	 eax, al
  00223	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00231	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00236	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0023d	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00241	33 c1		 xor	 eax, ecx
  00243	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 600  : 	F2(l, r,  4, 16);

  00247	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  0024c	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00250	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00253	33 c8		 xor	 ecx, eax
  00255	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0025a	8b 50 50	 mov	 edx, DWORD PTR [rax+80]
  0025d	e8 00 00 00 00	 call	 rotlVariable
  00262	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00266	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0026a	c1 e8 18	 shr	 eax, 24
  0026d	44 0f b6 c0	 movzx	 r8d, al
  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0027f	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00283	c1 e8 10	 shr	 eax, 16
  00286	0f b6 c0	 movzx	 eax, al
  00289	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00290	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00294	2b c8		 sub	 ecx, eax
  00296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0029d	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  002a1	c1 e8 08	 shr	 eax, 8
  002a4	0f b6 c0	 movzx	 eax, al
  002a7	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  002ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  002b5	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  002ba	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  002c1	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  002c5	33 c1		 xor	 eax, ecx
  002c7	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 601  : 	F3(r, l,  5, 16);

  002cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  002d0	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  002d4	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  002d7	2b c8		 sub	 ecx, eax
  002d9	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  002de	8b 50 54	 mov	 edx, DWORD PTR [rax+84]
  002e1	e8 00 00 00 00	 call	 rotlVariable
  002e6	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  002ea	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  002ee	c1 e8 18	 shr	 eax, 24
  002f1	44 0f b6 c0	 movzx	 r8d, al
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00303	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00307	c1 e8 10	 shr	 eax, 16
  0030a	0f b6 c0	 movzx	 eax, al
  0030d	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00311	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0031f	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00323	c1 e8 08	 shr	 eax, 8
  00326	0f b6 c0	 movzx	 eax, al
  00329	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  00330	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00337	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  0033c	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  00343	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00347	33 c1		 xor	 eax, ecx
  00349	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 602  : 	F1(l, r,  6, 16);

  0034d	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00352	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00355	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  00359	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0035e	8b 50 58	 mov	 edx, DWORD PTR [rax+88]
  00361	e8 00 00 00 00	 call	 rotlVariable
  00366	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0036a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0036e	c1 e8 18	 shr	 eax, 24
  00371	44 0f b6 c0	 movzx	 r8d, al
  00375	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0037c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00383	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00387	c1 e8 10	 shr	 eax, 16
  0038a	0f b6 c0	 movzx	 eax, al
  0038d	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00394	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00398	33 c8		 xor	 ecx, eax
  0039a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  003a1	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  003a5	c1 e8 08	 shr	 eax, 8
  003a8	0f b6 c0	 movzx	 eax, al
  003ab	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  003b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  003b9	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  003be	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  003c5	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  003c9	33 c1		 xor	 eax, ecx
  003cb	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 603  : 	F2(r, l,  7, 16);

  003cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  003d4	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  003d8	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  003db	33 c8		 xor	 ecx, eax
  003dd	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  003e2	8b 50 5c	 mov	 edx, DWORD PTR [rax+92]
  003e5	e8 00 00 00 00	 call	 rotlVariable
  003ea	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  003ee	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  003f2	c1 e8 18	 shr	 eax, 24
  003f5	44 0f b6 c0	 movzx	 r8d, al
  003f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00407	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0040b	c1 e8 10	 shr	 eax, 16
  0040e	0f b6 c0	 movzx	 eax, al
  00411	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00418	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  0041c	2b c8		 sub	 ecx, eax
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00425	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00429	c1 e8 08	 shr	 eax, 8
  0042c	0f b6 c0	 movzx	 eax, al
  0042f	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0043d	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00442	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  00449	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0044d	33 c1		 xor	 eax, ecx
  0044f	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 604  : 	F3(l, r,  8, 16);

  00453	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00458	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0045c	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  0045f	2b c8		 sub	 ecx, eax
  00461	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00466	8b 50 60	 mov	 edx, DWORD PTR [rax+96]
  00469	e8 00 00 00 00	 call	 rotlVariable
  0046e	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00472	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00476	c1 e8 18	 shr	 eax, 24
  00479	44 0f b6 c0	 movzx	 r8d, al
  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00484	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0048b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0048f	c1 e8 10	 shr	 eax, 16
  00492	0f b6 c0	 movzx	 eax, al
  00495	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00499	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  004a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  004a7	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  004ab	c1 e8 08	 shr	 eax, 8
  004ae	0f b6 c0	 movzx	 eax, al
  004b1	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  004b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  004bf	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  004c4	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  004cb	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  004cf	33 c1		 xor	 eax, ecx
  004d1	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 605  : 	F1(r, l,  9, 16);

  004d5	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  004da	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  004dd	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  004e1	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  004e6	8b 50 64	 mov	 edx, DWORD PTR [rax+100]
  004e9	e8 00 00 00 00	 call	 rotlVariable
  004ee	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  004f2	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  004f6	c1 e8 18	 shr	 eax, 24
  004f9	44 0f b6 c0	 movzx	 r8d, al
  004fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0050b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0050f	c1 e8 10	 shr	 eax, 16
  00512	0f b6 c0	 movzx	 eax, al
  00515	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0051c	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00520	33 c8		 xor	 ecx, eax
  00522	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00529	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0052d	c1 e8 08	 shr	 eax, 8
  00530	0f b6 c0	 movzx	 eax, al
  00533	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0053a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00541	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00546	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0054d	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00551	33 c1		 xor	 eax, ecx
  00553	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 606  : 	F2(l, r, 10, 16);

  00557	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  0055c	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00560	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00563	33 c8		 xor	 ecx, eax
  00565	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0056a	8b 50 68	 mov	 edx, DWORD PTR [rax+104]
  0056d	e8 00 00 00 00	 call	 rotlVariable
  00572	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00576	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0057a	c1 e8 18	 shr	 eax, 24
  0057d	44 0f b6 c0	 movzx	 r8d, al
  00581	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0058f	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00593	c1 e8 10	 shr	 eax, 16
  00596	0f b6 c0	 movzx	 eax, al
  00599	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  005a0	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  005a4	2b c8		 sub	 ecx, eax
  005a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  005ad	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  005b1	c1 e8 08	 shr	 eax, 8
  005b4	0f b6 c0	 movzx	 eax, al
  005b7	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  005be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  005c5	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  005ca	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  005d1	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  005d5	33 c1		 xor	 eax, ecx
  005d7	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 607  : 	F3(r, l, 11, 16);

  005db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  005e0	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  005e4	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  005e7	2b c8		 sub	 ecx, eax
  005e9	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  005ee	8b 50 6c	 mov	 edx, DWORD PTR [rax+108]
  005f1	e8 00 00 00 00	 call	 rotlVariable
  005f6	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  005fa	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  005fe	c1 e8 18	 shr	 eax, 24
  00601	44 0f b6 c0	 movzx	 r8d, al
  00605	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0060c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00613	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00617	c1 e8 10	 shr	 eax, 16
  0061a	0f b6 c0	 movzx	 eax, al
  0061d	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  00621	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  00628	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0062f	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00633	c1 e8 08	 shr	 eax, 8
  00636	0f b6 c0	 movzx	 eax, al
  00639	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  00640	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00647	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  0064c	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  00653	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00657	33 c1		 xor	 eax, ecx
  00659	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 608  : 	F1(l, r, 12, 16);

  0065d	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00662	8b 48 30	 mov	 ecx, DWORD PTR [rax+48]
  00665	03 4c 24 2c	 add	 ecx, DWORD PTR r$[rsp]
  00669	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  0066e	8b 50 70	 mov	 edx, DWORD PTR [rax+112]
  00671	e8 00 00 00 00	 call	 rotlVariable
  00676	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  0067a	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0067e	c1 e8 18	 shr	 eax, 24
  00681	44 0f b6 c0	 movzx	 r8d, al
  00685	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0068c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00693	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00697	c1 e8 10	 shr	 eax, 16
  0069a	0f b6 c0	 movzx	 eax, al
  0069d	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  006a4	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  006a8	33 c8		 xor	 ecx, eax
  006aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  006b1	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  006b5	c1 e8 08	 shr	 eax, 8
  006b8	0f b6 c0	 movzx	 eax, al
  006bb	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  006c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  006c9	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  006ce	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  006d5	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  006d9	33 c1		 xor	 eax, ecx
  006db	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 609  : 	F2(r, l, 13, 16);

  006df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  006e4	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  006e8	8b 49 34	 mov	 ecx, DWORD PTR [rcx+52]
  006eb	33 c8		 xor	 ecx, eax
  006ed	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  006f2	8b 50 74	 mov	 edx, DWORD PTR [rax+116]
  006f5	e8 00 00 00 00	 call	 rotlVariable
  006fa	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  006fe	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00702	c1 e8 18	 shr	 eax, 24
  00705	44 0f b6 c0	 movzx	 r8d, al
  00709	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00710	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00717	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0071b	c1 e8 10	 shr	 eax, 16
  0071e	0f b6 c0	 movzx	 eax, al
  00721	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  00728	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  0072c	2b c8		 sub	 ecx, eax
  0072e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00735	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00739	c1 e8 08	 shr	 eax, 8
  0073c	0f b6 c0	 movzx	 eax, al
  0073f	03 8c 82 00 08
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+2048]
  00746	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0074d	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00752	33 8c 82 00 0c
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+3072]
  00759	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0075d	33 c1		 xor	 eax, ecx
  0075f	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 610  : 	F3(l, r, 14, 16);

  00763	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp]
  00768	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  0076c	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  0076f	2b c8		 sub	 ecx, eax
  00771	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  00776	8b 50 78	 mov	 edx, DWORD PTR [rax+120]
  00779	e8 00 00 00 00	 call	 rotlVariable
  0077e	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00782	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00786	c1 e8 18	 shr	 eax, 24
  00789	44 0f b6 c0	 movzx	 r8d, al
  0078d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  00794	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  0079b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0079f	c1 e8 10	 shr	 eax, 16
  007a2	0f b6 c0	 movzx	 eax, al
  007a5	42 8b 0c 81	 mov	 ecx, DWORD PTR [rcx+r8*4]
  007a9	03 8c 82 00 04
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+1024]
  007b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  007b7	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  007bb	c1 e8 08	 shr	 eax, 8
  007be	0f b6 c0	 movzx	 eax, al
  007c1	33 8c 82 00 08
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+2048]
  007c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  007cf	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  007d4	2b 8c 82 00 0c
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+3072]
  007db	8b 44 24 28	 mov	 eax, DWORD PTR l$[rsp]
  007df	33 c1		 xor	 eax, ecx
  007e1	89 44 24 28	 mov	 DWORD PTR l$[rsp], eax

; 611  : 	F1(r, l, 15, 16);

  007e5	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  007ea	8b 48 3c	 mov	 ecx, DWORD PTR [rax+60]
  007ed	03 4c 24 28	 add	 ecx, DWORD PTR l$[rsp]
  007f1	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp]
  007f6	8b 50 7c	 mov	 edx, DWORD PTR [rax+124]
  007f9	e8 00 00 00 00	 call	 rotlVariable
  007fe	89 44 24 30	 mov	 DWORD PTR t$[rsp], eax
  00802	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  00806	c1 e8 18	 shr	 eax, 24
  00809	44 0f b6 c0	 movzx	 r8d, al
  0080d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00814	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:S
  0081b	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0081f	c1 e8 10	 shr	 eax, 16
  00822	0f b6 c0	 movzx	 eax, al
  00825	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  0082c	42 8b 0c 82	 mov	 ecx, DWORD PTR [rdx+r8*4]
  00830	33 c8		 xor	 ecx, eax
  00832	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00839	8b 44 24 30	 mov	 eax, DWORD PTR t$[rsp]
  0083d	c1 e8 08	 shr	 eax, 8
  00840	0f b6 c0	 movzx	 eax, al
  00843	2b 8c 82 00 08
	00 00		 sub	 ecx, DWORD PTR [rdx+rax*4+2048]
  0084a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:S
  00851	0f b6 44 24 30	 movzx	 eax, BYTE PTR t$[rsp]
  00856	03 8c 82 00 0c
	00 00		 add	 ecx, DWORD PTR [rdx+rax*4+3072]
  0085d	8b 44 24 2c	 mov	 eax, DWORD PTR r$[rsp]
  00861	33 c1		 xor	 eax, ecx
  00863	89 44 24 2c	 mov	 DWORD PTR r$[rsp], eax

; 612  : 
; 613  : 	/* Put l,r into outblock */
; 614  : 	((word32 *)outBlock)[0] = BE32 (r);

  00867	8b 4c 24 2c	 mov	 ecx, DWORD PTR r$[rsp]
  0086b	e8 00 00 00 00	 call	 MirrorBytes32
  00870	44 8b d8	 mov	 r11d, eax
  00873	48 8b 44 24 58	 mov	 rax, QWORD PTR outBlock$[rsp]
  00878	44 89 18	 mov	 DWORD PTR [rax], r11d

; 615  : 	((word32 *)outBlock)[1] = BE32 (l);

  0087b	8b 4c 24 28	 mov	 ecx, DWORD PTR l$[rsp]
  0087f	e8 00 00 00 00	 call	 MirrorBytes32
  00884	44 8b d8	 mov	 r11d, eax
  00887	48 8b 44 24 58	 mov	 rax, QWORD PTR outBlock$[rsp]
  0088c	44 89 58 04	 mov	 DWORD PTR [rax+4], r11d

; 616  : }

  00890	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00894	c3		 ret	 0
Cast5Encrypt ENDP
END
