; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed\src\crypto\whirlpool.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_C0	DQ	18186018c07830d8H
	DQ	23238c2305af4626H
	DQ	c6c63fc67ef991b8H
	DQ	e8e887e8136fcdfbH
	DQ	878726874ca113cbH
	DQ	b8b8dab8a9626d11H
	DQ	0101040108050209H
	DQ	4f4f214f426e9e0dH
	DQ	3636d836adee6c9bH
	DQ	a6a6a2a6590451ffH
	DQ	d2d26fd2debdb90cH
	DQ	f5f5f3f5fb06f70eH
	DQ	7979f979ef80f296H
	DQ	6f6fa16f5fcede30H
	DQ	91917e91fcef3f6dH
	DQ	52525552aa07a4f8H
	DQ	60609d6027fdc047H
	DQ	bcbccabc89766535H
	DQ	9b9b569baccd2b37H
	DQ	8e8e028e048c018aH
	DQ	a3a3b6a371155bd2H
	DQ	0c0c300c603c186cH
	DQ	7b7bf17bff8af684H
	DQ	3535d435b5e16a80H
	DQ	1d1d741de8693af5H
	DQ	e0e0a7e05347ddb3H
	DQ	d7d77bd7f6acb321H
	DQ	c2c22fc25eed999cH
	DQ	2e2eb82e6d965c43H
	DQ	4b4b314b627a9629H
	DQ	fefedffea321e15dH
	DQ	575741578216aed5H
	DQ	15155415a8412abdH
	DQ	7777c1779fb6eee8H
	DQ	3737dc37a5eb6e92H
	DQ	e5e5b3e57b56d79eH
	DQ	9f9f469f8cd92313H
	DQ	f0f0e7f0d317fd23H
	DQ	4a4a354a6a7f9420H
	DQ	dada4fda9e95a944H
	DQ	58587d58fa25b0a2H
	DQ	c9c903c906ca8fcfH
	DQ	2929a429558d527cH
	DQ	0a0a280a5022145aH
	DQ	b1b1feb1e14f7f50H
	DQ	a0a0baa0691a5dc9H
	DQ	6b6bb16b7fdad614H
	DQ	85852e855cab17d9H
	DQ	bdbdcebd8173673cH
	DQ	5d5d695dd234ba8fH
	DQ	1010401080502090H
	DQ	f4f4f7f4f303f507H
	DQ	cbcb0bcb16c08bddH
	DQ	3e3ef83eedc67cd3H
	DQ	0505140528110a2dH
	DQ	676781671fe6ce78H
	DQ	e4e4b7e47353d597H
	DQ	27279c2725bb4e02H
	DQ	4141194132588273H
	DQ	8b8b168b2c9d0ba7H
	DQ	a7a7a6a7510153f6H
	DQ	7d7de97dcf94fab2H
	DQ	95956e95dcfb3749H
	DQ	d8d847d88e9fad56H
	DQ	fbfbcbfb8b30eb70H
	DQ	eeee9fee2371c1cdH
	DQ	7c7ced7cc791f8bbH
	DQ	6666856617e3cc71H
	DQ	dddd53dda68ea77bH
	DQ	17175c17b84b2eafH
	DQ	4747014702468e45H
	DQ	9e9e429e84dc211aH
	DQ	caca0fca1ec589d4H
	DQ	2d2db42d75995a58H
	DQ	bfbfc6bf9179632eH
	DQ	07071c07381b0e3fH
	DQ	adad8ead012347acH
	DQ	5a5a755aea2fb4b0H
	DQ	838336836cb51befH
	DQ	3333cc3385ff66b6H
	DQ	636391633ff2c65cH
	DQ	02020802100a0412H
	DQ	aaaa92aa39384993H
	DQ	7171d971afa8e2deH
	DQ	c8c807c80ecf8dc6H
	DQ	19196419c87d32d1H
	DQ	494939497270923bH
	DQ	d9d943d9869aaf5fH
	DQ	f2f2eff2c31df931H
	DQ	e3e3abe34b48dba8H
	DQ	5b5b715be22ab6b9H
	DQ	88881a8834920dbcH
	DQ	9a9a529aa4c8293eH
	DQ	262698262dbe4c0bH
	DQ	3232c8328dfa64bfH
	DQ	b0b0fab0e94a7d59H
	DQ	e9e983e91b6acff2H
	DQ	0f0f3c0f78331e77H
	DQ	d5d573d5e6a6b733H
	DQ	80803a8074ba1df4H
	DQ	bebec2be997c6127H
	DQ	cdcd13cd26de87ebH
	DQ	3434d034bde46889H
	DQ	48483d487a759032H
	DQ	ffffdbffab24e354H
	DQ	7a7af57af78ff48dH
	DQ	90907a90f4ea3d64H
	DQ	5f5f615fc23ebe9dH
	DQ	202080201da0403dH
	DQ	6868bd6867d5d00fH
	DQ	1a1a681ad07234caH
	DQ	aeae82ae192c41b7H
	DQ	b4b4eab4c95e757dH
	DQ	54544d549a19a8ceH
	DQ	93937693ece53b7fH
	DQ	222288220daa442fH
	DQ	64648d6407e9c863H
	DQ	f1f1e3f1db12ff2aH
	DQ	7373d173bfa2e6ccH
	DQ	12124812905a2482H
	DQ	40401d403a5d807aH
	DQ	0808200840281048H
	DQ	c3c32bc356e89b95H
	DQ	ecec97ec337bc5dfH
	DQ	dbdb4bdb9690ab4dH
	DQ	a1a1bea1611f5fc0H
	DQ	8d8d0e8d1c830791H
	DQ	3d3df43df5c97ac8H
	DQ	97976697ccf1335bH
	DQ	0000000000000000H
	DQ	cfcf1bcf36d483f9H
	DQ	2b2bac2b4587566eH
	DQ	7676c57697b3ece1H
	DQ	8282328264b019e6H
	DQ	d6d67fd6fea9b128H
	DQ	1b1b6c1bd87736c3H
	DQ	b5b5eeb5c15b7774H
	DQ	afaf86af112943beH
	DQ	6a6ab56a77dfd41dH
	DQ	50505d50ba0da0eaH
	DQ	45450945124c8a57H
	DQ	f3f3ebf3cb18fb38H
	DQ	3030c0309df060adH
	DQ	efef9bef2b74c3c4H
	DQ	3f3ffc3fe5c37edaH
	DQ	55554955921caac7H
	DQ	a2a2b2a2791059dbH
	DQ	eaea8fea0365c9e9H
	DQ	656589650fecca6aH
	DQ	babad2bab9686903H
	DQ	2f2fbc2f65935e4aH
	DQ	c0c027c04ee79d8eH
	DQ	dede5fdebe81a160H
	DQ	1c1c701ce06c38fcH
	DQ	fdfdd3fdbb2ee746H
	DQ	4d4d294d52649a1fH
	DQ	92927292e4e03976H
	DQ	7575c9758fbceafaH
	DQ	06061806301e0c36H
	DQ	8a8a128a249809aeH
	DQ	b2b2f2b2f940794bH
	DQ	e6e6bfe66359d185H
	DQ	0e0e380e70361c7eH
	DQ	1f1f7c1ff8633ee7H
	DQ	6262956237f7c455H
	DQ	d4d477d4eea3b53aH
	DQ	a8a89aa829324d81H
	DQ	96966296c4f43152H
	DQ	f9f9c3f99b3aef62H
	DQ	c5c533c566f697a3H
	DQ	2525942535b14a10H
	DQ	59597959f220b2abH
	DQ	84842a8454ae15d0H
	DQ	7272d572b7a7e4c5H
	DQ	3939e439d5dd72ecH
	DQ	4c4c2d4c5a619816H
	DQ	5e5e655eca3bbc94H
	DQ	7878fd78e785f09fH
	DQ	3838e038ddd870e5H
	DQ	8c8c0a8c14860598H
	DQ	d1d163d1c6b2bf17H
	DQ	a5a5aea5410b57e4H
	DQ	e2e2afe2434dd9a1H
	DQ	616199612ff8c24eH
	DQ	b3b3f6b3f1457b42H
	DQ	2121842115a54234H
	DQ	9c9c4a9c94d62508H
	DQ	1e1e781ef0663ceeH
	DQ	4343114322528661H
	DQ	c7c73bc776fc93b1H
	DQ	fcfcd7fcb32be54fH
	DQ	0404100420140824H
	DQ	51515951b208a2e3H
	DQ	99995e99bcc72f25H
	DQ	6d6da96d4fc4da22H
	DQ	0d0d340d68391a65H
	DQ	fafacffa8335e979H
	DQ	dfdf5bdfb684a369H
	DQ	7e7ee57ed79bfca9H
	DQ	242490243db44819H
	DQ	3b3bec3bc5d776feH
	DQ	abab96ab313d4b9aH
	DQ	cece1fce3ed181f0H
	DQ	1111441188552299H
	DQ	8f8f068f0c890383H
	DQ	4e4e254e4a6b9c04H
	DQ	b7b7e6b7d1517366H
	DQ	ebeb8beb0b60cbe0H
	DQ	3c3cf03cfdcc78c1H
	DQ	81813e817cbf1ffdH
	DQ	94946a94d4fe3540H
	DQ	f7f7fbf7eb0cf31cH
	DQ	b9b9deb9a1676f18H
	DQ	13134c13985f268bH
	DQ	2c2cb02c7d9c5851H
	DQ	d3d36bd3d6b8bb05H
	DQ	e7e7bbe76b5cd38cH
	DQ	6e6ea56e57cbdc39H
	DQ	c4c437c46ef395aaH
	DQ	03030c03180f061bH
	DQ	565645568a13acdcH
	DQ	44440d441a49885eH
	DQ	7f7fe17fdf9efea0H
	DQ	a9a99ea921374f88H
	DQ	2a2aa82a4d825467H
	DQ	bbbbd6bbb16d6b0aH
	DQ	c1c123c146e29f87H
	DQ	53535153a202a6f1H
	DQ	dcdc57dcae8ba572H
	DQ	0b0b2c0b58271653H
	DQ	9d9d4e9d9cd32701H
	DQ	6c6cad6c47c1d82bH
	DQ	3131c43195f562a4H
	DQ	7474cd7487b9e8f3H
	DQ	f6f6fff6e309f115H
	DQ	464605460a438c4cH
	DQ	acac8aac092645a5H
	DQ	89891e893c970fb5H
	DQ	14145014a04428b4H
	DQ	e1e1a3e15b42dfbaH
	DQ	16165816b04e2ca6H
	DQ	3a3ae83acdd274f7H
	DQ	6969b9696fd0d206H
	DQ	09092409482d1241H
	DQ	7070dd70a7ade0d7H
	DQ	b6b6e2b6d954716fH
	DQ	d0d067d0ceb7bd1eH
	DQ	eded93ed3b7ec7d6H
	DQ	cccc17cc2edb85e2H
	DQ	424215422a578468H
	DQ	98985a98b4c22d2cH
	DQ	a4a4aaa4490e55edH
	DQ	2828a0285d885075H
	DQ	5c5c6d5cda31b886H
	DQ	f8f8c7f8933fed6bH
	DQ	8686228644a411c2H
_C1	DQ	d818186018c07830H
	DQ	2623238c2305af46H
	DQ	b8c6c63fc67ef991H
	DQ	fbe8e887e8136fcdH
	DQ	cb878726874ca113H
	DQ	11b8b8dab8a9626dH
	DQ	0901010401080502H
	DQ	0d4f4f214f426e9eH
	DQ	9b3636d836adee6cH
	DQ	ffa6a6a2a6590451H
	DQ	0cd2d26fd2debdb9H
	DQ	0ef5f5f3f5fb06f7H
	DQ	967979f979ef80f2H
	DQ	306f6fa16f5fcedeH
	DQ	6d91917e91fcef3fH
	DQ	f852525552aa07a4H
	DQ	4760609d6027fdc0H
	DQ	35bcbccabc897665H
	DQ	379b9b569baccd2bH
	DQ	8a8e8e028e048c01H
	DQ	d2a3a3b6a371155bH
	DQ	6c0c0c300c603c18H
	DQ	847b7bf17bff8af6H
	DQ	803535d435b5e16aH
	DQ	f51d1d741de8693aH
	DQ	b3e0e0a7e05347ddH
	DQ	21d7d77bd7f6acb3H
	DQ	9cc2c22fc25eed99H
	DQ	432e2eb82e6d965cH
	DQ	294b4b314b627a96H
	DQ	5dfefedffea321e1H
	DQ	d5575741578216aeH
	DQ	bd15155415a8412aH
	DQ	e87777c1779fb6eeH
	DQ	923737dc37a5eb6eH
	DQ	9ee5e5b3e57b56d7H
	DQ	139f9f469f8cd923H
	DQ	23f0f0e7f0d317fdH
	DQ	204a4a354a6a7f94H
	DQ	44dada4fda9e95a9H
	DQ	a258587d58fa25b0H
	DQ	cfc9c903c906ca8fH
	DQ	7c2929a429558d52H
	DQ	5a0a0a280a502214H
	DQ	50b1b1feb1e14f7fH
	DQ	c9a0a0baa0691a5dH
	DQ	146b6bb16b7fdad6H
	DQ	d985852e855cab17H
	DQ	3cbdbdcebd817367H
	DQ	8f5d5d695dd234baH
	DQ	9010104010805020H
	DQ	07f4f4f7f4f303f5H
	DQ	ddcbcb0bcb16c08bH
	DQ	d33e3ef83eedc67cH
	DQ	2d0505140528110aH
	DQ	78676781671fe6ceH
	DQ	97e4e4b7e47353d5H
	DQ	0227279c2725bb4eH
	DQ	7341411941325882H
	DQ	a78b8b168b2c9d0bH
	DQ	f6a7a7a6a7510153H
	DQ	b27d7de97dcf94faH
	DQ	4995956e95dcfb37H
	DQ	56d8d847d88e9fadH
	DQ	70fbfbcbfb8b30ebH
	DQ	cdeeee9fee2371c1H
	DQ	bb7c7ced7cc791f8H
	DQ	716666856617e3ccH
	DQ	7bdddd53dda68ea7H
	DQ	af17175c17b84b2eH
	DQ	454747014702468eH
	DQ	1a9e9e429e84dc21H
	DQ	d4caca0fca1ec589H
	DQ	582d2db42d75995aH
	DQ	2ebfbfc6bf917963H
	DQ	3f07071c07381b0eH
	DQ	acadad8ead012347H
	DQ	b05a5a755aea2fb4H
	DQ	ef838336836cb51bH
	DQ	b63333cc3385ff66H
	DQ	5c636391633ff2c6H
	DQ	1202020802100a04H
	DQ	93aaaa92aa393849H
	DQ	de7171d971afa8e2H
	DQ	c6c8c807c80ecf8dH
	DQ	d119196419c87d32H
	DQ	3b49493949727092H
	DQ	5fd9d943d9869aafH
	DQ	31f2f2eff2c31df9H
	DQ	a8e3e3abe34b48dbH
	DQ	b95b5b715be22ab6H
	DQ	bc88881a8834920dH
	DQ	3e9a9a529aa4c829H
	DQ	0b262698262dbe4cH
	DQ	bf3232c8328dfa64H
	DQ	59b0b0fab0e94a7dH
	DQ	f2e9e983e91b6acfH
	DQ	770f0f3c0f78331eH
	DQ	33d5d573d5e6a6b7H
	DQ	f480803a8074ba1dH
	DQ	27bebec2be997c61H
	DQ	ebcdcd13cd26de87H
	DQ	893434d034bde468H
	DQ	3248483d487a7590H
	DQ	54ffffdbffab24e3H
	DQ	8d7a7af57af78ff4H
	DQ	6490907a90f4ea3dH
	DQ	9d5f5f615fc23ebeH
	DQ	3d202080201da040H
	DQ	0f6868bd6867d5d0H
	DQ	ca1a1a681ad07234H
	DQ	b7aeae82ae192c41H
	DQ	7db4b4eab4c95e75H
	DQ	ce54544d549a19a8H
	DQ	7f93937693ece53bH
	DQ	2f222288220daa44H
	DQ	6364648d6407e9c8H
	DQ	2af1f1e3f1db12ffH
	DQ	cc7373d173bfa2e6H
	DQ	8212124812905a24H
	DQ	7a40401d403a5d80H
	DQ	4808082008402810H
	DQ	95c3c32bc356e89bH
	DQ	dfecec97ec337bc5H
	DQ	4ddbdb4bdb9690abH
	DQ	c0a1a1bea1611f5fH
	DQ	918d8d0e8d1c8307H
	DQ	c83d3df43df5c97aH
	DQ	5b97976697ccf133H
	DQ	0000000000000000H
	DQ	f9cfcf1bcf36d483H
	DQ	6e2b2bac2b458756H
	DQ	e17676c57697b3ecH
	DQ	e68282328264b019H
	DQ	28d6d67fd6fea9b1H
	DQ	c31b1b6c1bd87736H
	DQ	74b5b5eeb5c15b77H
	DQ	beafaf86af112943H
	DQ	1d6a6ab56a77dfd4H
	DQ	ea50505d50ba0da0H
	DQ	5745450945124c8aH
	DQ	38f3f3ebf3cb18fbH
	DQ	ad3030c0309df060H
	DQ	c4efef9bef2b74c3H
	DQ	da3f3ffc3fe5c37eH
	DQ	c755554955921caaH
	DQ	dba2a2b2a2791059H
	DQ	e9eaea8fea0365c9H
	DQ	6a656589650feccaH
	DQ	03babad2bab96869H
	DQ	4a2f2fbc2f65935eH
	DQ	8ec0c027c04ee79dH
	DQ	60dede5fdebe81a1H
	DQ	fc1c1c701ce06c38H
	DQ	46fdfdd3fdbb2ee7H
	DQ	1f4d4d294d52649aH
	DQ	7692927292e4e039H
	DQ	fa7575c9758fbceaH
	DQ	3606061806301e0cH
	DQ	ae8a8a128a249809H
	DQ	4bb2b2f2b2f94079H
	DQ	85e6e6bfe66359d1H
	DQ	7e0e0e380e70361cH
	DQ	e71f1f7c1ff8633eH
	DQ	556262956237f7c4H
	DQ	3ad4d477d4eea3b5H
	DQ	81a8a89aa829324dH
	DQ	5296966296c4f431H
	DQ	62f9f9c3f99b3aefH
	DQ	a3c5c533c566f697H
	DQ	102525942535b14aH
	DQ	ab59597959f220b2H
	DQ	d084842a8454ae15H
	DQ	c57272d572b7a7e4H
	DQ	ec3939e439d5dd72H
	DQ	164c4c2d4c5a6198H
	DQ	945e5e655eca3bbcH
	DQ	9f7878fd78e785f0H
	DQ	e53838e038ddd870H
	DQ	988c8c0a8c148605H
	DQ	17d1d163d1c6b2bfH
	DQ	e4a5a5aea5410b57H
	DQ	a1e2e2afe2434dd9H
	DQ	4e616199612ff8c2H
	DQ	42b3b3f6b3f1457bH
	DQ	342121842115a542H
	DQ	089c9c4a9c94d625H
	DQ	ee1e1e781ef0663cH
	DQ	6143431143225286H
	DQ	b1c7c73bc776fc93H
	DQ	4ffcfcd7fcb32be5H
	DQ	2404041004201408H
	DQ	e351515951b208a2H
	DQ	2599995e99bcc72fH
	DQ	226d6da96d4fc4daH
	DQ	650d0d340d68391aH
	DQ	79fafacffa8335e9H
	DQ	69dfdf5bdfb684a3H
	DQ	a97e7ee57ed79bfcH
	DQ	19242490243db448H
	DQ	fe3b3bec3bc5d776H
	DQ	9aabab96ab313d4bH
	DQ	f0cece1fce3ed181H
	DQ	9911114411885522H
	DQ	838f8f068f0c8903H
	DQ	044e4e254e4a6b9cH
	DQ	66b7b7e6b7d15173H
	DQ	e0ebeb8beb0b60cbH
	DQ	c13c3cf03cfdcc78H
	DQ	fd81813e817cbf1fH
	DQ	4094946a94d4fe35H
	DQ	1cf7f7fbf7eb0cf3H
	DQ	18b9b9deb9a1676fH
	DQ	8b13134c13985f26H
	DQ	512c2cb02c7d9c58H
	DQ	05d3d36bd3d6b8bbH
	DQ	8ce7e7bbe76b5cd3H
	DQ	396e6ea56e57cbdcH
	DQ	aac4c437c46ef395H
	DQ	1b03030c03180f06H
	DQ	dc565645568a13acH
	DQ	5e44440d441a4988H
	DQ	a07f7fe17fdf9efeH
	DQ	88a9a99ea921374fH
	DQ	672a2aa82a4d8254H
	DQ	0abbbbd6bbb16d6bH
	DQ	87c1c123c146e29fH
	DQ	f153535153a202a6H
	DQ	72dcdc57dcae8ba5H
	DQ	530b0b2c0b582716H
	DQ	019d9d4e9d9cd327H
	DQ	2b6c6cad6c47c1d8H
	DQ	a43131c43195f562H
	DQ	f37474cd7487b9e8H
	DQ	15f6f6fff6e309f1H
	DQ	4c464605460a438cH
	DQ	a5acac8aac092645H
	DQ	b589891e893c970fH
	DQ	b414145014a04428H
	DQ	bae1e1a3e15b42dfH
	DQ	a616165816b04e2cH
	DQ	f73a3ae83acdd274H
	DQ	066969b9696fd0d2H
	DQ	4109092409482d12H
	DQ	d77070dd70a7ade0H
	DQ	6fb6b6e2b6d95471H
	DQ	1ed0d067d0ceb7bdH
	DQ	d6eded93ed3b7ec7H
	DQ	e2cccc17cc2edb85H
	DQ	68424215422a5784H
	DQ	2c98985a98b4c22dH
	DQ	eda4a4aaa4490e55H
	DQ	752828a0285d8850H
	DQ	865c5c6d5cda31b8H
	DQ	6bf8f8c7f8933fedH
	DQ	c28686228644a411H
_C2	DQ	30d818186018c078H
	DQ	462623238c2305afH
	DQ	91b8c6c63fc67ef9H
	DQ	cdfbe8e887e8136fH
	DQ	13cb878726874ca1H
	DQ	6d11b8b8dab8a962H
	DQ	0209010104010805H
	DQ	9e0d4f4f214f426eH
	DQ	6c9b3636d836adeeH
	DQ	51ffa6a6a2a65904H
	DQ	b90cd2d26fd2debdH
	DQ	f70ef5f5f3f5fb06H
	DQ	f2967979f979ef80H
	DQ	de306f6fa16f5fceH
	DQ	3f6d91917e91fcefH
	DQ	a4f852525552aa07H
	DQ	c04760609d6027fdH
	DQ	6535bcbccabc8976H
	DQ	2b379b9b569baccdH
	DQ	018a8e8e028e048cH
	DQ	5bd2a3a3b6a37115H
	DQ	186c0c0c300c603cH
	DQ	f6847b7bf17bff8aH
	DQ	6a803535d435b5e1H
	DQ	3af51d1d741de869H
	DQ	ddb3e0e0a7e05347H
	DQ	b321d7d77bd7f6acH
	DQ	999cc2c22fc25eedH
	DQ	5c432e2eb82e6d96H
	DQ	96294b4b314b627aH
	DQ	e15dfefedffea321H
	DQ	aed5575741578216H
	DQ	2abd15155415a841H
	DQ	eee87777c1779fb6H
	DQ	6e923737dc37a5ebH
	DQ	d79ee5e5b3e57b56H
	DQ	23139f9f469f8cd9H
	DQ	fd23f0f0e7f0d317H
	DQ	94204a4a354a6a7fH
	DQ	a944dada4fda9e95H
	DQ	b0a258587d58fa25H
	DQ	8fcfc9c903c906caH
	DQ	527c2929a429558dH
	DQ	145a0a0a280a5022H
	DQ	7f50b1b1feb1e14fH
	DQ	5dc9a0a0baa0691aH
	DQ	d6146b6bb16b7fdaH
	DQ	17d985852e855cabH
	DQ	673cbdbdcebd8173H
	DQ	ba8f5d5d695dd234H
	DQ	2090101040108050H
	DQ	f507f4f4f7f4f303H
	DQ	8bddcbcb0bcb16c0H
	DQ	7cd33e3ef83eedc6H
	DQ	0a2d050514052811H
	DQ	ce78676781671fe6H
	DQ	d597e4e4b7e47353H
	DQ	4e0227279c2725bbH
	DQ	8273414119413258H
	DQ	0ba78b8b168b2c9dH
	DQ	53f6a7a7a6a75101H
	DQ	fab27d7de97dcf94H
	DQ	374995956e95dcfbH
	DQ	ad56d8d847d88e9fH
	DQ	eb70fbfbcbfb8b30H
	DQ	c1cdeeee9fee2371H
	DQ	f8bb7c7ced7cc791H
	DQ	cc716666856617e3H
	DQ	a77bdddd53dda68eH
	DQ	2eaf17175c17b84bH
	DQ	8e45474701470246H
	DQ	211a9e9e429e84dcH
	DQ	89d4caca0fca1ec5H
	DQ	5a582d2db42d7599H
	DQ	632ebfbfc6bf9179H
	DQ	0e3f07071c07381bH
	DQ	47acadad8ead0123H
	DQ	b4b05a5a755aea2fH
	DQ	1bef838336836cb5H
	DQ	66b63333cc3385ffH
	DQ	c65c636391633ff2H
	DQ	041202020802100aH
	DQ	4993aaaa92aa3938H
	DQ	e2de7171d971afa8H
	DQ	8dc6c8c807c80ecfH
	DQ	32d119196419c87dH
	DQ	923b494939497270H
	DQ	af5fd9d943d9869aH
	DQ	f931f2f2eff2c31dH
	DQ	dba8e3e3abe34b48H
	DQ	b6b95b5b715be22aH
	DQ	0dbc88881a883492H
	DQ	293e9a9a529aa4c8H
	DQ	4c0b262698262dbeH
	DQ	64bf3232c8328dfaH
	DQ	7d59b0b0fab0e94aH
	DQ	cff2e9e983e91b6aH
	DQ	1e770f0f3c0f7833H
	DQ	b733d5d573d5e6a6H
	DQ	1df480803a8074baH
	DQ	6127bebec2be997cH
	DQ	87ebcdcd13cd26deH
	DQ	68893434d034bde4H
	DQ	903248483d487a75H
	DQ	e354ffffdbffab24H
	DQ	f48d7a7af57af78fH
	DQ	3d6490907a90f4eaH
	DQ	be9d5f5f615fc23eH
	DQ	403d202080201da0H
	DQ	d00f6868bd6867d5H
	DQ	34ca1a1a681ad072H
	DQ	41b7aeae82ae192cH
	DQ	757db4b4eab4c95eH
	DQ	a8ce54544d549a19H
	DQ	3b7f93937693ece5H
	DQ	442f222288220daaH
	DQ	c86364648d6407e9H
	DQ	ff2af1f1e3f1db12H
	DQ	e6cc7373d173bfa2H
	DQ	248212124812905aH
	DQ	807a40401d403a5dH
	DQ	1048080820084028H
	DQ	9b95c3c32bc356e8H
	DQ	c5dfecec97ec337bH
	DQ	ab4ddbdb4bdb9690H
	DQ	5fc0a1a1bea1611fH
	DQ	07918d8d0e8d1c83H
	DQ	7ac83d3df43df5c9H
	DQ	335b97976697ccf1H
	DQ	0000000000000000H
	DQ	83f9cfcf1bcf36d4H
	DQ	566e2b2bac2b4587H
	DQ	ece17676c57697b3H
	DQ	19e68282328264b0H
	DQ	b128d6d67fd6fea9H
	DQ	36c31b1b6c1bd877H
	DQ	7774b5b5eeb5c15bH
	DQ	43beafaf86af1129H
	DQ	d41d6a6ab56a77dfH
	DQ	a0ea50505d50ba0dH
	DQ	8a5745450945124cH
	DQ	fb38f3f3ebf3cb18H
	DQ	60ad3030c0309df0H
	DQ	c3c4efef9bef2b74H
	DQ	7eda3f3ffc3fe5c3H
	DQ	aac755554955921cH
	DQ	59dba2a2b2a27910H
	DQ	c9e9eaea8fea0365H
	DQ	ca6a656589650fecH
	DQ	6903babad2bab968H
	DQ	5e4a2f2fbc2f6593H
	DQ	9d8ec0c027c04ee7H
	DQ	a160dede5fdebe81H
	DQ	38fc1c1c701ce06cH
	DQ	e746fdfdd3fdbb2eH
	DQ	9a1f4d4d294d5264H
	DQ	397692927292e4e0H
	DQ	eafa7575c9758fbcH
	DQ	0c3606061806301eH
	DQ	09ae8a8a128a2498H
	DQ	794bb2b2f2b2f940H
	DQ	d185e6e6bfe66359H
	DQ	1c7e0e0e380e7036H
	DQ	3ee71f1f7c1ff863H
	DQ	c4556262956237f7H
	DQ	b53ad4d477d4eea3H
	DQ	4d81a8a89aa82932H
	DQ	315296966296c4f4H
	DQ	ef62f9f9c3f99b3aH
	DQ	97a3c5c533c566f6H
	DQ	4a102525942535b1H
	DQ	b2ab59597959f220H
	DQ	15d084842a8454aeH
	DQ	e4c57272d572b7a7H
	DQ	72ec3939e439d5ddH
	DQ	98164c4c2d4c5a61H
	DQ	bc945e5e655eca3bH
	DQ	f09f7878fd78e785H
	DQ	70e53838e038ddd8H
	DQ	05988c8c0a8c1486H
	DQ	bf17d1d163d1c6b2H
	DQ	57e4a5a5aea5410bH
	DQ	d9a1e2e2afe2434dH
	DQ	c24e616199612ff8H
	DQ	7b42b3b3f6b3f145H
	DQ	42342121842115a5H
	DQ	25089c9c4a9c94d6H
	DQ	3cee1e1e781ef066H
	DQ	8661434311432252H
	DQ	93b1c7c73bc776fcH
	DQ	e54ffcfcd7fcb32bH
	DQ	0824040410042014H
	DQ	a2e351515951b208H
	DQ	2f2599995e99bcc7H
	DQ	da226d6da96d4fc4H
	DQ	1a650d0d340d6839H
	DQ	e979fafacffa8335H
	DQ	a369dfdf5bdfb684H
	DQ	fca97e7ee57ed79bH
	DQ	4819242490243db4H
	DQ	76fe3b3bec3bc5d7H
	DQ	4b9aabab96ab313dH
	DQ	81f0cece1fce3ed1H
	DQ	2299111144118855H
	DQ	03838f8f068f0c89H
	DQ	9c044e4e254e4a6bH
	DQ	7366b7b7e6b7d151H
	DQ	cbe0ebeb8beb0b60H
	DQ	78c13c3cf03cfdccH
	DQ	1ffd81813e817cbfH
	DQ	354094946a94d4feH
	DQ	f31cf7f7fbf7eb0cH
	DQ	6f18b9b9deb9a167H
	DQ	268b13134c13985fH
	DQ	58512c2cb02c7d9cH
	DQ	bb05d3d36bd3d6b8H
	DQ	d38ce7e7bbe76b5cH
	DQ	dc396e6ea56e57cbH
	DQ	95aac4c437c46ef3H
	DQ	061b03030c03180fH
	DQ	acdc565645568a13H
	DQ	885e44440d441a49H
	DQ	fea07f7fe17fdf9eH
	DQ	4f88a9a99ea92137H
	DQ	54672a2aa82a4d82H
	DQ	6b0abbbbd6bbb16dH
	DQ	9f87c1c123c146e2H
	DQ	a6f153535153a202H
	DQ	a572dcdc57dcae8bH
	DQ	16530b0b2c0b5827H
	DQ	27019d9d4e9d9cd3H
	DQ	d82b6c6cad6c47c1H
	DQ	62a43131c43195f5H
	DQ	e8f37474cd7487b9H
	DQ	f115f6f6fff6e309H
	DQ	8c4c464605460a43H
	DQ	45a5acac8aac0926H
	DQ	0fb589891e893c97H
	DQ	28b414145014a044H
	DQ	dfbae1e1a3e15b42H
	DQ	2ca616165816b04eH
	DQ	74f73a3ae83acdd2H
	DQ	d2066969b9696fd0H
	DQ	124109092409482dH
	DQ	e0d77070dd70a7adH
	DQ	716fb6b6e2b6d954H
	DQ	bd1ed0d067d0ceb7H
	DQ	c7d6eded93ed3b7eH
	DQ	85e2cccc17cc2edbH
	DQ	8468424215422a57H
	DQ	2d2c98985a98b4c2H
	DQ	55eda4a4aaa4490eH
	DQ	50752828a0285d88H
	DQ	b8865c5c6d5cda31H
	DQ	ed6bf8f8c7f8933fH
	DQ	11c28686228644a4H
_C3	DQ	7830d818186018c0H
	DQ	af462623238c2305H
	DQ	f991b8c6c63fc67eH
	DQ	6fcdfbe8e887e813H
	DQ	a113cb878726874cH
	DQ	626d11b8b8dab8a9H
	DQ	0502090101040108H
	DQ	6e9e0d4f4f214f42H
	DQ	ee6c9b3636d836adH
	DQ	0451ffa6a6a2a659H
	DQ	bdb90cd2d26fd2deH
	DQ	06f70ef5f5f3f5fbH
	DQ	80f2967979f979efH
	DQ	cede306f6fa16f5fH
	DQ	ef3f6d91917e91fcH
	DQ	07a4f852525552aaH
	DQ	fdc04760609d6027H
	DQ	766535bcbccabc89H
	DQ	cd2b379b9b569bacH
	DQ	8c018a8e8e028e04H
	DQ	155bd2a3a3b6a371H
	DQ	3c186c0c0c300c60H
	DQ	8af6847b7bf17bffH
	DQ	e16a803535d435b5H
	DQ	693af51d1d741de8H
	DQ	47ddb3e0e0a7e053H
	DQ	acb321d7d77bd7f6H
	DQ	ed999cc2c22fc25eH
	DQ	965c432e2eb82e6dH
	DQ	7a96294b4b314b62H
	DQ	21e15dfefedffea3H
	DQ	16aed55757415782H
	DQ	412abd15155415a8H
	DQ	b6eee87777c1779fH
	DQ	eb6e923737dc37a5H
	DQ	56d79ee5e5b3e57bH
	DQ	d923139f9f469f8cH
	DQ	17fd23f0f0e7f0d3H
	DQ	7f94204a4a354a6aH
	DQ	95a944dada4fda9eH
	DQ	25b0a258587d58faH
	DQ	ca8fcfc9c903c906H
	DQ	8d527c2929a42955H
	DQ	22145a0a0a280a50H
	DQ	4f7f50b1b1feb1e1H
	DQ	1a5dc9a0a0baa069H
	DQ	dad6146b6bb16b7fH
	DQ	ab17d985852e855cH
	DQ	73673cbdbdcebd81H
	DQ	34ba8f5d5d695dd2H
	DQ	5020901010401080H
	DQ	03f507f4f4f7f4f3H
	DQ	c08bddcbcb0bcb16H
	DQ	c67cd33e3ef83eedH
	DQ	110a2d0505140528H
	DQ	e6ce78676781671fH
	DQ	53d597e4e4b7e473H
	DQ	bb4e0227279c2725H
	DQ	5882734141194132H
	DQ	9d0ba78b8b168b2cH
	DQ	0153f6a7a7a6a751H
	DQ	94fab27d7de97dcfH
	DQ	fb374995956e95dcH
	DQ	9fad56d8d847d88eH
	DQ	30eb70fbfbcbfb8bH
	DQ	71c1cdeeee9fee23H
	DQ	91f8bb7c7ced7cc7H
	DQ	e3cc716666856617H
	DQ	8ea77bdddd53dda6H
	DQ	4b2eaf17175c17b8H
	DQ	468e454747014702H
	DQ	dc211a9e9e429e84H
	DQ	c589d4caca0fca1eH
	DQ	995a582d2db42d75H
	DQ	79632ebfbfc6bf91H
	DQ	1b0e3f07071c0738H
	DQ	2347acadad8ead01H
	DQ	2fb4b05a5a755aeaH
	DQ	b51bef838336836cH
	DQ	ff66b63333cc3385H
	DQ	f2c65c636391633fH
	DQ	0a04120202080210H
	DQ	384993aaaa92aa39H
	DQ	a8e2de7171d971afH
	DQ	cf8dc6c8c807c80eH
	DQ	7d32d119196419c8H
	DQ	70923b4949394972H
	DQ	9aaf5fd9d943d986H
	DQ	1df931f2f2eff2c3H
	DQ	48dba8e3e3abe34bH
	DQ	2ab6b95b5b715be2H
	DQ	920dbc88881a8834H
	DQ	c8293e9a9a529aa4H
	DQ	be4c0b262698262dH
	DQ	fa64bf3232c8328dH
	DQ	4a7d59b0b0fab0e9H
	DQ	6acff2e9e983e91bH
	DQ	331e770f0f3c0f78H
	DQ	a6b733d5d573d5e6H
	DQ	ba1df480803a8074H
	DQ	7c6127bebec2be99H
	DQ	de87ebcdcd13cd26H
	DQ	e468893434d034bdH
	DQ	75903248483d487aH
	DQ	24e354ffffdbffabH
	DQ	8ff48d7a7af57af7H
	DQ	ea3d6490907a90f4H
	DQ	3ebe9d5f5f615fc2H
	DQ	a0403d202080201dH
	DQ	d5d00f6868bd6867H
	DQ	7234ca1a1a681ad0H
	DQ	2c41b7aeae82ae19H
	DQ	5e757db4b4eab4c9H
	DQ	19a8ce54544d549aH
	DQ	e53b7f93937693ecH
	DQ	aa442f222288220dH
	DQ	e9c86364648d6407H
	DQ	12ff2af1f1e3f1dbH
	DQ	a2e6cc7373d173bfH
	DQ	5a24821212481290H
	DQ	5d807a40401d403aH
	DQ	2810480808200840H
	DQ	e89b95c3c32bc356H
	DQ	7bc5dfecec97ec33H
	DQ	90ab4ddbdb4bdb96H
	DQ	1f5fc0a1a1bea161H
	DQ	8307918d8d0e8d1cH
	DQ	c97ac83d3df43df5H
	DQ	f1335b97976697ccH
	DQ	0000000000000000H
	DQ	d483f9cfcf1bcf36H
	DQ	87566e2b2bac2b45H
	DQ	b3ece17676c57697H
	DQ	b019e68282328264H
	DQ	a9b128d6d67fd6feH
	DQ	7736c31b1b6c1bd8H
	DQ	5b7774b5b5eeb5c1H
	DQ	2943beafaf86af11H
	DQ	dfd41d6a6ab56a77H
	DQ	0da0ea50505d50baH
	DQ	4c8a574545094512H
	DQ	18fb38f3f3ebf3cbH
	DQ	f060ad3030c0309dH
	DQ	74c3c4efef9bef2bH
	DQ	c37eda3f3ffc3fe5H
	DQ	1caac75555495592H
	DQ	1059dba2a2b2a279H
	DQ	65c9e9eaea8fea03H
	DQ	ecca6a656589650fH
	DQ	686903babad2bab9H
	DQ	935e4a2f2fbc2f65H
	DQ	e79d8ec0c027c04eH
	DQ	81a160dede5fdebeH
	DQ	6c38fc1c1c701ce0H
	DQ	2ee746fdfdd3fdbbH
	DQ	649a1f4d4d294d52H
	DQ	e0397692927292e4H
	DQ	bceafa7575c9758fH
	DQ	1e0c360606180630H
	DQ	9809ae8a8a128a24H
	DQ	40794bb2b2f2b2f9H
	DQ	59d185e6e6bfe663H
	DQ	361c7e0e0e380e70H
	DQ	633ee71f1f7c1ff8H
	DQ	f7c4556262956237H
	DQ	a3b53ad4d477d4eeH
	DQ	324d81a8a89aa829H
	DQ	f4315296966296c4H
	DQ	3aef62f9f9c3f99bH
	DQ	f697a3c5c533c566H
	DQ	b14a102525942535H
	DQ	20b2ab59597959f2H
	DQ	ae15d084842a8454H
	DQ	a7e4c57272d572b7H
	DQ	dd72ec3939e439d5H
	DQ	6198164c4c2d4c5aH
	DQ	3bbc945e5e655ecaH
	DQ	85f09f7878fd78e7H
	DQ	d870e53838e038ddH
	DQ	8605988c8c0a8c14H
	DQ	b2bf17d1d163d1c6H
	DQ	0b57e4a5a5aea541H
	DQ	4dd9a1e2e2afe243H
	DQ	f8c24e616199612fH
	DQ	457b42b3b3f6b3f1H
	DQ	a542342121842115H
	DQ	d625089c9c4a9c94H
	DQ	663cee1e1e781ef0H
	DQ	5286614343114322H
	DQ	fc93b1c7c73bc776H
	DQ	2be54ffcfcd7fcb3H
	DQ	1408240404100420H
	DQ	08a2e351515951b2H
	DQ	c72f2599995e99bcH
	DQ	c4da226d6da96d4fH
	DQ	391a650d0d340d68H
	DQ	35e979fafacffa83H
	DQ	84a369dfdf5bdfb6H
	DQ	9bfca97e7ee57ed7H
	DQ	b44819242490243dH
	DQ	d776fe3b3bec3bc5H
	DQ	3d4b9aabab96ab31H
	DQ	d181f0cece1fce3eH
	DQ	5522991111441188H
	DQ	8903838f8f068f0cH
	DQ	6b9c044e4e254e4aH
	DQ	517366b7b7e6b7d1H
	DQ	60cbe0ebeb8beb0bH
	DQ	cc78c13c3cf03cfdH
	DQ	bf1ffd81813e817cH
	DQ	fe354094946a94d4H
	DQ	0cf31cf7f7fbf7ebH
	DQ	676f18b9b9deb9a1H
	DQ	5f268b13134c1398H
	DQ	9c58512c2cb02c7dH
	DQ	b8bb05d3d36bd3d6H
	DQ	5cd38ce7e7bbe76bH
	DQ	cbdc396e6ea56e57H
	DQ	f395aac4c437c46eH
	DQ	0f061b03030c0318H
	DQ	13acdc565645568aH
	DQ	49885e44440d441aH
	DQ	9efea07f7fe17fdfH
	DQ	374f88a9a99ea921H
	DQ	8254672a2aa82a4dH
	DQ	6d6b0abbbbd6bbb1H
	DQ	e29f87c1c123c146H
	DQ	02a6f153535153a2H
	DQ	8ba572dcdc57dcaeH
	DQ	2716530b0b2c0b58H
	DQ	d327019d9d4e9d9cH
	DQ	c1d82b6c6cad6c47H
	DQ	f562a43131c43195H
	DQ	b9e8f37474cd7487H
	DQ	09f115f6f6fff6e3H
	DQ	438c4c464605460aH
	DQ	2645a5acac8aac09H
	DQ	970fb589891e893cH
	DQ	4428b414145014a0H
	DQ	42dfbae1e1a3e15bH
	DQ	4e2ca616165816b0H
	DQ	d274f73a3ae83acdH
	DQ	d0d2066969b9696fH
	DQ	2d12410909240948H
	DQ	ade0d77070dd70a7H
	DQ	54716fb6b6e2b6d9H
	DQ	b7bd1ed0d067d0ceH
	DQ	7ec7d6eded93ed3bH
	DQ	db85e2cccc17cc2eH
	DQ	578468424215422aH
	DQ	c22d2c98985a98b4H
	DQ	0e55eda4a4aaa449H
	DQ	8850752828a0285dH
	DQ	31b8865c5c6d5cdaH
	DQ	3fed6bf8f8c7f893H
	DQ	a411c28686228644H
_C4	DQ	c07830d818186018H
	DQ	05af462623238c23H
	DQ	7ef991b8c6c63fc6H
	DQ	136fcdfbe8e887e8H
	DQ	4ca113cb87872687H
	DQ	a9626d11b8b8dab8H
	DQ	0805020901010401H
	DQ	426e9e0d4f4f214fH
	DQ	adee6c9b3636d836H
	DQ	590451ffa6a6a2a6H
	DQ	debdb90cd2d26fd2H
	DQ	fb06f70ef5f5f3f5H
	DQ	ef80f2967979f979H
	DQ	5fcede306f6fa16fH
	DQ	fcef3f6d91917e91H
	DQ	aa07a4f852525552H
	DQ	27fdc04760609d60H
	DQ	89766535bcbccabcH
	DQ	accd2b379b9b569bH
	DQ	048c018a8e8e028eH
	DQ	71155bd2a3a3b6a3H
	DQ	603c186c0c0c300cH
	DQ	ff8af6847b7bf17bH
	DQ	b5e16a803535d435H
	DQ	e8693af51d1d741dH
	DQ	5347ddb3e0e0a7e0H
	DQ	f6acb321d7d77bd7H
	DQ	5eed999cc2c22fc2H
	DQ	6d965c432e2eb82eH
	DQ	627a96294b4b314bH
	DQ	a321e15dfefedffeH
	DQ	8216aed557574157H
	DQ	a8412abd15155415H
	DQ	9fb6eee87777c177H
	DQ	a5eb6e923737dc37H
	DQ	7b56d79ee5e5b3e5H
	DQ	8cd923139f9f469fH
	DQ	d317fd23f0f0e7f0H
	DQ	6a7f94204a4a354aH
	DQ	9e95a944dada4fdaH
	DQ	fa25b0a258587d58H
	DQ	06ca8fcfc9c903c9H
	DQ	558d527c2929a429H
	DQ	5022145a0a0a280aH
	DQ	e14f7f50b1b1feb1H
	DQ	691a5dc9a0a0baa0H
	DQ	7fdad6146b6bb16bH
	DQ	5cab17d985852e85H
	DQ	8173673cbdbdcebdH
	DQ	d234ba8f5d5d695dH
	DQ	8050209010104010H
	DQ	f303f507f4f4f7f4H
	DQ	16c08bddcbcb0bcbH
	DQ	edc67cd33e3ef83eH
	DQ	28110a2d05051405H
	DQ	1fe6ce7867678167H
	DQ	7353d597e4e4b7e4H
	DQ	25bb4e0227279c27H
	DQ	3258827341411941H
	DQ	2c9d0ba78b8b168bH
	DQ	510153f6a7a7a6a7H
	DQ	cf94fab27d7de97dH
	DQ	dcfb374995956e95H
	DQ	8e9fad56d8d847d8H
	DQ	8b30eb70fbfbcbfbH
	DQ	2371c1cdeeee9feeH
	DQ	c791f8bb7c7ced7cH
	DQ	17e3cc7166668566H
	DQ	a68ea77bdddd53ddH
	DQ	b84b2eaf17175c17H
	DQ	02468e4547470147H
	DQ	84dc211a9e9e429eH
	DQ	1ec589d4caca0fcaH
	DQ	75995a582d2db42dH
	DQ	9179632ebfbfc6bfH
	DQ	381b0e3f07071c07H
	DQ	012347acadad8eadH
	DQ	ea2fb4b05a5a755aH
	DQ	6cb51bef83833683H
	DQ	85ff66b63333cc33H
	DQ	3ff2c65c63639163H
	DQ	100a041202020802H
	DQ	39384993aaaa92aaH
	DQ	afa8e2de7171d971H
	DQ	0ecf8dc6c8c807c8H
	DQ	c87d32d119196419H
	DQ	7270923b49493949H
	DQ	869aaf5fd9d943d9H
	DQ	c31df931f2f2eff2H
	DQ	4b48dba8e3e3abe3H
	DQ	e22ab6b95b5b715bH
	DQ	34920dbc88881a88H
	DQ	a4c8293e9a9a529aH
	DQ	2dbe4c0b26269826H
	DQ	8dfa64bf3232c832H
	DQ	e94a7d59b0b0fab0H
	DQ	1b6acff2e9e983e9H
	DQ	78331e770f0f3c0fH
	DQ	e6a6b733d5d573d5H
	DQ	74ba1df480803a80H
	DQ	997c6127bebec2beH
	DQ	26de87ebcdcd13cdH
	DQ	bde468893434d034H
	DQ	7a75903248483d48H
	DQ	ab24e354ffffdbffH
	DQ	f78ff48d7a7af57aH
	DQ	f4ea3d6490907a90H
	DQ	c23ebe9d5f5f615fH
	DQ	1da0403d20208020H
	DQ	67d5d00f6868bd68H
	DQ	d07234ca1a1a681aH
	DQ	192c41b7aeae82aeH
	DQ	c95e757db4b4eab4H
	DQ	9a19a8ce54544d54H
	DQ	ece53b7f93937693H
	DQ	0daa442f22228822H
	DQ	07e9c86364648d64H
	DQ	db12ff2af1f1e3f1H
	DQ	bfa2e6cc7373d173H
	DQ	905a248212124812H
	DQ	3a5d807a40401d40H
	DQ	4028104808082008H
	DQ	56e89b95c3c32bc3H
	DQ	337bc5dfecec97ecH
	DQ	9690ab4ddbdb4bdbH
	DQ	611f5fc0a1a1bea1H
	DQ	1c8307918d8d0e8dH
	DQ	f5c97ac83d3df43dH
	DQ	ccf1335b97976697H
	DQ	0000000000000000H
	DQ	36d483f9cfcf1bcfH
	DQ	4587566e2b2bac2bH
	DQ	97b3ece17676c576H
	DQ	64b019e682823282H
	DQ	fea9b128d6d67fd6H
	DQ	d87736c31b1b6c1bH
	DQ	c15b7774b5b5eeb5H
	DQ	112943beafaf86afH
	DQ	77dfd41d6a6ab56aH
	DQ	ba0da0ea50505d50H
	DQ	124c8a5745450945H
	DQ	cb18fb38f3f3ebf3H
	DQ	9df060ad3030c030H
	DQ	2b74c3c4efef9befH
	DQ	e5c37eda3f3ffc3fH
	DQ	921caac755554955H
	DQ	791059dba2a2b2a2H
	DQ	0365c9e9eaea8feaH
	DQ	0fecca6a65658965H
	DQ	b9686903babad2baH
	DQ	65935e4a2f2fbc2fH
	DQ	4ee79d8ec0c027c0H
	DQ	be81a160dede5fdeH
	DQ	e06c38fc1c1c701cH
	DQ	bb2ee746fdfdd3fdH
	DQ	52649a1f4d4d294dH
	DQ	e4e0397692927292H
	DQ	8fbceafa7575c975H
	DQ	301e0c3606061806H
	DQ	249809ae8a8a128aH
	DQ	f940794bb2b2f2b2H
	DQ	6359d185e6e6bfe6H
	DQ	70361c7e0e0e380eH
	DQ	f8633ee71f1f7c1fH
	DQ	37f7c45562629562H
	DQ	eea3b53ad4d477d4H
	DQ	29324d81a8a89aa8H
	DQ	c4f4315296966296H
	DQ	9b3aef62f9f9c3f9H
	DQ	66f697a3c5c533c5H
	DQ	35b14a1025259425H
	DQ	f220b2ab59597959H
	DQ	54ae15d084842a84H
	DQ	b7a7e4c57272d572H
	DQ	d5dd72ec3939e439H
	DQ	5a6198164c4c2d4cH
	DQ	ca3bbc945e5e655eH
	DQ	e785f09f7878fd78H
	DQ	ddd870e53838e038H
	DQ	148605988c8c0a8cH
	DQ	c6b2bf17d1d163d1H
	DQ	410b57e4a5a5aea5H
	DQ	434dd9a1e2e2afe2H
	DQ	2ff8c24e61619961H
	DQ	f1457b42b3b3f6b3H
	DQ	15a5423421218421H
	DQ	94d625089c9c4a9cH
	DQ	f0663cee1e1e781eH
	DQ	2252866143431143H
	DQ	76fc93b1c7c73bc7H
	DQ	b32be54ffcfcd7fcH
	DQ	2014082404041004H
	DQ	b208a2e351515951H
	DQ	bcc72f2599995e99H
	DQ	4fc4da226d6da96dH
	DQ	68391a650d0d340dH
	DQ	8335e979fafacffaH
	DQ	b684a369dfdf5bdfH
	DQ	d79bfca97e7ee57eH
	DQ	3db4481924249024H
	DQ	c5d776fe3b3bec3bH
	DQ	313d4b9aabab96abH
	DQ	3ed181f0cece1fceH
	DQ	8855229911114411H
	DQ	0c8903838f8f068fH
	DQ	4a6b9c044e4e254eH
	DQ	d1517366b7b7e6b7H
	DQ	0b60cbe0ebeb8bebH
	DQ	fdcc78c13c3cf03cH
	DQ	7cbf1ffd81813e81H
	DQ	d4fe354094946a94H
	DQ	eb0cf31cf7f7fbf7H
	DQ	a1676f18b9b9deb9H
	DQ	985f268b13134c13H
	DQ	7d9c58512c2cb02cH
	DQ	d6b8bb05d3d36bd3H
	DQ	6b5cd38ce7e7bbe7H
	DQ	57cbdc396e6ea56eH
	DQ	6ef395aac4c437c4H
	DQ	180f061b03030c03H
	DQ	8a13acdc56564556H
	DQ	1a49885e44440d44H
	DQ	df9efea07f7fe17fH
	DQ	21374f88a9a99ea9H
	DQ	4d8254672a2aa82aH
	DQ	b16d6b0abbbbd6bbH
	DQ	46e29f87c1c123c1H
	DQ	a202a6f153535153H
	DQ	ae8ba572dcdc57dcH
	DQ	582716530b0b2c0bH
	DQ	9cd327019d9d4e9dH
	DQ	47c1d82b6c6cad6cH
	DQ	95f562a43131c431H
	DQ	87b9e8f37474cd74H
	DQ	e309f115f6f6fff6H
	DQ	0a438c4c46460546H
	DQ	092645a5acac8aacH
	DQ	3c970fb589891e89H
	DQ	a04428b414145014H
	DQ	5b42dfbae1e1a3e1H
	DQ	b04e2ca616165816H
	DQ	cdd274f73a3ae83aH
	DQ	6fd0d2066969b969H
	DQ	482d124109092409H
	DQ	a7ade0d77070dd70H
	DQ	d954716fb6b6e2b6H
	DQ	ceb7bd1ed0d067d0H
	DQ	3b7ec7d6eded93edH
	DQ	2edb85e2cccc17ccH
	DQ	2a57846842421542H
	DQ	b4c22d2c98985a98H
	DQ	490e55eda4a4aaa4H
	DQ	5d8850752828a028H
	DQ	da31b8865c5c6d5cH
	DQ	933fed6bf8f8c7f8H
	DQ	44a411c286862286H
_C5	DQ	18c07830d8181860H
	DQ	2305af462623238cH
	DQ	c67ef991b8c6c63fH
	DQ	e8136fcdfbe8e887H
	DQ	874ca113cb878726H
	DQ	b8a9626d11b8b8daH
	DQ	0108050209010104H
	DQ	4f426e9e0d4f4f21H
	DQ	36adee6c9b3636d8H
	DQ	a6590451ffa6a6a2H
	DQ	d2debdb90cd2d26fH
	DQ	f5fb06f70ef5f5f3H
	DQ	79ef80f2967979f9H
	DQ	6f5fcede306f6fa1H
	DQ	91fcef3f6d91917eH
	DQ	52aa07a4f8525255H
	DQ	6027fdc04760609dH
	DQ	bc89766535bcbccaH
	DQ	9baccd2b379b9b56H
	DQ	8e048c018a8e8e02H
	DQ	a371155bd2a3a3b6H
	DQ	0c603c186c0c0c30H
	DQ	7bff8af6847b7bf1H
	DQ	35b5e16a803535d4H
	DQ	1de8693af51d1d74H
	DQ	e05347ddb3e0e0a7H
	DQ	d7f6acb321d7d77bH
	DQ	c25eed999cc2c22fH
	DQ	2e6d965c432e2eb8H
	DQ	4b627a96294b4b31H
	DQ	fea321e15dfefedfH
	DQ	578216aed5575741H
	DQ	15a8412abd151554H
	DQ	779fb6eee87777c1H
	DQ	37a5eb6e923737dcH
	DQ	e57b56d79ee5e5b3H
	DQ	9f8cd923139f9f46H
	DQ	f0d317fd23f0f0e7H
	DQ	4a6a7f94204a4a35H
	DQ	da9e95a944dada4fH
	DQ	58fa25b0a258587dH
	DQ	c906ca8fcfc9c903H
	DQ	29558d527c2929a4H
	DQ	0a5022145a0a0a28H
	DQ	b1e14f7f50b1b1feH
	DQ	a0691a5dc9a0a0baH
	DQ	6b7fdad6146b6bb1H
	DQ	855cab17d985852eH
	DQ	bd8173673cbdbdceH
	DQ	5dd234ba8f5d5d69H
	DQ	1080502090101040H
	DQ	f4f303f507f4f4f7H
	DQ	cb16c08bddcbcb0bH
	DQ	3eedc67cd33e3ef8H
	DQ	0528110a2d050514H
	DQ	671fe6ce78676781H
	DQ	e47353d597e4e4b7H
	DQ	2725bb4e0227279cH
	DQ	4132588273414119H
	DQ	8b2c9d0ba78b8b16H
	DQ	a7510153f6a7a7a6H
	DQ	7dcf94fab27d7de9H
	DQ	95dcfb374995956eH
	DQ	d88e9fad56d8d847H
	DQ	fb8b30eb70fbfbcbH
	DQ	ee2371c1cdeeee9fH
	DQ	7cc791f8bb7c7cedH
	DQ	6617e3cc71666685H
	DQ	dda68ea77bdddd53H
	DQ	17b84b2eaf17175cH
	DQ	4702468e45474701H
	DQ	9e84dc211a9e9e42H
	DQ	ca1ec589d4caca0fH
	DQ	2d75995a582d2db4H
	DQ	bf9179632ebfbfc6H
	DQ	07381b0e3f07071cH
	DQ	ad012347acadad8eH
	DQ	5aea2fb4b05a5a75H
	DQ	836cb51bef838336H
	DQ	3385ff66b63333ccH
	DQ	633ff2c65c636391H
	DQ	02100a0412020208H
	DQ	aa39384993aaaa92H
	DQ	71afa8e2de7171d9H
	DQ	c80ecf8dc6c8c807H
	DQ	19c87d32d1191964H
	DQ	497270923b494939H
	DQ	d9869aaf5fd9d943H
	DQ	f2c31df931f2f2efH
	DQ	e34b48dba8e3e3abH
	DQ	5be22ab6b95b5b71H
	DQ	8834920dbc88881aH
	DQ	9aa4c8293e9a9a52H
	DQ	262dbe4c0b262698H
	DQ	328dfa64bf3232c8H
	DQ	b0e94a7d59b0b0faH
	DQ	e91b6acff2e9e983H
	DQ	0f78331e770f0f3cH
	DQ	d5e6a6b733d5d573H
	DQ	8074ba1df480803aH
	DQ	be997c6127bebec2H
	DQ	cd26de87ebcdcd13H
	DQ	34bde468893434d0H
	DQ	487a75903248483dH
	DQ	ffab24e354ffffdbH
	DQ	7af78ff48d7a7af5H
	DQ	90f4ea3d6490907aH
	DQ	5fc23ebe9d5f5f61H
	DQ	201da0403d202080H
	DQ	6867d5d00f6868bdH
	DQ	1ad07234ca1a1a68H
	DQ	ae192c41b7aeae82H
	DQ	b4c95e757db4b4eaH
	DQ	549a19a8ce54544dH
	DQ	93ece53b7f939376H
	DQ	220daa442f222288H
	DQ	6407e9c86364648dH
	DQ	f1db12ff2af1f1e3H
	DQ	73bfa2e6cc7373d1H
	DQ	12905a2482121248H
	DQ	403a5d807a40401dH
	DQ	0840281048080820H
	DQ	c356e89b95c3c32bH
	DQ	ec337bc5dfecec97H
	DQ	db9690ab4ddbdb4bH
	DQ	a1611f5fc0a1a1beH
	DQ	8d1c8307918d8d0eH
	DQ	3df5c97ac83d3df4H
	DQ	97ccf1335b979766H
	DQ	0000000000000000H
	DQ	cf36d483f9cfcf1bH
	DQ	2b4587566e2b2bacH
	DQ	7697b3ece17676c5H
	DQ	8264b019e6828232H
	DQ	d6fea9b128d6d67fH
	DQ	1bd87736c31b1b6cH
	DQ	b5c15b7774b5b5eeH
	DQ	af112943beafaf86H
	DQ	6a77dfd41d6a6ab5H
	DQ	50ba0da0ea50505dH
	DQ	45124c8a57454509H
	DQ	f3cb18fb38f3f3ebH
	DQ	309df060ad3030c0H
	DQ	ef2b74c3c4efef9bH
	DQ	3fe5c37eda3f3ffcH
	DQ	55921caac7555549H
	DQ	a2791059dba2a2b2H
	DQ	ea0365c9e9eaea8fH
	DQ	650fecca6a656589H
	DQ	bab9686903babad2H
	DQ	2f65935e4a2f2fbcH
	DQ	c04ee79d8ec0c027H
	DQ	debe81a160dede5fH
	DQ	1ce06c38fc1c1c70H
	DQ	fdbb2ee746fdfdd3H
	DQ	4d52649a1f4d4d29H
	DQ	92e4e03976929272H
	DQ	758fbceafa7575c9H
	DQ	06301e0c36060618H
	DQ	8a249809ae8a8a12H
	DQ	b2f940794bb2b2f2H
	DQ	e66359d185e6e6bfH
	DQ	0e70361c7e0e0e38H
	DQ	1ff8633ee71f1f7cH
	DQ	6237f7c455626295H
	DQ	d4eea3b53ad4d477H
	DQ	a829324d81a8a89aH
	DQ	96c4f43152969662H
	DQ	f99b3aef62f9f9c3H
	DQ	c566f697a3c5c533H
	DQ	2535b14a10252594H
	DQ	59f220b2ab595979H
	DQ	8454ae15d084842aH
	DQ	72b7a7e4c57272d5H
	DQ	39d5dd72ec3939e4H
	DQ	4c5a6198164c4c2dH
	DQ	5eca3bbc945e5e65H
	DQ	78e785f09f7878fdH
	DQ	38ddd870e53838e0H
	DQ	8c148605988c8c0aH
	DQ	d1c6b2bf17d1d163H
	DQ	a5410b57e4a5a5aeH
	DQ	e2434dd9a1e2e2afH
	DQ	612ff8c24e616199H
	DQ	b3f1457b42b3b3f6H
	DQ	2115a54234212184H
	DQ	9c94d625089c9c4aH
	DQ	1ef0663cee1e1e78H
	DQ	4322528661434311H
	DQ	c776fc93b1c7c73bH
	DQ	fcb32be54ffcfcd7H
	DQ	0420140824040410H
	DQ	51b208a2e3515159H
	DQ	99bcc72f2599995eH
	DQ	6d4fc4da226d6da9H
	DQ	0d68391a650d0d34H
	DQ	fa8335e979fafacfH
	DQ	dfb684a369dfdf5bH
	DQ	7ed79bfca97e7ee5H
	DQ	243db44819242490H
	DQ	3bc5d776fe3b3becH
	DQ	ab313d4b9aabab96H
	DQ	ce3ed181f0cece1fH
	DQ	1188552299111144H
	DQ	8f0c8903838f8f06H
	DQ	4e4a6b9c044e4e25H
	DQ	b7d1517366b7b7e6H
	DQ	eb0b60cbe0ebeb8bH
	DQ	3cfdcc78c13c3cf0H
	DQ	817cbf1ffd81813eH
	DQ	94d4fe354094946aH
	DQ	f7eb0cf31cf7f7fbH
	DQ	b9a1676f18b9b9deH
	DQ	13985f268b13134cH
	DQ	2c7d9c58512c2cb0H
	DQ	d3d6b8bb05d3d36bH
	DQ	e76b5cd38ce7e7bbH
	DQ	6e57cbdc396e6ea5H
	DQ	c46ef395aac4c437H
	DQ	03180f061b03030cH
	DQ	568a13acdc565645H
	DQ	441a49885e44440dH
	DQ	7fdf9efea07f7fe1H
	DQ	a921374f88a9a99eH
	DQ	2a4d8254672a2aa8H
	DQ	bbb16d6b0abbbbd6H
	DQ	c146e29f87c1c123H
	DQ	53a202a6f1535351H
	DQ	dcae8ba572dcdc57H
	DQ	0b582716530b0b2cH
	DQ	9d9cd327019d9d4eH
	DQ	6c47c1d82b6c6cadH
	DQ	3195f562a43131c4H
	DQ	7487b9e8f37474cdH
	DQ	f6e309f115f6f6ffH
	DQ	460a438c4c464605H
	DQ	ac092645a5acac8aH
	DQ	893c970fb589891eH
	DQ	14a04428b4141450H
	DQ	e15b42dfbae1e1a3H
	DQ	16b04e2ca6161658H
	DQ	3acdd274f73a3ae8H
	DQ	696fd0d2066969b9H
	DQ	09482d1241090924H
	DQ	70a7ade0d77070ddH
	DQ	b6d954716fb6b6e2H
	DQ	d0ceb7bd1ed0d067H
	DQ	ed3b7ec7d6eded93H
	DQ	cc2edb85e2cccc17H
	DQ	422a578468424215H
	DQ	98b4c22d2c98985aH
	DQ	a4490e55eda4a4aaH
	DQ	285d8850752828a0H
	DQ	5cda31b8865c5c6dH
	DQ	f8933fed6bf8f8c7H
	DQ	8644a411c2868622H
_C6	DQ	6018c07830d81818H
	DQ	8c2305af46262323H
	DQ	3fc67ef991b8c6c6H
	DQ	87e8136fcdfbe8e8H
	DQ	26874ca113cb8787H
	DQ	dab8a9626d11b8b8H
	DQ	0401080502090101H
	DQ	214f426e9e0d4f4fH
	DQ	d836adee6c9b3636H
	DQ	a2a6590451ffa6a6H
	DQ	6fd2debdb90cd2d2H
	DQ	f3f5fb06f70ef5f5H
	DQ	f979ef80f2967979H
	DQ	a16f5fcede306f6fH
	DQ	7e91fcef3f6d9191H
	DQ	5552aa07a4f85252H
	DQ	9d6027fdc0476060H
	DQ	cabc89766535bcbcH
	DQ	569baccd2b379b9bH
	DQ	028e048c018a8e8eH
	DQ	b6a371155bd2a3a3H
	DQ	300c603c186c0c0cH
	DQ	f17bff8af6847b7bH
	DQ	d435b5e16a803535H
	DQ	741de8693af51d1dH
	DQ	a7e05347ddb3e0e0H
	DQ	7bd7f6acb321d7d7H
	DQ	2fc25eed999cc2c2H
	DQ	b82e6d965c432e2eH
	DQ	314b627a96294b4bH
	DQ	dffea321e15dfefeH
	DQ	41578216aed55757H
	DQ	5415a8412abd1515H
	DQ	c1779fb6eee87777H
	DQ	dc37a5eb6e923737H
	DQ	b3e57b56d79ee5e5H
	DQ	469f8cd923139f9fH
	DQ	e7f0d317fd23f0f0H
	DQ	354a6a7f94204a4aH
	DQ	4fda9e95a944dadaH
	DQ	7d58fa25b0a25858H
	DQ	03c906ca8fcfc9c9H
	DQ	a429558d527c2929H
	DQ	280a5022145a0a0aH
	DQ	feb1e14f7f50b1b1H
	DQ	baa0691a5dc9a0a0H
	DQ	b16b7fdad6146b6bH
	DQ	2e855cab17d98585H
	DQ	cebd8173673cbdbdH
	DQ	695dd234ba8f5d5dH
	DQ	4010805020901010H
	DQ	f7f4f303f507f4f4H
	DQ	0bcb16c08bddcbcbH
	DQ	f83eedc67cd33e3eH
	DQ	140528110a2d0505H
	DQ	81671fe6ce786767H
	DQ	b7e47353d597e4e4H
	DQ	9c2725bb4e022727H
	DQ	1941325882734141H
	DQ	168b2c9d0ba78b8bH
	DQ	a6a7510153f6a7a7H
	DQ	e97dcf94fab27d7dH
	DQ	6e95dcfb37499595H
	DQ	47d88e9fad56d8d8H
	DQ	cbfb8b30eb70fbfbH
	DQ	9fee2371c1cdeeeeH
	DQ	ed7cc791f8bb7c7cH
	DQ	856617e3cc716666H
	DQ	53dda68ea77bddddH
	DQ	5c17b84b2eaf1717H
	DQ	014702468e454747H
	DQ	429e84dc211a9e9eH
	DQ	0fca1ec589d4cacaH
	DQ	b42d75995a582d2dH
	DQ	c6bf9179632ebfbfH
	DQ	1c07381b0e3f0707H
	DQ	8ead012347acadadH
	DQ	755aea2fb4b05a5aH
	DQ	36836cb51bef8383H
	DQ	cc3385ff66b63333H
	DQ	91633ff2c65c6363H
	DQ	0802100a04120202H
	DQ	92aa39384993aaaaH
	DQ	d971afa8e2de7171H
	DQ	07c80ecf8dc6c8c8H
	DQ	6419c87d32d11919H
	DQ	39497270923b4949H
	DQ	43d9869aaf5fd9d9H
	DQ	eff2c31df931f2f2H
	DQ	abe34b48dba8e3e3H
	DQ	715be22ab6b95b5bH
	DQ	1a8834920dbc8888H
	DQ	529aa4c8293e9a9aH
	DQ	98262dbe4c0b2626H
	DQ	c8328dfa64bf3232H
	DQ	fab0e94a7d59b0b0H
	DQ	83e91b6acff2e9e9H
	DQ	3c0f78331e770f0fH
	DQ	73d5e6a6b733d5d5H
	DQ	3a8074ba1df48080H
	DQ	c2be997c6127bebeH
	DQ	13cd26de87ebcdcdH
	DQ	d034bde468893434H
	DQ	3d487a7590324848H
	DQ	dbffab24e354ffffH
	DQ	f57af78ff48d7a7aH
	DQ	7a90f4ea3d649090H
	DQ	615fc23ebe9d5f5fH
	DQ	80201da0403d2020H
	DQ	bd6867d5d00f6868H
	DQ	681ad07234ca1a1aH
	DQ	82ae192c41b7aeaeH
	DQ	eab4c95e757db4b4H
	DQ	4d549a19a8ce5454H
	DQ	7693ece53b7f9393H
	DQ	88220daa442f2222H
	DQ	8d6407e9c8636464H
	DQ	e3f1db12ff2af1f1H
	DQ	d173bfa2e6cc7373H
	DQ	4812905a24821212H
	DQ	1d403a5d807a4040H
	DQ	2008402810480808H
	DQ	2bc356e89b95c3c3H
	DQ	97ec337bc5dfececH
	DQ	4bdb9690ab4ddbdbH
	DQ	bea1611f5fc0a1a1H
	DQ	0e8d1c8307918d8dH
	DQ	f43df5c97ac83d3dH
	DQ	6697ccf1335b9797H
	DQ	0000000000000000H
	DQ	1bcf36d483f9cfcfH
	DQ	ac2b4587566e2b2bH
	DQ	c57697b3ece17676H
	DQ	328264b019e68282H
	DQ	7fd6fea9b128d6d6H
	DQ	6c1bd87736c31b1bH
	DQ	eeb5c15b7774b5b5H
	DQ	86af112943beafafH
	DQ	b56a77dfd41d6a6aH
	DQ	5d50ba0da0ea5050H
	DQ	0945124c8a574545H
	DQ	ebf3cb18fb38f3f3H
	DQ	c0309df060ad3030H
	DQ	9bef2b74c3c4efefH
	DQ	fc3fe5c37eda3f3fH
	DQ	4955921caac75555H
	DQ	b2a2791059dba2a2H
	DQ	8fea0365c9e9eaeaH
	DQ	89650fecca6a6565H
	DQ	d2bab9686903babaH
	DQ	bc2f65935e4a2f2fH
	DQ	27c04ee79d8ec0c0H
	DQ	5fdebe81a160dedeH
	DQ	701ce06c38fc1c1cH
	DQ	d3fdbb2ee746fdfdH
	DQ	294d52649a1f4d4dH
	DQ	7292e4e039769292H
	DQ	c9758fbceafa7575H
	DQ	1806301e0c360606H
	DQ	128a249809ae8a8aH
	DQ	f2b2f940794bb2b2H
	DQ	bfe66359d185e6e6H
	DQ	380e70361c7e0e0eH
	DQ	7c1ff8633ee71f1fH
	DQ	956237f7c4556262H
	DQ	77d4eea3b53ad4d4H
	DQ	9aa829324d81a8a8H
	DQ	6296c4f431529696H
	DQ	c3f99b3aef62f9f9H
	DQ	33c566f697a3c5c5H
	DQ	942535b14a102525H
	DQ	7959f220b2ab5959H
	DQ	2a8454ae15d08484H
	DQ	d572b7a7e4c57272H
	DQ	e439d5dd72ec3939H
	DQ	2d4c5a6198164c4cH
	DQ	655eca3bbc945e5eH
	DQ	fd78e785f09f7878H
	DQ	e038ddd870e53838H
	DQ	0a8c148605988c8cH
	DQ	63d1c6b2bf17d1d1H
	DQ	aea5410b57e4a5a5H
	DQ	afe2434dd9a1e2e2H
	DQ	99612ff8c24e6161H
	DQ	f6b3f1457b42b3b3H
	DQ	842115a542342121H
	DQ	4a9c94d625089c9cH
	DQ	781ef0663cee1e1eH
	DQ	1143225286614343H
	DQ	3bc776fc93b1c7c7H
	DQ	d7fcb32be54ffcfcH
	DQ	1004201408240404H
	DQ	5951b208a2e35151H
	DQ	5e99bcc72f259999H
	DQ	a96d4fc4da226d6dH
	DQ	340d68391a650d0dH
	DQ	cffa8335e979fafaH
	DQ	5bdfb684a369dfdfH
	DQ	e57ed79bfca97e7eH
	DQ	90243db448192424H
	DQ	ec3bc5d776fe3b3bH
	DQ	96ab313d4b9aababH
	DQ	1fce3ed181f0ceceH
	DQ	4411885522991111H
	DQ	068f0c8903838f8fH
	DQ	254e4a6b9c044e4eH
	DQ	e6b7d1517366b7b7H
	DQ	8beb0b60cbe0ebebH
	DQ	f03cfdcc78c13c3cH
	DQ	3e817cbf1ffd8181H
	DQ	6a94d4fe35409494H
	DQ	fbf7eb0cf31cf7f7H
	DQ	deb9a1676f18b9b9H
	DQ	4c13985f268b1313H
	DQ	b02c7d9c58512c2cH
	DQ	6bd3d6b8bb05d3d3H
	DQ	bbe76b5cd38ce7e7H
	DQ	a56e57cbdc396e6eH
	DQ	37c46ef395aac4c4H
	DQ	0c03180f061b0303H
	DQ	45568a13acdc5656H
	DQ	0d441a49885e4444H
	DQ	e17fdf9efea07f7fH
	DQ	9ea921374f88a9a9H
	DQ	a82a4d8254672a2aH
	DQ	d6bbb16d6b0abbbbH
	DQ	23c146e29f87c1c1H
	DQ	5153a202a6f15353H
	DQ	57dcae8ba572dcdcH
	DQ	2c0b582716530b0bH
	DQ	4e9d9cd327019d9dH
	DQ	ad6c47c1d82b6c6cH
	DQ	c43195f562a43131H
	DQ	cd7487b9e8f37474H
	DQ	fff6e309f115f6f6H
	DQ	05460a438c4c4646H
	DQ	8aac092645a5acacH
	DQ	1e893c970fb58989H
	DQ	5014a04428b41414H
	DQ	a3e15b42dfbae1e1H
	DQ	5816b04e2ca61616H
	DQ	e83acdd274f73a3aH
	DQ	b9696fd0d2066969H
	DQ	2409482d12410909H
	DQ	dd70a7ade0d77070H
	DQ	e2b6d954716fb6b6H
	DQ	67d0ceb7bd1ed0d0H
	DQ	93ed3b7ec7d6ededH
	DQ	17cc2edb85e2ccccH
	DQ	15422a5784684242H
	DQ	5a98b4c22d2c9898H
	DQ	aaa4490e55eda4a4H
	DQ	a0285d8850752828H
	DQ	6d5cda31b8865c5cH
	DQ	c7f8933fed6bf8f8H
	DQ	228644a411c28686H
_C7	DQ	186018c07830d818H
	DQ	238c2305af462623H
	DQ	c63fc67ef991b8c6H
	DQ	e887e8136fcdfbe8H
	DQ	8726874ca113cb87H
	DQ	b8dab8a9626d11b8H
	DQ	0104010805020901H
	DQ	4f214f426e9e0d4fH
	DQ	36d836adee6c9b36H
	DQ	a6a2a6590451ffa6H
	DQ	d26fd2debdb90cd2H
	DQ	f5f3f5fb06f70ef5H
	DQ	79f979ef80f29679H
	DQ	6fa16f5fcede306fH
	DQ	917e91fcef3f6d91H
	DQ	525552aa07a4f852H
	DQ	609d6027fdc04760H
	DQ	bccabc89766535bcH
	DQ	9b569baccd2b379bH
	DQ	8e028e048c018a8eH
	DQ	a3b6a371155bd2a3H
	DQ	0c300c603c186c0cH
	DQ	7bf17bff8af6847bH
	DQ	35d435b5e16a8035H
	DQ	1d741de8693af51dH
	DQ	e0a7e05347ddb3e0H
	DQ	d77bd7f6acb321d7H
	DQ	c22fc25eed999cc2H
	DQ	2eb82e6d965c432eH
	DQ	4b314b627a96294bH
	DQ	fedffea321e15dfeH
	DQ	5741578216aed557H
	DQ	155415a8412abd15H
	DQ	77c1779fb6eee877H
	DQ	37dc37a5eb6e9237H
	DQ	e5b3e57b56d79ee5H
	DQ	9f469f8cd923139fH
	DQ	f0e7f0d317fd23f0H
	DQ	4a354a6a7f94204aH
	DQ	da4fda9e95a944daH
	DQ	587d58fa25b0a258H
	DQ	c903c906ca8fcfc9H
	DQ	29a429558d527c29H
	DQ	0a280a5022145a0aH
	DQ	b1feb1e14f7f50b1H
	DQ	a0baa0691a5dc9a0H
	DQ	6bb16b7fdad6146bH
	DQ	852e855cab17d985H
	DQ	bdcebd8173673cbdH
	DQ	5d695dd234ba8f5dH
	DQ	1040108050209010H
	DQ	f4f7f4f303f507f4H
	DQ	cb0bcb16c08bddcbH
	DQ	3ef83eedc67cd33eH
	DQ	05140528110a2d05H
	DQ	6781671fe6ce7867H
	DQ	e4b7e47353d597e4H
	DQ	279c2725bb4e0227H
	DQ	4119413258827341H
	DQ	8b168b2c9d0ba78bH
	DQ	a7a6a7510153f6a7H
	DQ	7de97dcf94fab27dH
	DQ	956e95dcfb374995H
	DQ	d847d88e9fad56d8H
	DQ	fbcbfb8b30eb70fbH
	DQ	ee9fee2371c1cdeeH
	DQ	7ced7cc791f8bb7cH
	DQ	66856617e3cc7166H
	DQ	dd53dda68ea77bddH
	DQ	175c17b84b2eaf17H
	DQ	47014702468e4547H
	DQ	9e429e84dc211a9eH
	DQ	ca0fca1ec589d4caH
	DQ	2db42d75995a582dH
	DQ	bfc6bf9179632ebfH
	DQ	071c07381b0e3f07H
	DQ	ad8ead012347acadH
	DQ	5a755aea2fb4b05aH
	DQ	8336836cb51bef83H
	DQ	33cc3385ff66b633H
	DQ	6391633ff2c65c63H
	DQ	020802100a041202H
	DQ	aa92aa39384993aaH
	DQ	71d971afa8e2de71H
	DQ	c807c80ecf8dc6c8H
	DQ	196419c87d32d119H
	DQ	4939497270923b49H
	DQ	d943d9869aaf5fd9H
	DQ	f2eff2c31df931f2H
	DQ	e3abe34b48dba8e3H
	DQ	5b715be22ab6b95bH
	DQ	881a8834920dbc88H
	DQ	9a529aa4c8293e9aH
	DQ	2698262dbe4c0b26H
	DQ	32c8328dfa64bf32H
	DQ	b0fab0e94a7d59b0H
	DQ	e983e91b6acff2e9H
	DQ	0f3c0f78331e770fH
	DQ	d573d5e6a6b733d5H
	DQ	803a8074ba1df480H
	DQ	bec2be997c6127beH
	DQ	cd13cd26de87ebcdH
	DQ	34d034bde4688934H
	DQ	483d487a75903248H
	DQ	ffdbffab24e354ffH
	DQ	7af57af78ff48d7aH
	DQ	907a90f4ea3d6490H
	DQ	5f615fc23ebe9d5fH
	DQ	2080201da0403d20H
	DQ	68bd6867d5d00f68H
	DQ	1a681ad07234ca1aH
	DQ	ae82ae192c41b7aeH
	DQ	b4eab4c95e757db4H
	DQ	544d549a19a8ce54H
	DQ	937693ece53b7f93H
	DQ	2288220daa442f22H
	DQ	648d6407e9c86364H
	DQ	f1e3f1db12ff2af1H
	DQ	73d173bfa2e6cc73H
	DQ	124812905a248212H
	DQ	401d403a5d807a40H
	DQ	0820084028104808H
	DQ	c32bc356e89b95c3H
	DQ	ec97ec337bc5dfecH
	DQ	db4bdb9690ab4ddbH
	DQ	a1bea1611f5fc0a1H
	DQ	8d0e8d1c8307918dH
	DQ	3df43df5c97ac83dH
	DQ	976697ccf1335b97H
	DQ	0000000000000000H
	DQ	cf1bcf36d483f9cfH
	DQ	2bac2b4587566e2bH
	DQ	76c57697b3ece176H
	DQ	82328264b019e682H
	DQ	d67fd6fea9b128d6H
	DQ	1b6c1bd87736c31bH
	DQ	b5eeb5c15b7774b5H
	DQ	af86af112943beafH
	DQ	6ab56a77dfd41d6aH
	DQ	505d50ba0da0ea50H
	DQ	450945124c8a5745H
	DQ	f3ebf3cb18fb38f3H
	DQ	30c0309df060ad30H
	DQ	ef9bef2b74c3c4efH
	DQ	3ffc3fe5c37eda3fH
	DQ	554955921caac755H
	DQ	a2b2a2791059dba2H
	DQ	ea8fea0365c9e9eaH
	DQ	6589650fecca6a65H
	DQ	bad2bab9686903baH
	DQ	2fbc2f65935e4a2fH
	DQ	c027c04ee79d8ec0H
	DQ	de5fdebe81a160deH
	DQ	1c701ce06c38fc1cH
	DQ	fdd3fdbb2ee746fdH
	DQ	4d294d52649a1f4dH
	DQ	927292e4e0397692H
	DQ	75c9758fbceafa75H
	DQ	061806301e0c3606H
	DQ	8a128a249809ae8aH
	DQ	b2f2b2f940794bb2H
	DQ	e6bfe66359d185e6H
	DQ	0e380e70361c7e0eH
	DQ	1f7c1ff8633ee71fH
	DQ	62956237f7c45562H
	DQ	d477d4eea3b53ad4H
	DQ	a89aa829324d81a8H
	DQ	966296c4f4315296H
	DQ	f9c3f99b3aef62f9H
	DQ	c533c566f697a3c5H
	DQ	25942535b14a1025H
	DQ	597959f220b2ab59H
	DQ	842a8454ae15d084H
	DQ	72d572b7a7e4c572H
	DQ	39e439d5dd72ec39H
	DQ	4c2d4c5a6198164cH
	DQ	5e655eca3bbc945eH
	DQ	78fd78e785f09f78H
	DQ	38e038ddd870e538H
	DQ	8c0a8c148605988cH
	DQ	d163d1c6b2bf17d1H
	DQ	a5aea5410b57e4a5H
	DQ	e2afe2434dd9a1e2H
	DQ	6199612ff8c24e61H
	DQ	b3f6b3f1457b42b3H
	DQ	21842115a5423421H
	DQ	9c4a9c94d625089cH
	DQ	1e781ef0663cee1eH
	DQ	4311432252866143H
	DQ	c73bc776fc93b1c7H
	DQ	fcd7fcb32be54ffcH
	DQ	0410042014082404H
	DQ	515951b208a2e351H
	DQ	995e99bcc72f2599H
	DQ	6da96d4fc4da226dH
	DQ	0d340d68391a650dH
	DQ	facffa8335e979faH
	DQ	df5bdfb684a369dfH
	DQ	7ee57ed79bfca97eH
	DQ	2490243db4481924H
	DQ	3bec3bc5d776fe3bH
	DQ	ab96ab313d4b9aabH
	DQ	ce1fce3ed181f0ceH
	DQ	1144118855229911H
	DQ	8f068f0c8903838fH
	DQ	4e254e4a6b9c044eH
	DQ	b7e6b7d1517366b7H
	DQ	eb8beb0b60cbe0ebH
	DQ	3cf03cfdcc78c13cH
	DQ	813e817cbf1ffd81H
	DQ	946a94d4fe354094H
	DQ	f7fbf7eb0cf31cf7H
	DQ	b9deb9a1676f18b9H
	DQ	134c13985f268b13H
	DQ	2cb02c7d9c58512cH
	DQ	d36bd3d6b8bb05d3H
	DQ	e7bbe76b5cd38ce7H
	DQ	6ea56e57cbdc396eH
	DQ	c437c46ef395aac4H
	DQ	030c03180f061b03H
	DQ	5645568a13acdc56H
	DQ	440d441a49885e44H
	DQ	7fe17fdf9efea07fH
	DQ	a99ea921374f88a9H
	DQ	2aa82a4d8254672aH
	DQ	bbd6bbb16d6b0abbH
	DQ	c123c146e29f87c1H
	DQ	535153a202a6f153H
	DQ	dc57dcae8ba572dcH
	DQ	0b2c0b582716530bH
	DQ	9d4e9d9cd327019dH
	DQ	6cad6c47c1d82b6cH
	DQ	31c43195f562a431H
	DQ	74cd7487b9e8f374H
	DQ	f6fff6e309f115f6H
	DQ	4605460a438c4c46H
	DQ	ac8aac092645a5acH
	DQ	891e893c970fb589H
	DQ	145014a04428b414H
	DQ	e1a3e15b42dfbae1H
	DQ	165816b04e2ca616H
	DQ	3ae83acdd274f73aH
	DQ	69b9696fd0d20669H
	DQ	092409482d124109H
	DQ	70dd70a7ade0d770H
	DQ	b6e2b6d954716fb6H
	DQ	d067d0ceb7bd1ed0H
	DQ	ed93ed3b7ec7d6edH
	DQ	cc17cc2edb85e2ccH
	DQ	4215422a57846842H
	DQ	985a98b4c22d2c98H
	DQ	a4aaa4490e55eda4H
	DQ	28a0285d88507528H
	DQ	5c6d5cda31b8865cH
	DQ	f8c7f8933fed6bf8H
	DQ	86228644a411c286H
_rc	DQ	0000000000000000H
	DQ	1823c6e887b8014fH
	DQ	36a6d2f5796f9152H
	DQ	60bc9b8ea30c7b35H
	DQ	1de0d7c22e4bfe57H
	DQ	157737e59ff04adaH
	DQ	58c9290ab1a06b85H
	DQ	bd5d10f4cb3e0567H
	DQ	e427418ba77d95d8H
	DQ	fbee7c66dd17479eH
	DQ	ca2dbf07ad5a8333H
CONST	ENDS
PUBLIC	_WHIRLPOOL_init@4
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed\src\crypto\whirlpool.c
;	COMDAT _WHIRLPOOL_init@4
_TEXT	SEGMENT
_i$ = -4						; size = 4
_structpointer$ = 8					; size = 4
_WHIRLPOOL_init@4 PROC					; COMDAT

; 863  : void WHIRLPOOL_init(struct NESSIEstruct * const structpointer) {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 864  :     int i;
; 865  : 
; 866  :     memset(structpointer->bitLength, 0, 32);

  00006	33 c0		 xor	 eax, eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00013	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00019	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001c	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0001f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 867  :     structpointer->bufferBits = structpointer->bufferPos = 0;

  00022	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00025	c7 42 64 00 00
	00 00		 mov	 DWORD PTR [edx+100], 0
  0002c	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  0002f	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 868  :     structpointer->buffer[0] = 0; /* it's only necessary to cleanup buffer[bufferPos] */

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00039	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0

; 869  :     for (i = 0; i < 8; i++) {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN3@WHIRLPOOL_
$LN2@WHIRLPOOL_:
  00046	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00049	83 c2 01	 add	 edx, 1
  0004c	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN3@WHIRLPOOL_:
  0004f	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  00053	7d 18		 jge	 SHORT $LN4@WHIRLPOOL_

; 870  :         structpointer->hash[i] = 0L; /* initial value */

  00055	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  0005b	c7 44 c1 68 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+104], 0
  00063	c7 44 c1 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+108], 0

; 871  :     }

  0006b	eb d9		 jmp	 SHORT $LN2@WHIRLPOOL_
$LN4@WHIRLPOOL_:

; 872  : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
_WHIRLPOOL_init@4 ENDP
_TEXT	ENDS
PUBLIC	_WHIRLPOOL_add@12
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp
;	COMDAT _WHIRLPOOL_add@12
_TEXT	SEGMENT
_buffer$ = -52						; size = 4
_bufferRem$ = -48					; size = 4
_b$ = -44						; size = 4
_carry$ = -40						; size = 4
_bufferBits$ = -36					; size = 4
_bufferPos$ = -32					; size = 4
_bitLength$ = -28					; size = 4
_sourcePos$ = -24					; size = 4
_i$ = -20						; size = 4
_value$ = -16						; size = 8
_sourceGap$ = -4					; size = 4
_source$ = 8						; size = 4
_sourceBits$ = 12					; size = 4
_structpointer$ = 16					; size = 4
_WHIRLPOOL_add@12 PROC					; COMDAT

; 884  :                struct NESSIEstruct * const structpointer) {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 34	 sub	 esp, 52			; 00000034H

; 885  :     /*
; 886  :                        sourcePos
; 887  :                        |
; 888  :                        +-------+-------+-------
; 889  :                           ||||||||||||||||||||| source
; 890  :                        +-------+-------+-------
; 891  :     +-------+-------+-------+-------+-------+-------
; 892  :     ||||||||||||||||||||||                           buffer
; 893  :     +-------+-------+-------+-------+-------+-------
; 894  :                     |
; 895  :                     bufferPos
; 896  :     */
; 897  :     int sourcePos    = 0; /* index of leftmost source u8 containing data (1 to 8 bits). */

  00008	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sourcePos$[ebp], 0

; 898  :     int sourceGap    = (8 - ((int)sourceBits & 7)) & 7; /* space on source[sourcePos]. */

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _sourceBits$[ebp]
  00012	83 e0 07	 and	 eax, 7
  00015	b9 08 00 00 00	 mov	 ecx, 8
  0001a	2b c8		 sub	 ecx, eax
  0001c	83 e1 07	 and	 ecx, 7
  0001f	89 4d fc	 mov	 DWORD PTR _sourceGap$[ebp], ecx

; 899  :     int bufferRem    = structpointer->bufferBits & 7; /* occupied bits on buffer[bufferPos]. */

  00022	8b 55 10	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00025	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00028	83 e0 07	 and	 eax, 7
  0002b	89 45 d0	 mov	 DWORD PTR _bufferRem$[ebp], eax

; 900  :     int i;
; 901  :     u32 b, carry;
; 902  :     u8 *buffer       = structpointer->buffer;

  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00031	83 c1 20	 add	 ecx, 32			; 00000020H
  00034	89 4d cc	 mov	 DWORD PTR _buffer$[ebp], ecx

; 903  :     u8 *bitLength    = structpointer->bitLength;

  00037	8b 55 10	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0003a	89 55 e4	 mov	 DWORD PTR _bitLength$[ebp], edx

; 904  :     int bufferBits   = structpointer->bufferBits;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00040	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00043	89 4d dc	 mov	 DWORD PTR _bufferBits$[ebp], ecx

; 905  :     int bufferPos    = structpointer->bufferPos;

  00046	8b 55 10	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00049	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0004c	89 45 e0	 mov	 DWORD PTR _bufferPos$[ebp], eax

; 906  : 
; 907  :     /*
; 908  :      * tally the length of the added data:
; 909  :      */
; 910  :     u64 value = sourceBits;

  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceBits$[ebp]
  00052	33 d2		 xor	 edx, edx
  00054	89 4d f0	 mov	 DWORD PTR _value$[ebp], ecx
  00057	89 55 f4	 mov	 DWORD PTR _value$[ebp+4], edx

; 911  :     for (i = 31, carry = 0; i >= 0 && (carry != 0 || value != LL(0)); i--) {

  0005a	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR _i$[ebp], 31	; 0000001fH
  00061	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _carry$[ebp], 0
  00068	eb 09		 jmp	 SHORT $LN12@WHIRLPOOL_@2
$LN11@WHIRLPOOL_@2:
  0006a	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0006d	83 e8 01	 sub	 eax, 1
  00070	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN12@WHIRLPOOL_@2:
  00073	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  00077	7c 51		 jl	 SHORT $LN8@WHIRLPOOL_@2
  00079	83 7d d8 00	 cmp	 DWORD PTR _carry$[ebp], 0
  0007d	75 08		 jne	 SHORT $LN9@WHIRLPOOL_@2
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _value$[ebp]
  00082	0b 4d f4	 or	 ecx, DWORD PTR _value$[ebp+4]
  00085	74 43		 je	 SHORT $LN8@WHIRLPOOL_@2
$LN9@WHIRLPOOL_@2:

; 912  :         carry += bitLength[i] + ((u32)value & 0xff);

  00087	8b 55 e4	 mov	 edx, DWORD PTR _bitLength$[ebp]
  0008a	03 55 ec	 add	 edx, DWORD PTR _i$[ebp]
  0008d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _value$[ebp]
  00093	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00099	03 4d d8	 add	 ecx, DWORD PTR _carry$[ebp]
  0009c	03 c8		 add	 ecx, eax
  0009e	89 4d d8	 mov	 DWORD PTR _carry$[ebp], ecx

; 913  :         bitLength[i] = (u8)carry;

  000a1	8b 55 e4	 mov	 edx, DWORD PTR _bitLength$[ebp]
  000a4	03 55 ec	 add	 edx, DWORD PTR _i$[ebp]
  000a7	8a 45 d8	 mov	 al, BYTE PTR _carry$[ebp]
  000aa	88 02		 mov	 BYTE PTR [edx], al

; 914  :         carry >>= 8;

  000ac	8b 4d d8	 mov	 ecx, DWORD PTR _carry$[ebp]
  000af	c1 e9 08	 shr	 ecx, 8
  000b2	89 4d d8	 mov	 DWORD PTR _carry$[ebp], ecx

; 915  :         value >>= 8;

  000b5	8b 45 f0	 mov	 eax, DWORD PTR _value$[ebp]
  000b8	8b 55 f4	 mov	 edx, DWORD PTR _value$[ebp+4]
  000bb	b1 08		 mov	 cl, 8
  000bd	e8 00 00 00 00	 call	 __aullshr
  000c2	89 45 f0	 mov	 DWORD PTR _value$[ebp], eax
  000c5	89 55 f4	 mov	 DWORD PTR _value$[ebp+4], edx

; 916  :     }

  000c8	eb a0		 jmp	 SHORT $LN11@WHIRLPOOL_@2
$LN8@WHIRLPOOL_@2:

; 917  :     /*
; 918  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 919  :      */
; 920  :     while (sourceBits > 8) {

  000ca	83 7d 0c 08	 cmp	 DWORD PTR _sourceBits$[ebp], 8
  000ce	0f 86 bb 00 00
	00		 jbe	 $LN7@WHIRLPOOL_@2

; 921  :         /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
; 922  :         /*
; 923  :          * take a byte from the source:
; 924  :          */
; 925  :         b = ((source[sourcePos] << sourceGap) & 0xff) |
; 926  :             ((source[sourcePos + 1] & 0xff) >> (8 - sourceGap));

  000d4	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  000d7	03 55 e8	 add	 edx, DWORD PTR _sourcePos$[ebp]
  000da	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _sourceGap$[ebp]
  000e0	d3 e0		 shl	 eax, cl
  000e2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000ea	03 4d e8	 add	 ecx, DWORD PTR _sourcePos$[ebp]
  000ed	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  000f1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000f7	b9 08 00 00 00	 mov	 ecx, 8
  000fc	2b 4d fc	 sub	 ecx, DWORD PTR _sourceGap$[ebp]
  000ff	d3 fa		 sar	 edx, cl
  00101	0b c2		 or	 eax, edx
  00103	89 45 d4	 mov	 DWORD PTR _b$[ebp], eax

; 927  :         /*
; 928  :          * process this byte:
; 929  :          */
; 930  :         buffer[bufferPos++] |= (u8)(b >> bufferRem);

  00106	8b 45 d4	 mov	 eax, DWORD PTR _b$[ebp]
  00109	8b 4d d0	 mov	 ecx, DWORD PTR _bufferRem$[ebp]
  0010c	d3 e8		 shr	 eax, cl
  0010e	0f b6 c8	 movzx	 ecx, al
  00111	8b 55 cc	 mov	 edx, DWORD PTR _buffer$[ebp]
  00114	03 55 e0	 add	 edx, DWORD PTR _bufferPos$[ebp]
  00117	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0011a	0b c1		 or	 eax, ecx
  0011c	8b 4d cc	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0011f	03 4d e0	 add	 ecx, DWORD PTR _bufferPos$[ebp]
  00122	88 01		 mov	 BYTE PTR [ecx], al
  00124	8b 55 e0	 mov	 edx, DWORD PTR _bufferPos$[ebp]
  00127	83 c2 01	 add	 edx, 1
  0012a	89 55 e0	 mov	 DWORD PTR _bufferPos$[ebp], edx

; 931  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  0012d	b8 08 00 00 00	 mov	 eax, 8
  00132	2b 45 d0	 sub	 eax, DWORD PTR _bufferRem$[ebp]
  00135	03 45 dc	 add	 eax, DWORD PTR _bufferBits$[ebp]
  00138	89 45 dc	 mov	 DWORD PTR _bufferBits$[ebp], eax

; 932  :         if (bufferBits == DIGESTBITS) {

  0013b	81 7d dc 00 02
	00 00		 cmp	 DWORD PTR _bufferBits$[ebp], 512 ; 00000200H
  00142	75 16		 jne	 SHORT $LN6@WHIRLPOOL_@2

; 933  :             /*
; 934  :              * process data block:
; 935  :              */
; 936  :             processBuffer(structpointer);

  00144	8b 4d 10	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 _processBuffer@4

; 937  :             /*
; 938  :              * reset buffer:
; 939  :              */
; 940  :             bufferBits = bufferPos = 0;

  0014d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bufferPos$[ebp], 0
  00154	8b 55 e0	 mov	 edx, DWORD PTR _bufferPos$[ebp]
  00157	89 55 dc	 mov	 DWORD PTR _bufferBits$[ebp], edx
$LN6@WHIRLPOOL_@2:

; 941  :         }
; 942  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  0015a	b9 08 00 00 00	 mov	 ecx, 8
  0015f	2b 4d d0	 sub	 ecx, DWORD PTR _bufferRem$[ebp]
  00162	8b 45 d4	 mov	 eax, DWORD PTR _b$[ebp]
  00165	d3 e0		 shl	 eax, cl
  00167	8b 4d cc	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0016a	03 4d e0	 add	 ecx, DWORD PTR _bufferPos$[ebp]
  0016d	88 01		 mov	 BYTE PTR [ecx], al

; 943  :         bufferBits += bufferRem;

  0016f	8b 55 dc	 mov	 edx, DWORD PTR _bufferBits$[ebp]
  00172	03 55 d0	 add	 edx, DWORD PTR _bufferRem$[ebp]
  00175	89 55 dc	 mov	 DWORD PTR _bufferBits$[ebp], edx

; 944  :         /*
; 945  :          * proceed to remaining data:
; 946  :          */
; 947  :         sourceBits -= 8;

  00178	8b 45 0c	 mov	 eax, DWORD PTR _sourceBits$[ebp]
  0017b	83 e8 08	 sub	 eax, 8
  0017e	89 45 0c	 mov	 DWORD PTR _sourceBits$[ebp], eax

; 948  :         sourcePos++;

  00181	8b 4d e8	 mov	 ecx, DWORD PTR _sourcePos$[ebp]
  00184	83 c1 01	 add	 ecx, 1
  00187	89 4d e8	 mov	 DWORD PTR _sourcePos$[ebp], ecx

; 949  :     }

  0018a	e9 3b ff ff ff	 jmp	 $LN8@WHIRLPOOL_@2
$LN7@WHIRLPOOL_@2:

; 950  :     /* now 0 <= sourceBits <= 8;
; 951  :      * furthermore, all data (if any is left) is in source[sourcePos].
; 952  :      */
; 953  :     if (sourceBits > 0) {

  0018f	83 7d 0c 00	 cmp	 DWORD PTR _sourceBits$[ebp], 0
  00193	76 33		 jbe	 SHORT $LN5@WHIRLPOOL_@2

; 954  :         b = (source[sourcePos] << sourceGap) & 0xff; /* bits are left-justified on b. */

  00195	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00198	03 55 e8	 add	 edx, DWORD PTR _sourcePos$[ebp]
  0019b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _sourceGap$[ebp]
  001a1	d3 e0		 shl	 eax, cl
  001a3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001a8	89 45 d4	 mov	 DWORD PTR _b$[ebp], eax

; 955  :         /*
; 956  :          * process the remaining bits:
; 957  :          */
; 958  :         buffer[bufferPos] |= b >> bufferRem;

  001ab	8b 55 d4	 mov	 edx, DWORD PTR _b$[ebp]
  001ae	8b 4d d0	 mov	 ecx, DWORD PTR _bufferRem$[ebp]
  001b1	d3 ea		 shr	 edx, cl
  001b3	8b 45 cc	 mov	 eax, DWORD PTR _buffer$[ebp]
  001b6	03 45 e0	 add	 eax, DWORD PTR _bufferPos$[ebp]
  001b9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001bc	0b ca		 or	 ecx, edx
  001be	8b 55 cc	 mov	 edx, DWORD PTR _buffer$[ebp]
  001c1	03 55 e0	 add	 edx, DWORD PTR _bufferPos$[ebp]
  001c4	88 0a		 mov	 BYTE PTR [edx], cl

; 959  :     } else {

  001c6	eb 07		 jmp	 SHORT $LN4@WHIRLPOOL_@2
$LN5@WHIRLPOOL_@2:

; 960  :         b = 0;

  001c8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
$LN4@WHIRLPOOL_@2:

; 961  :     }
; 962  :     if (bufferRem + sourceBits < 8) {

  001cf	8b 45 d0	 mov	 eax, DWORD PTR _bufferRem$[ebp]
  001d2	03 45 0c	 add	 eax, DWORD PTR _sourceBits$[ebp]
  001d5	83 f8 08	 cmp	 eax, 8
  001d8	73 0b		 jae	 SHORT $LN3@WHIRLPOOL_@2

; 963  :         /*
; 964  :          * all remaining data fits on buffer[bufferPos],
; 965  :          * and there still remains some space.
; 966  :          */
; 967  :         bufferBits += sourceBits;

  001da	8b 4d dc	 mov	 ecx, DWORD PTR _bufferBits$[ebp]
  001dd	03 4d 0c	 add	 ecx, DWORD PTR _sourceBits$[ebp]
  001e0	89 4d dc	 mov	 DWORD PTR _bufferBits$[ebp], ecx

; 968  :     } else {

  001e3	eb 64		 jmp	 SHORT $LN2@WHIRLPOOL_@2
$LN3@WHIRLPOOL_@2:

; 969  :         /*
; 970  :          * buffer[bufferPos] is full:
; 971  :          */
; 972  :         bufferPos++;

  001e5	8b 55 e0	 mov	 edx, DWORD PTR _bufferPos$[ebp]
  001e8	83 c2 01	 add	 edx, 1
  001eb	89 55 e0	 mov	 DWORD PTR _bufferPos$[ebp], edx

; 973  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  001ee	b8 08 00 00 00	 mov	 eax, 8
  001f3	2b 45 d0	 sub	 eax, DWORD PTR _bufferRem$[ebp]
  001f6	03 45 dc	 add	 eax, DWORD PTR _bufferBits$[ebp]
  001f9	89 45 dc	 mov	 DWORD PTR _bufferBits$[ebp], eax

; 974  :         sourceBits -= 8 - bufferRem;

  001fc	b9 08 00 00 00	 mov	 ecx, 8
  00201	2b 4d d0	 sub	 ecx, DWORD PTR _bufferRem$[ebp]
  00204	8b 55 0c	 mov	 edx, DWORD PTR _sourceBits$[ebp]
  00207	2b d1		 sub	 edx, ecx
  00209	89 55 0c	 mov	 DWORD PTR _sourceBits$[ebp], edx

; 975  :         /* now 0 <= sourceBits < 8;
; 976  :          * furthermore, all data (if any is left) is in source[sourcePos].
; 977  :          */
; 978  :         if (bufferBits == DIGESTBITS) {

  0020c	81 7d dc 00 02
	00 00		 cmp	 DWORD PTR _bufferBits$[ebp], 512 ; 00000200H
  00213	75 16		 jne	 SHORT $LN1@WHIRLPOOL_@2

; 979  :             /*
; 980  :              * process data block:
; 981  :              */
; 982  :             processBuffer(structpointer);

  00215	8b 45 10	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _processBuffer@4

; 983  :             /*
; 984  :              * reset buffer:
; 985  :              */
; 986  :             bufferBits = bufferPos = 0;

  0021e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bufferPos$[ebp], 0
  00225	8b 4d e0	 mov	 ecx, DWORD PTR _bufferPos$[ebp]
  00228	89 4d dc	 mov	 DWORD PTR _bufferBits$[ebp], ecx
$LN1@WHIRLPOOL_@2:

; 987  :         }
; 988  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  0022b	b9 08 00 00 00	 mov	 ecx, 8
  00230	2b 4d d0	 sub	 ecx, DWORD PTR _bufferRem$[ebp]
  00233	8b 55 d4	 mov	 edx, DWORD PTR _b$[ebp]
  00236	d3 e2		 shl	 edx, cl
  00238	8b 45 cc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0023b	03 45 e0	 add	 eax, DWORD PTR _bufferPos$[ebp]
  0023e	88 10		 mov	 BYTE PTR [eax], dl

; 989  :         bufferBits += (int)sourceBits;

  00240	8b 4d dc	 mov	 ecx, DWORD PTR _bufferBits$[ebp]
  00243	03 4d 0c	 add	 ecx, DWORD PTR _sourceBits$[ebp]
  00246	89 4d dc	 mov	 DWORD PTR _bufferBits$[ebp], ecx
$LN2@WHIRLPOOL_@2:

; 990  :     }
; 991  :     structpointer->bufferBits   = bufferBits;

  00249	8b 55 10	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0024c	8b 45 dc	 mov	 eax, DWORD PTR _bufferBits$[ebp]
  0024f	89 42 60	 mov	 DWORD PTR [edx+96], eax

; 992  :     structpointer->bufferPos    = bufferPos;

  00252	8b 4d 10	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00255	8b 55 e0	 mov	 edx, DWORD PTR _bufferPos$[ebp]
  00258	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 993  : }

  0025b	8b e5		 mov	 esp, ebp
  0025d	5d		 pop	 ebp
  0025e	c2 0c 00	 ret	 12			; 0000000cH
_WHIRLPOOL_add@12 ENDP
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp
;	COMDAT _processBuffer@4
_TEXT	SEGMENT
_block$ = -272						; size = 64
_state$ = -208						; size = 64
_L$ = -144						; size = 64
_buffer$ = -80						; size = 4
_r$ = -76						; size = 4
_K$ = -72						; size = 64
_i$ = -4						; size = 4
_structpointer$ = 8					; size = 4
_processBuffer@4 PROC					; COMDAT

; 635  : static void processBuffer(struct NESSIEstruct * const structpointer) {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 636  :     int i, r;
; 637  :     u64 K[8];        /* the round key */
; 638  :     u64 block[8];    /* mu(buffer) */
; 639  :     u64 state[8];    /* the cipher state */
; 640  :     u64 L[8];
; 641  :     u8 *buffer = structpointer->buffer;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00010	83 c0 20	 add	 eax, 32			; 00000020H
  00013	89 45 b0	 mov	 DWORD PTR _buffer$[ebp], eax

; 642  :     /*
; 643  :      * map the buffer to a block:
; 644  :      */
; 645  :     for (i = 0; i < 8; i++, buffer += 8) {

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 12		 jmp	 SHORT $LN6@processBuf
$LN5@processBuf:
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00028	8b 55 b0	 mov	 edx, DWORD PTR _buffer$[ebp]
  0002b	83 c2 08	 add	 edx, 8
  0002e	89 55 b0	 mov	 DWORD PTR _buffer$[ebp], edx
$LN6@processBuf:
  00031	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  00035	0f 8d de 00 00
	00		 jge	 $LN4@processBuf

; 646  :         block[i] =
; 647  :             (((u64)buffer[0]        ) << 56) ^
; 648  :             (((u64)buffer[1] & 0xffL) << 48) ^
; 649  :             (((u64)buffer[2] & 0xffL) << 40) ^
; 650  :             (((u64)buffer[3] & 0xffL) << 32) ^
; 651  :             (((u64)buffer[4] & 0xffL) << 24) ^
; 652  :             (((u64)buffer[5] & 0xffL) << 16) ^
; 653  :             (((u64)buffer[6] & 0xffL) <<  8) ^
; 654  :             (((u64)buffer[7] & 0xffL)      );

  0003b	8b 45 b0	 mov	 eax, DWORD PTR _buffer$[ebp]
  0003e	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00041	99		 cdq
  00042	b1 38		 mov	 cl, 56			; 00000038H
  00044	e8 00 00 00 00	 call	 __allshl
  00049	8b f0		 mov	 esi, eax
  0004b	8b fa		 mov	 edi, edx
  0004d	8b 4d b0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00050	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00054	99		 cdq
  00055	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0005a	83 e2 00	 and	 edx, 0
  0005d	b1 30		 mov	 cl, 48			; 00000030H
  0005f	e8 00 00 00 00	 call	 __allshl
  00064	33 f0		 xor	 esi, eax
  00066	33 fa		 xor	 edi, edx
  00068	8b 55 b0	 mov	 edx, DWORD PTR _buffer$[ebp]
  0006b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0006f	99		 cdq
  00070	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00075	83 e2 00	 and	 edx, 0
  00078	b1 28		 mov	 cl, 40			; 00000028H
  0007a	e8 00 00 00 00	 call	 __allshl
  0007f	33 f0		 xor	 esi, eax
  00081	33 fa		 xor	 edi, edx
  00083	8b 45 b0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00086	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0008a	99		 cdq
  0008b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00090	83 e2 00	 and	 edx, 0
  00093	b1 20		 mov	 cl, 32			; 00000020H
  00095	e8 00 00 00 00	 call	 __allshl
  0009a	33 f0		 xor	 esi, eax
  0009c	33 fa		 xor	 edi, edx
  0009e	8b 4d b0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  000a1	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000a5	99		 cdq
  000a6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000ab	83 e2 00	 and	 edx, 0
  000ae	b1 18		 mov	 cl, 24			; 00000018H
  000b0	e8 00 00 00 00	 call	 __allshl
  000b5	33 f0		 xor	 esi, eax
  000b7	33 fa		 xor	 edi, edx
  000b9	8b 55 b0	 mov	 edx, DWORD PTR _buffer$[ebp]
  000bc	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  000c0	99		 cdq
  000c1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c6	83 e2 00	 and	 edx, 0
  000c9	b1 10		 mov	 cl, 16			; 00000010H
  000cb	e8 00 00 00 00	 call	 __allshl
  000d0	33 f0		 xor	 esi, eax
  000d2	33 fa		 xor	 edi, edx
  000d4	8b 45 b0	 mov	 eax, DWORD PTR _buffer$[ebp]
  000d7	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  000db	99		 cdq
  000dc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e1	83 e2 00	 and	 edx, 0
  000e4	b1 08		 mov	 cl, 8
  000e6	e8 00 00 00 00	 call	 __allshl
  000eb	33 f0		 xor	 esi, eax
  000ed	33 fa		 xor	 edi, edx
  000ef	8b 4d b0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  000f2	0f b6 41 07	 movzx	 eax, BYTE PTR [ecx+7]
  000f6	99		 cdq
  000f7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000fc	83 e2 00	 and	 edx, 0
  000ff	33 f0		 xor	 esi, eax
  00101	33 fa		 xor	 edi, edx
  00103	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00106	89 b4 d5 f0 fe
	ff ff		 mov	 DWORD PTR _block$[ebp+edx*8], esi
  0010d	89 bc d5 f4 fe
	ff ff		 mov	 DWORD PTR _block$[ebp+edx*8+4], edi

; 655  :     }

  00114	e9 06 ff ff ff	 jmp	 $LN5@processBuf
$LN4@processBuf:

; 656  :     /*
; 657  :      * compute and apply K^0 to the cipher state:
; 658  :      */
; 659  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  00119	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  0011c	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  0011f	89 4d b8	 mov	 DWORD PTR _K$[ebp], ecx
  00122	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00125	89 55 bc	 mov	 DWORD PTR _K$[ebp+4], edx
  00128	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _block$[ebp]
  0012e	33 45 b8	 xor	 eax, DWORD PTR _K$[ebp]
  00131	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _block$[ebp+4]
  00137	33 4d bc	 xor	 ecx, DWORD PTR _K$[ebp+4]
  0013a	89 85 30 ff ff
	ff		 mov	 DWORD PTR _state$[ebp], eax
  00140	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+4], ecx

; 660  :     state[1] = block[1] ^ (K[1] = structpointer->hash[1]);

  00146	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00149	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  0014c	89 45 c0	 mov	 DWORD PTR _K$[ebp+8], eax
  0014f	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  00152	89 4d c4	 mov	 DWORD PTR _K$[ebp+12], ecx
  00155	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _block$[ebp+8]
  0015b	33 55 c0	 xor	 edx, DWORD PTR _K$[ebp+8]
  0015e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _block$[ebp+12]
  00164	33 45 c4	 xor	 eax, DWORD PTR _K$[ebp+12]
  00167	89 95 38 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+8], edx
  0016d	89 85 3c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+12], eax

; 661  :     state[2] = block[2] ^ (K[2] = structpointer->hash[2]);

  00173	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00176	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00179	89 55 c8	 mov	 DWORD PTR _K$[ebp+16], edx
  0017c	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  0017f	89 45 cc	 mov	 DWORD PTR _K$[ebp+20], eax
  00182	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _block$[ebp+16]
  00188	33 4d c8	 xor	 ecx, DWORD PTR _K$[ebp+16]
  0018b	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _block$[ebp+20]
  00191	33 55 cc	 xor	 edx, DWORD PTR _K$[ebp+20]
  00194	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+16], ecx
  0019a	89 95 44 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+20], edx

; 662  :     state[3] = block[3] ^ (K[3] = structpointer->hash[3]);

  001a0	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  001a3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  001a9	89 4d d0	 mov	 DWORD PTR _K$[ebp+24], ecx
  001ac	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  001b2	89 55 d4	 mov	 DWORD PTR _K$[ebp+28], edx
  001b5	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _block$[ebp+24]
  001bb	33 45 d0	 xor	 eax, DWORD PTR _K$[ebp+24]
  001be	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _block$[ebp+28]
  001c4	33 4d d4	 xor	 ecx, DWORD PTR _K$[ebp+28]
  001c7	89 85 48 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+24], eax
  001cd	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+28], ecx

; 663  :     state[4] = block[4] ^ (K[4] = structpointer->hash[4]);

  001d3	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  001d6	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  001dc	89 45 d8	 mov	 DWORD PTR _K$[ebp+32], eax
  001df	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  001e5	89 4d dc	 mov	 DWORD PTR _K$[ebp+36], ecx
  001e8	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _block$[ebp+32]
  001ee	33 55 d8	 xor	 edx, DWORD PTR _K$[ebp+32]
  001f1	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _block$[ebp+36]
  001f7	33 45 dc	 xor	 eax, DWORD PTR _K$[ebp+36]
  001fa	89 95 50 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+32], edx
  00200	89 85 54 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+36], eax

; 664  :     state[5] = block[5] ^ (K[5] = structpointer->hash[5]);

  00206	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00209	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0020f	89 55 e0	 mov	 DWORD PTR _K$[ebp+40], edx
  00212	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  00218	89 45 e4	 mov	 DWORD PTR _K$[ebp+44], eax
  0021b	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _block$[ebp+40]
  00221	33 4d e0	 xor	 ecx, DWORD PTR _K$[ebp+40]
  00224	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _block$[ebp+44]
  0022a	33 55 e4	 xor	 edx, DWORD PTR _K$[ebp+44]
  0022d	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+40], ecx
  00233	89 95 5c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+44], edx

; 665  :     state[6] = block[6] ^ (K[6] = structpointer->hash[6]);

  00239	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  0023c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00242	89 4d e8	 mov	 DWORD PTR _K$[ebp+48], ecx
  00245	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  0024b	89 55 ec	 mov	 DWORD PTR _K$[ebp+52], edx
  0024e	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _block$[ebp+48]
  00254	33 45 e8	 xor	 eax, DWORD PTR _K$[ebp+48]
  00257	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _block$[ebp+52]
  0025d	33 4d ec	 xor	 ecx, DWORD PTR _K$[ebp+52]
  00260	89 85 60 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+48], eax
  00266	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+52], ecx

; 666  :     state[7] = block[7] ^ (K[7] = structpointer->hash[7]);

  0026c	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0026f	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00275	89 45 f0	 mov	 DWORD PTR _K$[ebp+56], eax
  00278	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  0027e	89 4d f4	 mov	 DWORD PTR _K$[ebp+60], ecx
  00281	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _block$[ebp+56]
  00287	33 55 f0	 xor	 edx, DWORD PTR _K$[ebp+56]
  0028a	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _block$[ebp+60]
  00290	33 45 f4	 xor	 eax, DWORD PTR _K$[ebp+60]
  00293	89 95 68 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+56], edx
  00299	89 85 6c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+60], eax

; 667  :     /*
; 668  :      * iterate over all rounds:
; 669  :      */
; 670  :     for (r = 1; r <= R; r++) {

  0029f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR _r$[ebp], 1
  002a6	eb 09		 jmp	 SHORT $LN3@processBuf
$LN2@processBuf:
  002a8	8b 4d b4	 mov	 ecx, DWORD PTR _r$[ebp]
  002ab	83 c1 01	 add	 ecx, 1
  002ae	89 4d b4	 mov	 DWORD PTR _r$[ebp], ecx
$LN3@processBuf:
  002b1	83 7d b4 0a	 cmp	 DWORD PTR _r$[ebp], 10	; 0000000aH
  002b5	0f 8f 69 12 00
	00		 jg	 $LN1@processBuf

; 671  :         /*
; 672  :          * compute K^r from K^{r-1}:
; 673  :          */
; 674  :         L[0] =
; 675  :             C0[(int)(K[0] >> 56)       ] ^
; 676  :             C1[(int)(K[7] >> 48) & 0xff] ^
; 677  :             C2[(int)(K[6] >> 40) & 0xff] ^
; 678  :             C3[(int)(K[5] >> 32) & 0xff] ^
; 679  :             C4[(int)(K[4] >> 24) & 0xff] ^
; 680  :             C5[(int)(K[3] >> 16) & 0xff] ^
; 681  :             C6[(int)(K[2] >>  8) & 0xff] ^
; 682  :             C7[(int)(K[1]      ) & 0xff] ^
; 683  :             rc[r];

  002bb	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  002be	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  002c1	b1 38		 mov	 cl, 56			; 00000038H
  002c3	e8 00 00 00 00	 call	 __aullshr
  002c8	8b f0		 mov	 esi, eax
  002ca	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  002cd	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  002d0	b1 30		 mov	 cl, 48			; 00000030H
  002d2	e8 00 00 00 00	 call	 __aullshr
  002d7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002dc	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  002e3	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  002ea	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  002f1	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  002f8	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  002fb	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  002fe	b1 28		 mov	 cl, 40			; 00000028H
  00300	e8 00 00 00 00	 call	 __aullshr
  00305	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0030a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00311	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00318	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  0031b	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  0031e	b1 20		 mov	 cl, 32			; 00000020H
  00320	e8 00 00 00 00	 call	 __aullshr
  00325	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0032a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00331	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00338	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  0033b	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  0033e	b1 18		 mov	 cl, 24			; 00000018H
  00340	e8 00 00 00 00	 call	 __aullshr
  00345	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0034a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00351	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00358	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  0035b	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  0035e	b1 10		 mov	 cl, 16			; 00000010H
  00360	e8 00 00 00 00	 call	 __aullshr
  00365	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0036a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00371	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00378	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  0037b	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  0037e	b1 08		 mov	 cl, 8
  00380	e8 00 00 00 00	 call	 __aullshr
  00385	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0038a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00391	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00398	8b 55 c0	 mov	 edx, DWORD PTR _K$[ebp+8]
  0039b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  003a1	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[edx*8]
  003a8	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edx*8+4]
  003af	8b 45 b4	 mov	 eax, DWORD PTR _r$[ebp]
  003b2	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _rc[eax*8]
  003b9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _rc[eax*8+4]
  003c0	89 bd 70 ff ff
	ff		 mov	 DWORD PTR _L$[ebp], edi
  003c6	89 b5 74 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+4], esi

; 684  :         L[1] =
; 685  :             C0[(int)(K[1] >> 56)       ] ^
; 686  :             C1[(int)(K[0] >> 48) & 0xff] ^
; 687  :             C2[(int)(K[7] >> 40) & 0xff] ^
; 688  :             C3[(int)(K[6] >> 32) & 0xff] ^
; 689  :             C4[(int)(K[5] >> 24) & 0xff] ^
; 690  :             C5[(int)(K[4] >> 16) & 0xff] ^
; 691  :             C6[(int)(K[3] >>  8) & 0xff] ^
; 692  :             C7[(int)(K[2]      ) & 0xff];

  003cc	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  003cf	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  003d2	b1 38		 mov	 cl, 56			; 00000038H
  003d4	e8 00 00 00 00	 call	 __aullshr
  003d9	8b f0		 mov	 esi, eax
  003db	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  003de	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  003e1	b1 30		 mov	 cl, 48			; 00000030H
  003e3	e8 00 00 00 00	 call	 __aullshr
  003e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003ed	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  003f4	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  003fb	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00402	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00409	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  0040c	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  0040f	b1 28		 mov	 cl, 40			; 00000028H
  00411	e8 00 00 00 00	 call	 __aullshr
  00416	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0041b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00422	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00429	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  0042c	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  0042f	b1 20		 mov	 cl, 32			; 00000020H
  00431	e8 00 00 00 00	 call	 __aullshr
  00436	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0043b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00442	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00449	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  0044c	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  0044f	b1 18		 mov	 cl, 24			; 00000018H
  00451	e8 00 00 00 00	 call	 __aullshr
  00456	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0045b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00462	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00469	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  0046c	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  0046f	b1 10		 mov	 cl, 16			; 00000010H
  00471	e8 00 00 00 00	 call	 __aullshr
  00476	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0047b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00482	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00489	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  0048c	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  0048f	b1 08		 mov	 cl, 8
  00491	e8 00 00 00 00	 call	 __aullshr
  00496	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0049b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  004a2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  004a9	8b 4d c8	 mov	 ecx, DWORD PTR _K$[ebp+16]
  004ac	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004b2	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  004b9	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  004c0	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+8], edi
  004c6	89 b5 7c ff ff
	ff		 mov	 DWORD PTR _L$[ebp+12], esi

; 693  :         L[2] =
; 694  :             C0[(int)(K[2] >> 56)       ] ^
; 695  :             C1[(int)(K[1] >> 48) & 0xff] ^
; 696  :             C2[(int)(K[0] >> 40) & 0xff] ^
; 697  :             C3[(int)(K[7] >> 32) & 0xff] ^
; 698  :             C4[(int)(K[6] >> 24) & 0xff] ^
; 699  :             C5[(int)(K[5] >> 16) & 0xff] ^
; 700  :             C6[(int)(K[4] >>  8) & 0xff] ^
; 701  :             C7[(int)(K[3]      ) & 0xff];

  004cc	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  004cf	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  004d2	b1 38		 mov	 cl, 56			; 00000038H
  004d4	e8 00 00 00 00	 call	 __aullshr
  004d9	8b f0		 mov	 esi, eax
  004db	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  004de	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  004e1	b1 30		 mov	 cl, 48			; 00000030H
  004e3	e8 00 00 00 00	 call	 __aullshr
  004e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004ed	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  004f4	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  004fb	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00502	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00509	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  0050c	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  0050f	b1 28		 mov	 cl, 40			; 00000028H
  00511	e8 00 00 00 00	 call	 __aullshr
  00516	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0051b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00522	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00529	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  0052c	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  0052f	b1 20		 mov	 cl, 32			; 00000020H
  00531	e8 00 00 00 00	 call	 __aullshr
  00536	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0053b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00542	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00549	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  0054c	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  0054f	b1 18		 mov	 cl, 24			; 00000018H
  00551	e8 00 00 00 00	 call	 __aullshr
  00556	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0055b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00562	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00569	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  0056c	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  0056f	b1 10		 mov	 cl, 16			; 00000010H
  00571	e8 00 00 00 00	 call	 __aullshr
  00576	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0057b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00582	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00589	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  0058c	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  0058f	b1 08		 mov	 cl, 8
  00591	e8 00 00 00 00	 call	 __aullshr
  00596	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0059b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  005a2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  005a9	8b 55 d0	 mov	 edx, DWORD PTR _K$[ebp+24]
  005ac	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005b2	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[edx*8]
  005b9	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edx*8+4]
  005c0	89 7d 80	 mov	 DWORD PTR _L$[ebp+16], edi
  005c3	89 75 84	 mov	 DWORD PTR _L$[ebp+20], esi

; 702  :         L[3] =
; 703  :             C0[(int)(K[3] >> 56)       ] ^
; 704  :             C1[(int)(K[2] >> 48) & 0xff] ^
; 705  :             C2[(int)(K[1] >> 40) & 0xff] ^
; 706  :             C3[(int)(K[0] >> 32) & 0xff] ^
; 707  :             C4[(int)(K[7] >> 24) & 0xff] ^
; 708  :             C5[(int)(K[6] >> 16) & 0xff] ^
; 709  :             C6[(int)(K[5] >>  8) & 0xff] ^
; 710  :             C7[(int)(K[4]      ) & 0xff];

  005c6	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  005c9	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  005cc	b1 38		 mov	 cl, 56			; 00000038H
  005ce	e8 00 00 00 00	 call	 __aullshr
  005d3	8b f0		 mov	 esi, eax
  005d5	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  005d8	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  005db	b1 30		 mov	 cl, 48			; 00000030H
  005dd	e8 00 00 00 00	 call	 __aullshr
  005e2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005e7	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  005ee	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  005f5	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  005fc	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00603	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  00606	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  00609	b1 28		 mov	 cl, 40			; 00000028H
  0060b	e8 00 00 00 00	 call	 __aullshr
  00610	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00615	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0061c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00623	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  00626	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  00629	b1 20		 mov	 cl, 32			; 00000020H
  0062b	e8 00 00 00 00	 call	 __aullshr
  00630	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00635	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0063c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00643	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  00646	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  00649	b1 18		 mov	 cl, 24			; 00000018H
  0064b	e8 00 00 00 00	 call	 __aullshr
  00650	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00655	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  0065c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00663	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  00666	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  00669	b1 10		 mov	 cl, 16			; 00000010H
  0066b	e8 00 00 00 00	 call	 __aullshr
  00670	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00675	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  0067c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00683	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  00686	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  00689	b1 08		 mov	 cl, 8
  0068b	e8 00 00 00 00	 call	 __aullshr
  00690	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00695	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  0069c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  006a3	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  006a6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006ab	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  006b2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  006b9	89 7d 88	 mov	 DWORD PTR _L$[ebp+24], edi
  006bc	89 75 8c	 mov	 DWORD PTR _L$[ebp+28], esi

; 711  :         L[4] =
; 712  :             C0[(int)(K[4] >> 56)       ] ^
; 713  :             C1[(int)(K[3] >> 48) & 0xff] ^
; 714  :             C2[(int)(K[2] >> 40) & 0xff] ^
; 715  :             C3[(int)(K[1] >> 32) & 0xff] ^
; 716  :             C4[(int)(K[0] >> 24) & 0xff] ^
; 717  :             C5[(int)(K[7] >> 16) & 0xff] ^
; 718  :             C6[(int)(K[6] >>  8) & 0xff] ^
; 719  :             C7[(int)(K[5]      ) & 0xff];

  006bf	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  006c2	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  006c5	b1 38		 mov	 cl, 56			; 00000038H
  006c7	e8 00 00 00 00	 call	 __aullshr
  006cc	8b f0		 mov	 esi, eax
  006ce	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  006d1	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  006d4	b1 30		 mov	 cl, 48			; 00000030H
  006d6	e8 00 00 00 00	 call	 __aullshr
  006db	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006e0	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  006e7	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  006ee	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  006f5	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  006fc	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  006ff	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  00702	b1 28		 mov	 cl, 40			; 00000028H
  00704	e8 00 00 00 00	 call	 __aullshr
  00709	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0070e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00715	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  0071c	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  0071f	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  00722	b1 20		 mov	 cl, 32			; 00000020H
  00724	e8 00 00 00 00	 call	 __aullshr
  00729	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0072e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00735	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  0073c	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  0073f	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  00742	b1 18		 mov	 cl, 24			; 00000018H
  00744	e8 00 00 00 00	 call	 __aullshr
  00749	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0074e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00755	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  0075c	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  0075f	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  00762	b1 10		 mov	 cl, 16			; 00000010H
  00764	e8 00 00 00 00	 call	 __aullshr
  00769	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0076e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00775	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  0077c	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  0077f	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  00782	b1 08		 mov	 cl, 8
  00784	e8 00 00 00 00	 call	 __aullshr
  00789	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0078e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00795	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  0079c	8b 4d e0	 mov	 ecx, DWORD PTR _K$[ebp+40]
  0079f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  007a5	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  007ac	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  007b3	89 7d 90	 mov	 DWORD PTR _L$[ebp+32], edi
  007b6	89 75 94	 mov	 DWORD PTR _L$[ebp+36], esi

; 720  :         L[5] =
; 721  :             C0[(int)(K[5] >> 56)       ] ^
; 722  :             C1[(int)(K[4] >> 48) & 0xff] ^
; 723  :             C2[(int)(K[3] >> 40) & 0xff] ^
; 724  :             C3[(int)(K[2] >> 32) & 0xff] ^
; 725  :             C4[(int)(K[1] >> 24) & 0xff] ^
; 726  :             C5[(int)(K[0] >> 16) & 0xff] ^
; 727  :             C6[(int)(K[7] >>  8) & 0xff] ^
; 728  :             C7[(int)(K[6]      ) & 0xff];

  007b9	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  007bc	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  007bf	b1 38		 mov	 cl, 56			; 00000038H
  007c1	e8 00 00 00 00	 call	 __aullshr
  007c6	8b f0		 mov	 esi, eax
  007c8	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  007cb	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  007ce	b1 30		 mov	 cl, 48			; 00000030H
  007d0	e8 00 00 00 00	 call	 __aullshr
  007d5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  007da	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  007e1	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  007e8	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  007ef	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  007f6	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  007f9	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  007fc	b1 28		 mov	 cl, 40			; 00000028H
  007fe	e8 00 00 00 00	 call	 __aullshr
  00803	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00808	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0080f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00816	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  00819	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  0081c	b1 20		 mov	 cl, 32			; 00000020H
  0081e	e8 00 00 00 00	 call	 __aullshr
  00823	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00828	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0082f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00836	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  00839	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  0083c	b1 18		 mov	 cl, 24			; 00000018H
  0083e	e8 00 00 00 00	 call	 __aullshr
  00843	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00848	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  0084f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00856	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  00859	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  0085c	b1 10		 mov	 cl, 16			; 00000010H
  0085e	e8 00 00 00 00	 call	 __aullshr
  00863	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00868	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  0086f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00876	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  00879	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  0087c	b1 08		 mov	 cl, 8
  0087e	e8 00 00 00 00	 call	 __aullshr
  00883	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00888	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  0088f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00896	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp+48]
  00899	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0089f	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[edx*8]
  008a6	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edx*8+4]
  008ad	89 7d 98	 mov	 DWORD PTR _L$[ebp+40], edi
  008b0	89 75 9c	 mov	 DWORD PTR _L$[ebp+44], esi

; 729  :         L[6] =
; 730  :             C0[(int)(K[6] >> 56)       ] ^
; 731  :             C1[(int)(K[5] >> 48) & 0xff] ^
; 732  :             C2[(int)(K[4] >> 40) & 0xff] ^
; 733  :             C3[(int)(K[3] >> 32) & 0xff] ^
; 734  :             C4[(int)(K[2] >> 24) & 0xff] ^
; 735  :             C5[(int)(K[1] >> 16) & 0xff] ^
; 736  :             C6[(int)(K[0] >>  8) & 0xff] ^
; 737  :             C7[(int)(K[7]      ) & 0xff];

  008b3	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  008b6	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  008b9	b1 38		 mov	 cl, 56			; 00000038H
  008bb	e8 00 00 00 00	 call	 __aullshr
  008c0	8b f0		 mov	 esi, eax
  008c2	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  008c5	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  008c8	b1 30		 mov	 cl, 48			; 00000030H
  008ca	e8 00 00 00 00	 call	 __aullshr
  008cf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008d4	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  008db	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  008e2	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  008e9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  008f0	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  008f3	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  008f6	b1 28		 mov	 cl, 40			; 00000028H
  008f8	e8 00 00 00 00	 call	 __aullshr
  008fd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00902	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00909	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00910	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  00913	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  00916	b1 20		 mov	 cl, 32			; 00000020H
  00918	e8 00 00 00 00	 call	 __aullshr
  0091d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00922	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00929	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00930	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  00933	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  00936	b1 18		 mov	 cl, 24			; 00000018H
  00938	e8 00 00 00 00	 call	 __aullshr
  0093d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00942	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00949	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00950	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  00953	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  00956	b1 10		 mov	 cl, 16			; 00000010H
  00958	e8 00 00 00 00	 call	 __aullshr
  0095d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00962	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00969	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00970	8b 45 b8	 mov	 eax, DWORD PTR _K$[ebp]
  00973	8b 55 bc	 mov	 edx, DWORD PTR _K$[ebp+4]
  00976	b1 08		 mov	 cl, 8
  00978	e8 00 00 00 00	 call	 __aullshr
  0097d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00982	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00989	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00990	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  00993	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00998	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0099f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  009a6	89 7d a0	 mov	 DWORD PTR _L$[ebp+48], edi
  009a9	89 75 a4	 mov	 DWORD PTR _L$[ebp+52], esi

; 738  :         L[7] =
; 739  :             C0[(int)(K[7] >> 56)       ] ^
; 740  :             C1[(int)(K[6] >> 48) & 0xff] ^
; 741  :             C2[(int)(K[5] >> 40) & 0xff] ^
; 742  :             C3[(int)(K[4] >> 32) & 0xff] ^
; 743  :             C4[(int)(K[3] >> 24) & 0xff] ^
; 744  :             C5[(int)(K[2] >> 16) & 0xff] ^
; 745  :             C6[(int)(K[1] >>  8) & 0xff] ^
; 746  :             C7[(int)(K[0]      ) & 0xff];

  009ac	8b 45 f0	 mov	 eax, DWORD PTR _K$[ebp+56]
  009af	8b 55 f4	 mov	 edx, DWORD PTR _K$[ebp+60]
  009b2	b1 38		 mov	 cl, 56			; 00000038H
  009b4	e8 00 00 00 00	 call	 __aullshr
  009b9	8b f0		 mov	 esi, eax
  009bb	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp+48]
  009be	8b 55 ec	 mov	 edx, DWORD PTR _K$[ebp+52]
  009c1	b1 30		 mov	 cl, 48			; 00000030H
  009c3	e8 00 00 00 00	 call	 __aullshr
  009c8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  009cd	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  009d4	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  009db	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  009e2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  009e9	8b 45 e0	 mov	 eax, DWORD PTR _K$[ebp+40]
  009ec	8b 55 e4	 mov	 edx, DWORD PTR _K$[ebp+44]
  009ef	b1 28		 mov	 cl, 40			; 00000028H
  009f1	e8 00 00 00 00	 call	 __aullshr
  009f6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  009fb	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00a02	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00a09	8b 45 d8	 mov	 eax, DWORD PTR _K$[ebp+32]
  00a0c	8b 55 dc	 mov	 edx, DWORD PTR _K$[ebp+36]
  00a0f	b1 20		 mov	 cl, 32			; 00000020H
  00a11	e8 00 00 00 00	 call	 __aullshr
  00a16	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a1b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00a22	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00a29	8b 45 d0	 mov	 eax, DWORD PTR _K$[ebp+24]
  00a2c	8b 55 d4	 mov	 edx, DWORD PTR _K$[ebp+28]
  00a2f	b1 18		 mov	 cl, 24			; 00000018H
  00a31	e8 00 00 00 00	 call	 __aullshr
  00a36	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a3b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00a42	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00a49	8b 45 c8	 mov	 eax, DWORD PTR _K$[ebp+16]
  00a4c	8b 55 cc	 mov	 edx, DWORD PTR _K$[ebp+20]
  00a4f	b1 10		 mov	 cl, 16			; 00000010H
  00a51	e8 00 00 00 00	 call	 __aullshr
  00a56	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a5b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00a62	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00a69	8b 45 c0	 mov	 eax, DWORD PTR _K$[ebp+8]
  00a6c	8b 55 c4	 mov	 edx, DWORD PTR _K$[ebp+12]
  00a6f	b1 08		 mov	 cl, 8
  00a71	e8 00 00 00 00	 call	 __aullshr
  00a76	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a7b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00a82	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00a89	8b 4d b8	 mov	 ecx, DWORD PTR _K$[ebp]
  00a8c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00a92	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  00a99	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  00aa0	89 7d a8	 mov	 DWORD PTR _L$[ebp+56], edi
  00aa3	89 75 ac	 mov	 DWORD PTR _L$[ebp+60], esi

; 747  :         K[0] = L[0];

  00aa6	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _L$[ebp]
  00aac	89 55 b8	 mov	 DWORD PTR _K$[ebp], edx
  00aaf	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _L$[ebp+4]
  00ab5	89 45 bc	 mov	 DWORD PTR _K$[ebp+4], eax

; 748  :         K[1] = L[1];

  00ab8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _L$[ebp+8]
  00abe	89 4d c0	 mov	 DWORD PTR _K$[ebp+8], ecx
  00ac1	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _L$[ebp+12]
  00ac7	89 55 c4	 mov	 DWORD PTR _K$[ebp+12], edx

; 749  :         K[2] = L[2];

  00aca	8b 45 80	 mov	 eax, DWORD PTR _L$[ebp+16]
  00acd	89 45 c8	 mov	 DWORD PTR _K$[ebp+16], eax
  00ad0	8b 4d 84	 mov	 ecx, DWORD PTR _L$[ebp+20]
  00ad3	89 4d cc	 mov	 DWORD PTR _K$[ebp+20], ecx

; 750  :         K[3] = L[3];

  00ad6	8b 55 88	 mov	 edx, DWORD PTR _L$[ebp+24]
  00ad9	89 55 d0	 mov	 DWORD PTR _K$[ebp+24], edx
  00adc	8b 45 8c	 mov	 eax, DWORD PTR _L$[ebp+28]
  00adf	89 45 d4	 mov	 DWORD PTR _K$[ebp+28], eax

; 751  :         K[4] = L[4];

  00ae2	8b 4d 90	 mov	 ecx, DWORD PTR _L$[ebp+32]
  00ae5	89 4d d8	 mov	 DWORD PTR _K$[ebp+32], ecx
  00ae8	8b 55 94	 mov	 edx, DWORD PTR _L$[ebp+36]
  00aeb	89 55 dc	 mov	 DWORD PTR _K$[ebp+36], edx

; 752  :         K[5] = L[5];

  00aee	8b 45 98	 mov	 eax, DWORD PTR _L$[ebp+40]
  00af1	89 45 e0	 mov	 DWORD PTR _K$[ebp+40], eax
  00af4	8b 4d 9c	 mov	 ecx, DWORD PTR _L$[ebp+44]
  00af7	89 4d e4	 mov	 DWORD PTR _K$[ebp+44], ecx

; 753  :         K[6] = L[6];

  00afa	8b 55 a0	 mov	 edx, DWORD PTR _L$[ebp+48]
  00afd	89 55 e8	 mov	 DWORD PTR _K$[ebp+48], edx
  00b00	8b 45 a4	 mov	 eax, DWORD PTR _L$[ebp+52]
  00b03	89 45 ec	 mov	 DWORD PTR _K$[ebp+52], eax

; 754  :         K[7] = L[7];

  00b06	8b 4d a8	 mov	 ecx, DWORD PTR _L$[ebp+56]
  00b09	89 4d f0	 mov	 DWORD PTR _K$[ebp+56], ecx
  00b0c	8b 55 ac	 mov	 edx, DWORD PTR _L$[ebp+60]
  00b0f	89 55 f4	 mov	 DWORD PTR _K$[ebp+60], edx

; 755  :         /*
; 756  :          * apply the r-th round transformation:
; 757  :          */
; 758  :         L[0] =
; 759  :             C0[(int)(state[0] >> 56)       ] ^
; 760  :             C1[(int)(state[7] >> 48) & 0xff] ^
; 761  :             C2[(int)(state[6] >> 40) & 0xff] ^
; 762  :             C3[(int)(state[5] >> 32) & 0xff] ^
; 763  :             C4[(int)(state[4] >> 24) & 0xff] ^
; 764  :             C5[(int)(state[3] >> 16) & 0xff] ^
; 765  :             C6[(int)(state[2] >>  8) & 0xff] ^
; 766  :             C7[(int)(state[1]      ) & 0xff] ^
; 767  :             K[0];

  00b12	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  00b18	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  00b1e	b1 38		 mov	 cl, 56			; 00000038H
  00b20	e8 00 00 00 00	 call	 __aullshr
  00b25	8b f0		 mov	 esi, eax
  00b27	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  00b2d	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  00b33	b1 30		 mov	 cl, 48			; 00000030H
  00b35	e8 00 00 00 00	 call	 __aullshr
  00b3a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b3f	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  00b46	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00b4d	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00b54	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00b5b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  00b61	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  00b67	b1 28		 mov	 cl, 40			; 00000028H
  00b69	e8 00 00 00 00	 call	 __aullshr
  00b6e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b73	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00b7a	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00b81	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  00b87	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  00b8d	b1 20		 mov	 cl, 32			; 00000020H
  00b8f	e8 00 00 00 00	 call	 __aullshr
  00b94	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b99	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00ba0	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00ba7	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  00bad	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  00bb3	b1 18		 mov	 cl, 24			; 00000018H
  00bb5	e8 00 00 00 00	 call	 __aullshr
  00bba	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bbf	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00bc6	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00bcd	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  00bd3	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  00bd9	b1 10		 mov	 cl, 16			; 00000010H
  00bdb	e8 00 00 00 00	 call	 __aullshr
  00be0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00be5	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00bec	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00bf3	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  00bf9	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  00bff	b1 08		 mov	 cl, 8
  00c01	e8 00 00 00 00	 call	 __aullshr
  00c06	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c0b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00c12	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00c19	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  00c1f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c24	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00c2b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00c32	33 7d b8	 xor	 edi, DWORD PTR _K$[ebp]
  00c35	33 75 bc	 xor	 esi, DWORD PTR _K$[ebp+4]
  00c38	89 bd 70 ff ff
	ff		 mov	 DWORD PTR _L$[ebp], edi
  00c3e	89 b5 74 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+4], esi

; 768  :         L[1] =
; 769  :             C0[(int)(state[1] >> 56)       ] ^
; 770  :             C1[(int)(state[0] >> 48) & 0xff] ^
; 771  :             C2[(int)(state[7] >> 40) & 0xff] ^
; 772  :             C3[(int)(state[6] >> 32) & 0xff] ^
; 773  :             C4[(int)(state[5] >> 24) & 0xff] ^
; 774  :             C5[(int)(state[4] >> 16) & 0xff] ^
; 775  :             C6[(int)(state[3] >>  8) & 0xff] ^
; 776  :             C7[(int)(state[2]      ) & 0xff] ^
; 777  :             K[1];

  00c44	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  00c4a	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  00c50	b1 38		 mov	 cl, 56			; 00000038H
  00c52	e8 00 00 00 00	 call	 __aullshr
  00c57	8b f0		 mov	 esi, eax
  00c59	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  00c5f	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  00c65	b1 30		 mov	 cl, 48			; 00000030H
  00c67	e8 00 00 00 00	 call	 __aullshr
  00c6c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c71	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  00c78	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00c7f	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00c86	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00c8d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  00c93	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  00c99	b1 28		 mov	 cl, 40			; 00000028H
  00c9b	e8 00 00 00 00	 call	 __aullshr
  00ca0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ca5	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00cac	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00cb3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  00cb9	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  00cbf	b1 20		 mov	 cl, 32			; 00000020H
  00cc1	e8 00 00 00 00	 call	 __aullshr
  00cc6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ccb	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00cd2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00cd9	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  00cdf	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  00ce5	b1 18		 mov	 cl, 24			; 00000018H
  00ce7	e8 00 00 00 00	 call	 __aullshr
  00cec	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00cf1	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00cf8	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00cff	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  00d05	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  00d0b	b1 10		 mov	 cl, 16			; 00000010H
  00d0d	e8 00 00 00 00	 call	 __aullshr
  00d12	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d17	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00d1e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00d25	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  00d2b	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  00d31	b1 08		 mov	 cl, 8
  00d33	e8 00 00 00 00	 call	 __aullshr
  00d38	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d3d	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00d44	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00d4b	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+16]
  00d51	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00d57	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  00d5e	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  00d65	33 7d c0	 xor	 edi, DWORD PTR _K$[ebp+8]
  00d68	33 75 c4	 xor	 esi, DWORD PTR _K$[ebp+12]
  00d6b	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+8], edi
  00d71	89 b5 7c ff ff
	ff		 mov	 DWORD PTR _L$[ebp+12], esi

; 778  :         L[2] =
; 779  :             C0[(int)(state[2] >> 56)       ] ^
; 780  :             C1[(int)(state[1] >> 48) & 0xff] ^
; 781  :             C2[(int)(state[0] >> 40) & 0xff] ^
; 782  :             C3[(int)(state[7] >> 32) & 0xff] ^
; 783  :             C4[(int)(state[6] >> 24) & 0xff] ^
; 784  :             C5[(int)(state[5] >> 16) & 0xff] ^
; 785  :             C6[(int)(state[4] >>  8) & 0xff] ^
; 786  :             C7[(int)(state[3]      ) & 0xff] ^
; 787  :             K[2];

  00d77	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  00d7d	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  00d83	b1 38		 mov	 cl, 56			; 00000038H
  00d85	e8 00 00 00 00	 call	 __aullshr
  00d8a	8b f0		 mov	 esi, eax
  00d8c	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  00d92	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  00d98	b1 30		 mov	 cl, 48			; 00000030H
  00d9a	e8 00 00 00 00	 call	 __aullshr
  00d9f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00da4	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  00dab	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00db2	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00db9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00dc0	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  00dc6	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  00dcc	b1 28		 mov	 cl, 40			; 00000028H
  00dce	e8 00 00 00 00	 call	 __aullshr
  00dd3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00dd8	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00ddf	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00de6	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  00dec	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  00df2	b1 20		 mov	 cl, 32			; 00000020H
  00df4	e8 00 00 00 00	 call	 __aullshr
  00df9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00dfe	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00e05	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00e0c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  00e12	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  00e18	b1 18		 mov	 cl, 24			; 00000018H
  00e1a	e8 00 00 00 00	 call	 __aullshr
  00e1f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e24	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00e2b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00e32	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  00e38	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  00e3e	b1 10		 mov	 cl, 16			; 00000010H
  00e40	e8 00 00 00 00	 call	 __aullshr
  00e45	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e4a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00e51	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00e58	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  00e5e	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  00e64	b1 08		 mov	 cl, 8
  00e66	e8 00 00 00 00	 call	 __aullshr
  00e6b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e70	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00e77	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00e7e	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+24]
  00e84	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00e8a	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[edx*8]
  00e91	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edx*8+4]
  00e98	33 7d c8	 xor	 edi, DWORD PTR _K$[ebp+16]
  00e9b	33 75 cc	 xor	 esi, DWORD PTR _K$[ebp+20]
  00e9e	89 7d 80	 mov	 DWORD PTR _L$[ebp+16], edi
  00ea1	89 75 84	 mov	 DWORD PTR _L$[ebp+20], esi

; 788  :         L[3] =
; 789  :             C0[(int)(state[3] >> 56)       ] ^
; 790  :             C1[(int)(state[2] >> 48) & 0xff] ^
; 791  :             C2[(int)(state[1] >> 40) & 0xff] ^
; 792  :             C3[(int)(state[0] >> 32) & 0xff] ^
; 793  :             C4[(int)(state[7] >> 24) & 0xff] ^
; 794  :             C5[(int)(state[6] >> 16) & 0xff] ^
; 795  :             C6[(int)(state[5] >>  8) & 0xff] ^
; 796  :             C7[(int)(state[4]      ) & 0xff] ^
; 797  :             K[3];

  00ea4	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  00eaa	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  00eb0	b1 38		 mov	 cl, 56			; 00000038H
  00eb2	e8 00 00 00 00	 call	 __aullshr
  00eb7	8b f0		 mov	 esi, eax
  00eb9	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  00ebf	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  00ec5	b1 30		 mov	 cl, 48			; 00000030H
  00ec7	e8 00 00 00 00	 call	 __aullshr
  00ecc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ed1	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  00ed8	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00edf	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  00ee6	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00eed	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  00ef3	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  00ef9	b1 28		 mov	 cl, 40			; 00000028H
  00efb	e8 00 00 00 00	 call	 __aullshr
  00f00	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f05	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00f0c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00f13	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  00f19	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  00f1f	b1 20		 mov	 cl, 32			; 00000020H
  00f21	e8 00 00 00 00	 call	 __aullshr
  00f26	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f2b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00f32	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00f39	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  00f3f	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  00f45	b1 18		 mov	 cl, 24			; 00000018H
  00f47	e8 00 00 00 00	 call	 __aullshr
  00f4c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f51	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00f58	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00f5f	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  00f65	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  00f6b	b1 10		 mov	 cl, 16			; 00000010H
  00f6d	e8 00 00 00 00	 call	 __aullshr
  00f72	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f77	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00f7e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00f85	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  00f8b	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  00f91	b1 08		 mov	 cl, 8
  00f93	e8 00 00 00 00	 call	 __aullshr
  00f98	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f9d	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00fa4	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00fab	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  00fb1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00fb6	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00fbd	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00fc4	33 7d d0	 xor	 edi, DWORD PTR _K$[ebp+24]
  00fc7	33 75 d4	 xor	 esi, DWORD PTR _K$[ebp+28]
  00fca	89 7d 88	 mov	 DWORD PTR _L$[ebp+24], edi
  00fcd	89 75 8c	 mov	 DWORD PTR _L$[ebp+28], esi

; 798  :         L[4] =
; 799  :             C0[(int)(state[4] >> 56)       ] ^
; 800  :             C1[(int)(state[3] >> 48) & 0xff] ^
; 801  :             C2[(int)(state[2] >> 40) & 0xff] ^
; 802  :             C3[(int)(state[1] >> 32) & 0xff] ^
; 803  :             C4[(int)(state[0] >> 24) & 0xff] ^
; 804  :             C5[(int)(state[7] >> 16) & 0xff] ^
; 805  :             C6[(int)(state[6] >>  8) & 0xff] ^
; 806  :             C7[(int)(state[5]      ) & 0xff] ^
; 807  :             K[4];

  00fd0	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  00fd6	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  00fdc	b1 38		 mov	 cl, 56			; 00000038H
  00fde	e8 00 00 00 00	 call	 __aullshr
  00fe3	8b f0		 mov	 esi, eax
  00fe5	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  00feb	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  00ff1	b1 30		 mov	 cl, 48			; 00000030H
  00ff3	e8 00 00 00 00	 call	 __aullshr
  00ff8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ffd	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  01004	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  0100b	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  01012	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01019	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  0101f	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  01025	b1 28		 mov	 cl, 40			; 00000028H
  01027	e8 00 00 00 00	 call	 __aullshr
  0102c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01031	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  01038	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  0103f	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  01045	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  0104b	b1 20		 mov	 cl, 32			; 00000020H
  0104d	e8 00 00 00 00	 call	 __aullshr
  01052	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01057	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0105e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  01065	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  0106b	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  01071	b1 18		 mov	 cl, 24			; 00000018H
  01073	e8 00 00 00 00	 call	 __aullshr
  01078	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0107d	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  01084	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  0108b	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  01091	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  01097	b1 10		 mov	 cl, 16			; 00000010H
  01099	e8 00 00 00 00	 call	 __aullshr
  0109e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010a3	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  010aa	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  010b1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  010b7	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  010bd	b1 08		 mov	 cl, 8
  010bf	e8 00 00 00 00	 call	 __aullshr
  010c4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010c9	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  010d0	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  010d7	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+40]
  010dd	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  010e3	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  010ea	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  010f1	33 7d d8	 xor	 edi, DWORD PTR _K$[ebp+32]
  010f4	33 75 dc	 xor	 esi, DWORD PTR _K$[ebp+36]
  010f7	89 7d 90	 mov	 DWORD PTR _L$[ebp+32], edi
  010fa	89 75 94	 mov	 DWORD PTR _L$[ebp+36], esi

; 808  :         L[5] =
; 809  :             C0[(int)(state[5] >> 56)       ] ^
; 810  :             C1[(int)(state[4] >> 48) & 0xff] ^
; 811  :             C2[(int)(state[3] >> 40) & 0xff] ^
; 812  :             C3[(int)(state[2] >> 32) & 0xff] ^
; 813  :             C4[(int)(state[1] >> 24) & 0xff] ^
; 814  :             C5[(int)(state[0] >> 16) & 0xff] ^
; 815  :             C6[(int)(state[7] >>  8) & 0xff] ^
; 816  :             C7[(int)(state[6]      ) & 0xff] ^
; 817  :             K[5];

  010fd	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  01103	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  01109	b1 38		 mov	 cl, 56			; 00000038H
  0110b	e8 00 00 00 00	 call	 __aullshr
  01110	8b f0		 mov	 esi, eax
  01112	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  01118	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  0111e	b1 30		 mov	 cl, 48			; 00000030H
  01120	e8 00 00 00 00	 call	 __aullshr
  01125	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0112a	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  01131	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01138	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  0113f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01146	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  0114c	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  01152	b1 28		 mov	 cl, 40			; 00000028H
  01154	e8 00 00 00 00	 call	 __aullshr
  01159	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0115e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  01165	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  0116c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  01172	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  01178	b1 20		 mov	 cl, 32			; 00000020H
  0117a	e8 00 00 00 00	 call	 __aullshr
  0117f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01184	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0118b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  01192	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  01198	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  0119e	b1 18		 mov	 cl, 24			; 00000018H
  011a0	e8 00 00 00 00	 call	 __aullshr
  011a5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  011aa	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  011b1	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  011b8	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  011be	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  011c4	b1 10		 mov	 cl, 16			; 00000010H
  011c6	e8 00 00 00 00	 call	 __aullshr
  011cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  011d0	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  011d7	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  011de	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  011e4	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  011ea	b1 08		 mov	 cl, 8
  011ec	e8 00 00 00 00	 call	 __aullshr
  011f1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  011f6	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  011fd	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01204	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+48]
  0120a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01210	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[edx*8]
  01217	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edx*8+4]
  0121e	33 7d e0	 xor	 edi, DWORD PTR _K$[ebp+40]
  01221	33 75 e4	 xor	 esi, DWORD PTR _K$[ebp+44]
  01224	89 7d 98	 mov	 DWORD PTR _L$[ebp+40], edi
  01227	89 75 9c	 mov	 DWORD PTR _L$[ebp+44], esi

; 818  :         L[6] =
; 819  :             C0[(int)(state[6] >> 56)       ] ^
; 820  :             C1[(int)(state[5] >> 48) & 0xff] ^
; 821  :             C2[(int)(state[4] >> 40) & 0xff] ^
; 822  :             C3[(int)(state[3] >> 32) & 0xff] ^
; 823  :             C4[(int)(state[2] >> 24) & 0xff] ^
; 824  :             C5[(int)(state[1] >> 16) & 0xff] ^
; 825  :             C6[(int)(state[0] >>  8) & 0xff] ^
; 826  :             C7[(int)(state[7]      ) & 0xff] ^
; 827  :             K[6];

  0122a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  01230	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  01236	b1 38		 mov	 cl, 56			; 00000038H
  01238	e8 00 00 00 00	 call	 __aullshr
  0123d	8b f0		 mov	 esi, eax
  0123f	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  01245	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  0124b	b1 30		 mov	 cl, 48			; 00000030H
  0124d	e8 00 00 00 00	 call	 __aullshr
  01252	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01257	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  0125e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01265	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  0126c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01273	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  01279	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  0127f	b1 28		 mov	 cl, 40			; 00000028H
  01281	e8 00 00 00 00	 call	 __aullshr
  01286	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0128b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  01292	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  01299	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  0129f	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  012a5	b1 20		 mov	 cl, 32			; 00000020H
  012a7	e8 00 00 00 00	 call	 __aullshr
  012ac	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  012b1	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  012b8	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  012bf	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  012c5	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  012cb	b1 18		 mov	 cl, 24			; 00000018H
  012cd	e8 00 00 00 00	 call	 __aullshr
  012d2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  012d7	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  012de	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  012e5	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  012eb	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  012f1	b1 10		 mov	 cl, 16			; 00000010H
  012f3	e8 00 00 00 00	 call	 __aullshr
  012f8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  012fd	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  01304	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  0130b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  01311	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+4]
  01317	b1 08		 mov	 cl, 8
  01319	e8 00 00 00 00	 call	 __aullshr
  0131e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01323	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  0132a	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01331	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  01337	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0133c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  01343	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  0134a	33 7d e8	 xor	 edi, DWORD PTR _K$[ebp+48]
  0134d	33 75 ec	 xor	 esi, DWORD PTR _K$[ebp+52]
  01350	89 7d a0	 mov	 DWORD PTR _L$[ebp+48], edi
  01353	89 75 a4	 mov	 DWORD PTR _L$[ebp+52], esi

; 828  :         L[7] =
; 829  :             C0[(int)(state[7] >> 56)       ] ^
; 830  :             C1[(int)(state[6] >> 48) & 0xff] ^
; 831  :             C2[(int)(state[5] >> 40) & 0xff] ^
; 832  :             C3[(int)(state[4] >> 32) & 0xff] ^
; 833  :             C4[(int)(state[3] >> 24) & 0xff] ^
; 834  :             C5[(int)(state[2] >> 16) & 0xff] ^
; 835  :             C6[(int)(state[1] >>  8) & 0xff] ^
; 836  :             C7[(int)(state[0]      ) & 0xff] ^
; 837  :             K[7];

  01356	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  0135c	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+60]
  01362	b1 38		 mov	 cl, 56			; 00000038H
  01364	e8 00 00 00 00	 call	 __aullshr
  01369	8b f0		 mov	 esi, eax
  0136b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  01371	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+52]
  01377	b1 30		 mov	 cl, 48			; 00000030H
  01379	e8 00 00 00 00	 call	 __aullshr
  0137e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01383	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C0[esi*8]
  0138a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01391	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C0[esi*8+4]
  01398	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  0139f	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  013a5	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+44]
  013ab	b1 28		 mov	 cl, 40			; 00000028H
  013ad	e8 00 00 00 00	 call	 __aullshr
  013b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013b7	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  013be	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  013c5	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  013cb	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+36]
  013d1	b1 20		 mov	 cl, 32			; 00000020H
  013d3	e8 00 00 00 00	 call	 __aullshr
  013d8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013dd	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  013e4	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  013eb	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  013f1	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+28]
  013f7	b1 18		 mov	 cl, 24			; 00000018H
  013f9	e8 00 00 00 00	 call	 __aullshr
  013fe	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01403	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  0140a	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  01411	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  01417	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+20]
  0141d	b1 10		 mov	 cl, 16			; 00000010H
  0141f	e8 00 00 00 00	 call	 __aullshr
  01424	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01429	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  01430	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  01437	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  0143d	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _state$[ebp+12]
  01443	b1 08		 mov	 cl, 8
  01445	e8 00 00 00 00	 call	 __aullshr
  0144a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0144f	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  01456	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  0145d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp]
  01463	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01469	33 3c cd 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ecx*8]
  01470	33 34 cd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[ecx*8+4]
  01477	33 7d f0	 xor	 edi, DWORD PTR _K$[ebp+56]
  0147a	33 75 f4	 xor	 esi, DWORD PTR _K$[ebp+60]
  0147d	89 7d a8	 mov	 DWORD PTR _L$[ebp+56], edi
  01480	89 75 ac	 mov	 DWORD PTR _L$[ebp+60], esi

; 838  :         state[0] = L[0];

  01483	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _L$[ebp]
  01489	89 95 30 ff ff
	ff		 mov	 DWORD PTR _state$[ebp], edx
  0148f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _L$[ebp+4]
  01495	89 85 34 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+4], eax

; 839  :         state[1] = L[1];

  0149b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _L$[ebp+8]
  014a1	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+8], ecx
  014a7	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _L$[ebp+12]
  014ad	89 95 3c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+12], edx

; 840  :         state[2] = L[2];

  014b3	8b 45 80	 mov	 eax, DWORD PTR _L$[ebp+16]
  014b6	89 85 40 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+16], eax
  014bc	8b 4d 84	 mov	 ecx, DWORD PTR _L$[ebp+20]
  014bf	89 8d 44 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+20], ecx

; 841  :         state[3] = L[3];

  014c5	8b 55 88	 mov	 edx, DWORD PTR _L$[ebp+24]
  014c8	89 95 48 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+24], edx
  014ce	8b 45 8c	 mov	 eax, DWORD PTR _L$[ebp+28]
  014d1	89 85 4c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+28], eax

; 842  :         state[4] = L[4];

  014d7	8b 4d 90	 mov	 ecx, DWORD PTR _L$[ebp+32]
  014da	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+32], ecx
  014e0	8b 55 94	 mov	 edx, DWORD PTR _L$[ebp+36]
  014e3	89 95 54 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+36], edx

; 843  :         state[5] = L[5];

  014e9	8b 45 98	 mov	 eax, DWORD PTR _L$[ebp+40]
  014ec	89 85 58 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+40], eax
  014f2	8b 4d 9c	 mov	 ecx, DWORD PTR _L$[ebp+44]
  014f5	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+44], ecx

; 844  :         state[6] = L[6];

  014fb	8b 55 a0	 mov	 edx, DWORD PTR _L$[ebp+48]
  014fe	89 95 60 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+48], edx
  01504	8b 45 a4	 mov	 eax, DWORD PTR _L$[ebp+52]
  01507	89 85 64 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+52], eax

; 845  :         state[7] = L[7];

  0150d	8b 4d a8	 mov	 ecx, DWORD PTR _L$[ebp+56]
  01510	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+56], ecx
  01516	8b 55 ac	 mov	 edx, DWORD PTR _L$[ebp+60]
  01519	89 95 6c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+60], edx

; 846  :     }

  0151f	e9 84 ed ff ff	 jmp	 $LN2@processBuf
$LN1@processBuf:

; 847  :     /*
; 848  :      * apply the Miyaguchi-Preneel compression function:
; 849  :      */
; 850  :     structpointer->hash[0] ^= state[0] ^ block[0];

  01524	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  0152a	33 85 f0 fe ff
	ff		 xor	 eax, DWORD PTR _block$[ebp]
  01530	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+4]
  01536	33 8d f4 fe ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+4]
  0153c	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0153f	33 42 68	 xor	 eax, DWORD PTR [edx+104]
  01542	33 4a 6c	 xor	 ecx, DWORD PTR [edx+108]
  01545	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01548	89 42 68	 mov	 DWORD PTR [edx+104], eax
  0154b	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 851  :     structpointer->hash[1] ^= state[1] ^ block[1];

  0154e	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  01554	33 85 f8 fe ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+8]
  0155a	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+12]
  01560	33 8d fc fe ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+12]
  01566	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01569	33 42 70	 xor	 eax, DWORD PTR [edx+112]
  0156c	33 4a 74	 xor	 ecx, DWORD PTR [edx+116]
  0156f	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01572	89 42 70	 mov	 DWORD PTR [edx+112], eax
  01575	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 852  :     structpointer->hash[2] ^= state[2] ^ block[2];

  01578	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  0157e	33 85 00 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+16]
  01584	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+20]
  0158a	33 8d 04 ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+20]
  01590	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01593	33 42 78	 xor	 eax, DWORD PTR [edx+120]
  01596	33 4a 7c	 xor	 ecx, DWORD PTR [edx+124]
  01599	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0159c	89 42 78	 mov	 DWORD PTR [edx+120], eax
  0159f	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 853  :     structpointer->hash[3] ^= state[3] ^ block[3];

  015a2	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  015a8	33 85 08 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+24]
  015ae	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+28]
  015b4	33 8d 0c ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+28]
  015ba	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  015bd	33 82 80 00 00
	00		 xor	 eax, DWORD PTR [edx+128]
  015c3	33 8a 84 00 00
	00		 xor	 ecx, DWORD PTR [edx+132]
  015c9	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  015cc	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax
  015d2	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 854  :     structpointer->hash[4] ^= state[4] ^ block[4];

  015d8	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  015de	33 85 10 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+32]
  015e4	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+36]
  015ea	33 8d 14 ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+36]
  015f0	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  015f3	33 82 88 00 00
	00		 xor	 eax, DWORD PTR [edx+136]
  015f9	33 8a 8c 00 00
	00		 xor	 ecx, DWORD PTR [edx+140]
  015ff	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01602	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax
  01608	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 855  :     structpointer->hash[5] ^= state[5] ^ block[5];

  0160e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  01614	33 85 18 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+40]
  0161a	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+44]
  01620	33 8d 1c ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+44]
  01626	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01629	33 82 90 00 00
	00		 xor	 eax, DWORD PTR [edx+144]
  0162f	33 8a 94 00 00
	00		 xor	 ecx, DWORD PTR [edx+148]
  01635	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01638	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax
  0163e	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 856  :     structpointer->hash[6] ^= state[6] ^ block[6];

  01644	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  0164a	33 85 20 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+48]
  01650	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+52]
  01656	33 8d 24 ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+52]
  0165c	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0165f	33 82 98 00 00
	00		 xor	 eax, DWORD PTR [edx+152]
  01665	33 8a 9c 00 00
	00		 xor	 ecx, DWORD PTR [edx+156]
  0166b	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0166e	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax
  01674	89 8a 9c 00 00
	00		 mov	 DWORD PTR [edx+156], ecx

; 857  :     structpointer->hash[7] ^= state[7] ^ block[7];

  0167a	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  01680	33 85 28 ff ff
	ff		 xor	 eax, DWORD PTR _block$[ebp+56]
  01686	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+60]
  0168c	33 8d 2c ff ff
	ff		 xor	 ecx, DWORD PTR _block$[ebp+60]
  01692	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  01695	33 82 a0 00 00
	00		 xor	 eax, DWORD PTR [edx+160]
  0169b	33 8a a4 00 00
	00		 xor	 ecx, DWORD PTR [edx+164]
  016a1	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  016a4	89 82 a0 00 00
	00		 mov	 DWORD PTR [edx+160], eax
  016aa	89 8a a4 00 00
	00		 mov	 DWORD PTR [edx+164], ecx

; 858  : }

  016b0	5f		 pop	 edi
  016b1	5e		 pop	 esi
  016b2	8b e5		 mov	 esp, ebp
  016b4	5d		 pop	 ebp
  016b5	c2 04 00	 ret	 4
_processBuffer@4 ENDP
_TEXT	ENDS
PUBLIC	_WHIRLPOOL_finalize@8
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT _WHIRLPOOL_finalize@8
_TEXT	SEGMENT
_buffer$ = -24						; size = 4
_bufferBits$ = -20					; size = 4
_bufferPos$ = -16					; size = 4
_bitLength$ = -12					; size = 4
_digest$ = -8						; size = 4
_i$ = -4						; size = 4
_structpointer$ = 8					; size = 4
_result$ = 12						; size = 4
_WHIRLPOOL_finalize@8 PROC				; COMDAT

; 1001 :                     unsigned char * const result) {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 18	 sub	 esp, 24			; 00000018H
  00008	56		 push	 esi
  00009	57		 push	 edi

; 1002 :     int i;
; 1003 :     u8 *buffer      = structpointer->buffer;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  0000d	83 c0 20	 add	 eax, 32			; 00000020H
  00010	89 45 e8	 mov	 DWORD PTR _buffer$[ebp], eax

; 1004 :     u8 *bitLength   = structpointer->bitLength;

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00016	89 4d f4	 mov	 DWORD PTR _bitLength$[ebp], ecx

; 1005 :     int bufferBits  = structpointer->bufferBits;

  00019	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0001c	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0001f	89 45 ec	 mov	 DWORD PTR _bufferBits$[ebp], eax

; 1006 :     int bufferPos   = structpointer->bufferPos;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00025	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00028	89 55 f0	 mov	 DWORD PTR _bufferPos$[ebp], edx

; 1007 :     u8 *digest      = result;

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  0002e	89 45 f8	 mov	 DWORD PTR _digest$[ebp], eax

; 1008 : 
; 1009 :     /*
; 1010 :      * append a '1'-bit:
; 1011 :      */
; 1012 :     buffer[bufferPos] |= 0x80U >> (bufferBits & 7);

  00031	8b 4d ec	 mov	 ecx, DWORD PTR _bufferBits$[ebp]
  00034	83 e1 07	 and	 ecx, 7
  00037	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0003c	d3 ea		 shr	 edx, cl
  0003e	8b 45 e8	 mov	 eax, DWORD PTR _buffer$[ebp]
  00041	03 45 f0	 add	 eax, DWORD PTR _bufferPos$[ebp]
  00044	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00047	0b ca		 or	 ecx, edx
  00049	8b 55 e8	 mov	 edx, DWORD PTR _buffer$[ebp]
  0004c	03 55 f0	 add	 edx, DWORD PTR _bufferPos$[ebp]
  0004f	88 0a		 mov	 BYTE PTR [edx], cl

; 1013 :     bufferPos++; /* all remaining bits on the current u8 are set to zero. */

  00051	8b 45 f0	 mov	 eax, DWORD PTR _bufferPos$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 f0	 mov	 DWORD PTR _bufferPos$[ebp], eax

; 1014 :     /*
; 1015 :      * pad with zero bits to complete (N*WBLOCKBITS - LENGTHBITS) bits:
; 1016 :      */
; 1017 :     if (bufferPos > WBLOCKBYTES - LENGTHBYTES) {

  0005a	83 7d f0 20	 cmp	 DWORD PTR _bufferPos$[ebp], 32 ; 00000020H
  0005e	7e 30		 jle	 SHORT $LN6@WHIRLPOOL_@3

; 1018 :         if (bufferPos < WBLOCKBYTES) {

  00060	83 7d f0 40	 cmp	 DWORD PTR _bufferPos$[ebp], 64 ; 00000040H
  00064	7d 1a		 jge	 SHORT $LN5@WHIRLPOOL_@3

; 1019 :             memset(&buffer[bufferPos], 0, WBLOCKBYTES - bufferPos);

  00066	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0006b	2b 4d f0	 sub	 ecx, DWORD PTR _bufferPos$[ebp]
  0006e	51		 push	 ecx
  0006f	6a 00		 push	 0
  00071	8b 55 e8	 mov	 edx, DWORD PTR _buffer$[ebp]
  00074	03 55 f0	 add	 edx, DWORD PTR _bufferPos$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@WHIRLPOOL_@3:

; 1020 :         }
; 1021 :         /*
; 1022 :          * process data block:
; 1023 :          */
; 1024 :         processBuffer(structpointer);

  00080	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _processBuffer@4

; 1025 :         /*
; 1026 :          * reset buffer:
; 1027 :          */
; 1028 :         bufferPos = 0;

  00089	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bufferPos$[ebp], 0
$LN6@WHIRLPOOL_@3:

; 1029 :     }
; 1030 :     if (bufferPos < WBLOCKBYTES - LENGTHBYTES) {

  00090	83 7d f0 20	 cmp	 DWORD PTR _bufferPos$[ebp], 32 ; 00000020H
  00094	7d 1a		 jge	 SHORT $LN4@WHIRLPOOL_@3

; 1031 :         memset(&buffer[bufferPos], 0, (WBLOCKBYTES - LENGTHBYTES) - bufferPos);

  00096	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009b	2b 4d f0	 sub	 ecx, DWORD PTR _bufferPos$[ebp]
  0009e	51		 push	 ecx
  0009f	6a 00		 push	 0
  000a1	8b 55 e8	 mov	 edx, DWORD PTR _buffer$[ebp]
  000a4	03 55 f0	 add	 edx, DWORD PTR _bufferPos$[ebp]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _memset
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@WHIRLPOOL_@3:

; 1032 :     }
; 1033 :     bufferPos = WBLOCKBYTES - LENGTHBYTES;

  000b0	c7 45 f0 20 00
	00 00		 mov	 DWORD PTR _bufferPos$[ebp], 32 ; 00000020H

; 1034 :     /*
; 1035 :      * append bit length of hashed data:
; 1036 :      */
; 1037 :     memcpy(&buffer[WBLOCKBYTES - LENGTHBYTES], bitLength, LENGTHBYTES);

  000b7	8b 7d e8	 mov	 edi, DWORD PTR _buffer$[ebp]
  000ba	83 c7 20	 add	 edi, 32			; 00000020H
  000bd	b9 08 00 00 00	 mov	 ecx, 8
  000c2	8b 75 f4	 mov	 esi, DWORD PTR _bitLength$[ebp]
  000c5	f3 a5		 rep movsd

; 1038 :     /*
; 1039 :      * process data block:
; 1040 :      */
; 1041 :     processBuffer(structpointer);

  000c7	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _processBuffer@4

; 1042 :     /*
; 1043 :      * return the completed message digest:
; 1044 :      */
; 1045 :     for (i = 0; i < DIGESTBYTES/8; i++) {

  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d7	eb 09		 jmp	 SHORT $LN3@WHIRLPOOL_@3
$LN2@WHIRLPOOL_@3:
  000d9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000dc	83 c1 01	 add	 ecx, 1
  000df	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN3@WHIRLPOOL_@3:
  000e2	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  000e6	0f 8d da 00 00
	00		 jge	 $LN1@WHIRLPOOL_@3

; 1046 :         digest[0] = (u8)(structpointer->hash[i] >> 56);

  000ec	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  000f2	8b 44 d1 68	 mov	 eax, DWORD PTR [ecx+edx*8+104]
  000f6	8b 54 d1 6c	 mov	 edx, DWORD PTR [ecx+edx*8+108]
  000fa	b1 38		 mov	 cl, 56			; 00000038H
  000fc	e8 00 00 00 00	 call	 __aullshr
  00101	8b 55 f8	 mov	 edx, DWORD PTR _digest$[ebp]
  00104	88 02		 mov	 BYTE PTR [edx], al

; 1047 :         digest[1] = (u8)(structpointer->hash[i] >> 48);

  00106	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00109	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  0010c	8b 44 ca 68	 mov	 eax, DWORD PTR [edx+ecx*8+104]
  00110	8b 54 ca 6c	 mov	 edx, DWORD PTR [edx+ecx*8+108]
  00114	b1 30		 mov	 cl, 48			; 00000030H
  00116	e8 00 00 00 00	 call	 __aullshr
  0011b	8b 4d f8	 mov	 ecx, DWORD PTR _digest$[ebp]
  0011e	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1048 :         digest[2] = (u8)(structpointer->hash[i] >> 40);

  00121	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00124	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00127	8b 44 d1 68	 mov	 eax, DWORD PTR [ecx+edx*8+104]
  0012b	8b 54 d1 6c	 mov	 edx, DWORD PTR [ecx+edx*8+108]
  0012f	b1 28		 mov	 cl, 40			; 00000028H
  00131	e8 00 00 00 00	 call	 __aullshr
  00136	8b 55 f8	 mov	 edx, DWORD PTR _digest$[ebp]
  00139	88 42 02	 mov	 BYTE PTR [edx+2], al

; 1049 :         digest[3] = (u8)(structpointer->hash[i] >> 32);

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0013f	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00142	8b 44 ca 68	 mov	 eax, DWORD PTR [edx+ecx*8+104]
  00146	8b 54 ca 6c	 mov	 edx, DWORD PTR [edx+ecx*8+108]
  0014a	b1 20		 mov	 cl, 32			; 00000020H
  0014c	e8 00 00 00 00	 call	 __aullshr
  00151	8b 4d f8	 mov	 ecx, DWORD PTR _digest$[ebp]
  00154	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 1050 :         digest[4] = (u8)(structpointer->hash[i] >> 24);

  00157	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  0015d	8b 44 d1 68	 mov	 eax, DWORD PTR [ecx+edx*8+104]
  00161	8b 54 d1 6c	 mov	 edx, DWORD PTR [ecx+edx*8+108]
  00165	b1 18		 mov	 cl, 24			; 00000018H
  00167	e8 00 00 00 00	 call	 __aullshr
  0016c	8b 55 f8	 mov	 edx, DWORD PTR _digest$[ebp]
  0016f	88 42 04	 mov	 BYTE PTR [edx+4], al

; 1051 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  00172	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00175	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00178	8b 44 ca 68	 mov	 eax, DWORD PTR [edx+ecx*8+104]
  0017c	8b 54 ca 6c	 mov	 edx, DWORD PTR [edx+ecx*8+108]
  00180	b1 10		 mov	 cl, 16			; 00000010H
  00182	e8 00 00 00 00	 call	 __aullshr
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _digest$[ebp]
  0018a	88 41 05	 mov	 BYTE PTR [ecx+5], al

; 1052 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  0018d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  00193	8b 44 d1 68	 mov	 eax, DWORD PTR [ecx+edx*8+104]
  00197	8b 54 d1 6c	 mov	 edx, DWORD PTR [ecx+edx*8+108]
  0019b	b1 08		 mov	 cl, 8
  0019d	e8 00 00 00 00	 call	 __aullshr
  001a2	8b 55 f8	 mov	 edx, DWORD PTR _digest$[ebp]
  001a5	88 42 06	 mov	 BYTE PTR [edx+6], al

; 1053 :         digest[7] = (u8)(structpointer->hash[i]      );

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  001ae	8a 54 c1 68	 mov	 dl, BYTE PTR [ecx+eax*8+104]
  001b2	8b 45 f8	 mov	 eax, DWORD PTR _digest$[ebp]
  001b5	88 50 07	 mov	 BYTE PTR [eax+7], dl

; 1054 :         digest += 8;

  001b8	8b 4d f8	 mov	 ecx, DWORD PTR _digest$[ebp]
  001bb	83 c1 08	 add	 ecx, 8
  001be	89 4d f8	 mov	 DWORD PTR _digest$[ebp], ecx

; 1055 :     }

  001c1	e9 13 ff ff ff	 jmp	 $LN2@WHIRLPOOL_@3
$LN1@WHIRLPOOL_@3:

; 1056 :     structpointer->bufferBits   = bufferBits;

  001c6	8b 55 08	 mov	 edx, DWORD PTR _structpointer$[ebp]
  001c9	8b 45 ec	 mov	 eax, DWORD PTR _bufferBits$[ebp]
  001cc	89 42 60	 mov	 DWORD PTR [edx+96], eax

; 1057 :     structpointer->bufferPos    = bufferPos;

  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  001d2	8b 55 f0	 mov	 edx, DWORD PTR _bufferPos$[ebp]
  001d5	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1058 : }

  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 08 00	 ret	 8
_WHIRLPOOL_finalize@8 ENDP
_TEXT	ENDS
END
