; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed\src\crypto\twofish.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_qt_gen	DD	01H DUP (?)
_mt_gen	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_tab_5b	DB	00H
	DB	05aH
	DB	0b4H
	DB	0eeH
_tab_ef	DB	00H
	DB	0eeH
	DB	0b4H
	DB	05aH
_ror4	DB	00H
	DB	08H
	DB	01H
	DB	09H
	DB	02H
	DB	0aH
	DB	03H
	DB	0bH
	DB	04H
	DB	0cH
	DB	05H
	DB	0dH
	DB	06H
	DB	0eH
	DB	07H
	DB	0fH
_ashx	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	04H
	DB	0dH
	DB	06H
	DB	0fH
	DB	08H
	DB	01H
	DB	0aH
	DB	03H
	DB	0cH
	DB	05H
	DB	0eH
	DB	07H
_qt0	DB	08H
	DB	01H
	DB	07H
	DB	0dH
	DB	06H
	DB	0fH
	DB	03H
	DB	02H
	DB	00H
	DB	0bH
	DB	05H
	DB	09H
	DB	0eH
	DB	0cH
	DB	0aH
	DB	04H
	DB	02H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	07H
	DB	06H
	DB	0eH
	DB	03H
	DB	01H
	DB	09H
	DB	04H
	DB	00H
	DB	0aH
	DB	0cH
	DB	05H
_qt1	DB	0eH
	DB	0cH
	DB	0bH
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	0fH
	DB	04H
	DB	0aH
	DB	06H
	DB	07H
	DB	00H
	DB	09H
	DB	0dH
	DB	01H
	DB	0eH
	DB	02H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	0dH
	DB	0aH
	DB	05H
	DB	0fH
	DB	09H
	DB	00H
	DB	08H
_qt2	DB	0bH
	DB	0aH
	DB	05H
	DB	0eH
	DB	06H
	DB	0dH
	DB	09H
	DB	00H
	DB	0cH
	DB	08H
	DB	0fH
	DB	03H
	DB	02H
	DB	04H
	DB	07H
	DB	01H
	DB	04H
	DB	0cH
	DB	07H
	DB	05H
	DB	01H
	DB	06H
	DB	09H
	DB	0aH
	DB	00H
	DB	0eH
	DB	0dH
	DB	08H
	DB	02H
	DB	0bH
	DB	03H
	DB	0fH
_qt3	DB	0dH
	DB	07H
	DB	0fH
	DB	04H
	DB	01H
	DB	02H
	DB	06H
	DB	0eH
	DB	09H
	DB	0bH
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	05H
	DB	01H
	DB	0cH
	DB	03H
	DB	0dH
	DB	0eH
	DB	06H
	DB	04H
	DB	07H
	DB	0fH
	DB	02H
	DB	00H
	DB	08H
	DB	0aH
_DATA	ENDS
PUBLIC	_twofish_set_key@12
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed\src\crypto\twofish.c
;	COMDAT _twofish_set_key@12
_TEXT	SEGMENT
_l_key$ = -52						; size = 4
_b$ = -48						; size = 4
_me_key$ = -44						; size = 16
_i$ = -28						; size = 4
_a$ = -24						; size = 4
_s_key$ = -20						; size = 4
_mo_key$ = -16						; size = 16
_instance$ = 8						; size = 4
_in_key$ = 12						; size = 4
_key_len$ = 16						; size = 4
_twofish_set_key@12 PROC				; COMDAT

; 373  : {   u4byte  i, a, b, me_key[4], mo_key[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 34	 sub	 esp, 52			; 00000034H

; 374  : 	u4byte *l_key, *s_key;
; 375  : 
; 376  : 	l_key = instance->l_key;

  00008	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  0000b	89 45 cc	 mov	 DWORD PTR _l_key$[ebp], eax

; 377  : 	s_key = instance->s_key;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00011	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00017	89 4d ec	 mov	 DWORD PTR _s_key$[ebp], ecx

; 378  : 
; 379  : #ifdef Q_TABLES
; 380  :     if(!qt_gen)

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _qt_gen, 0
  00021	75 0f		 jne	 SHORT $LN8@twofish_se

; 381  :     {
; 382  :         gen_qtab(); qt_gen = 1;

  00023	e8 00 00 00 00	 call	 _gen_qtab@0
  00028	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _qt_gen, 1
$LN8@twofish_se:

; 383  :     }
; 384  : #endif
; 385  : 
; 386  : #ifdef M_TABLE
; 387  :     if(!mt_gen)

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _mt_gen, 0
  00039	75 0f		 jne	 SHORT $LN7@twofish_se

; 388  :     {
; 389  :         gen_mtab(); mt_gen = 1;

  0003b	e8 00 00 00 00	 call	 _gen_mtab@0
  00040	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _mt_gen, 1
$LN7@twofish_se:

; 390  :     }
; 391  : #endif
; 392  : 
; 393  :     instance->k_len = key_len / 64;   /* 2, 3 or 4 */

  0004a	8b 55 10	 mov	 edx, DWORD PTR _key_len$[ebp]
  0004d	c1 ea 06	 shr	 edx, 6
  00050	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  00053	89 90 b0 10 00
	00		 mov	 DWORD PTR [eax+4272], edx

; 394  : 
; 395  :     for(i = 0; i < instance->k_len; ++i)

  00059	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN6@twofish_se
$LN5@twofish_se:
  00062	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  00065	83 c1 01	 add	 ecx, 1
  00068	89 4d e4	 mov	 DWORD PTR _i$[ebp], ecx
$LN6@twofish_se:
  0006b	8b 55 08	 mov	 edx, DWORD PTR _instance$[ebp]
  0006e	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00071	3b 82 b0 10 00
	00		 cmp	 eax, DWORD PTR [edx+4272]
  00077	73 55		 jae	 SHORT $LN4@twofish_se

; 396  :     {
; 397  :         a = LE32(in_key[i + i]);     me_key[i] = a;

  00079	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0007c	03 4d e4	 add	 ecx, DWORD PTR _i$[ebp]
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _in_key$[ebp]
  00082	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00085	89 45 e8	 mov	 DWORD PTR _a$[ebp], eax
  00088	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0008b	8b 55 e8	 mov	 edx, DWORD PTR _a$[ebp]
  0008e	89 54 8d d4	 mov	 DWORD PTR _me_key$[ebp+ecx*4], edx

; 398  :         b = LE32(in_key[i + i + 1]); mo_key[i] = b;

  00092	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00095	03 45 e4	 add	 eax, DWORD PTR _i$[ebp]
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _in_key$[ebp]
  0009b	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  0009f	89 55 d0	 mov	 DWORD PTR _b$[ebp], edx
  000a2	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  000a5	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  000a8	89 4c 85 f0	 mov	 DWORD PTR _mo_key$[ebp+eax*4], ecx

; 399  :         s_key[instance->k_len - i - 1] = mds_rem(a, b);

  000ac	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  000af	52		 push	 edx
  000b0	8b 45 e8	 mov	 eax, DWORD PTR _a$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _mds_rem@8
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  000bc	8b 91 b0 10 00
	00		 mov	 edx, DWORD PTR [ecx+4272]
  000c2	2b 55 e4	 sub	 edx, DWORD PTR _i$[ebp]
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _s_key$[ebp]
  000c8	89 44 91 fc	 mov	 DWORD PTR [ecx+edx*4-4], eax

; 400  :     }

  000cc	eb 94		 jmp	 SHORT $LN5@twofish_se
$LN4@twofish_se:

; 401  : 
; 402  :     for(i = 0; i < 40; i += 2)

  000ce	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d5	eb 09		 jmp	 SHORT $LN3@twofish_se
$LN2@twofish_se:
  000d7	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  000da	83 c2 02	 add	 edx, 2
  000dd	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx
$LN3@twofish_se:
  000e0	83 7d e4 28	 cmp	 DWORD PTR _i$[ebp], 40	; 00000028H
  000e4	73 6a		 jae	 SHORT $LN1@twofish_se

; 403  :     {
; 404  :         a = 0x01010101 * i; b = a + 0x01010101;

  000e6	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  000e9	69 c0 01 01 01
	01		 imul	 eax, 16843009		; 01010101H
  000ef	89 45 e8	 mov	 DWORD PTR _a$[ebp], eax
  000f2	8b 4d e8	 mov	 ecx, DWORD PTR _a$[ebp]
  000f5	81 c1 01 01 01
	01		 add	 ecx, 16843009		; 01010101H
  000fb	89 4d d0	 mov	 DWORD PTR _b$[ebp], ecx

; 405  :         a = h_fun(instance, a, me_key);

  000fe	8d 55 d4	 lea	 edx, DWORD PTR _me_key$[ebp]
  00101	52		 push	 edx
  00102	8b 45 e8	 mov	 eax, DWORD PTR _a$[ebp]
  00105	50		 push	 eax
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _h_fun@12
  0010f	89 45 e8	 mov	 DWORD PTR _a$[ebp], eax

; 406  :         b = rotl(h_fun(instance, b, mo_key), 8);

  00112	8d 55 f0	 lea	 edx, DWORD PTR _mo_key$[ebp]
  00115	52		 push	 edx
  00116	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00119	50		 push	 eax
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _h_fun@12
  00123	c1 c0 08	 rol	 eax, 8
  00126	89 45 d0	 mov	 DWORD PTR _b$[ebp], eax

; 407  :         l_key[i] = a + b;

  00129	8b 55 e8	 mov	 edx, DWORD PTR _a$[ebp]
  0012c	03 55 d0	 add	 edx, DWORD PTR _b$[ebp]
  0012f	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00132	8b 4d cc	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00135	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 408  :         l_key[i + 1] = rotl(a + 2 * b, 9);

  00138	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  0013b	8b 45 e8	 mov	 eax, DWORD PTR _a$[ebp]
  0013e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00141	c1 c1 09	 rol	 ecx, 9
  00144	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  00147	8b 45 cc	 mov	 eax, DWORD PTR _l_key$[ebp]
  0014a	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 409  :     }

  0014e	eb 87		 jmp	 SHORT $LN2@twofish_se
$LN1@twofish_se:

; 410  : 
; 411  : #ifdef MK_TABLE
; 412  :     gen_mk_tab(instance, s_key);

  00150	8b 4d ec	 mov	 ecx, DWORD PTR _s_key$[ebp]
  00153	51		 push	 ecx
  00154	8b 55 08	 mov	 edx, DWORD PTR _instance$[ebp]
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 _gen_mk_tab@8

; 413  : #endif
; 414  : 
; 415  :     return l_key;

  0015d	8b 45 cc	 mov	 eax, DWORD PTR _l_key$[ebp]

; 416  : };

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 0c 00	 ret	 12			; 0000000cH
_twofish_set_key@12 ENDP
_TEXT	ENDS
_BSS	SEGMENT
_q_tab	DB	0200H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
;	COMDAT _gen_qtab@0
_TEXT	SEGMENT
_i$ = -4						; size = 4
_gen_qtab@0 PROC					; COMDAT

; 104  : {   u4byte  i;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 105  : 
; 106  :     for(i = 0; i < 256; ++i)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN3@gen_qtab
$LN2@gen_qtab:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@gen_qtab:
  00018	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0001f	73 2c		 jae	 SHORT $LN4@gen_qtab

; 107  :     {       
; 108  :         q(0,i) = qp(0, (u1byte)i);

  00021	0f b6 4d fc	 movzx	 ecx, BYTE PTR _i$[ebp]
  00025	51		 push	 ecx
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 _qp@8
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00030	88 82 00 00 00
	00		 mov	 BYTE PTR _q_tab[edx], al

; 109  :         q(1,i) = qp(1, (u1byte)i);

  00036	0f b6 45 fc	 movzx	 eax, BYTE PTR _i$[ebp]
  0003a	50		 push	 eax
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 _qp@8
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00045	88 81 00 01 00
	00		 mov	 BYTE PTR _q_tab[ecx+256], al

; 110  :     }

  0004b	eb c2		 jmp	 SHORT $LN2@gen_qtab
$LN4@gen_qtab:

; 111  : };

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_gen_qtab@0 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _qp@8
_TEXT	SEGMENT
_a0$ = -10						; size = 1
_b1$ = -9						; size = 1
_a2$ = -8						; size = 1
_a3$ = -7						; size = 1
_a4$ = -6						; size = 1
_b3$ = -5						; size = 1
_b4$ = -4						; size = 1
_b2$ = -3						; size = 1
_a1$ = -2						; size = 1
_b0$ = -1						; size = 1
_n$ = 8							; size = 4
_x$ = 12						; size = 1
_qp@8	PROC						; COMDAT

; 86   : {   u1byte  a0, a1, a2, a3, a4, b0, b1, b2, b3, b4;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 87   : 
; 88   :     a0 = x >> 4; b0 = x & 15;

  00008	0f b6 45 0c	 movzx	 eax, BYTE PTR _x$[ebp]
  0000c	c1 f8 04	 sar	 eax, 4
  0000f	88 45 f6	 mov	 BYTE PTR _a0$[ebp], al
  00012	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _x$[ebp]
  00016	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00019	88 4d ff	 mov	 BYTE PTR _b0$[ebp], cl

; 89   :     a1 = a0 ^ b0; b1 = ror4[b0] ^ ashx[a0];

  0001c	0f b6 55 f6	 movzx	 edx, BYTE PTR _a0$[ebp]
  00020	0f b6 45 ff	 movzx	 eax, BYTE PTR _b0$[ebp]
  00024	33 d0		 xor	 edx, eax
  00026	88 55 fe	 mov	 BYTE PTR _a1$[ebp], dl
  00029	0f b6 4d ff	 movzx	 ecx, BYTE PTR _b0$[ebp]
  0002d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _ror4[ecx]
  00034	0f b6 45 f6	 movzx	 eax, BYTE PTR _a0$[ebp]
  00038	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _ashx[eax]
  0003f	33 d1		 xor	 edx, ecx
  00041	88 55 f7	 mov	 BYTE PTR _b1$[ebp], dl

; 90   :     a2 = qt0[n][a1]; b2 = qt1[n][b1];

  00044	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00047	c1 e2 04	 shl	 edx, 4
  0004a	0f b6 45 fe	 movzx	 eax, BYTE PTR _a1$[ebp]
  0004e	8a 8c 02 00 00
	00 00		 mov	 cl, BYTE PTR _qt0[edx+eax]
  00055	88 4d f8	 mov	 BYTE PTR _a2$[ebp], cl
  00058	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  0005b	c1 e2 04	 shl	 edx, 4
  0005e	0f b6 45 f7	 movzx	 eax, BYTE PTR _b1$[ebp]
  00062	8a 8c 02 00 00
	00 00		 mov	 cl, BYTE PTR _qt1[edx+eax]
  00069	88 4d fd	 mov	 BYTE PTR _b2$[ebp], cl

; 91   :     a3 = a2 ^ b2; b3 = ror4[b2] ^ ashx[a2];

  0006c	0f b6 55 f8	 movzx	 edx, BYTE PTR _a2$[ebp]
  00070	0f b6 45 fd	 movzx	 eax, BYTE PTR _b2$[ebp]
  00074	33 d0		 xor	 edx, eax
  00076	88 55 f9	 mov	 BYTE PTR _a3$[ebp], dl
  00079	0f b6 4d fd	 movzx	 ecx, BYTE PTR _b2$[ebp]
  0007d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _ror4[ecx]
  00084	0f b6 45 f8	 movzx	 eax, BYTE PTR _a2$[ebp]
  00088	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _ashx[eax]
  0008f	33 d1		 xor	 edx, ecx
  00091	88 55 fb	 mov	 BYTE PTR _b3$[ebp], dl

; 92   :     a4 = qt2[n][a3]; b4 = qt3[n][b3];

  00094	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00097	c1 e2 04	 shl	 edx, 4
  0009a	0f b6 45 f9	 movzx	 eax, BYTE PTR _a3$[ebp]
  0009e	8a 8c 02 00 00
	00 00		 mov	 cl, BYTE PTR _qt2[edx+eax]
  000a5	88 4d fa	 mov	 BYTE PTR _a4$[ebp], cl
  000a8	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  000ab	c1 e2 04	 shl	 edx, 4
  000ae	0f b6 45 fb	 movzx	 eax, BYTE PTR _b3$[ebp]
  000b2	8a 8c 02 00 00
	00 00		 mov	 cl, BYTE PTR _qt3[edx+eax]
  000b9	88 4d fc	 mov	 BYTE PTR _b4$[ebp], cl

; 93   :     return (b4 << 4) | a4;

  000bc	0f b6 45 fc	 movzx	 eax, BYTE PTR _b4$[ebp]
  000c0	c1 e0 04	 shl	 eax, 4
  000c3	0f b6 55 fa	 movzx	 edx, BYTE PTR _a4$[ebp]
  000c7	0b c2		 or	 eax, edx

; 94   : };

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
_qp@8	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_m_tab	DD	0400H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
;	COMDAT _gen_mtab@0
_TEXT	SEGMENT
_f01$ = -16						; size = 4
_f5b$ = -12						; size = 4
_i$ = -8						; size = 4
_fef$ = -4						; size = 4
_gen_mtab@0 PROC					; COMDAT

; 125  : {   u4byte  i, f01, f5b, fef;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 126  :     
; 127  :     for(i = 0; i < 256; ++i)

  00008	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000f	eb 09		 jmp	 SHORT $LN3@gen_mtab
$LN2@gen_mtab:
  00011	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00014	83 c0 01	 add	 eax, 1
  00017	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@gen_mtab:
  0001a	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00021	0f 83 25 01 00
	00		 jae	 $LN4@gen_mtab

; 128  :     {
; 129  :         f01 = q(1,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  00027	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0002a	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  00031	89 55 f0	 mov	 DWORD PTR _f01$[ebp], edx
  00034	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  00037	c1 e8 02	 shr	 eax, 2
  0003a	33 45 f0	 xor	 eax, DWORD PTR _f01$[ebp]
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _f01$[ebp]
  00040	83 e1 03	 and	 ecx, 3
  00043	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _tab_5b[ecx]
  0004a	33 c2		 xor	 eax, edx
  0004c	89 45 f4	 mov	 DWORD PTR _f5b$[ebp], eax
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  00052	d1 e8		 shr	 eax, 1
  00054	33 45 f0	 xor	 eax, DWORD PTR _f01$[ebp]
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _f01$[ebp]
  0005a	c1 e9 02	 shr	 ecx, 2
  0005d	33 c1		 xor	 eax, ecx
  0005f	8b 55 f0	 mov	 edx, DWORD PTR _f01$[ebp]
  00062	83 e2 03	 and	 edx, 3
  00065	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _tab_ef[edx]
  0006c	33 c1		 xor	 eax, ecx
  0006e	89 45 fc	 mov	 DWORD PTR _fef$[ebp], eax

; 130  :         m_tab[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);

  00071	8b 55 f4	 mov	 edx, DWORD PTR _f5b$[ebp]
  00074	c1 e2 08	 shl	 edx, 8
  00077	03 55 f0	 add	 edx, DWORD PTR _f01$[ebp]
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _fef$[ebp]
  0007d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00080	03 d0		 add	 edx, eax
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _fef$[ebp]
  00085	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00088	03 d1		 add	 edx, ecx
  0008a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0008d	89 14 85 00 00
	00 00		 mov	 DWORD PTR _m_tab[eax*4], edx

; 131  :         m_tab[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);

  00094	8b 4d fc	 mov	 ecx, DWORD PTR _fef$[ebp]
  00097	c1 e1 08	 shl	 ecx, 8
  0009a	03 4d f4	 add	 ecx, DWORD PTR _f5b$[ebp]
  0009d	8b 55 f0	 mov	 edx, DWORD PTR _f01$[ebp]
  000a0	c1 e2 10	 shl	 edx, 16			; 00000010H
  000a3	03 ca		 add	 ecx, edx
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _fef$[ebp]
  000a8	c1 e0 18	 shl	 eax, 24			; 00000018H
  000ab	03 c8		 add	 ecx, eax
  000ad	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000b0	89 0c 95 00 08
	00 00		 mov	 DWORD PTR _m_tab[edx*4+2048], ecx

; 132  : 
; 133  :         f01 = q(0,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax]
  000c1	89 4d f0	 mov	 DWORD PTR _f01$[ebp], ecx
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _f01$[ebp]
  000c7	c1 ea 02	 shr	 edx, 2
  000ca	33 55 f0	 xor	 edx, DWORD PTR _f01$[ebp]
  000cd	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  000d0	83 e0 03	 and	 eax, 3
  000d3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _tab_5b[eax]
  000da	33 d1		 xor	 edx, ecx
  000dc	89 55 f4	 mov	 DWORD PTR _f5b$[ebp], edx
  000df	8b 55 f0	 mov	 edx, DWORD PTR _f01$[ebp]
  000e2	d1 ea		 shr	 edx, 1
  000e4	33 55 f0	 xor	 edx, DWORD PTR _f01$[ebp]
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  000ea	c1 e8 02	 shr	 eax, 2
  000ed	33 d0		 xor	 edx, eax
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _f01$[ebp]
  000f2	83 e1 03	 and	 ecx, 3
  000f5	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR _tab_ef[ecx]
  000fc	33 d0		 xor	 edx, eax
  000fe	89 55 fc	 mov	 DWORD PTR _fef$[ebp], edx

; 134  :         m_tab[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);

  00101	8b 4d fc	 mov	 ecx, DWORD PTR _fef$[ebp]
  00104	c1 e1 08	 shl	 ecx, 8
  00107	03 4d fc	 add	 ecx, DWORD PTR _fef$[ebp]
  0010a	8b 55 f4	 mov	 edx, DWORD PTR _f5b$[ebp]
  0010d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00110	03 ca		 add	 ecx, edx
  00112	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  00115	c1 e0 18	 shl	 eax, 24			; 00000018H
  00118	03 c8		 add	 ecx, eax
  0011a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0011d	89 0c 95 00 04
	00 00		 mov	 DWORD PTR _m_tab[edx*4+1024], ecx

; 135  :         m_tab[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);

  00124	8b 45 f0	 mov	 eax, DWORD PTR _f01$[ebp]
  00127	c1 e0 08	 shl	 eax, 8
  0012a	03 45 f4	 add	 eax, DWORD PTR _f5b$[ebp]
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _fef$[ebp]
  00130	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00133	03 c1		 add	 eax, ecx
  00135	8b 55 f4	 mov	 edx, DWORD PTR _f5b$[ebp]
  00138	c1 e2 18	 shl	 edx, 24			; 00000018H
  0013b	03 c2		 add	 eax, edx
  0013d	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00140	89 04 8d 00 0c
	00 00		 mov	 DWORD PTR _m_tab[ecx*4+3072], eax

; 136  :     }

  00147	e9 c5 fe ff ff	 jmp	 $LN2@gen_mtab
$LN4@gen_mtab:

; 137  : };

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
_gen_mtab@0 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _h_fun@12
_TEXT	SEGMENT
tv75 = -20						; size = 4
_b1$ = -16						; size = 4
_b3$ = -12						; size = 4
_b2$ = -8						; size = 4
_b0$ = -4						; size = 4
_instance$ = 8						; size = 4
_x$ = 12						; size = 4
_key$ = 16						; size = 4
_h_fun@12 PROC						; COMDAT

; 177  : {   u4byte  b0, b1, b2, b3;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 14	 sub	 esp, 20			; 00000014H

; 178  : 
; 179  : #ifndef M_TABLE
; 180  :     u4byte  m5b_b0, m5b_b1, m5b_b2, m5b_b3;
; 181  :     u4byte  mef_b0, mef_b1, mef_b2, mef_b3;
; 182  : #endif
; 183  : 
; 184  :     b0 = extract_byte(x, 0); b1 = extract_byte(x, 1); b2 = extract_byte(x, 2); b3 = extract_byte(x, 3);

  00008	0f b6 45 0c	 movzx	 eax, BYTE PTR _x$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _b0$[ebp], eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00012	c1 e9 08	 shr	 ecx, 8
  00015	0f b6 d1	 movzx	 edx, cl
  00018	89 55 f0	 mov	 DWORD PTR _b1$[ebp], edx
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0001e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00021	0f b6 c8	 movzx	 ecx, al
  00024	89 4d f8	 mov	 DWORD PTR _b2$[ebp], ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  0002a	c1 ea 18	 shr	 edx, 24			; 00000018H
  0002d	0f b6 c2	 movzx	 eax, dl
  00030	89 45 f4	 mov	 DWORD PTR _b3$[ebp], eax

; 185  : 
; 186  :     switch(instance->k_len)

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00036	8b 91 b0 10 00
	00		 mov	 edx, DWORD PTR [ecx+4272]
  0003c	89 55 ec	 mov	 DWORD PTR tv75[ebp], edx
  0003f	83 7d ec 02	 cmp	 DWORD PTR tv75[ebp], 2
  00043	0f 84 e7 00 00
	00		 je	 $LN1@h_fun
  00049	83 7d ec 03	 cmp	 DWORD PTR tv75[ebp], 3
  0004d	74 76		 je	 SHORT $LN2@h_fun
  0004f	83 7d ec 04	 cmp	 DWORD PTR tv75[ebp], 4
  00053	74 05		 je	 SHORT $LN3@h_fun
  00055	e9 98 01 00 00	 jmp	 $LN4@h_fun
$LN3@h_fun:

; 187  :     {
; 188  :     case 4: b0 = q(1, (u1byte) b0) ^ extract_byte(key[3],0);

  0005a	0f b6 45 fc	 movzx	 eax, BYTE PTR _b0$[ebp]
  0005e	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+256]
  00065	8b 55 10	 mov	 edx, DWORD PTR _key$[ebp]
  00068	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  0006c	33 c8		 xor	 ecx, eax
  0006e	89 4d fc	 mov	 DWORD PTR _b0$[ebp], ecx

; 189  :             b1 = q(0, (u1byte) b1) ^ extract_byte(key[3],1);

  00071	0f b6 4d f0	 movzx	 ecx, BYTE PTR _b1$[ebp]
  00075	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx]
  0007c	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  0007f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00082	c1 e9 08	 shr	 ecx, 8
  00085	0f b6 c1	 movzx	 eax, cl
  00088	33 d0		 xor	 edx, eax
  0008a	89 55 f0	 mov	 DWORD PTR _b1$[ebp], edx

; 190  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[3],2);

  0008d	0f b6 4d f8	 movzx	 ecx, BYTE PTR _b2$[ebp]
  00091	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx]
  00098	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  0009b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0009e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000a1	0f b6 c1	 movzx	 eax, cl
  000a4	33 d0		 xor	 edx, eax
  000a6	89 55 f8	 mov	 DWORD PTR _b2$[ebp], edx

; 191  :             b3 = q(1, (u1byte) b3) ^ extract_byte(key[3],3);

  000a9	0f b6 4d f4	 movzx	 ecx, BYTE PTR _b3$[ebp]
  000ad	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  000b4	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  000b7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000ba	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000bd	0f b6 c1	 movzx	 eax, cl
  000c0	33 d0		 xor	 edx, eax
  000c2	89 55 f4	 mov	 DWORD PTR _b3$[ebp], edx
$LN2@h_fun:

; 192  :     case 3: b0 = q(1, (u1byte) b0) ^ extract_byte(key[2],0);

  000c5	0f b6 4d fc	 movzx	 ecx, BYTE PTR _b0$[ebp]
  000c9	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  000d0	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  000d3	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  000d7	33 d1		 xor	 edx, ecx
  000d9	89 55 fc	 mov	 DWORD PTR _b0$[ebp], edx

; 193  :             b1 = q(1, (u1byte) b1) ^ extract_byte(key[2],1);

  000dc	0f b6 55 f0	 movzx	 edx, BYTE PTR _b1$[ebp]
  000e0	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx+256]
  000e7	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  000ea	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ed	c1 ea 08	 shr	 edx, 8
  000f0	0f b6 ca	 movzx	 ecx, dl
  000f3	33 c1		 xor	 eax, ecx
  000f5	89 45 f0	 mov	 DWORD PTR _b1$[ebp], eax

; 194  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[2],2);

  000f8	0f b6 55 f8	 movzx	 edx, BYTE PTR _b2$[ebp]
  000fc	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  00103	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00106	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00109	c1 ea 10	 shr	 edx, 16			; 00000010H
  0010c	0f b6 ca	 movzx	 ecx, dl
  0010f	33 c1		 xor	 eax, ecx
  00111	89 45 f8	 mov	 DWORD PTR _b2$[ebp], eax

; 195  :             b3 = q(0, (u1byte) b3) ^ extract_byte(key[2],3);

  00114	0f b6 55 f4	 movzx	 edx, BYTE PTR _b3$[ebp]
  00118	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  0011f	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00122	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00125	c1 ea 18	 shr	 edx, 24			; 00000018H
  00128	0f b6 ca	 movzx	 ecx, dl
  0012b	33 c1		 xor	 eax, ecx
  0012d	89 45 f4	 mov	 DWORD PTR _b3$[ebp], eax
$LN1@h_fun:

; 196  :     case 2: b0 = q(0, (u1byte) (q(0, (u1byte) b0) ^ extract_byte(key[1],0))) ^ extract_byte(key[0],0);

  00130	0f b6 55 fc	 movzx	 edx, BYTE PTR _b0$[ebp]
  00134	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  0013e	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00142	33 c2		 xor	 eax, edx
  00144	0f b6 c0	 movzx	 eax, al
  00147	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax]
  0014e	8b 55 10	 mov	 edx, DWORD PTR _key$[ebp]
  00151	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00154	33 c8		 xor	 ecx, eax
  00156	89 4d fc	 mov	 DWORD PTR _b0$[ebp], ecx

; 197  :             b1 = q(0, (u1byte) (q(1, (u1byte) b1) ^ extract_byte(key[1],1))) ^ extract_byte(key[0],1);

  00159	0f b6 4d f0	 movzx	 ecx, BYTE PTR _b1$[ebp]
  0015d	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  00164	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  00167	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016a	c1 e9 08	 shr	 ecx, 8
  0016d	0f b6 c1	 movzx	 eax, cl
  00170	33 d0		 xor	 edx, eax
  00172	0f b6 ca	 movzx	 ecx, dl
  00175	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx]
  0017c	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	c1 e9 08	 shr	 ecx, 8
  00184	0f b6 c1	 movzx	 eax, cl
  00187	33 d0		 xor	 edx, eax
  00189	89 55 f0	 mov	 DWORD PTR _b1$[ebp], edx

; 198  :             b2 = q(1, (u1byte) (q(0, (u1byte) b2) ^ extract_byte(key[1],2))) ^ extract_byte(key[0],2);

  0018c	0f b6 4d f8	 movzx	 ecx, BYTE PTR _b2$[ebp]
  00190	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx]
  00197	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  0019a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0019d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001a0	0f b6 c1	 movzx	 eax, cl
  001a3	33 d0		 xor	 edx, eax
  001a5	0f b6 ca	 movzx	 ecx, dl
  001a8	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  001af	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001b7	0f b6 c1	 movzx	 eax, cl
  001ba	33 d0		 xor	 edx, eax
  001bc	89 55 f8	 mov	 DWORD PTR _b2$[ebp], edx

; 199  :             b3 = q(1, (u1byte) (q(1, (u1byte) b3) ^ extract_byte(key[1],3))) ^ extract_byte(key[0],3);

  001bf	0f b6 4d f4	 movzx	 ecx, BYTE PTR _b3$[ebp]
  001c3	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  001ca	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  001cd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001d3	0f b6 c1	 movzx	 eax, cl
  001d6	33 d0		 xor	 edx, eax
  001d8	0f b6 ca	 movzx	 ecx, dl
  001db	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  001e2	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001ea	0f b6 c1	 movzx	 eax, cl
  001ed	33 d0		 xor	 edx, eax
  001ef	89 55 f4	 mov	 DWORD PTR _b3$[ebp], edx
$LN4@h_fun:

; 200  :     }
; 201  : #ifdef  M_TABLE
; 202  : 
; 203  :     return  mds(0, b0) ^ mds(1, b1) ^ mds(2, b2) ^ mds(3, b3);

  001f2	8b 4d fc	 mov	 ecx, DWORD PTR _b0$[ebp]
  001f5	8b 55 f0	 mov	 edx, DWORD PTR _b1$[ebp]
  001f8	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR _m_tab[ecx*4]
  001ff	33 04 95 00 04
	00 00		 xor	 eax, DWORD PTR _m_tab[edx*4+1024]
  00206	8b 4d f8	 mov	 ecx, DWORD PTR _b2$[ebp]
  00209	33 04 8d 00 08
	00 00		 xor	 eax, DWORD PTR _m_tab[ecx*4+2048]
  00210	8b 55 f4	 mov	 edx, DWORD PTR _b3$[ebp]
  00213	33 04 95 00 0c
	00 00		 xor	 eax, DWORD PTR _m_tab[edx*4+3072]

; 204  : 
; 205  : #else
; 206  : 
; 207  :     b0 = q(1, (u1byte) b0); b1 = q(0, (u1byte) b1); b2 = q(1, (u1byte) b2); b3 = q(0, (u1byte) b3);
; 208  :     m5b_b0 = ffm_5b(b0); m5b_b1 = ffm_5b(b1); m5b_b2 = ffm_5b(b2); m5b_b3 = ffm_5b(b3);
; 209  :     mef_b0 = ffm_ef(b0); mef_b1 = ffm_ef(b1); mef_b2 = ffm_ef(b2); mef_b3 = ffm_ef(b3);
; 210  :     b0 ^= mef_b1 ^ m5b_b2 ^ m5b_b3; b3 ^= m5b_b0 ^ mef_b1 ^ mef_b2;
; 211  :     b2 ^= mef_b0 ^ m5b_b1 ^ mef_b3; b1 ^= mef_b0 ^ mef_b2 ^ m5b_b3;
; 212  : 
; 213  :     return b0 | (b3 << 8) | (b2 << 16) | (b1 << 24);
; 214  : 
; 215  : #endif
; 216  : };

  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c2 0c 00	 ret	 12			; 0000000cH
_h_fun@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _gen_mk_tab@8
_TEXT	SEGMENT
tv66 = -16						; size = 4
_by$ = -9						; size = 1
_mk_tab$ = -8						; size = 4
_i$ = -4						; size = 4
_instance$ = 8						; size = 4
_key$ = 12						; size = 4
_gen_mk_tab@8 PROC					; COMDAT

; 242  : {   u4byte  i;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 243  :     u1byte  by;
; 244  : 
; 245  : 	u4byte *mk_tab = instance->mk_tab;

  00008	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  0000b	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00010	89 45 f8	 mov	 DWORD PTR _mk_tab$[ebp], eax

; 246  : 
; 247  :     switch(instance->k_len)

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00016	8b 91 b0 10 00
	00		 mov	 edx, DWORD PTR [ecx+4272]
  0001c	89 55 f0	 mov	 DWORD PTR tv66[ebp], edx
  0001f	83 7d f0 02	 cmp	 DWORD PTR tv66[ebp], 2
  00023	74 19		 je	 SHORT $LN12@gen_mk_tab
  00025	83 7d f0 03	 cmp	 DWORD PTR tv66[ebp], 3
  00029	0f 84 37 01 00
	00		 je	 $LN8@gen_mk_tab
  0002f	83 7d f0 04	 cmp	 DWORD PTR tv66[ebp], 4
  00033	0f 84 a4 02 00
	00		 je	 $LN4@gen_mk_tab
  00039	e9 60 04 00 00	 jmp	 $LN15@gen_mk_tab
$LN12@gen_mk_tab:

; 248  :     {
; 249  :     case 2: for(i = 0; i < 256; ++i)

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00045	eb 09		 jmp	 SHORT $LN11@gen_mk_tab
$LN10@gen_mk_tab:
  00047	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004a	83 c0 01	 add	 eax, 1
  0004d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN11@gen_mk_tab:
  00050	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00057	0f 83 04 01 00
	00		 jae	 $LN9@gen_mk_tab

; 250  :             {
; 251  :                 by = (u1byte)i;

  0005d	8a 4d fc	 mov	 cl, BYTE PTR _i$[ebp]
  00060	88 4d f7	 mov	 BYTE PTR _by$[ebp], cl

; 252  : #ifdef ONE_STEP
; 253  :                 mk_tab[0 + 4*i] = mds(0, q20(by)); mk_tab[1 + 4*i] = mds(1, q21(by));

  00063	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  00067	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00071	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00075	33 c2		 xor	 eax, edx
  00077	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[eax]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00081	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00084	33 c2		 xor	 eax, edx
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00089	c1 e1 02	 shl	 ecx, 2
  0008c	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0008f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _m_tab[eax*4]
  00096	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  00099	0f b6 4d f7	 movzx	 ecx, BYTE PTR _by$[ebp]
  0009d	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  000a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000aa	c1 e9 08	 shr	 ecx, 8
  000ad	0f b6 c1	 movzx	 eax, cl
  000b0	33 d0		 xor	 edx, eax
  000b2	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx]
  000b9	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  000bc	8b 02		 mov	 eax, DWORD PTR [edx]
  000be	c1 e8 08	 shr	 eax, 8
  000c1	0f b6 d0	 movzx	 edx, al
  000c4	33 ca		 xor	 ecx, edx
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c9	c1 e0 02	 shl	 eax, 2
  000cc	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  000cf	8b 0c 8d 00 04
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+1024]
  000d6	89 4c 82 04	 mov	 DWORD PTR [edx+eax*4+4], ecx

; 254  :                 mk_tab[2 + 4*i] = mds(2, q22(by)); mk_tab[3 + 4*i] = mds(3, q23(by));

  000da	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  000de	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  000e8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000eb	c1 ea 10	 shr	 edx, 16			; 00000010H
  000ee	0f b6 ca	 movzx	 ecx, dl
  000f1	33 c1		 xor	 eax, ecx
  000f3	0f b6 90 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+256]
  000fa	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00102	0f b6 c1	 movzx	 eax, cl
  00105	33 d0		 xor	 edx, eax
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010a	c1 e1 02	 shl	 ecx, 2
  0010d	8b 45 f8	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00110	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _m_tab[edx*4+2048]
  00117	89 54 88 08	 mov	 DWORD PTR [eax+ecx*4+8], edx
  0011b	0f b6 45 f7	 movzx	 eax, BYTE PTR _by$[ebp]
  0011f	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+256]
  00126	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00129	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0012c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0012f	0f b6 d0	 movzx	 edx, al
  00132	33 ca		 xor	 ecx, edx
  00134	0f b6 81 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[ecx+256]
  0013b	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	c1 ea 18	 shr	 edx, 24			; 00000018H
  00143	0f b6 ca	 movzx	 ecx, dl
  00146	33 c1		 xor	 eax, ecx
  00148	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0014b	c1 e2 02	 shl	 edx, 2
  0014e	8b 4d f8	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00151	8b 04 85 00 0c
	00 00		 mov	 eax, DWORD PTR _m_tab[eax*4+3072]
  00158	89 44 91 0c	 mov	 DWORD PTR [ecx+edx*4+12], eax

; 255  : #else
; 256  :                 sb[0][i] = q20(by); sb[1][i] = q21(by); 
; 257  :                 sb[2][i] = q22(by); sb[3][i] = q23(by);
; 258  : #endif
; 259  :             }

  0015c	e9 e6 fe ff ff	 jmp	 $LN10@gen_mk_tab
$LN9@gen_mk_tab:

; 260  :             break;

  00161	e9 38 03 00 00	 jmp	 $LN15@gen_mk_tab
$LN8@gen_mk_tab:

; 261  :     
; 262  :     case 3: for(i = 0; i < 256; ++i)

  00166	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0016d	eb 09		 jmp	 SHORT $LN7@gen_mk_tab
$LN6@gen_mk_tab:
  0016f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00172	83 c1 01	 add	 ecx, 1
  00175	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN7@gen_mk_tab:
  00178	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0017f	0f 83 53 01 00
	00		 jae	 $LN5@gen_mk_tab

; 263  :             {
; 264  :                 by = (u1byte)i;

  00185	8a 55 fc	 mov	 dl, BYTE PTR _i$[ebp]
  00188	88 55 f7	 mov	 BYTE PTR _by$[ebp], dl

; 265  : #ifdef ONE_STEP
; 266  :                 mk_tab[0 + 4*i] = mds(0, q30(by)); mk_tab[1 + 4*i] = mds(1, q31(by));

  0018b	0f b6 45 f7	 movzx	 eax, BYTE PTR _by$[ebp]
  0018f	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+256]
  00196	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00199	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0019d	33 c8		 xor	 ecx, eax
  0019f	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  001a6	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  001a9	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  001ad	33 c8		 xor	 ecx, eax
  001af	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  001b6	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  001b9	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001bc	33 c8		 xor	 ecx, eax
  001be	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001c1	c1 e2 02	 shl	 edx, 2
  001c4	8b 45 f8	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  001c7	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4]
  001ce	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  001d1	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  001d5	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx+256]
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  001df	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001e2	c1 ea 08	 shr	 edx, 8
  001e5	0f b6 ca	 movzx	 ecx, dl
  001e8	33 c1		 xor	 eax, ecx
  001ea	0f b6 90 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+256]
  001f1	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  001f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001f7	c1 e9 08	 shr	 ecx, 8
  001fa	0f b6 c1	 movzx	 eax, cl
  001fd	33 d0		 xor	 edx, eax
  001ff	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx]
  00206	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00209	8b 02		 mov	 eax, DWORD PTR [edx]
  0020b	c1 e8 08	 shr	 eax, 8
  0020e	0f b6 d0	 movzx	 edx, al
  00211	33 ca		 xor	 ecx, edx
  00213	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00216	c1 e0 02	 shl	 eax, 2
  00219	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0021c	8b 0c 8d 00 04
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+1024]
  00223	89 4c 82 04	 mov	 DWORD PTR [edx+eax*4+4], ecx

; 267  :                 mk_tab[2 + 4*i] = mds(2, q32(by)); mk_tab[3 + 4*i] = mds(3, q33(by));

  00227	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  0022b	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  00232	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00235	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00238	c1 ea 10	 shr	 edx, 16			; 00000010H
  0023b	0f b6 ca	 movzx	 ecx, dl
  0023e	33 c1		 xor	 eax, ecx
  00240	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax]
  00247	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0024a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0024d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00250	0f b6 c1	 movzx	 eax, cl
  00253	33 d0		 xor	 edx, eax
  00255	0f b6 8a 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx+256]
  0025c	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  0025f	8b 02		 mov	 eax, DWORD PTR [edx]
  00261	c1 e8 10	 shr	 eax, 16			; 00000010H
  00264	0f b6 d0	 movzx	 edx, al
  00267	33 ca		 xor	 ecx, edx
  00269	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0026c	c1 e0 02	 shl	 eax, 2
  0026f	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00272	8b 0c 8d 00 08
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+2048]
  00279	89 4c 82 08	 mov	 DWORD PTR [edx+eax*4+8], ecx
  0027d	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  00281	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  00288	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0028b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0028e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00291	0f b6 ca	 movzx	 ecx, dl
  00294	33 c1		 xor	 eax, ecx
  00296	0f b6 90 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+256]
  0029d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  002a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002a3	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002a6	0f b6 c1	 movzx	 eax, cl
  002a9	33 d0		 xor	 edx, eax
  002ab	0f b6 8a 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx+256]
  002b2	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  002b5	8b 02		 mov	 eax, DWORD PTR [edx]
  002b7	c1 e8 18	 shr	 eax, 24			; 00000018H
  002ba	0f b6 d0	 movzx	 edx, al
  002bd	33 ca		 xor	 ecx, edx
  002bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002c2	c1 e0 02	 shl	 eax, 2
  002c5	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  002c8	8b 0c 8d 00 0c
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+3072]
  002cf	89 4c 82 0c	 mov	 DWORD PTR [edx+eax*4+12], ecx

; 268  : #else
; 269  :                 sb[0][i] = q30(by); sb[1][i] = q31(by); 
; 270  :                 sb[2][i] = q32(by); sb[3][i] = q33(by);
; 271  : #endif
; 272  :             }

  002d3	e9 97 fe ff ff	 jmp	 $LN6@gen_mk_tab
$LN5@gen_mk_tab:

; 273  :             break;

  002d8	e9 c1 01 00 00	 jmp	 $LN15@gen_mk_tab
$LN4@gen_mk_tab:

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  002dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002e4	eb 09		 jmp	 SHORT $LN3@gen_mk_tab
$LN2@gen_mk_tab:
  002e6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002e9	83 c2 01	 add	 edx, 1
  002ec	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN3@gen_mk_tab:
  002ef	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  002f6	0f 83 a2 01 00
	00		 jae	 $LN15@gen_mk_tab

; 276  :             {
; 277  :                 by = (u1byte)i;

  002fc	8a 45 fc	 mov	 al, BYTE PTR _i$[ebp]
  002ff	88 45 f7	 mov	 BYTE PTR _by$[ebp], al

; 278  : #ifdef ONE_STEP
; 279  :                 mk_tab[0 + 4*i] = mds(0, q40(by)); mk_tab[1 + 4*i] = mds(1, q41(by));

  00302	0f b6 4d f7	 movzx	 ecx, BYTE PTR _by$[ebp]
  00306	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  0030d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00310	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00314	33 d1		 xor	 edx, ecx
  00316	0f b6 92 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[edx+256]
  0031d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00320	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00324	33 d1		 xor	 edx, ecx
  00326	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[edx]
  0032d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00330	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00334	33 d1		 xor	 edx, ecx
  00336	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[edx]
  0033d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00340	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00343	33 d1		 xor	 edx, ecx
  00345	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00348	c1 e0 02	 shl	 eax, 2
  0034b	8b 4d f8	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0034e	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _m_tab[edx*4]
  00355	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  00358	0f b6 45 f7	 movzx	 eax, BYTE PTR _by$[ebp]
  0035c	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax]
  00363	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00366	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00369	c1 e8 08	 shr	 eax, 8
  0036c	0f b6 d0	 movzx	 edx, al
  0036f	33 ca		 xor	 ecx, edx
  00371	0f b6 81 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[ecx+256]
  00378	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0037b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0037e	c1 ea 08	 shr	 edx, 8
  00381	0f b6 ca	 movzx	 ecx, dl
  00384	33 c1		 xor	 eax, ecx
  00386	0f b6 90 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+256]
  0038d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00390	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00393	c1 e9 08	 shr	 ecx, 8
  00396	0f b6 c1	 movzx	 eax, cl
  00399	33 d0		 xor	 edx, eax
  0039b	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx]
  003a2	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  003a5	8b 02		 mov	 eax, DWORD PTR [edx]
  003a7	c1 e8 08	 shr	 eax, 8
  003aa	0f b6 d0	 movzx	 edx, al
  003ad	33 ca		 xor	 ecx, edx
  003af	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003b2	c1 e0 02	 shl	 eax, 2
  003b5	8b 55 f8	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  003b8	8b 0c 8d 00 04
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+1024]
  003bf	89 4c 82 04	 mov	 DWORD PTR [edx+eax*4+4], ecx

; 280  :                 mk_tab[2 + 4*i] = mds(2, q42(by)); mk_tab[3 + 4*i] = mds(3, q43(by));

  003c3	0f b6 55 f7	 movzx	 edx, BYTE PTR _by$[ebp]
  003c7	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx]
  003ce	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  003d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  003d4	c1 ea 10	 shr	 edx, 16			; 00000010H
  003d7	0f b6 ca	 movzx	 ecx, dl
  003da	33 c1		 xor	 eax, ecx
  003dc	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax]
  003e3	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  003e6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003e9	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003ec	0f b6 c1	 movzx	 eax, cl
  003ef	33 d0		 xor	 edx, eax
  003f1	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx]
  003f8	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  003fb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003fe	c1 e8 10	 shr	 eax, 16			; 00000010H
  00401	0f b6 d0	 movzx	 edx, al
  00404	33 ca		 xor	 ecx, edx
  00406	0f b6 81 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[ecx+256]
  0040d	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00410	8b 11		 mov	 edx, DWORD PTR [ecx]
  00412	c1 ea 10	 shr	 edx, 16			; 00000010H
  00415	0f b6 ca	 movzx	 ecx, dl
  00418	33 c1		 xor	 eax, ecx
  0041a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0041d	c1 e2 02	 shl	 edx, 2
  00420	8b 4d f8	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00423	8b 04 85 00 08
	00 00		 mov	 eax, DWORD PTR _m_tab[eax*4+2048]
  0042a	89 44 91 08	 mov	 DWORD PTR [ecx+edx*4+8], eax
  0042e	0f b6 4d f7	 movzx	 ecx, BYTE PTR _by$[ebp]
  00432	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  00439	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0043c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0043f	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00442	0f b6 c1	 movzx	 eax, cl
  00445	33 d0		 xor	 edx, eax
  00447	0f b6 8a 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edx]
  0044e	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00451	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00454	c1 e8 18	 shr	 eax, 24			; 00000018H
  00457	0f b6 d0	 movzx	 edx, al
  0045a	33 ca		 xor	 ecx, edx
  0045c	0f b6 81 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[ecx+256]
  00463	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00466	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00469	c1 ea 18	 shr	 edx, 24			; 00000018H
  0046c	0f b6 ca	 movzx	 ecx, dl
  0046f	33 c1		 xor	 eax, ecx
  00471	0f b6 90 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+256]
  00478	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0047b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00480	0f b6 c1	 movzx	 eax, cl
  00483	33 d0		 xor	 edx, eax
  00485	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00488	c1 e1 02	 shl	 ecx, 2
  0048b	8b 45 f8	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0048e	8b 14 95 00 0c
	00 00		 mov	 edx, DWORD PTR _m_tab[edx*4+3072]
  00495	89 54 88 0c	 mov	 DWORD PTR [eax+ecx*4+12], edx

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }

  00499	e9 48 fe ff ff	 jmp	 $LN2@gen_mk_tab
$LN15@gen_mk_tab:

; 286  :     }
; 287  : };

  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c2 08 00	 ret	 8
_gen_mk_tab@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _mds_rem@8
_TEXT	SEGMENT
_t$ = -12						; size = 4
_u$ = -8						; size = 4
_i$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
_mds_rem@8 PROC						; COMDAT

; 340  : {   u4byte  i, t, u;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 341  : 
; 342  :     for(i = 0; i < 8; ++i)

  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000f	eb 09		 jmp	 SHORT $LN5@mds_rem
$LN4@mds_rem:
  00011	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00014	83 c0 01	 add	 eax, 1
  00017	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@mds_rem:
  0001a	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  0001e	0f 83 88 00 00
	00		 jae	 $LN3@mds_rem

; 343  :     {
; 344  :         t = p1 >> 24;   // get most significant coefficient

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _p1$[ebp]
  00027	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0002a	89 4d f4	 mov	 DWORD PTR _t$[ebp], ecx

; 345  :         
; 346  :         p1 = (p1 << 8) | (p0 >> 24); p0 <<= 8;  // shift others up

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _p1$[ebp]
  00030	c1 e2 08	 shl	 edx, 8
  00033	8b 45 08	 mov	 eax, DWORD PTR _p0$[ebp]
  00036	c1 e8 18	 shr	 eax, 24			; 00000018H
  00039	0b d0		 or	 edx, eax
  0003b	89 55 0c	 mov	 DWORD PTR _p1$[ebp], edx
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _p0$[ebp]
  00041	c1 e1 08	 shl	 ecx, 8
  00044	89 4d 08	 mov	 DWORD PTR _p0$[ebp], ecx

; 347  :             
; 348  :         // multiply t by a (the primitive element - i.e. left shift)
; 349  : 
; 350  :         u = (t << 1); 

  00047	8b 55 f4	 mov	 edx, DWORD PTR _t$[ebp]
  0004a	d1 e2		 shl	 edx, 1
  0004c	89 55 f8	 mov	 DWORD PTR _u$[ebp], edx

; 351  :         
; 352  :         if(t & 0x80)            // subtract modular polynomial on overflow

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00052	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00057	74 0c		 je	 SHORT $LN2@mds_rem

; 353  :         
; 354  :             u ^= G_MOD; 

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _u$[ebp]
  0005c	81 f1 4d 01 00
	00		 xor	 ecx, 333		; 0000014dH
  00062	89 4d f8	 mov	 DWORD PTR _u$[ebp], ecx
$LN2@mds_rem:

; 355  : 
; 356  :         p1 ^= t ^ (u << 16);    // remove t * (a * x^2 + 1)  

  00065	8b 55 f8	 mov	 edx, DWORD PTR _u$[ebp]
  00068	c1 e2 10	 shl	 edx, 16			; 00000010H
  0006b	33 55 f4	 xor	 edx, DWORD PTR _t$[ebp]
  0006e	33 55 0c	 xor	 edx, DWORD PTR _p1$[ebp]
  00071	89 55 0c	 mov	 DWORD PTR _p1$[ebp], edx

; 357  : 
; 358  :         u ^= (t >> 1);          // form u = a * t + t / a = t * (a + 1 / a); 

  00074	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00077	d1 e8		 shr	 eax, 1
  00079	33 45 f8	 xor	 eax, DWORD PTR _u$[ebp]
  0007c	89 45 f8	 mov	 DWORD PTR _u$[ebp], eax

; 359  :         
; 360  :         if(t & 0x01)            // add the modular polynomial on underflow

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _t$[ebp]
  00082	83 e1 01	 and	 ecx, 1
  00085	74 0c		 je	 SHORT $LN1@mds_rem

; 361  :         
; 362  :             u ^= G_MOD >> 1;

  00087	8b 55 f8	 mov	 edx, DWORD PTR _u$[ebp]
  0008a	81 f2 a6 00 00
	00		 xor	 edx, 166		; 000000a6H
  00090	89 55 f8	 mov	 DWORD PTR _u$[ebp], edx
$LN1@mds_rem:

; 363  : 
; 364  :         p1 ^= (u << 24) | (u << 8); // remove t * (a + 1/a) * (x^3 + x)

  00093	8b 45 f8	 mov	 eax, DWORD PTR _u$[ebp]
  00096	c1 e0 18	 shl	 eax, 24			; 00000018H
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _u$[ebp]
  0009c	c1 e1 08	 shl	 ecx, 8
  0009f	0b c1		 or	 eax, ecx
  000a1	33 45 0c	 xor	 eax, DWORD PTR _p1$[ebp]
  000a4	89 45 0c	 mov	 DWORD PTR _p1$[ebp], eax

; 365  :     }

  000a7	e9 65 ff ff ff	 jmp	 $LN4@mds_rem
$LN3@mds_rem:

; 366  : 
; 367  :     return p1;

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _p1$[ebp]

; 368  : };

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
_mds_rem@8 ENDP
_TEXT	ENDS
PUBLIC	_twofish_encrypt@12
; Function compile flags: /Odtp
;	COMDAT _twofish_encrypt@12
_TEXT	SEGMENT
_t0$ = -32						; size = 4
_t1$ = -28						; size = 4
_l_key$ = -24						; size = 4
_mk_tab$ = -20						; size = 4
_blk$ = -16						; size = 16
_instance$ = 8						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_encrypt@12 PROC				; COMDAT

; 431  : {   u4byte  t0, t1, blk[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
  00008	56		 push	 esi

; 432  : 
; 433  : 	u4byte *l_key = instance->l_key;

  00009	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  0000c	89 45 e8	 mov	 DWORD PTR _l_key$[ebp], eax

; 434  : 	u4byte *mk_tab = instance->mk_tab;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00012	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00018	89 4d ec	 mov	 DWORD PTR _mk_tab$[ebp], ecx

; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0001e	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00021	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00023	33 08		 xor	 ecx, DWORD PTR [eax]
  00025	89 4d f0	 mov	 DWORD PTR _blk$[ebp], ecx

; 437  :     blk[1] = LE32(in_blk[1]) ^ l_key[1];

  00028	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0002b	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0002e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00031	33 48 04	 xor	 ecx, DWORD PTR [eax+4]
  00034	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx

; 438  :     blk[2] = LE32(in_blk[2]) ^ l_key[2];

  00037	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0003a	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0003d	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00040	33 48 08	 xor	 ecx, DWORD PTR [eax+8]
  00043	89 4d f8	 mov	 DWORD PTR _blk$[ebp+8], ecx

; 439  :     blk[3] = LE32(in_blk[3]) ^ l_key[3];

  00046	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  00049	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0004c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0004f	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  00052	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  00055	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00058	c1 ea 18	 shr	 edx, 24			; 00000018H
  0005b	0f b6 c2	 movzx	 eax, dl
  0005e	c1 e0 02	 shl	 eax, 2
  00061	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00065	c1 e1 02	 shl	 ecx, 2
  00068	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0006b	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0006e	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00071	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00078	c1 e9 08	 shr	 ecx, 8
  0007b	0f b6 d1	 movzx	 edx, cl
  0007e	c1 e2 02	 shl	 edx, 2
  00081	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00084	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00088	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0008b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0008e	0f b6 ca	 movzx	 ecx, dl
  00091	c1 e1 02	 shl	 ecx, 2
  00094	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00097	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0009b	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0009e	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  000a2	c1 e0 02	 shl	 eax, 2
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  000a8	c1 e9 08	 shr	 ecx, 8
  000ab	0f b6 d1	 movzx	 edx, cl
  000ae	c1 e2 02	 shl	 edx, 2
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  000b4	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  000b7	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  000ba	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  000be	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  000c1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000c4	0f b6 d1	 movzx	 edx, cl
  000c7	c1 e2 02	 shl	 edx, 2
  000ca	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  000cd	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  000d1	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  000d4	c1 ea 18	 shr	 edx, 24			; 00000018H
  000d7	0f b6 ca	 movzx	 ecx, dl
  000da	c1 e1 02	 shl	 ecx, 2
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  000e0	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  000e4	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  000e7	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  000ea	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  000ed	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  000f0	03 41 20	 add	 eax, DWORD PTR [ecx+32]
  000f3	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  000f6	d1 c8		 ror	 eax, 1
  000f8	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  000fb	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  000fe	d1 c2		 rol	 edx, 1
  00100	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00103	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00106	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00109	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0010c	03 41 24	 add	 eax, DWORD PTR [ecx+36]
  0010f	33 d0		 xor	 edx, eax
  00111	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00114	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00117	c1 ea 18	 shr	 edx, 24			; 00000018H
  0011a	0f b6 c2	 movzx	 eax, dl
  0011d	c1 e0 02	 shl	 eax, 2
  00120	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00124	c1 e1 02	 shl	 ecx, 2
  00127	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0012a	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0012d	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00130	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00137	c1 e9 08	 shr	 ecx, 8
  0013a	0f b6 d1	 movzx	 edx, cl
  0013d	c1 e2 02	 shl	 edx, 2
  00140	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00143	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00147	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0014a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0014d	0f b6 ca	 movzx	 ecx, dl
  00150	c1 e1 02	 shl	 ecx, 2
  00153	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00156	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0015a	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0015d	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00161	c1 e0 02	 shl	 eax, 2
  00164	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00167	c1 e9 08	 shr	 ecx, 8
  0016a	0f b6 d1	 movzx	 edx, cl
  0016d	c1 e2 02	 shl	 edx, 2
  00170	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00173	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00176	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00179	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  0017d	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00180	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00183	0f b6 d1	 movzx	 edx, cl
  00186	c1 e2 02	 shl	 edx, 2
  00189	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0018c	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00190	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00193	c1 ea 18	 shr	 edx, 24			; 00000018H
  00196	0f b6 ca	 movzx	 ecx, dl
  00199	c1 e1 02	 shl	 ecx, 2
  0019c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0019f	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  001a3	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  001a6	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  001a9	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  001ac	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  001af	03 41 28	 add	 eax, DWORD PTR [ecx+40]
  001b2	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  001b5	d1 c8		 ror	 eax, 1
  001b7	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  001ba	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  001bd	d1 c2		 rol	 edx, 1
  001bf	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  001c2	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  001c5	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  001c8	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  001cb	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  001ce	33 d0		 xor	 edx, eax
  001d0	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  001d3	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  001d6	c1 ea 18	 shr	 edx, 24			; 00000018H
  001d9	0f b6 c2	 movzx	 eax, dl
  001dc	c1 e0 02	 shl	 eax, 2
  001df	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  001e3	c1 e1 02	 shl	 ecx, 2
  001e6	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  001e9	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  001ec	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  001ef	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  001f3	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  001f6	c1 e9 08	 shr	 ecx, 8
  001f9	0f b6 d1	 movzx	 edx, cl
  001fc	c1 e2 02	 shl	 edx, 2
  001ff	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00202	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00206	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00209	c1 ea 10	 shr	 edx, 16			; 00000010H
  0020c	0f b6 ca	 movzx	 ecx, dl
  0020f	c1 e1 02	 shl	 ecx, 2
  00212	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00215	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00219	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0021c	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  00220	c1 e0 02	 shl	 eax, 2
  00223	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00226	c1 e9 08	 shr	 ecx, 8
  00229	0f b6 d1	 movzx	 edx, cl
  0022c	c1 e2 02	 shl	 edx, 2
  0022f	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00232	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00235	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00238	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  0023c	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  0023f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00242	0f b6 d1	 movzx	 edx, cl
  00245	c1 e2 02	 shl	 edx, 2
  00248	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0024b	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0024f	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00252	c1 ea 18	 shr	 edx, 24			; 00000018H
  00255	0f b6 ca	 movzx	 ecx, dl
  00258	c1 e1 02	 shl	 ecx, 2
  0025b	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0025e	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00262	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00265	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00268	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  0026b	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0026e	03 41 30	 add	 eax, DWORD PTR [ecx+48]
  00271	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  00274	d1 c8		 ror	 eax, 1
  00276	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00279	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0027c	d1 c2		 rol	 edx, 1
  0027e	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00281	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00284	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00287	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0028a	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  0028d	33 d0		 xor	 edx, eax
  0028f	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00292	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00295	c1 ea 18	 shr	 edx, 24			; 00000018H
  00298	0f b6 c2	 movzx	 eax, dl
  0029b	c1 e0 02	 shl	 eax, 2
  0029e	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  002a2	c1 e1 02	 shl	 ecx, 2
  002a5	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  002a8	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  002ab	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  002ae	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  002b2	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  002b5	c1 e9 08	 shr	 ecx, 8
  002b8	0f b6 d1	 movzx	 edx, cl
  002bb	c1 e2 02	 shl	 edx, 2
  002be	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  002c1	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  002c5	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  002c8	c1 ea 10	 shr	 edx, 16			; 00000010H
  002cb	0f b6 ca	 movzx	 ecx, dl
  002ce	c1 e1 02	 shl	 ecx, 2
  002d1	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  002d4	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  002d8	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  002db	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  002df	c1 e0 02	 shl	 eax, 2
  002e2	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  002e5	c1 e9 08	 shr	 ecx, 8
  002e8	0f b6 d1	 movzx	 edx, cl
  002eb	c1 e2 02	 shl	 edx, 2
  002ee	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  002f1	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  002f4	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  002f7	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  002fb	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  002fe	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00301	0f b6 d1	 movzx	 edx, cl
  00304	c1 e2 02	 shl	 edx, 2
  00307	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0030a	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0030e	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00311	c1 ea 18	 shr	 edx, 24			; 00000018H
  00314	0f b6 ca	 movzx	 ecx, dl
  00317	c1 e1 02	 shl	 ecx, 2
  0031a	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0031d	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00321	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00324	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00327	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  0032a	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0032d	03 41 38	 add	 eax, DWORD PTR [ecx+56]
  00330	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  00333	d1 c8		 ror	 eax, 1
  00335	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00338	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0033b	d1 c2		 rol	 edx, 1
  0033d	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00340	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00343	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00346	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00349	03 41 3c	 add	 eax, DWORD PTR [ecx+60]
  0034c	33 d0		 xor	 edx, eax
  0034e	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00351	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00354	c1 ea 18	 shr	 edx, 24			; 00000018H
  00357	0f b6 c2	 movzx	 eax, dl
  0035a	c1 e0 02	 shl	 eax, 2
  0035d	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00361	c1 e1 02	 shl	 ecx, 2
  00364	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00367	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0036a	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0036d	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00371	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00374	c1 e9 08	 shr	 ecx, 8
  00377	0f b6 d1	 movzx	 edx, cl
  0037a	c1 e2 02	 shl	 edx, 2
  0037d	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00380	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00384	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00387	c1 ea 10	 shr	 edx, 16			; 00000010H
  0038a	0f b6 ca	 movzx	 ecx, dl
  0038d	c1 e1 02	 shl	 ecx, 2
  00390	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00393	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00397	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0039a	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  0039e	c1 e0 02	 shl	 eax, 2
  003a1	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  003a4	c1 e9 08	 shr	 ecx, 8
  003a7	0f b6 d1	 movzx	 edx, cl
  003aa	c1 e2 02	 shl	 edx, 2
  003ad	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  003b0	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  003b3	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  003b6	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  003ba	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  003bd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003c0	0f b6 d1	 movzx	 edx, cl
  003c3	c1 e2 02	 shl	 edx, 2
  003c6	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  003c9	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  003cd	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  003d0	c1 ea 18	 shr	 edx, 24			; 00000018H
  003d3	0f b6 ca	 movzx	 ecx, dl
  003d6	c1 e1 02	 shl	 ecx, 2
  003d9	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  003dc	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  003e0	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  003e3	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  003e6	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  003e9	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  003ec	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  003ef	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  003f2	d1 c8		 ror	 eax, 1
  003f4	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  003f7	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  003fa	d1 c2		 rol	 edx, 1
  003fc	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  003ff	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00402	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00405	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00408	03 41 44	 add	 eax, DWORD PTR [ecx+68]
  0040b	33 d0		 xor	 edx, eax
  0040d	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00410	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00413	c1 ea 18	 shr	 edx, 24			; 00000018H
  00416	0f b6 c2	 movzx	 eax, dl
  00419	c1 e0 02	 shl	 eax, 2
  0041c	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00420	c1 e1 02	 shl	 ecx, 2
  00423	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00426	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00429	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0042c	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00430	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00433	c1 e9 08	 shr	 ecx, 8
  00436	0f b6 d1	 movzx	 edx, cl
  00439	c1 e2 02	 shl	 edx, 2
  0043c	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0043f	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00443	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00446	c1 ea 10	 shr	 edx, 16			; 00000010H
  00449	0f b6 ca	 movzx	 ecx, dl
  0044c	c1 e1 02	 shl	 ecx, 2
  0044f	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00452	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00456	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00459	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  0045d	c1 e0 02	 shl	 eax, 2
  00460	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00463	c1 e9 08	 shr	 ecx, 8
  00466	0f b6 d1	 movzx	 edx, cl
  00469	c1 e2 02	 shl	 edx, 2
  0046c	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0046f	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00472	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00475	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00479	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  0047c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0047f	0f b6 d1	 movzx	 edx, cl
  00482	c1 e2 02	 shl	 edx, 2
  00485	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00488	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0048c	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0048f	c1 ea 18	 shr	 edx, 24			; 00000018H
  00492	0f b6 ca	 movzx	 ecx, dl
  00495	c1 e1 02	 shl	 ecx, 2
  00498	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0049b	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0049f	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  004a2	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  004a5	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  004a8	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  004ab	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  004ae	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  004b1	d1 c8		 ror	 eax, 1
  004b3	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  004b6	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  004b9	d1 c2		 rol	 edx, 1
  004bb	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  004be	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  004c1	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  004c4	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  004c7	03 41 4c	 add	 eax, DWORD PTR [ecx+76]
  004ca	33 d0		 xor	 edx, eax
  004cc	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  004cf	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  004d2	c1 ea 18	 shr	 edx, 24			; 00000018H
  004d5	0f b6 c2	 movzx	 eax, dl
  004d8	c1 e0 02	 shl	 eax, 2
  004db	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  004df	c1 e1 02	 shl	 ecx, 2
  004e2	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  004e5	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  004e8	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  004eb	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  004ef	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  004f2	c1 e9 08	 shr	 ecx, 8
  004f5	0f b6 d1	 movzx	 edx, cl
  004f8	c1 e2 02	 shl	 edx, 2
  004fb	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  004fe	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00502	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00505	c1 ea 10	 shr	 edx, 16			; 00000010H
  00508	0f b6 ca	 movzx	 ecx, dl
  0050b	c1 e1 02	 shl	 ecx, 2
  0050e	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00511	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00515	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00518	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  0051c	c1 e0 02	 shl	 eax, 2
  0051f	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00522	c1 e9 08	 shr	 ecx, 8
  00525	0f b6 d1	 movzx	 edx, cl
  00528	c1 e2 02	 shl	 edx, 2
  0052b	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0052e	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00531	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00534	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00538	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  0053b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0053e	0f b6 d1	 movzx	 edx, cl
  00541	c1 e2 02	 shl	 edx, 2
  00544	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00547	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0054b	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0054e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00551	0f b6 ca	 movzx	 ecx, dl
  00554	c1 e1 02	 shl	 ecx, 2
  00557	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0055a	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0055e	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00561	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00564	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00567	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0056a	03 41 50	 add	 eax, DWORD PTR [ecx+80]
  0056d	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  00570	d1 c8		 ror	 eax, 1
  00572	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00575	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00578	d1 c2		 rol	 edx, 1
  0057a	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  0057d	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00580	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00583	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00586	03 41 54	 add	 eax, DWORD PTR [ecx+84]
  00589	33 d0		 xor	 edx, eax
  0058b	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  0058e	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00591	c1 ea 18	 shr	 edx, 24			; 00000018H
  00594	0f b6 c2	 movzx	 eax, dl
  00597	c1 e0 02	 shl	 eax, 2
  0059a	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  0059e	c1 e1 02	 shl	 ecx, 2
  005a1	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  005a4	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  005a7	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  005aa	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  005ae	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  005b1	c1 e9 08	 shr	 ecx, 8
  005b4	0f b6 d1	 movzx	 edx, cl
  005b7	c1 e2 02	 shl	 edx, 2
  005ba	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  005bd	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  005c1	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  005c4	c1 ea 10	 shr	 edx, 16			; 00000010H
  005c7	0f b6 ca	 movzx	 ecx, dl
  005ca	c1 e1 02	 shl	 ecx, 2
  005cd	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  005d0	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  005d4	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  005d7	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  005db	c1 e0 02	 shl	 eax, 2
  005de	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  005e1	c1 e9 08	 shr	 ecx, 8
  005e4	0f b6 d1	 movzx	 edx, cl
  005e7	c1 e2 02	 shl	 edx, 2
  005ea	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  005ed	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  005f0	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  005f3	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  005f7	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  005fa	c1 e9 10	 shr	 ecx, 16			; 00000010H
  005fd	0f b6 d1	 movzx	 edx, cl
  00600	c1 e2 02	 shl	 edx, 2
  00603	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00606	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0060a	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0060d	c1 ea 18	 shr	 edx, 24			; 00000018H
  00610	0f b6 ca	 movzx	 ecx, dl
  00613	c1 e1 02	 shl	 ecx, 2
  00616	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00619	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0061d	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00620	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00623	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00626	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00629	03 41 58	 add	 eax, DWORD PTR [ecx+88]
  0062c	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  0062f	d1 c8		 ror	 eax, 1
  00631	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00634	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00637	d1 c2		 rol	 edx, 1
  00639	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  0063c	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  0063f	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00642	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00645	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00648	33 d0		 xor	 edx, eax
  0064a	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx

; 442  :     f_rnd(4); f_rnd(5); f_rnd(6); f_rnd(7);

  0064d	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00650	c1 ea 18	 shr	 edx, 24			; 00000018H
  00653	0f b6 c2	 movzx	 eax, dl
  00656	c1 e0 02	 shl	 eax, 2
  00659	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  0065d	c1 e1 02	 shl	 ecx, 2
  00660	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00663	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00666	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00669	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  0066d	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00670	c1 e9 08	 shr	 ecx, 8
  00673	0f b6 d1	 movzx	 edx, cl
  00676	c1 e2 02	 shl	 edx, 2
  00679	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0067c	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00680	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00683	c1 ea 10	 shr	 edx, 16			; 00000010H
  00686	0f b6 ca	 movzx	 ecx, dl
  00689	c1 e1 02	 shl	 ecx, 2
  0068c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0068f	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00693	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00696	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  0069a	c1 e0 02	 shl	 eax, 2
  0069d	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  006a0	c1 e9 08	 shr	 ecx, 8
  006a3	0f b6 d1	 movzx	 edx, cl
  006a6	c1 e2 02	 shl	 edx, 2
  006a9	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  006ac	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  006af	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  006b2	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  006b6	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  006b9	c1 e9 10	 shr	 ecx, 16			; 00000010H
  006bc	0f b6 d1	 movzx	 edx, cl
  006bf	c1 e2 02	 shl	 edx, 2
  006c2	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  006c5	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  006c9	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  006cc	c1 ea 18	 shr	 edx, 24			; 00000018H
  006cf	0f b6 ca	 movzx	 ecx, dl
  006d2	c1 e1 02	 shl	 ecx, 2
  006d5	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  006d8	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  006dc	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  006df	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  006e2	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  006e5	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  006e8	03 41 60	 add	 eax, DWORD PTR [ecx+96]
  006eb	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  006ee	d1 c8		 ror	 eax, 1
  006f0	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  006f3	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  006f6	d1 c2		 rol	 edx, 1
  006f8	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  006fb	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  006fe	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00701	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00704	03 41 64	 add	 eax, DWORD PTR [ecx+100]
  00707	33 d0		 xor	 edx, eax
  00709	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  0070c	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0070f	c1 ea 18	 shr	 edx, 24			; 00000018H
  00712	0f b6 c2	 movzx	 eax, dl
  00715	c1 e0 02	 shl	 eax, 2
  00718	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  0071c	c1 e1 02	 shl	 ecx, 2
  0071f	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00722	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00725	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00728	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  0072c	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  0072f	c1 e9 08	 shr	 ecx, 8
  00732	0f b6 d1	 movzx	 edx, cl
  00735	c1 e2 02	 shl	 edx, 2
  00738	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0073b	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0073f	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00742	c1 ea 10	 shr	 edx, 16			; 00000010H
  00745	0f b6 ca	 movzx	 ecx, dl
  00748	c1 e1 02	 shl	 ecx, 2
  0074b	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0074e	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00752	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00755	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00759	c1 e0 02	 shl	 eax, 2
  0075c	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  0075f	c1 e9 08	 shr	 ecx, 8
  00762	0f b6 d1	 movzx	 edx, cl
  00765	c1 e2 02	 shl	 edx, 2
  00768	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0076b	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0076e	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00771	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00775	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00778	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0077b	0f b6 d1	 movzx	 edx, cl
  0077e	c1 e2 02	 shl	 edx, 2
  00781	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00784	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00788	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0078b	c1 ea 18	 shr	 edx, 24			; 00000018H
  0078e	0f b6 ca	 movzx	 ecx, dl
  00791	c1 e1 02	 shl	 ecx, 2
  00794	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00797	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0079b	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  0079e	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  007a1	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  007a4	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  007a7	03 41 68	 add	 eax, DWORD PTR [ecx+104]
  007aa	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  007ad	d1 c8		 ror	 eax, 1
  007af	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  007b2	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  007b5	d1 c2		 rol	 edx, 1
  007b7	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  007ba	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  007bd	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  007c0	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  007c3	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  007c6	33 d0		 xor	 edx, eax
  007c8	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  007cb	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  007ce	c1 ea 18	 shr	 edx, 24			; 00000018H
  007d1	0f b6 c2	 movzx	 eax, dl
  007d4	c1 e0 02	 shl	 eax, 2
  007d7	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  007db	c1 e1 02	 shl	 ecx, 2
  007de	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  007e1	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  007e4	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  007e7	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  007eb	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  007ee	c1 e9 08	 shr	 ecx, 8
  007f1	0f b6 d1	 movzx	 edx, cl
  007f4	c1 e2 02	 shl	 edx, 2
  007f7	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  007fa	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  007fe	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00801	c1 ea 10	 shr	 edx, 16			; 00000010H
  00804	0f b6 ca	 movzx	 ecx, dl
  00807	c1 e1 02	 shl	 ecx, 2
  0080a	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0080d	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00811	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00814	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  00818	c1 e0 02	 shl	 eax, 2
  0081b	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  0081e	c1 e9 08	 shr	 ecx, 8
  00821	0f b6 d1	 movzx	 edx, cl
  00824	c1 e2 02	 shl	 edx, 2
  00827	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0082a	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0082d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00830	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00834	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00837	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0083a	0f b6 d1	 movzx	 edx, cl
  0083d	c1 e2 02	 shl	 edx, 2
  00840	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00843	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00847	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0084a	c1 ea 18	 shr	 edx, 24			; 00000018H
  0084d	0f b6 ca	 movzx	 ecx, dl
  00850	c1 e1 02	 shl	 ecx, 2
  00853	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00856	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0085a	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  0085d	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00860	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00863	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00866	03 41 70	 add	 eax, DWORD PTR [ecx+112]
  00869	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  0086c	d1 c8		 ror	 eax, 1
  0086e	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00871	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00874	d1 c2		 rol	 edx, 1
  00876	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00879	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  0087c	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  0087f	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00882	03 41 74	 add	 eax, DWORD PTR [ecx+116]
  00885	33 d0		 xor	 edx, eax
  00887	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  0088a	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0088d	c1 ea 18	 shr	 edx, 24			; 00000018H
  00890	0f b6 c2	 movzx	 eax, dl
  00893	c1 e0 02	 shl	 eax, 2
  00896	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  0089a	c1 e1 02	 shl	 ecx, 2
  0089d	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  008a0	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  008a3	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  008a6	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  008aa	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  008ad	c1 e9 08	 shr	 ecx, 8
  008b0	0f b6 d1	 movzx	 edx, cl
  008b3	c1 e2 02	 shl	 edx, 2
  008b6	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  008b9	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  008bd	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  008c0	c1 ea 10	 shr	 edx, 16			; 00000010H
  008c3	0f b6 ca	 movzx	 ecx, dl
  008c6	c1 e1 02	 shl	 ecx, 2
  008c9	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  008cc	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  008d0	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  008d3	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  008d7	c1 e0 02	 shl	 eax, 2
  008da	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  008dd	c1 e9 08	 shr	 ecx, 8
  008e0	0f b6 d1	 movzx	 edx, cl
  008e3	c1 e2 02	 shl	 edx, 2
  008e6	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  008e9	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  008ec	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008ef	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  008f3	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  008f6	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008f9	0f b6 d1	 movzx	 edx, cl
  008fc	c1 e2 02	 shl	 edx, 2
  008ff	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00902	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00906	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00909	c1 ea 18	 shr	 edx, 24			; 00000018H
  0090c	0f b6 ca	 movzx	 ecx, dl
  0090f	c1 e1 02	 shl	 ecx, 2
  00912	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00915	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00919	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  0091c	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  0091f	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00922	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00925	03 41 78	 add	 eax, DWORD PTR [ecx+120]
  00928	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  0092b	d1 c8		 ror	 eax, 1
  0092d	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00930	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00933	d1 c2		 rol	 edx, 1
  00935	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00938	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  0093b	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  0093e	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00941	03 41 7c	 add	 eax, DWORD PTR [ecx+124]
  00944	33 d0		 xor	 edx, eax
  00946	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00949	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0094c	c1 ea 18	 shr	 edx, 24			; 00000018H
  0094f	0f b6 c2	 movzx	 eax, dl
  00952	c1 e0 02	 shl	 eax, 2
  00955	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00959	c1 e1 02	 shl	 ecx, 2
  0095c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0095f	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00962	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00965	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00969	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  0096c	c1 e9 08	 shr	 ecx, 8
  0096f	0f b6 d1	 movzx	 edx, cl
  00972	c1 e2 02	 shl	 edx, 2
  00975	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00978	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0097c	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0097f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00982	0f b6 ca	 movzx	 ecx, dl
  00985	c1 e1 02	 shl	 ecx, 2
  00988	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0098b	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0098f	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00992	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  00996	c1 e0 02	 shl	 eax, 2
  00999	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  0099c	c1 e9 08	 shr	 ecx, 8
  0099f	0f b6 d1	 movzx	 edx, cl
  009a2	c1 e2 02	 shl	 edx, 2
  009a5	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  009a8	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  009ab	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  009ae	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  009b2	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  009b5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009b8	0f b6 d1	 movzx	 edx, cl
  009bb	c1 e2 02	 shl	 edx, 2
  009be	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  009c1	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  009c5	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  009c8	c1 ea 18	 shr	 edx, 24			; 00000018H
  009cb	0f b6 ca	 movzx	 ecx, dl
  009ce	c1 e1 02	 shl	 ecx, 2
  009d1	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  009d4	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  009d8	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  009db	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  009de	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  009e1	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  009e4	03 81 80 00 00
	00		 add	 eax, DWORD PTR [ecx+128]
  009ea	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  009ed	d1 c8		 ror	 eax, 1
  009ef	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  009f2	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  009f5	d1 c2		 rol	 edx, 1
  009f7	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  009fa	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  009fd	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00a00	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00a03	03 81 84 00 00
	00		 add	 eax, DWORD PTR [ecx+132]
  00a09	33 d0		 xor	 edx, eax
  00a0b	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00a0e	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00a11	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a14	0f b6 c2	 movzx	 eax, dl
  00a17	c1 e0 02	 shl	 eax, 2
  00a1a	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00a1e	c1 e1 02	 shl	 ecx, 2
  00a21	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00a24	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00a27	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00a2a	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00a2e	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00a31	c1 e9 08	 shr	 ecx, 8
  00a34	0f b6 d1	 movzx	 edx, cl
  00a37	c1 e2 02	 shl	 edx, 2
  00a3a	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00a3d	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00a41	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00a44	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a47	0f b6 ca	 movzx	 ecx, dl
  00a4a	c1 e1 02	 shl	 ecx, 2
  00a4d	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00a50	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00a54	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00a57	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00a5b	c1 e0 02	 shl	 eax, 2
  00a5e	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00a61	c1 e9 08	 shr	 ecx, 8
  00a64	0f b6 d1	 movzx	 edx, cl
  00a67	c1 e2 02	 shl	 edx, 2
  00a6a	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00a6d	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00a70	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a73	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00a77	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00a7a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a7d	0f b6 d1	 movzx	 edx, cl
  00a80	c1 e2 02	 shl	 edx, 2
  00a83	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00a86	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00a8a	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00a8d	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a90	0f b6 ca	 movzx	 ecx, dl
  00a93	c1 e1 02	 shl	 ecx, 2
  00a96	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00a99	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00a9d	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00aa0	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00aa3	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00aa6	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00aa9	03 81 88 00 00
	00		 add	 eax, DWORD PTR [ecx+136]
  00aaf	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  00ab2	d1 c8		 ror	 eax, 1
  00ab4	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00ab7	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00aba	d1 c2		 rol	 edx, 1
  00abc	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00abf	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00ac2	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00ac5	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00ac8	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  00ace	33 d0		 xor	 edx, eax
  00ad0	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00ad3	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00ad6	c1 ea 18	 shr	 edx, 24			; 00000018H
  00ad9	0f b6 c2	 movzx	 eax, dl
  00adc	c1 e0 02	 shl	 eax, 2
  00adf	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00ae3	c1 e1 02	 shl	 ecx, 2
  00ae6	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00ae9	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00aec	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00aef	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00af3	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00af6	c1 e9 08	 shr	 ecx, 8
  00af9	0f b6 d1	 movzx	 edx, cl
  00afc	c1 e2 02	 shl	 edx, 2
  00aff	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00b02	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00b06	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00b09	c1 ea 10	 shr	 edx, 16			; 00000010H
  00b0c	0f b6 ca	 movzx	 ecx, dl
  00b0f	c1 e1 02	 shl	 ecx, 2
  00b12	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00b15	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00b19	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00b1c	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  00b20	c1 e0 02	 shl	 eax, 2
  00b23	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00b26	c1 e9 08	 shr	 ecx, 8
  00b29	0f b6 d1	 movzx	 edx, cl
  00b2c	c1 e2 02	 shl	 edx, 2
  00b2f	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00b32	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00b35	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00b38	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00b3c	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00b3f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b42	0f b6 d1	 movzx	 edx, cl
  00b45	c1 e2 02	 shl	 edx, 2
  00b48	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00b4b	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00b4f	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00b52	c1 ea 18	 shr	 edx, 24			; 00000018H
  00b55	0f b6 ca	 movzx	 ecx, dl
  00b58	c1 e1 02	 shl	 ecx, 2
  00b5b	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00b5e	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00b62	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00b65	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00b68	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00b6b	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00b6e	03 81 90 00 00
	00		 add	 eax, DWORD PTR [ecx+144]
  00b74	33 45 f8	 xor	 eax, DWORD PTR _blk$[ebp+8]
  00b77	d1 c8		 ror	 eax, 1
  00b79	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00b7c	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00b7f	d1 c2		 rol	 edx, 1
  00b81	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00b84	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00b87	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00b8a	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00b8d	03 81 94 00 00
	00		 add	 eax, DWORD PTR [ecx+148]
  00b93	33 d0		 xor	 edx, eax
  00b95	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00b98	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00b9b	c1 ea 18	 shr	 edx, 24			; 00000018H
  00b9e	0f b6 c2	 movzx	 eax, dl
  00ba1	c1 e0 02	 shl	 eax, 2
  00ba4	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00ba8	c1 e1 02	 shl	 ecx, 2
  00bab	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00bae	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00bb1	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00bb4	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00bb8	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00bbb	c1 e9 08	 shr	 ecx, 8
  00bbe	0f b6 d1	 movzx	 edx, cl
  00bc1	c1 e2 02	 shl	 edx, 2
  00bc4	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00bc7	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00bcb	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00bce	c1 ea 10	 shr	 edx, 16			; 00000010H
  00bd1	0f b6 ca	 movzx	 ecx, dl
  00bd4	c1 e1 02	 shl	 ecx, 2
  00bd7	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00bda	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00bde	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00be1	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00be5	c1 e0 02	 shl	 eax, 2
  00be8	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00beb	c1 e9 08	 shr	 ecx, 8
  00bee	0f b6 d1	 movzx	 edx, cl
  00bf1	c1 e2 02	 shl	 edx, 2
  00bf4	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00bf7	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00bfa	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00bfd	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00c01	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00c04	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c07	0f b6 d1	 movzx	 edx, cl
  00c0a	c1 e2 02	 shl	 edx, 2
  00c0d	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00c10	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00c14	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00c17	c1 ea 18	 shr	 edx, 24			; 00000018H
  00c1a	0f b6 ca	 movzx	 ecx, dl
  00c1d	c1 e1 02	 shl	 ecx, 2
  00c20	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00c23	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00c27	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00c2a	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00c2d	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00c30	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c33	03 81 98 00 00
	00		 add	 eax, DWORD PTR [ecx+152]
  00c39	33 45 f0	 xor	 eax, DWORD PTR _blk$[ebp]
  00c3c	d1 c8		 ror	 eax, 1
  00c3e	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00c41	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00c44	d1 c2		 rol	 edx, 1
  00c46	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00c49	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00c4c	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00c4f	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c52	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  00c58	33 d0		 xor	 edx, eax
  00c5a	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx

; 443  : 
; 444  :     out_blk[0] = LE32(blk[2] ^ l_key[4]);

  00c5d	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00c60	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00c63	33 42 10	 xor	 eax, DWORD PTR [edx+16]
  00c66	8b 4d 10	 mov	 ecx, DWORD PTR _out_blk$[ebp]
  00c69	89 01		 mov	 DWORD PTR [ecx], eax

; 445  :     out_blk[1] = LE32(blk[3] ^ l_key[5]);

  00c6b	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00c6e	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  00c71	33 42 14	 xor	 eax, DWORD PTR [edx+20]
  00c74	8b 4d 10	 mov	 ecx, DWORD PTR _out_blk$[ebp]
  00c77	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 446  :     out_blk[2] = LE32(blk[0] ^ l_key[6]);

  00c7a	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00c7d	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  00c80	33 42 18	 xor	 eax, DWORD PTR [edx+24]
  00c83	8b 4d 10	 mov	 ecx, DWORD PTR _out_blk$[ebp]
  00c86	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 447  :     out_blk[3] = LE32(blk[1] ^ l_key[7]); 

  00c89	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00c8c	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00c8f	33 42 1c	 xor	 eax, DWORD PTR [edx+28]
  00c92	8b 4d 10	 mov	 ecx, DWORD PTR _out_blk$[ebp]
  00c95	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 448  : };

  00c98	5e		 pop	 esi
  00c99	8b e5		 mov	 esp, ebp
  00c9b	5d		 pop	 ebp
  00c9c	c2 0c 00	 ret	 12			; 0000000cH
_twofish_encrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_twofish_decrypt@12
; Function compile flags: /Odtp
;	COMDAT _twofish_decrypt@12
_TEXT	SEGMENT
_t0$ = -32						; size = 4
_t1$ = -28						; size = 4
_l_key$ = -24						; size = 4
_mk_tab$ = -20						; size = 4
_blk$ = -16						; size = 16
_instance$ = 8						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_decrypt@12 PROC				; COMDAT

; 497  : {   u4byte  t0, t1, blk[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
  00008	56		 push	 esi

; 498  : 
; 499  : 	u4byte *l_key = instance->l_key;

  00009	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  0000c	89 45 e8	 mov	 DWORD PTR _l_key$[ebp], eax

; 500  : 	u4byte *mk_tab = instance->mk_tab;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  00012	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00018	89 4d ec	 mov	 DWORD PTR _mk_tab$[ebp], ecx

; 501  : 
; 502  :     blk[0] = LE32(in_blk[0]) ^ l_key[4];

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0001e	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00021	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00023	33 48 10	 xor	 ecx, DWORD PTR [eax+16]
  00026	89 4d f0	 mov	 DWORD PTR _blk$[ebp], ecx

; 503  :     blk[1] = LE32(in_blk[1]) ^ l_key[5];

  00029	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0002c	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0002f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00032	33 48 14	 xor	 ecx, DWORD PTR [eax+20]
  00035	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx

; 504  :     blk[2] = LE32(in_blk[2]) ^ l_key[6];

  00038	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0003b	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0003e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00041	33 48 18	 xor	 ecx, DWORD PTR [eax+24]
  00044	89 4d f8	 mov	 DWORD PTR _blk$[ebp+8], ecx

; 505  :     blk[3] = LE32(in_blk[3]) ^ l_key[7];

  00047	8b 55 0c	 mov	 edx, DWORD PTR _in_blk$[ebp]
  0004a	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0004d	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00050	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00053	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx

; 506  : 
; 507  :     i_rnd(7); i_rnd(6); i_rnd(5); i_rnd(4);

  00056	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00059	c1 ea 18	 shr	 edx, 24			; 00000018H
  0005c	0f b6 c2	 movzx	 eax, dl
  0005f	c1 e0 02	 shl	 eax, 2
  00062	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00066	c1 e1 02	 shl	 ecx, 2
  00069	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0006c	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0006f	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00072	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00079	c1 e9 08	 shr	 ecx, 8
  0007c	0f b6 d1	 movzx	 edx, cl
  0007f	c1 e2 02	 shl	 edx, 2
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00085	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00089	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0008c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0008f	0f b6 ca	 movzx	 ecx, dl
  00092	c1 e1 02	 shl	 ecx, 2
  00095	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00098	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0009c	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0009f	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  000a3	c1 e0 02	 shl	 eax, 2
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  000a9	c1 e9 08	 shr	 ecx, 8
  000ac	0f b6 d1	 movzx	 edx, cl
  000af	c1 e2 02	 shl	 edx, 2
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  000b5	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  000b8	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  000bb	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  000c2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000c5	0f b6 d1	 movzx	 edx, cl
  000c8	c1 e2 02	 shl	 edx, 2
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  000ce	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  000d2	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  000d5	c1 ea 18	 shr	 edx, 24			; 00000018H
  000d8	0f b6 ca	 movzx	 ecx, dl
  000db	c1 e1 02	 shl	 ecx, 2
  000de	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  000e1	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  000e5	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  000eb	d1 c0		 rol	 eax, 1
  000ed	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  000f0	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  000f3	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  000f6	03 8a 98 00 00
	00		 add	 ecx, DWORD PTR [edx+152]
  000fc	33 c1		 xor	 eax, ecx
  000fe	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00101	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00104	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00107	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0010a	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0010d	03 90 9c 00 00
	00		 add	 edx, DWORD PTR [eax+156]
  00113	33 55 fc	 xor	 edx, DWORD PTR _blk$[ebp+12]
  00116	d1 ca		 ror	 edx, 1
  00118	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  0011e	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00121	0f b6 d1	 movzx	 edx, cl
  00124	c1 e2 02	 shl	 edx, 2
  00127	0f b6 45 fc	 movzx	 eax, BYTE PTR _blk$[ebp+12]
  0012b	c1 e0 02	 shl	 eax, 2
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00131	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00134	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00137	33 54 86 04	 xor	 edx, DWORD PTR [esi+eax*4+4]
  0013b	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  0013e	c1 e8 08	 shr	 eax, 8
  00141	0f b6 c8	 movzx	 ecx, al
  00144	c1 e1 02	 shl	 ecx, 2
  00147	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0014a	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00151	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00154	0f b6 c1	 movzx	 eax, cl
  00157	c1 e0 02	 shl	 eax, 2
  0015a	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0015d	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  00161	89 55 e4	 mov	 DWORD PTR _t1$[ebp], edx
  00164	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  00168	c1 e2 02	 shl	 edx, 2
  0016b	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  0016e	c1 e8 08	 shr	 eax, 8
  00171	0f b6 c8	 movzx	 ecx, al
  00174	c1 e1 02	 shl	 ecx, 2
  00177	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0017a	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0017d	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00180	33 54 8e 04	 xor	 edx, DWORD PTR [esi+ecx*4+4]
  00184	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00187	c1 e8 10	 shr	 eax, 16			; 00000010H
  0018a	0f b6 c8	 movzx	 ecx, al
  0018d	c1 e1 02	 shl	 ecx, 2
  00190	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00193	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00197	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  0019a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0019d	0f b6 c1	 movzx	 eax, cl
  001a0	c1 e0 02	 shl	 eax, 2
  001a3	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  001a6	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  001aa	89 55 e0	 mov	 DWORD PTR _t0$[ebp], edx
  001ad	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  001b0	d1 c2		 rol	 edx, 1
  001b2	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  001b5	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  001b8	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  001bb	03 81 90 00 00
	00		 add	 eax, DWORD PTR [ecx+144]
  001c1	33 d0		 xor	 edx, eax
  001c3	89 55 f0	 mov	 DWORD PTR _blk$[ebp], edx
  001c6	8b 55 e4	 mov	 edx, DWORD PTR _t1$[ebp]
  001c9	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  001cc	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  001cf	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  001d2	03 8a 94 00 00
	00		 add	 ecx, DWORD PTR [edx+148]
  001d8	33 4d f4	 xor	 ecx, DWORD PTR _blk$[ebp+4]
  001db	d1 c9		 ror	 ecx, 1
  001dd	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx
  001e0	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  001e3	c1 e8 18	 shr	 eax, 24			; 00000018H
  001e6	0f b6 c8	 movzx	 ecx, al
  001e9	c1 e1 02	 shl	 ecx, 2
  001ec	0f b6 55 f4	 movzx	 edx, BYTE PTR _blk$[ebp+4]
  001f0	c1 e2 02	 shl	 edx, 2
  001f3	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  001f6	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  001f9	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  001fc	33 4c 96 04	 xor	 ecx, DWORD PTR [esi+edx*4+4]
  00200	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00203	c1 ea 08	 shr	 edx, 8
  00206	0f b6 c2	 movzx	 eax, dl
  00209	c1 e0 02	 shl	 eax, 2
  0020c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0020f	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  00213	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00216	c1 e8 10	 shr	 eax, 16			; 00000010H
  00219	0f b6 d0	 movzx	 edx, al
  0021c	c1 e2 02	 shl	 edx, 2
  0021f	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00222	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  00226	89 4d e4	 mov	 DWORD PTR _t1$[ebp], ecx
  00229	0f b6 4d f0	 movzx	 ecx, BYTE PTR _blk$[ebp]
  0022d	c1 e1 02	 shl	 ecx, 2
  00230	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00233	c1 ea 08	 shr	 edx, 8
  00236	0f b6 c2	 movzx	 eax, dl
  00239	c1 e0 02	 shl	 eax, 2
  0023c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0023f	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00242	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00245	33 4c 86 04	 xor	 ecx, DWORD PTR [esi+eax*4+4]
  00249	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0024c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0024f	0f b6 c2	 movzx	 eax, dl
  00252	c1 e0 02	 shl	 eax, 2
  00255	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00258	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  0025c	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  0025f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00262	0f b6 d0	 movzx	 edx, al
  00265	c1 e2 02	 shl	 edx, 2
  00268	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0026b	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  0026f	89 4d e0	 mov	 DWORD PTR _t0$[ebp], ecx
  00272	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00275	d1 c1		 rol	 ecx, 1
  00277	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  0027a	03 55 e4	 add	 edx, DWORD PTR _t1$[ebp]
  0027d	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00280	03 90 88 00 00
	00		 add	 edx, DWORD PTR [eax+136]
  00286	33 ca		 xor	 ecx, edx
  00288	89 4d f8	 mov	 DWORD PTR _blk$[ebp+8], ecx
  0028b	8b 4d e4	 mov	 ecx, DWORD PTR _t1$[ebp]
  0028e	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00291	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00294	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00297	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  0029d	33 45 fc	 xor	 eax, DWORD PTR _blk$[ebp+12]
  002a0	d1 c8		 ror	 eax, 1
  002a2	89 45 fc	 mov	 DWORD PTR _blk$[ebp+12], eax
  002a5	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  002a8	c1 ea 18	 shr	 edx, 24			; 00000018H
  002ab	0f b6 c2	 movzx	 eax, dl
  002ae	c1 e0 02	 shl	 eax, 2
  002b1	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  002b5	c1 e1 02	 shl	 ecx, 2
  002b8	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  002bb	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  002be	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  002c1	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  002c5	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  002c8	c1 e9 08	 shr	 ecx, 8
  002cb	0f b6 d1	 movzx	 edx, cl
  002ce	c1 e2 02	 shl	 edx, 2
  002d1	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  002d4	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  002d8	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  002db	c1 ea 10	 shr	 edx, 16			; 00000010H
  002de	0f b6 ca	 movzx	 ecx, dl
  002e1	c1 e1 02	 shl	 ecx, 2
  002e4	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  002e7	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  002eb	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  002ee	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  002f2	c1 e0 02	 shl	 eax, 2
  002f5	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  002f8	c1 e9 08	 shr	 ecx, 8
  002fb	0f b6 d1	 movzx	 edx, cl
  002fe	c1 e2 02	 shl	 edx, 2
  00301	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00304	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00307	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0030a	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  0030e	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00311	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00314	0f b6 d1	 movzx	 edx, cl
  00317	c1 e2 02	 shl	 edx, 2
  0031a	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0031d	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00321	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00324	c1 ea 18	 shr	 edx, 24			; 00000018H
  00327	0f b6 ca	 movzx	 ecx, dl
  0032a	c1 e1 02	 shl	 ecx, 2
  0032d	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00330	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00334	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00337	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  0033a	d1 c0		 rol	 eax, 1
  0033c	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  0033f	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  00342	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00345	03 8a 80 00 00
	00		 add	 ecx, DWORD PTR [edx+128]
  0034b	33 c1		 xor	 eax, ecx
  0034d	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00350	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00353	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00356	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00359	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0035c	03 90 84 00 00
	00		 add	 edx, DWORD PTR [eax+132]
  00362	33 55 f4	 xor	 edx, DWORD PTR _blk$[ebp+4]
  00365	d1 ca		 ror	 edx, 1
  00367	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  0036a	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  0036d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00370	0f b6 d1	 movzx	 edx, cl
  00373	c1 e2 02	 shl	 edx, 2
  00376	0f b6 45 f4	 movzx	 eax, BYTE PTR _blk$[ebp+4]
  0037a	c1 e0 02	 shl	 eax, 2
  0037d	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00380	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00383	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00386	33 54 86 04	 xor	 edx, DWORD PTR [esi+eax*4+4]
  0038a	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  0038d	c1 e8 08	 shr	 eax, 8
  00390	0f b6 c8	 movzx	 ecx, al
  00393	c1 e1 02	 shl	 ecx, 2
  00396	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00399	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  0039d	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  003a0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003a3	0f b6 c1	 movzx	 eax, cl
  003a6	c1 e0 02	 shl	 eax, 2
  003a9	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  003ac	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  003b0	89 55 e4	 mov	 DWORD PTR _t1$[ebp], edx
  003b3	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  003b7	c1 e2 02	 shl	 edx, 2
  003ba	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  003bd	c1 e8 08	 shr	 eax, 8
  003c0	0f b6 c8	 movzx	 ecx, al
  003c3	c1 e1 02	 shl	 ecx, 2
  003c6	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  003c9	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  003cc	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  003cf	33 54 8e 04	 xor	 edx, DWORD PTR [esi+ecx*4+4]
  003d3	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  003d6	c1 e8 10	 shr	 eax, 16			; 00000010H
  003d9	0f b6 c8	 movzx	 ecx, al
  003dc	c1 e1 02	 shl	 ecx, 2
  003df	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  003e2	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  003e6	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  003e9	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003ec	0f b6 c1	 movzx	 eax, cl
  003ef	c1 e0 02	 shl	 eax, 2
  003f2	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  003f5	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  003f9	89 55 e0	 mov	 DWORD PTR _t0$[ebp], edx
  003fc	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  003ff	d1 c2		 rol	 edx, 1
  00401	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00404	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00407	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0040a	03 41 78	 add	 eax, DWORD PTR [ecx+120]
  0040d	33 d0		 xor	 edx, eax
  0040f	89 55 f8	 mov	 DWORD PTR _blk$[ebp+8], edx
  00412	8b 55 e4	 mov	 edx, DWORD PTR _t1$[ebp]
  00415	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00418	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0041b	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  0041e	03 4a 7c	 add	 ecx, DWORD PTR [edx+124]
  00421	33 4d fc	 xor	 ecx, DWORD PTR _blk$[ebp+12]
  00424	d1 c9		 ror	 ecx, 1
  00426	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx
  00429	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  0042c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0042f	0f b6 c8	 movzx	 ecx, al
  00432	c1 e1 02	 shl	 ecx, 2
  00435	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  00439	c1 e2 02	 shl	 edx, 2
  0043c	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0043f	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00442	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00445	33 4c 96 04	 xor	 ecx, DWORD PTR [esi+edx*4+4]
  00449	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0044c	c1 ea 08	 shr	 edx, 8
  0044f	0f b6 c2	 movzx	 eax, dl
  00452	c1 e0 02	 shl	 eax, 2
  00455	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00458	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  0045c	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  0045f	c1 e8 10	 shr	 eax, 16			; 00000010H
  00462	0f b6 d0	 movzx	 edx, al
  00465	c1 e2 02	 shl	 edx, 2
  00468	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0046b	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  0046f	89 4d e4	 mov	 DWORD PTR _t1$[ebp], ecx
  00472	0f b6 4d f8	 movzx	 ecx, BYTE PTR _blk$[ebp+8]
  00476	c1 e1 02	 shl	 ecx, 2
  00479	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0047c	c1 ea 08	 shr	 edx, 8
  0047f	0f b6 c2	 movzx	 eax, dl
  00482	c1 e0 02	 shl	 eax, 2
  00485	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00488	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0048b	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  0048e	33 4c 86 04	 xor	 ecx, DWORD PTR [esi+eax*4+4]
  00492	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00495	c1 ea 10	 shr	 edx, 16			; 00000010H
  00498	0f b6 c2	 movzx	 eax, dl
  0049b	c1 e0 02	 shl	 eax, 2
  0049e	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  004a1	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  004a5	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  004a8	c1 e8 18	 shr	 eax, 24			; 00000018H
  004ab	0f b6 d0	 movzx	 edx, al
  004ae	c1 e2 02	 shl	 edx, 2
  004b1	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  004b4	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  004b8	89 4d e0	 mov	 DWORD PTR _t0$[ebp], ecx
  004bb	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  004be	d1 c1		 rol	 ecx, 1
  004c0	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  004c3	03 55 e4	 add	 edx, DWORD PTR _t1$[ebp]
  004c6	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  004c9	03 50 70	 add	 edx, DWORD PTR [eax+112]
  004cc	33 ca		 xor	 ecx, edx
  004ce	89 4d f0	 mov	 DWORD PTR _blk$[ebp], ecx
  004d1	8b 4d e4	 mov	 ecx, DWORD PTR _t1$[ebp]
  004d4	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  004d7	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  004da	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  004dd	03 41 74	 add	 eax, DWORD PTR [ecx+116]
  004e0	33 45 f4	 xor	 eax, DWORD PTR _blk$[ebp+4]
  004e3	d1 c8		 ror	 eax, 1
  004e5	89 45 f4	 mov	 DWORD PTR _blk$[ebp+4], eax
  004e8	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  004eb	c1 ea 18	 shr	 edx, 24			; 00000018H
  004ee	0f b6 c2	 movzx	 eax, dl
  004f1	c1 e0 02	 shl	 eax, 2
  004f4	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  004f8	c1 e1 02	 shl	 ecx, 2
  004fb	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  004fe	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00501	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00504	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00508	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  0050b	c1 e9 08	 shr	 ecx, 8
  0050e	0f b6 d1	 movzx	 edx, cl
  00511	c1 e2 02	 shl	 edx, 2
  00514	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00517	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  0051b	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0051e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00521	0f b6 ca	 movzx	 ecx, dl
  00524	c1 e1 02	 shl	 ecx, 2
  00527	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0052a	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0052e	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00531	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  00535	c1 e0 02	 shl	 eax, 2
  00538	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  0053b	c1 e9 08	 shr	 ecx, 8
  0053e	0f b6 d1	 movzx	 edx, cl
  00541	c1 e2 02	 shl	 edx, 2
  00544	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00547	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0054a	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0054d	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00551	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00554	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00557	0f b6 d1	 movzx	 edx, cl
  0055a	c1 e2 02	 shl	 edx, 2
  0055d	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00560	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00564	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00567	c1 ea 18	 shr	 edx, 24			; 00000018H
  0056a	0f b6 ca	 movzx	 ecx, dl
  0056d	c1 e1 02	 shl	 ecx, 2
  00570	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00573	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00577	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  0057a	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  0057d	d1 c0		 rol	 eax, 1
  0057f	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00582	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  00585	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00588	03 4a 68	 add	 ecx, DWORD PTR [edx+104]
  0058b	33 c1		 xor	 eax, ecx
  0058d	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00590	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00593	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00596	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00599	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  0059c	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  0059f	33 55 fc	 xor	 edx, DWORD PTR _blk$[ebp+12]
  005a2	d1 ca		 ror	 edx, 1
  005a4	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  005aa	c1 e9 18	 shr	 ecx, 24			; 00000018H
  005ad	0f b6 d1	 movzx	 edx, cl
  005b0	c1 e2 02	 shl	 edx, 2
  005b3	0f b6 45 fc	 movzx	 eax, BYTE PTR _blk$[ebp+12]
  005b7	c1 e0 02	 shl	 eax, 2
  005ba	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  005bd	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  005c0	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  005c3	33 54 86 04	 xor	 edx, DWORD PTR [esi+eax*4+4]
  005c7	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  005ca	c1 e8 08	 shr	 eax, 8
  005cd	0f b6 c8	 movzx	 ecx, al
  005d0	c1 e1 02	 shl	 ecx, 2
  005d3	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  005d6	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  005da	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  005dd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  005e0	0f b6 c1	 movzx	 eax, cl
  005e3	c1 e0 02	 shl	 eax, 2
  005e6	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  005e9	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  005ed	89 55 e4	 mov	 DWORD PTR _t1$[ebp], edx
  005f0	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  005f4	c1 e2 02	 shl	 edx, 2
  005f7	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  005fa	c1 e8 08	 shr	 eax, 8
  005fd	0f b6 c8	 movzx	 ecx, al
  00600	c1 e1 02	 shl	 ecx, 2
  00603	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00606	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00609	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0060c	33 54 8e 04	 xor	 edx, DWORD PTR [esi+ecx*4+4]
  00610	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00613	c1 e8 10	 shr	 eax, 16			; 00000010H
  00616	0f b6 c8	 movzx	 ecx, al
  00619	c1 e1 02	 shl	 ecx, 2
  0061c	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0061f	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00623	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00626	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00629	0f b6 c1	 movzx	 eax, cl
  0062c	c1 e0 02	 shl	 eax, 2
  0062f	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00632	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  00636	89 55 e0	 mov	 DWORD PTR _t0$[ebp], edx
  00639	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0063c	d1 c2		 rol	 edx, 1
  0063e	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00641	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00644	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00647	03 41 60	 add	 eax, DWORD PTR [ecx+96]
  0064a	33 d0		 xor	 edx, eax
  0064c	89 55 f0	 mov	 DWORD PTR _blk$[ebp], edx
  0064f	8b 55 e4	 mov	 edx, DWORD PTR _t1$[ebp]
  00652	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00655	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00658	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  0065b	03 4a 64	 add	 ecx, DWORD PTR [edx+100]
  0065e	33 4d f4	 xor	 ecx, DWORD PTR _blk$[ebp+4]
  00661	d1 c9		 ror	 ecx, 1
  00663	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx

; 508  :     i_rnd(3); i_rnd(2); i_rnd(1); i_rnd(0);

  00666	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00669	c1 e8 18	 shr	 eax, 24			; 00000018H
  0066c	0f b6 c8	 movzx	 ecx, al
  0066f	c1 e1 02	 shl	 ecx, 2
  00672	0f b6 55 f4	 movzx	 edx, BYTE PTR _blk$[ebp+4]
  00676	c1 e2 02	 shl	 edx, 2
  00679	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0067c	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0067f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00682	33 4c 96 04	 xor	 ecx, DWORD PTR [esi+edx*4+4]
  00686	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00689	c1 ea 08	 shr	 edx, 8
  0068c	0f b6 c2	 movzx	 eax, dl
  0068f	c1 e0 02	 shl	 eax, 2
  00692	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00695	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  00699	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  0069c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0069f	0f b6 d0	 movzx	 edx, al
  006a2	c1 e2 02	 shl	 edx, 2
  006a5	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  006a8	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  006ac	89 4d e4	 mov	 DWORD PTR _t1$[ebp], ecx
  006af	0f b6 4d f0	 movzx	 ecx, BYTE PTR _blk$[ebp]
  006b3	c1 e1 02	 shl	 ecx, 2
  006b6	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  006b9	c1 ea 08	 shr	 edx, 8
  006bc	0f b6 c2	 movzx	 eax, dl
  006bf	c1 e0 02	 shl	 eax, 2
  006c2	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  006c5	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  006c8	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  006cb	33 4c 86 04	 xor	 ecx, DWORD PTR [esi+eax*4+4]
  006cf	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  006d2	c1 ea 10	 shr	 edx, 16			; 00000010H
  006d5	0f b6 c2	 movzx	 eax, dl
  006d8	c1 e0 02	 shl	 eax, 2
  006db	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  006de	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  006e2	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  006e5	c1 e8 18	 shr	 eax, 24			; 00000018H
  006e8	0f b6 d0	 movzx	 edx, al
  006eb	c1 e2 02	 shl	 edx, 2
  006ee	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  006f1	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  006f5	89 4d e0	 mov	 DWORD PTR _t0$[ebp], ecx
  006f8	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  006fb	d1 c1		 rol	 ecx, 1
  006fd	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00700	03 55 e4	 add	 edx, DWORD PTR _t1$[ebp]
  00703	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00706	03 50 58	 add	 edx, DWORD PTR [eax+88]
  00709	33 ca		 xor	 ecx, edx
  0070b	89 4d f8	 mov	 DWORD PTR _blk$[ebp+8], ecx
  0070e	8b 4d e4	 mov	 ecx, DWORD PTR _t1$[ebp]
  00711	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00714	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00717	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  0071a	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  0071d	33 45 fc	 xor	 eax, DWORD PTR _blk$[ebp+12]
  00720	d1 c8		 ror	 eax, 1
  00722	89 45 fc	 mov	 DWORD PTR _blk$[ebp+12], eax
  00725	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00728	c1 ea 18	 shr	 edx, 24			; 00000018H
  0072b	0f b6 c2	 movzx	 eax, dl
  0072e	c1 e0 02	 shl	 eax, 2
  00731	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00735	c1 e1 02	 shl	 ecx, 2
  00738	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0073b	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0073e	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00741	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00745	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00748	c1 e9 08	 shr	 ecx, 8
  0074b	0f b6 d1	 movzx	 edx, cl
  0074e	c1 e2 02	 shl	 edx, 2
  00751	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00754	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00758	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0075b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0075e	0f b6 ca	 movzx	 ecx, dl
  00761	c1 e1 02	 shl	 ecx, 2
  00764	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00767	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  0076b	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  0076e	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00772	c1 e0 02	 shl	 eax, 2
  00775	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00778	c1 e9 08	 shr	 ecx, 8
  0077b	0f b6 d1	 movzx	 edx, cl
  0077e	c1 e2 02	 shl	 edx, 2
  00781	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00784	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00787	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0078a	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  0078e	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00791	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00794	0f b6 d1	 movzx	 edx, cl
  00797	c1 e2 02	 shl	 edx, 2
  0079a	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0079d	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  007a1	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  007a4	c1 ea 18	 shr	 edx, 24			; 00000018H
  007a7	0f b6 ca	 movzx	 ecx, dl
  007aa	c1 e1 02	 shl	 ecx, 2
  007ad	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  007b0	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  007b4	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  007b7	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  007ba	d1 c0		 rol	 eax, 1
  007bc	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  007bf	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  007c2	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  007c5	03 4a 50	 add	 ecx, DWORD PTR [edx+80]
  007c8	33 c1		 xor	 eax, ecx
  007ca	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  007cd	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  007d0	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  007d3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  007d6	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  007d9	03 50 54	 add	 edx, DWORD PTR [eax+84]
  007dc	33 55 f4	 xor	 edx, DWORD PTR _blk$[ebp+4]
  007df	d1 ca		 ror	 edx, 1
  007e1	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  007e4	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  007e7	c1 e9 18	 shr	 ecx, 24			; 00000018H
  007ea	0f b6 d1	 movzx	 edx, cl
  007ed	c1 e2 02	 shl	 edx, 2
  007f0	0f b6 45 f4	 movzx	 eax, BYTE PTR _blk$[ebp+4]
  007f4	c1 e0 02	 shl	 eax, 2
  007f7	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  007fa	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  007fd	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00800	33 54 86 04	 xor	 edx, DWORD PTR [esi+eax*4+4]
  00804	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00807	c1 e8 08	 shr	 eax, 8
  0080a	0f b6 c8	 movzx	 ecx, al
  0080d	c1 e1 02	 shl	 ecx, 2
  00810	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00813	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00817	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  0081a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0081d	0f b6 c1	 movzx	 eax, cl
  00820	c1 e0 02	 shl	 eax, 2
  00823	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00826	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  0082a	89 55 e4	 mov	 DWORD PTR _t1$[ebp], edx
  0082d	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  00831	c1 e2 02	 shl	 edx, 2
  00834	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  00837	c1 e8 08	 shr	 eax, 8
  0083a	0f b6 c8	 movzx	 ecx, al
  0083d	c1 e1 02	 shl	 ecx, 2
  00840	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00843	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00846	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00849	33 54 8e 04	 xor	 edx, DWORD PTR [esi+ecx*4+4]
  0084d	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  00850	c1 e8 10	 shr	 eax, 16			; 00000010H
  00853	0f b6 c8	 movzx	 ecx, al
  00856	c1 e1 02	 shl	 ecx, 2
  00859	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0085c	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00860	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00863	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00866	0f b6 c1	 movzx	 eax, cl
  00869	c1 e0 02	 shl	 eax, 2
  0086c	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  0086f	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  00873	89 55 e0	 mov	 DWORD PTR _t0$[ebp], edx
  00876	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00879	d1 c2		 rol	 edx, 1
  0087b	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  0087e	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00881	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00884	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  00887	33 d0		 xor	 edx, eax
  00889	89 55 f8	 mov	 DWORD PTR _blk$[ebp+8], edx
  0088c	8b 55 e4	 mov	 edx, DWORD PTR _t1$[ebp]
  0088f	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00892	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00895	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00898	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  0089b	33 4d fc	 xor	 ecx, DWORD PTR _blk$[ebp+12]
  0089e	d1 c9		 ror	 ecx, 1
  008a0	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx
  008a3	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  008a6	c1 e8 18	 shr	 eax, 24			; 00000018H
  008a9	0f b6 c8	 movzx	 ecx, al
  008ac	c1 e1 02	 shl	 ecx, 2
  008af	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  008b3	c1 e2 02	 shl	 edx, 2
  008b6	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  008b9	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  008bc	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  008bf	33 4c 96 04	 xor	 ecx, DWORD PTR [esi+edx*4+4]
  008c3	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  008c6	c1 ea 08	 shr	 edx, 8
  008c9	0f b6 c2	 movzx	 eax, dl
  008cc	c1 e0 02	 shl	 eax, 2
  008cf	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  008d2	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  008d6	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  008d9	c1 e8 10	 shr	 eax, 16			; 00000010H
  008dc	0f b6 d0	 movzx	 edx, al
  008df	c1 e2 02	 shl	 edx, 2
  008e2	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  008e5	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  008e9	89 4d e4	 mov	 DWORD PTR _t1$[ebp], ecx
  008ec	0f b6 4d f8	 movzx	 ecx, BYTE PTR _blk$[ebp+8]
  008f0	c1 e1 02	 shl	 ecx, 2
  008f3	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  008f6	c1 ea 08	 shr	 edx, 8
  008f9	0f b6 c2	 movzx	 eax, dl
  008fc	c1 e0 02	 shl	 eax, 2
  008ff	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00902	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00905	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00908	33 4c 86 04	 xor	 ecx, DWORD PTR [esi+eax*4+4]
  0090c	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0090f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00912	0f b6 c2	 movzx	 eax, dl
  00915	c1 e0 02	 shl	 eax, 2
  00918	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  0091b	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  0091f	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00922	c1 e8 18	 shr	 eax, 24			; 00000018H
  00925	0f b6 d0	 movzx	 edx, al
  00928	c1 e2 02	 shl	 edx, 2
  0092b	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  0092e	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  00932	89 4d e0	 mov	 DWORD PTR _t0$[ebp], ecx
  00935	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  00938	d1 c1		 rol	 ecx, 1
  0093a	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  0093d	03 55 e4	 add	 edx, DWORD PTR _t1$[ebp]
  00940	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00943	03 50 40	 add	 edx, DWORD PTR [eax+64]
  00946	33 ca		 xor	 ecx, edx
  00948	89 4d f0	 mov	 DWORD PTR _blk$[ebp], ecx
  0094b	8b 4d e4	 mov	 ecx, DWORD PTR _t1$[ebp]
  0094e	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00951	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00954	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00957	03 41 44	 add	 eax, DWORD PTR [ecx+68]
  0095a	33 45 f4	 xor	 eax, DWORD PTR _blk$[ebp+4]
  0095d	d1 c8		 ror	 eax, 1
  0095f	89 45 f4	 mov	 DWORD PTR _blk$[ebp+4], eax
  00962	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00965	c1 ea 18	 shr	 edx, 24			; 00000018H
  00968	0f b6 c2	 movzx	 eax, dl
  0096b	c1 e0 02	 shl	 eax, 2
  0096e	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00972	c1 e1 02	 shl	 ecx, 2
  00975	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00978	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  0097b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0097e	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00982	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  00985	c1 e9 08	 shr	 ecx, 8
  00988	0f b6 d1	 movzx	 edx, cl
  0098b	c1 e2 02	 shl	 edx, 2
  0098e	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00991	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00995	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00998	c1 ea 10	 shr	 edx, 16			; 00000010H
  0099b	0f b6 ca	 movzx	 ecx, dl
  0099e	c1 e1 02	 shl	 ecx, 2
  009a1	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  009a4	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  009a8	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  009ab	0f b6 45 f0	 movzx	 eax, BYTE PTR _blk$[ebp]
  009af	c1 e0 02	 shl	 eax, 2
  009b2	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  009b5	c1 e9 08	 shr	 ecx, 8
  009b8	0f b6 d1	 movzx	 edx, cl
  009bb	c1 e2 02	 shl	 edx, 2
  009be	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  009c1	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  009c4	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  009c7	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  009cb	8b 4d f0	 mov	 ecx, DWORD PTR _blk$[ebp]
  009ce	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009d1	0f b6 d1	 movzx	 edx, cl
  009d4	c1 e2 02	 shl	 edx, 2
  009d7	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  009da	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  009de	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  009e1	c1 ea 18	 shr	 edx, 24			; 00000018H
  009e4	0f b6 ca	 movzx	 ecx, dl
  009e7	c1 e1 02	 shl	 ecx, 2
  009ea	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  009ed	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  009f1	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  009f4	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  009f7	d1 c0		 rol	 eax, 1
  009f9	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  009fc	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  009ff	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00a02	03 4a 38	 add	 ecx, DWORD PTR [edx+56]
  00a05	33 c1		 xor	 eax, ecx
  00a07	89 45 f8	 mov	 DWORD PTR _blk$[ebp+8], eax
  00a0a	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00a0d	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00a10	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00a13	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00a16	03 50 3c	 add	 edx, DWORD PTR [eax+60]
  00a19	33 55 fc	 xor	 edx, DWORD PTR _blk$[ebp+12]
  00a1c	d1 ca		 ror	 edx, 1
  00a1e	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00a21	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00a24	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00a27	0f b6 d1	 movzx	 edx, cl
  00a2a	c1 e2 02	 shl	 edx, 2
  00a2d	0f b6 45 fc	 movzx	 eax, BYTE PTR _blk$[ebp+12]
  00a31	c1 e0 02	 shl	 eax, 2
  00a34	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00a37	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00a3a	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00a3d	33 54 86 04	 xor	 edx, DWORD PTR [esi+eax*4+4]
  00a41	8b 45 fc	 mov	 eax, DWORD PTR _blk$[ebp+12]
  00a44	c1 e8 08	 shr	 eax, 8
  00a47	0f b6 c8	 movzx	 ecx, al
  00a4a	c1 e1 02	 shl	 ecx, 2
  00a4d	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00a50	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00a54	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00a57	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a5a	0f b6 c1	 movzx	 eax, cl
  00a5d	c1 e0 02	 shl	 eax, 2
  00a60	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00a63	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  00a67	89 55 e4	 mov	 DWORD PTR _t1$[ebp], edx
  00a6a	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  00a6e	c1 e2 02	 shl	 edx, 2
  00a71	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00a74	c1 e8 08	 shr	 eax, 8
  00a77	0f b6 c8	 movzx	 ecx, al
  00a7a	c1 e1 02	 shl	 ecx, 2
  00a7d	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00a80	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00a83	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00a86	33 54 8e 04	 xor	 edx, DWORD PTR [esi+ecx*4+4]
  00a8a	8b 45 f8	 mov	 eax, DWORD PTR _blk$[ebp+8]
  00a8d	c1 e8 10	 shr	 eax, 16			; 00000010H
  00a90	0f b6 c8	 movzx	 ecx, al
  00a93	c1 e1 02	 shl	 ecx, 2
  00a96	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00a99	33 54 88 08	 xor	 edx, DWORD PTR [eax+ecx*4+8]
  00a9d	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00aa0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00aa3	0f b6 c1	 movzx	 eax, cl
  00aa6	c1 e0 02	 shl	 eax, 2
  00aa9	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00aac	33 54 81 0c	 xor	 edx, DWORD PTR [ecx+eax*4+12]
  00ab0	89 55 e0	 mov	 DWORD PTR _t0$[ebp], edx
  00ab3	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00ab6	d1 c2		 rol	 edx, 1
  00ab8	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00abb	03 45 e4	 add	 eax, DWORD PTR _t1$[ebp]
  00abe	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00ac1	03 41 30	 add	 eax, DWORD PTR [ecx+48]
  00ac4	33 d0		 xor	 edx, eax
  00ac6	89 55 f0	 mov	 DWORD PTR _blk$[ebp], edx
  00ac9	8b 55 e4	 mov	 edx, DWORD PTR _t1$[ebp]
  00acc	8b 45 e0	 mov	 eax, DWORD PTR _t0$[ebp]
  00acf	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00ad2	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00ad5	03 4a 34	 add	 ecx, DWORD PTR [edx+52]
  00ad8	33 4d f4	 xor	 ecx, DWORD PTR _blk$[ebp+4]
  00adb	d1 c9		 ror	 ecx, 1
  00add	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx
  00ae0	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00ae3	c1 e8 18	 shr	 eax, 24			; 00000018H
  00ae6	0f b6 c8	 movzx	 ecx, al
  00ae9	c1 e1 02	 shl	 ecx, 2
  00aec	0f b6 55 f4	 movzx	 edx, BYTE PTR _blk$[ebp+4]
  00af0	c1 e2 02	 shl	 edx, 2
  00af3	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00af6	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00af9	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00afc	33 4c 96 04	 xor	 ecx, DWORD PTR [esi+edx*4+4]
  00b00	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00b03	c1 ea 08	 shr	 edx, 8
  00b06	0f b6 c2	 movzx	 eax, dl
  00b09	c1 e0 02	 shl	 eax, 2
  00b0c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00b0f	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  00b13	8b 45 f4	 mov	 eax, DWORD PTR _blk$[ebp+4]
  00b16	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b19	0f b6 d0	 movzx	 edx, al
  00b1c	c1 e2 02	 shl	 edx, 2
  00b1f	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00b22	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  00b26	89 4d e4	 mov	 DWORD PTR _t1$[ebp], ecx
  00b29	0f b6 4d f0	 movzx	 ecx, BYTE PTR _blk$[ebp]
  00b2d	c1 e1 02	 shl	 ecx, 2
  00b30	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00b33	c1 ea 08	 shr	 edx, 8
  00b36	0f b6 c2	 movzx	 eax, dl
  00b39	c1 e0 02	 shl	 eax, 2
  00b3c	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00b3f	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00b42	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00b45	33 4c 86 04	 xor	 ecx, DWORD PTR [esi+eax*4+4]
  00b49	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00b4c	c1 ea 10	 shr	 edx, 16			; 00000010H
  00b4f	0f b6 c2	 movzx	 eax, dl
  00b52	c1 e0 02	 shl	 eax, 2
  00b55	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00b58	33 4c 82 08	 xor	 ecx, DWORD PTR [edx+eax*4+8]
  00b5c	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  00b5f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00b62	0f b6 d0	 movzx	 edx, al
  00b65	c1 e2 02	 shl	 edx, 2
  00b68	8b 45 ec	 mov	 eax, DWORD PTR _mk_tab$[ebp]
  00b6b	33 4c 90 0c	 xor	 ecx, DWORD PTR [eax+edx*4+12]
  00b6f	89 4d e0	 mov	 DWORD PTR _t0$[ebp], ecx
  00b72	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00b75	d1 c1		 rol	 ecx, 1
  00b77	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00b7a	03 55 e4	 add	 edx, DWORD PTR _t1$[ebp]
  00b7d	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00b80	03 50 28	 add	 edx, DWORD PTR [eax+40]
  00b83	33 ca		 xor	 ecx, edx
  00b85	89 4d f8	 mov	 DWORD PTR _blk$[ebp+8], ecx
  00b88	8b 4d e4	 mov	 ecx, DWORD PTR _t1$[ebp]
  00b8b	8b 55 e0	 mov	 edx, DWORD PTR _t0$[ebp]
  00b8e	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00b91	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00b94	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  00b97	33 45 fc	 xor	 eax, DWORD PTR _blk$[ebp+12]
  00b9a	d1 c8		 ror	 eax, 1
  00b9c	89 45 fc	 mov	 DWORD PTR _blk$[ebp+12], eax
  00b9f	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00ba2	c1 ea 18	 shr	 edx, 24			; 00000018H
  00ba5	0f b6 c2	 movzx	 eax, dl
  00ba8	c1 e0 02	 shl	 eax, 2
  00bab	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00baf	c1 e1 02	 shl	 ecx, 2
  00bb2	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00bb5	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00bb8	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00bbb	33 44 8e 04	 xor	 eax, DWORD PTR [esi+ecx*4+4]
  00bbf	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00bc2	c1 e9 08	 shr	 ecx, 8
  00bc5	0f b6 d1	 movzx	 edx, cl
  00bc8	c1 e2 02	 shl	 edx, 2
  00bcb	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00bce	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00bd2	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00bd5	c1 ea 10	 shr	 edx, 16			; 00000010H
  00bd8	0f b6 ca	 movzx	 ecx, dl
  00bdb	c1 e1 02	 shl	 ecx, 2
  00bde	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00be1	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00be5	89 45 e4	 mov	 DWORD PTR _t1$[ebp], eax
  00be8	0f b6 45 f8	 movzx	 eax, BYTE PTR _blk$[ebp+8]
  00bec	c1 e0 02	 shl	 eax, 2
  00bef	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00bf2	c1 e9 08	 shr	 ecx, 8
  00bf5	0f b6 d1	 movzx	 edx, cl
  00bf8	c1 e2 02	 shl	 edx, 2
  00bfb	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00bfe	8b 75 ec	 mov	 esi, DWORD PTR _mk_tab$[ebp]
  00c01	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00c04	33 44 96 04	 xor	 eax, DWORD PTR [esi+edx*4+4]
  00c08	8b 4d f8	 mov	 ecx, DWORD PTR _blk$[ebp+8]
  00c0b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c0e	0f b6 d1	 movzx	 edx, cl
  00c11	c1 e2 02	 shl	 edx, 2
  00c14	8b 4d ec	 mov	 ecx, DWORD PTR _mk_tab$[ebp]
  00c17	33 44 91 08	 xor	 eax, DWORD PTR [ecx+edx*4+8]
  00c1b	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00c1e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00c21	0f b6 ca	 movzx	 ecx, dl
  00c24	c1 e1 02	 shl	 ecx, 2
  00c27	8b 55 ec	 mov	 edx, DWORD PTR _mk_tab$[ebp]
  00c2a	33 44 8a 0c	 xor	 eax, DWORD PTR [edx+ecx*4+12]
  00c2e	89 45 e0	 mov	 DWORD PTR _t0$[ebp], eax
  00c31	8b 45 f0	 mov	 eax, DWORD PTR _blk$[ebp]
  00c34	d1 c0		 rol	 eax, 1
  00c36	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00c39	03 4d e4	 add	 ecx, DWORD PTR _t1$[ebp]
  00c3c	8b 55 e8	 mov	 edx, DWORD PTR _l_key$[ebp]
  00c3f	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
  00c42	33 c1		 xor	 eax, ecx
  00c44	89 45 f0	 mov	 DWORD PTR _blk$[ebp], eax
  00c47	8b 45 e4	 mov	 eax, DWORD PTR _t1$[ebp]
  00c4a	8b 4d e0	 mov	 ecx, DWORD PTR _t0$[ebp]
  00c4d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00c50	8b 45 e8	 mov	 eax, DWORD PTR _l_key$[ebp]
  00c53	03 50 24	 add	 edx, DWORD PTR [eax+36]
  00c56	33 55 f4	 xor	 edx, DWORD PTR _blk$[ebp+4]
  00c59	d1 ca		 ror	 edx, 1
  00c5b	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx

; 509  : 
; 510  :     out_blk[0] = LE32(blk[2] ^ l_key[0]);

  00c5e	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c61	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00c64	33 11		 xor	 edx, DWORD PTR [ecx]
  00c66	8b 45 10	 mov	 eax, DWORD PTR _out_blk$[ebp]
  00c69	89 10		 mov	 DWORD PTR [eax], edx

; 511  :     out_blk[1] = LE32(blk[3] ^ l_key[1]);

  00c6b	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c6e	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00c71	33 51 04	 xor	 edx, DWORD PTR [ecx+4]
  00c74	8b 45 10	 mov	 eax, DWORD PTR _out_blk$[ebp]
  00c77	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 512  :     out_blk[2] = LE32(blk[0] ^ l_key[2]);

  00c7a	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c7d	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00c80	33 51 08	 xor	 edx, DWORD PTR [ecx+8]
  00c83	8b 45 10	 mov	 eax, DWORD PTR _out_blk$[ebp]
  00c86	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 513  :     out_blk[3] = LE32(blk[1] ^ l_key[3]); 

  00c89	8b 4d e8	 mov	 ecx, DWORD PTR _l_key$[ebp]
  00c8c	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00c8f	33 51 0c	 xor	 edx, DWORD PTR [ecx+12]
  00c92	8b 45 10	 mov	 eax, DWORD PTR _out_blk$[ebp]
  00c95	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 514  : };

  00c98	5e		 pop	 esi
  00c99	8b e5		 mov	 esp, ebp
  00c9b	5d		 pop	 ebp
  00c9c	c2 0c 00	 ret	 12			; 0000000cH
_twofish_decrypt@12 ENDP
_TEXT	ENDS
END
