; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\cipherShed\src\Crypto\Sha1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sha1_compile
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\crypto\sha1.c
;	COMDAT _sha1_compile
_TEXT	SEGMENT
_v1$ = -16						; size = 4
_v2$ = -12						; size = 4
_v0$ = -8						; size = 4
tv2480 = -4						; size = 4
_v4$ = -4						; size = 4
tv2598 = 8						; size = 4
_v3$ = 8						; size = 4
_ctx$ = 8						; size = 4
_sha1_compile PROC					; COMDAT

; 141  : {   sha1_32t    *w = ctx->wbuf;

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	8b 44 24 14	 mov	 eax, DWORD PTR _ctx$[esp+12]

; 142  : 
; 143  : #ifdef ARRAY
; 144  :     sha1_32t    v[5];
; 145  :     memcpy(v, ctx->hash, 5 * sizeof(sha1_32t));
; 146  : #else
; 147  :     sha1_32t    v0, v1, v2, v3, v4;
; 148  :     v0 = ctx->hash[0]; v1 = ctx->hash[1];
; 149  :     v2 = ctx->hash[2]; v3 = ctx->hash[3];

  00007	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	53		 push	 ebx
  0000e	55		 push	 ebp
  0000f	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 150  :     v4 = ctx->hash[4];
; 151  : #endif
; 152  : 
; 153  : #define hf(i)   w[i]
; 154  : 
; 155  :     five_cycle(v, ch, 0x5a827999,  0);

  00017	8b ea		 mov	 ebp, edx
  00019	33 ef		 xor	 ebp, edi
  0001b	23 eb		 and	 ebp, ebx
  0001d	33 ea		 xor	 ebp, edx
  0001f	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00022	8b f1		 mov	 esi, ecx
  00024	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00027	03 f5		 add	 esi, ebp
  00029	03 70 18	 add	 esi, DWORD PTR [eax+24]
  0002c	c1 cb 02	 ror	 ebx, 2
  0002f	8d 94 16 99 79
	82 5a		 lea	 edx, DWORD PTR [esi+edx+1518500249]
  00036	8b f7		 mov	 esi, edi
  00038	33 f3		 xor	 esi, ebx
  0003a	23 f1		 and	 esi, ecx
  0003c	33 f7		 xor	 esi, edi
  0003e	8b ea		 mov	 ebp, edx
  00040	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  00043	03 ee		 add	 ebp, esi
  00045	03 68 20	 add	 ebp, DWORD PTR [eax+32]
  00048	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0004b	8d b4 2e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+ebp+1518500249]
  00052	c1 c9 02	 ror	 ecx, 2
  00055	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00059	33 d9		 xor	 ebx, ecx
  0005b	23 da		 and	 ebx, edx
  0005d	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00061	8b ee		 mov	 ebp, esi
  00063	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  00066	03 68 24	 add	 ebp, DWORD PTR [eax+36]
  00069	89 4c 24 18	 mov	 DWORD PTR _v0$[esp+32], ecx
  0006d	03 dd		 add	 ebx, ebp
  0006f	c1 ca 02	 ror	 edx, 2
  00072	8d bc 1f 99 79
	82 5a		 lea	 edi, DWORD PTR [edi+ebx+1518500249]
  00079	8b ea		 mov	 ebp, edx
  0007b	33 e9		 xor	 ebp, ecx
  0007d	23 ee		 and	 ebp, esi
  0007f	33 e9		 xor	 ebp, ecx
  00081	8b 4c 24 10	 mov	 ecx, DWORD PTR _v1$[esp+32]
  00085	8b df		 mov	 ebx, edi
  00087	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  0008a	03 dd		 add	 ebx, ebp
  0008c	03 58 28	 add	 ebx, DWORD PTR [eax+40]
  0008f	c1 ce 02	 ror	 esi, 2
  00092	8d 9c 19 99 79
	82 5a		 lea	 ebx, DWORD PTR [ecx+ebx+1518500249]
  00099	8b ea		 mov	 ebp, edx
  0009b	33 ee		 xor	 ebp, esi
  0009d	23 ef		 and	 ebp, edi
  0009f	33 ea		 xor	 ebp, edx
  000a1	8b cb		 mov	 ecx, ebx
  000a3	c1 c9 1b	 ror	 ecx, 27			; 0000001bH
  000a6	03 cd		 add	 ecx, ebp
  000a8	03 48 2c	 add	 ecx, DWORD PTR [eax+44]
  000ab	8b 6c 24 18	 mov	 ebp, DWORD PTR _v0$[esp+32]
  000af	c1 cf 02	 ror	 edi, 2
  000b2	8d 8c 29 99 79
	82 5a		 lea	 ecx, DWORD PTR [ecx+ebp+1518500249]
  000b9	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi

; 156  :     five_cycle(v, ch, 0x5a827999,  5);

  000bd	33 f7		 xor	 esi, edi
  000bf	23 f3		 and	 esi, ebx
  000c1	33 74 24 24	 xor	 esi, DWORD PTR _v3$[esp+28]
  000c5	8b e9		 mov	 ebp, ecx
  000c7	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  000ca	03 ee		 add	 ebp, esi
  000cc	03 68 30	 add	 ebp, DWORD PTR [eax+48]
  000cf	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  000d3	8b 74 24 14	 mov	 esi, DWORD PTR _v2$[esp+32]
  000d7	8d 94 2a 99 79
	82 5a		 lea	 edx, DWORD PTR [edx+ebp+1518500249]
  000de	c1 cb 02	 ror	 ebx, 2
  000e1	8b ee		 mov	 ebp, esi
  000e3	8b fa		 mov	 edi, edx
  000e5	33 eb		 xor	 ebp, ebx
  000e7	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  000ea	23 e9		 and	 ebp, ecx
  000ec	33 ee		 xor	 ebp, esi
  000ee	03 fd		 add	 edi, ebp
  000f0	03 78 34	 add	 edi, DWORD PTR [eax+52]
  000f3	8b 74 24 24	 mov	 esi, DWORD PTR _v3$[esp+28]
  000f7	c1 c9 02	 ror	 ecx, 2
  000fa	8d b4 3e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edi+1518500249]
  00101	8b eb		 mov	 ebp, ebx
  00103	33 e9		 xor	 ebp, ecx
  00105	23 ea		 and	 ebp, edx
  00107	33 eb		 xor	 ebp, ebx
  00109	8b fe		 mov	 edi, esi
  0010b	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0010e	03 fd		 add	 edi, ebp
  00110	03 78 38	 add	 edi, DWORD PTR [eax+56]
  00113	8b 6c 24 14	 mov	 ebp, DWORD PTR _v2$[esp+32]
  00117	8d bc 2f 99 79
	82 5a		 lea	 edi, DWORD PTR [edi+ebp+1518500249]
  0011e	c1 ca 02	 ror	 edx, 2
  00121	89 54 24 1c	 mov	 DWORD PTR _v4$[esp+32], edx
  00125	33 d1		 xor	 edx, ecx
  00127	23 d6		 and	 edx, esi
  00129	33 d1		 xor	 edx, ecx
  0012b	8b ef		 mov	 ebp, edi
  0012d	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  00130	03 68 3c	 add	 ebp, DWORD PTR [eax+60]
  00133	89 4c 24 18	 mov	 DWORD PTR _v0$[esp+32], ecx
  00137	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v4$[esp+32]
  0013b	03 d5		 add	 edx, ebp
  0013d	8d 9c 13 99 79
	82 5a		 lea	 ebx, DWORD PTR [ebx+edx+1518500249]
  00144	c1 ce 02	 ror	 esi, 2
  00147	8b e9		 mov	 ebp, ecx
  00149	33 ee		 xor	 ebp, esi
  0014b	23 ef		 and	 ebp, edi
  0014d	33 e9		 xor	 ebp, ecx
  0014f	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  00153	8b d3		 mov	 edx, ebx
  00155	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00158	03 d5		 add	 edx, ebp
  0015a	03 50 40	 add	 edx, DWORD PTR [eax+64]
  0015d	c1 cf 02	 ror	 edi, 2
  00160	8d 8c 11 99 79
	82 5a		 lea	 ecx, DWORD PTR [ecx+edx+1518500249]

; 157  :     five_cycle(v, ch, 0x5a827999, 10);

  00167	8b d1		 mov	 edx, ecx
  00169	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0016c	8b ee		 mov	 ebp, esi
  0016e	33 ef		 xor	 ebp, edi
  00170	23 eb		 and	 ebp, ebx
  00172	33 ee		 xor	 ebp, esi
  00174	03 d5		 add	 edx, ebp
  00176	03 50 44	 add	 edx, DWORD PTR [eax+68]
  00179	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v4$[esp+32]
  0017d	c1 cb 02	 ror	 ebx, 2
  00180	8d 94 2a 99 79
	82 5a		 lea	 edx, DWORD PTR [edx+ebp+1518500249]
  00187	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  0018b	33 fb		 xor	 edi, ebx
  0018d	23 f9		 and	 edi, ecx
  0018f	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00193	8b df		 mov	 ebx, edi
  00195	8b 7c 24 14	 mov	 edi, DWORD PTR _v2$[esp+32]
  00199	33 df		 xor	 ebx, edi
  0019b	8b ea		 mov	 ebp, edx
  0019d	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  001a0	03 eb		 add	 ebp, ebx
  001a2	03 68 48	 add	 ebp, DWORD PTR [eax+72]
  001a5	c1 c9 02	 ror	 ecx, 2
  001a8	8d b4 2e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+ebp+1518500249]
  001af	8b 6c 24 10	 mov	 ebp, DWORD PTR _v1$[esp+32]
  001b3	8b d9		 mov	 ebx, ecx
  001b5	33 eb		 xor	 ebp, ebx
  001b7	23 ea		 and	 ebp, edx
  001b9	33 6c 24 10	 xor	 ebp, DWORD PTR _v1$[esp+32]
  001bd	8b ce		 mov	 ecx, esi
  001bf	c1 c9 1b	 ror	 ecx, 27			; 0000001bH
  001c2	03 cd		 add	 ecx, ebp
  001c4	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  001c7	c1 ca 02	 ror	 edx, 2
  001ca	8d bc 0f 99 79
	82 5a		 lea	 edi, DWORD PTR [edi+ecx+1518500249]
  001d1	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001d4	8b ef		 mov	 ebp, edi
  001d6	89 5c 24 18	 mov	 DWORD PTR _v0$[esp+32], ebx
  001da	89 54 24 1c	 mov	 DWORD PTR _v4$[esp+32], edx
  001de	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  001e1	03 e9		 add	 ebp, ecx
  001e3	33 d3		 xor	 edx, ebx

; 158  :     one_cycle(v,0,1,2,3,4, ch, 0x5a827999, hf(15)); \
; 159  : 
; 160  : #undef  hf
; 161  : #define hf(i) (w[(i) & 15] = rotl32(                    \
; 162  :                  w[((i) + 13) & 15] ^ w[((i) + 8) & 15] \
; 163  :                ^ w[((i) +  2) & 15] ^ w[(i) & 15], 1))
; 164  : 
; 165  :     one_cycle(v,4,0,1,2,3, ch, 0x5a827999, hf(16));

  001e5	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  001e8	23 d6		 and	 edx, esi
  001ea	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  001ed	33 d3		 xor	 edx, ebx
  001ef	03 d5		 add	 edx, ebp
  001f1	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v4$[esp+32]
  001f5	8b 5c 24 10	 mov	 ebx, DWORD PTR _v1$[esp+32]
  001f9	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  001fc	c1 ce 02	 ror	 esi, 2
  001ff	33 ee		 xor	 ebp, esi
  00201	23 ef		 and	 ebp, edi
  00203	33 6c 24 1c	 xor	 ebp, DWORD PTR _v4$[esp+32]
  00207	8d 94 13 99 79
	82 5a		 lea	 edx, DWORD PTR [ebx+edx+1518500249]
  0020e	8b da		 mov	 ebx, edx
  00210	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00213	03 dd		 add	 ebx, ebp
  00215	03 58 54	 add	 ebx, DWORD PTR [eax+84]
  00218	c1 cf 02	 ror	 edi, 2
  0021b	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  0021f	8b 74 24 18	 mov	 esi, DWORD PTR _v0$[esp+32]
  00223	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  00227	33 ef		 xor	 ebp, edi
  00229	23 ea		 and	 ebp, edx
  0022b	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  0022f	8d b4 1e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+ebx+1518500249]
  00236	8b de		 mov	 ebx, esi
  00238	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  0023b	03 dd		 add	 ebx, ebp
  0023d	03 58 58	 add	 ebx, DWORD PTR [eax+88]
  00240	c1 ca 02	 ror	 edx, 2
  00243	d1 c1		 rol	 ecx, 1
  00245	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00248	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  0024c	8b 7c 24 1c	 mov	 edi, DWORD PTR _v4$[esp+32]
  00250	89 4c 24 1c	 mov	 DWORD PTR tv2480[esp+32], ecx
  00254	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  00258	8b e9		 mov	 ebp, ecx
  0025a	33 ea		 xor	 ebp, edx
  0025c	8d bc 1f 99 79
	82 5a		 lea	 edi, DWORD PTR [edi+ebx+1518500249]
  00263	23 ee		 and	 ebp, esi
  00265	33 e9		 xor	 ebp, ecx
  00267	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  0026b	8b df		 mov	 ebx, edi
  0026d	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00270	03 5c 24 1c	 add	 ebx, DWORD PTR tv2480[esp+32]
  00274	89 54 24 10	 mov	 DWORD PTR _v1$[esp+32], edx
  00278	03 eb		 add	 ebp, ebx
  0027a	8d 9c 29 99 79
	82 5a		 lea	 ebx, DWORD PTR [ecx+ebp+1518500249]

; 166  :     one_cycle(v,3,4,0,1,2, ch, 0x5a827999, hf(17));

  00281	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00284	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00287	c1 ce 02	 ror	 esi, 2
  0028a	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0028d	33 d6		 xor	 edx, esi
  0028f	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00292	23 d7		 and	 edx, edi
  00294	33 54 24 10	 xor	 edx, DWORD PTR _v1$[esp+32]
  00298	d1 c1		 rol	 ecx, 1
  0029a	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0029d	8b eb		 mov	 ebp, ebx
  0029f	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  002a2	03 e9		 add	 ebp, ecx
  002a4	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  002a8	03 d5		 add	 edx, ebp
  002aa	8d 94 11 99 79
	82 5a		 lea	 edx, DWORD PTR [ecx+edx+1518500249]

; 167  :     one_cycle(v,2,3,4,0,1, ch, 0x5a827999, hf(18));

  002b1	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  002b4	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  002b7	c1 cf 02	 ror	 edi, 2
  002ba	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  002bd	89 7c 24 1c	 mov	 DWORD PTR _v4$[esp+32], edi
  002c1	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  002c4	33 fe		 xor	 edi, esi
  002c6	d1 c1		 rol	 ecx, 1
  002c8	8b ea		 mov	 ebp, edx
  002ca	23 fb		 and	 edi, ebx
  002cc	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  002cf	33 fe		 xor	 edi, esi
  002d1	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  002d5	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  002d8	03 e9		 add	 ebp, ecx
  002da	8b 4c 24 10	 mov	 ecx, DWORD PTR _v1$[esp+32]
  002de	03 fd		 add	 edi, ebp
  002e0	8d b4 39 99 79
	82 5a		 lea	 esi, DWORD PTR [ecx+edi+1518500249]

; 168  :     one_cycle(v,1,2,3,4,0, ch, 0x5a827999, hf(19));

  002e7	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  002ea	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  002ed	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v4$[esp+32]
  002f1	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  002f4	c1 cb 02	 ror	 ebx, 2
  002f7	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  002fa	33 eb		 xor	 ebp, ebx
  002fc	d1 c1		 rol	 ecx, 1
  002fe	23 ea		 and	 ebp, edx
  00300	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00303	89 5c 24 24	 mov	 DWORD PTR _v3$[esp+28], ebx
  00307	8b 5c 24 1c	 mov	 ebx, DWORD PTR _v4$[esp+32]
  0030b	33 eb		 xor	 ebp, ebx
  0030d	8b fe		 mov	 edi, esi
  0030f	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00312	03 f9		 add	 edi, ecx
  00314	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  00318	03 ef		 add	 ebp, edi
  0031a	8d bc 29 99 79
	82 5a		 lea	 edi, DWORD PTR [ecx+ebp+1518500249]

; 169  : 
; 170  :     five_cycle(v, parity, 0x6ed9eba1,  20);

  00321	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00324	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00327	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  0032b	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  0032e	c1 ca 02	 ror	 edx, 2
  00331	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00334	89 54 24 14	 mov	 DWORD PTR _v2$[esp+32], edx
  00338	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  0033c	d1 c1		 rol	 ecx, 1
  0033e	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00341	8b d7		 mov	 edx, edi
  00343	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00346	03 d1		 add	 edx, ecx
  00348	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0034b	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  0034e	33 ee		 xor	 ebp, esi
  00350	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00353	03 ea		 add	 ebp, edx
  00355	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00358	c1 ce 02	 ror	 esi, 2
  0035b	d1 c1		 rol	 ecx, 1
  0035d	8d 94 2b a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ebx+ebp+1859775393]
  00364	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00368	89 74 24 10	 mov	 DWORD PTR _v1$[esp+32], esi
  0036c	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00370	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00373	33 df		 xor	 ebx, edi
  00375	8b f2		 mov	 esi, edx
  00377	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0037a	03 f1		 add	 esi, ecx
  0037c	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00380	03 de		 add	 ebx, esi
  00382	8d b4 19 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+ebx+1859775393]
  00389	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0038c	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  0038f	c1 cf 02	 ror	 edi, 2
  00392	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00395	89 7c 24 18	 mov	 DWORD PTR _v0$[esp+32], edi
  00399	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0039c	8b da		 mov	 ebx, edx
  0039e	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  003a2	d1 c1		 rol	 ecx, 1
  003a4	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  003a8	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  003ab	8b fe		 mov	 edi, esi
  003ad	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  003b0	03 f9		 add	 edi, ecx
  003b2	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  003b6	03 df		 add	 ebx, edi
  003b8	8d bc 19 a1 eb
	d9 6e		 lea	 edi, DWORD PTR [ecx+ebx+1859775393]
  003bf	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  003c2	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  003c5	c1 ca 02	 ror	 edx, 2
  003c8	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  003cb	8b df		 mov	 ebx, edi
  003cd	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  003d0	d1 c1		 rol	 ecx, 1
  003d2	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  003d5	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  003d8	03 d9		 add	 ebx, ecx
  003da	8b 4c 24 10	 mov	 ecx, DWORD PTR _v1$[esp+32]
  003de	8b ea		 mov	 ebp, edx
  003e0	33 ee		 xor	 ebp, esi
  003e2	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  003e6	03 eb		 add	 ebp, ebx
  003e8	8d 9c 29 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [ecx+ebp+1859775393]
  003ef	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003f2	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  003f5	c1 ce 02	 ror	 esi, 2
  003f8	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  003fb	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  003ff	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00402	8b f3		 mov	 esi, ebx
  00404	d1 c1		 rol	 ecx, 1
  00406	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00409	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0040c	03 f1		 add	 esi, ecx
  0040e	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  00412	8b ea		 mov	 ebp, edx
  00414	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00418	33 ef		 xor	 ebp, edi
  0041a	03 ee		 add	 ebp, esi
  0041c	8d b4 29 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+ebp+1859775393]

; 171  :     five_cycle(v, parity, 0x6ed9eba1,  25);

  00423	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00426	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00429	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  0042d	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00430	c1 cf 02	 ror	 edi, 2
  00433	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00436	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  0043a	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  0043e	d1 c1		 rol	 ecx, 1
  00440	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00443	33 eb		 xor	 ebp, ebx
  00445	8b fe		 mov	 edi, esi
  00447	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0044a	03 f9		 add	 edi, ecx
  0044c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0044f	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00452	03 ef		 add	 ebp, edi
  00454	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00457	c1 cb 02	 ror	 ebx, 2
  0045a	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  0045d	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00461	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00465	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00469	d1 c1		 rol	 ecx, 1
  0046b	33 de		 xor	 ebx, esi
  0046d	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00470	8d 94 2a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [edx+ebp+1859775393]
  00477	8b fa		 mov	 edi, edx
  00479	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0047c	03 f9		 add	 edi, ecx
  0047e	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00482	03 df		 add	 ebx, edi
  00484	8d bc 19 a1 eb
	d9 6e		 lea	 edi, DWORD PTR [ecx+ebx+1859775393]
  0048b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0048e	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00491	c1 ce 02	 ror	 esi, 2
  00494	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00497	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  0049b	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0049e	8b da		 mov	 ebx, edx
  004a0	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  004a4	d1 c1		 rol	 ecx, 1
  004a6	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  004aa	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  004ad	8b f7		 mov	 esi, edi
  004af	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  004b2	03 f1		 add	 esi, ecx
  004b4	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  004b8	03 de		 add	 ebx, esi
  004ba	8d b4 19 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+ebx+1859775393]
  004c1	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  004c4	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  004c7	c1 ca 02	 ror	 edx, 2
  004ca	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  004cd	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  004d0	d1 c1		 rol	 ecx, 1
  004d2	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  004d5	8b de		 mov	 ebx, esi
  004d7	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  004da	03 d9		 add	 ebx, ecx
  004dc	8b 4c 24 10	 mov	 ecx, DWORD PTR _v1$[esp+32]
  004e0	8b ea		 mov	 ebp, edx
  004e2	33 ef		 xor	 ebp, edi
  004e4	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  004e8	03 eb		 add	 ebp, ebx
  004ea	8d 9c 29 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [ecx+ebp+1859775393]
  004f1	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  004f4	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  004f7	c1 cf 02	 ror	 edi, 2
  004fa	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  004fd	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  00501	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00504	8b fb		 mov	 edi, ebx
  00506	d1 c1		 rol	 ecx, 1
  00508	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  0050b	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0050e	03 f9		 add	 edi, ecx
  00510	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  00514	8b ea		 mov	 ebp, edx
  00516	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  0051a	33 ee		 xor	 ebp, esi
  0051c	03 ef		 add	 ebp, edi
  0051e	8d bc 29 a1 eb
	d9 6e		 lea	 edi, DWORD PTR [ecx+ebp+1859775393]

; 172  :     five_cycle(v, parity, 0x6ed9eba1,  30);

  00525	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00528	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  0052b	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  0052f	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00532	c1 ce 02	 ror	 esi, 2
  00535	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00538	89 74 24 14	 mov	 DWORD PTR _v2$[esp+32], esi
  0053c	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00540	d1 c1		 rol	 ecx, 1
  00542	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00545	33 eb		 xor	 ebp, ebx
  00547	8b f7		 mov	 esi, edi
  00549	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0054c	03 f1		 add	 esi, ecx
  0054e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00551	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00554	03 ee		 add	 ebp, esi
  00556	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00559	c1 cb 02	 ror	 ebx, 2
  0055c	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  0055f	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00563	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00567	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  0056b	d1 c1		 rol	 ecx, 1
  0056d	33 df		 xor	 ebx, edi
  0056f	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  00572	8d 94 2a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [edx+ebp+1859775393]
  00579	8b f2		 mov	 esi, edx
  0057b	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0057e	03 f1		 add	 esi, ecx
  00580	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00584	03 de		 add	 ebx, esi
  00586	8d b4 19 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+ebx+1859775393]
  0058d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00590	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00593	c1 cf 02	 ror	 edi, 2
  00596	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00599	89 7c 24 18	 mov	 DWORD PTR _v0$[esp+32], edi
  0059d	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  005a0	8b da		 mov	 ebx, edx
  005a2	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  005a6	d1 c1		 rol	 ecx, 1
  005a8	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  005ac	8b fe		 mov	 edi, esi
  005ae	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  005b1	03 f9		 add	 edi, ecx
  005b3	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  005b6	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  005ba	03 df		 add	 ebx, edi
  005bc	8d bc 19 a1 eb
	d9 6e		 lea	 edi, DWORD PTR [ecx+ebx+1859775393]
  005c3	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  005c6	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  005c9	c1 ca 02	 ror	 edx, 2
  005cc	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  005cf	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  005d2	d1 c1		 rol	 ecx, 1
  005d4	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  005d7	8b df		 mov	 ebx, edi
  005d9	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  005dc	03 d9		 add	 ebx, ecx
  005de	8b 4c 24 10	 mov	 ecx, DWORD PTR _v1$[esp+32]
  005e2	8b ea		 mov	 ebp, edx
  005e4	33 ee		 xor	 ebp, esi
  005e6	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  005ea	03 eb		 add	 ebp, ebx
  005ec	8d 9c 29 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [ecx+ebp+1859775393]
  005f3	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  005f6	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  005f9	c1 ce 02	 ror	 esi, 2
  005fc	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  005ff	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  00603	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00606	8b f3		 mov	 esi, ebx
  00608	d1 c1		 rol	 ecx, 1
  0060a	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  0060d	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00610	03 f1		 add	 esi, ecx
  00612	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  00616	8b ea		 mov	 ebp, edx
  00618	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  0061c	33 ef		 xor	 ebp, edi
  0061e	03 ee		 add	 ebp, esi
  00620	8d b4 29 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+ebp+1859775393]

; 173  :     five_cycle(v, parity, 0x6ed9eba1,  35);

  00627	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0062a	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  0062d	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  00631	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00634	c1 cf 02	 ror	 edi, 2
  00637	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0063a	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  0063e	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00642	d1 c1		 rol	 ecx, 1
  00644	33 eb		 xor	 ebp, ebx
  00646	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00649	8b fe		 mov	 edi, esi
  0064b	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0064e	03 f9		 add	 edi, ecx
  00650	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00653	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00656	03 ef		 add	 ebp, edi
  00658	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  0065b	c1 cb 02	 ror	 ebx, 2
  0065e	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00661	8d bc 2a a1 eb
	d9 6e		 lea	 edi, DWORD PTR [edx+ebp+1859775393]
  00668	d1 c1		 rol	 ecx, 1
  0066a	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  0066e	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00672	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00676	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00679	33 de		 xor	 ebx, esi
  0067b	8b d7		 mov	 edx, edi
  0067d	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00680	03 d1		 add	 edx, ecx
  00682	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00686	03 da		 add	 ebx, edx
  00688	8d 9c 19 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [ecx+ebx+1859775393]
  0068f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00692	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00695	c1 ce 02	 ror	 esi, 2
  00698	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  0069b	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  0069f	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  006a2	8b 54 24 18	 mov	 edx, DWORD PTR _v0$[esp+32]
  006a6	d1 c1		 rol	 ecx, 1
  006a8	8b ef		 mov	 ebp, edi
  006aa	33 6c 24 10	 xor	 ebp, DWORD PTR _v1$[esp+32]
  006ae	8b f3		 mov	 esi, ebx
  006b0	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  006b3	33 ea		 xor	 ebp, edx
  006b5	03 f1		 add	 esi, ecx
  006b7	03 ee		 add	 ebp, esi
  006b9	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  006bc	8b 4c 24 14	 mov	 ecx, DWORD PTR _v2$[esp+32]
  006c0	c1 cf 02	 ror	 edi, 2
  006c3	8d ac 29 a1 eb
	d9 6e		 lea	 ebp, DWORD PTR [ecx+ebp+1859775393]
  006ca	89 7c 24 1c	 mov	 DWORD PTR _v4$[esp+32], edi
  006ce	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  006d1	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  006d4	33 fb		 xor	 edi, ebx
  006d6	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  006d9	33 fa		 xor	 edi, edx
  006db	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  006de	8b 54 24 10	 mov	 edx, DWORD PTR _v1$[esp+32]
  006e2	d1 c1		 rol	 ecx, 1
  006e4	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  006e7	8b f5		 mov	 esi, ebp
  006e9	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  006ec	03 f1		 add	 esi, ecx
  006ee	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  006f1	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  006f4	03 fe		 add	 edi, esi
  006f6	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  006f9	8d 94 3a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [edx+edi+1859775393]
  00700	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00703	8b 7c 24 1c	 mov	 edi, DWORD PTR _v4$[esp+32]
  00707	c1 cb 02	 ror	 ebx, 2
  0070a	d1 c1		 rol	 ecx, 1
  0070c	33 fb		 xor	 edi, ebx
  0070e	33 fd		 xor	 edi, ebp
  00710	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00713	8b f2		 mov	 esi, edx
  00715	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00718	03 f1		 add	 esi, ecx
  0071a	8b 4c 24 18	 mov	 ecx, DWORD PTR _v0$[esp+32]
  0071e	03 fe		 add	 edi, esi
  00720	8d b4 39 a1 eb
	d9 6e		 lea	 esi, DWORD PTR [ecx+edi+1859775393]

; 174  : 
; 175  :     five_cycle(v, maj, 0x8f1bbcdc,  40);

  00727	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0072a	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  0072d	c1 cd 02	 ror	 ebp, 2
  00730	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00733	89 6c 24 14	 mov	 DWORD PTR _v2$[esp+32], ebp
  00737	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  0073a	33 ea		 xor	 ebp, edx
  0073c	23 eb		 and	 ebp, ebx
  0073e	d1 c1		 rol	 ecx, 1
  00740	89 5c 24 24	 mov	 DWORD PTR _v3$[esp+28], ebx
  00744	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00748	23 da		 and	 ebx, edx
  0074a	0b eb		 or	 ebp, ebx
  0074c	03 e9		 add	 ebp, ecx
  0074e	03 6c 24 1c	 add	 ebp, DWORD PTR _v4$[esp+32]
  00752	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00755	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00758	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  0075b	8b fe		 mov	 edi, esi
  0075d	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00760	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00763	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00766	c1 ca 02	 ror	 edx, 2
  00769	89 54 24 10	 mov	 DWORD PTR _v1$[esp+32], edx
  0076d	33 d6		 xor	 edx, esi
  0076f	23 54 24 14	 and	 edx, DWORD PTR _v2$[esp+32]
  00773	d1 c1		 rol	 ecx, 1
  00775	8d bc 2f dc bc
	1b 8f		 lea	 edi, DWORD PTR [edi+ebp-1894007588]
  0077c	8b 6c 24 10	 mov	 ebp, DWORD PTR _v1$[esp+32]
  00780	23 ee		 and	 ebp, esi
  00782	0b d5		 or	 edx, ebp
  00784	03 d1		 add	 edx, ecx
  00786	03 54 24 24	 add	 edx, DWORD PTR _v3$[esp+28]
  0078a	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  0078d	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00790	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00793	8b df		 mov	 ebx, edi
  00795	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00798	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  0079b	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  0079e	8d 94 1a dc bc
	1b 8f		 lea	 edx, DWORD PTR [edx+ebx-1894007588]
  007a5	c1 ce 02	 ror	 esi, 2
  007a8	d1 c1		 rol	 ecx, 1
  007aa	8b df		 mov	 ebx, edi
  007ac	89 54 24 24	 mov	 DWORD PTR _v3$[esp+28], edx
  007b0	33 de		 xor	 ebx, esi
  007b2	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  007b5	23 5c 24 10	 and	 ebx, DWORD PTR _v1$[esp+32]
  007b9	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  007bd	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  007c0	8b ef		 mov	 ebp, edi
  007c2	23 ee		 and	 ebp, esi
  007c4	0b dd		 or	 ebx, ebp
  007c6	03 d9		 add	 ebx, ecx
  007c8	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  007cc	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  007cf	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  007d2	c1 cf 02	 ror	 edi, 2
  007d5	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  007d8	8b ef		 mov	 ebp, edi
  007da	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  007de	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  007e1	23 ee		 and	 ebp, esi
  007e3	d1 c1		 rol	 ecx, 1
  007e5	8d 94 13 dc bc
	1b 8f		 lea	 edx, DWORD PTR [ebx+edx-1894007588]
  007ec	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  007ef	8b f7		 mov	 esi, edi
  007f1	23 74 24 24	 and	 esi, DWORD PTR _v3$[esp+28]
  007f5	8b da		 mov	 ebx, edx
  007f7	0b ee		 or	 ebp, esi
  007f9	03 e9		 add	 ebp, ecx
  007fb	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  007ff	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00803	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00806	c1 c9 02	 ror	 ecx, 2
  00809	8b f1		 mov	 esi, ecx
  0080b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0080e	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00811	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  00815	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00818	33 f2		 xor	 esi, edx
  0081a	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  0081d	23 f7		 and	 esi, edi
  0081f	d1 c1		 rol	 ecx, 1
  00821	89 7c 24 1c	 mov	 DWORD PTR _v4$[esp+32], edi
  00825	8b 7c 24 24	 mov	 edi, DWORD PTR _v3$[esp+28]
  00829	23 fa		 and	 edi, edx
  0082b	0b f7		 or	 esi, edi
  0082d	03 f1		 add	 esi, ecx
  0082f	03 74 24 18	 add	 esi, DWORD PTR _v0$[esp+32]
  00833	8d 9c 2b dc bc
	1b 8f		 lea	 ebx, DWORD PTR [ebx+ebp-1894007588]
  0083a	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 176  :     five_cycle(v, maj, 0x8f1bbcdc,  45);

  0083d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00840	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  00843	8b eb		 mov	 ebp, ebx
  00845	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00848	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  0084b	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  0084e	c1 ca 02	 ror	 edx, 2
  00851	89 54 24 14	 mov	 DWORD PTR _v2$[esp+32], edx
  00855	33 d3		 xor	 edx, ebx
  00857	23 54 24 24	 and	 edx, DWORD PTR _v3$[esp+28]
  0085b	8d b4 2e dc bc
	1b 8f		 lea	 esi, DWORD PTR [esi+ebp-1894007588]
  00862	8b 6c 24 14	 mov	 ebp, DWORD PTR _v2$[esp+32]
  00866	23 eb		 and	 ebp, ebx
  00868	d1 c1		 rol	 ecx, 1
  0086a	0b d5		 or	 edx, ebp
  0086c	03 d1		 add	 edx, ecx
  0086e	03 54 24 1c	 add	 edx, DWORD PTR _v4$[esp+32]
  00872	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00875	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00878	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  0087b	8b fe		 mov	 edi, esi
  0087d	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00880	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00883	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00886	c1 cb 02	 ror	 ebx, 2
  00889	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  0088d	8b 6c 24 10	 mov	 ebp, DWORD PTR _v1$[esp+32]
  00891	33 de		 xor	 ebx, esi
  00893	23 5c 24 14	 and	 ebx, DWORD PTR _v2$[esp+32]
  00897	8d 94 3a dc bc
	1b 8f		 lea	 edx, DWORD PTR [edx+edi-1894007588]
  0089e	d1 c1		 rol	 ecx, 1
  008a0	23 ee		 and	 ebp, esi
  008a2	0b dd		 or	 ebx, ebp
  008a4	8b fa		 mov	 edi, edx
  008a6	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  008a9	03 d9		 add	 ebx, ecx
  008ab	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  008af	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  008b2	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  008b9	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  008bd	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  008c0	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  008c3	c1 ce 02	 ror	 esi, 2
  008c6	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  008c9	8b da		 mov	 ebx, edx
  008cb	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  008ce	33 de		 xor	 ebx, esi
  008d0	23 5c 24 10	 and	 ebx, DWORD PTR _v1$[esp+32]
  008d4	d1 c1		 rol	 ecx, 1
  008d6	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  008d9	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  008dc	8b ea		 mov	 ebp, edx
  008de	23 ee		 and	 ebp, esi
  008e0	0b dd		 or	 ebx, ebp
  008e2	03 d9		 add	 ebx, ecx
  008e4	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  008e8	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  008eb	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  008ee	c1 ca 02	 ror	 edx, 2
  008f1	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  008f4	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  008f8	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  008fb	8b ea		 mov	 ebp, edx
  008fd	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00901	d1 c1		 rol	 ecx, 1
  00903	23 ee		 and	 ebp, esi
  00905	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00908	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  0090f	8b f2		 mov	 esi, edx
  00911	23 74 24 24	 and	 esi, DWORD PTR _v3$[esp+28]
  00915	8b df		 mov	 ebx, edi
  00917	0b ee		 or	 ebp, esi
  00919	03 e9		 add	 ebp, ecx
  0091b	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  0091f	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00923	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00926	c1 c9 02	 ror	 ecx, 2
  00929	8b f1		 mov	 esi, ecx
  0092b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0092e	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00931	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  00935	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00938	33 f7		 xor	 esi, edi
  0093a	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  0093d	23 f2		 and	 esi, edx
  0093f	d1 c1		 rol	 ecx, 1
  00941	89 54 24 1c	 mov	 DWORD PTR _v4$[esp+32], edx
  00945	8b 54 24 24	 mov	 edx, DWORD PTR _v3$[esp+28]
  00949	23 d7		 and	 edx, edi
  0094b	0b f2		 or	 esi, edx
  0094d	03 f1		 add	 esi, ecx
  0094f	03 74 24 18	 add	 esi, DWORD PTR _v0$[esp+32]
  00953	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 177  :     five_cycle(v, maj, 0x8f1bbcdc,  50);

  00956	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00959	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  0095c	8d 9c 2b dc bc
	1b 8f		 lea	 ebx, DWORD PTR [ebx+ebp-1894007588]
  00963	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00966	8b eb		 mov	 ebp, ebx
  00968	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  0096b	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  0096e	c1 cf 02	 ror	 edi, 2
  00971	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  00975	33 fb		 xor	 edi, ebx
  00977	23 7c 24 24	 and	 edi, DWORD PTR _v3$[esp+28]
  0097b	8d 94 2e dc bc
	1b 8f		 lea	 edx, DWORD PTR [esi+ebp-1894007588]
  00982	8b 6c 24 14	 mov	 ebp, DWORD PTR _v2$[esp+32]
  00986	d1 c1		 rol	 ecx, 1
  00988	23 eb		 and	 ebp, ebx
  0098a	0b fd		 or	 edi, ebp
  0098c	03 f9		 add	 edi, ecx
  0098e	03 7c 24 1c	 add	 edi, DWORD PTR _v4$[esp+32]
  00992	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00995	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00998	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  0099b	8b f2		 mov	 esi, edx
  0099d	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  009a0	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  009a3	c1 cb 02	 ror	 ebx, 2
  009a6	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  009a9	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  009b0	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  009b4	33 da		 xor	 ebx, edx
  009b6	23 5c 24 14	 and	 ebx, DWORD PTR _v2$[esp+32]
  009ba	8b 6c 24 10	 mov	 ebp, DWORD PTR _v1$[esp+32]
  009be	23 ea		 and	 ebp, edx
  009c0	d1 c1		 rol	 ecx, 1
  009c2	0b dd		 or	 ebx, ebp
  009c4	03 d9		 add	 ebx, ecx
  009c6	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  009ca	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  009cd	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  009d0	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  009d3	8b fe		 mov	 edi, esi
  009d5	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  009d8	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  009db	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  009de	c1 ca 02	 ror	 edx, 2
  009e1	d1 c1		 rol	 ecx, 1
  009e3	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  009ea	8b de		 mov	 ebx, esi
  009ec	33 da		 xor	 ebx, edx
  009ee	23 5c 24 10	 and	 ebx, DWORD PTR _v1$[esp+32]
  009f2	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  009f5	8b ee		 mov	 ebp, esi
  009f7	23 ea		 and	 ebp, edx
  009f9	0b dd		 or	 ebx, ebp
  009fb	03 d9		 add	 ebx, ecx
  009fd	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00a01	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00a04	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00a07	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  00a0b	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00a0e	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00a11	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00a14	c1 ce 02	 ror	 esi, 2
  00a17	d1 c1		 rol	 ecx, 1
  00a19	8b ee		 mov	 ebp, esi
  00a1b	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00a1f	89 54 24 18	 mov	 DWORD PTR _v0$[esp+32], edx
  00a23	23 ea		 and	 ebp, edx
  00a25	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00a28	8b d6		 mov	 edx, esi
  00a2a	23 54 24 24	 and	 edx, DWORD PTR _v3$[esp+28]
  00a2e	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  00a35	0b ea		 or	 ebp, edx
  00a37	03 e9		 add	 ebp, ecx
  00a39	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00a3d	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00a41	8b df		 mov	 ebx, edi
  00a43	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00a46	c1 c9 02	 ror	 ecx, 2
  00a49	8b d1		 mov	 edx, ecx
  00a4b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00a4e	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00a51	89 54 24 24	 mov	 DWORD PTR _v3$[esp+28], edx
  00a55	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00a58	33 d7		 xor	 edx, edi
  00a5a	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00a5d	23 d6		 and	 edx, esi
  00a5f	d1 c1		 rol	 ecx, 1
  00a61	89 74 24 1c	 mov	 DWORD PTR _v4$[esp+32], esi
  00a65	8b 74 24 24	 mov	 esi, DWORD PTR _v3$[esp+28]
  00a69	23 f7		 and	 esi, edi
  00a6b	0b d6		 or	 edx, esi
  00a6d	03 d1		 add	 edx, ecx
  00a6f	03 54 24 18	 add	 edx, DWORD PTR _v0$[esp+32]
  00a73	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 178  :     five_cycle(v, maj, 0x8f1bbcdc,  55);

  00a76	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00a79	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00a7c	8d 9c 2b dc bc
	1b 8f		 lea	 ebx, DWORD PTR [ebx+ebp-1894007588]
  00a83	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00a86	8b eb		 mov	 ebp, ebx
  00a88	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00a8b	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  00a8e	c1 cf 02	 ror	 edi, 2
  00a91	8d 94 2a dc bc
	1b 8f		 lea	 edx, DWORD PTR [edx+ebp-1894007588]
  00a98	d1 c1		 rol	 ecx, 1
  00a9a	8b f2		 mov	 esi, edx
  00a9c	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  00aa0	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00aa3	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00aa6	33 fb		 xor	 edi, ebx
  00aa8	23 7c 24 24	 and	 edi, DWORD PTR _v3$[esp+28]
  00aac	8b 6c 24 14	 mov	 ebp, DWORD PTR _v2$[esp+32]
  00ab0	23 eb		 and	 ebp, ebx
  00ab2	0b fd		 or	 edi, ebp
  00ab4	03 f9		 add	 edi, ecx
  00ab6	03 7c 24 1c	 add	 edi, DWORD PTR _v4$[esp+32]
  00aba	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00abd	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00ac0	c1 cb 02	 ror	 ebx, 2
  00ac3	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00ac6	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00aca	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00acd	8b 6c 24 10	 mov	 ebp, DWORD PTR _v1$[esp+32]
  00ad1	33 da		 xor	 ebx, edx
  00ad3	23 5c 24 14	 and	 ebx, DWORD PTR _v2$[esp+32]
  00ad7	23 ea		 and	 ebp, edx
  00ad9	0b dd		 or	 ebx, ebp
  00adb	d1 c1		 rol	 ecx, 1
  00add	03 d9		 add	 ebx, ecx
  00adf	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  00ae3	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00ae6	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00ae9	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00aec	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00af3	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00af6	8b fe		 mov	 edi, esi
  00af8	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00afb	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00afe	c1 ca 02	 ror	 edx, 2
  00b01	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  00b08	d1 c1		 rol	 ecx, 1
  00b0a	8b de		 mov	 ebx, esi
  00b0c	33 da		 xor	 ebx, edx
  00b0e	23 5c 24 10	 and	 ebx, DWORD PTR _v1$[esp+32]
  00b12	8b ee		 mov	 ebp, esi
  00b14	23 ea		 and	 ebp, edx
  00b16	0b dd		 or	 ebx, ebp
  00b18	03 d9		 add	 ebx, ecx
  00b1a	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00b1e	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00b21	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00b24	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00b27	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  00b2b	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00b2e	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00b31	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00b34	c1 ce 02	 ror	 esi, 2
  00b37	8b ee		 mov	 ebp, esi
  00b39	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00b3d	89 54 24 18	 mov	 DWORD PTR _v0$[esp+32], edx
  00b41	23 ea		 and	 ebp, edx
  00b43	d1 c1		 rol	 ecx, 1
  00b45	8b d6		 mov	 edx, esi
  00b47	23 54 24 24	 and	 edx, DWORD PTR _v3$[esp+28]
  00b4b	8d bc 3b dc bc
	1b 8f		 lea	 edi, DWORD PTR [ebx+edi-1894007588]
  00b52	0b ea		 or	 ebp, edx
  00b54	03 e9		 add	 ebp, ecx
  00b56	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00b5a	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00b5d	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00b61	8b df		 mov	 ebx, edi
  00b63	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00b66	c1 c9 02	 ror	 ecx, 2
  00b69	8b d1		 mov	 edx, ecx
  00b6b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00b6e	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00b71	89 54 24 24	 mov	 DWORD PTR _v3$[esp+28], edx
  00b75	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00b78	33 d7		 xor	 edx, edi
  00b7a	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00b7d	23 d6		 and	 edx, esi
  00b7f	89 74 24 1c	 mov	 DWORD PTR _v4$[esp+32], esi
  00b83	8b 74 24 24	 mov	 esi, DWORD PTR _v3$[esp+28]
  00b87	8d 9c 2b dc bc
	1b 8f		 lea	 ebx, DWORD PTR [ebx+ebp-1894007588]
  00b8e	23 f7		 and	 esi, edi
  00b90	d1 c1		 rol	 ecx, 1
  00b92	8b eb		 mov	 ebp, ebx
  00b94	0b d6		 or	 edx, esi
  00b96	c1 cd 1b	 ror	 ebp, 27			; 0000001bH
  00b99	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00b9c	03 d1		 add	 edx, ecx
  00b9e	03 54 24 18	 add	 edx, DWORD PTR _v0$[esp+32]

; 179  : 
; 180  :     five_cycle(v, parity, 0xca62c1d6,  60);

  00ba2	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ba5	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00ba8	8d 94 2a dc bc
	1b 8f		 lea	 edx, DWORD PTR [edx+ebp-1894007588]
  00baf	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00bb2	c1 cf 02	 ror	 edi, 2
  00bb5	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00bb8	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  00bbc	8b 7c 24 24	 mov	 edi, DWORD PTR _v3$[esp+28]
  00bc0	d1 c1		 rol	 ecx, 1
  00bc2	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00bc5	8b ef		 mov	 ebp, edi
  00bc7	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00bcb	8b f2		 mov	 esi, edx
  00bcd	33 eb		 xor	 ebp, ebx
  00bcf	03 e9		 add	 ebp, ecx
  00bd1	03 6c 24 1c	 add	 ebp, DWORD PTR _v4$[esp+32]
  00bd5	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00bd8	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  00bdb	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00bde	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00be1	c1 cb 02	 ror	 ebx, 2
  00be4	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00be7	8d b4 2e d6 c1
	62 ca		 lea	 esi, DWORD PTR [esi+ebp-899497514]
  00bee	8b 6c 24 14	 mov	 ebp, DWORD PTR _v2$[esp+32]
  00bf2	d1 c1		 rol	 ecx, 1
  00bf4	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00bf8	33 6c 24 10	 xor	 ebp, DWORD PTR _v1$[esp+32]
  00bfc	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00bff	33 ea		 xor	 ebp, edx
  00c01	03 e9		 add	 ebp, ecx
  00c03	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00c06	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00c09	03 ef		 add	 ebp, edi
  00c0b	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00c0e	8b de		 mov	 ebx, esi
  00c10	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00c13	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00c16	8d bc 2b d6 c1
	62 ca		 lea	 edi, DWORD PTR [ebx+ebp-899497514]
  00c1d	c1 ca 02	 ror	 edx, 2
  00c20	d1 c1		 rol	 ecx, 1
  00c22	89 54 24 18	 mov	 DWORD PTR _v0$[esp+32], edx
  00c26	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00c29	8b de		 mov	 ebx, esi
  00c2b	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00c2f	8b d7		 mov	 edx, edi
  00c31	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  00c35	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00c38	03 d9		 add	 ebx, ecx
  00c3a	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00c3e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00c41	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00c44	c1 ce 02	 ror	 esi, 2
  00c47	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00c4a	8b ee		 mov	 ebp, esi
  00c4c	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00c4f	33 ef		 xor	 ebp, edi
  00c51	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  00c55	d1 c1		 rol	 ecx, 1
  00c57	03 e9		 add	 ebp, ecx
  00c59	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00c5d	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  00c60	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00c63	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00c66	8d 94 13 d6 c1
	62 ca		 lea	 edx, DWORD PTR [ebx+edx-899497514]
  00c6d	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00c70	8b da		 mov	 ebx, edx
  00c72	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00c75	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00c78	8d 9c 2b d6 c1
	62 ca		 lea	 ebx, DWORD PTR [ebx+ebp-899497514]
  00c7f	c1 cf 02	 ror	 edi, 2
  00c82	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  00c86	8b ee		 mov	 ebp, esi
  00c88	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00c8c	d1 c1		 rol	 ecx, 1
  00c8e	33 ea		 xor	 ebp, edx
  00c90	8b fb		 mov	 edi, ebx
  00c92	03 e9		 add	 ebp, ecx
  00c94	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00c97	03 6c 24 18	 add	 ebp, DWORD PTR _v0$[esp+32]
  00c9b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 181  :     five_cycle(v, parity, 0xca62c1d6,  65);

  00c9e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ca1	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00ca4	8d bc 2f d6 c1
	62 ca		 lea	 edi, DWORD PTR [edi+ebp-899497514]
  00cab	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00cae	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  00cb2	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00cb5	c1 ca 02	 ror	 edx, 2
  00cb8	d1 c1		 rol	 ecx, 1
  00cba	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00cbd	89 54 24 14	 mov	 DWORD PTR _v2$[esp+32], edx
  00cc1	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00cc5	8b d7		 mov	 edx, edi
  00cc7	33 eb		 xor	 ebp, ebx
  00cc9	03 e9		 add	 ebp, ecx
  00ccb	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00cce	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00cd1	03 ee		 add	 ebp, esi
  00cd3	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00cd6	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00cd9	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00cdc	c1 cb 02	 ror	 ebx, 2
  00cdf	d1 c1		 rol	 ecx, 1
  00ce1	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00ce5	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00ce9	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00ced	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00cf0	33 df		 xor	 ebx, edi
  00cf2	03 d9		 add	 ebx, ecx
  00cf4	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  00cf8	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00cfb	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00cfe	8d 94 2a d6 c1
	62 ca		 lea	 edx, DWORD PTR [edx+ebp-899497514]
  00d05	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00d08	8b f2		 mov	 esi, edx
  00d0a	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00d0d	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d10	8d b4 33 d6 c1
	62 ca		 lea	 esi, DWORD PTR [ebx+esi-899497514]
  00d17	c1 cf 02	 ror	 edi, 2
  00d1a	d1 c1		 rol	 ecx, 1
  00d1c	89 7c 24 18	 mov	 DWORD PTR _v0$[esp+32], edi
  00d20	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00d23	8b da		 mov	 ebx, edx
  00d25	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00d29	8b fe		 mov	 edi, esi
  00d2b	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  00d2f	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00d32	03 d9		 add	 ebx, ecx
  00d34	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00d38	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00d3b	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00d3e	c1 ca 02	 ror	 edx, 2
  00d41	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00d44	8b ea		 mov	 ebp, edx
  00d46	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00d49	33 ee		 xor	 ebp, esi
  00d4b	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  00d4f	d1 c1		 rol	 ecx, 1
  00d51	03 e9		 add	 ebp, ecx
  00d53	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00d57	8d bc 3b d6 c1
	62 ca		 lea	 edi, DWORD PTR [ebx+edi-899497514]
  00d5e	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00d61	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00d64	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00d67	8b df		 mov	 ebx, edi
  00d69	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00d6c	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00d6f	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00d72	c1 ce 02	 ror	 esi, 2
  00d75	8d 9c 2b d6 c1
	62 ca		 lea	 ebx, DWORD PTR [ebx+ebp-899497514]
  00d7c	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  00d80	8b ea		 mov	 ebp, edx
  00d82	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00d86	d1 c1		 rol	 ecx, 1
  00d88	33 ef		 xor	 ebp, edi
  00d8a	03 e9		 add	 ebp, ecx
  00d8c	03 6c 24 18	 add	 ebp, DWORD PTR _v0$[esp+32]
  00d90	8b f3		 mov	 esi, ebx
  00d92	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d95	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00d98	8d b4 2e d6 c1
	62 ca		 lea	 esi, DWORD PTR [esi+ebp-899497514]
  00d9f	c1 cf 02	 ror	 edi, 2

; 182  :     five_cycle(v, parity, 0xca62c1d6,  70);

  00da2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00da5	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00da8	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  00dac	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00daf	89 7c 24 14	 mov	 DWORD PTR _v2$[esp+32], edi
  00db3	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00db6	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00dba	d1 c1		 rol	 ecx, 1
  00dbc	33 eb		 xor	 ebp, ebx
  00dbe	03 e9		 add	 ebp, ecx
  00dc0	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00dc3	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00dc6	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00dc9	03 ea		 add	 ebp, edx
  00dcb	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00dce	8b fe		 mov	 edi, esi
  00dd0	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00dd3	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00dd6	c1 cb 02	 ror	 ebx, 2
  00dd9	d1 c1		 rol	 ecx, 1
  00ddb	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00ddf	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00de3	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00de7	8d 94 2f d6 c1
	62 ca		 lea	 edx, DWORD PTR [edi+ebp-899497514]
  00dee	33 de		 xor	 ebx, esi
  00df0	03 d9		 add	 ebx, ecx
  00df2	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  00df6	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00df9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00dfc	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00dff	8b fa		 mov	 edi, edx
  00e01	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00e04	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00e07	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00e0a	8d bc 3b d6 c1
	62 ca		 lea	 edi, DWORD PTR [ebx+edi-899497514]
  00e11	c1 ce 02	 ror	 esi, 2
  00e14	d1 c1		 rol	 ecx, 1
  00e16	89 74 24 18	 mov	 DWORD PTR _v0$[esp+32], esi
  00e1a	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00e1d	8b da		 mov	 ebx, edx
  00e1f	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00e23	8b f7		 mov	 esi, edi
  00e25	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  00e29	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00e2c	03 d9		 add	 ebx, ecx
  00e2e	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00e32	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00e35	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00e38	c1 ca 02	 ror	 edx, 2
  00e3b	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00e3e	8b ea		 mov	 ebp, edx
  00e40	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00e43	33 ef		 xor	 ebp, edi
  00e45	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  00e49	d1 c1		 rol	 ecx, 1
  00e4b	03 e9		 add	 ebp, ecx
  00e4d	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00e51	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00e54	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00e57	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00e5a	8d b4 33 d6 c1
	62 ca		 lea	 esi, DWORD PTR [ebx+esi-899497514]
  00e61	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00e64	8b de		 mov	 ebx, esi
  00e66	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00e69	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00e6c	c1 cf 02	 ror	 edi, 2
  00e6f	8d 9c 2b d6 c1
	62 ca		 lea	 ebx, DWORD PTR [ebx+ebp-899497514]
  00e76	89 7c 24 24	 mov	 DWORD PTR _v3$[esp+28], edi
  00e7a	8b ea		 mov	 ebp, edx
  00e7c	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00e80	d1 c1		 rol	 ecx, 1
  00e82	33 ee		 xor	 ebp, esi
  00e84	03 e9		 add	 ebp, ecx
  00e86	03 6c 24 18	 add	 ebp, DWORD PTR _v0$[esp+32]
  00e8a	8b fb		 mov	 edi, ebx
  00e8c	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00e8f	c1 ce 02	 ror	 esi, 2
  00e92	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 183  :     five_cycle(v, parity, 0xca62c1d6,  75);

  00e95	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00e98	8d bc 2f d6 c1
	62 ca		 lea	 edi, DWORD PTR [edi+ebp-899497514]
  00e9f	89 74 24 14	 mov	 DWORD PTR _v2$[esp+32], esi
  00ea3	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00ea6	8b 6c 24 24	 mov	 ebp, DWORD PTR _v3$[esp+28]
  00eaa	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00ead	33 6c 24 14	 xor	 ebp, DWORD PTR _v2$[esp+32]
  00eb1	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00eb4	33 eb		 xor	 ebp, ebx
  00eb6	d1 c1		 rol	 ecx, 1
  00eb8	03 e9		 add	 ebp, ecx
  00eba	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00ebd	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ec0	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00ec3	03 ea		 add	 ebp, edx
  00ec5	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00ec8	8b f7		 mov	 esi, edi
  00eca	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00ecd	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00ed0	c1 cb 02	 ror	 ebx, 2
  00ed3	d1 c1		 rol	 ecx, 1
  00ed5	89 5c 24 10	 mov	 DWORD PTR _v1$[esp+32], ebx
  00ed9	8b 5c 24 14	 mov	 ebx, DWORD PTR _v2$[esp+32]
  00edd	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00ee1	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00ee4	33 df		 xor	 ebx, edi
  00ee6	03 d9		 add	 ebx, ecx
  00ee8	03 5c 24 24	 add	 ebx, DWORD PTR _v3$[esp+28]
  00eec	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00eef	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  00ef2	8d 94 2e d6 c1
	62 ca		 lea	 edx, DWORD PTR [esi+ebp-899497514]
  00ef9	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00efc	8b f2		 mov	 esi, edx
  00efe	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00f01	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00f04	8d b4 33 d6 c1
	62 ca		 lea	 esi, DWORD PTR [ebx+esi-899497514]
  00f0b	c1 cf 02	 ror	 edi, 2
  00f0e	d1 c1		 rol	 ecx, 1
  00f10	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00f13	89 7c 24 18	 mov	 DWORD PTR _v0$[esp+32], edi
  00f17	8b da		 mov	 ebx, edx
  00f19	33 5c 24 10	 xor	 ebx, DWORD PTR _v1$[esp+32]
  00f1d	8b fe		 mov	 edi, esi
  00f1f	33 5c 24 18	 xor	 ebx, DWORD PTR _v0$[esp+32]
  00f23	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00f26	03 d9		 add	 ebx, ecx
  00f28	03 5c 24 14	 add	 ebx, DWORD PTR _v2$[esp+32]
  00f2c	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00f2f	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00f32	c1 ca 02	 ror	 edx, 2
  00f35	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00f38	8b ea		 mov	 ebp, edx
  00f3a	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00f3d	33 ee		 xor	 ebp, esi
  00f3f	33 6c 24 18	 xor	 ebp, DWORD PTR _v0$[esp+32]
  00f43	d1 c1		 rol	 ecx, 1
  00f45	03 e9		 add	 ebp, ecx
  00f47	03 6c 24 10	 add	 ebp, DWORD PTR _v1$[esp+32]
  00f4b	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00f4e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00f51	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00f54	8d bc 3b d6 c1
	62 ca		 lea	 edi, DWORD PTR [ebx+edi-899497514]
  00f5b	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00f5e	8b df		 mov	 ebx, edi
  00f60	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00f63	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00f66	8d 9c 2b d6 c1
	62 ca		 lea	 ebx, DWORD PTR [ebx+ebp-899497514]
  00f6d	c1 ce 02	 ror	 esi, 2
  00f70	89 74 24 24	 mov	 DWORD PTR _v3$[esp+28], esi
  00f74	d1 c1		 rol	 ecx, 1
  00f76	8b ea		 mov	 ebp, edx
  00f78	33 6c 24 24	 xor	 ebp, DWORD PTR _v3$[esp+28]
  00f7c	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 184  : 
; 185  : #ifdef ARRAY
; 186  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];
; 187  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];
; 188  :     ctx->hash[4] += v[4];
; 189  : #else
; 190  :     ctx->hash[0] += v0; ctx->hash[1] += v1;

  00f7f	01 58 0c	 add	 DWORD PTR [eax+12], ebx
  00f82	33 ef		 xor	 ebp, edi
  00f84	03 e9		 add	 ebp, ecx
  00f86	03 6c 24 18	 add	 ebp, DWORD PTR _v0$[esp+32]
  00f8a	8b f3		 mov	 esi, ebx
  00f8c	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00f8f	8d 8c 2e d6 c1
	62 ca		 lea	 ecx, DWORD PTR [esi+ebp-899497514]
  00f96	01 48 08	 add	 DWORD PTR [eax+8], ecx

; 191  :     ctx->hash[2] += v2; ctx->hash[3] += v3;

  00f99	8b 4c 24 24	 mov	 ecx, DWORD PTR _v3$[esp+28]
  00f9d	c1 cf 02	 ror	 edi, 2
  00fa0	01 78 10	 add	 DWORD PTR [eax+16], edi
  00fa3	01 48 14	 add	 DWORD PTR [eax+20], ecx

; 192  :     ctx->hash[4] += v4;

  00fa6	01 50 18	 add	 DWORD PTR [eax+24], edx
  00fa9	5f		 pop	 edi
  00faa	5e		 pop	 esi
  00fab	5d		 pop	 ebp
  00fac	5b		 pop	 ebx

; 193  : #endif
; 194  : }

  00fad	83 c4 10	 add	 esp, 16			; 00000010H
  00fb0	c3		 ret	 0
_sha1_compile ENDP
_TEXT	ENDS
PUBLIC	_sha1_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha1_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha1_begin PROC					; COMDAT

; 198  :     ctx->count[0] = ctx->count[1] = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 199  :     ctx->hash[0] = 0x67452301;

  00011	c7 40 08 01 23
	45 67		 mov	 DWORD PTR [eax+8], 1732584193 ; 67452301H

; 200  :     ctx->hash[1] = 0xefcdab89;

  00018	c7 40 0c 89 ab
	cd ef		 mov	 DWORD PTR [eax+12], -271733879 ; efcdab89H

; 201  :     ctx->hash[2] = 0x98badcfe;

  0001f	c7 40 10 fe dc
	ba 98		 mov	 DWORD PTR [eax+16], -1732584194 ; 98badcfeH

; 202  :     ctx->hash[3] = 0x10325476;

  00026	c7 40 14 76 54
	32 10		 mov	 DWORD PTR [eax+20], 271733878 ; 10325476H

; 203  :     ctx->hash[4] = 0xc3d2e1f0;

  0002d	c7 40 18 f0 e1
	d2 c3		 mov	 DWORD PTR [eax+24], -1009589776 ; c3d2e1f0H

; 204  : }

  00034	c3		 ret	 0
_sha1_begin ENDP
_TEXT	ENDS
PUBLIC	_sha1_hash
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sha1_hash
_TEXT	SEGMENT
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_sp$ = 16						; size = 4
_ctx$ = 16						; size = 4
_sha1_hash PROC						; COMDAT

; 211  :             space = SHA1_BLOCK_SIZE - pos;
; 212  :     const unsigned char *sp = data;
; 213  : 
; 214  :     if((ctx->count[0] += len) < len)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _len$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 10	 mov	 ebx, DWORD PTR _ctx$[esp]
  00009	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000b	55		 push	 ebp
  0000c	8b 6c 24 0c	 mov	 ebp, DWORD PTR _data$[esp+4]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f8		 mov	 edi, eax
  00014	83 e7 3f	 and	 edi, 63			; 0000003fH
  00017	be 40 00 00 00	 mov	 esi, 64			; 00000040H
  0001c	03 c1		 add	 eax, ecx
  0001e	2b f7		 sub	 esi, edi
  00020	89 03		 mov	 DWORD PTR [ebx], eax
  00022	3b c1		 cmp	 eax, ecx
  00024	73 03		 jae	 SHORT $LN8@sha1_hash

; 215  :         ++(ctx->count[1]);

  00026	ff 43 04	 inc	 DWORD PTR [ebx+4]
$LN8@sha1_hash:

; 216  : 
; 217  :     while(len >= space)     /* tranfer whole blocks if possible  */

  00029	3b ce		 cmp	 ecx, esi
  0002b	72 64		 jb	 SHORT $LN3@sha1_hash
  0002d	8d 49 00	 npad	 3
$LL4@sha1_hash:

; 218  :     {
; 219  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  00030	56		 push	 esi
  00031	8d 44 3b 1c	 lea	 eax, DWORD PTR [ebx+edi+28]
  00035	55		 push	 ebp
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memcpy

; 220  :         sp += space; len -= space; space = SHA1_BLOCK_SIZE; pos = 0;

  0003c	29 74 24 24	 sub	 DWORD PTR _len$[esp+24], esi
  00040	03 ee		 add	 ebp, esi
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 6c 24 1c	 mov	 DWORD PTR _sp$[esp+12], ebp
  00049	be 40 00 00 00	 mov	 esi, 64			; 00000040H
  0004e	33 ff		 xor	 edi, edi

; 221  :         bsw_32(ctx->wbuf, SHA1_BLOCK_SIZE >> 2);

  00050	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00055	8d 4b 5c	 lea	 ecx, DWORD PTR [ebx+92]
$LL2@sha1_hash:
  00058	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0005b	83 e9 04	 sub	 ecx, 4
  0005e	8b e8		 mov	 ebp, eax
  00060	4a		 dec	 edx
  00061	c1 cd 18	 ror	 ebp, 24			; 00000018H
  00064	81 e5 ff 00 ff
	00		 and	 ebp, 16711935		; 00ff00ffH
  0006a	c1 c8 08	 ror	 eax, 8
  0006d	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  00072	0b e8		 or	 ebp, eax
  00074	89 29		 mov	 DWORD PTR [ecx], ebp
  00076	85 d2		 test	 edx, edx
  00078	75 de		 jne	 SHORT $LL2@sha1_hash

; 222  :         sha1_compile(ctx);

  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 _sha1_compile
  00080	8b 6c 24 20	 mov	 ebp, DWORD PTR _sp$[esp+16]
  00084	83 c4 04	 add	 esp, 4
  00087	39 74 24 18	 cmp	 DWORD PTR _len$[esp+12], esi
  0008b	73 a3		 jae	 SHORT $LL4@sha1_hash

; 216  : 
; 217  :     while(len >= space)     /* tranfer whole blocks if possible  */

  0008d	8b 4c 24 18	 mov	 ecx, DWORD PTR _len$[esp+12]
$LN3@sha1_hash:

; 223  :     }
; 224  : 
; 225  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  00091	51		 push	 ecx
  00092	8d 4c 1f 1c	 lea	 ecx, DWORD PTR [edi+ebx+28]
  00096	55		 push	 ebp
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _memcpy
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 226  : }

  000a4	c3		 ret	 0
_sha1_hash ENDP
_TEXT	ENDS
PUBLIC	_sha1_end
; Function compile flags: /Ogtpy
;	COMDAT _sha1_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha1_end PROC						; COMDAT

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b 74 24 10	 mov	 esi, DWORD PTR _ctx$[esp+4]
  00006	57		 push	 edi
  00007	8b 3e		 mov	 edi, DWORD PTR [esi]
  00009	83 e7 3f	 and	 edi, 63			; 0000003fH

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  0000c	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  0000f	c1 e9 02	 shr	 ecx, 2
  00012	85 c9		 test	 ecx, ecx
  00014	74 2c		 je	 SHORT $LN16@sha1_end

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

  00016	8d 54 8e 1c	 lea	 edx, DWORD PTR [esi+ecx*4+28]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@sha1_end:

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  00020	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00023	83 ea 04	 sub	 edx, 4
  00026	8b d8		 mov	 ebx, eax
  00028	49		 dec	 ecx
  00029	c1 cb 18	 ror	 ebx, 24			; 00000018H
  0002c	81 e3 ff 00 ff
	00		 and	 ebx, 16711935		; 00ff00ffH
  00032	c1 c8 08	 ror	 eax, 8
  00035	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  0003a	0b d8		 or	 ebx, eax
  0003c	89 1a		 mov	 DWORD PTR [edx], ebx
  0003e	85 c9		 test	 ecx, ecx
  00040	75 de		 jne	 SHORT $LL10@sha1_end
$LN16@sha1_end:

; 237  : 
; 238  :     /* we now need to mask valid bytes and add the padding which is */
; 239  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 240  :     /* we can always add the first padding byte here because the    */
; 241  :     /* buffer always has at least one empty slot                    */
; 242  :     ctx->wbuf[i >> 2] &= 0xffffff80 << 8 * (~i & 3);

  00042	8b cf		 mov	 ecx, edi
  00044	f7 d1		 not	 ecx
  00046	83 e1 03	 and	 ecx, 3
  00049	03 c9		 add	 ecx, ecx
  0004b	03 c9		 add	 ecx, ecx
  0004d	03 c9		 add	 ecx, ecx
  0004f	ba 80 ff ff ff	 mov	 edx, -128		; ffffff80H
  00054	d3 e2		 shl	 edx, cl
  00056	8b c7		 mov	 eax, edi
  00058	c1 e8 02	 shr	 eax, 2

; 243  :     ctx->wbuf[i >> 2] |= 0x00000080 << 8 * (~i & 3);

  0005b	bb 80 00 00 00	 mov	 ebx, 128		; 00000080H
  00060	23 54 86 1c	 and	 edx, DWORD PTR [esi+eax*4+28]
  00064	d3 e3		 shl	 ebx, cl
  00066	0b d3		 or	 edx, ebx
  00068	89 54 86 1c	 mov	 DWORD PTR [esi+eax*4+28], edx

; 244  : 
; 245  :     /* we need 9 or more empty positions, one for the padding byte  */
; 246  :     /* (above) and eight for the length count. If there is not      */
; 247  :     /* enough space, pad and empty the buffer                       */
; 248  :     if(i > SHA1_BLOCK_SIZE - 9)

  0006c	83 ff 37	 cmp	 edi, 55			; 00000037H
  0006f	76 19		 jbe	 SHORT $LN8@sha1_end

; 249  :     {
; 250  :         if(i < 60) ctx->wbuf[15] = 0;

  00071	83 ff 3c	 cmp	 edi, 60			; 0000003cH
  00074	73 07		 jae	 SHORT $LN7@sha1_end
  00076	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN7@sha1_end:

; 251  :         sha1_compile(ctx);

  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _sha1_compile
  00083	83 c4 04	 add	 esp, 4

; 252  :         i = 0;

  00086	33 c0		 xor	 eax, eax

; 253  :     }
; 254  :     else    /* compute a word index for the empty buffer positions  */

  00088	eb 06		 jmp	 SHORT $LN21@sha1_end
$LN8@sha1_end:

; 255  :         i = (i >> 2) + 1;

  0008a	40		 inc	 eax

; 256  : 
; 257  :     while(i < 14) /* and zero pad all but last two positions        */

  0008b	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0008e	73 0f		 jae	 SHORT $LN5@sha1_end
$LN21@sha1_end:

; 258  :         ctx->wbuf[i++] = 0;

  00090	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00095	8d 7c 86 1c	 lea	 edi, DWORD PTR [esi+eax*4+28]
  00099	2b c8		 sub	 ecx, eax
  0009b	33 c0		 xor	 eax, eax
  0009d	f3 ab		 rep stosd
$LN5@sha1_end:

; 259  : 
; 260  :     /* the following 32-bit length fields are assembled in the      */
; 261  :     /* wrong byte order on little endian machines but this is       */
; 262  :     /* corrected later since they are only ever used as 32-bit      */
; 263  :     /* word values.                                                 */
; 264  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 29);

  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a4	03 c9		 add	 ecx, ecx
  000a6	8b d0		 mov	 edx, eax
  000a8	03 c9		 add	 ecx, ecx

; 265  :     ctx->wbuf[15] = ctx->count[0] << 3;

  000aa	03 c0		 add	 eax, eax
  000ac	03 c9		 add	 ecx, ecx
  000ae	c1 ea 1d	 shr	 edx, 29			; 0000001dH
  000b1	03 c0		 add	 eax, eax
  000b3	0b ca		 or	 ecx, edx
  000b5	03 c0		 add	 eax, eax

; 266  :     sha1_compile(ctx);

  000b7	56		 push	 esi
  000b8	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  000bb	89 46 58	 mov	 DWORD PTR [esi+88], eax
  000be	e8 00 00 00 00	 call	 _sha1_compile

; 267  : 
; 268  :     /* extract the hash value as bytes in case the hash buffer is   */
; 269  :     /* misaligned for 32-bit words                                  */
; 270  :     for(i = 0; i < SHA1_DIGEST_SIZE; ++i)

  000c3	8b 7c 24 14	 mov	 edi, DWORD PTR _hval$[esp+12]
  000c7	83 c4 04	 add	 esp, 4
  000ca	33 c0		 xor	 eax, eax
  000cc	8d 64 24 00	 npad	 4
$LL3@sha1_end:

; 271  :         hval[i] = (unsigned char)(ctx->hash[i >> 2] >> (8 * (~i & 3)));

  000d0	8b c8		 mov	 ecx, eax
  000d2	f7 d1		 not	 ecx
  000d4	83 e1 03	 and	 ecx, 3
  000d7	03 c9		 add	 ecx, ecx
  000d9	8b d0		 mov	 edx, eax
  000db	c1 ea 02	 shr	 edx, 2
  000de	8b 54 96 08	 mov	 edx, DWORD PTR [esi+edx*4+8]
  000e2	03 c9		 add	 ecx, ecx
  000e4	03 c9		 add	 ecx, ecx
  000e6	d3 ea		 shr	 edx, cl
  000e8	40		 inc	 eax
  000e9	88 54 38 ff	 mov	 BYTE PTR [eax+edi-1], dl
  000ed	83 f8 14	 cmp	 eax, 20			; 00000014H
  000f0	72 de		 jb	 SHORT $LL3@sha1_end
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx

; 272  : }

  000f5	c3		 ret	 0
_sha1_end ENDP
_TEXT	ENDS
PUBLIC	_sha1
; Function compile flags: /Ogtpy
;	COMDAT _sha1
_TEXT	SEGMENT
_cx$ = -92						; size = 92
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha1	PROC						; COMDAT

; 275  : {   sha1_ctx    cx[1];

  00000	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 276  : 
; 277  :     sha1_begin(cx); sha1_hash(data, len, cx); sha1_end(hval, cx);

  00003	8b 4c 24 68	 mov	 ecx, DWORD PTR _len$[esp+88]
  00007	8b 54 24 64	 mov	 edx, DWORD PTR _data$[esp+88]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 44 24 04	 mov	 DWORD PTR _cx$[esp+96], eax
  00011	89 04 24	 mov	 DWORD PTR _cx$[esp+92], eax
  00014	8d 04 24	 lea	 eax, DWORD PTR _cx$[esp+92]
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	52		 push	 edx
  0001a	c7 44 24 14 01
	23 45 67	 mov	 DWORD PTR _cx$[esp+112], 1732584193 ; 67452301H
  00022	c7 44 24 18 89
	ab cd ef	 mov	 DWORD PTR _cx$[esp+116], -271733879 ; efcdab89H
  0002a	c7 44 24 1c fe
	dc ba 98	 mov	 DWORD PTR _cx$[esp+120], -1732584194 ; 98badcfeH
  00032	c7 44 24 20 76
	54 32 10	 mov	 DWORD PTR _cx$[esp+124], 271733878 ; 10325476H
  0003a	c7 44 24 24 f0
	e1 d2 c3	 mov	 DWORD PTR _cx$[esp+128], -1009589776 ; c3d2e1f0H
  00042	e8 00 00 00 00	 call	 _sha1_hash
  00047	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hval$[esp+100]
  0004b	8d 44 24 0c	 lea	 eax, DWORD PTR _cx$[esp+104]
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _sha1_end

; 278  : }

  00056	83 c4 70	 add	 esp, 112		; 00000070H
  00059	c3		 ret	 0
_sha1	ENDP
_TEXT	ENDS
END
