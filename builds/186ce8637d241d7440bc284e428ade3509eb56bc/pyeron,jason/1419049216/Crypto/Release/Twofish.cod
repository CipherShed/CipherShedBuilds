; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\cipherShed\src\Crypto\Twofish.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_qt_gen	DD	01H DUP (?)
_mt_gen	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_tab_5b	DB	00H
	DB	05aH
	DB	0b4H
	DB	0eeH
_tab_ef	DB	00H
	DB	0eeH
	DB	0b4H
	DB	05aH
_ror4	DB	00H
	DB	08H
	DB	01H
	DB	09H
	DB	02H
	DB	0aH
	DB	03H
	DB	0bH
	DB	04H
	DB	0cH
	DB	05H
	DB	0dH
	DB	06H
	DB	0eH
	DB	07H
	DB	0fH
_ashx	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	04H
	DB	0dH
	DB	06H
	DB	0fH
	DB	08H
	DB	01H
	DB	0aH
	DB	03H
	DB	0cH
	DB	05H
	DB	0eH
	DB	07H
_qt0	DB	08H
	DB	01H
	DB	07H
	DB	0dH
	DB	06H
	DB	0fH
	DB	03H
	DB	02H
	DB	00H
	DB	0bH
	DB	05H
	DB	09H
	DB	0eH
	DB	0cH
	DB	0aH
	DB	04H
	DB	02H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	07H
	DB	06H
	DB	0eH
	DB	03H
	DB	01H
	DB	09H
	DB	04H
	DB	00H
	DB	0aH
	DB	0cH
	DB	05H
_qt1	DB	0eH
	DB	0cH
	DB	0bH
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	0fH
	DB	04H
	DB	0aH
	DB	06H
	DB	07H
	DB	00H
	DB	09H
	DB	0dH
	DB	01H
	DB	0eH
	DB	02H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	0dH
	DB	0aH
	DB	05H
	DB	0fH
	DB	09H
	DB	00H
	DB	08H
_qt2	DB	0bH
	DB	0aH
	DB	05H
	DB	0eH
	DB	06H
	DB	0dH
	DB	09H
	DB	00H
	DB	0cH
	DB	08H
	DB	0fH
	DB	03H
	DB	02H
	DB	04H
	DB	07H
	DB	01H
	DB	04H
	DB	0cH
	DB	07H
	DB	05H
	DB	01H
	DB	06H
	DB	09H
	DB	0aH
	DB	00H
	DB	0eH
	DB	0dH
	DB	08H
	DB	02H
	DB	0bH
	DB	03H
	DB	0fH
_qt3	DB	0dH
	DB	07H
	DB	0fH
	DB	04H
	DB	01H
	DB	02H
	DB	06H
	DB	0eH
	DB	09H
	DB	0bH
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	05H
	DB	01H
	DB	0cH
	DB	03H
	DB	0dH
	DB	0eH
	DB	06H
	DB	04H
	DB	07H
	DB	0fH
	DB	02H
	DB	00H
	DB	08H
	DB	0aH
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed\src\crypto\twofish.c
_DATA	ENDS
;	COMDAT _qp
_TEXT	SEGMENT
_qp	PROC						; COMDAT
; _n$ = ecx
; _x$ = eax

; 87   : 
; 88   :     a0 = x >> 4; b0 = x & 15;

  00000	8a d0		 mov	 dl, al
  00002	56		 push	 esi
  00003	c0 ea 04	 shr	 dl, 4
  00006	24 0f		 and	 al, 15			; 0000000fH
  00008	0f b6 f2	 movzx	 esi, dl
  0000b	0f b6 c0	 movzx	 eax, al

; 89   :     a1 = a0 ^ b0; b1 = ror4[b0] ^ ashx[a0];

  0000e	8b d6		 mov	 edx, esi

; 90   :     a2 = qt0[n][a1]; b2 = qt1[n][b1];

  00010	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _ashx[esi]
  00017	33 d0		 xor	 edx, eax
  00019	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _ror4[eax]
  00020	33 f0		 xor	 esi, eax
  00022	c1 e1 04	 shl	 ecx, 4
  00025	8a 94 0a 00 00
	00 00		 mov	 dl, BYTE PTR _qt0[edx+ecx]
  0002c	0f b6 b4 0e 00
	00 00 00	 movzx	 esi, BYTE PTR _qt1[esi+ecx]

; 91   :     a3 = a2 ^ b2; b3 = ror4[b2] ^ ashx[a2];

  00034	0f b6 d2	 movzx	 edx, dl

; 92   :     a4 = qt2[n][a3]; b4 = qt3[n][b3];
; 93   :     return (b4 << 4) | a4;

  00037	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _ashx[edx]
  0003e	57		 push	 edi
  0003f	0f b6 be 00 00
	00 00		 movzx	 edi, BYTE PTR _ror4[esi]
  00046	33 c7		 xor	 eax, edi
  00048	0f b6 84 08 00
	00 00 00	 movzx	 eax, BYTE PTR _qt3[eax+ecx]
  00050	33 d6		 xor	 edx, esi
  00052	0f b6 8c 0a 00
	00 00 00	 movzx	 ecx, BYTE PTR _qt2[edx+ecx]
  0005a	c1 e0 04	 shl	 eax, 4
  0005d	5f		 pop	 edi
  0005e	0b c1		 or	 eax, ecx
  00060	5e		 pop	 esi

; 94   : };

  00061	c3		 ret	 0
_qp	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_q_tab	DB	0200H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _gen_qtab
_TEXT	SEGMENT
tv356 = -1						; size = 1
_gen_qtab PROC						; COMDAT

; 104  : {   u4byte  i;

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi

; 105  : 
; 106  :     for(i = 0; i < 256; ++i)

  00003	33 c0		 xor	 eax, eax
  00005	57		 push	 edi
$LL3@gen_qtab:

; 107  :     {       
; 108  :         q(0,i) = qp(0, (u1byte)i);

  00006	8a d0		 mov	 dl, al
  00008	c0 ea 04	 shr	 dl, 4
  0000b	0f b6 fa	 movzx	 edi, dl
  0000e	8a c8		 mov	 cl, al
  00010	80 e1 0f	 and	 cl, 15			; 0000000fH
  00013	0f b6 f1	 movzx	 esi, cl
  00016	88 4c 24 0f	 mov	 BYTE PTR tv356[esp+16], cl
  0001a	8b cf		 mov	 ecx, edi
  0001c	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _ashx[edi]
  00023	33 ce		 xor	 ecx, esi
  00025	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _ror4[esi]
  0002c	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR _qt0[ecx]
  00032	33 fe		 xor	 edi, esi
  00034	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _qt1[edi]
  0003b	0f b6 9e 00 00
	00 00		 movzx	 ebx, BYTE PTR _ror4[esi]
  00042	0f b6 c9	 movzx	 ecx, cl
  00045	0f b6 b9 00 00
	00 00		 movzx	 edi, BYTE PTR _ashx[ecx]
  0004c	33 ce		 xor	 ecx, esi
  0004e	33 fb		 xor	 edi, ebx
  00050	8a 9f 00 00 00
	00		 mov	 bl, BYTE PTR _qt3[edi]

; 109  :         q(1,i) = qp(1, (u1byte)i);

  00056	0f b6 f2	 movzx	 esi, dl
  00059	c0 e3 04	 shl	 bl, 4
  0005c	0a 99 00 00 00
	00		 or	 bl, BYTE PTR _qt2[ecx]
  00062	0f b6 4c 24 0f	 movzx	 ecx, BYTE PTR tv356[esp+16]
  00067	8b d6		 mov	 edx, esi
  00069	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _ashx[esi]
  00070	33 d1		 xor	 edx, ecx
  00072	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _ror4[ecx]
  00079	8a 92 10 00 00
	00		 mov	 dl, BYTE PTR _qt0[edx+16]
  0007f	33 f1		 xor	 esi, ecx
  00081	0f b6 b6 10 00
	00 00		 movzx	 esi, BYTE PTR _qt1[esi+16]
  00088	0f b6 be 00 00
	00 00		 movzx	 edi, BYTE PTR _ror4[esi]
  0008f	0f b6 ca	 movzx	 ecx, dl
  00092	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _ashx[ecx]
  00099	33 d7		 xor	 edx, edi
  0009b	0f b6 92 10 00
	00 00		 movzx	 edx, BYTE PTR _qt3[edx+16]
  000a2	c0 e2 04	 shl	 dl, 4
  000a5	33 ce		 xor	 ecx, esi
  000a7	0a 91 10 00 00
	00		 or	 dl, BYTE PTR _qt2[ecx+16]
  000ad	88 98 00 00 00
	00		 mov	 BYTE PTR _q_tab[eax], bl
  000b3	88 90 00 01 00
	00		 mov	 BYTE PTR _q_tab[eax+256], dl
  000b9	40		 inc	 eax
  000ba	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000bf	0f 82 41 ff ff
	ff		 jb	 $LL3@gen_qtab
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx

; 110  :     }
; 111  : };

  000c8	59		 pop	 ecx
  000c9	c3		 ret	 0
_gen_qtab ENDP
_TEXT	ENDS
_BSS	SEGMENT
_m_tab	DD	0400H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _gen_mtab
_TEXT	SEGMENT
_gen_mtab PROC						; COMDAT

; 125  : {   u4byte  i, f01, f5b, fef;

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 126  :     
; 127  :     for(i = 0; i < 256; ++i)

  00002	33 c0		 xor	 eax, eax
  00004	57		 push	 edi
  00005	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL3@gen_mtab:

; 128  :     {
; 129  :         f01 = q(1,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  00010	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+256]
  00017	8b f9		 mov	 edi, ecx
  00019	83 e7 03	 and	 edi, 3
  0001c	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  00023	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  0002a	8b d1		 mov	 edx, ecx
  0002c	c1 ea 02	 shr	 edx, 2
  0002f	33 f2		 xor	 esi, edx
  00031	8b d1		 mov	 edx, ecx
  00033	d1 ea		 shr	 edx, 1
  00035	33 d1		 xor	 edx, ecx
  00037	d1 ea		 shr	 edx, 1
  00039	33 d7		 xor	 edx, edi
  0003b	33 d1		 xor	 edx, ecx
  0003d	33 f1		 xor	 esi, ecx

; 130  :         m_tab[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);

  0003f	8b fa		 mov	 edi, edx

; 131  :         m_tab[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);

  00041	69 d2 00 01 00
	01		 imul	 edx, 16777472		; 01000100H
  00047	69 ff 00 01 01
	00		 imul	 edi, 65792		; 00010100H
  0004d	03 fe		 add	 edi, esi
  0004f	c1 e7 08	 shl	 edi, 8
  00052	03 f9		 add	 edi, ecx
  00054	03 d6		 add	 edx, esi
  00056	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00059	03 ca		 add	 ecx, edx

; 132  : 
; 133  :         f01 = q(0,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  0005b	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax]
  00062	89 3c 85 00 00
	00 00		 mov	 DWORD PTR _m_tab[eax*4], edi
  00069	89 0c 85 00 08
	00 00		 mov	 DWORD PTR _m_tab[eax*4+2048], ecx
  00070	8b fa		 mov	 edi, edx
  00072	83 e7 03	 and	 edi, 3
  00075	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  0007c	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  00083	8b ca		 mov	 ecx, edx
  00085	c1 e9 02	 shr	 ecx, 2
  00088	33 f1		 xor	 esi, ecx
  0008a	8b ca		 mov	 ecx, edx
  0008c	d1 e9		 shr	 ecx, 1
  0008e	33 ca		 xor	 ecx, edx
  00090	33 f2		 xor	 esi, edx
  00092	d1 e9		 shr	 ecx, 1
  00094	33 cf		 xor	 ecx, edi
  00096	33 ca		 xor	 ecx, edx

; 134  :         m_tab[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);

  00098	8b fa		 mov	 edi, edx
  0009a	c1 e7 08	 shl	 edi, 8
  0009d	03 fe		 add	 edi, esi

; 135  :         m_tab[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);

  0009f	69 f6 01 00 00
	01		 imul	 esi, 16777217		; 01000001H
  000a5	8b d9		 mov	 ebx, ecx
  000a7	c1 e1 08	 shl	 ecx, 8
  000aa	69 db 01 01 00
	00		 imul	 ebx, 257		; 00000101H
  000b0	03 ca		 add	 ecx, edx
  000b2	c1 e7 10	 shl	 edi, 16			; 00000010H
  000b5	03 fb		 add	 edi, ebx
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	03 ce		 add	 ecx, esi
  000bc	89 3c 85 00 04
	00 00		 mov	 DWORD PTR _m_tab[eax*4+1024], edi
  000c3	89 0c 85 00 0c
	00 00		 mov	 DWORD PTR _m_tab[eax*4+3072], ecx
  000ca	0f b6 88 01 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+257]
  000d1	8b f9		 mov	 edi, ecx
  000d3	83 e7 03	 and	 edi, 3
  000d6	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  000dd	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  000e4	8b d1		 mov	 edx, ecx
  000e6	c1 ea 02	 shr	 edx, 2
  000e9	33 f2		 xor	 esi, edx
  000eb	8b d1		 mov	 edx, ecx
  000ed	d1 ea		 shr	 edx, 1
  000ef	33 d1		 xor	 edx, ecx
  000f1	d1 ea		 shr	 edx, 1
  000f3	33 d7		 xor	 edx, edi
  000f5	33 d1		 xor	 edx, ecx
  000f7	8b fa		 mov	 edi, edx
  000f9	69 d2 00 01 00
	01		 imul	 edx, 16777472		; 01000100H
  000ff	69 ff 00 01 01
	00		 imul	 edi, 65792		; 00010100H
  00105	33 f1		 xor	 esi, ecx
  00107	03 fe		 add	 edi, esi
  00109	c1 e7 08	 shl	 edi, 8
  0010c	03 f9		 add	 edi, ecx
  0010e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00111	03 d6		 add	 edx, esi
  00113	03 ca		 add	 ecx, edx
  00115	89 3c 85 04 00
	00 00		 mov	 DWORD PTR _m_tab[eax*4+4], edi
  0011c	89 0c 85 04 08
	00 00		 mov	 DWORD PTR _m_tab[eax*4+2052], ecx
  00123	0f b6 90 01 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+1]
  0012a	8b fa		 mov	 edi, edx
  0012c	83 e7 03	 and	 edi, 3
  0012f	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  00136	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  0013d	8b ca		 mov	 ecx, edx
  0013f	c1 e9 02	 shr	 ecx, 2
  00142	33 f1		 xor	 esi, ecx
  00144	8b ca		 mov	 ecx, edx
  00146	d1 e9		 shr	 ecx, 1
  00148	33 ca		 xor	 ecx, edx
  0014a	d1 e9		 shr	 ecx, 1
  0014c	33 cf		 xor	 ecx, edi
  0014e	33 ca		 xor	 ecx, edx
  00150	33 f2		 xor	 esi, edx
  00152	8b fa		 mov	 edi, edx
  00154	c1 e7 08	 shl	 edi, 8
  00157	03 fe		 add	 edi, esi
  00159	69 f6 01 00 00
	01		 imul	 esi, 16777217		; 01000001H
  0015f	8b d9		 mov	 ebx, ecx
  00161	c1 e1 08	 shl	 ecx, 8
  00164	69 db 01 01 00
	00		 imul	 ebx, 257		; 00000101H
  0016a	03 ca		 add	 ecx, edx
  0016c	c1 e1 08	 shl	 ecx, 8
  0016f	03 ce		 add	 ecx, esi
  00171	c1 e7 10	 shl	 edi, 16			; 00000010H
  00174	03 fb		 add	 edi, ebx
  00176	89 0c 85 04 0c
	00 00		 mov	 DWORD PTR _m_tab[eax*4+3076], ecx
  0017d	0f b6 88 02 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+258]
  00184	89 3c 85 04 04
	00 00		 mov	 DWORD PTR _m_tab[eax*4+1028], edi
  0018b	8b f9		 mov	 edi, ecx
  0018d	83 e7 03	 and	 edi, 3
  00190	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  00197	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  0019e	8b d1		 mov	 edx, ecx
  001a0	c1 ea 02	 shr	 edx, 2
  001a3	33 f2		 xor	 esi, edx
  001a5	8b d1		 mov	 edx, ecx
  001a7	d1 ea		 shr	 edx, 1
  001a9	33 d1		 xor	 edx, ecx
  001ab	d1 ea		 shr	 edx, 1
  001ad	33 d7		 xor	 edx, edi
  001af	33 d1		 xor	 edx, ecx
  001b1	33 f1		 xor	 esi, ecx
  001b3	8b fa		 mov	 edi, edx
  001b5	69 d2 00 01 00
	01		 imul	 edx, 16777472		; 01000100H
  001bb	69 ff 00 01 01
	00		 imul	 edi, 65792		; 00010100H
  001c1	03 fe		 add	 edi, esi
  001c3	c1 e7 08	 shl	 edi, 8
  001c6	03 f9		 add	 edi, ecx
  001c8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001cb	03 d6		 add	 edx, esi
  001cd	03 ca		 add	 ecx, edx
  001cf	0f b6 90 02 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+2]
  001d6	89 3c 85 08 00
	00 00		 mov	 DWORD PTR _m_tab[eax*4+8], edi
  001dd	89 0c 85 08 08
	00 00		 mov	 DWORD PTR _m_tab[eax*4+2056], ecx
  001e4	8b fa		 mov	 edi, edx
  001e6	83 e7 03	 and	 edi, 3
  001e9	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  001f0	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  001f7	8b ca		 mov	 ecx, edx
  001f9	c1 e9 02	 shr	 ecx, 2
  001fc	33 f1		 xor	 esi, ecx
  001fe	8b ca		 mov	 ecx, edx
  00200	d1 e9		 shr	 ecx, 1
  00202	33 ca		 xor	 ecx, edx
  00204	d1 e9		 shr	 ecx, 1
  00206	33 cf		 xor	 ecx, edi
  00208	33 ca		 xor	 ecx, edx
  0020a	8b d9		 mov	 ebx, ecx
  0020c	69 db 01 01 00
	00		 imul	 ebx, 257		; 00000101H
  00212	8b fa		 mov	 edi, edx
  00214	c1 e7 08	 shl	 edi, 8
  00217	33 f2		 xor	 esi, edx
  00219	03 fe		 add	 edi, esi
  0021b	c1 e7 10	 shl	 edi, 16			; 00000010H
  0021e	c1 e1 08	 shl	 ecx, 8
  00221	03 fb		 add	 edi, ebx
  00223	03 ca		 add	 ecx, edx
  00225	89 3c 85 08 04
	00 00		 mov	 DWORD PTR _m_tab[eax*4+1032], edi
  0022c	c1 e1 08	 shl	 ecx, 8
  0022f	69 f6 01 00 00
	01		 imul	 esi, 16777217		; 01000001H
  00235	03 ce		 add	 ecx, esi
  00237	89 0c 85 08 0c
	00 00		 mov	 DWORD PTR _m_tab[eax*4+3080], ecx
  0023e	0f b6 88 03 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[eax+259]
  00245	8b f9		 mov	 edi, ecx
  00247	83 e7 03	 and	 edi, 3
  0024a	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  00251	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  00258	8b d1		 mov	 edx, ecx
  0025a	c1 ea 02	 shr	 edx, 2
  0025d	33 f2		 xor	 esi, edx
  0025f	8b d1		 mov	 edx, ecx
  00261	d1 ea		 shr	 edx, 1
  00263	33 d1		 xor	 edx, ecx
  00265	d1 ea		 shr	 edx, 1
  00267	33 d7		 xor	 edx, edi
  00269	33 d1		 xor	 edx, ecx
  0026b	33 f1		 xor	 esi, ecx
  0026d	8b fa		 mov	 edi, edx
  0026f	69 d2 00 01 00
	01		 imul	 edx, 16777472		; 01000100H
  00275	69 ff 00 01 01
	00		 imul	 edi, 65792		; 00010100H
  0027b	03 fe		 add	 edi, esi
  0027d	c1 e7 08	 shl	 edi, 8
  00280	03 f9		 add	 edi, ecx
  00282	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00285	03 d6		 add	 edx, esi
  00287	03 ca		 add	 ecx, edx
  00289	0f b6 90 03 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax+3]
  00290	89 3c 85 0c 00
	00 00		 mov	 DWORD PTR _m_tab[eax*4+12], edi
  00297	89 0c 85 0c 08
	00 00		 mov	 DWORD PTR _m_tab[eax*4+2060], ecx
  0029e	8b fa		 mov	 edi, edx
  002a0	83 e7 03	 and	 edi, 3
  002a3	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edi]
  002aa	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  002b1	8b ca		 mov	 ecx, edx
  002b3	c1 e9 02	 shr	 ecx, 2
  002b6	33 f1		 xor	 esi, ecx
  002b8	8b ca		 mov	 ecx, edx
  002ba	d1 e9		 shr	 ecx, 1
  002bc	33 ca		 xor	 ecx, edx
  002be	d1 e9		 shr	 ecx, 1
  002c0	33 cf		 xor	 ecx, edi
  002c2	33 ca		 xor	 ecx, edx
  002c4	8b d9		 mov	 ebx, ecx
  002c6	33 f2		 xor	 esi, edx
  002c8	69 db 01 01 00
	00		 imul	 ebx, 257		; 00000101H
  002ce	8b fa		 mov	 edi, edx
  002d0	c1 e7 08	 shl	 edi, 8
  002d3	03 fe		 add	 edi, esi
  002d5	69 f6 01 00 00
	01		 imul	 esi, 16777217		; 01000001H
  002db	c1 e1 08	 shl	 ecx, 8
  002de	03 ca		 add	 ecx, edx
  002e0	c1 e7 10	 shl	 edi, 16			; 00000010H
  002e3	c1 e1 08	 shl	 ecx, 8
  002e6	03 fb		 add	 edi, ebx
  002e8	03 ce		 add	 ecx, esi
  002ea	89 3c 85 0c 04
	00 00		 mov	 DWORD PTR _m_tab[eax*4+1036], edi
  002f1	89 0c 85 0c 0c
	00 00		 mov	 DWORD PTR _m_tab[eax*4+3084], ecx
  002f8	83 c0 04	 add	 eax, 4
  002fb	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00300	0f 82 0a fd ff
	ff		 jb	 $LL3@gen_mtab
  00306	5f		 pop	 edi
  00307	5e		 pop	 esi
  00308	5b		 pop	 ebx

; 136  :     }
; 137  : };

  00309	c3		 ret	 0
_gen_mtab ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _h_fun
_TEXT	SEGMENT
_b2$ = -4						; size = 4
_instance$ = 8						; size = 4
tv291 = 12						; size = 4
_b3$ = 12						; size = 4
_x$ = 12						; size = 4
_h_fun	PROC						; COMDAT
; _key$ = eax

; 177  : {   u4byte  b0, b1, b2, b3;

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b 5c 24 10	 mov	 ebx, DWORD PTR _x$[esp+4]

; 178  : 
; 179  : #ifndef M_TABLE
; 180  :     u4byte  m5b_b0, m5b_b1, m5b_b2, m5b_b3;
; 181  :     u4byte  mef_b0, mef_b1, mef_b2, mef_b3;
; 182  : #endif
; 183  : 
; 184  :     b0 = extract_byte(x, 0); b1 = extract_byte(x, 1); b2 = extract_byte(x, 2); b3 = extract_byte(x, 3);

  00006	8b d3		 mov	 edx, ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	0f b6 cb	 movzx	 ecx, bl
  0000d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00010	0f b6 f3	 movzx	 esi, bl
  00013	89 74 24 0c	 mov	 DWORD PTR _b2$[esp+16], esi
  00017	8b 74 24 18	 mov	 esi, DWORD PTR _x$[esp+12]
  0001b	c1 ee 18	 shr	 esi, 24			; 00000018H
  0001e	8b de		 mov	 ebx, esi

; 185  : 
; 186  :     switch(instance->k_len)

  00020	8b 74 24 14	 mov	 esi, DWORD PTR _instance$[esp+12]
  00024	8b b6 b0 10 00
	00		 mov	 esi, DWORD PTR [esi+4272]
  0002a	c1 ea 08	 shr	 edx, 8
  0002d	83 ee 02	 sub	 esi, 2
  00030	57		 push	 edi
  00031	0f b6 d2	 movzx	 edx, dl
  00034	89 5c 24 1c	 mov	 DWORD PTR _b3$[esp+16], ebx
  00038	0f 84 b6 00 00
	00		 je	 $LN1@h_fun
  0003e	83 ee 01	 sub	 esi, 1
  00041	74 5f		 je	 SHORT $LN2@h_fun
  00043	83 ee 01	 sub	 esi, 1
  00046	0f 85 3a 01 00
	00		 jne	 $LN8@h_fun

; 187  :     {
; 188  :     case 4: b0 = q(1, (u1byte) b0) ^ extract_byte(key[3],0);

  0004c	0f b6 70 0c	 movzx	 esi, BYTE PTR [eax+12]
  00050	0f b6 c9	 movzx	 ecx, cl
  00053	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  0005a	33 ce		 xor	 ecx, esi

; 189  :             b1 = q(0, (u1byte) b1) ^ extract_byte(key[3],1);

  0005c	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0005f	0f b6 d2	 movzx	 edx, dl
  00062	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[edx]
  00069	8b de		 mov	 ebx, esi
  0006b	c1 eb 08	 shr	 ebx, 8
  0006e	0f b6 fb	 movzx	 edi, bl
  00071	33 d7		 xor	 edx, edi

; 190  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[3],2);

  00073	0f b6 7c 24 10	 movzx	 edi, BYTE PTR _b2$[esp+20]
  00078	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  0007f	8b de		 mov	 ebx, esi
  00081	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00084	0f b6 db	 movzx	 ebx, bl
  00087	33 fb		 xor	 edi, ebx
  00089	89 7c 24 10	 mov	 DWORD PTR _b2$[esp+20], edi

; 191  :             b3 = q(1, (u1byte) b3) ^ extract_byte(key[3],3);

  0008d	0f b6 7c 24 1c	 movzx	 edi, BYTE PTR _b3$[esp+16]
  00092	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  00099	c1 ee 18	 shr	 esi, 24			; 00000018H
  0009c	33 fe		 xor	 edi, esi
  0009e	89 7c 24 1c	 mov	 DWORD PTR _b3$[esp+16], edi
$LN2@h_fun:

; 192  :     case 3: b0 = q(1, (u1byte) b0) ^ extract_byte(key[2],0);

  000a2	0f b6 70 08	 movzx	 esi, BYTE PTR [eax+8]
  000a6	0f b6 c9	 movzx	 ecx, cl
  000a9	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  000b0	33 ce		 xor	 ecx, esi

; 193  :             b1 = q(1, (u1byte) b1) ^ extract_byte(key[2],1);

  000b2	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000b5	0f b6 d2	 movzx	 edx, dl
  000b8	0f b6 92 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[edx+256]
  000bf	8b de		 mov	 ebx, esi
  000c1	c1 eb 08	 shr	 ebx, 8
  000c4	0f b6 fb	 movzx	 edi, bl
  000c7	33 d7		 xor	 edx, edi

; 194  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[2],2);

  000c9	0f b6 7c 24 10	 movzx	 edi, BYTE PTR _b2$[esp+20]
  000ce	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000d5	8b de		 mov	 ebx, esi
  000d7	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000da	0f b6 db	 movzx	 ebx, bl
  000dd	33 fb		 xor	 edi, ebx
  000df	89 7c 24 10	 mov	 DWORD PTR _b2$[esp+20], edi

; 195  :             b3 = q(0, (u1byte) b3) ^ extract_byte(key[2],3);

  000e3	0f b6 7c 24 1c	 movzx	 edi, BYTE PTR _b3$[esp+16]
  000e8	0f b6 9f 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[edi]
  000ef	c1 ee 18	 shr	 esi, 24			; 00000018H
  000f2	33 de		 xor	 ebx, esi
$LN1@h_fun:

; 196  :     case 2: b0 = q(0, (u1byte) (q(0, (u1byte) b0) ^ extract_byte(key[1],0))) ^ extract_byte(key[0],0);

  000f4	0f b6 70 04	 movzx	 esi, BYTE PTR [eax+4]

; 197  :             b1 = q(0, (u1byte) (q(1, (u1byte) b1) ^ extract_byte(key[1],1))) ^ extract_byte(key[0],1);

  000f8	8b 38		 mov	 edi, DWORD PTR [eax]
  000fa	0f b6 c9	 movzx	 ecx, cl
  000fd	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  00104	33 ce		 xor	 ecx, esi
  00106	0f b6 30	 movzx	 esi, BYTE PTR [eax]
  00109	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  00110	0f b6 d2	 movzx	 edx, dl
  00113	33 ce		 xor	 ecx, esi
  00115	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00118	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[edx+256]
  0011f	8b d6		 mov	 edx, esi
  00121	c1 ea 08	 shr	 edx, 8
  00124	0f b6 d2	 movzx	 edx, dl
  00127	33 c2		 xor	 eax, edx
  00129	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[eax]
  00130	8b c7		 mov	 eax, edi
  00132	c1 e8 08	 shr	 eax, 8
  00135	0f b6 c0	 movzx	 eax, al
  00138	33 d0		 xor	 edx, eax

; 198  :             b2 = q(1, (u1byte) (q(0, (u1byte) b2) ^ extract_byte(key[1],2))) ^ extract_byte(key[0],2);

  0013a	0f b6 44 24 10	 movzx	 eax, BYTE PTR _b2$[esp+20]
  0013f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _q_tab[eax]
  00146	89 4c 24 1c	 mov	 DWORD PTR tv291[esp+16], ecx
  0014a	8b ce		 mov	 ecx, esi
  0014c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0014f	0f b6 e9	 movzx	 ebp, cl
  00152	33 c5		 xor	 eax, ebp
  00154	0f b6 a8 00 01
	00 00		 movzx	 ebp, BYTE PTR _q_tab[eax+256]

; 199  :             b3 = q(1, (u1byte) (q(1, (u1byte) b3) ^ extract_byte(key[1],3))) ^ extract_byte(key[0],3);

  0015b	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv291[esp+16]
  0015f	8b c7		 mov	 eax, edi
  00161	c1 e8 10	 shr	 eax, 16			; 00000010H
  00164	0f b6 c0	 movzx	 eax, al
  00167	33 e8		 xor	 ebp, eax
  00169	0f b6 c3	 movzx	 eax, bl
  0016c	0f b6 80 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[eax+256]
  00173	c1 ee 18	 shr	 esi, 24			; 00000018H
  00176	33 c6		 xor	 eax, esi
  00178	0f b6 98 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[eax+256]
  0017f	c1 ef 18	 shr	 edi, 24			; 00000018H
  00182	33 df		 xor	 ebx, edi
  00184	eb 04		 jmp	 SHORT $LN4@h_fun
$LN8@h_fun:
  00186	8b 6c 24 10	 mov	 ebp, DWORD PTR _b2$[esp+20]
$LN4@h_fun:

; 200  :     }
; 201  : #ifdef  M_TABLE
; 202  : 
; 203  :     return  mds(0, b0) ^ mds(1, b1) ^ mds(2, b2) ^ mds(3, b3);

  0018a	8b 04 9d 00 0c
	00 00		 mov	 eax, DWORD PTR _m_tab[ebx*4+3072]
  00191	33 04 ad 00 08
	00 00		 xor	 eax, DWORD PTR _m_tab[ebp*4+2048]
  00198	5f		 pop	 edi
  00199	33 04 95 00 04
	00 00		 xor	 eax, DWORD PTR _m_tab[edx*4+1024]
  001a0	5e		 pop	 esi
  001a1	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR _m_tab[ecx*4]
  001a8	5d		 pop	 ebp
  001a9	5b		 pop	 ebx

; 204  : 
; 205  : #else
; 206  : 
; 207  :     b0 = q(1, (u1byte) b0); b1 = q(0, (u1byte) b1); b2 = q(1, (u1byte) b2); b3 = q(0, (u1byte) b3);
; 208  :     m5b_b0 = ffm_5b(b0); m5b_b1 = ffm_5b(b1); m5b_b2 = ffm_5b(b2); m5b_b3 = ffm_5b(b3);
; 209  :     mef_b0 = ffm_ef(b0); mef_b1 = ffm_ef(b1); mef_b2 = ffm_ef(b2); mef_b3 = ffm_ef(b3);
; 210  :     b0 ^= mef_b1 ^ m5b_b2 ^ m5b_b3; b3 ^= m5b_b0 ^ mef_b1 ^ mef_b2;
; 211  :     b2 ^= mef_b0 ^ m5b_b1 ^ mef_b3; b1 ^= mef_b0 ^ mef_b2 ^ m5b_b3;
; 212  : 
; 213  :     return b0 | (b3 << 8) | (b2 << 16) | (b1 << 24);
; 214  : 
; 215  : #endif
; 216  : };

  001aa	59		 pop	 ecx
  001ab	c3		 ret	 0
_h_fun	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _gen_mk_tab
_TEXT	SEGMENT
_gen_mk_tab PROC					; COMDAT
; _instance$ = ecx
; _key$ = eax

; 242  : {   u4byte  i;

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 243  :     u1byte  by;
; 244  : 
; 245  : 	u4byte *mk_tab = instance->mk_tab;
; 246  : 
; 247  :     switch(instance->k_len)

  00004	8b 8e b0 10 00
	00		 mov	 ecx, DWORD PTR [esi+4272]
  0000a	83 e9 02	 sub	 ecx, 2
  0000d	57		 push	 edi
  0000e	0f 84 33 02 00
	00		 je	 $LN12@gen_mk_tab
  00014	83 e9 01	 sub	 ecx, 1
  00017	0f 84 33 01 00
	00		 je	 $LN8@gen_mk_tab
  0001d	83 e9 01	 sub	 ecx, 1
  00020	0f 85 d4 02 00
	00		 jne	 $LN9@gen_mk_tab

; 268  : #else
; 269  :                 sb[0][i] = q30(by); sb[1][i] = q31(by); 
; 270  :                 sb[2][i] = q32(by); sb[3][i] = q33(by);
; 271  : #endif
; 272  :             }
; 273  :             break;
; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  00026	33 d2		 xor	 edx, edx
  00028	8d 8e b8 00 00
	00		 lea	 ecx, DWORD PTR [esi+184]
  0002e	8b ff		 npad	 2
$LL3@gen_mk_tab:

; 276  :             {
; 277  :                 by = (u1byte)i;
; 278  : #ifdef ONE_STEP
; 279  :                 mk_tab[0 + 4*i] = mds(0, q40(by)); mk_tab[1 + 4*i] = mds(1, q41(by));

  00030	0f b6 78 0c	 movzx	 edi, BYTE PTR [eax+12]
  00034	0f b6 f2	 movzx	 esi, dl
  00037	0f b6 9e 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi+256]
  0003e	33 fb		 xor	 edi, ebx
  00040	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  00047	0f b6 58 08	 movzx	 ebx, BYTE PTR [eax+8]
  0004b	33 fb		 xor	 edi, ebx
  0004d	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00054	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  00058	33 fb		 xor	 edi, ebx
  0005a	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00061	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00064	33 fb		 xor	 edi, ebx
  00066	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  0006d	89 79 f8	 mov	 DWORD PTR [ecx-8], edi
  00070	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00073	c1 eb 08	 shr	 ebx, 8
  00076	0f b6 fb	 movzx	 edi, bl
  00079	0f b6 9e 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi]
  00080	33 fb		 xor	 edi, ebx
  00082	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  00089	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  0008c	c1 eb 08	 shr	 ebx, 8
  0008f	0f b6 db	 movzx	 ebx, bl
  00092	33 fb		 xor	 edi, ebx
  00094	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  0009b	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0009e	c1 eb 08	 shr	 ebx, 8
  000a1	0f b6 db	 movzx	 ebx, bl
  000a4	33 fb		 xor	 edi, ebx
  000a6	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000ad	8b 18		 mov	 ebx, DWORD PTR [eax]
  000af	c1 eb 08	 shr	 ebx, 8
  000b2	0f b6 db	 movzx	 ebx, bl
  000b5	33 fb		 xor	 edi, ebx
  000b7	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  000be	89 79 fc	 mov	 DWORD PTR [ecx-4], edi

; 280  :                 mk_tab[2 + 4*i] = mds(2, q42(by)); mk_tab[3 + 4*i] = mds(3, q43(by));

  000c1	0f b6 9e 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi]
  000c8	0f b6 78 0e	 movzx	 edi, BYTE PTR [eax+14]
  000cc	33 fb		 xor	 edi, ebx
  000ce	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000d5	0f b6 58 0a	 movzx	 ebx, BYTE PTR [eax+10]
  000d9	33 fb		 xor	 edi, ebx
  000db	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000e2	0f b6 58 06	 movzx	 ebx, BYTE PTR [eax+6]
  000e6	33 fb		 xor	 edi, ebx
  000e8	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  000ef	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  000f3	33 fb		 xor	 edi, ebx
  000f5	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  000fc	89 39		 mov	 DWORD PTR [ecx], edi
  000fe	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  00105	0f b6 78 0f	 movzx	 edi, BYTE PTR [eax+15]
  00109	33 fe		 xor	 edi, esi
  0010b	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _q_tab[edi]
  00112	0f b6 78 0b	 movzx	 edi, BYTE PTR [eax+11]
  00116	33 f7		 xor	 esi, edi
  00118	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  0011f	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  00123	33 f7		 xor	 esi, edi
  00125	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  0012c	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  00130	33 f7		 xor	 esi, edi
  00132	8b 34 b5 00 0c
	00 00		 mov	 esi, DWORD PTR _m_tab[esi*4+3072]
  00139	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  0013c	42		 inc	 edx
  0013d	83 c1 10	 add	 ecx, 16			; 00000010H
  00140	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  00146	0f 82 e4 fe ff
	ff		 jb	 $LL3@gen_mk_tab
  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }
; 286  :     }
; 287  : };

  0014f	c3		 ret	 0
$LN8@gen_mk_tab:

; 255  : #else
; 256  :                 sb[0][i] = q20(by); sb[1][i] = q21(by); 
; 257  :                 sb[2][i] = q22(by); sb[3][i] = q23(by);
; 258  : #endif
; 259  :             }
; 260  :             break;
; 261  :     
; 262  :     case 3: for(i = 0; i < 256; ++i)

  00150	33 d2		 xor	 edx, edx
  00152	8d 8e b8 00 00
	00		 lea	 ecx, DWORD PTR [esi+184]
  00158	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL7@gen_mk_tab:

; 263  :             {
; 264  :                 by = (u1byte)i;
; 265  : #ifdef ONE_STEP
; 266  :                 mk_tab[0 + 4*i] = mds(0, q30(by)); mk_tab[1 + 4*i] = mds(1, q31(by));

  00160	0f b6 78 08	 movzx	 edi, BYTE PTR [eax+8]
  00164	0f b6 f2	 movzx	 esi, dl
  00167	0f b6 9e 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi+256]
  0016e	33 fb		 xor	 edi, ebx
  00170	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00177	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  0017b	33 fb		 xor	 edi, ebx
  0017d	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00184	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00187	33 fb		 xor	 edi, ebx
  00189	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  00190	89 79 f8	 mov	 DWORD PTR [ecx-8], edi
  00193	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00196	c1 eb 08	 shr	 ebx, 8
  00199	0f b6 fb	 movzx	 edi, bl
  0019c	0f b6 9e 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi+256]
  001a3	33 fb		 xor	 edi, ebx
  001a5	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  001ac	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  001af	c1 eb 08	 shr	 ebx, 8
  001b2	0f b6 db	 movzx	 ebx, bl
  001b5	33 fb		 xor	 edi, ebx
  001b7	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  001be	8b 18		 mov	 ebx, DWORD PTR [eax]
  001c0	c1 eb 08	 shr	 ebx, 8
  001c3	0f b6 db	 movzx	 ebx, bl
  001c6	33 fb		 xor	 edi, ebx
  001c8	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  001cf	89 79 fc	 mov	 DWORD PTR [ecx-4], edi

; 267  :                 mk_tab[2 + 4*i] = mds(2, q32(by)); mk_tab[3 + 4*i] = mds(3, q33(by));

  001d2	0f b6 9e 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi]
  001d9	0f b6 78 0a	 movzx	 edi, BYTE PTR [eax+10]
  001dd	33 fb		 xor	 edi, ebx
  001df	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  001e6	0f b6 58 06	 movzx	 ebx, BYTE PTR [eax+6]
  001ea	33 fb		 xor	 edi, ebx
  001ec	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  001f3	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  001f7	33 fb		 xor	 edi, ebx
  001f9	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  00200	89 39		 mov	 DWORD PTR [ecx], edi
  00202	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi]
  00209	0f b6 78 0b	 movzx	 edi, BYTE PTR [eax+11]
  0020d	33 fe		 xor	 edi, esi
  0020f	0f b6 b7 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[edi+256]
  00216	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  0021a	33 f7		 xor	 esi, edi
  0021c	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  00223	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  00227	33 f7		 xor	 esi, edi
  00229	8b 34 b5 00 0c
	00 00		 mov	 esi, DWORD PTR _m_tab[esi*4+3072]
  00230	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00233	42		 inc	 edx
  00234	83 c1 10	 add	 ecx, 16			; 00000010H
  00237	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0023d	0f 82 1d ff ff
	ff		 jb	 $LL7@gen_mk_tab
  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }
; 286  :     }
; 287  : };

  00246	c3		 ret	 0
$LN12@gen_mk_tab:

; 248  :     {
; 249  :     case 2: for(i = 0; i < 256; ++i)

  00247	33 d2		 xor	 edx, edx
  00249	8d 8e b8 00 00
	00		 lea	 ecx, DWORD PTR [esi+184]
  0024f	90		 npad	 1
$LL11@gen_mk_tab:

; 250  :             {
; 251  :                 by = (u1byte)i;
; 252  : #ifdef ONE_STEP
; 253  :                 mk_tab[0 + 4*i] = mds(0, q20(by)); mk_tab[1 + 4*i] = mds(1, q21(by));

  00250	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  00254	0f b6 f2	 movzx	 esi, dl
  00257	0f b6 be 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[esi]
  0025e	33 fb		 xor	 edi, ebx
  00260	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00267	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  0026a	33 fb		 xor	 edi, ebx
  0026c	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  00273	89 79 f8	 mov	 DWORD PTR [ecx-8], edi
  00276	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00279	c1 eb 08	 shr	 ebx, 8
  0027c	0f b6 fb	 movzx	 edi, bl
  0027f	0f b6 9e 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi+256]
  00286	33 fb		 xor	 edi, ebx
  00288	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  0028f	8b 18		 mov	 ebx, DWORD PTR [eax]
  00291	c1 eb 08	 shr	 ebx, 8
  00294	0f b6 db	 movzx	 ebx, bl
  00297	33 fb		 xor	 edi, ebx
  00299	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  002a0	89 79 fc	 mov	 DWORD PTR [ecx-4], edi

; 254  :                 mk_tab[2 + 4*i] = mds(2, q22(by)); mk_tab[3 + 4*i] = mds(3, q23(by));

  002a3	0f b6 9e 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[esi]
  002aa	0f b6 78 06	 movzx	 edi, BYTE PTR [eax+6]
  002ae	33 fb		 xor	 edi, ebx
  002b0	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  002b7	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  002bb	33 fb		 xor	 edi, ebx
  002bd	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  002c4	89 39		 mov	 DWORD PTR [ecx], edi
  002c6	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  002cd	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  002d1	33 fe		 xor	 edi, esi
  002d3	0f b6 b7 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[edi+256]
  002da	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  002de	33 f7		 xor	 esi, edi
  002e0	8b 34 b5 00 0c
	00 00		 mov	 esi, DWORD PTR _m_tab[esi*4+3072]
  002e7	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  002ea	42		 inc	 edx
  002eb	83 c1 10	 add	 ecx, 16			; 00000010H
  002ee	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  002f4	0f 82 56 ff ff
	ff		 jb	 $LL11@gen_mk_tab
$LN9@gen_mk_tab:
  002fa	5f		 pop	 edi
  002fb	5e		 pop	 esi
  002fc	5b		 pop	 ebx

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }
; 286  :     }
; 287  : };

  002fd	c3		 ret	 0
_gen_mk_tab ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _mds_rem
_TEXT	SEGMENT
_mds_rem PROC						; COMDAT
; _p0$ = ecx
; _p1$ = eax

; 340  : {   u4byte  i, t, u;

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 341  : 
; 342  :     for(i = 0; i < 8; ++i)

  00005	bf 08 00 00 00	 mov	 edi, 8
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL5@mds_rem:

; 343  :     {
; 344  :         t = p1 >> 24;   // get most significant coefficient

  00010	8b c8		 mov	 ecx, eax

; 345  :         
; 346  :         p1 = (p1 << 8) | (p0 >> 24); p0 <<= 8;  // shift others up

  00012	8b d6		 mov	 edx, esi
  00014	c1 ea 18	 shr	 edx, 24			; 00000018H
  00017	c1 e0 08	 shl	 eax, 8
  0001a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0001d	0b c2		 or	 eax, edx
  0001f	c1 e6 08	 shl	 esi, 8

; 347  :             
; 348  :         // multiply t by a (the primitive element - i.e. left shift)
; 349  : 
; 350  :         u = (t << 1); 

  00022	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 351  :         
; 352  :         if(t & 0x80)            // subtract modular polynomial on overflow

  00025	84 c9		 test	 cl, cl
  00027	79 06		 jns	 SHORT $LN2@mds_rem

; 353  :         
; 354  :             u ^= G_MOD; 

  00029	81 f2 4d 01 00
	00		 xor	 edx, 333		; 0000014dH
$LN2@mds_rem:

; 355  : 
; 356  :         p1 ^= t ^ (u << 16);    // remove t * (a * x^2 + 1)  

  0002f	8b da		 mov	 ebx, edx
  00031	c1 e3 10	 shl	 ebx, 16			; 00000010H
  00034	33 d9		 xor	 ebx, ecx
  00036	33 c3		 xor	 eax, ebx

; 357  : 
; 358  :         u ^= (t >> 1);          // form u = a * t + t / a = t * (a + 1 / a); 

  00038	8b d9		 mov	 ebx, ecx
  0003a	d1 eb		 shr	 ebx, 1
  0003c	33 d3		 xor	 edx, ebx

; 359  :         
; 360  :         if(t & 0x01)            // add the modular polynomial on underflow

  0003e	f6 c1 01	 test	 cl, 1
  00041	74 06		 je	 SHORT $LN1@mds_rem

; 361  :         
; 362  :             u ^= G_MOD >> 1;

  00043	81 f2 a6 00 00
	00		 xor	 edx, 166		; 000000a6H
$LN1@mds_rem:

; 363  : 
; 364  :         p1 ^= (u << 24) | (u << 8); // remove t * (a + 1/a) * (x^3 + x)

  00049	8b ca		 mov	 ecx, edx
  0004b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0004e	0b ca		 or	 ecx, edx
  00050	c1 e1 08	 shl	 ecx, 8
  00053	33 c1		 xor	 eax, ecx
  00055	83 ef 01	 sub	 edi, 1
  00058	75 b6		 jne	 SHORT $LL5@mds_rem
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 365  :     }
; 366  : 
; 367  :     return p1;
; 368  : };

  0005d	c3		 ret	 0
_mds_rem ENDP
_TEXT	ENDS
PUBLIC	_twofish_set_key
; Function compile flags: /Ogtpy
;	COMDAT _twofish_set_key
_TEXT	SEGMENT
_me_key$ = -32						; size = 16
_mo_key$ = -16						; size = 16
_instance$ = 8						; size = 4
_in_key$ = 12						; size = 4
_key_len$ = 16						; size = 4
_twofish_set_key PROC					; COMDAT

; 373  : {   u4byte  i, a, b, me_key[4], mo_key[4];

  00000	83 ec 20	 sub	 esp, 32			; 00000020H

; 374  : 	u4byte *l_key, *s_key;
; 375  : 
; 376  : 	l_key = instance->l_key;
; 377  : 	s_key = instance->s_key;
; 378  : 
; 379  : #ifdef Q_TABLES
; 380  :     if(!qt_gen)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _qt_gen, 0
  0000a	53		 push	 ebx
  0000b	55		 push	 ebp
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7c 24 34	 mov	 edi, DWORD PTR _instance$[esp+44]
  00012	8d af a0 00 00
	00		 lea	 ebp, DWORD PTR [edi+160]
  00018	75 0f		 jne	 SHORT $LN15@twofish_se

; 381  :     {
; 382  :         gen_qtab(); qt_gen = 1;

  0001a	e8 00 00 00 00	 call	 _gen_qtab
  0001f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _qt_gen, 1
$LN15@twofish_se:

; 383  :     }
; 384  : #endif
; 385  : 
; 386  : #ifdef M_TABLE
; 387  :     if(!mt_gen)

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _mt_gen, 0
  00030	75 0f		 jne	 SHORT $LN7@twofish_se

; 388  :     {
; 389  :         gen_mtab(); mt_gen = 1;

  00032	e8 00 00 00 00	 call	 _gen_mtab
  00037	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _mt_gen, 1
$LN7@twofish_se:

; 390  :     }
; 391  : #endif
; 392  : 
; 393  :     instance->k_len = key_len / 64;   /* 2, 3 or 4 */

  00041	8b 44 24 3c	 mov	 eax, DWORD PTR _key_len$[esp+44]
  00045	c1 e8 06	 shr	 eax, 6

; 394  : 
; 395  :     for(i = 0; i < instance->k_len; ++i)

  00048	33 f6		 xor	 esi, esi
  0004a	89 87 b0 10 00
	00		 mov	 DWORD PTR [edi+4272], eax
  00050	85 c0		 test	 eax, eax
  00052	76 35		 jbe	 SHORT $LN4@twofish_se
  00054	8b 5c 24 38	 mov	 ebx, DWORD PTR _in_key$[esp+44]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL6@twofish_se:

; 396  :     {
; 397  :         a = LE32(in_key[i + i]);     me_key[i] = a;

  00060	8b 0c f3	 mov	 ecx, DWORD PTR [ebx+esi*8]

; 398  :         b = LE32(in_key[i + i + 1]); mo_key[i] = b;

  00063	8b 44 f3 04	 mov	 eax, DWORD PTR [ebx+esi*8+4]
  00067	89 4c b4 10	 mov	 DWORD PTR _me_key$[esp+esi*4+48], ecx
  0006b	89 44 b4 20	 mov	 DWORD PTR _mo_key$[esp+esi*4+48], eax

; 399  :         s_key[instance->k_len - i - 1] = mds_rem(a, b);

  0006f	e8 00 00 00 00	 call	 _mds_rem
  00074	8b 8f b0 10 00
	00		 mov	 ecx, DWORD PTR [edi+4272]
  0007a	2b ce		 sub	 ecx, esi
  0007c	46		 inc	 esi
  0007d	89 44 8d fc	 mov	 DWORD PTR [ebp+ecx*4-4], eax
  00081	3b b7 b0 10 00
	00		 cmp	 esi, DWORD PTR [edi+4272]
  00087	72 d7		 jb	 SHORT $LL6@twofish_se
$LN4@twofish_se:

; 400  :     }
; 401  : 
; 402  :     for(i = 0; i < 40; i += 2)

  00089	33 f6		 xor	 esi, esi
  0008b	8b df		 mov	 ebx, edi
  0008d	8d 49 00	 npad	 3
$LL3@twofish_se:

; 403  :     {
; 404  :         a = 0x01010101 * i; b = a + 0x01010101;
; 405  :         a = h_fun(instance, a, me_key);

  00090	56		 push	 esi
  00091	57		 push	 edi
  00092	8d 44 24 18	 lea	 eax, DWORD PTR _me_key$[esp+56]
  00096	e8 00 00 00 00	 call	 _h_fun

; 406  :         b = rotl(h_fun(instance, b, mo_key), 8);

  0009b	8d 96 01 01 01
	01		 lea	 edx, DWORD PTR [esi+16843009]
  000a1	52		 push	 edx
  000a2	8b e8		 mov	 ebp, eax
  000a4	57		 push	 edi
  000a5	8d 44 24 30	 lea	 eax, DWORD PTR _mo_key$[esp+64]
  000a9	e8 00 00 00 00	 call	 _h_fun
  000ae	83 c4 10	 add	 esp, 16			; 00000010H
  000b1	c1 c0 08	 rol	 eax, 8

; 407  :         l_key[i] = a + b;
; 408  :         l_key[i + 1] = rotl(a + 2 * b, 9);

  000b4	8d 54 45 00	 lea	 edx, DWORD PTR [ebp+eax*2]
  000b8	c1 c2 09	 rol	 edx, 9
  000bb	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  000be	89 0b		 mov	 DWORD PTR [ebx], ecx
  000c0	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  000c3	81 c6 02 02 02
	02		 add	 esi, 33686018		; 02020202H
  000c9	83 c3 08	 add	 ebx, 8
  000cc	81 fe 28 28 28
	28		 cmp	 esi, 673720360		; 28282828H
  000d2	72 bc		 jb	 SHORT $LL3@twofish_se

; 409  :     }
; 410  : 
; 411  : #ifdef MK_TABLE
; 412  :     gen_mk_tab(instance, s_key);

  000d4	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
  000da	8b cf		 mov	 ecx, edi
  000dc	e8 00 00 00 00	 call	 _gen_mk_tab

; 413  : #endif
; 414  : 
; 415  :     return l_key;

  000e1	8b c7		 mov	 eax, edi
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5d		 pop	 ebp
  000e6	5b		 pop	 ebx

; 416  : };

  000e7	83 c4 20	 add	 esp, 32			; 00000020H
  000ea	c3		 ret	 0
_twofish_set_key ENDP
_TEXT	ENDS
PUBLIC	_twofish_encrypt
; Function compile flags: /Ogtpy
;	COMDAT _twofish_encrypt
_TEXT	SEGMENT
tv1999 = -20						; size = 4
tv1998 = -20						; size = 4
tv1997 = -20						; size = 4
tv1996 = -20						; size = 4
tv1995 = -20						; size = 4
tv1994 = -20						; size = 4
tv1993 = -20						; size = 4
tv1992 = -20						; size = 4
_blk$ = -16						; size = 16
tv167 = 8						; size = 4
_t1$ = 8						; size = 4
_instance$ = 8						; size = 4
_t0$ = 12						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_encrypt PROC					; COMDAT

; 431  : {   u4byte  t0, t1, blk[4];

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 432  : 
; 433  : 	u4byte *l_key = instance->l_key;
; 434  : 	u4byte *mk_tab = instance->mk_tab;

  00003	8b 44 24 18	 mov	 eax, DWORD PTR _instance$[esp+16]

; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];
; 437  :     blk[1] = LE32(in_blk[1]) ^ l_key[1];

  00007	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	53		 push	 ebx
  0000d	55		 push	 ebp

; 438  :     blk[2] = LE32(in_blk[2]) ^ l_key[2];
; 439  :     blk[3] = LE32(in_blk[3]) ^ l_key[3];

  0000e	8b 68 0c	 mov	 ebp, DWORD PTR [eax+12]
  00011	56		 push	 esi
  00012	8b 74 24 28	 mov	 esi, DWORD PTR _in_blk$[esp+28]
  00016	33 16		 xor	 edx, DWORD PTR [esi]
  00018	33 4e 04	 xor	 ecx, DWORD PTR [esi+4]
  0001b	33 6e 0c	 xor	 ebp, DWORD PTR [esi+12]
  0001e	57		 push	 edi
  0001f	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  00022	33 7e 08	 xor	 edi, DWORD PTR [esi+8]

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  00025	8b d9		 mov	 ebx, ecx
  00027	89 7c 24 1c	 mov	 DWORD PTR _blk$[esp+44], edi
  0002b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0002e	0f b6 f3	 movzx	 esi, bl
  00031	c1 e6 04	 shl	 esi, 4
  00034	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0003b	8b f9		 mov	 edi, ecx
  0003d	c1 ef 18	 shr	 edi, 24			; 00000018H
  00040	c1 e7 04	 shl	 edi, 4
  00043	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0004a	8b d9		 mov	 ebx, ecx
  0004c	c1 eb 08	 shr	 ebx, 8
  0004f	0f b6 fb	 movzx	 edi, bl
  00052	c1 e7 04	 shl	 edi, 4
  00055	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0005c	8b da		 mov	 ebx, edx
  0005e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00061	0f b6 f9	 movzx	 edi, cl
  00064	c1 e7 04	 shl	 edi, 4
  00067	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  0006e	8b fa		 mov	 edi, edx
  00070	c1 ef 18	 shr	 edi, 24			; 00000018H
  00073	c1 e7 04	 shl	 edi, 4
  00076	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  0007d	0f b6 db	 movzx	 ebx, bl
  00080	c1 e3 04	 shl	 ebx, 4
  00083	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  0008a	8b da		 mov	 ebx, edx
  0008c	c1 eb 08	 shr	 ebx, 8
  0008f	0f b6 db	 movzx	 ebx, bl
  00092	89 54 24 14	 mov	 DWORD PTR _blk$[esp+36], edx
  00096	c1 e3 04	 shl	 ebx, 4
  00099	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  000a0	8b 58 24	 mov	 ebx, DWORD PTR [eax+36]
  000a3	0f b6 d2	 movzx	 edx, dl
  000a6	c1 e2 04	 shl	 edx, 4
  000a9	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  000b0	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000b3	03 d7		 add	 edx, edi
  000b5	03 d6		 add	 edx, esi
  000b7	33 54 24 1c	 xor	 edx, DWORD PTR _blk$[esp+44]
  000bb	8d 34 73	 lea	 esi, DWORD PTR [ebx+esi*2]
  000be	03 f7		 add	 esi, edi
  000c0	d1 ca		 ror	 edx, 1
  000c2	d1 c5		 rol	 ebp, 1
  000c4	33 ee		 xor	 ebp, esi
  000c6	8b dd		 mov	 ebx, ebp
  000c8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000cb	0f b6 f3	 movzx	 esi, bl
  000ce	c1 e6 04	 shl	 esi, 4
  000d1	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  000d8	8b fd		 mov	 edi, ebp
  000da	c1 ef 18	 shr	 edi, 24			; 00000018H
  000dd	c1 e7 04	 shl	 edi, 4
  000e0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  000e7	8b dd		 mov	 ebx, ebp
  000e9	c1 eb 08	 shr	 ebx, 8
  000ec	0f b6 fb	 movzx	 edi, bl
  000ef	c1 e7 04	 shl	 edi, 4
  000f2	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  000f9	89 6c 24 20	 mov	 DWORD PTR _blk$[esp+48], ebp
  000fd	0f b6 7c 24 20	 movzx	 edi, BYTE PTR _blk$[esp+48]
  00102	c1 e7 04	 shl	 edi, 4
  00105	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  0010c	8b fa		 mov	 edi, edx
  0010e	89 54 24 1c	 mov	 DWORD PTR _blk$[esp+44], edx
  00112	c1 ef 18	 shr	 edi, 24			; 00000018H
  00115	c1 e7 04	 shl	 edi, 4
  00118	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  0011f	8b da		 mov	 ebx, edx
  00121	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00124	0f b6 db	 movzx	 ebx, bl
  00127	c1 e3 04	 shl	 ebx, 4
  0012a	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  00131	8b da		 mov	 ebx, edx
  00133	c1 eb 08	 shr	 ebx, 8
  00136	0f b6 db	 movzx	 ebx, bl
  00139	c1 e3 04	 shl	 ebx, 4
  0013c	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  00143	8b 58 2c	 mov	 ebx, DWORD PTR [eax+44]
  00146	0f b6 d2	 movzx	 edx, dl
  00149	c1 e2 04	 shl	 edx, 4
  0014c	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  00153	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00156	03 d7		 add	 edx, edi
  00158	03 d6		 add	 edx, esi
  0015a	33 54 24 14	 xor	 edx, DWORD PTR _blk$[esp+36]
  0015e	8d 34 73	 lea	 esi, DWORD PTR [ebx+esi*2]
  00161	03 f7		 add	 esi, edi
  00163	d1 ca		 ror	 edx, 1
  00165	d1 c1		 rol	 ecx, 1
  00167	33 ce		 xor	 ecx, esi
  00169	8b d9		 mov	 ebx, ecx
  0016b	8b f9		 mov	 edi, ecx
  0016d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00170	0f b6 f3	 movzx	 esi, bl
  00173	8b d9		 mov	 ebx, ecx
  00175	c1 ef 18	 shr	 edi, 24			; 00000018H
  00178	89 4c 24 18	 mov	 DWORD PTR _blk$[esp+40], ecx
  0017c	c1 e7 04	 shl	 edi, 4
  0017f	0f b6 c9	 movzx	 ecx, cl
  00182	c1 eb 08	 shr	 ebx, 8
  00185	c1 e1 04	 shl	 ecx, 4
  00188	c1 e6 04	 shl	 esi, 4
  0018b	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00192	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00199	0f b6 fb	 movzx	 edi, bl
  0019c	c1 e7 04	 shl	 edi, 4
  0019f	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  001a6	8b da		 mov	 ebx, edx
  001a8	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  001af	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001b2	8b ca		 mov	 ecx, edx
  001b4	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001b7	c1 e1 04	 shl	 ecx, 4
  001ba	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  001c1	0f b6 db	 movzx	 ebx, bl
  001c4	c1 e3 04	 shl	 ebx, 4
  001c7	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  001ce	8b 58 30	 mov	 ebx, DWORD PTR [eax+48]
  001d1	8b ca		 mov	 ecx, edx
  001d3	c1 e9 08	 shr	 ecx, 8
  001d6	0f b6 c9	 movzx	 ecx, cl
  001d9	c1 e1 04	 shl	 ecx, 4
  001dc	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  001e3	0f b6 ca	 movzx	 ecx, dl
  001e6	c1 e1 04	 shl	 ecx, 4
  001e9	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  001f0	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001f3	03 df		 add	 ebx, edi
  001f5	03 de		 add	 ebx, esi
  001f7	33 5c 24 1c	 xor	 ebx, DWORD PTR _blk$[esp+44]
  001fb	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  001fe	03 cf		 add	 ecx, edi
  00200	d1 cb		 ror	 ebx, 1
  00202	d1 c5		 rol	 ebp, 1
  00204	33 e9		 xor	 ebp, ecx
  00206	8b cd		 mov	 ecx, ebp
  00208	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0020b	0f b6 c9	 movzx	 ecx, cl
  0020e	c1 e1 04	 shl	 ecx, 4
  00211	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00218	8b fd		 mov	 edi, ebp
  0021a	c1 ef 18	 shr	 edi, 24			; 00000018H
  0021d	c1 e7 04	 shl	 edi, 4
  00220	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00227	89 6c 24 20	 mov	 DWORD PTR _blk$[esp+48], ebp
  0022b	8b cd		 mov	 ecx, ebp
  0022d	c1 e9 08	 shr	 ecx, 8
  00230	0f b6 c9	 movzx	 ecx, cl
  00233	c1 e1 04	 shl	 ecx, 4
  00236	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  0023d	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR _blk$[esp+48]
  00242	89 54 24 10	 mov	 DWORD PTR tv1999[esp+36], edx
  00246	c1 e1 04	 shl	 ecx, 4
  00249	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00250	8b cb		 mov	 ecx, ebx
  00252	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  00256	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00259	c1 e1 04	 shl	 ecx, 4
  0025c	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00263	8b d3		 mov	 edx, ebx
  00265	c1 ea 10	 shr	 edx, 16			; 00000010H
  00268	0f b6 fa	 movzx	 edi, dl
  0026b	8b 54 24 10	 mov	 edx, DWORD PTR tv1999[esp+36]
  0026f	c1 e7 04	 shl	 edi, 4
  00272	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00279	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  0027d	8b cb		 mov	 ecx, ebx
  0027f	c1 e9 08	 shr	 ecx, 8
  00282	0f b6 c9	 movzx	 ecx, cl
  00285	c1 e1 04	 shl	 ecx, 4
  00288	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  0028f	0f b6 cb	 movzx	 ecx, bl
  00292	c1 e1 04	 shl	 ecx, 4
  00295	33 b4 01 b0 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+176]
  0029c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0029f	03 ce		 add	 ecx, esi
  002a1	03 4c 24 28	 add	 ecx, DWORD PTR _t1$[esp+32]
  002a5	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  002a9	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  002ad	33 ca		 xor	 ecx, edx
  002af	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  002b2	8d 14 7a	 lea	 edx, DWORD PTR [edx+edi*2]
  002b5	03 54 24 2c	 add	 edx, DWORD PTR _t0$[esp+32]
  002b9	d1 c9		 ror	 ecx, 1
  002bb	d1 c6		 rol	 esi, 1
  002bd	33 f2		 xor	 esi, edx
  002bf	8b d6		 mov	 edx, esi
  002c1	c1 ea 10	 shr	 edx, 16			; 00000010H
  002c4	0f b6 d2	 movzx	 edx, dl
  002c7	c1 e2 04	 shl	 edx, 4
  002ca	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi
  002ce	8b fe		 mov	 edi, esi
  002d0	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  002d7	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  002db	c1 ea 08	 shr	 edx, 8
  002de	0f b6 d2	 movzx	 edx, dl
  002e1	c1 e2 04	 shl	 edx, 4
  002e4	c1 ef 18	 shr	 edi, 24			; 00000018H
  002e7	c1 e7 04	 shl	 edi, 4
  002ea	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  002f1	89 5c 24 10	 mov	 DWORD PTR tv1998[esp+36], ebx
  002f5	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  002fc	0f b6 54 24 18	 movzx	 edx, BYTE PTR _blk$[esp+40]
  00301	c1 e2 04	 shl	 edx, 4
  00304	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0030b	8b d1		 mov	 edx, ecx
  0030d	c1 ea 18	 shr	 edx, 24			; 00000018H
  00310	c1 e2 04	 shl	 edx, 4
  00313	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  00317	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0031e	8b d9		 mov	 ebx, ecx
  00320	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00323	8b d1		 mov	 edx, ecx
  00325	c1 ea 08	 shr	 edx, 8
  00328	0f b6 d2	 movzx	 edx, dl
  0032b	0f b6 fb	 movzx	 edi, bl
  0032e	c1 e2 04	 shl	 edx, 4
  00331	c1 e7 04	 shl	 edi, 4
  00334	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0033b	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00342	0f b6 d1	 movzx	 edx, cl
  00345	c1 e2 04	 shl	 edx, 4
  00348	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  0034f	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00352	03 d6		 add	 edx, esi
  00354	03 54 24 28	 add	 edx, DWORD PTR _t1$[esp+32]
  00358	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  0035c	8b 5c 24 10	 mov	 ebx, DWORD PTR tv1998[esp+36]
  00360	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  00363	33 d3		 xor	 edx, ebx
  00365	8b 5c 24 28	 mov	 ebx, DWORD PTR _t1$[esp+32]
  00369	8d 3c 5f	 lea	 edi, DWORD PTR [edi+ebx*2]
  0036c	03 7c 24 2c	 add	 edi, DWORD PTR _t0$[esp+32]
  00370	d1 ca		 ror	 edx, 1
  00372	8b f5		 mov	 esi, ebp
  00374	d1 c6		 rol	 esi, 1
  00376	33 f7		 xor	 esi, edi
  00378	8b de		 mov	 ebx, esi
  0037a	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  0037e	8b 7c 24 20	 mov	 edi, DWORD PTR _blk$[esp+48]
  00382	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00385	c1 ef 18	 shr	 edi, 24			; 00000018H
  00388	0f b6 f3	 movzx	 esi, bl
  0038b	8b 5c 24 20	 mov	 ebx, DWORD PTR _blk$[esp+48]
  0038f	c1 e6 04	 shl	 esi, 4
  00392	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00399	c1 e7 04	 shl	 edi, 4
  0039c	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  003a3	c1 eb 08	 shr	 ebx, 8
  003a6	0f b6 fb	 movzx	 edi, bl
  003a9	c1 e7 04	 shl	 edi, 4
  003ac	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  003b3	0f b6 7c 24 20	 movzx	 edi, BYTE PTR _blk$[esp+48]
  003b8	c1 e7 04	 shl	 edi, 4
  003bb	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  003c2	8b da		 mov	 ebx, edx
  003c4	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  003c8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003cb	0f b6 fb	 movzx	 edi, bl
  003ce	c1 e7 04	 shl	 edi, 4
  003d1	8b f2		 mov	 esi, edx
  003d3	c1 ee 18	 shr	 esi, 24			; 00000018H
  003d6	c1 e6 04	 shl	 esi, 4
  003d9	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  003e0	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  003e7	8b da		 mov	 ebx, edx
  003e9	c1 eb 08	 shr	 ebx, 8
  003ec	0f b6 fb	 movzx	 edi, bl
  003ef	8b 58 48	 mov	 ebx, DWORD PTR [eax+72]
  003f2	c1 e7 04	 shl	 edi, 4
  003f5	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  003fc	0f b6 fa	 movzx	 edi, dl
  003ff	c1 e7 04	 shl	 edi, 4
  00402	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00409	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  0040d	03 de		 add	 ebx, esi
  0040f	03 5c 24 28	 add	 ebx, DWORD PTR _t1$[esp+32]
  00413	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  00417	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  0041b	33 d9		 xor	 ebx, ecx
  0041d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00420	8d 0c 79	 lea	 ecx, DWORD PTR [ecx+edi*2]
  00423	03 4c 24 2c	 add	 ecx, DWORD PTR _t0$[esp+32]
  00427	d1 cb		 ror	 ebx, 1
  00429	d1 c6		 rol	 esi, 1
  0042b	33 f1		 xor	 esi, ecx
  0042d	8b ce		 mov	 ecx, esi
  0042f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00432	0f b6 c9	 movzx	 ecx, cl
  00435	c1 e1 04	 shl	 ecx, 4
  00438	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi
  0043c	8b fe		 mov	 edi, esi
  0043e	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00445	8b 4c 24 18	 mov	 ecx, DWORD PTR _blk$[esp+40]
  00449	c1 e9 08	 shr	 ecx, 8
  0044c	0f b6 c9	 movzx	 ecx, cl
  0044f	c1 ef 18	 shr	 edi, 24			; 00000018H
  00452	c1 e1 04	 shl	 ecx, 4
  00455	c1 e7 04	 shl	 edi, 4
  00458	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0045f	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00466	0f b6 4c 24 18	 movzx	 ecx, BYTE PTR _blk$[esp+40]
  0046b	c1 e1 04	 shl	 ecx, 4
  0046e	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00475	8b cb		 mov	 ecx, ebx
  00477	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0047a	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  0047e	c1 e1 04	 shl	 ecx, 4
  00481	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00488	89 54 24 10	 mov	 DWORD PTR tv1997[esp+36], edx
  0048c	8b d3		 mov	 edx, ebx
  0048e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00491	0f b6 fa	 movzx	 edi, dl
  00494	8b 54 24 10	 mov	 edx, DWORD PTR tv1997[esp+36]
  00498	c1 e7 04	 shl	 edi, 4
  0049b	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  004a2	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  004a6	8b cb		 mov	 ecx, ebx
  004a8	c1 e9 08	 shr	 ecx, 8
  004ab	0f b6 c9	 movzx	 ecx, cl
  004ae	c1 e1 04	 shl	 ecx, 4
  004b1	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  004b8	0f b6 cb	 movzx	 ecx, bl
  004bb	c1 e1 04	 shl	 ecx, 4
  004be	33 b4 01 b0 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+176]
  004c5	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  004c8	03 ce		 add	 ecx, esi
  004ca	03 4c 24 28	 add	 ecx, DWORD PTR _t1$[esp+32]
  004ce	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  004d2	33 ca		 xor	 ecx, edx
  004d4	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  004d7	8b 74 24 20	 mov	 esi, DWORD PTR _blk$[esp+48]
  004db	8d 14 7a	 lea	 edx, DWORD PTR [edx+edi*2]
  004de	03 54 24 2c	 add	 edx, DWORD PTR _t0$[esp+32]
  004e2	d1 c9		 ror	 ecx, 1
  004e4	d1 c6		 rol	 esi, 1
  004e6	33 f2		 xor	 esi, edx
  004e8	8b d6		 mov	 edx, esi
  004ea	c1 ea 10	 shr	 edx, 16			; 00000010H
  004ed	0f b6 d2	 movzx	 edx, dl
  004f0	c1 e2 04	 shl	 edx, 4
  004f3	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  004f7	8b fe		 mov	 edi, esi
  004f9	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00500	8b 54 24 20	 mov	 edx, DWORD PTR _blk$[esp+48]
  00504	c1 ea 08	 shr	 edx, 8
  00507	0f b6 d2	 movzx	 edx, dl
  0050a	c1 e2 04	 shl	 edx, 4
  0050d	c1 ef 18	 shr	 edi, 24			; 00000018H
  00510	c1 e7 04	 shl	 edi, 4
  00513	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0051a	89 5c 24 10	 mov	 DWORD PTR tv1996[esp+36], ebx
  0051e	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00525	0f b6 54 24 20	 movzx	 edx, BYTE PTR _blk$[esp+48]
  0052a	c1 e2 04	 shl	 edx, 4
  0052d	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00534	8b d1		 mov	 edx, ecx
  00536	c1 ea 18	 shr	 edx, 24			; 00000018H
  00539	c1 e2 04	 shl	 edx, 4
  0053c	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  00540	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00547	8b d9		 mov	 ebx, ecx
  00549	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0054c	0f b6 fb	 movzx	 edi, bl
  0054f	8b 5c 24 10	 mov	 ebx, DWORD PTR tv1996[esp+36]
  00553	c1 e7 04	 shl	 edi, 4
  00556	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0055d	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  00560	8b d1		 mov	 edx, ecx
  00562	c1 ea 08	 shr	 edx, 8
  00565	0f b6 d2	 movzx	 edx, dl
  00568	c1 e2 04	 shl	 edx, 4
  0056b	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00572	0f b6 d1	 movzx	 edx, cl
  00575	c1 e2 04	 shl	 edx, 4
  00578	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  0057f	8b 50 58	 mov	 edx, DWORD PTR [eax+88]
  00582	03 d6		 add	 edx, esi
  00584	03 54 24 28	 add	 edx, DWORD PTR _t1$[esp+32]
  00588	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  0058c	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  00590	33 d3		 xor	 edx, ebx
  00592	8b 5c 24 28	 mov	 ebx, DWORD PTR _t1$[esp+32]
  00596	8d 3c 5f	 lea	 edi, DWORD PTR [edi+ebx*2]
  00599	03 7c 24 2c	 add	 edi, DWORD PTR _t0$[esp+32]
  0059d	d1 ca		 ror	 edx, 1
  0059f	d1 c6		 rol	 esi, 1
  005a1	33 f7		 xor	 esi, edi
  005a3	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi

; 442  :     f_rnd(4); f_rnd(5); f_rnd(6); f_rnd(7);

  005a7	8b 7c 24 18	 mov	 edi, DWORD PTR _blk$[esp+40]
  005ab	8b de		 mov	 ebx, esi
  005ad	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005b0	c1 ef 18	 shr	 edi, 24			; 00000018H
  005b3	c1 e7 04	 shl	 edi, 4
  005b6	0f b6 f3	 movzx	 esi, bl
  005b9	8b 5c 24 18	 mov	 ebx, DWORD PTR _blk$[esp+40]
  005bd	c1 e6 04	 shl	 esi, 4
  005c0	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  005c7	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  005ce	c1 eb 08	 shr	 ebx, 8
  005d1	0f b6 fb	 movzx	 edi, bl
  005d4	c1 e7 04	 shl	 edi, 4
  005d7	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  005de	0f b6 7c 24 18	 movzx	 edi, BYTE PTR _blk$[esp+40]
  005e3	c1 e7 04	 shl	 edi, 4
  005e6	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  005ed	8b da		 mov	 ebx, edx
  005ef	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  005f3	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005f6	0f b6 fb	 movzx	 edi, bl
  005f9	c1 e7 04	 shl	 edi, 4
  005fc	8b f2		 mov	 esi, edx
  005fe	c1 ee 18	 shr	 esi, 24			; 00000018H
  00601	c1 e6 04	 shl	 esi, 4
  00604	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0060b	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00612	8b da		 mov	 ebx, edx
  00614	c1 eb 08	 shr	 ebx, 8
  00617	0f b6 fb	 movzx	 edi, bl
  0061a	8b 58 60	 mov	 ebx, DWORD PTR [eax+96]
  0061d	c1 e7 04	 shl	 edi, 4
  00620	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00627	0f b6 fa	 movzx	 edi, dl
  0062a	c1 e7 04	 shl	 edi, 4
  0062d	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00634	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  00638	03 de		 add	 ebx, esi
  0063a	03 5c 24 28	 add	 ebx, DWORD PTR _t1$[esp+32]
  0063e	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  00642	8b 74 24 20	 mov	 esi, DWORD PTR _blk$[esp+48]
  00646	33 d9		 xor	 ebx, ecx
  00648	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0064b	8d 0c 79	 lea	 ecx, DWORD PTR [ecx+edi*2]
  0064e	03 4c 24 2c	 add	 ecx, DWORD PTR _t0$[esp+32]
  00652	d1 cb		 ror	 ebx, 1
  00654	d1 c6		 rol	 esi, 1
  00656	33 f1		 xor	 esi, ecx
  00658	8b ce		 mov	 ecx, esi
  0065a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0065d	0f b6 c9	 movzx	 ecx, cl
  00660	c1 e1 04	 shl	 ecx, 4
  00663	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  00667	8b fe		 mov	 edi, esi
  00669	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00670	8b 4c 24 20	 mov	 ecx, DWORD PTR _blk$[esp+48]
  00674	c1 e9 08	 shr	 ecx, 8
  00677	0f b6 c9	 movzx	 ecx, cl
  0067a	c1 e1 04	 shl	 ecx, 4
  0067d	c1 ef 18	 shr	 edi, 24			; 00000018H
  00680	c1 e7 04	 shl	 edi, 4
  00683	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0068a	89 54 24 10	 mov	 DWORD PTR tv1995[esp+36], edx
  0068e	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00695	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR _blk$[esp+48]
  0069a	c1 e1 04	 shl	 ecx, 4
  0069d	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  006a4	8b cb		 mov	 ecx, ebx
  006a6	c1 e9 18	 shr	 ecx, 24			; 00000018H
  006a9	c1 e1 04	 shl	 ecx, 4
  006ac	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  006b0	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  006b7	8b d3		 mov	 edx, ebx
  006b9	c1 ea 10	 shr	 edx, 16			; 00000010H
  006bc	8b cb		 mov	 ecx, ebx
  006be	0f b6 fa	 movzx	 edi, dl
  006c1	c1 e9 08	 shr	 ecx, 8
  006c4	c1 e7 04	 shl	 edi, 4
  006c7	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  006ce	0f b6 c9	 movzx	 ecx, cl
  006d1	c1 e1 04	 shl	 ecx, 4
  006d4	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  006db	8b 54 24 10	 mov	 edx, DWORD PTR tv1995[esp+36]
  006df	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  006e3	0f b6 cb	 movzx	 ecx, bl
  006e6	c1 e1 04	 shl	 ecx, 4
  006e9	33 b4 01 b0 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+176]
  006f0	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  006f3	03 ce		 add	 ecx, esi
  006f5	03 4c 24 28	 add	 ecx, DWORD PTR _t1$[esp+32]
  006f9	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  006fd	33 ca		 xor	 ecx, edx
  006ff	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00702	8d 14 7a	 lea	 edx, DWORD PTR [edx+edi*2]
  00705	03 54 24 2c	 add	 edx, DWORD PTR _t0$[esp+32]
  00709	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  0070d	d1 c9		 ror	 ecx, 1
  0070f	d1 c6		 rol	 esi, 1
  00711	33 f2		 xor	 esi, edx
  00713	8b d6		 mov	 edx, esi
  00715	c1 ea 10	 shr	 edx, 16			; 00000010H
  00718	0f b6 d2	 movzx	 edx, dl
  0071b	c1 e2 04	 shl	 edx, 4
  0071e	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi
  00722	8b fe		 mov	 edi, esi
  00724	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0072b	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  0072f	c1 ea 08	 shr	 edx, 8
  00732	0f b6 d2	 movzx	 edx, dl
  00735	c1 e2 04	 shl	 edx, 4
  00738	c1 ef 18	 shr	 edi, 24			; 00000018H
  0073b	c1 e7 04	 shl	 edi, 4
  0073e	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00745	89 5c 24 10	 mov	 DWORD PTR tv1994[esp+36], ebx
  00749	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00750	0f b6 54 24 18	 movzx	 edx, BYTE PTR _blk$[esp+40]
  00755	c1 e2 04	 shl	 edx, 4
  00758	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0075f	8b d1		 mov	 edx, ecx
  00761	c1 ea 18	 shr	 edx, 24			; 00000018H
  00764	c1 e2 04	 shl	 edx, 4
  00767	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  0076b	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00772	8b d9		 mov	 ebx, ecx
  00774	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00777	0f b6 fb	 movzx	 edi, bl
  0077a	8b 5c 24 10	 mov	 ebx, DWORD PTR tv1994[esp+36]
  0077e	c1 e7 04	 shl	 edi, 4
  00781	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00788	8b 78 74	 mov	 edi, DWORD PTR [eax+116]
  0078b	8b d1		 mov	 edx, ecx
  0078d	c1 ea 08	 shr	 edx, 8
  00790	0f b6 d2	 movzx	 edx, dl
  00793	c1 e2 04	 shl	 edx, 4
  00796	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0079d	0f b6 d1	 movzx	 edx, cl
  007a0	c1 e2 04	 shl	 edx, 4
  007a3	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  007aa	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  007ad	03 d6		 add	 edx, esi
  007af	03 54 24 28	 add	 edx, DWORD PTR _t1$[esp+32]
  007b3	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  007b7	8b 74 24 20	 mov	 esi, DWORD PTR _blk$[esp+48]
  007bb	33 d3		 xor	 edx, ebx
  007bd	8b 5c 24 28	 mov	 ebx, DWORD PTR _t1$[esp+32]
  007c1	8d 3c 5f	 lea	 edi, DWORD PTR [edi+ebx*2]
  007c4	03 7c 24 2c	 add	 edi, DWORD PTR _t0$[esp+32]
  007c8	d1 ca		 ror	 edx, 1
  007ca	d1 c6		 rol	 esi, 1
  007cc	33 f7		 xor	 esi, edi
  007ce	8b de		 mov	 ebx, esi
  007d0	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  007d4	8b 7c 24 20	 mov	 edi, DWORD PTR _blk$[esp+48]
  007d8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007db	0f b6 f3	 movzx	 esi, bl
  007de	8b 5c 24 20	 mov	 ebx, DWORD PTR _blk$[esp+48]
  007e2	c1 e6 04	 shl	 esi, 4
  007e5	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  007ec	c1 ef 18	 shr	 edi, 24			; 00000018H
  007ef	c1 e7 04	 shl	 edi, 4
  007f2	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  007f9	c1 eb 08	 shr	 ebx, 8
  007fc	0f b6 fb	 movzx	 edi, bl
  007ff	c1 e7 04	 shl	 edi, 4
  00802	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00809	0f b6 7c 24 20	 movzx	 edi, BYTE PTR _blk$[esp+48]
  0080e	c1 e7 04	 shl	 edi, 4
  00811	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00818	8b da		 mov	 ebx, edx
  0081a	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  0081e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00821	0f b6 fb	 movzx	 edi, bl
  00824	c1 e7 04	 shl	 edi, 4
  00827	8b f2		 mov	 esi, edx
  00829	c1 ee 18	 shr	 esi, 24			; 00000018H
  0082c	c1 e6 04	 shl	 esi, 4
  0082f	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00836	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0083d	8b da		 mov	 ebx, edx
  0083f	c1 eb 08	 shr	 ebx, 8
  00842	0f b6 fb	 movzx	 edi, bl
  00845	8b 58 78	 mov	 ebx, DWORD PTR [eax+120]
  00848	c1 e7 04	 shl	 edi, 4
  0084b	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00852	0f b6 fa	 movzx	 edi, dl
  00855	c1 e7 04	 shl	 edi, 4
  00858	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0085f	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  00863	03 de		 add	 ebx, esi
  00865	03 5c 24 28	 add	 ebx, DWORD PTR _t1$[esp+32]
  00869	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  0086d	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  00871	33 d9		 xor	 ebx, ecx
  00873	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00876	8d 0c 79	 lea	 ecx, DWORD PTR [ecx+edi*2]
  00879	03 4c 24 2c	 add	 ecx, DWORD PTR _t0$[esp+32]
  0087d	d1 cb		 ror	 ebx, 1
  0087f	d1 c6		 rol	 esi, 1
  00881	33 f1		 xor	 esi, ecx
  00883	8b ce		 mov	 ecx, esi
  00885	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00888	0f b6 c9	 movzx	 ecx, cl
  0088b	c1 e1 04	 shl	 ecx, 4
  0088e	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi
  00892	8b fe		 mov	 edi, esi
  00894	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  0089b	8b 4c 24 18	 mov	 ecx, DWORD PTR _blk$[esp+40]
  0089f	c1 e9 08	 shr	 ecx, 8
  008a2	0f b6 c9	 movzx	 ecx, cl
  008a5	c1 e1 04	 shl	 ecx, 4
  008a8	c1 ef 18	 shr	 edi, 24			; 00000018H
  008ab	c1 e7 04	 shl	 edi, 4
  008ae	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  008b5	89 54 24 10	 mov	 DWORD PTR tv1993[esp+36], edx
  008b9	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  008c0	0f b6 4c 24 18	 movzx	 ecx, BYTE PTR _blk$[esp+40]
  008c5	c1 e1 04	 shl	 ecx, 4
  008c8	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  008cf	8b cb		 mov	 ecx, ebx
  008d1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  008d4	c1 e1 04	 shl	 ecx, 4
  008d7	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  008db	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  008e2	8b d3		 mov	 edx, ebx
  008e4	c1 ea 10	 shr	 edx, 16			; 00000010H
  008e7	0f b6 fa	 movzx	 edi, dl
  008ea	8b 54 24 10	 mov	 edx, DWORD PTR tv1993[esp+36]
  008ee	8b cb		 mov	 ecx, ebx
  008f0	c1 e9 08	 shr	 ecx, 8
  008f3	0f b6 c9	 movzx	 ecx, cl
  008f6	c1 e1 04	 shl	 ecx, 4
  008f9	c1 e7 04	 shl	 edi, 4
  008fc	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00903	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  0090a	0f b6 cb	 movzx	 ecx, bl
  0090d	c1 e1 04	 shl	 ecx, 4
  00910	33 b4 01 b0 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+176]
  00917	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0091d	03 ce		 add	 ecx, esi
  0091f	03 4c 24 28	 add	 ecx, DWORD PTR _t1$[esp+32]
  00923	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  00927	33 ca		 xor	 ecx, edx
  00929	d1 c9		 ror	 ecx, 1
  0092b	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  0092f	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  00935	8d 14 7a	 lea	 edx, DWORD PTR [edx+edi*2]
  00938	03 54 24 2c	 add	 edx, DWORD PTR _t0$[esp+32]
  0093c	8b 74 24 20	 mov	 esi, DWORD PTR _blk$[esp+48]
  00940	d1 c6		 rol	 esi, 1
  00942	33 f2		 xor	 esi, edx
  00944	8b d6		 mov	 edx, esi
  00946	c1 ea 10	 shr	 edx, 16			; 00000010H
  00949	0f b6 d2	 movzx	 edx, dl
  0094c	c1 e2 04	 shl	 edx, 4
  0094f	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  00953	8b fe		 mov	 edi, esi
  00955	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0095c	8b 54 24 20	 mov	 edx, DWORD PTR _blk$[esp+48]
  00960	c1 ea 08	 shr	 edx, 8
  00963	c1 ef 18	 shr	 edi, 24			; 00000018H
  00966	0f b6 d2	 movzx	 edx, dl
  00969	c1 e7 04	 shl	 edi, 4
  0096c	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00973	c1 e2 04	 shl	 edx, 4
  00976	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  0097d	0f b6 54 24 20	 movzx	 edx, BYTE PTR _blk$[esp+48]
  00982	c1 e2 04	 shl	 edx, 4
  00985	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0098c	89 5c 24 10	 mov	 DWORD PTR tv1992[esp+36], ebx
  00990	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  00994	8b d1		 mov	 edx, ecx
  00996	c1 ea 18	 shr	 edx, 24			; 00000018H
  00999	c1 e2 04	 shl	 edx, 4
  0099c	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  009a3	8b d9		 mov	 ebx, ecx
  009a5	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009a8	0f b6 fb	 movzx	 edi, bl
  009ab	8b 5c 24 10	 mov	 ebx, DWORD PTR tv1992[esp+36]
  009af	c1 e7 04	 shl	 edi, 4
  009b2	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  009b9	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  009bf	8b d1		 mov	 edx, ecx
  009c1	c1 ea 08	 shr	 edx, 8
  009c4	0f b6 d2	 movzx	 edx, dl
  009c7	c1 e2 04	 shl	 edx, 4
  009ca	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  009d1	0f b6 d1	 movzx	 edx, cl
  009d4	c1 e2 04	 shl	 edx, 4
  009d7	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  009de	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  009e4	03 d6		 add	 edx, esi
  009e6	03 54 24 28	 add	 edx, DWORD PTR _t1$[esp+32]
  009ea	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  009ee	8b 74 24 18	 mov	 esi, DWORD PTR _blk$[esp+40]
  009f2	33 d3		 xor	 edx, ebx
  009f4	8b 5c 24 28	 mov	 ebx, DWORD PTR _t1$[esp+32]
  009f8	8d 3c 5f	 lea	 edi, DWORD PTR [edi+ebx*2]
  009fb	03 7c 24 2c	 add	 edi, DWORD PTR _t0$[esp+32]
  009ff	d1 ca		 ror	 edx, 1
  00a01	d1 c6		 rol	 esi, 1
  00a03	33 f7		 xor	 esi, edi
  00a05	8b de		 mov	 ebx, esi
  00a07	89 74 24 18	 mov	 DWORD PTR _blk$[esp+40], esi
  00a0b	8b 7c 24 18	 mov	 edi, DWORD PTR _blk$[esp+40]
  00a0f	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00a12	0f b6 f3	 movzx	 esi, bl
  00a15	8b 5c 24 18	 mov	 ebx, DWORD PTR _blk$[esp+40]
  00a19	c1 e6 04	 shl	 esi, 4
  00a1c	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00a23	c1 ef 18	 shr	 edi, 24			; 00000018H
  00a26	c1 e7 04	 shl	 edi, 4
  00a29	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00a30	c1 eb 08	 shr	 ebx, 8
  00a33	0f b6 fb	 movzx	 edi, bl
  00a36	c1 e7 04	 shl	 edi, 4
  00a39	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00a40	0f b6 7c 24 18	 movzx	 edi, BYTE PTR _blk$[esp+40]
  00a45	c1 e7 04	 shl	 edi, 4
  00a48	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00a4f	8b da		 mov	 ebx, edx
  00a51	89 74 24 28	 mov	 DWORD PTR _t1$[esp+32], esi
  00a55	8b f2		 mov	 esi, edx
  00a57	c1 ee 18	 shr	 esi, 24			; 00000018H
  00a5a	c1 e6 04	 shl	 esi, 4
  00a5d	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00a64	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00a67	0f b6 fb	 movzx	 edi, bl
  00a6a	c1 e7 04	 shl	 edi, 4
  00a6d	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00a74	8b da		 mov	 ebx, edx
  00a76	c1 eb 08	 shr	 ebx, 8
  00a79	0f b6 fb	 movzx	 edi, bl
  00a7c	8b 98 90 00 00
	00		 mov	 ebx, DWORD PTR [eax+144]
  00a82	c1 e7 04	 shl	 edi, 4
  00a85	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00a8c	0f b6 fa	 movzx	 edi, dl
  00a8f	c1 e7 04	 shl	 edi, 4
  00a92	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00a99	8b 7c 24 28	 mov	 edi, DWORD PTR _t1$[esp+32]
  00a9d	03 de		 add	 ebx, esi
  00a9f	03 5c 24 28	 add	 ebx, DWORD PTR _t1$[esp+32]
  00aa3	89 74 24 2c	 mov	 DWORD PTR _t0$[esp+32], esi
  00aa7	33 d9		 xor	 ebx, ecx
  00aa9	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00aaf	8d 0c 79	 lea	 ecx, DWORD PTR [ecx+edi*2]
  00ab2	03 4c 24 2c	 add	 ecx, DWORD PTR _t0$[esp+32]
  00ab6	8b 74 24 20	 mov	 esi, DWORD PTR _blk$[esp+48]
  00aba	d1 cb		 ror	 ebx, 1
  00abc	d1 c6		 rol	 esi, 1
  00abe	33 f1		 xor	 esi, ecx
  00ac0	8b ce		 mov	 ecx, esi
  00ac2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ac5	0f b6 c9	 movzx	 ecx, cl
  00ac8	c1 e1 04	 shl	 ecx, 4
  00acb	89 74 24 20	 mov	 DWORD PTR _blk$[esp+48], esi
  00acf	8b fe		 mov	 edi, esi
  00ad1	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  00ad8	8b 4c 24 20	 mov	 ecx, DWORD PTR _blk$[esp+48]
  00adc	c1 e9 08	 shr	 ecx, 8
  00adf	0f b6 c9	 movzx	 ecx, cl
  00ae2	c1 e1 04	 shl	 ecx, 4
  00ae5	c1 ef 18	 shr	 edi, 24			; 00000018H
  00ae8	c1 e7 04	 shl	 edi, 4
  00aeb	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00af2	89 54 24 28	 mov	 DWORD PTR tv167[esp+32], edx
  00af6	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00afd	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR _blk$[esp+48]
  00b02	c1 e1 04	 shl	 ecx, 4
  00b05	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00b0c	8b cb		 mov	 ecx, ebx
  00b0e	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00b11	c1 e1 04	 shl	 ecx, 4
  00b14	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  00b1b	8b d3		 mov	 edx, ebx
  00b1d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00b20	0f b6 ea	 movzx	 ebp, dl
  00b23	8b 54 24 28	 mov	 edx, DWORD PTR tv167[esp+32]
  00b27	8b cb		 mov	 ecx, ebx
  00b29	c1 e9 08	 shr	 ecx, 8
  00b2c	0f b6 c9	 movzx	 ecx, cl
  00b2f	c1 e1 04	 shl	 ecx, 4
  00b32	c1 e5 04	 shl	 ebp, 4
  00b35	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00b3c	8b a8 9c 00 00
	00		 mov	 ebp, DWORD PTR [eax+156]
  00b42	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00b49	0f b6 cb	 movzx	 ecx, bl
  00b4c	c1 e1 04	 shl	 ecx, 4
  00b4f	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00b56	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00b5c	03 cf		 add	 ecx, edi
  00b5e	03 ce		 add	 ecx, esi
  00b60	33 ca		 xor	 ecx, edx
  00b62	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  00b66	8d 74 75 00	 lea	 esi, DWORD PTR [ebp+esi*2]
  00b6a	03 f7		 add	 esi, edi

; 443  : 
; 444  :     out_blk[0] = LE32(blk[2] ^ l_key[4]);

  00b6c	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  00b6f	d1 c9		 ror	 ecx, 1
  00b71	d1 c2		 rol	 edx, 1
  00b73	33 d6		 xor	 edx, esi
  00b75	8b 74 24 30	 mov	 esi, DWORD PTR _out_blk$[esp+32]
  00b79	33 fb		 xor	 edi, ebx
  00b7b	89 3e		 mov	 DWORD PTR [esi], edi

; 445  :     out_blk[1] = LE32(blk[3] ^ l_key[5]);

  00b7d	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00b80	33 7c 24 20	 xor	 edi, DWORD PTR _blk$[esp+48]
  00b84	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 446  :     out_blk[2] = LE32(blk[0] ^ l_key[6]);

  00b87	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  00b8a	33 f9		 xor	 edi, ecx
  00b8c	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 447  :     out_blk[3] = LE32(blk[1] ^ l_key[7]); 

  00b8f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00b92	5f		 pop	 edi
  00b93	33 c2		 xor	 eax, edx
  00b95	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00b98	5e		 pop	 esi
  00b99	5d		 pop	 ebp
  00b9a	5b		 pop	 ebx

; 448  : };

  00b9b	83 c4 14	 add	 esp, 20			; 00000014H
  00b9e	c3		 ret	 0
_twofish_encrypt ENDP
_TEXT	ENDS
PUBLIC	_twofish_decrypt
; Function compile flags: /Ogtpy
;	COMDAT _twofish_decrypt
_TEXT	SEGMENT
_blk$ = -16						; size = 16
tv2007 = 8						; size = 4
_t0$ = 8						; size = 4
_instance$ = 8						; size = 4
tv2011 = 12						; size = 4
tv2010 = 12						; size = 4
tv2009 = 12						; size = 4
tv2008 = 12						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_decrypt PROC					; COMDAT

; 497  : {   u4byte  t0, t1, blk[4];

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 498  : 
; 499  : 	u4byte *l_key = instance->l_key;
; 500  : 	u4byte *mk_tab = instance->mk_tab;

  00003	8b 44 24 14	 mov	 eax, DWORD PTR _instance$[esp+12]

; 501  : 
; 502  :     blk[0] = LE32(in_blk[0]) ^ l_key[4];
; 503  :     blk[1] = LE32(in_blk[1]) ^ l_key[5];

  00007	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	53		 push	 ebx
  0000e	55		 push	 ebp

; 504  :     blk[2] = LE32(in_blk[2]) ^ l_key[6];

  0000f	8b 68 18	 mov	 ebp, DWORD PTR [eax+24]
  00012	56		 push	 esi
  00013	8b 74 24 24	 mov	 esi, DWORD PTR _in_blk$[esp+24]
  00017	33 56 04	 xor	 edx, DWORD PTR [esi+4]
  0001a	33 0e		 xor	 ecx, DWORD PTR [esi]
  0001c	33 6e 08	 xor	 ebp, DWORD PTR [esi+8]
  0001f	57		 push	 edi

; 505  :     blk[3] = LE32(in_blk[3]) ^ l_key[7];

  00020	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  00023	33 7e 0c	 xor	 edi, DWORD PTR [esi+12]

; 506  : 
; 507  :     i_rnd(7); i_rnd(6); i_rnd(5); i_rnd(4);

  00026	8b da		 mov	 ebx, edx
  00028	89 7c 24 1c	 mov	 DWORD PTR _blk$[esp+44], edi
  0002c	8b fa		 mov	 edi, edx
  0002e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00031	c1 ef 18	 shr	 edi, 24			; 00000018H
  00034	c1 e7 04	 shl	 edi, 4
  00037	0f b6 f3	 movzx	 esi, bl
  0003a	8b da		 mov	 ebx, edx
  0003c	c1 e6 04	 shl	 esi, 4
  0003f	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00046	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0004d	89 54 24 14	 mov	 DWORD PTR _blk$[esp+36], edx
  00051	0f b6 d2	 movzx	 edx, dl
  00054	c1 eb 08	 shr	 ebx, 8
  00057	c1 e2 04	 shl	 edx, 4
  0005a	0f b6 fb	 movzx	 edi, bl
  0005d	c1 e7 04	 shl	 edi, 4
  00060	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00067	8b d9		 mov	 ebx, ecx
  00069	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00070	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00073	8b d1		 mov	 edx, ecx
  00075	c1 ea 18	 shr	 edx, 24			; 00000018H
  00078	c1 e2 04	 shl	 edx, 4
  0007b	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00082	0f b6 db	 movzx	 ebx, bl
  00085	c1 e3 04	 shl	 ebx, 4
  00088	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  0008f	8b d1		 mov	 edx, ecx
  00091	c1 ea 08	 shr	 edx, 8
  00094	0f b6 d2	 movzx	 edx, dl
  00097	c1 e2 04	 shl	 edx, 4
  0009a	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  000a1	0f b6 d1	 movzx	 edx, cl
  000a4	c1 e2 04	 shl	 edx, 4
  000a7	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  000ae	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  000b4	03 d7		 add	 edx, edi
  000b6	03 d6		 add	 edx, esi
  000b8	d1 c5		 rol	 ebp, 1
  000ba	33 ea		 xor	 ebp, edx
  000bc	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  000c2	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  000c5	03 d7		 add	 edx, edi
  000c7	33 54 24 1c	 xor	 edx, DWORD PTR _blk$[esp+44]
  000cb	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  000cf	d1 ca		 ror	 edx, 1
  000d1	8b da		 mov	 ebx, edx
  000d3	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000d6	0f b6 f3	 movzx	 esi, bl
  000d9	c1 e6 04	 shl	 esi, 4
  000dc	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  000e3	8b fa		 mov	 edi, edx
  000e5	c1 ef 18	 shr	 edi, 24			; 00000018H
  000e8	c1 e7 04	 shl	 edi, 4
  000eb	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  000f2	8b da		 mov	 ebx, edx
  000f4	c1 eb 08	 shr	 ebx, 8
  000f7	0f b6 fb	 movzx	 edi, bl
  000fa	c1 e7 04	 shl	 edi, 4
  000fd	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00104	0f b6 fa	 movzx	 edi, dl
  00107	c1 e7 04	 shl	 edi, 4
  0010a	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00111	8b fd		 mov	 edi, ebp
  00113	c1 ef 18	 shr	 edi, 24			; 00000018H
  00116	c1 e7 04	 shl	 edi, 4
  00119	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  00120	8b dd		 mov	 ebx, ebp
  00122	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00125	0f b6 db	 movzx	 ebx, bl
  00128	c1 e3 04	 shl	 ebx, 4
  0012b	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  00132	8b dd		 mov	 ebx, ebp
  00134	c1 eb 08	 shr	 ebx, 8
  00137	0f b6 db	 movzx	 ebx, bl
  0013a	c1 e3 04	 shl	 ebx, 4
  0013d	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  00144	0f b6 5c 24 18	 movzx	 ebx, BYTE PTR _blk$[esp+40]
  00149	c1 e3 04	 shl	 ebx, 4
  0014c	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  00153	8b 98 90 00 00
	00		 mov	 ebx, DWORD PTR [eax+144]
  00159	03 df		 add	 ebx, edi
  0015b	03 de		 add	 ebx, esi
  0015d	d1 c1		 rol	 ecx, 1
  0015f	33 cb		 xor	 ecx, ebx
  00161	89 4c 24 10	 mov	 DWORD PTR _blk$[esp+32], ecx
  00165	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0016b	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  0016e	03 cf		 add	 ecx, edi
  00170	33 4c 24 14	 xor	 ecx, DWORD PTR _blk$[esp+36]
  00174	d1 c9		 ror	 ecx, 1
  00176	8b d9		 mov	 ebx, ecx
  00178	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0017b	0f b6 f3	 movzx	 esi, bl
  0017e	c1 e6 04	 shl	 esi, 4
  00181	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00188	8b f9		 mov	 edi, ecx
  0018a	c1 ef 18	 shr	 edi, 24			; 00000018H
  0018d	c1 e7 04	 shl	 edi, 4
  00190	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00197	8b d9		 mov	 ebx, ecx
  00199	c1 eb 08	 shr	 ebx, 8
  0019c	0f b6 fb	 movzx	 edi, bl
  0019f	8b 5c 24 10	 mov	 ebx, DWORD PTR _blk$[esp+32]
  001a3	c1 e7 04	 shl	 edi, 4
  001a6	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  001ad	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001b0	0f b6 db	 movzx	 ebx, bl
  001b3	c1 e3 04	 shl	 ebx, 4
  001b6	0f b6 f9	 movzx	 edi, cl
  001b9	c1 e7 04	 shl	 edi, 4
  001bc	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  001c3	8b 7c 24 10	 mov	 edi, DWORD PTR _blk$[esp+32]
  001c7	c1 ef 18	 shr	 edi, 24			; 00000018H
  001ca	c1 e7 04	 shl	 edi, 4
  001cd	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  001d4	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  001db	8b 5c 24 10	 mov	 ebx, DWORD PTR _blk$[esp+32]
  001df	c1 eb 08	 shr	 ebx, 8
  001e2	0f b6 db	 movzx	 ebx, bl
  001e5	c1 e3 04	 shl	 ebx, 4
  001e8	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  001ef	0f b6 5c 24 10	 movzx	 ebx, BYTE PTR _blk$[esp+32]
  001f4	c1 e3 04	 shl	 ebx, 4
  001f7	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  001fe	8b 98 88 00 00
	00		 mov	 ebx, DWORD PTR [eax+136]
  00204	03 df		 add	 ebx, edi
  00206	03 de		 add	 ebx, esi
  00208	89 7c 24 24	 mov	 DWORD PTR _t0$[esp+28], edi
  0020c	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  00212	d1 c5		 rol	 ebp, 1
  00214	33 eb		 xor	 ebp, ebx
  00216	8d 1c 77	 lea	 ebx, DWORD PTR [edi+esi*2]
  00219	03 5c 24 24	 add	 ebx, DWORD PTR _t0$[esp+28]
  0021d	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  00221	33 da		 xor	 ebx, edx
  00223	d1 cb		 ror	 ebx, 1
  00225	8b d3		 mov	 edx, ebx
  00227	c1 ea 10	 shr	 edx, 16			; 00000010H
  0022a	0f b6 d2	 movzx	 edx, dl
  0022d	c1 e2 04	 shl	 edx, 4
  00230	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00237	8b fb		 mov	 edi, ebx
  00239	c1 ef 18	 shr	 edi, 24			; 00000018H
  0023c	c1 e7 04	 shl	 edi, 4
  0023f	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00246	8b d3		 mov	 edx, ebx
  00248	c1 ea 08	 shr	 edx, 8
  0024b	0f b6 d2	 movzx	 edx, dl
  0024e	c1 e2 04	 shl	 edx, 4
  00251	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00258	0f b6 d3	 movzx	 edx, bl
  0025b	c1 e2 04	 shl	 edx, 4
  0025e	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00265	8b d5		 mov	 edx, ebp
  00267	c1 ea 18	 shr	 edx, 24			; 00000018H
  0026a	c1 e2 04	 shl	 edx, 4
  0026d	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00274	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  00278	c1 ea 08	 shr	 edx, 8
  0027b	89 5c 24 28	 mov	 DWORD PTR tv2011[esp+28], ebx
  0027f	8b dd		 mov	 ebx, ebp
  00281	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00284	0f b6 d2	 movzx	 edx, dl
  00287	c1 e2 04	 shl	 edx, 4
  0028a	0f b6 eb	 movzx	 ebp, bl
  0028d	c1 e5 04	 shl	 ebp, 4
  00290	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00297	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  0029b	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  002a2	0f b6 54 24 18	 movzx	 edx, BYTE PTR _blk$[esp+40]
  002a7	c1 e2 04	 shl	 edx, 4
  002aa	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  002b1	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  002b7	03 d7		 add	 edx, edi
  002b9	03 d6		 add	 edx, esi
  002bb	d1 c5		 rol	 ebp, 1
  002bd	33 ea		 xor	 ebp, edx
  002bf	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  002c5	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  002c8	03 d7		 add	 edx, edi
  002ca	33 d1		 xor	 edx, ecx
  002cc	d1 ca		 ror	 edx, 1
  002ce	8b ca		 mov	 ecx, edx
  002d0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002d3	0f b6 c9	 movzx	 ecx, cl
  002d6	c1 e1 04	 shl	 ecx, 4
  002d9	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  002e0	8b ca		 mov	 ecx, edx
  002e2	c1 e9 08	 shr	 ecx, 8
  002e5	0f b6 c9	 movzx	 ecx, cl
  002e8	c1 e1 04	 shl	 ecx, 4
  002eb	8b fa		 mov	 edi, edx
  002ed	c1 ef 18	 shr	 edi, 24			; 00000018H
  002f0	c1 e7 04	 shl	 edi, 4
  002f3	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  002fa	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  002fe	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00305	0f b6 ca	 movzx	 ecx, dl
  00308	c1 e1 04	 shl	 ecx, 4
  0030b	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00312	8b cd		 mov	 ecx, ebp
  00314	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00317	c1 e1 04	 shl	 ecx, 4
  0031a	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  00321	8b 4c 24 10	 mov	 ecx, DWORD PTR _blk$[esp+32]
  00325	8b dd		 mov	 ebx, ebp
  00327	c1 e9 08	 shr	 ecx, 8
  0032a	0f b6 c9	 movzx	 ecx, cl
  0032d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00330	c1 e1 04	 shl	 ecx, 4
  00333	0f b6 eb	 movzx	 ebp, bl
  00336	c1 e5 04	 shl	 ebp, 4
  00339	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00340	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  00344	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  0034b	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR _blk$[esp+32]
  00350	c1 e1 04	 shl	 ecx, 4
  00353	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  0035a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0035d	03 cf		 add	 ecx, edi
  0035f	03 ce		 add	 ecx, esi
  00361	d1 c5		 rol	 ebp, 1
  00363	33 e9		 xor	 ebp, ecx
  00365	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00368	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  0036b	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  0036f	03 cf		 add	 ecx, edi
  00371	8b 5c 24 28	 mov	 ebx, DWORD PTR tv2011[esp+28]
  00375	33 cb		 xor	 ecx, ebx
  00377	d1 c9		 ror	 ecx, 1
  00379	8b d9		 mov	 ebx, ecx
  0037b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0037e	0f b6 f3	 movzx	 esi, bl
  00381	c1 e6 04	 shl	 esi, 4
  00384	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0038b	8b f9		 mov	 edi, ecx
  0038d	c1 ef 18	 shr	 edi, 24			; 00000018H
  00390	c1 e7 04	 shl	 edi, 4
  00393	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0039a	8b d9		 mov	 ebx, ecx
  0039c	c1 eb 08	 shr	 ebx, 8
  0039f	0f b6 fb	 movzx	 edi, bl
  003a2	c1 e7 04	 shl	 edi, 4
  003a5	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  003ac	0f b6 f9	 movzx	 edi, cl
  003af	c1 e7 04	 shl	 edi, 4
  003b2	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  003b9	8b dd		 mov	 ebx, ebp
  003bb	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003be	0f b6 db	 movzx	 ebx, bl
  003c1	c1 e3 04	 shl	 ebx, 4
  003c4	8b fd		 mov	 edi, ebp
  003c6	c1 ef 18	 shr	 edi, 24			; 00000018H
  003c9	c1 e7 04	 shl	 edi, 4
  003cc	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  003d3	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  003da	8b dd		 mov	 ebx, ebp
  003dc	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  003e0	c1 eb 08	 shr	 ebx, 8
  003e3	0f b6 db	 movzx	 ebx, bl
  003e6	c1 e3 04	 shl	 ebx, 4
  003e9	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  003f0	0f b6 5c 24 18	 movzx	 ebx, BYTE PTR _blk$[esp+40]
  003f5	c1 e3 04	 shl	 ebx, 4
  003f8	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  003ff	8b 58 70	 mov	 ebx, DWORD PTR [eax+112]
  00402	03 df		 add	 ebx, edi
  00404	03 de		 add	 ebx, esi
  00406	89 7c 24 24	 mov	 DWORD PTR _t0$[esp+28], edi
  0040a	8b 78 74	 mov	 edi, DWORD PTR [eax+116]
  0040d	d1 c5		 rol	 ebp, 1
  0040f	33 eb		 xor	 ebp, ebx
  00411	8d 1c 77	 lea	 ebx, DWORD PTR [edi+esi*2]
  00414	03 5c 24 24	 add	 ebx, DWORD PTR _t0$[esp+28]
  00418	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  0041c	33 da		 xor	 ebx, edx
  0041e	d1 cb		 ror	 ebx, 1
  00420	8b d3		 mov	 edx, ebx
  00422	c1 ea 10	 shr	 edx, 16			; 00000010H
  00425	0f b6 d2	 movzx	 edx, dl
  00428	c1 e2 04	 shl	 edx, 4
  0042b	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00432	8b d3		 mov	 edx, ebx
  00434	c1 ea 08	 shr	 edx, 8
  00437	0f b6 d2	 movzx	 edx, dl
  0043a	8b fb		 mov	 edi, ebx
  0043c	c1 e2 04	 shl	 edx, 4
  0043f	c1 ef 18	 shr	 edi, 24			; 00000018H
  00442	c1 e7 04	 shl	 edi, 4
  00445	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0044c	89 5c 24 28	 mov	 DWORD PTR tv2010[esp+28], ebx
  00450	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00457	0f b6 d3	 movzx	 edx, bl
  0045a	c1 e2 04	 shl	 edx, 4
  0045d	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00464	8b d5		 mov	 edx, ebp
  00466	c1 ea 18	 shr	 edx, 24			; 00000018H
  00469	c1 e2 04	 shl	 edx, 4
  0046c	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00473	8b 54 24 10	 mov	 edx, DWORD PTR _blk$[esp+32]
  00477	8b dd		 mov	 ebx, ebp
  00479	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0047c	0f b6 eb	 movzx	 ebp, bl
  0047f	c1 ea 08	 shr	 edx, 8
  00482	c1 e5 04	 shl	 ebp, 4
  00485	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  0048c	0f b6 d2	 movzx	 edx, dl
  0048f	c1 e2 04	 shl	 edx, 4
  00492	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  00499	0f b6 54 24 10	 movzx	 edx, BYTE PTR _blk$[esp+32]
  0049e	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  004a2	c1 e2 04	 shl	 edx, 4
  004a5	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  004ac	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  004af	03 d7		 add	 edx, edi
  004b1	03 d6		 add	 edx, esi
  004b3	d1 c5		 rol	 ebp, 1
  004b5	33 ea		 xor	 ebp, edx
  004b7	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  004ba	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  004bd	03 d7		 add	 edx, edi
  004bf	33 d1		 xor	 edx, ecx
  004c1	d1 ca		 ror	 edx, 1
  004c3	8b ca		 mov	 ecx, edx
  004c5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004c8	0f b6 c9	 movzx	 ecx, cl
  004cb	c1 e1 04	 shl	 ecx, 4
  004ce	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  004d5	8b ca		 mov	 ecx, edx
  004d7	c1 e9 08	 shr	 ecx, 8
  004da	0f b6 c9	 movzx	 ecx, cl
  004dd	c1 e1 04	 shl	 ecx, 4
  004e0	8b fa		 mov	 edi, edx
  004e2	c1 ef 18	 shr	 edi, 24			; 00000018H
  004e5	c1 e7 04	 shl	 edi, 4
  004e8	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  004ef	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  004f3	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  004fa	0f b6 ca	 movzx	 ecx, dl
  004fd	c1 e1 04	 shl	 ecx, 4
  00500	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00507	8b cd		 mov	 ecx, ebp
  00509	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0050c	c1 e1 04	 shl	 ecx, 4
  0050f	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  00516	8b 4c 24 18	 mov	 ecx, DWORD PTR _blk$[esp+40]
  0051a	c1 e9 08	 shr	 ecx, 8
  0051d	8b dd		 mov	 ebx, ebp
  0051f	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00522	0f b6 c9	 movzx	 ecx, cl
  00525	0f b6 eb	 movzx	 ebp, bl
  00528	c1 e1 04	 shl	 ecx, 4
  0052b	8b 5c 24 28	 mov	 ebx, DWORD PTR tv2010[esp+28]
  0052f	c1 e5 04	 shl	 ebp, 4
  00532	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00539	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  0053d	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00544	0f b6 4c 24 18	 movzx	 ecx, BYTE PTR _blk$[esp+40]
  00549	c1 e1 04	 shl	 ecx, 4
  0054c	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00553	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00556	03 cf		 add	 ecx, edi
  00558	03 ce		 add	 ecx, esi
  0055a	d1 c5		 rol	 ebp, 1
  0055c	33 e9		 xor	 ebp, ecx
  0055e	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00561	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  00564	03 cf		 add	 ecx, edi
  00566	33 cb		 xor	 ecx, ebx
  00568	d1 c9		 ror	 ecx, 1

; 508  :     i_rnd(3); i_rnd(2); i_rnd(1); i_rnd(0);

  0056a	8b d9		 mov	 ebx, ecx
  0056c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0056f	0f b6 f3	 movzx	 esi, bl
  00572	c1 e6 04	 shl	 esi, 4
  00575	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0057c	8b f9		 mov	 edi, ecx
  0057e	c1 ef 18	 shr	 edi, 24			; 00000018H
  00581	c1 e7 04	 shl	 edi, 4
  00584	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0058b	8b d9		 mov	 ebx, ecx
  0058d	c1 eb 08	 shr	 ebx, 8
  00590	0f b6 fb	 movzx	 edi, bl
  00593	c1 e7 04	 shl	 edi, 4
  00596	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0059d	0f b6 f9	 movzx	 edi, cl
  005a0	c1 e7 04	 shl	 edi, 4
  005a3	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  005aa	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  005ae	8b fd		 mov	 edi, ebp
  005b0	c1 ef 18	 shr	 edi, 24			; 00000018H
  005b3	c1 e7 04	 shl	 edi, 4
  005b6	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  005bd	8b dd		 mov	 ebx, ebp
  005bf	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005c2	0f b6 db	 movzx	 ebx, bl
  005c5	c1 e3 04	 shl	 ebx, 4
  005c8	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  005cf	8b dd		 mov	 ebx, ebp
  005d1	c1 eb 08	 shr	 ebx, 8
  005d4	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  005d8	0f b6 db	 movzx	 ebx, bl
  005db	c1 e3 04	 shl	 ebx, 4
  005de	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  005e5	0f b6 5c 24 10	 movzx	 ebx, BYTE PTR _blk$[esp+32]
  005ea	c1 e3 04	 shl	 ebx, 4
  005ed	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  005f4	8b 58 58	 mov	 ebx, DWORD PTR [eax+88]
  005f7	03 df		 add	 ebx, edi
  005f9	03 de		 add	 ebx, esi
  005fb	89 7c 24 24	 mov	 DWORD PTR _t0$[esp+28], edi
  005ff	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  00602	d1 c5		 rol	 ebp, 1
  00604	33 eb		 xor	 ebp, ebx
  00606	8d 1c 77	 lea	 ebx, DWORD PTR [edi+esi*2]
  00609	03 5c 24 24	 add	 ebx, DWORD PTR _t0$[esp+28]
  0060d	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  00611	33 da		 xor	 ebx, edx
  00613	d1 cb		 ror	 ebx, 1
  00615	8b d3		 mov	 edx, ebx
  00617	c1 ea 10	 shr	 edx, 16			; 00000010H
  0061a	0f b6 d2	 movzx	 edx, dl
  0061d	c1 e2 04	 shl	 edx, 4
  00620	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00627	8b d3		 mov	 edx, ebx
  00629	c1 ea 08	 shr	 edx, 8
  0062c	0f b6 d2	 movzx	 edx, dl
  0062f	c1 e2 04	 shl	 edx, 4
  00632	8b fb		 mov	 edi, ebx
  00634	c1 ef 18	 shr	 edi, 24			; 00000018H
  00637	c1 e7 04	 shl	 edi, 4
  0063a	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00641	89 5c 24 28	 mov	 DWORD PTR tv2009[esp+28], ebx
  00645	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  0064c	0f b6 d3	 movzx	 edx, bl
  0064f	c1 e2 04	 shl	 edx, 4
  00652	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00659	8b d5		 mov	 edx, ebp
  0065b	c1 ea 18	 shr	 edx, 24			; 00000018H
  0065e	c1 e2 04	 shl	 edx, 4
  00661	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00668	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  0066c	c1 ea 08	 shr	 edx, 8
  0066f	8b dd		 mov	 ebx, ebp
  00671	0f b6 d2	 movzx	 edx, dl
  00674	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00677	c1 e2 04	 shl	 edx, 4
  0067a	0f b6 eb	 movzx	 ebp, bl
  0067d	c1 e5 04	 shl	 ebp, 4
  00680	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00687	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  0068b	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  00692	0f b6 54 24 18	 movzx	 edx, BYTE PTR _blk$[esp+40]
  00697	c1 e2 04	 shl	 edx, 4
  0069a	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  006a1	8b 50 50	 mov	 edx, DWORD PTR [eax+80]
  006a4	03 d7		 add	 edx, edi
  006a6	03 d6		 add	 edx, esi
  006a8	d1 c5		 rol	 ebp, 1
  006aa	33 ea		 xor	 ebp, edx
  006ac	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  006af	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  006b2	03 d7		 add	 edx, edi
  006b4	33 d1		 xor	 edx, ecx
  006b6	d1 ca		 ror	 edx, 1
  006b8	8b ca		 mov	 ecx, edx
  006ba	c1 e9 10	 shr	 ecx, 16			; 00000010H
  006bd	0f b6 c9	 movzx	 ecx, cl
  006c0	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  006c4	c1 e1 04	 shl	 ecx, 4
  006c7	8b fa		 mov	 edi, edx
  006c9	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  006d0	c1 ef 18	 shr	 edi, 24			; 00000018H
  006d3	c1 e7 04	 shl	 edi, 4
  006d6	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  006dd	8b ca		 mov	 ecx, edx
  006df	c1 e9 08	 shr	 ecx, 8
  006e2	0f b6 c9	 movzx	 ecx, cl
  006e5	c1 e1 04	 shl	 ecx, 4
  006e8	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  006ef	0f b6 ca	 movzx	 ecx, dl
  006f2	c1 e1 04	 shl	 ecx, 4
  006f5	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  006fc	8b cd		 mov	 ecx, ebp
  006fe	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00701	c1 e1 04	 shl	 ecx, 4
  00704	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  0070b	8b 4c 24 10	 mov	 ecx, DWORD PTR _blk$[esp+32]
  0070f	c1 e9 08	 shr	 ecx, 8
  00712	8b dd		 mov	 ebx, ebp
  00714	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00717	0f b6 eb	 movzx	 ebp, bl
  0071a	0f b6 c9	 movzx	 ecx, cl
  0071d	c1 e1 04	 shl	 ecx, 4
  00720	8b 5c 24 28	 mov	 ebx, DWORD PTR tv2009[esp+28]
  00724	c1 e5 04	 shl	 ebp, 4
  00727	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  0072e	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  00732	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00739	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR _blk$[esp+32]
  0073e	c1 e1 04	 shl	 ecx, 4
  00741	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00748	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0074b	03 cf		 add	 ecx, edi
  0074d	03 ce		 add	 ecx, esi
  0074f	d1 c5		 rol	 ebp, 1
  00751	33 e9		 xor	 ebp, ecx
  00753	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00756	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  00759	03 cf		 add	 ecx, edi
  0075b	33 cb		 xor	 ecx, ebx
  0075d	d1 c9		 ror	 ecx, 1
  0075f	8b d9		 mov	 ebx, ecx
  00761	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00764	0f b6 f3	 movzx	 esi, bl
  00767	c1 e6 04	 shl	 esi, 4
  0076a	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00771	8b f9		 mov	 edi, ecx
  00773	c1 ef 18	 shr	 edi, 24			; 00000018H
  00776	c1 e7 04	 shl	 edi, 4
  00779	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00780	8b d9		 mov	 ebx, ecx
  00782	c1 eb 08	 shr	 ebx, 8
  00785	0f b6 fb	 movzx	 edi, bl
  00788	c1 e7 04	 shl	 edi, 4
  0078b	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00792	0f b6 f9	 movzx	 edi, cl
  00795	c1 e7 04	 shl	 edi, 4
  00798	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  0079f	8b dd		 mov	 ebx, ebp
  007a1	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007a4	0f b6 db	 movzx	 ebx, bl
  007a7	c1 e3 04	 shl	 ebx, 4
  007aa	8b fd		 mov	 edi, ebp
  007ac	c1 ef 18	 shr	 edi, 24			; 00000018H
  007af	c1 e7 04	 shl	 edi, 4
  007b2	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  007b9	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  007c0	8b dd		 mov	 ebx, ebp
  007c2	c1 eb 08	 shr	 ebx, 8
  007c5	0f b6 db	 movzx	 ebx, bl
  007c8	c1 e3 04	 shl	 ebx, 4
  007cb	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  007d2	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  007d6	0f b6 5c 24 18	 movzx	 ebx, BYTE PTR _blk$[esp+40]
  007db	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  007df	c1 e3 04	 shl	 ebx, 4
  007e2	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  007e9	8b 58 40	 mov	 ebx, DWORD PTR [eax+64]
  007ec	d1 c5		 rol	 ebp, 1
  007ee	89 7c 24 24	 mov	 DWORD PTR _t0$[esp+28], edi
  007f2	03 df		 add	 ebx, edi
  007f4	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  007f7	03 de		 add	 ebx, esi
  007f9	33 eb		 xor	 ebp, ebx
  007fb	8d 1c 77	 lea	 ebx, DWORD PTR [edi+esi*2]
  007fe	03 5c 24 24	 add	 ebx, DWORD PTR _t0$[esp+28]
  00802	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  00806	33 da		 xor	 ebx, edx
  00808	d1 cb		 ror	 ebx, 1
  0080a	8b d3		 mov	 edx, ebx
  0080c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0080f	0f b6 d2	 movzx	 edx, dl
  00812	c1 e2 04	 shl	 edx, 4
  00815	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0081c	8b d3		 mov	 edx, ebx
  0081e	c1 ea 08	 shr	 edx, 8
  00821	0f b6 d2	 movzx	 edx, dl
  00824	c1 e2 04	 shl	 edx, 4
  00827	8b fb		 mov	 edi, ebx
  00829	c1 ef 18	 shr	 edi, 24			; 00000018H
  0082c	c1 e7 04	 shl	 edi, 4
  0082f	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00836	89 5c 24 28	 mov	 DWORD PTR tv2008[esp+28], ebx
  0083a	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00841	0f b6 d3	 movzx	 edx, bl
  00844	c1 e2 04	 shl	 edx, 4
  00847	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0084e	8b d5		 mov	 edx, ebp
  00850	c1 ea 18	 shr	 edx, 24			; 00000018H
  00853	c1 e2 04	 shl	 edx, 4
  00856	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  0085d	8b 54 24 10	 mov	 edx, DWORD PTR _blk$[esp+32]
  00861	c1 ea 08	 shr	 edx, 8
  00864	8b dd		 mov	 ebx, ebp
  00866	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00869	0f b6 d2	 movzx	 edx, dl
  0086c	c1 e2 04	 shl	 edx, 4
  0086f	0f b6 eb	 movzx	 ebp, bl
  00872	c1 e5 04	 shl	 ebp, 4
  00875	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  0087c	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  00880	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  00887	0f b6 54 24 10	 movzx	 edx, BYTE PTR _blk$[esp+32]
  0088c	c1 e2 04	 shl	 edx, 4
  0088f	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  00896	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  00899	03 d7		 add	 edx, edi
  0089b	03 d6		 add	 edx, esi
  0089d	d1 c5		 rol	 ebp, 1
  0089f	33 ea		 xor	 ebp, edx
  008a1	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  008a4	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  008a7	03 d7		 add	 edx, edi
  008a9	33 d1		 xor	 edx, ecx
  008ab	d1 ca		 ror	 edx, 1
  008ad	8b ca		 mov	 ecx, edx
  008af	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008b2	0f b6 c9	 movzx	 ecx, cl
  008b5	c1 e1 04	 shl	 ecx, 4
  008b8	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  008bf	8b ca		 mov	 ecx, edx
  008c1	c1 e9 08	 shr	 ecx, 8
  008c4	0f b6 c9	 movzx	 ecx, cl
  008c7	8b fa		 mov	 edi, edx
  008c9	c1 ef 18	 shr	 edi, 24			; 00000018H
  008cc	c1 e1 04	 shl	 ecx, 4
  008cf	c1 e7 04	 shl	 edi, 4
  008d2	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  008d9	8b dd		 mov	 ebx, ebp
  008db	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  008e2	0f b6 ca	 movzx	 ecx, dl
  008e5	c1 e1 04	 shl	 ecx, 4
  008e8	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  008ef	8b cd		 mov	 ecx, ebp
  008f1	c1 eb 10	 shr	 ebx, 16			; 00000010H
  008f4	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  008f8	c1 e9 18	 shr	 ecx, 24			; 00000018H
  008fb	0f b6 eb	 movzx	 ebp, bl
  008fe	c1 e1 04	 shl	 ecx, 4
  00901	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  00908	c1 e5 04	 shl	 ebp, 4
  0090b	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00912	8b 4c 24 18	 mov	 ecx, DWORD PTR _blk$[esp+40]
  00916	c1 e9 08	 shr	 ecx, 8
  00919	8b 6c 24 10	 mov	 ebp, DWORD PTR _blk$[esp+32]
  0091d	0f b6 c9	 movzx	 ecx, cl
  00920	c1 e1 04	 shl	 ecx, 4
  00923	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  0092a	0f b6 4c 24 18	 movzx	 ecx, BYTE PTR _blk$[esp+40]
  0092f	8b 5c 24 28	 mov	 ebx, DWORD PTR tv2008[esp+28]
  00933	c1 e1 04	 shl	 ecx, 4
  00936	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  0093d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00940	03 cf		 add	 ecx, edi
  00942	03 ce		 add	 ecx, esi
  00944	d1 c5		 rol	 ebp, 1
  00946	33 e9		 xor	 ebp, ecx
  00948	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0094b	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  0094e	03 cf		 add	 ecx, edi
  00950	33 cb		 xor	 ecx, ebx
  00952	d1 c9		 ror	 ecx, 1
  00954	8b d9		 mov	 ebx, ecx
  00956	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00959	0f b6 f3	 movzx	 esi, bl
  0095c	c1 e6 04	 shl	 esi, 4
  0095f	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00966	8b f9		 mov	 edi, ecx
  00968	c1 ef 18	 shr	 edi, 24			; 00000018H
  0096b	c1 e7 04	 shl	 edi, 4
  0096e	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00975	8b d9		 mov	 ebx, ecx
  00977	c1 eb 08	 shr	 ebx, 8
  0097a	0f b6 fb	 movzx	 edi, bl
  0097d	c1 e7 04	 shl	 edi, 4
  00980	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00987	0f b6 f9	 movzx	 edi, cl
  0098a	c1 e7 04	 shl	 edi, 4
  0098d	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00994	8b dd		 mov	 ebx, ebp
  00996	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00999	0f b6 db	 movzx	 ebx, bl
  0099c	c1 e3 04	 shl	 ebx, 4
  0099f	8b fd		 mov	 edi, ebp
  009a1	c1 ef 18	 shr	 edi, 24			; 00000018H
  009a4	c1 e7 04	 shl	 edi, 4
  009a7	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  009ae	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  009b5	8b dd		 mov	 ebx, ebp
  009b7	c1 eb 08	 shr	 ebx, 8
  009ba	0f b6 db	 movzx	 ebx, bl
  009bd	c1 e3 04	 shl	 ebx, 4
  009c0	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  009c7	89 6c 24 10	 mov	 DWORD PTR _blk$[esp+32], ebp
  009cb	0f b6 5c 24 10	 movzx	 ebx, BYTE PTR _blk$[esp+32]
  009d0	8b 6c 24 18	 mov	 ebp, DWORD PTR _blk$[esp+40]
  009d4	c1 e3 04	 shl	 ebx, 4
  009d7	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  009de	8b 58 28	 mov	 ebx, DWORD PTR [eax+40]
  009e1	03 df		 add	 ebx, edi
  009e3	03 de		 add	 ebx, esi
  009e5	89 7c 24 24	 mov	 DWORD PTR _t0$[esp+28], edi
  009e9	8b 78 2c	 mov	 edi, DWORD PTR [eax+44]
  009ec	d1 c5		 rol	 ebp, 1
  009ee	33 eb		 xor	 ebp, ebx
  009f0	8d 1c 77	 lea	 ebx, DWORD PTR [edi+esi*2]
  009f3	03 5c 24 24	 add	 ebx, DWORD PTR _t0$[esp+28]
  009f7	89 6c 24 18	 mov	 DWORD PTR _blk$[esp+40], ebp
  009fb	33 da		 xor	 ebx, edx
  009fd	d1 cb		 ror	 ebx, 1
  009ff	8b d3		 mov	 edx, ebx
  00a01	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a04	0f b6 d2	 movzx	 edx, dl
  00a07	c1 e2 04	 shl	 edx, 4
  00a0a	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00a11	8b d3		 mov	 edx, ebx
  00a13	8b fb		 mov	 edi, ebx
  00a15	c1 ea 08	 shr	 edx, 8
  00a18	c1 ef 18	 shr	 edi, 24			; 00000018H
  00a1b	c1 e7 04	 shl	 edi, 4
  00a1e	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00a25	0f b6 d2	 movzx	 edx, dl
  00a28	c1 e2 04	 shl	 edx, 4
  00a2b	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00a32	0f b6 d3	 movzx	 edx, bl
  00a35	c1 e2 04	 shl	 edx, 4
  00a38	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00a3f	8b d5		 mov	 edx, ebp
  00a41	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a44	c1 e2 04	 shl	 edx, 4
  00a47	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00a4e	8b 54 24 18	 mov	 edx, DWORD PTR _blk$[esp+40]
  00a52	89 5c 24 24	 mov	 DWORD PTR tv2007[esp+28], ebx
  00a56	8b dd		 mov	 ebx, ebp
  00a58	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00a5b	c1 ea 08	 shr	 edx, 8
  00a5e	0f b6 eb	 movzx	 ebp, bl
  00a61	c1 e5 04	 shl	 ebp, 4
  00a64	33 bc 28 b8 00
	00 00		 xor	 edi, DWORD PTR [eax+ebp+184]
  00a6b	8b 68 20	 mov	 ebp, DWORD PTR [eax+32]
  00a6e	0f b6 d2	 movzx	 edx, dl
  00a71	c1 e2 04	 shl	 edx, 4
  00a74	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  00a7b	0f b6 54 24 18	 movzx	 edx, BYTE PTR _blk$[esp+40]

; 509  : 
; 510  :     out_blk[0] = LE32(blk[2] ^ l_key[0]);
; 511  :     out_blk[1] = LE32(blk[3] ^ l_key[1]);

  00a80	8b 5c 24 24	 mov	 ebx, DWORD PTR tv2007[esp+28]
  00a84	c1 e2 04	 shl	 edx, 4
  00a87	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  00a8e	8b 54 24 10	 mov	 edx, DWORD PTR _blk$[esp+32]
  00a92	03 ef		 add	 ebp, edi
  00a94	03 ee		 add	 ebp, esi
  00a96	d1 c2		 rol	 edx, 1
  00a98	33 d5		 xor	 edx, ebp
  00a9a	8b 68 24	 mov	 ebp, DWORD PTR [eax+36]
  00a9d	8d 74 75 00	 lea	 esi, DWORD PTR [ebp+esi*2]
  00aa1	03 f7		 add	 esi, edi
  00aa3	8b 38		 mov	 edi, DWORD PTR [eax]
  00aa5	33 7c 24 18	 xor	 edi, DWORD PTR _blk$[esp+40]
  00aa9	33 f1		 xor	 esi, ecx
  00aab	8b 4c 24 2c	 mov	 ecx, DWORD PTR _out_blk$[esp+28]
  00aaf	89 39		 mov	 DWORD PTR [ecx], edi
  00ab1	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00ab4	33 fb		 xor	 edi, ebx
  00ab6	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 512  :     out_blk[2] = LE32(blk[0] ^ l_key[2]);

  00ab9	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  00abc	33 fa		 xor	 edi, edx
  00abe	89 79 08	 mov	 DWORD PTR [ecx+8], edi

; 513  :     out_blk[3] = LE32(blk[1] ^ l_key[3]); 

  00ac1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00ac4	d1 ce		 ror	 esi, 1
  00ac6	5f		 pop	 edi
  00ac7	33 c6		 xor	 eax, esi
  00ac9	5e		 pop	 esi
  00aca	5d		 pop	 ebp
  00acb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00ace	5b		 pop	 ebx

; 514  : };

  00acf	83 c4 10	 add	 esp, 16			; 00000010H
  00ad2	c3		 ret	 0
_twofish_decrypt ENDP
_TEXT	ENDS
END
