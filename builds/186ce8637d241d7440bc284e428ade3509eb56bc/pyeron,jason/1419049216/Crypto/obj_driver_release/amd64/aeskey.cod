; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	aes_decrypt_key256
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed\src\crypto\aeskey.c
pdata	SEGMENT
$pdata$aes_decrypt_key256 DD imagerel $LN3
	DD	imagerel $LN3+3229
	DD	imagerel $unwind$aes_decrypt_key256
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$aes_decrypt_key256 DD 091501H
	DD	0f0116215H
	DD	0d00de00fH
	DD	07009c00bH
	DD	050076008H
	DD	03006H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT aes_decrypt_key256
_TEXT	SEGMENT
ss$8$ = 0
ss$9$ = 4
ss$ = 8
ss$1$ = 128
key$ = 128
cx$ = 136
ss$6$ = 144
ss$7$ = 152
aes_decrypt_key256 PROC					; COMDAT

; 498  : {   uint_32t    ss[9];

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 499  : #if defined( d_vars )
; 500  :         d_vars;
; 501  : #endif
; 502  :     cx->ks[v(56,(0))] = ss[0] = word_in(key, 0);

  00015	44 8b 11	 mov	 r10d, DWORD PTR [rcx]

; 503  :     cx->ks[v(56,(1))] = ss[1] = word_in(key, 1);
; 504  :     cx->ks[v(56,(2))] = ss[2] = word_in(key, 2);
; 505  :     cx->ks[v(56,(3))] = ss[3] = word_in(key, 3);
; 506  : 
; 507  : #if DEC_UNROLL == NONE
; 508  :     cx->ks[v(56,(4))] = ss[4] = word_in(key, 4);
; 509  :     cx->ks[v(56,(5))] = ss[5] = word_in(key, 5);
; 510  :     cx->ks[v(56,(6))] = ss[6] = word_in(key, 6);
; 511  :     cx->ks[v(56,(7))] = ss[7] = word_in(key, 7);
; 512  :     {   uint_32t i;
; 513  : 
; 514  :         for(i = 0; i < 6; ++i)
; 515  :             k8e(cx->ks,  i);
; 516  :         k8ef(cx->ks,  6);
; 517  : #if !(DEC_ROUND == NO_TABLES)
; 518  :         for(i = N_COLS; i < 14 * N_COLS; ++i)
; 519  :             cx->ks[i] = inv_mcol(cx->ks[i]);
; 520  : 
; 521  : #endif
; 522  :     }
; 523  : #else
; 524  :     cx->ks[v(56,(4))] = ff(ss[4] = word_in(key, 4));

  00018	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  0001f	4c 8b c9	 mov	 r9, rcx
  00022	44 89 92 e0 00
	00 00		 mov	 DWORD PTR [rdx+224], r10d
  00029	8b 79 04	 mov	 edi, DWORD PTR [rcx+4]
  0002c	4c 8b e2	 mov	 r12, rdx
  0002f	89 ba e4 00 00
	00		 mov	 DWORD PTR [rdx+228], edi
  00035	8b 69 08	 mov	 ebp, DWORD PTR [rcx+8]
  00038	89 aa e8 00 00
	00		 mov	 DWORD PTR [rdx+232], ebp
  0003e	8b 41 0c	 mov	 eax, DWORD PTR [rcx+12]
  00041	89 82 ec 00 00
	00		 mov	 DWORD PTR [rdx+236], eax
  00047	8b 71 10	 mov	 esi, DWORD PTR [rcx+16]
  0004a	89 84 24 90 00
	00 00		 mov	 DWORD PTR ss$6$[rsp], eax
  00051	8b c6		 mov	 eax, esi
  00053	89 74 24 18	 mov	 DWORD PTR ss$[rsp+16], esi
  00057	c1 e8 18	 shr	 eax, 24
  0005a	0f b6 d0	 movzx	 edx, al
  0005d	8b c6		 mov	 eax, esi
  0005f	45 8b 84 95 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r13+rdx*4+3072]
  00067	c1 e8 10	 shr	 eax, 16
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	8b c6		 mov	 eax, esi
  0006f	45 33 84 8d 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+2048]
  00077	c1 e8 08	 shr	 eax, 8
  0007a	0f b6 c8	 movzx	 ecx, al
  0007d	40 0f b6 c6	 movzx	 eax, sil
  00081	45 33 84 8d 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+1024]
  00089	45 33 84 85 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r13+rax*4]
  00091	45 89 84 24 d0
	00 00 00	 mov	 DWORD PTR [r12+208], r8d

; 525  :     cx->ks[v(56,(5))] = ff(ss[5] = word_in(key, 5));

  00099	41 8b 59 14	 mov	 ebx, DWORD PTR [r9+20]
  0009d	8b c3		 mov	 eax, ebx
  0009f	89 5c 24 1c	 mov	 DWORD PTR ss$[rsp+20], ebx
  000a3	c1 e8 18	 shr	 eax, 24
  000a6	0f b6 d0	 movzx	 edx, al
  000a9	8b c3		 mov	 eax, ebx
  000ab	45 8b 84 95 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r13+rdx*4+3072]
  000b3	c1 e8 10	 shr	 eax, 16
  000b6	0f b6 c8	 movzx	 ecx, al
  000b9	8b c3		 mov	 eax, ebx
  000bb	45 33 84 8d 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+2048]
  000c3	c1 e8 08	 shr	 eax, 8
  000c6	0f b6 c8	 movzx	 ecx, al
  000c9	0f b6 c3	 movzx	 eax, bl
  000cc	45 33 84 8d 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+1024]
  000d4	45 33 84 85 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r13+rax*4]
  000dc	45 89 84 24 d4
	00 00 00	 mov	 DWORD PTR [r12+212], r8d

; 526  :     cx->ks[v(56,(6))] = ff(ss[6] = word_in(key, 6));

  000e4	45 8b 59 18	 mov	 r11d, DWORD PTR [r9+24]
  000e8	41 8b c3	 mov	 eax, r11d
  000eb	44 89 5c 24 20	 mov	 DWORD PTR ss$[rsp+24], r11d
  000f0	c1 e8 18	 shr	 eax, 24
  000f3	0f b6 d0	 movzx	 edx, al
  000f6	41 8b c3	 mov	 eax, r11d
  000f9	45 8b 84 95 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r13+rdx*4+3072]
  00101	c1 e8 10	 shr	 eax, 16
  00104	0f b6 c8	 movzx	 ecx, al
  00107	41 8b c3	 mov	 eax, r11d
  0010a	45 33 84 8d 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+2048]
  00112	c1 e8 08	 shr	 eax, 8
  00115	0f b6 c8	 movzx	 ecx, al
  00118	41 0f b6 c3	 movzx	 eax, r11b
  0011c	45 33 84 8d 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r13+rcx*4+1024]
  00124	45 33 84 85 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r13+rax*4]
  0012c	45 89 84 24 d8
	00 00 00	 mov	 DWORD PTR [r12+216], r8d

; 527  :     cx->ks[v(56,(7))] = ff(ss[7] = word_in(key, 7));

  00134	45 8b 79 1c	 mov	 r15d, DWORD PTR [r9+28]
  00138	41 0f b6 cf	 movzx	 ecx, r15b
  0013c	41 8b c7	 mov	 eax, r15d
  0013f	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  00144	c1 e8 18	 shr	 eax, 24
  00147	44 0f b6 c8	 movzx	 r9d, al
  0014b	41 8b c7	 mov	 eax, r15d
  0014e	c1 e8 10	 shr	 eax, 16
  00151	44 0f b6 c0	 movzx	 r8d, al
  00155	41 8b c7	 mov	 eax, r15d
  00158	c1 e8 08	 shr	 eax, 8
  0015b	0f b6 d0	 movzx	 edx, al
  0015e	41 8b 84 8d 00
	00 00 00	 mov	 eax, DWORD PTR t_im[r13+rcx*4]
  00166	41 33 84 95 00
	04 00 00	 xor	 eax, DWORD PTR t_im[r13+rdx*4+1024]
  0016e	43 33 84 85 00
	08 00 00	 xor	 eax, DWORD PTR t_im[r13+r8*4+2048]
  00176	43 33 84 8d 00
	0c 00 00	 xor	 eax, DWORD PTR t_im[r13+r9*4+3072]
  0017e	41 89 84 24 dc
	00 00 00	 mov	 DWORD PTR [r12+220], eax

; 528  :     kdf8(cx->ks, 0); kd8(cx->ks, 1);

  00186	45 8b b4 8d 00
	0c 00 00	 mov	 r14d, DWORD PTR t_fl[r13+rcx*4+3072]
  0018e	45 33 b4 95 00
	00 00 00	 xor	 r14d, DWORD PTR t_fl[r13+rdx*4]
  00196	47 33 b4 85 00
	04 00 00	 xor	 r14d, DWORD PTR t_fl[r13+r8*4+1024]
  0019e	47 33 b4 8d 00
	08 00 00	 xor	 r14d, DWORD PTR t_fl[r13+r9*4+2048]
  001a6	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR cx$[rsp]
  001ae	45 33 f2	 xor	 r14d, r10d
  001b1	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:__ImageBase
  001b8	41 83 f6 01	 xor	 r14d, 1
  001bc	41 33 fe	 xor	 edi, r14d
  001bf	41 8b c6	 mov	 eax, r14d
  001c2	44 89 74 24 08	 mov	 DWORD PTR ss$[rsp], r14d
  001c7	c1 e8 18	 shr	 eax, 24
  001ca	33 ef		 xor	 ebp, edi
  001cc	89 7c 24 0c	 mov	 DWORD PTR ss$[rsp+4], edi
  001d0	0f b6 d0	 movzx	 edx, al
  001d3	89 ac 24 80 00
	00 00		 mov	 DWORD PTR ss$1$[rsp], ebp
  001da	89 6c 24 10	 mov	 DWORD PTR ss$[rsp+8], ebp
  001de	45 8b ac 92 00
	0c 00 00	 mov	 r13d, DWORD PTR t_im[r10+rdx*4+3072]
  001e6	41 8b c6	 mov	 eax, r14d
  001e9	c1 e8 10	 shr	 eax, 16
  001ec	0f b6 c8	 movzx	 ecx, al
  001ef	41 8b c6	 mov	 eax, r14d
  001f2	45 33 ac 8a 00
	08 00 00	 xor	 r13d, DWORD PTR t_im[r10+rcx*4+2048]
  001fa	c1 e8 08	 shr	 eax, 8
  001fd	0f b6 c8	 movzx	 ecx, al
  00200	41 0f b6 c6	 movzx	 eax, r14b
  00204	45 33 ac 8a 00
	04 00 00	 xor	 r13d, DWORD PTR t_im[r10+rcx*4+1024]
  0020c	45 33 ac 82 00
	00 00 00	 xor	 r13d, DWORD PTR t_im[r10+rax*4]
  00214	8b c7		 mov	 eax, edi
  00216	c1 e8 18	 shr	 eax, 24
  00219	45 89 ac 24 c0
	00 00 00	 mov	 DWORD PTR [r12+192], r13d
  00221	0f b6 d0	 movzx	 edx, al
  00224	8b c7		 mov	 eax, edi
  00226	45 8b a4 92 00
	0c 00 00	 mov	 r12d, DWORD PTR t_im[r10+rdx*4+3072]
  0022e	c1 e8 10	 shr	 eax, 16
  00231	0f b6 c8	 movzx	 ecx, al
  00234	8b c7		 mov	 eax, edi
  00236	45 33 a4 8a 00
	08 00 00	 xor	 r12d, DWORD PTR t_im[r10+rcx*4+2048]
  0023e	c1 e8 08	 shr	 eax, 8
  00241	0f b6 c8	 movzx	 ecx, al
  00244	40 0f b6 c7	 movzx	 eax, dil
  00248	45 33 a4 8a 00
	04 00 00	 xor	 r12d, DWORD PTR t_im[r10+rcx*4+1024]
  00250	45 33 a4 82 00
	00 00 00	 xor	 r12d, DWORD PTR t_im[r10+rax*4]
  00258	8b c5		 mov	 eax, ebp
  0025a	c1 e8 18	 shr	 eax, 24
  0025d	45 89 a1 c4 00
	00 00		 mov	 DWORD PTR [r9+196], r12d
  00264	0f b6 d0	 movzx	 edx, al
  00267	8b c5		 mov	 eax, ebp
  00269	41 8b ac 92 00
	0c 00 00	 mov	 ebp, DWORD PTR t_im[r10+rdx*4+3072]
  00271	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR ss$1$[rsp]
  00278	c1 e8 10	 shr	 eax, 16
  0027b	0f b6 c8	 movzx	 ecx, al
  0027e	8b c2		 mov	 eax, edx
  00280	41 33 ac 8a 00
	08 00 00	 xor	 ebp, DWORD PTR t_im[r10+rcx*4+2048]
  00288	c1 e8 08	 shr	 eax, 8
  0028b	0f b6 c8	 movzx	 ecx, al
  0028e	0f b6 44 24 10	 movzx	 eax, BYTE PTR ss$[rsp+8]
  00293	41 33 ac 8a 00
	04 00 00	 xor	 ebp, DWORD PTR t_im[r10+rcx*4+1024]
  0029b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR ss$6$[rsp]
  002a2	41 33 ac 82 00
	00 00 00	 xor	 ebp, DWORD PTR t_im[r10+rax*4]
  002aa	33 ca		 xor	 ecx, edx
  002ac	41 89 a9 c8 00
	00 00		 mov	 DWORD PTR [r9+200], ebp
  002b3	8b c1		 mov	 eax, ecx
  002b5	89 4c 24 14	 mov	 DWORD PTR ss$[rsp+12], ecx
  002b9	c1 e8 18	 shr	 eax, 24
  002bc	89 8c 24 90 00
	00 00		 mov	 DWORD PTR ss$6$[rsp], ecx
  002c3	44 0f b6 c0	 movzx	 r8d, al
  002c7	8b c1		 mov	 eax, ecx
  002c9	c1 e8 10	 shr	 eax, 16
  002cc	0f b6 d0	 movzx	 edx, al
  002cf	8b c1		 mov	 eax, ecx
  002d1	c1 e8 08	 shr	 eax, 8
  002d4	0f b6 c8	 movzx	 ecx, al
  002d7	0f b6 44 24 14	 movzx	 eax, BYTE PTR ss$[rsp+12]
  002dc	41 8b bc 82 00
	00 00 00	 mov	 edi, DWORD PTR t_im[r10+rax*4]
  002e4	41 33 bc 8a 00
	04 00 00	 xor	 edi, DWORD PTR t_im[r10+rcx*4+1024]
  002ec	41 33 bc 92 00
	08 00 00	 xor	 edi, DWORD PTR t_im[r10+rdx*4+2048]
  002f4	43 33 bc 82 00
	0c 00 00	 xor	 edi, DWORD PTR t_im[r10+r8*4+3072]
  002fc	41 89 b9 cc 00
	00 00		 mov	 DWORD PTR [r9+204], edi
  00303	41 8b 84 82 00
	00 00 00	 mov	 eax, DWORD PTR t_fl[r10+rax*4]
  0030b	41 33 84 8a 00
	04 00 00	 xor	 eax, DWORD PTR t_fl[r10+rcx*4+1024]
  00313	41 33 84 92 00
	08 00 00	 xor	 eax, DWORD PTR t_fl[r10+rdx*4+2048]
  0031b	43 33 84 82 00
	0c 00 00	 xor	 eax, DWORD PTR t_fl[r10+r8*4+3072]
  00323	33 f0		 xor	 esi, eax
  00325	8b c6		 mov	 eax, esi
  00327	89 b4 24 98 00
	00 00		 mov	 DWORD PTR ss$7$[rsp], esi
  0032e	89 74 24 18	 mov	 DWORD PTR ss$[rsp+16], esi
  00332	c1 e8 18	 shr	 eax, 24
  00335	0f b6 d0	 movzx	 edx, al
  00338	8b c6		 mov	 eax, esi
  0033a	41 8b b4 92 00
	0c 00 00	 mov	 esi, DWORD PTR t_im[r10+rdx*4+3072]
  00342	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR ss$7$[rsp]
  00349	c1 e8 10	 shr	 eax, 16
  0034c	0f b6 c8	 movzx	 ecx, al
  0034f	33 da		 xor	 ebx, edx
  00351	8b c2		 mov	 eax, edx
  00353	41 33 b4 8a 00
	08 00 00	 xor	 esi, DWORD PTR t_im[r10+rcx*4+2048]
  0035b	c1 e8 08	 shr	 eax, 8
  0035e	89 1c 24	 mov	 DWORD PTR ss$8$[rsp], ebx
  00361	0f b6 c8	 movzx	 ecx, al
  00364	0f b6 44 24 18	 movzx	 eax, BYTE PTR ss$[rsp+16]
  00369	89 5c 24 1c	 mov	 DWORD PTR ss$[rsp+20], ebx
  0036d	41 33 b4 8a 00
	04 00 00	 xor	 esi, DWORD PTR t_im[r10+rcx*4+1024]
  00375	41 33 b4 82 00
	00 00 00	 xor	 esi, DWORD PTR t_im[r10+rax*4]
  0037d	8b c3		 mov	 eax, ebx
  0037f	c1 e8 18	 shr	 eax, 24
  00382	41 89 b1 b0 00
	00 00		 mov	 DWORD PTR [r9+176], esi
  00389	0f b6 d0	 movzx	 edx, al
  0038c	8b c3		 mov	 eax, ebx
  0038e	41 8b 9c 92 00
	0c 00 00	 mov	 ebx, DWORD PTR t_im[r10+rdx*4+3072]
  00396	8b 14 24	 mov	 edx, DWORD PTR ss$8$[rsp]
  00399	c1 e8 10	 shr	 eax, 16
  0039c	0f b6 c8	 movzx	 ecx, al
  0039f	44 33 da	 xor	 r11d, edx
  003a2	8b c2		 mov	 eax, edx
  003a4	41 33 9c 8a 00
	08 00 00	 xor	 ebx, DWORD PTR t_im[r10+rcx*4+2048]
  003ac	c1 e8 08	 shr	 eax, 8
  003af	44 89 5c 24 04	 mov	 DWORD PTR ss$9$[rsp], r11d
  003b4	0f b6 c8	 movzx	 ecx, al
  003b7	0f b6 44 24 1c	 movzx	 eax, BYTE PTR ss$[rsp+20]
  003bc	44 89 5c 24 20	 mov	 DWORD PTR ss$[rsp+24], r11d
  003c1	41 33 9c 8a 00
	04 00 00	 xor	 ebx, DWORD PTR t_im[r10+rcx*4+1024]
  003c9	41 33 9c 82 00
	00 00 00	 xor	 ebx, DWORD PTR t_im[r10+rax*4]
  003d1	41 8b c3	 mov	 eax, r11d
  003d4	c1 e8 18	 shr	 eax, 24
  003d7	41 89 99 b4 00
	00 00		 mov	 DWORD PTR [r9+180], ebx
  003de	0f b6 d0	 movzx	 edx, al
  003e1	41 8b c3	 mov	 eax, r11d
  003e4	45 8b 9c 92 00
	0c 00 00	 mov	 r11d, DWORD PTR t_im[r10+rdx*4+3072]
  003ec	8b 54 24 04	 mov	 edx, DWORD PTR ss$9$[rsp]
  003f0	c1 e8 10	 shr	 eax, 16
  003f3	0f b6 c8	 movzx	 ecx, al
  003f6	44 33 fa	 xor	 r15d, edx
  003f9	8b c2		 mov	 eax, edx
  003fb	45 33 9c 8a 00
	08 00 00	 xor	 r11d, DWORD PTR t_im[r10+rcx*4+2048]
  00403	c1 e8 08	 shr	 eax, 8
  00406	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  0040b	0f b6 c8	 movzx	 ecx, al
  0040e	0f b6 44 24 20	 movzx	 eax, BYTE PTR ss$[rsp+24]
  00413	45 33 9c 8a 00
	04 00 00	 xor	 r11d, DWORD PTR t_im[r10+rcx*4+1024]
  0041b	45 33 9c 82 00
	00 00 00	 xor	 r11d, DWORD PTR t_im[r10+rax*4]
  00423	41 8b c7	 mov	 eax, r15d
  00426	45 89 99 b8 00
	00 00		 mov	 DWORD PTR [r9+184], r11d
  0042d	c1 e8 18	 shr	 eax, 24
  00430	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  00437	44 0f b6 c0	 movzx	 r8d, al
  0043b	41 8b c7	 mov	 eax, r15d
  0043e	c1 e8 10	 shr	 eax, 16
  00441	0f b6 d0	 movzx	 edx, al
  00444	41 8b c7	 mov	 eax, r15d
  00447	c1 e8 08	 shr	 eax, 8
  0044a	0f b6 c8	 movzx	 ecx, al
  0044d	41 0f b6 c7	 movzx	 eax, r15b
  00451	45 8b 94 82 00
	00 00 00	 mov	 r10d, DWORD PTR t_im[r10+rax*4]
  00459	45 33 94 89 00
	04 00 00	 xor	 r10d, DWORD PTR t_im[r9+rcx*4+1024]
  00461	45 33 94 91 00
	08 00 00	 xor	 r10d, DWORD PTR t_im[r9+rdx*4+2048]
  00469	47 33 94 81 00
	0c 00 00	 xor	 r10d, DWORD PTR t_im[r9+r8*4+3072]
  00471	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR cx$[rsp]
  00479	45 89 91 bc 00
	00 00		 mov	 DWORD PTR [r9+188], r10d
  00480	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  00487	45 8b 8c 81 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[r9+rax*4+3072]
  0048f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  00496	44 33 8c 88 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[rax+rcx*4]
  0049e	44 33 8c 90 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[rax+rdx*4+1024]
  004a6	46 33 8c 80 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[rax+r8*4+2048]
  004ae	41 83 f1 02	 xor	 r9d, 2
  004b2	41 8b c1	 mov	 eax, r9d
  004b5	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  004ba	45 33 f1	 xor	 r14d, r9d
  004bd	c1 e8 18	 shr	 eax, 24
  004c0	0f b6 d0	 movzx	 edx, al
  004c3	41 8b c1	 mov	 eax, r9d
  004c6	41 c1 e9 08	 shr	 r9d, 8
  004ca	c1 e8 10	 shr	 eax, 16
  004cd	0f b6 c8	 movzx	 ecx, al
  004d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  004d7	44 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[rax+rdx*4+3072]
  004df	41 0f b6 c1	 movzx	 eax, r9b
  004e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  004ea	44 33 84 8a 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[rdx+rcx*4+2048]
  004f2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR cx$[rsp]
  004fa	44 33 84 82 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[rdx+rax*4+1024]
  00502	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00507	44 33 84 82 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[rdx+rax*4]
  0050f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR ss$1$[rsp]
  00516	45 33 c5	 xor	 r8d, r13d
  00519	44 8b 6c 24 0c	 mov	 r13d, DWORD PTR ss$[rsp+4]
  0051e	44 89 81 a0 00
	00 00		 mov	 DWORD PTR [rcx+160], r8d
  00525	45 33 c4	 xor	 r8d, r12d
  00528	44 8b a4 24 90
	00 00 00	 mov	 r12d, DWORD PTR ss$6$[rsp]
  00530	44 89 81 a4 00
	00 00		 mov	 DWORD PTR [rcx+164], r8d
  00537	44 33 c5	 xor	 r8d, ebp
  0053a	8b ac 24 98 00
	00 00		 mov	 ebp, DWORD PTR ss$7$[rsp]
  00541	44 89 81 a8 00
	00 00		 mov	 DWORD PTR [rcx+168], r8d
  00548	44 33 c7	 xor	 r8d, edi
  0054b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
  00552	44 89 81 ac 00
	00 00		 mov	 DWORD PTR [rcx+172], r8d
  00559	45 33 ee	 xor	 r13d, r14d
  0055c	41 33 c5	 xor	 eax, r13d
  0055f	44 33 e0	 xor	 r12d, eax
  00562	89 84 24 80 00
	00 00		 mov	 DWORD PTR ss$1$[rsp], eax
  00569	41 8b c4	 mov	 eax, r12d
  0056c	44 89 64 24 14	 mov	 DWORD PTR ss$[rsp+12], r12d
  00571	c1 e8 18	 shr	 eax, 24
  00574	0f b6 d0	 movzx	 edx, al
  00577	41 8b c4	 mov	 eax, r12d
  0057a	44 8b 8c 97 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[rdi+rdx*4+3072]
  00582	c1 e8 10	 shr	 eax, 16
  00585	0f b6 c8	 movzx	 ecx, al
  00588	41 8b c4	 mov	 eax, r12d
  0058b	44 33 8c 8f 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[rdi+rcx*4+2048]
  00593	c1 e8 08	 shr	 eax, 8
  00596	0f b6 c8	 movzx	 ecx, al
  00599	41 0f b6 c4	 movzx	 eax, r12b
  0059d	44 33 8c 8f 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[rdi+rcx*4+1024]
  005a5	44 33 8c 87 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[rdi+rax*4]
  005ad	41 8b c1	 mov	 eax, r9d
  005b0	41 33 e9	 xor	 ebp, r9d
  005b3	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  005b8	c1 e8 18	 shr	 eax, 24
  005bb	0f b6 d0	 movzx	 edx, al
  005be	41 8b c1	 mov	 eax, r9d
  005c1	41 c1 e9 08	 shr	 r9d, 8
  005c5	44 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[rdi+rdx*4+3072]
  005cd	c1 e8 10	 shr	 eax, 16
  005d0	0f b6 c8	 movzx	 ecx, al
  005d3	41 0f b6 c1	 movzx	 eax, r9b
  005d7	44 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[rdi+rcx*4+2048]
  005df	44 33 84 87 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[rdi+rax*4+1024]
  005e7	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  005ec	44 33 84 87 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[rdi+rax*4]
  005f4	8b 3c 24	 mov	 edi, DWORD PTR ss$8$[rsp]
  005f7	44 33 c6	 xor	 r8d, esi
  005fa	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR cx$[rsp]
  00602	33 fd		 xor	 edi, ebp
  00604	44 89 86 90 00
	00 00		 mov	 DWORD PTR [rsi+144], r8d
  0060b	44 33 c3	 xor	 r8d, ebx
  0060e	8b 5c 24 04	 mov	 ebx, DWORD PTR ss$9$[rsp]
  00612	33 df		 xor	 ebx, edi
  00614	44 89 86 94 00
	00 00		 mov	 DWORD PTR [rsi+148], r8d
  0061b	45 33 c3	 xor	 r8d, r11d
  0061e	44 33 fb	 xor	 r15d, ebx
  00621	44 89 86 98 00
	00 00		 mov	 DWORD PTR [rsi+152], r8d
  00628	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  0062d	45 33 c2	 xor	 r8d, r10d

; 529  :     kd8(cx->ks, 2);  kd8(cx->ks, 3);

  00630	44 8b 94 24 80
	00 00 00	 mov	 r10d, DWORD PTR ss$1$[rsp]
  00638	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:__ImageBase
  0063f	44 89 86 9c 00
	00 00		 mov	 DWORD PTR [rsi+156], r8d
  00646	41 8b c7	 mov	 eax, r15d
  00649	c1 e8 18	 shr	 eax, 24
  0064c	0f b6 d0	 movzx	 edx, al
  0064f	41 8b c7	 mov	 eax, r15d
  00652	45 8b 8c 93 00
	08 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+2048]
  0065a	c1 e8 10	 shr	 eax, 16
  0065d	0f b6 c8	 movzx	 ecx, al
  00660	41 8b c7	 mov	 eax, r15d
  00663	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  0066b	c1 e8 08	 shr	 eax, 8
  0066e	0f b6 c8	 movzx	 ecx, al
  00671	41 0f b6 c7	 movzx	 eax, r15b
  00675	45 33 8c 8b 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4]
  0067d	45 33 8c 83 00
	0c 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4+3072]
  00685	41 83 f1 04	 xor	 r9d, 4
  00689	41 8b c1	 mov	 eax, r9d
  0068c	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00691	45 33 f1	 xor	 r14d, r9d
  00694	c1 e8 18	 shr	 eax, 24
  00697	45 33 ee	 xor	 r13d, r14d
  0069a	0f b6 d0	 movzx	 edx, al
  0069d	41 8b c1	 mov	 eax, r9d
  006a0	41 c1 e9 08	 shr	 r9d, 8
  006a4	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  006ac	c1 e8 10	 shr	 eax, 16
  006af	45 33 d5	 xor	 r10d, r13d
  006b2	0f b6 c8	 movzx	 ecx, al
  006b5	41 0f b6 c1	 movzx	 eax, r9b
  006b9	45 33 e2	 xor	 r12d, r10d
  006bc	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  006c4	44 89 64 24 14	 mov	 DWORD PTR ss$[rsp+12], r12d
  006c9	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  006d1	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  006d6	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  006de	41 8b c4	 mov	 eax, r12d
  006e1	44 33 86 a0 00
	00 00		 xor	 r8d, DWORD PTR [rsi+160]
  006e8	c1 e8 18	 shr	 eax, 24
  006eb	44 89 86 80 00
	00 00		 mov	 DWORD PTR [rsi+128], r8d
  006f2	44 33 86 a4 00
	00 00		 xor	 r8d, DWORD PTR [rsi+164]
  006f9	0f b6 d0	 movzx	 edx, al
  006fc	44 89 86 84 00
	00 00		 mov	 DWORD PTR [rsi+132], r8d
  00703	44 33 86 a8 00
	00 00		 xor	 r8d, DWORD PTR [rsi+168]
  0070a	41 8b c4	 mov	 eax, r12d
  0070d	44 89 86 88 00
	00 00		 mov	 DWORD PTR [rsi+136], r8d
  00714	44 33 86 ac 00
	00 00		 xor	 r8d, DWORD PTR [rsi+172]
  0071b	c1 e8 10	 shr	 eax, 16
  0071e	0f b6 c8	 movzx	 ecx, al
  00721	44 89 86 8c 00
	00 00		 mov	 DWORD PTR [rsi+140], r8d
  00728	45 8b 8c 93 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+3072]
  00730	45 33 8c 8b 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+2048]
  00738	41 8b c4	 mov	 eax, r12d
  0073b	c1 e8 08	 shr	 eax, 8
  0073e	0f b6 c8	 movzx	 ecx, al
  00741	41 0f b6 c4	 movzx	 eax, r12b
  00745	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  0074d	45 33 8c 83 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4]
  00755	41 8b c1	 mov	 eax, r9d
  00758	41 33 e9	 xor	 ebp, r9d
  0075b	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00760	c1 e8 18	 shr	 eax, 24
  00763	33 fd		 xor	 edi, ebp
  00765	0f b6 d0	 movzx	 edx, al
  00768	41 8b c1	 mov	 eax, r9d
  0076b	41 c1 e9 08	 shr	 r9d, 8
  0076f	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  00777	c1 e8 10	 shr	 eax, 16
  0077a	0f b6 c8	 movzx	 ecx, al
  0077d	41 0f b6 c1	 movzx	 eax, r9b
  00781	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  00789	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  00791	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00796	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  0079e	44 33 86 90 00
	00 00		 xor	 r8d, DWORD PTR [rsi+144]
  007a5	44 89 46 70	 mov	 DWORD PTR [rsi+112], r8d
  007a9	44 33 86 94 00
	00 00		 xor	 r8d, DWORD PTR [rsi+148]
  007b0	33 df		 xor	 ebx, edi
  007b2	44 89 46 74	 mov	 DWORD PTR [rsi+116], r8d
  007b6	44 33 86 98 00
	00 00		 xor	 r8d, DWORD PTR [rsi+152]
  007bd	44 33 fb	 xor	 r15d, ebx
  007c0	44 89 46 78	 mov	 DWORD PTR [rsi+120], r8d
  007c4	44 33 86 9c 00
	00 00		 xor	 r8d, DWORD PTR [rsi+156]
  007cb	41 8b c7	 mov	 eax, r15d
  007ce	c1 e8 18	 shr	 eax, 24
  007d1	44 89 46 7c	 mov	 DWORD PTR [rsi+124], r8d
  007d5	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  007da	0f b6 d0	 movzx	 edx, al
  007dd	41 8b c7	 mov	 eax, r15d
  007e0	45 8b 8c 93 00
	08 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+2048]
  007e8	c1 e8 10	 shr	 eax, 16
  007eb	0f b6 c8	 movzx	 ecx, al
  007ee	41 8b c7	 mov	 eax, r15d
  007f1	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  007f9	c1 e8 08	 shr	 eax, 8
  007fc	0f b6 c8	 movzx	 ecx, al
  007ff	41 0f b6 c7	 movzx	 eax, r15b
  00803	45 33 8c 8b 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4]
  0080b	45 33 8c 83 00
	0c 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4+3072]
  00813	41 83 f1 08	 xor	 r9d, 8
  00817	41 8b c1	 mov	 eax, r9d
  0081a	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  0081f	45 33 f1	 xor	 r14d, r9d
  00822	c1 e8 18	 shr	 eax, 24
  00825	45 33 ee	 xor	 r13d, r14d
  00828	0f b6 d0	 movzx	 edx, al
  0082b	41 8b c1	 mov	 eax, r9d
  0082e	41 c1 e9 08	 shr	 r9d, 8
  00832	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  0083a	c1 e8 10	 shr	 eax, 16
  0083d	45 33 d5	 xor	 r10d, r13d
  00840	0f b6 c8	 movzx	 ecx, al
  00843	41 0f b6 c1	 movzx	 eax, r9b
  00847	45 33 e2	 xor	 r12d, r10d
  0084a	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  00852	44 89 64 24 14	 mov	 DWORD PTR ss$[rsp+12], r12d
  00857	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  0085f	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00864	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  0086c	41 8b c4	 mov	 eax, r12d
  0086f	44 33 86 80 00
	00 00		 xor	 r8d, DWORD PTR [rsi+128]
  00876	c1 e8 18	 shr	 eax, 24
  00879	44 89 46 60	 mov	 DWORD PTR [rsi+96], r8d
  0087d	44 33 86 84 00
	00 00		 xor	 r8d, DWORD PTR [rsi+132]
  00884	0f b6 d0	 movzx	 edx, al
  00887	44 89 46 64	 mov	 DWORD PTR [rsi+100], r8d
  0088b	44 33 86 88 00
	00 00		 xor	 r8d, DWORD PTR [rsi+136]
  00892	41 8b c4	 mov	 eax, r12d
  00895	44 89 46 68	 mov	 DWORD PTR [rsi+104], r8d
  00899	44 33 86 8c 00
	00 00		 xor	 r8d, DWORD PTR [rsi+140]
  008a0	c1 e8 10	 shr	 eax, 16
  008a3	0f b6 c8	 movzx	 ecx, al
  008a6	44 89 46 6c	 mov	 DWORD PTR [rsi+108], r8d
  008aa	45 8b 8c 93 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+3072]
  008b2	45 33 8c 8b 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+2048]
  008ba	41 8b c4	 mov	 eax, r12d
  008bd	c1 e8 08	 shr	 eax, 8
  008c0	0f b6 c8	 movzx	 ecx, al
  008c3	41 0f b6 c4	 movzx	 eax, r12b
  008c7	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  008cf	45 33 8c 83 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4]
  008d7	41 8b c1	 mov	 eax, r9d
  008da	41 33 e9	 xor	 ebp, r9d
  008dd	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  008e2	c1 e8 18	 shr	 eax, 24
  008e5	33 fd		 xor	 edi, ebp
  008e7	0f b6 d0	 movzx	 edx, al
  008ea	41 8b c1	 mov	 eax, r9d
  008ed	41 c1 e9 08	 shr	 r9d, 8
  008f1	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  008f9	c1 e8 10	 shr	 eax, 16
  008fc	0f b6 c8	 movzx	 ecx, al
  008ff	41 0f b6 c1	 movzx	 eax, r9b
  00903	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  0090b	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  00913	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00918	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  00920	44 33 46 70	 xor	 r8d, DWORD PTR [rsi+112]
  00924	44 89 46 50	 mov	 DWORD PTR [rsi+80], r8d
  00928	44 33 46 74	 xor	 r8d, DWORD PTR [rsi+116]
  0092c	44 89 46 54	 mov	 DWORD PTR [rsi+84], r8d
  00930	44 33 46 78	 xor	 r8d, DWORD PTR [rsi+120]
  00934	33 df		 xor	 ebx, edi
  00936	44 89 46 58	 mov	 DWORD PTR [rsi+88], r8d
  0093a	44 33 46 7c	 xor	 r8d, DWORD PTR [rsi+124]
  0093e	44 33 fb	 xor	 r15d, ebx
  00941	44 89 46 5c	 mov	 DWORD PTR [rsi+92], r8d

; 530  :     kd8(cx->ks, 4);  kd8(cx->ks, 5);

  00945	41 8b c7	 mov	 eax, r15d
  00948	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  0094d	c1 e8 18	 shr	 eax, 24
  00950	0f b6 d0	 movzx	 edx, al
  00953	41 8b c7	 mov	 eax, r15d
  00956	45 8b 8c 93 00
	08 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+2048]
  0095e	c1 e8 10	 shr	 eax, 16
  00961	0f b6 c8	 movzx	 ecx, al
  00964	41 8b c7	 mov	 eax, r15d
  00967	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  0096f	c1 e8 08	 shr	 eax, 8
  00972	0f b6 c8	 movzx	 ecx, al
  00975	41 0f b6 c7	 movzx	 eax, r15b
  00979	45 33 8c 8b 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4]
  00981	45 33 8c 83 00
	0c 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4+3072]
  00989	41 83 f1 10	 xor	 r9d, 16
  0098d	41 8b c1	 mov	 eax, r9d
  00990	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00995	45 33 f1	 xor	 r14d, r9d
  00998	c1 e8 18	 shr	 eax, 24
  0099b	45 33 ee	 xor	 r13d, r14d
  0099e	0f b6 d0	 movzx	 edx, al
  009a1	41 8b c1	 mov	 eax, r9d
  009a4	41 c1 e9 08	 shr	 r9d, 8
  009a8	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  009b0	c1 e8 10	 shr	 eax, 16
  009b3	45 33 d5	 xor	 r10d, r13d
  009b6	0f b6 c8	 movzx	 ecx, al
  009b9	41 0f b6 c1	 movzx	 eax, r9b
  009bd	45 33 e2	 xor	 r12d, r10d
  009c0	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  009c8	44 89 64 24 14	 mov	 DWORD PTR ss$[rsp+12], r12d
  009cd	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  009d5	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  009da	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  009e2	41 8b c4	 mov	 eax, r12d
  009e5	44 33 46 60	 xor	 r8d, DWORD PTR [rsi+96]
  009e9	c1 e8 18	 shr	 eax, 24
  009ec	0f b6 d0	 movzx	 edx, al
  009ef	44 89 46 40	 mov	 DWORD PTR [rsi+64], r8d
  009f3	44 33 46 64	 xor	 r8d, DWORD PTR [rsi+100]
  009f7	44 89 46 44	 mov	 DWORD PTR [rsi+68], r8d
  009fb	44 33 46 68	 xor	 r8d, DWORD PTR [rsi+104]
  009ff	41 8b c4	 mov	 eax, r12d
  00a02	c1 e8 10	 shr	 eax, 16
  00a05	44 89 46 48	 mov	 DWORD PTR [rsi+72], r8d
  00a09	44 33 46 6c	 xor	 r8d, DWORD PTR [rsi+108]
  00a0d	0f b6 c8	 movzx	 ecx, al
  00a10	44 89 46 4c	 mov	 DWORD PTR [rsi+76], r8d
  00a14	45 8b 8c 93 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+3072]
  00a1c	45 33 8c 8b 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+2048]
  00a24	41 8b c4	 mov	 eax, r12d
  00a27	c1 e8 08	 shr	 eax, 8
  00a2a	0f b6 c8	 movzx	 ecx, al
  00a2d	41 0f b6 c4	 movzx	 eax, r12b
  00a31	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  00a39	45 33 8c 83 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4]
  00a41	41 8b c1	 mov	 eax, r9d
  00a44	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00a49	41 33 e9	 xor	 ebp, r9d
  00a4c	c1 e8 18	 shr	 eax, 24
  00a4f	0f b6 d0	 movzx	 edx, al
  00a52	41 8b c1	 mov	 eax, r9d
  00a55	41 c1 e9 08	 shr	 r9d, 8
  00a59	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  00a61	c1 e8 10	 shr	 eax, 16
  00a64	0f b6 c8	 movzx	 ecx, al
  00a67	41 0f b6 c1	 movzx	 eax, r9b
  00a6b	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  00a73	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  00a7b	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00a80	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  00a88	44 33 46 50	 xor	 r8d, DWORD PTR [rsi+80]
  00a8c	44 89 46 30	 mov	 DWORD PTR [rsi+48], r8d
  00a90	44 33 46 54	 xor	 r8d, DWORD PTR [rsi+84]
  00a94	33 fd		 xor	 edi, ebp
  00a96	44 89 46 34	 mov	 DWORD PTR [rsi+52], r8d
  00a9a	44 33 46 58	 xor	 r8d, DWORD PTR [rsi+88]
  00a9e	33 df		 xor	 ebx, edi
  00aa0	44 89 46 38	 mov	 DWORD PTR [rsi+56], r8d
  00aa4	44 33 46 5c	 xor	 r8d, DWORD PTR [rsi+92]
  00aa8	44 33 fb	 xor	 r15d, ebx
  00aab	44 89 46 3c	 mov	 DWORD PTR [rsi+60], r8d
  00aaf	41 8b c7	 mov	 eax, r15d
  00ab2	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  00ab7	c1 e8 18	 shr	 eax, 24
  00aba	0f b6 d0	 movzx	 edx, al
  00abd	41 8b c7	 mov	 eax, r15d
  00ac0	45 8b 8c 93 00
	08 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+2048]
  00ac8	c1 e8 10	 shr	 eax, 16
  00acb	0f b6 c8	 movzx	 ecx, al
  00ace	41 8b c7	 mov	 eax, r15d
  00ad1	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  00ad9	c1 e8 08	 shr	 eax, 8
  00adc	0f b6 c8	 movzx	 ecx, al
  00adf	41 0f b6 c7	 movzx	 eax, r15b
  00ae3	45 33 8c 8b 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4]
  00aeb	45 33 8c 83 00
	0c 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4+3072]
  00af3	41 83 f1 20	 xor	 r9d, 32			; 00000020H
  00af7	41 8b c1	 mov	 eax, r9d
  00afa	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00aff	45 33 f1	 xor	 r14d, r9d
  00b02	c1 e8 18	 shr	 eax, 24
  00b05	45 33 ee	 xor	 r13d, r14d
  00b08	0f b6 d0	 movzx	 edx, al
  00b0b	41 8b c1	 mov	 eax, r9d
  00b0e	41 c1 e9 08	 shr	 r9d, 8
  00b12	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  00b1a	c1 e8 10	 shr	 eax, 16
  00b1d	45 33 d5	 xor	 r10d, r13d
  00b20	0f b6 c8	 movzx	 ecx, al
  00b23	41 0f b6 c1	 movzx	 eax, r9b
  00b27	45 33 e2	 xor	 r12d, r10d
  00b2a	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  00b32	44 89 64 24 14	 mov	 DWORD PTR ss$[rsp+12], r12d
  00b37	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  00b3f	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00b44	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  00b4c	41 8b c4	 mov	 eax, r12d
  00b4f	44 33 46 40	 xor	 r8d, DWORD PTR [rsi+64]
  00b53	c1 e8 18	 shr	 eax, 24
  00b56	0f b6 d0	 movzx	 edx, al
  00b59	44 89 46 20	 mov	 DWORD PTR [rsi+32], r8d
  00b5d	44 33 46 44	 xor	 r8d, DWORD PTR [rsi+68]
  00b61	44 89 46 24	 mov	 DWORD PTR [rsi+36], r8d
  00b65	44 33 46 48	 xor	 r8d, DWORD PTR [rsi+72]
  00b69	41 8b c4	 mov	 eax, r12d
  00b6c	c1 e8 10	 shr	 eax, 16
  00b6f	44 89 46 28	 mov	 DWORD PTR [rsi+40], r8d
  00b73	44 33 46 4c	 xor	 r8d, DWORD PTR [rsi+76]
  00b77	0f b6 c8	 movzx	 ecx, al
  00b7a	44 89 46 2c	 mov	 DWORD PTR [rsi+44], r8d
  00b7e	45 8b 8c 93 00
	0c 00 00	 mov	 r9d, DWORD PTR t_fl[r11+rdx*4+3072]
  00b86	45 33 8c 8b 00
	08 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+2048]
  00b8e	41 8b c4	 mov	 eax, r12d
  00b91	c1 e8 08	 shr	 eax, 8
  00b94	0f b6 c8	 movzx	 ecx, al
  00b97	41 0f b6 c4	 movzx	 eax, r12b
  00b9b	45 33 8c 8b 00
	04 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rcx*4+1024]
  00ba3	45 33 8c 83 00
	00 00 00	 xor	 r9d, DWORD PTR t_fl[r11+rax*4]
  00bab	41 8b c1	 mov	 eax, r9d
  00bae	44 89 4c 24 28	 mov	 DWORD PTR ss$[rsp+32], r9d
  00bb3	41 33 e9	 xor	 ebp, r9d
  00bb6	c1 e8 18	 shr	 eax, 24
  00bb9	0f b6 d0	 movzx	 edx, al
  00bbc	41 8b c1	 mov	 eax, r9d
  00bbf	41 c1 e9 08	 shr	 r9d, 8
  00bc3	45 8b 84 93 00
	0c 00 00	 mov	 r8d, DWORD PTR t_im[r11+rdx*4+3072]
  00bcb	c1 e8 10	 shr	 eax, 16
  00bce	0f b6 c8	 movzx	 ecx, al
  00bd1	41 0f b6 c1	 movzx	 eax, r9b
  00bd5	45 33 84 8b 00
	08 00 00	 xor	 r8d, DWORD PTR t_im[r11+rcx*4+2048]
  00bdd	45 33 84 83 00
	04 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4+1024]
  00be5	0f b6 44 24 28	 movzx	 eax, BYTE PTR ss$[rsp+32]
  00bea	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_im[r11+rax*4]
  00bf2	44 33 46 30	 xor	 r8d, DWORD PTR [rsi+48]
  00bf6	33 fd		 xor	 edi, ebp
  00bf8	44 89 46 10	 mov	 DWORD PTR [rsi+16], r8d
  00bfc	44 33 46 34	 xor	 r8d, DWORD PTR [rsi+52]
  00c00	33 df		 xor	 ebx, edi
  00c02	44 89 46 14	 mov	 DWORD PTR [rsi+20], r8d
  00c06	44 33 46 38	 xor	 r8d, DWORD PTR [rsi+56]
  00c0a	44 33 fb	 xor	 r15d, ebx
  00c0d	44 89 46 18	 mov	 DWORD PTR [rsi+24], r8d
  00c11	44 33 46 3c	 xor	 r8d, DWORD PTR [rsi+60]

; 531  :     kdl8(cx->ks, 6);

  00c15	41 8b c7	 mov	 eax, r15d
  00c18	c1 e8 18	 shr	 eax, 24
  00c1b	44 89 46 1c	 mov	 DWORD PTR [rsi+28], r8d
  00c1f	44 89 7c 24 24	 mov	 DWORD PTR ss$[rsp+28], r15d
  00c24	0f b6 d0	 movzx	 edx, al
  00c27	41 8b c7	 mov	 eax, r15d
  00c2a	41 c1 ef 08	 shr	 r15d, 8
  00c2e	45 8b 84 93 00
	08 00 00	 mov	 r8d, DWORD PTR t_fl[r11+rdx*4+2048]
  00c36	c1 e8 10	 shr	 eax, 16
  00c39	0f b6 c8	 movzx	 ecx, al
  00c3c	41 0f b6 c7	 movzx	 eax, r15b
  00c40	45 33 84 8b 00
	04 00 00	 xor	 r8d, DWORD PTR t_fl[r11+rcx*4+1024]
  00c48	45 33 84 83 00
	00 00 00	 xor	 r8d, DWORD PTR t_fl[r11+rax*4]
  00c50	0f b6 44 24 24	 movzx	 eax, BYTE PTR ss$[rsp+28]
  00c55	45 33 84 83 00
	0c 00 00	 xor	 r8d, DWORD PTR t_fl[r11+rax*4+3072]

; 532  : #endif
; 533  :     cx->inf.l = 0;

  00c5d	83 a6 f0 00 00
	00 00		 and	 DWORD PTR [rsi+240], 0

; 534  :     cx->inf.b[0] = 14 * 16;

  00c64	c6 86 f0 00 00
	00 e0		 mov	 BYTE PTR [rsi+240], 224	; 000000e0H
  00c6b	45 33 c6	 xor	 r8d, r14d
  00c6e	41 83 f0 40	 xor	 r8d, 64			; 00000040H
  00c72	45 33 e8	 xor	 r13d, r8d
  00c75	44 89 06	 mov	 DWORD PTR [rsi], r8d
  00c78	45 33 d5	 xor	 r10d, r13d
  00c7b	44 89 6e 04	 mov	 DWORD PTR [rsi+4], r13d
  00c7f	45 33 e2	 xor	 r12d, r10d
  00c82	44 89 56 08	 mov	 DWORD PTR [rsi+8], r10d

; 535  : 
; 536  : #ifdef USE_VIA_ACE_IF_PRESENT
; 537  :     if(VIA_ACE_AVAILABLE)
; 538  :         cx->inf.b[1] = 0xff;
; 539  : #endif
; 540  : 
; 541  : #if defined( AES_ERR_CHK )
; 542  :     return EXIT_SUCCESS;

  00c86	33 c0		 xor	 eax, eax
  00c88	44 89 66 0c	 mov	 DWORD PTR [rsi+12], r12d

; 543  : #endif
; 544  : }

  00c8c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00c90	41 5f		 pop	 r15
  00c92	41 5e		 pop	 r14
  00c94	41 5d		 pop	 r13
  00c96	41 5c		 pop	 r12
  00c98	5f		 pop	 rdi
  00c99	5e		 pop	 rsi
  00c9a	5d		 pop	 rbp
  00c9b	5b		 pop	 rbx
  00c9c	c3		 ret	 0
aes_decrypt_key256 ENDP
_TEXT	ENDS
PUBLIC	aes_encrypt_key256
;	COMDAT pdata
pdata	SEGMENT
$pdata$aes_encrypt_key256 DD imagerel $LN3
	DD	imagerel $LN3+1407
	DD	imagerel $unwind$aes_encrypt_key256
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$aes_encrypt_key256 DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT aes_encrypt_key256
_TEXT	SEGMENT
ss$ = 0
key$ = 80
cx$ = 88
aes_encrypt_key256 PROC					; COMDAT

; 175  : {   uint_32t    ss[8];

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 176  : 
; 177  :     cx->ks[0] = ss[0] = word_in(key, 0);

  0001c	44 8b 01	 mov	 r8d, DWORD PTR [rcx]

; 178  :     cx->ks[1] = ss[1] = word_in(key, 1);
; 179  :     cx->ks[2] = ss[2] = word_in(key, 2);
; 180  :     cx->ks[3] = ss[3] = word_in(key, 3);
; 181  :     cx->ks[4] = ss[4] = word_in(key, 4);
; 182  :     cx->ks[5] = ss[5] = word_in(key, 5);
; 183  :     cx->ks[6] = ss[6] = word_in(key, 6);
; 184  :     cx->ks[7] = ss[7] = word_in(key, 7);
; 185  : 
; 186  : #if ENC_UNROLL == NONE
; 187  :     {   uint_32t i;
; 188  :         for(i = 0; i < 6; ++i)
; 189  :             ke8(cx->ks,  i);
; 190  :     }
; 191  : #else
; 192  :     ke8(cx->ks, 0); ke8(cx->ks, 1);

  0001f	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:t_fl
  00026	4c 8b f2	 mov	 r14, rdx
  00029	44 89 02	 mov	 DWORD PTR [rdx], r8d
  0002c	8b 69 04	 mov	 ebp, DWORD PTR [rcx+4]
  0002f	89 6a 04	 mov	 DWORD PTR [rdx+4], ebp
  00032	44 8b 69 08	 mov	 r13d, DWORD PTR [rcx+8]
  00036	44 89 6a 08	 mov	 DWORD PTR [rdx+8], r13d
  0003a	44 8b 61 0c	 mov	 r12d, DWORD PTR [rcx+12]
  0003e	44 89 62 0c	 mov	 DWORD PTR [rdx+12], r12d
  00042	44 8b 59 10	 mov	 r11d, DWORD PTR [rcx+16]
  00046	44 89 5a 10	 mov	 DWORD PTR [rdx+16], r11d
  0004a	8b 59 14	 mov	 ebx, DWORD PTR [rcx+20]
  0004d	89 5a 14	 mov	 DWORD PTR [rdx+20], ebx
  00050	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]
  00053	89 7a 18	 mov	 DWORD PTR [rdx+24], edi
  00056	8b 71 1c	 mov	 esi, DWORD PTR [rcx+28]
  00059	89 72 1c	 mov	 DWORD PTR [rdx+28], esi
  0005c	8b c6		 mov	 eax, esi
  0005e	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  00062	c1 e8 18	 shr	 eax, 24
  00065	0f b6 d0	 movzx	 edx, al
  00068	8b c6		 mov	 eax, esi
  0006a	45 8b 8c 97 00
	08 00 00	 mov	 r9d, DWORD PTR [r15+rdx*4+2048]
  00072	c1 e8 10	 shr	 eax, 16
  00075	0f b6 c8	 movzx	 ecx, al
  00078	8b c6		 mov	 eax, esi
  0007a	45 33 8c 8f 00
	04 00 00	 xor	 r9d, DWORD PTR [r15+rcx*4+1024]
  00082	c1 e8 08	 shr	 eax, 8
  00085	0f b6 c8	 movzx	 ecx, al
  00088	40 0f b6 c6	 movzx	 eax, sil
  0008c	45 33 0c 8f	 xor	 r9d, DWORD PTR [r15+rcx*4]
  00090	45 33 8c 87 00
	0c 00 00	 xor	 r9d, DWORD PTR [r15+rax*4+3072]
  00098	45 33 c8	 xor	 r9d, r8d
  0009b	41 83 f1 01	 xor	 r9d, 1
  0009f	45 89 4e 20	 mov	 DWORD PTR [r14+32], r9d
  000a3	41 33 e9	 xor	 ebp, r9d
  000a6	41 89 6e 24	 mov	 DWORD PTR [r14+36], ebp
  000aa	44 33 ed	 xor	 r13d, ebp
  000ad	45 89 6e 28	 mov	 DWORD PTR [r14+40], r13d
  000b1	45 33 e5	 xor	 r12d, r13d
  000b4	45 89 66 2c	 mov	 DWORD PTR [r14+44], r12d
  000b8	41 8b c4	 mov	 eax, r12d
  000bb	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  000c0	c1 e8 18	 shr	 eax, 24
  000c3	0f b6 d0	 movzx	 edx, al
  000c6	41 8b c4	 mov	 eax, r12d
  000c9	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  000d1	c1 e8 10	 shr	 eax, 16
  000d4	0f b6 c8	 movzx	 ecx, al
  000d7	41 8b c4	 mov	 eax, r12d
  000da	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  000e2	c1 e8 08	 shr	 eax, 8
  000e5	0f b6 c8	 movzx	 ecx, al
  000e8	41 0f b6 c4	 movzx	 eax, r12b
  000ec	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  000f4	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  000f8	45 33 d8	 xor	 r11d, r8d
  000fb	45 89 5e 30	 mov	 DWORD PTR [r14+48], r11d
  000ff	41 33 db	 xor	 ebx, r11d
  00102	41 89 5e 34	 mov	 DWORD PTR [r14+52], ebx
  00106	33 fb		 xor	 edi, ebx
  00108	33 f7		 xor	 esi, edi
  0010a	41 89 7e 38	 mov	 DWORD PTR [r14+56], edi
  0010e	41 89 76 3c	 mov	 DWORD PTR [r14+60], esi
  00112	8b c6		 mov	 eax, esi
  00114	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  00118	c1 e8 18	 shr	 eax, 24
  0011b	0f b6 d0	 movzx	 edx, al
  0011e	8b c6		 mov	 eax, esi
  00120	45 8b 94 97 00
	08 00 00	 mov	 r10d, DWORD PTR [r15+rdx*4+2048]
  00128	c1 e8 10	 shr	 eax, 16
  0012b	0f b6 c8	 movzx	 ecx, al
  0012e	8b c6		 mov	 eax, esi
  00130	45 33 94 8f 00
	04 00 00	 xor	 r10d, DWORD PTR [r15+rcx*4+1024]
  00138	c1 e8 08	 shr	 eax, 8
  0013b	0f b6 c8	 movzx	 ecx, al
  0013e	40 0f b6 c6	 movzx	 eax, sil
  00142	45 33 14 8f	 xor	 r10d, DWORD PTR [r15+rcx*4]
  00146	45 33 94 87 00
	0c 00 00	 xor	 r10d, DWORD PTR [r15+rax*4+3072]
  0014e	45 33 d1	 xor	 r10d, r9d
  00151	41 83 f2 02	 xor	 r10d, 2
  00155	45 89 56 40	 mov	 DWORD PTR [r14+64], r10d
  00159	41 33 ea	 xor	 ebp, r10d
  0015c	41 89 6e 44	 mov	 DWORD PTR [r14+68], ebp
  00160	44 33 ed	 xor	 r13d, ebp
  00163	45 89 6e 48	 mov	 DWORD PTR [r14+72], r13d
  00167	45 33 e5	 xor	 r12d, r13d
  0016a	45 89 66 4c	 mov	 DWORD PTR [r14+76], r12d
  0016e	41 8b c4	 mov	 eax, r12d
  00171	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  00176	c1 e8 18	 shr	 eax, 24
  00179	0f b6 d0	 movzx	 edx, al
  0017c	41 8b c4	 mov	 eax, r12d
  0017f	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  00187	c1 e8 10	 shr	 eax, 16
  0018a	0f b6 c8	 movzx	 ecx, al
  0018d	41 8b c4	 mov	 eax, r12d
  00190	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  00198	c1 e8 08	 shr	 eax, 8
  0019b	0f b6 c8	 movzx	 ecx, al
  0019e	41 0f b6 c4	 movzx	 eax, r12b
  001a2	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  001aa	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  001ae	45 33 d8	 xor	 r11d, r8d
  001b1	45 89 5e 50	 mov	 DWORD PTR [r14+80], r11d
  001b5	41 33 db	 xor	 ebx, r11d
  001b8	41 89 5e 54	 mov	 DWORD PTR [r14+84], ebx
  001bc	33 fb		 xor	 edi, ebx
  001be	33 f7		 xor	 esi, edi
  001c0	41 89 7e 58	 mov	 DWORD PTR [r14+88], edi
  001c4	41 89 76 5c	 mov	 DWORD PTR [r14+92], esi

; 193  :     ke8(cx->ks, 2); ke8(cx->ks, 3);

  001c8	8b c6		 mov	 eax, esi
  001ca	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  001ce	c1 e8 18	 shr	 eax, 24
  001d1	0f b6 d0	 movzx	 edx, al
  001d4	8b c6		 mov	 eax, esi
  001d6	45 8b 8c 97 00
	08 00 00	 mov	 r9d, DWORD PTR [r15+rdx*4+2048]
  001de	c1 e8 10	 shr	 eax, 16
  001e1	0f b6 c8	 movzx	 ecx, al
  001e4	8b c6		 mov	 eax, esi
  001e6	45 33 8c 8f 00
	04 00 00	 xor	 r9d, DWORD PTR [r15+rcx*4+1024]
  001ee	c1 e8 08	 shr	 eax, 8
  001f1	0f b6 c8	 movzx	 ecx, al
  001f4	40 0f b6 c6	 movzx	 eax, sil
  001f8	45 33 0c 8f	 xor	 r9d, DWORD PTR [r15+rcx*4]
  001fc	45 33 8c 87 00
	0c 00 00	 xor	 r9d, DWORD PTR [r15+rax*4+3072]
  00204	45 33 ca	 xor	 r9d, r10d
  00207	41 83 f1 04	 xor	 r9d, 4
  0020b	45 89 4e 60	 mov	 DWORD PTR [r14+96], r9d
  0020f	41 33 e9	 xor	 ebp, r9d
  00212	41 89 6e 64	 mov	 DWORD PTR [r14+100], ebp
  00216	44 33 ed	 xor	 r13d, ebp
  00219	45 33 e5	 xor	 r12d, r13d
  0021c	45 89 6e 68	 mov	 DWORD PTR [r14+104], r13d
  00220	45 89 66 6c	 mov	 DWORD PTR [r14+108], r12d
  00224	41 8b c4	 mov	 eax, r12d
  00227	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  0022c	c1 e8 18	 shr	 eax, 24
  0022f	0f b6 d0	 movzx	 edx, al
  00232	41 8b c4	 mov	 eax, r12d
  00235	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  0023d	c1 e8 10	 shr	 eax, 16
  00240	0f b6 c8	 movzx	 ecx, al
  00243	41 8b c4	 mov	 eax, r12d
  00246	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  0024e	c1 e8 08	 shr	 eax, 8
  00251	0f b6 c8	 movzx	 ecx, al
  00254	41 0f b6 c4	 movzx	 eax, r12b
  00258	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  00260	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  00264	45 33 d8	 xor	 r11d, r8d
  00267	41 33 db	 xor	 ebx, r11d
  0026a	45 89 5e 70	 mov	 DWORD PTR [r14+112], r11d
  0026e	33 fb		 xor	 edi, ebx
  00270	41 89 5e 74	 mov	 DWORD PTR [r14+116], ebx
  00274	33 f7		 xor	 esi, edi
  00276	41 89 7e 78	 mov	 DWORD PTR [r14+120], edi
  0027a	8b c6		 mov	 eax, esi
  0027c	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  00280	41 89 76 7c	 mov	 DWORD PTR [r14+124], esi
  00284	c1 e8 18	 shr	 eax, 24
  00287	0f b6 d0	 movzx	 edx, al
  0028a	8b c6		 mov	 eax, esi
  0028c	45 8b 94 97 00
	08 00 00	 mov	 r10d, DWORD PTR [r15+rdx*4+2048]
  00294	c1 e8 10	 shr	 eax, 16
  00297	0f b6 c8	 movzx	 ecx, al
  0029a	8b c6		 mov	 eax, esi
  0029c	45 33 94 8f 00
	04 00 00	 xor	 r10d, DWORD PTR [r15+rcx*4+1024]
  002a4	c1 e8 08	 shr	 eax, 8
  002a7	0f b6 c8	 movzx	 ecx, al
  002aa	40 0f b6 c6	 movzx	 eax, sil
  002ae	45 33 14 8f	 xor	 r10d, DWORD PTR [r15+rcx*4]
  002b2	45 33 94 87 00
	0c 00 00	 xor	 r10d, DWORD PTR [r15+rax*4+3072]
  002ba	45 33 d1	 xor	 r10d, r9d
  002bd	41 83 f2 08	 xor	 r10d, 8
  002c1	45 89 96 80 00
	00 00		 mov	 DWORD PTR [r14+128], r10d
  002c8	41 33 ea	 xor	 ebp, r10d
  002cb	41 89 ae 84 00
	00 00		 mov	 DWORD PTR [r14+132], ebp
  002d2	44 33 ed	 xor	 r13d, ebp
  002d5	45 89 ae 88 00
	00 00		 mov	 DWORD PTR [r14+136], r13d
  002dc	45 33 e5	 xor	 r12d, r13d
  002df	45 89 a6 8c 00
	00 00		 mov	 DWORD PTR [r14+140], r12d
  002e6	41 8b c4	 mov	 eax, r12d
  002e9	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  002ee	c1 e8 18	 shr	 eax, 24
  002f1	0f b6 d0	 movzx	 edx, al
  002f4	41 8b c4	 mov	 eax, r12d
  002f7	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  002ff	c1 e8 10	 shr	 eax, 16
  00302	0f b6 c8	 movzx	 ecx, al
  00305	41 8b c4	 mov	 eax, r12d
  00308	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  00310	c1 e8 08	 shr	 eax, 8
  00313	0f b6 c8	 movzx	 ecx, al
  00316	41 0f b6 c4	 movzx	 eax, r12b
  0031a	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  00322	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  00326	45 33 d8	 xor	 r11d, r8d
  00329	45 89 9e 90 00
	00 00		 mov	 DWORD PTR [r14+144], r11d
  00330	41 33 db	 xor	 ebx, r11d
  00333	41 89 9e 94 00
	00 00		 mov	 DWORD PTR [r14+148], ebx
  0033a	33 fb		 xor	 edi, ebx
  0033c	33 f7		 xor	 esi, edi
  0033e	41 89 be 98 00
	00 00		 mov	 DWORD PTR [r14+152], edi
  00345	41 89 b6 9c 00
	00 00		 mov	 DWORD PTR [r14+156], esi

; 194  :     ke8(cx->ks, 4); ke8(cx->ks, 5);

  0034c	8b c6		 mov	 eax, esi
  0034e	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  00352	c1 e8 18	 shr	 eax, 24
  00355	0f b6 d0	 movzx	 edx, al
  00358	8b c6		 mov	 eax, esi
  0035a	45 8b 8c 97 00
	08 00 00	 mov	 r9d, DWORD PTR [r15+rdx*4+2048]
  00362	c1 e8 10	 shr	 eax, 16
  00365	0f b6 c8	 movzx	 ecx, al
  00368	8b c6		 mov	 eax, esi
  0036a	45 33 8c 8f 00
	04 00 00	 xor	 r9d, DWORD PTR [r15+rcx*4+1024]
  00372	c1 e8 08	 shr	 eax, 8
  00375	0f b6 c8	 movzx	 ecx, al
  00378	40 0f b6 c6	 movzx	 eax, sil
  0037c	45 33 0c 8f	 xor	 r9d, DWORD PTR [r15+rcx*4]
  00380	45 33 8c 87 00
	0c 00 00	 xor	 r9d, DWORD PTR [r15+rax*4+3072]
  00388	45 33 ca	 xor	 r9d, r10d
  0038b	41 83 f1 10	 xor	 r9d, 16
  0038f	41 33 e9	 xor	 ebp, r9d
  00392	45 89 8e a0 00
	00 00		 mov	 DWORD PTR [r14+160], r9d
  00399	44 33 ed	 xor	 r13d, ebp
  0039c	41 89 ae a4 00
	00 00		 mov	 DWORD PTR [r14+164], ebp
  003a3	45 33 e5	 xor	 r12d, r13d
  003a6	45 89 ae a8 00
	00 00		 mov	 DWORD PTR [r14+168], r13d
  003ad	45 89 a6 ac 00
	00 00		 mov	 DWORD PTR [r14+172], r12d
  003b4	41 8b c4	 mov	 eax, r12d
  003b7	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  003bc	c1 e8 18	 shr	 eax, 24
  003bf	0f b6 d0	 movzx	 edx, al
  003c2	41 8b c4	 mov	 eax, r12d
  003c5	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  003cd	c1 e8 10	 shr	 eax, 16
  003d0	0f b6 c8	 movzx	 ecx, al
  003d3	41 8b c4	 mov	 eax, r12d
  003d6	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  003de	c1 e8 08	 shr	 eax, 8
  003e1	0f b6 c8	 movzx	 ecx, al
  003e4	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  003ec	41 0f b6 c4	 movzx	 eax, r12b
  003f0	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  003f4	45 33 d8	 xor	 r11d, r8d
  003f7	45 89 9e b0 00
	00 00		 mov	 DWORD PTR [r14+176], r11d
  003fe	41 33 db	 xor	 ebx, r11d
  00401	41 89 9e b4 00
	00 00		 mov	 DWORD PTR [r14+180], ebx
  00408	33 fb		 xor	 edi, ebx
  0040a	41 89 be b8 00
	00 00		 mov	 DWORD PTR [r14+184], edi
  00411	33 f7		 xor	 esi, edi
  00413	41 89 b6 bc 00
	00 00		 mov	 DWORD PTR [r14+188], esi
  0041a	8b c6		 mov	 eax, esi
  0041c	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  00420	c1 e8 18	 shr	 eax, 24
  00423	0f b6 d0	 movzx	 edx, al
  00426	8b c6		 mov	 eax, esi
  00428	45 8b 94 97 00
	08 00 00	 mov	 r10d, DWORD PTR [r15+rdx*4+2048]
  00430	c1 e8 10	 shr	 eax, 16
  00433	0f b6 c8	 movzx	 ecx, al
  00436	8b c6		 mov	 eax, esi
  00438	45 33 94 8f 00
	04 00 00	 xor	 r10d, DWORD PTR [r15+rcx*4+1024]
  00440	c1 e8 08	 shr	 eax, 8
  00443	0f b6 c8	 movzx	 ecx, al
  00446	40 0f b6 c6	 movzx	 eax, sil
  0044a	45 33 14 8f	 xor	 r10d, DWORD PTR [r15+rcx*4]
  0044e	45 33 94 87 00
	0c 00 00	 xor	 r10d, DWORD PTR [r15+rax*4+3072]
  00456	45 33 d1	 xor	 r10d, r9d
  00459	41 83 f2 20	 xor	 r10d, 32		; 00000020H
  0045d	45 89 96 c0 00
	00 00		 mov	 DWORD PTR [r14+192], r10d
  00464	41 33 ea	 xor	 ebp, r10d
  00467	41 89 ae c4 00
	00 00		 mov	 DWORD PTR [r14+196], ebp
  0046e	44 33 ed	 xor	 r13d, ebp
  00471	45 33 e5	 xor	 r12d, r13d
  00474	45 89 ae c8 00
	00 00		 mov	 DWORD PTR [r14+200], r13d
  0047b	45 89 a6 cc 00
	00 00		 mov	 DWORD PTR [r14+204], r12d
  00482	41 8b c4	 mov	 eax, r12d
  00485	44 89 64 24 0c	 mov	 DWORD PTR ss$[rsp+12], r12d
  0048a	c1 e8 18	 shr	 eax, 24
  0048d	0f b6 d0	 movzx	 edx, al
  00490	41 8b c4	 mov	 eax, r12d
  00493	45 8b 84 97 00
	0c 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+3072]
  0049b	c1 e8 10	 shr	 eax, 16
  0049e	0f b6 c8	 movzx	 ecx, al
  004a1	41 8b c4	 mov	 eax, r12d
  004a4	45 33 84 8f 00
	08 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+2048]
  004ac	c1 e8 08	 shr	 eax, 8
  004af	0f b6 c8	 movzx	 ecx, al
  004b2	41 0f b6 c4	 movzx	 eax, r12b
  004b6	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  004be	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  004c2	45 33 d8	 xor	 r11d, r8d
  004c5	45 89 9e d0 00
	00 00		 mov	 DWORD PTR [r14+208], r11d
  004cc	41 33 db	 xor	 ebx, r11d
  004cf	41 89 9e d4 00
	00 00		 mov	 DWORD PTR [r14+212], ebx
  004d6	33 fb		 xor	 edi, ebx
  004d8	33 f7		 xor	 esi, edi
  004da	41 89 be d8 00
	00 00		 mov	 DWORD PTR [r14+216], edi
  004e1	41 89 b6 dc 00
	00 00		 mov	 DWORD PTR [r14+220], esi

; 195  : #endif
; 196  :     kef8(cx->ks, 6);

  004e8	8b c6		 mov	 eax, esi
  004ea	89 74 24 1c	 mov	 DWORD PTR ss$[rsp+28], esi
  004ee	c1 e8 18	 shr	 eax, 24
  004f1	0f b6 d0	 movzx	 edx, al
  004f4	8b c6		 mov	 eax, esi
  004f6	c1 ee 08	 shr	 esi, 8
  004f9	45 8b 84 97 00
	08 00 00	 mov	 r8d, DWORD PTR [r15+rdx*4+2048]
  00501	c1 e8 10	 shr	 eax, 16
  00504	0f b6 c8	 movzx	 ecx, al
  00507	40 0f b6 c6	 movzx	 eax, sil
  0050b	45 33 84 8f 00
	04 00 00	 xor	 r8d, DWORD PTR [r15+rcx*4+1024]
  00513	45 33 04 87	 xor	 r8d, DWORD PTR [r15+rax*4]
  00517	0f b6 44 24 1c	 movzx	 eax, BYTE PTR ss$[rsp+28]
  0051c	45 33 84 87 00
	0c 00 00	 xor	 r8d, DWORD PTR [r15+rax*4+3072]
  00524	45 33 c2	 xor	 r8d, r10d
  00527	41 83 f0 40	 xor	 r8d, 64			; 00000040H
  0052b	41 33 e8	 xor	 ebp, r8d
  0052e	45 89 86 e0 00
	00 00		 mov	 DWORD PTR [r14+224], r8d
  00535	44 33 ed	 xor	 r13d, ebp
  00538	41 89 ae e4 00
	00 00		 mov	 DWORD PTR [r14+228], ebp
  0053f	45 33 e5	 xor	 r12d, r13d

; 197  :     cx->inf.l = 0;

  00542	41 83 a6 f0 00
	00 00 00	 and	 DWORD PTR [r14+240], 0
  0054a	45 89 ae e8 00
	00 00		 mov	 DWORD PTR [r14+232], r13d
  00551	45 89 a6 ec 00
	00 00		 mov	 DWORD PTR [r14+236], r12d

; 198  :     cx->inf.b[0] = 14 * 16;
; 199  : 
; 200  : #ifdef USE_VIA_ACE_IF_PRESENT
; 201  :     if(VIA_ACE_AVAILABLE)
; 202  :         cx->inf.b[1] = 0xff;
; 203  : #endif
; 204  : 
; 205  : #if defined( AES_ERR_CHK )
; 206  :     return EXIT_SUCCESS;
; 207  : #endif
; 208  : }

  00558	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0055d	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00562	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00567	41 c6 86 f0 00
	00 00 e0	 mov	 BYTE PTR [r14+240], 224	; 000000e0H
  0056f	33 c0		 xor	 eax, eax
  00571	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00575	41 5f		 pop	 r15
  00577	41 5e		 pop	 r14
  00579	41 5d		 pop	 r13
  0057b	41 5c		 pop	 r12
  0057d	5f		 pop	 rdi
  0057e	c3		 ret	 0
aes_encrypt_key256 ENDP
END
