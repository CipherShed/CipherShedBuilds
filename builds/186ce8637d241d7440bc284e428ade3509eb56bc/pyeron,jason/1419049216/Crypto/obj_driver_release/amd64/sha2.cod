; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	k256
PUBLIC	i224
PUBLIC	i256
PUBLIC	k512
PUBLIC	i384
PUBLIC	i512
	ORG $+8
k256	DD	0428a2f98H
	DD	071374491H
	DD	0b5c0fbcfH
	DD	0e9b5dba5H
	DD	03956c25bH
	DD	059f111f1H
	DD	0923f82a4H
	DD	0ab1c5ed5H
	DD	0d807aa98H
	DD	012835b01H
	DD	0243185beH
	DD	0550c7dc3H
	DD	072be5d74H
	DD	080deb1feH
	DD	09bdc06a7H
	DD	0c19bf174H
	DD	0e49b69c1H
	DD	0efbe4786H
	DD	0fc19dc6H
	DD	0240ca1ccH
	DD	02de92c6fH
	DD	04a7484aaH
	DD	05cb0a9dcH
	DD	076f988daH
	DD	0983e5152H
	DD	0a831c66dH
	DD	0b00327c8H
	DD	0bf597fc7H
	DD	0c6e00bf3H
	DD	0d5a79147H
	DD	06ca6351H
	DD	014292967H
	DD	027b70a85H
	DD	02e1b2138H
	DD	04d2c6dfcH
	DD	053380d13H
	DD	0650a7354H
	DD	0766a0abbH
	DD	081c2c92eH
	DD	092722c85H
	DD	0a2bfe8a1H
	DD	0a81a664bH
	DD	0c24b8b70H
	DD	0c76c51a3H
	DD	0d192e819H
	DD	0d6990624H
	DD	0f40e3585H
	DD	0106aa070H
	DD	019a4c116H
	DD	01e376c08H
	DD	02748774cH
	DD	034b0bcb5H
	DD	0391c0cb3H
	DD	04ed8aa4aH
	DD	05b9cca4fH
	DD	0682e6ff3H
	DD	0748f82eeH
	DD	078a5636fH
	DD	084c87814H
	DD	08cc70208H
	DD	090befffaH
	DD	0a4506cebH
	DD	0bef9a3f7H
	DD	0c67178f2H
i224	DD	0c1059ed8H
	DD	0367cd507H
	DD	03070dd17H
	DD	0f70e5939H
	DD	0ffc00b31H
	DD	068581511H
	DD	064f98fa7H
	DD	0befa4fa4H
i256	DD	06a09e667H
	DD	0bb67ae85H
	DD	03c6ef372H
	DD	0a54ff53aH
	DD	0510e527fH
	DD	09b05688cH
	DD	01f83d9abH
	DD	05be0cd19H
k512	DQ	428a2f98d728ae22H
	DQ	7137449123ef65cdH
	DQ	b5c0fbcfec4d3b2fH
	DQ	e9b5dba58189dbbcH
	DQ	3956c25bf348b538H
	DQ	59f111f1b605d019H
	DQ	923f82a4af194f9bH
	DQ	ab1c5ed5da6d8118H
	DQ	d807aa98a3030242H
	DQ	12835b0145706fbeH
	DQ	243185be4ee4b28cH
	DQ	550c7dc3d5ffb4e2H
	DQ	72be5d74f27b896fH
	DQ	80deb1fe3b1696b1H
	DQ	9bdc06a725c71235H
	DQ	c19bf174cf692694H
	DQ	e49b69c19ef14ad2H
	DQ	efbe4786384f25e3H
	DQ	0fc19dc68b8cd5b5H
	DQ	240ca1cc77ac9c65H
	DQ	2de92c6f592b0275H
	DQ	4a7484aa6ea6e483H
	DQ	5cb0a9dcbd41fbd4H
	DQ	76f988da831153b5H
	DQ	983e5152ee66dfabH
	DQ	a831c66d2db43210H
	DQ	b00327c898fb213fH
	DQ	bf597fc7beef0ee4H
	DQ	c6e00bf33da88fc2H
	DQ	d5a79147930aa725H
	DQ	06ca6351e003826fH
	DQ	142929670a0e6e70H
	DQ	27b70a8546d22ffcH
	DQ	2e1b21385c26c926H
	DQ	4d2c6dfc5ac42aedH
	DQ	53380d139d95b3dfH
	DQ	650a73548baf63deH
	DQ	766a0abb3c77b2a8H
	DQ	81c2c92e47edaee6H
	DQ	92722c851482353bH
	DQ	a2bfe8a14cf10364H
	DQ	a81a664bbc423001H
	DQ	c24b8b70d0f89791H
	DQ	c76c51a30654be30H
	DQ	d192e819d6ef5218H
	DQ	d69906245565a910H
	DQ	f40e35855771202aH
	DQ	106aa07032bbd1b8H
	DQ	19a4c116b8d2d0c8H
	DQ	1e376c085141ab53H
	DQ	2748774cdf8eeb99H
	DQ	34b0bcb5e19b48a8H
	DQ	391c0cb3c5c95a63H
	DQ	4ed8aa4ae3418acbH
	DQ	5b9cca4f7763e373H
	DQ	682e6ff3d6b2b8a3H
	DQ	748f82ee5defb2fcH
	DQ	78a5636f43172f60H
	DQ	84c87814a1f0ab72H
	DQ	8cc702081a6439ecH
	DQ	90befffa23631e28H
	DQ	a4506cebde82bde9H
	DQ	bef9a3f7b2c67915H
	DQ	c67178f2e372532bH
	DQ	ca273eceea26619cH
	DQ	d186b8c721c0c207H
	DQ	eada7dd6cde0eb1eH
	DQ	f57d4f7fee6ed178H
	DQ	06f067aa72176fbaH
	DQ	0a637dc5a2c898a6H
	DQ	113f9804bef90daeH
	DQ	1b710b35131c471bH
	DQ	28db77f523047d84H
	DQ	32caab7b40c72493H
	DQ	3c9ebe0a15c9bebcH
	DQ	431d67c49c100d4cH
	DQ	4cc5d4becb3e42b6H
	DQ	597f299cfc657e2aH
	DQ	5fcb6fab3ad6faecH
	DQ	6c44198c4a475817H
i384	DQ	cbbb9d5dc1059ed8H
	DQ	629a292a367cd507H
	DQ	9159015a3070dd17H
	DQ	152fecd8f70e5939H
	DQ	67332667ffc00b31H
	DQ	8eb44a8768581511H
	DQ	db0c2e0d64f98fa7H
	DQ	47b5481dbefa4fa4H
	ORG $+576
i512	DQ	6a09e667f3bcc908H
	DQ	bb67ae8584caa73bH
	DQ	3c6ef372fe94f82bH
	DQ	a54ff53a5f1d36f1H
	DQ	510e527fade682d1H
	DQ	9b05688c2b3e6c1fH
	DQ	1f83d9abfb41bd6bH
	DQ	5be0cd19137e2179H
	ORG $+576
PUBLIC	sha512_begin
EXTRN	memcpy:PROC
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed\src\crypto\sha2.c
;	COMDAT sha512_begin
_TEXT	SEGMENT
ctx$ = 8
sha512_begin PROC					; COMDAT

; 656  :     ctx->count[0] = ctx->count[1] = 0;

  00000	48 83 61 08 00	 and	 QWORD PTR [rcx+8], 0
  00005	48 83 21 00	 and	 QWORD PTR [rcx], 0

; 657  :     memcpy(ctx->hash, i512, 8 * sizeof(uint_64t));

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:i512
  00010	48 83 c1 10	 add	 rcx, 16
  00014	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H

; 658  : }

  0001a	e9 00 00 00 00	 jmp	 memcpy
sha512_begin ENDP
_TEXT	ENDS
PUBLIC	sha512_compile
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha512_compile DD imagerel $LN40
	DD	imagerel $LN40+3225
	DD	imagerel $unwind$sha512_compile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha512_compile DD 0c1c01H
	DD	014641cH
	DD	013541cH
	DD	012341cH
	DD	0f018b21cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha512_compile
_TEXT	SEGMENT
v$ = 32
ctx$ = 144
sha512_compile PROC					; COMDAT

; 512  : {   uint_64t    v[8], *p = ctx->wbuf;

$LN40:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0001c	48 8b d9	 mov	 rbx, rcx

; 513  :     uint_32t    j;
; 514  : 
; 515  :     memcpy(v, ctx->hash, 8 * sizeof(uint_64t));

  0001f	48 8d 48 98	 lea	 rcx, QWORD PTR [rax-104]
  00023	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00029	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  0002d	e8 00 00 00 00	 call	 memcpy
  00032	4c 8b 4c 24 58	 mov	 r9, QWORD PTR v$[rsp+56]
  00037	4c 8b 54 24 50	 mov	 r10, QWORD PTR v$[rsp+48]
  0003c	4c 8b 5c 24 48	 mov	 r11, QWORD PTR v$[rsp+40]
  00041	48 8b 7c 24 40	 mov	 rdi, QWORD PTR v$[rsp+32]
  00046	48 8b 74 24 38	 mov	 rsi, QWORD PTR v$[rsp+24]
  0004b	48 8b 6c 24 30	 mov	 rbp, QWORD PTR v$[rsp+16]
  00050	4c 8b 64 24 28	 mov	 r12, QWORD PTR v$[rsp+8]
  00055	4c 8b 6c 24 20	 mov	 r13, QWORD PTR v$[rsp]

; 516  : 
; 517  :     for(j = 0; j < 80; j += 16)

  0005a	45 33 f6	 xor	 r14d, r14d
  0005d	4c 8d 3d 10 00
	00 00		 lea	 r15, OFFSET FLAT:k512+16
$LL3@sha512_com:

; 518  :     {
; 519  :         v_cycle( 0, j); v_cycle( 1, j);

  00064	45 85 f6	 test	 r14d, r14d
  00067	74 48		 je	 SHORT $LN6@sha512_com
  00069	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0006d	48 8b 93 c0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+192]
  00074	4c 8b c1	 mov	 r8, rcx
  00077	48 8b c1	 mov	 rax, rcx
  0007a	48 c1 e9 07	 shr	 rcx, 7
  0007e	49 c1 c8 08	 ror	 r8, 8
  00082	48 d1 c8	 ror	 rax, 1
  00085	4c 33 c0	 xor	 r8, rax
  00088	48 8b c2	 mov	 rax, rdx
  0008b	4c 33 c1	 xor	 r8, rcx
  0008e	48 8b ca	 mov	 rcx, rdx
  00091	48 c1 ea 06	 shr	 rdx, 6
  00095	48 c1 c9 13	 ror	 rcx, 19
  00099	48 c1 c0 03	 rol	 rax, 3
  0009d	48 33 c8	 xor	 rcx, rax
  000a0	48 33 ca	 xor	 rcx, rdx
  000a3	4c 03 c1	 add	 r8, rcx
  000a6	4c 03 83 98 00
	00 00		 add	 r8, QWORD PTR [rbx+152]
  000ad	4c 01 43 50	 add	 QWORD PTR [rbx+80], r8
$LN6@sha512_com:
  000b1	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  000b5	48 8b cf	 mov	 rcx, rdi
  000b8	48 8b c7	 mov	 rax, rdi
  000bb	48 c1 c1 17	 rol	 rcx, 23
  000bf	48 c1 c8 12	 ror	 rax, 18
  000c3	48 33 c8	 xor	 rcx, rax
  000c6	48 8b c7	 mov	 rax, rdi
  000c9	48 c1 c8 0e	 ror	 rax, 14
  000cd	48 33 c8	 xor	 rcx, rax
  000d0	49 8b c3	 mov	 rax, r11
  000d3	49 33 c2	 xor	 rax, r10
  000d6	48 23 c7	 and	 rax, rdi
  000d9	49 33 c2	 xor	 rax, r10
  000dc	48 03 c8	 add	 rcx, rax
  000df	49 8b c5	 mov	 rax, r13
  000e2	49 03 4f f0	 add	 rcx, QWORD PTR [r15-16]
  000e6	48 03 ca	 add	 rcx, rdx
  000e9	49 8b d5	 mov	 rdx, r13
  000ec	4c 03 c9	 add	 r9, rcx
  000ef	49 8b cc	 mov	 rcx, r12
  000f2	49 03 f1	 add	 rsi, r9
  000f5	48 c1 c2 1e	 rol	 rdx, 30
  000f9	48 c1 c8 1c	 ror	 rax, 28
  000fd	48 33 d0	 xor	 rdx, rax
  00100	49 33 cd	 xor	 rcx, r13
  00103	49 8b c5	 mov	 rax, r13
  00106	48 c1 c0 19	 rol	 rax, 25
  0010a	48 23 cd	 and	 rcx, rbp
  0010d	48 33 d0	 xor	 rdx, rax
  00110	49 8b c4	 mov	 rax, r12
  00113	49 23 c5	 and	 rax, r13
  00116	48 0b c8	 or	 rcx, rax
  00119	4c 03 c9	 add	 r9, rcx
  0011c	4c 03 ca	 add	 r9, rdx
  0011f	45 85 f6	 test	 r14d, r14d
  00122	74 48		 je	 SHORT $LN8@sha512_com
  00124	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00128	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  0012f	4c 8b c1	 mov	 r8, rcx
  00132	48 8b c1	 mov	 rax, rcx
  00135	48 c1 e9 07	 shr	 rcx, 7
  00139	49 c1 c8 08	 ror	 r8, 8
  0013d	48 d1 c8	 ror	 rax, 1
  00140	4c 33 c0	 xor	 r8, rax
  00143	48 8b c2	 mov	 rax, rdx
  00146	4c 33 c1	 xor	 r8, rcx
  00149	48 8b ca	 mov	 rcx, rdx
  0014c	48 c1 ea 06	 shr	 rdx, 6
  00150	48 c1 c9 13	 ror	 rcx, 19
  00154	48 c1 c0 03	 rol	 rax, 3
  00158	48 33 c8	 xor	 rcx, rax
  0015b	48 33 ca	 xor	 rcx, rdx
  0015e	4c 03 c1	 add	 r8, rcx
  00161	4c 03 83 a0 00
	00 00		 add	 r8, QWORD PTR [rbx+160]
  00168	4c 01 43 58	 add	 QWORD PTR [rbx+88], r8
$LN8@sha512_com:
  0016c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00170	48 8b ce	 mov	 rcx, rsi
  00173	48 8b c6	 mov	 rax, rsi
  00176	48 c1 c1 17	 rol	 rcx, 23
  0017a	48 c1 c8 12	 ror	 rax, 18
  0017e	48 33 c8	 xor	 rcx, rax
  00181	48 8b c6	 mov	 rax, rsi
  00184	48 c1 c8 0e	 ror	 rax, 14
  00188	48 33 c8	 xor	 rcx, rax
  0018b	49 8b c3	 mov	 rax, r11
  0018e	48 33 c7	 xor	 rax, rdi
  00191	48 23 c6	 and	 rax, rsi
  00194	49 33 c3	 xor	 rax, r11
  00197	48 03 c8	 add	 rcx, rax
  0019a	49 8b c1	 mov	 rax, r9
  0019d	49 03 4f f8	 add	 rcx, QWORD PTR [r15-8]
  001a1	48 03 ca	 add	 rcx, rdx
  001a4	49 8b d1	 mov	 rdx, r9
  001a7	4c 03 d1	 add	 r10, rcx
  001aa	49 8b cd	 mov	 rcx, r13
  001ad	49 03 ea	 add	 rbp, r10
  001b0	48 c1 c2 1e	 rol	 rdx, 30
  001b4	48 c1 c8 1c	 ror	 rax, 28
  001b8	48 33 d0	 xor	 rdx, rax
  001bb	49 33 c9	 xor	 rcx, r9
  001be	49 8b c1	 mov	 rax, r9
  001c1	48 c1 c0 19	 rol	 rax, 25
  001c5	49 23 cc	 and	 rcx, r12
  001c8	48 33 d0	 xor	 rdx, rax
  001cb	49 8b c5	 mov	 rax, r13
  001ce	49 23 c1	 and	 rax, r9
  001d1	48 0b c8	 or	 rcx, rax
  001d4	4c 03 d1	 add	 r10, rcx
  001d7	4c 03 d2	 add	 r10, rdx

; 520  :         v_cycle( 2, j); v_cycle( 3, j);

  001da	45 85 f6	 test	 r14d, r14d
  001dd	74 45		 je	 SHORT $LN10@sha512_com
  001df	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  001e3	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  001e7	4c 8b c1	 mov	 r8, rcx
  001ea	48 8b c1	 mov	 rax, rcx
  001ed	48 c1 e9 06	 shr	 rcx, 6
  001f1	49 c1 c8 13	 ror	 r8, 19
  001f5	48 c1 c0 03	 rol	 rax, 3
  001f9	4c 33 c0	 xor	 r8, rax
  001fc	48 8b c2	 mov	 rax, rdx
  001ff	4c 33 c1	 xor	 r8, rcx
  00202	48 8b ca	 mov	 rcx, rdx
  00205	48 c1 ea 07	 shr	 rdx, 7
  00209	48 c1 c9 08	 ror	 rcx, 8
  0020d	48 d1 c8	 ror	 rax, 1
  00210	48 33 c8	 xor	 rcx, rax
  00213	48 33 ca	 xor	 rcx, rdx
  00216	4c 03 c1	 add	 r8, rcx
  00219	4c 03 83 a8 00
	00 00		 add	 r8, QWORD PTR [rbx+168]
  00220	4c 01 43 60	 add	 QWORD PTR [rbx+96], r8
$LN10@sha512_com:
  00224	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00228	48 8b cd	 mov	 rcx, rbp
  0022b	48 8b c5	 mov	 rax, rbp
  0022e	48 c1 c1 17	 rol	 rcx, 23
  00232	48 c1 c8 12	 ror	 rax, 18
  00236	48 33 c8	 xor	 rcx, rax
  00239	48 8b c5	 mov	 rax, rbp
  0023c	48 c1 c8 0e	 ror	 rax, 14
  00240	48 33 c8	 xor	 rcx, rax
  00243	48 8b c6	 mov	 rax, rsi
  00246	48 33 c7	 xor	 rax, rdi
  00249	48 23 c5	 and	 rax, rbp
  0024c	48 33 c7	 xor	 rax, rdi
  0024f	48 03 c8	 add	 rcx, rax
  00252	49 8b c2	 mov	 rax, r10
  00255	49 03 0f	 add	 rcx, QWORD PTR [r15]
  00258	48 03 ca	 add	 rcx, rdx
  0025b	49 8b d2	 mov	 rdx, r10
  0025e	4c 03 d9	 add	 r11, rcx
  00261	49 8b c9	 mov	 rcx, r9
  00264	4d 03 e3	 add	 r12, r11
  00267	48 c1 c2 1e	 rol	 rdx, 30
  0026b	48 c1 c8 1c	 ror	 rax, 28
  0026f	48 33 d0	 xor	 rdx, rax
  00272	49 33 ca	 xor	 rcx, r10
  00275	49 8b c2	 mov	 rax, r10
  00278	48 c1 c0 19	 rol	 rax, 25
  0027c	49 23 cd	 and	 rcx, r13
  0027f	48 33 d0	 xor	 rdx, rax
  00282	49 8b c1	 mov	 rax, r9
  00285	49 23 c2	 and	 rax, r10
  00288	48 0b c8	 or	 rcx, rax
  0028b	4c 03 d9	 add	 r11, rcx
  0028e	4c 03 da	 add	 r11, rdx
  00291	45 85 f6	 test	 r14d, r14d
  00294	74 45		 je	 SHORT $LN12@sha512_com
  00296	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0029a	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  0029e	4c 8b c1	 mov	 r8, rcx
  002a1	48 8b c1	 mov	 rax, rcx
  002a4	48 c1 e9 06	 shr	 rcx, 6
  002a8	49 c1 c8 13	 ror	 r8, 19
  002ac	48 c1 c0 03	 rol	 rax, 3
  002b0	4c 33 c0	 xor	 r8, rax
  002b3	48 8b c2	 mov	 rax, rdx
  002b6	4c 33 c1	 xor	 r8, rcx
  002b9	48 8b ca	 mov	 rcx, rdx
  002bc	48 c1 ea 07	 shr	 rdx, 7
  002c0	48 c1 c9 08	 ror	 rcx, 8
  002c4	48 d1 c8	 ror	 rax, 1
  002c7	48 33 c8	 xor	 rcx, rax
  002ca	48 33 ca	 xor	 rcx, rdx
  002cd	4c 03 c1	 add	 r8, rcx
  002d0	4c 03 83 b0 00
	00 00		 add	 r8, QWORD PTR [rbx+176]
  002d7	4c 01 43 68	 add	 QWORD PTR [rbx+104], r8
$LN12@sha512_com:
  002db	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  002df	49 8b cc	 mov	 rcx, r12
  002e2	49 8b c4	 mov	 rax, r12
  002e5	48 c1 c1 17	 rol	 rcx, 23
  002e9	48 c1 c8 12	 ror	 rax, 18
  002ed	48 33 c8	 xor	 rcx, rax
  002f0	49 8b c4	 mov	 rax, r12
  002f3	48 c1 c8 0e	 ror	 rax, 14
  002f7	48 33 c8	 xor	 rcx, rax
  002fa	48 8b c5	 mov	 rax, rbp
  002fd	48 33 c6	 xor	 rax, rsi
  00300	49 23 c4	 and	 rax, r12
  00303	48 33 c6	 xor	 rax, rsi
  00306	48 03 c8	 add	 rcx, rax
  00309	49 8b c3	 mov	 rax, r11
  0030c	49 03 4f 08	 add	 rcx, QWORD PTR [r15+8]
  00310	48 03 ca	 add	 rcx, rdx
  00313	49 8b d3	 mov	 rdx, r11
  00316	48 03 f9	 add	 rdi, rcx
  00319	49 8b cb	 mov	 rcx, r11
  0031c	4c 03 ef	 add	 r13, rdi
  0031f	48 c1 c2 1e	 rol	 rdx, 30
  00323	48 c1 c8 1c	 ror	 rax, 28
  00327	48 33 d0	 xor	 rdx, rax
  0032a	49 33 ca	 xor	 rcx, r10
  0032d	49 8b c3	 mov	 rax, r11
  00330	48 c1 c0 19	 rol	 rax, 25
  00334	49 23 c9	 and	 rcx, r9
  00337	48 33 d0	 xor	 rdx, rax
  0033a	49 8b c3	 mov	 rax, r11
  0033d	49 23 c2	 and	 rax, r10
  00340	48 0b c8	 or	 rcx, rax
  00343	48 03 f9	 add	 rdi, rcx
  00346	48 03 fa	 add	 rdi, rdx

; 521  :         v_cycle( 4, j); v_cycle( 5, j);

  00349	45 85 f6	 test	 r14d, r14d
  0034c	74 45		 je	 SHORT $LN14@sha512_com
  0034e	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00352	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  00356	4c 8b c1	 mov	 r8, rcx
  00359	48 8b c1	 mov	 rax, rcx
  0035c	48 c1 e9 06	 shr	 rcx, 6
  00360	49 c1 c8 13	 ror	 r8, 19
  00364	48 c1 c0 03	 rol	 rax, 3
  00368	4c 33 c0	 xor	 r8, rax
  0036b	48 8b c2	 mov	 rax, rdx
  0036e	4c 33 c1	 xor	 r8, rcx
  00371	48 8b ca	 mov	 rcx, rdx
  00374	48 c1 ea 07	 shr	 rdx, 7
  00378	48 c1 c9 08	 ror	 rcx, 8
  0037c	48 d1 c8	 ror	 rax, 1
  0037f	48 33 c8	 xor	 rcx, rax
  00382	48 33 ca	 xor	 rcx, rdx
  00385	4c 03 c1	 add	 r8, rcx
  00388	4c 03 83 b8 00
	00 00		 add	 r8, QWORD PTR [rbx+184]
  0038f	4c 01 43 70	 add	 QWORD PTR [rbx+112], r8
$LN14@sha512_com:
  00393	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  00397	49 8b cd	 mov	 rcx, r13
  0039a	49 8b c5	 mov	 rax, r13
  0039d	48 c1 c1 17	 rol	 rcx, 23
  003a1	48 c1 c8 12	 ror	 rax, 18
  003a5	48 33 c8	 xor	 rcx, rax
  003a8	49 8b c5	 mov	 rax, r13
  003ab	48 c1 c8 0e	 ror	 rax, 14
  003af	48 33 c8	 xor	 rcx, rax
  003b2	48 8b c5	 mov	 rax, rbp
  003b5	49 33 c4	 xor	 rax, r12
  003b8	49 23 c5	 and	 rax, r13
  003bb	48 33 c5	 xor	 rax, rbp
  003be	48 03 c8	 add	 rcx, rax
  003c1	48 8b c7	 mov	 rax, rdi
  003c4	49 03 4f 10	 add	 rcx, QWORD PTR [r15+16]
  003c8	48 03 ca	 add	 rcx, rdx
  003cb	48 8b d7	 mov	 rdx, rdi
  003ce	48 03 f1	 add	 rsi, rcx
  003d1	49 8b cb	 mov	 rcx, r11
  003d4	4c 03 ce	 add	 r9, rsi
  003d7	48 c1 c2 1e	 rol	 rdx, 30
  003db	48 c1 c8 1c	 ror	 rax, 28
  003df	48 33 d0	 xor	 rdx, rax
  003e2	48 33 cf	 xor	 rcx, rdi
  003e5	48 8b c7	 mov	 rax, rdi
  003e8	48 c1 c0 19	 rol	 rax, 25
  003ec	49 23 ca	 and	 rcx, r10
  003ef	48 33 d0	 xor	 rdx, rax
  003f2	49 8b c3	 mov	 rax, r11
  003f5	48 23 c7	 and	 rax, rdi
  003f8	48 0b c8	 or	 rcx, rax
  003fb	48 03 f1	 add	 rsi, rcx
  003fe	48 03 f2	 add	 rsi, rdx
  00401	45 85 f6	 test	 r14d, r14d
  00404	74 48		 je	 SHORT $LN16@sha512_com
  00406	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0040a	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  00411	4c 8b c1	 mov	 r8, rcx
  00414	48 8b c1	 mov	 rax, rcx
  00417	48 c1 e9 06	 shr	 rcx, 6
  0041b	49 c1 c8 13	 ror	 r8, 19
  0041f	48 c1 c0 03	 rol	 rax, 3
  00423	4c 33 c0	 xor	 r8, rax
  00426	48 8b c2	 mov	 rax, rdx
  00429	4c 33 c1	 xor	 r8, rcx
  0042c	48 8b ca	 mov	 rcx, rdx
  0042f	48 c1 ea 07	 shr	 rdx, 7
  00433	48 c1 c9 08	 ror	 rcx, 8
  00437	48 d1 c8	 ror	 rax, 1
  0043a	48 33 c8	 xor	 rcx, rax
  0043d	48 33 ca	 xor	 rcx, rdx
  00440	4c 03 c1	 add	 r8, rcx
  00443	4c 03 83 c0 00
	00 00		 add	 r8, QWORD PTR [rbx+192]
  0044a	4c 01 43 78	 add	 QWORD PTR [rbx+120], r8
$LN16@sha512_com:
  0044e	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  00452	49 8b c9	 mov	 rcx, r9
  00455	49 8b c1	 mov	 rax, r9
  00458	48 c1 c1 17	 rol	 rcx, 23
  0045c	48 c1 c8 12	 ror	 rax, 18
  00460	48 33 c8	 xor	 rcx, rax
  00463	49 8b c1	 mov	 rax, r9
  00466	48 c1 c8 0e	 ror	 rax, 14
  0046a	48 33 c8	 xor	 rcx, rax
  0046d	49 8b c4	 mov	 rax, r12
  00470	49 33 c5	 xor	 rax, r13
  00473	49 23 c1	 and	 rax, r9
  00476	49 33 c4	 xor	 rax, r12
  00479	48 03 c8	 add	 rcx, rax
  0047c	48 8b c6	 mov	 rax, rsi
  0047f	49 03 4f 18	 add	 rcx, QWORD PTR [r15+24]
  00483	48 03 ca	 add	 rcx, rdx
  00486	48 8b d6	 mov	 rdx, rsi
  00489	48 03 e9	 add	 rbp, rcx
  0048c	48 8b ce	 mov	 rcx, rsi
  0048f	4c 03 d5	 add	 r10, rbp
  00492	48 c1 c2 1e	 rol	 rdx, 30
  00496	48 c1 c8 1c	 ror	 rax, 28
  0049a	48 33 d0	 xor	 rdx, rax
  0049d	48 33 cf	 xor	 rcx, rdi
  004a0	48 8b c6	 mov	 rax, rsi
  004a3	48 c1 c0 19	 rol	 rax, 25
  004a7	49 23 cb	 and	 rcx, r11
  004aa	48 33 d0	 xor	 rdx, rax
  004ad	48 8b c6	 mov	 rax, rsi
  004b0	48 23 c7	 and	 rax, rdi
  004b3	48 0b c8	 or	 rcx, rax
  004b6	48 03 e9	 add	 rbp, rcx
  004b9	48 03 ea	 add	 rbp, rdx

; 522  :         v_cycle( 6, j); v_cycle( 7, j);

  004bc	45 85 f6	 test	 r14d, r14d
  004bf	74 4b		 je	 SHORT $LN18@sha512_com
  004c1	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  004c5	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  004cc	4c 8b c1	 mov	 r8, rcx
  004cf	48 8b c1	 mov	 rax, rcx
  004d2	48 c1 e9 06	 shr	 rcx, 6
  004d6	49 c1 c8 13	 ror	 r8, 19
  004da	48 c1 c0 03	 rol	 rax, 3
  004de	4c 33 c0	 xor	 r8, rax
  004e1	48 8b c2	 mov	 rax, rdx
  004e4	4c 33 c1	 xor	 r8, rcx
  004e7	48 8b ca	 mov	 rcx, rdx
  004ea	48 c1 ea 07	 shr	 rdx, 7
  004ee	48 c1 c9 08	 ror	 rcx, 8
  004f2	48 d1 c8	 ror	 rax, 1
  004f5	48 33 c8	 xor	 rcx, rax
  004f8	48 33 ca	 xor	 rcx, rdx
  004fb	4c 03 c1	 add	 r8, rcx
  004fe	4c 03 83 c8 00
	00 00		 add	 r8, QWORD PTR [rbx+200]
  00505	4c 01 83 80 00
	00 00		 add	 QWORD PTR [rbx+128], r8
$LN18@sha512_com:
  0050c	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  00513	49 8b ca	 mov	 rcx, r10
  00516	49 8b c2	 mov	 rax, r10
  00519	48 c1 c1 17	 rol	 rcx, 23
  0051d	48 c1 c8 12	 ror	 rax, 18
  00521	48 33 c8	 xor	 rcx, rax
  00524	49 8b c2	 mov	 rax, r10
  00527	48 c1 c8 0e	 ror	 rax, 14
  0052b	48 33 c8	 xor	 rcx, rax
  0052e	49 8b c5	 mov	 rax, r13
  00531	49 33 c1	 xor	 rax, r9
  00534	49 23 c2	 and	 rax, r10
  00537	49 33 c5	 xor	 rax, r13
  0053a	48 03 c8	 add	 rcx, rax
  0053d	48 8b c5	 mov	 rax, rbp
  00540	49 03 4f 20	 add	 rcx, QWORD PTR [r15+32]
  00544	48 03 ca	 add	 rcx, rdx
  00547	48 8b d5	 mov	 rdx, rbp
  0054a	4c 03 e1	 add	 r12, rcx
  0054d	48 8b cd	 mov	 rcx, rbp
  00550	4d 03 dc	 add	 r11, r12
  00553	48 c1 c2 1e	 rol	 rdx, 30
  00557	48 c1 c8 1c	 ror	 rax, 28
  0055b	48 33 d0	 xor	 rdx, rax
  0055e	48 33 ce	 xor	 rcx, rsi
  00561	48 8b c5	 mov	 rax, rbp
  00564	48 c1 c0 19	 rol	 rax, 25
  00568	48 23 cf	 and	 rcx, rdi
  0056b	48 33 d0	 xor	 rdx, rax
  0056e	48 8b c5	 mov	 rax, rbp
  00571	48 23 c6	 and	 rax, rsi
  00574	48 0b c8	 or	 rcx, rax
  00577	4c 03 e1	 add	 r12, rcx
  0057a	4c 03 e2	 add	 r12, rdx
  0057d	45 85 f6	 test	 r14d, r14d
  00580	74 48		 je	 SHORT $LN20@sha512_com
  00582	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  00589	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  0058d	4c 8b c1	 mov	 r8, rcx
  00590	48 8b c1	 mov	 rax, rcx
  00593	48 c1 e9 07	 shr	 rcx, 7
  00597	49 c1 c8 08	 ror	 r8, 8
  0059b	48 d1 c8	 ror	 rax, 1
  0059e	4c 33 c0	 xor	 r8, rax
  005a1	48 8b c2	 mov	 rax, rdx
  005a4	4c 33 c1	 xor	 r8, rcx
  005a7	48 8b ca	 mov	 rcx, rdx
  005aa	48 c1 ea 06	 shr	 rdx, 6
  005ae	48 c1 c9 13	 ror	 rcx, 19
  005b2	48 c1 c0 03	 rol	 rax, 3
  005b6	48 33 c8	 xor	 rcx, rax
  005b9	48 33 ca	 xor	 rcx, rdx
  005bc	4c 03 c1	 add	 r8, rcx
  005bf	4c 03 43 50	 add	 r8, QWORD PTR [rbx+80]
  005c3	4c 01 83 88 00
	00 00		 add	 QWORD PTR [rbx+136], r8
$LN20@sha512_com:
  005ca	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  005d1	49 8b cb	 mov	 rcx, r11
  005d4	49 8b c3	 mov	 rax, r11
  005d7	48 c1 c1 17	 rol	 rcx, 23
  005db	48 c1 c8 12	 ror	 rax, 18
  005df	48 33 c8	 xor	 rcx, rax
  005e2	49 8b c3	 mov	 rax, r11
  005e5	48 c1 c8 0e	 ror	 rax, 14
  005e9	48 33 c8	 xor	 rcx, rax
  005ec	49 8b c1	 mov	 rax, r9
  005ef	49 33 c2	 xor	 rax, r10
  005f2	49 23 c3	 and	 rax, r11
  005f5	49 33 c1	 xor	 rax, r9
  005f8	48 03 c8	 add	 rcx, rax
  005fb	49 8b c4	 mov	 rax, r12
  005fe	49 03 4f 28	 add	 rcx, QWORD PTR [r15+40]
  00602	48 03 ca	 add	 rcx, rdx
  00605	49 8b d4	 mov	 rdx, r12
  00608	4c 03 e9	 add	 r13, rcx
  0060b	48 8b cd	 mov	 rcx, rbp
  0060e	49 03 fd	 add	 rdi, r13
  00611	48 c1 c2 1e	 rol	 rdx, 30
  00615	48 c1 c8 1c	 ror	 rax, 28
  00619	48 33 d0	 xor	 rdx, rax
  0061c	49 33 cc	 xor	 rcx, r12
  0061f	49 8b c4	 mov	 rax, r12
  00622	48 c1 c0 19	 rol	 rax, 25
  00626	48 23 ce	 and	 rcx, rsi
  00629	48 33 d0	 xor	 rdx, rax
  0062c	48 8b c5	 mov	 rax, rbp
  0062f	49 23 c4	 and	 rax, r12
  00632	48 0b c8	 or	 rcx, rax
  00635	4c 03 e9	 add	 r13, rcx
  00638	4c 03 ea	 add	 r13, rdx

; 523  :         v_cycle( 8, j); v_cycle( 9, j);

  0063b	45 85 f6	 test	 r14d, r14d
  0063e	74 4b		 je	 SHORT $LN22@sha512_com
  00640	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  00647	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  0064e	4c 8b c1	 mov	 r8, rcx
  00651	48 8b c1	 mov	 rax, rcx
  00654	48 c1 e9 07	 shr	 rcx, 7
  00658	49 c1 c8 08	 ror	 r8, 8
  0065c	48 d1 c8	 ror	 rax, 1
  0065f	4c 33 c0	 xor	 r8, rax
  00662	48 8b c2	 mov	 rax, rdx
  00665	4c 33 c1	 xor	 r8, rcx
  00668	48 8b ca	 mov	 rcx, rdx
  0066b	48 c1 ea 06	 shr	 rdx, 6
  0066f	48 c1 c9 13	 ror	 rcx, 19
  00673	48 c1 c0 03	 rol	 rax, 3
  00677	48 33 c8	 xor	 rcx, rax
  0067a	48 33 ca	 xor	 rcx, rdx
  0067d	4c 03 c1	 add	 r8, rcx
  00680	4c 03 43 58	 add	 r8, QWORD PTR [rbx+88]
  00684	4c 01 83 90 00
	00 00		 add	 QWORD PTR [rbx+144], r8
$LN22@sha512_com:
  0068b	48 8b 93 90 00
	00 00		 mov	 rdx, QWORD PTR [rbx+144]
  00692	48 8b cf	 mov	 rcx, rdi
  00695	48 8b c7	 mov	 rax, rdi
  00698	48 c1 c1 17	 rol	 rcx, 23
  0069c	48 c1 c8 12	 ror	 rax, 18
  006a0	48 33 c8	 xor	 rcx, rax
  006a3	48 8b c7	 mov	 rax, rdi
  006a6	48 c1 c8 0e	 ror	 rax, 14
  006aa	48 33 c8	 xor	 rcx, rax
  006ad	49 8b c3	 mov	 rax, r11
  006b0	49 33 c2	 xor	 rax, r10
  006b3	48 23 c7	 and	 rax, rdi
  006b6	49 33 c2	 xor	 rax, r10
  006b9	48 03 c8	 add	 rcx, rax
  006bc	49 8b c5	 mov	 rax, r13
  006bf	49 03 4f 30	 add	 rcx, QWORD PTR [r15+48]
  006c3	48 03 ca	 add	 rcx, rdx
  006c6	49 8b d5	 mov	 rdx, r13
  006c9	4c 03 c9	 add	 r9, rcx
  006cc	49 8b cc	 mov	 rcx, r12
  006cf	49 03 f1	 add	 rsi, r9
  006d2	48 c1 c2 1e	 rol	 rdx, 30
  006d6	48 c1 c8 1c	 ror	 rax, 28
  006da	48 33 d0	 xor	 rdx, rax
  006dd	49 33 cd	 xor	 rcx, r13
  006e0	49 8b c5	 mov	 rax, r13
  006e3	48 c1 c0 19	 rol	 rax, 25
  006e7	48 23 cd	 and	 rcx, rbp
  006ea	48 33 d0	 xor	 rdx, rax
  006ed	49 8b c4	 mov	 rax, r12
  006f0	49 23 c5	 and	 rax, r13
  006f3	48 0b c8	 or	 rcx, rax
  006f6	4c 03 c9	 add	 r9, rcx
  006f9	4c 03 ca	 add	 r9, rdx
  006fc	45 85 f6	 test	 r14d, r14d
  006ff	74 4b		 je	 SHORT $LN24@sha512_com
  00701	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  00708	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
  0070f	4c 8b c1	 mov	 r8, rcx
  00712	48 8b c1	 mov	 rax, rcx
  00715	48 c1 e9 06	 shr	 rcx, 6
  00719	49 c1 c8 13	 ror	 r8, 19
  0071d	48 c1 c0 03	 rol	 rax, 3
  00721	4c 33 c0	 xor	 r8, rax
  00724	48 8b c2	 mov	 rax, rdx
  00727	4c 33 c1	 xor	 r8, rcx
  0072a	48 8b ca	 mov	 rcx, rdx
  0072d	48 c1 ea 07	 shr	 rdx, 7
  00731	48 c1 c9 08	 ror	 rcx, 8
  00735	48 d1 c8	 ror	 rax, 1
  00738	48 33 c8	 xor	 rcx, rax
  0073b	48 33 ca	 xor	 rcx, rdx
  0073e	4c 03 c1	 add	 r8, rcx
  00741	4c 03 43 60	 add	 r8, QWORD PTR [rbx+96]
  00745	4c 01 83 98 00
	00 00		 add	 QWORD PTR [rbx+152], r8
$LN24@sha512_com:
  0074c	48 8b 93 98 00
	00 00		 mov	 rdx, QWORD PTR [rbx+152]
  00753	48 8b ce	 mov	 rcx, rsi
  00756	48 8b c6	 mov	 rax, rsi
  00759	48 c1 c1 17	 rol	 rcx, 23
  0075d	48 c1 c8 12	 ror	 rax, 18
  00761	48 33 c8	 xor	 rcx, rax
  00764	48 8b c6	 mov	 rax, rsi
  00767	48 c1 c8 0e	 ror	 rax, 14
  0076b	48 33 c8	 xor	 rcx, rax
  0076e	49 8b c3	 mov	 rax, r11
  00771	48 33 c7	 xor	 rax, rdi
  00774	48 23 c6	 and	 rax, rsi
  00777	49 33 c3	 xor	 rax, r11
  0077a	48 03 c8	 add	 rcx, rax
  0077d	49 8b c1	 mov	 rax, r9
  00780	49 03 4f 38	 add	 rcx, QWORD PTR [r15+56]
  00784	48 03 ca	 add	 rcx, rdx
  00787	49 8b d1	 mov	 rdx, r9
  0078a	4c 03 d1	 add	 r10, rcx
  0078d	49 8b cd	 mov	 rcx, r13
  00790	49 03 ea	 add	 rbp, r10
  00793	48 c1 c2 1e	 rol	 rdx, 30
  00797	48 c1 c8 1c	 ror	 rax, 28
  0079b	48 33 d0	 xor	 rdx, rax
  0079e	49 33 c9	 xor	 rcx, r9
  007a1	49 8b c1	 mov	 rax, r9
  007a4	48 c1 c0 19	 rol	 rax, 25
  007a8	49 23 cc	 and	 rcx, r12
  007ab	48 33 d0	 xor	 rdx, rax
  007ae	49 8b c5	 mov	 rax, r13
  007b1	49 23 c1	 and	 rax, r9
  007b4	48 0b c8	 or	 rcx, rax
  007b7	4c 03 d1	 add	 r10, rcx
  007ba	4c 03 d2	 add	 r10, rdx

; 524  :         v_cycle(10, j); v_cycle(11, j);

  007bd	45 85 f6	 test	 r14d, r14d
  007c0	74 4b		 je	 SHORT $LN26@sha512_com
  007c2	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  007c9	48 8b 93 a8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+168]
  007d0	4c 8b c1	 mov	 r8, rcx
  007d3	48 8b c1	 mov	 rax, rcx
  007d6	48 c1 e9 06	 shr	 rcx, 6
  007da	49 c1 c8 13	 ror	 r8, 19
  007de	48 c1 c0 03	 rol	 rax, 3
  007e2	4c 33 c0	 xor	 r8, rax
  007e5	48 8b c2	 mov	 rax, rdx
  007e8	4c 33 c1	 xor	 r8, rcx
  007eb	48 8b ca	 mov	 rcx, rdx
  007ee	48 c1 ea 07	 shr	 rdx, 7
  007f2	48 c1 c9 08	 ror	 rcx, 8
  007f6	48 d1 c8	 ror	 rax, 1
  007f9	48 33 c8	 xor	 rcx, rax
  007fc	48 33 ca	 xor	 rcx, rdx
  007ff	4c 03 c1	 add	 r8, rcx
  00802	4c 03 43 68	 add	 r8, QWORD PTR [rbx+104]
  00806	4c 01 83 a0 00
	00 00		 add	 QWORD PTR [rbx+160], r8
$LN26@sha512_com:
  0080d	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
  00814	48 8b cd	 mov	 rcx, rbp
  00817	48 8b c5	 mov	 rax, rbp
  0081a	48 c1 c1 17	 rol	 rcx, 23
  0081e	48 c1 c8 12	 ror	 rax, 18
  00822	48 33 c8	 xor	 rcx, rax
  00825	48 8b c5	 mov	 rax, rbp
  00828	48 c1 c8 0e	 ror	 rax, 14
  0082c	48 33 c8	 xor	 rcx, rax
  0082f	48 8b c6	 mov	 rax, rsi
  00832	48 33 c7	 xor	 rax, rdi
  00835	48 23 c5	 and	 rax, rbp
  00838	48 33 c7	 xor	 rax, rdi
  0083b	48 03 c8	 add	 rcx, rax
  0083e	49 8b c2	 mov	 rax, r10
  00841	49 03 4f 40	 add	 rcx, QWORD PTR [r15+64]
  00845	48 03 ca	 add	 rcx, rdx
  00848	49 8b d2	 mov	 rdx, r10
  0084b	4c 03 d9	 add	 r11, rcx
  0084e	49 8b c9	 mov	 rcx, r9
  00851	4d 03 e3	 add	 r12, r11
  00854	48 c1 c2 1e	 rol	 rdx, 30
  00858	48 c1 c8 1c	 ror	 rax, 28
  0085c	48 33 d0	 xor	 rdx, rax
  0085f	49 33 ca	 xor	 rcx, r10
  00862	49 8b c2	 mov	 rax, r10
  00865	48 c1 c0 19	 rol	 rax, 25
  00869	49 23 cd	 and	 rcx, r13
  0086c	48 33 d0	 xor	 rdx, rax
  0086f	49 8b c1	 mov	 rax, r9
  00872	49 23 c2	 and	 rax, r10
  00875	48 0b c8	 or	 rcx, rax
  00878	4c 03 d9	 add	 r11, rcx
  0087b	4c 03 da	 add	 r11, rdx
  0087e	45 85 f6	 test	 r14d, r14d
  00881	74 4b		 je	 SHORT $LN28@sha512_com
  00883	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  0088a	48 8b 93 98 00
	00 00		 mov	 rdx, QWORD PTR [rbx+152]
  00891	4c 8b c1	 mov	 r8, rcx
  00894	48 8b c1	 mov	 rax, rcx
  00897	48 c1 e9 07	 shr	 rcx, 7
  0089b	49 c1 c8 08	 ror	 r8, 8
  0089f	48 d1 c8	 ror	 rax, 1
  008a2	4c 33 c0	 xor	 r8, rax
  008a5	48 8b c2	 mov	 rax, rdx
  008a8	4c 33 c1	 xor	 r8, rcx
  008ab	48 8b ca	 mov	 rcx, rdx
  008ae	48 c1 ea 06	 shr	 rdx, 6
  008b2	48 c1 c9 13	 ror	 rcx, 19
  008b6	48 c1 c0 03	 rol	 rax, 3
  008ba	48 33 c8	 xor	 rcx, rax
  008bd	48 33 ca	 xor	 rcx, rdx
  008c0	4c 03 c1	 add	 r8, rcx
  008c3	4c 03 43 70	 add	 r8, QWORD PTR [rbx+112]
  008c7	4c 01 83 a8 00
	00 00		 add	 QWORD PTR [rbx+168], r8
$LN28@sha512_com:
  008ce	48 8b 93 a8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+168]
  008d5	49 8b cc	 mov	 rcx, r12
  008d8	49 8b c4	 mov	 rax, r12
  008db	48 c1 c1 17	 rol	 rcx, 23
  008df	48 c1 c8 12	 ror	 rax, 18
  008e3	48 33 c8	 xor	 rcx, rax
  008e6	49 8b c4	 mov	 rax, r12
  008e9	48 c1 c8 0e	 ror	 rax, 14
  008ed	48 33 c8	 xor	 rcx, rax
  008f0	48 8b c5	 mov	 rax, rbp
  008f3	48 33 c6	 xor	 rax, rsi
  008f6	49 23 c4	 and	 rax, r12
  008f9	48 33 c6	 xor	 rax, rsi
  008fc	48 03 c8	 add	 rcx, rax
  008ff	49 8b c3	 mov	 rax, r11
  00902	49 03 4f 48	 add	 rcx, QWORD PTR [r15+72]
  00906	48 03 ca	 add	 rcx, rdx
  00909	49 8b d3	 mov	 rdx, r11
  0090c	48 03 f9	 add	 rdi, rcx
  0090f	49 8b cb	 mov	 rcx, r11
  00912	4c 03 ef	 add	 r13, rdi
  00915	48 c1 c2 1e	 rol	 rdx, 30
  00919	48 c1 c8 1c	 ror	 rax, 28
  0091d	48 33 d0	 xor	 rdx, rax
  00920	49 33 ca	 xor	 rcx, r10
  00923	49 8b c3	 mov	 rax, r11
  00926	48 c1 c0 19	 rol	 rax, 25
  0092a	49 23 c9	 and	 rcx, r9
  0092d	48 33 d0	 xor	 rdx, rax
  00930	49 8b c3	 mov	 rax, r11
  00933	49 23 c2	 and	 rax, r10
  00936	48 0b c8	 or	 rcx, rax
  00939	48 03 f9	 add	 rdi, rcx
  0093c	48 03 fa	 add	 rdi, rdx

; 525  :         v_cycle(12, j); v_cycle(13, j);

  0093f	45 85 f6	 test	 r14d, r14d
  00942	74 4b		 je	 SHORT $LN30@sha512_com
  00944	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  0094b	48 8b 93 b8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+184]
  00952	4c 8b c1	 mov	 r8, rcx
  00955	48 8b c1	 mov	 rax, rcx
  00958	48 c1 e9 06	 shr	 rcx, 6
  0095c	49 c1 c8 13	 ror	 r8, 19
  00960	48 c1 c0 03	 rol	 rax, 3
  00964	4c 33 c0	 xor	 r8, rax
  00967	48 8b c2	 mov	 rax, rdx
  0096a	4c 33 c1	 xor	 r8, rcx
  0096d	48 8b ca	 mov	 rcx, rdx
  00970	48 c1 ea 07	 shr	 rdx, 7
  00974	48 c1 c9 08	 ror	 rcx, 8
  00978	48 d1 c8	 ror	 rax, 1
  0097b	48 33 c8	 xor	 rcx, rax
  0097e	48 33 ca	 xor	 rcx, rdx
  00981	4c 03 c1	 add	 r8, rcx
  00984	4c 03 43 78	 add	 r8, QWORD PTR [rbx+120]
  00988	4c 01 83 b0 00
	00 00		 add	 QWORD PTR [rbx+176], r8
$LN30@sha512_com:
  0098f	48 8b 93 b0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+176]
  00996	49 8b cd	 mov	 rcx, r13
  00999	49 8b c5	 mov	 rax, r13
  0099c	48 c1 c1 17	 rol	 rcx, 23
  009a0	48 c1 c8 12	 ror	 rax, 18
  009a4	48 33 c8	 xor	 rcx, rax
  009a7	49 8b c5	 mov	 rax, r13
  009aa	48 c1 c8 0e	 ror	 rax, 14
  009ae	48 33 c8	 xor	 rcx, rax
  009b1	48 8b c5	 mov	 rax, rbp
  009b4	49 33 c4	 xor	 rax, r12
  009b7	49 23 c5	 and	 rax, r13
  009ba	48 33 c5	 xor	 rax, rbp
  009bd	48 03 c8	 add	 rcx, rax
  009c0	48 8b c7	 mov	 rax, rdi
  009c3	49 03 4f 50	 add	 rcx, QWORD PTR [r15+80]
  009c7	48 03 ca	 add	 rcx, rdx
  009ca	48 8b d7	 mov	 rdx, rdi
  009cd	48 03 f1	 add	 rsi, rcx
  009d0	49 8b cb	 mov	 rcx, r11
  009d3	4c 03 ce	 add	 r9, rsi
  009d6	48 c1 c2 1e	 rol	 rdx, 30
  009da	48 c1 c8 1c	 ror	 rax, 28
  009de	48 33 d0	 xor	 rdx, rax
  009e1	48 33 cf	 xor	 rcx, rdi
  009e4	48 8b c7	 mov	 rax, rdi
  009e7	48 c1 c0 19	 rol	 rax, 25
  009eb	49 23 ca	 and	 rcx, r10
  009ee	48 33 d0	 xor	 rdx, rax
  009f1	49 8b c3	 mov	 rax, r11
  009f4	48 23 c7	 and	 rax, rdi
  009f7	48 0b c8	 or	 rcx, rax
  009fa	48 03 f1	 add	 rsi, rcx
  009fd	48 03 f2	 add	 rsi, rdx
  00a00	45 85 f6	 test	 r14d, r14d
  00a03	74 4e		 je	 SHORT $LN32@sha512_com
  00a05	48 8b 8b c0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+192]
  00a0c	48 8b 93 a8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+168]
  00a13	4c 8b c1	 mov	 r8, rcx
  00a16	48 8b c1	 mov	 rax, rcx
  00a19	48 c1 e9 07	 shr	 rcx, 7
  00a1d	49 c1 c8 08	 ror	 r8, 8
  00a21	48 d1 c8	 ror	 rax, 1
  00a24	4c 33 c0	 xor	 r8, rax
  00a27	48 8b c2	 mov	 rax, rdx
  00a2a	4c 33 c1	 xor	 r8, rcx
  00a2d	48 8b ca	 mov	 rcx, rdx
  00a30	48 c1 ea 06	 shr	 rdx, 6
  00a34	48 c1 c9 13	 ror	 rcx, 19
  00a38	48 c1 c0 03	 rol	 rax, 3
  00a3c	48 33 c8	 xor	 rcx, rax
  00a3f	48 33 ca	 xor	 rcx, rdx
  00a42	4c 03 c1	 add	 r8, rcx
  00a45	4c 03 83 80 00
	00 00		 add	 r8, QWORD PTR [rbx+128]
  00a4c	4c 01 83 b8 00
	00 00		 add	 QWORD PTR [rbx+184], r8
$LN32@sha512_com:
  00a53	48 8b 93 b8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+184]
  00a5a	49 8b c9	 mov	 rcx, r9
  00a5d	49 8b c1	 mov	 rax, r9
  00a60	48 c1 c1 17	 rol	 rcx, 23
  00a64	48 c1 c8 12	 ror	 rax, 18
  00a68	48 33 c8	 xor	 rcx, rax
  00a6b	49 8b c1	 mov	 rax, r9
  00a6e	48 c1 c8 0e	 ror	 rax, 14
  00a72	48 33 c8	 xor	 rcx, rax
  00a75	49 8b c4	 mov	 rax, r12
  00a78	49 33 c5	 xor	 rax, r13
  00a7b	49 23 c1	 and	 rax, r9
  00a7e	49 33 c4	 xor	 rax, r12
  00a81	48 03 c8	 add	 rcx, rax
  00a84	48 8b c6	 mov	 rax, rsi
  00a87	49 03 4f 58	 add	 rcx, QWORD PTR [r15+88]
  00a8b	48 03 ca	 add	 rcx, rdx
  00a8e	48 8b d6	 mov	 rdx, rsi
  00a91	48 03 e9	 add	 rbp, rcx
  00a94	48 8b ce	 mov	 rcx, rsi
  00a97	4c 03 d5	 add	 r10, rbp
  00a9a	48 c1 c2 1e	 rol	 rdx, 30
  00a9e	48 c1 c8 1c	 ror	 rax, 28
  00aa2	48 33 d0	 xor	 rdx, rax
  00aa5	48 33 cf	 xor	 rcx, rdi
  00aa8	48 8b c6	 mov	 rax, rsi
  00aab	48 c1 c0 19	 rol	 rax, 25
  00aaf	49 23 cb	 and	 rcx, r11
  00ab2	48 33 d0	 xor	 rdx, rax
  00ab5	48 8b c6	 mov	 rax, rsi
  00ab8	48 23 c7	 and	 rax, rdi
  00abb	48 0b c8	 or	 rcx, rax
  00abe	48 03 e9	 add	 rbp, rcx
  00ac1	48 03 ea	 add	 rbp, rdx

; 526  :         v_cycle(14, j); v_cycle(15, j);

  00ac4	45 85 f6	 test	 r14d, r14d
  00ac7	74 4e		 je	 SHORT $LN34@sha512_com
  00ac9	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  00ad0	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  00ad7	4c 8b c1	 mov	 r8, rcx
  00ada	48 8b c1	 mov	 rax, rcx
  00add	48 c1 e9 06	 shr	 rcx, 6
  00ae1	49 c1 c8 13	 ror	 r8, 19
  00ae5	48 c1 c0 03	 rol	 rax, 3
  00ae9	4c 33 c0	 xor	 r8, rax
  00aec	48 8b c2	 mov	 rax, rdx
  00aef	4c 33 c1	 xor	 r8, rcx
  00af2	48 8b ca	 mov	 rcx, rdx
  00af5	48 c1 ea 07	 shr	 rdx, 7
  00af9	48 c1 c9 08	 ror	 rcx, 8
  00afd	48 d1 c8	 ror	 rax, 1
  00b00	48 33 c8	 xor	 rcx, rax
  00b03	48 33 ca	 xor	 rcx, rdx
  00b06	4c 03 c1	 add	 r8, rcx
  00b09	4c 03 83 88 00
	00 00		 add	 r8, QWORD PTR [rbx+136]
  00b10	4c 01 83 c0 00
	00 00		 add	 QWORD PTR [rbx+192], r8
$LN34@sha512_com:
  00b17	48 8b 93 c0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+192]
  00b1e	49 8b ca	 mov	 rcx, r10
  00b21	49 8b c2	 mov	 rax, r10
  00b24	48 c1 c1 17	 rol	 rcx, 23
  00b28	48 c1 c8 12	 ror	 rax, 18
  00b2c	48 33 c8	 xor	 rcx, rax
  00b2f	49 8b c2	 mov	 rax, r10
  00b32	48 c1 c8 0e	 ror	 rax, 14
  00b36	48 33 c8	 xor	 rcx, rax
  00b39	49 8b c5	 mov	 rax, r13
  00b3c	49 33 c1	 xor	 rax, r9
  00b3f	49 23 c2	 and	 rax, r10
  00b42	49 33 c5	 xor	 rax, r13
  00b45	48 03 c8	 add	 rcx, rax
  00b48	48 8b c5	 mov	 rax, rbp
  00b4b	49 03 4f 60	 add	 rcx, QWORD PTR [r15+96]
  00b4f	48 03 ca	 add	 rcx, rdx
  00b52	48 8b d5	 mov	 rdx, rbp
  00b55	4c 03 e1	 add	 r12, rcx
  00b58	48 8b cd	 mov	 rcx, rbp
  00b5b	4d 03 dc	 add	 r11, r12
  00b5e	48 c1 c2 1e	 rol	 rdx, 30
  00b62	48 c1 c8 1c	 ror	 rax, 28
  00b66	48 33 d0	 xor	 rdx, rax
  00b69	48 33 ce	 xor	 rcx, rsi
  00b6c	48 8b c5	 mov	 rax, rbp
  00b6f	48 c1 c0 19	 rol	 rax, 25
  00b73	48 23 cf	 and	 rcx, rdi
  00b76	48 33 d0	 xor	 rdx, rax
  00b79	48 8b c5	 mov	 rax, rbp
  00b7c	48 23 c6	 and	 rax, rsi
  00b7f	48 0b c8	 or	 rcx, rax
  00b82	4c 03 e1	 add	 r12, rcx
  00b85	4c 03 e2	 add	 r12, rdx
  00b88	45 85 f6	 test	 r14d, r14d
  00b8b	74 4b		 je	 SHORT $LN36@sha512_com
  00b8d	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00b91	48 8b 93 b8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+184]
  00b98	4c 8b c1	 mov	 r8, rcx
  00b9b	48 8b c1	 mov	 rax, rcx
  00b9e	48 c1 e9 07	 shr	 rcx, 7
  00ba2	49 c1 c8 08	 ror	 r8, 8
  00ba6	48 d1 c8	 ror	 rax, 1
  00ba9	4c 33 c0	 xor	 r8, rax
  00bac	48 8b c2	 mov	 rax, rdx
  00baf	4c 33 c1	 xor	 r8, rcx
  00bb2	48 8b ca	 mov	 rcx, rdx
  00bb5	48 c1 ea 06	 shr	 rdx, 6
  00bb9	48 c1 c9 13	 ror	 rcx, 19
  00bbd	48 c1 c0 03	 rol	 rax, 3
  00bc1	48 33 c8	 xor	 rcx, rax
  00bc4	48 33 ca	 xor	 rcx, rdx
  00bc7	4c 03 c1	 add	 r8, rcx
  00bca	4c 03 83 90 00
	00 00		 add	 r8, QWORD PTR [rbx+144]
  00bd1	4c 01 83 c8 00
	00 00		 add	 QWORD PTR [rbx+200], r8
$LN36@sha512_com:
  00bd8	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  00bdf	49 8b cb	 mov	 rcx, r11
  00be2	49 8b c3	 mov	 rax, r11
  00be5	48 c1 c1 17	 rol	 rcx, 23
  00be9	48 c1 c8 12	 ror	 rax, 18
  00bed	41 83 c6 10	 add	 r14d, 16
  00bf1	48 33 c8	 xor	 rcx, rax
  00bf4	49 8b c3	 mov	 rax, r11
  00bf7	49 83 ef 80	 sub	 r15, -128		; ffffffffffffff80H
  00bfb	48 c1 c8 0e	 ror	 rax, 14
  00bff	48 33 c8	 xor	 rcx, rax
  00c02	49 8b c1	 mov	 rax, r9
  00c05	49 33 c2	 xor	 rax, r10
  00c08	49 23 c3	 and	 rax, r11
  00c0b	49 33 c1	 xor	 rax, r9
  00c0e	48 03 c8	 add	 rcx, rax
  00c11	49 8b c4	 mov	 rax, r12
  00c14	49 03 4f e8	 add	 rcx, QWORD PTR [r15-24]
  00c18	48 03 ca	 add	 rcx, rdx
  00c1b	49 8b d4	 mov	 rdx, r12
  00c1e	4c 03 e9	 add	 r13, rcx
  00c21	48 8b cd	 mov	 rcx, rbp
  00c24	49 03 fd	 add	 rdi, r13
  00c27	48 c1 c2 1e	 rol	 rdx, 30
  00c2b	48 c1 c8 1c	 ror	 rax, 28
  00c2f	48 33 d0	 xor	 rdx, rax
  00c32	49 33 cc	 xor	 rcx, r12
  00c35	49 8b c4	 mov	 rax, r12
  00c38	48 c1 c0 19	 rol	 rax, 25
  00c3c	48 23 ce	 and	 rcx, rsi
  00c3f	48 33 d0	 xor	 rdx, rax
  00c42	48 8b c5	 mov	 rax, rbp
  00c45	49 23 c4	 and	 rax, r12
  00c48	48 0b c8	 or	 rcx, rax
  00c4b	4c 03 e9	 add	 r13, rcx
  00c4e	4c 03 ea	 add	 r13, rdx
  00c51	41 83 fe 50	 cmp	 r14d, 80		; 00000050H
  00c55	0f 82 09 f4 ff
	ff		 jb	 $LL3@sha512_com

; 527  :     }
; 528  : 
; 529  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];
; 530  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];
; 531  :     ctx->hash[4] += v[4]; ctx->hash[5] += v[5];

  00c5b	4c 01 5b 38	 add	 QWORD PTR [rbx+56], r11
  00c5f	48 01 6b 20	 add	 QWORD PTR [rbx+32], rbp
  00c63	48 01 73 28	 add	 QWORD PTR [rbx+40], rsi
  00c67	4c 01 6b 10	 add	 QWORD PTR [rbx+16], r13
  00c6b	4c 01 63 18	 add	 QWORD PTR [rbx+24], r12
  00c6f	48 01 7b 30	 add	 QWORD PTR [rbx+48], rdi

; 532  :     ctx->hash[6] += v[6]; ctx->hash[7] += v[7];

  00c73	4c 01 53 40	 add	 QWORD PTR [rbx+64], r10
  00c77	4c 01 4b 48	 add	 QWORD PTR [rbx+72], r9

; 533  : }

  00c7b	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  00c80	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  00c84	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  00c88	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  00c8c	49 8b e3	 mov	 rsp, r11
  00c8f	41 5f		 pop	 r15
  00c91	41 5e		 pop	 r14
  00c93	41 5d		 pop	 r13
  00c95	41 5c		 pop	 r12
  00c97	5f		 pop	 rdi
  00c98	c3		 ret	 0
sha512_compile ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha_end2 DD imagerel sha_end2
	DD	imagerel sha_end2+365
	DD	imagerel $unwind$sha_end2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha_end2 DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha_end2
_TEXT	SEGMENT
hval$ = 48
ctx$ = 56
hlen$ = 64
sha_end2 PROC						; COMDAT

; 564  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA512_MASK);

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	44 8b 0a	 mov	 r9d, DWORD PTR [rdx]

; 565  : 
; 566  :     /* put bytes in the buffer in an order in which references to   */
; 567  :     /* 32-bit words will put bytes with lower addresses into the    */
; 568  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 569  :     bsw_64(ctx->wbuf, (i + 7) >> 3);

  00012	33 ff		 xor	 edi, edi
  00014	48 8b da	 mov	 rbx, rdx
  00017	41 83 e1 7f	 and	 r9d, 127		; 0000007fH
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	41 8d 41 07	 lea	 eax, DWORD PTR [r9+7]
  00022	c1 e8 03	 shr	 eax, 3
  00025	44 8b c0	 mov	 r8d, eax
  00028	4c 3b c7	 cmp	 r8, rdi
  0002b	74 58		 je	 SHORT $LN16@sha_end2

; 564  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA512_MASK);

  0002d	4c 8d 54 c2 50	 lea	 r10, QWORD PTR [rdx+rax*8+80]
$LL10@sha_end2:

; 565  : 
; 566  :     /* put bytes in the buffer in an order in which references to   */
; 567  :     /* 32-bit words will put bytes with lower addresses into the    */
; 568  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 569  :     bsw_64(ctx->wbuf, (i + 7) >> 3);

  00032	49 83 ea 08	 sub	 r10, 8
  00036	49 ff c8	 dec	 r8
  00039	41 bb 00 ff 00
	ff		 mov	 r11d, -16711936		; ff00ff00H
  0003f	41 8b 02	 mov	 eax, DWORD PTR [r10]
  00042	41 8b 12	 mov	 edx, DWORD PTR [r10]
  00045	49 8b 0a	 mov	 rcx, QWORD PTR [r10]
  00048	48 c1 e9 20	 shr	 rcx, 32			; 00000020H
  0004c	c1 ca 08	 ror	 edx, 8
  0004f	48 81 e2 00 ff
	00 ff		 and	 rdx, -16711936		; ffffffffff00ff00H
  00056	c1 c0 08	 rol	 eax, 8
  00059	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0005e	48 0b d0	 or	 rdx, rax
  00061	8b c1		 mov	 eax, ecx
  00063	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00067	c1 c8 08	 ror	 eax, 8
  0006a	49 23 c3	 and	 rax, r11
  0006d	48 0b d0	 or	 rdx, rax
  00070	8b c1		 mov	 eax, ecx
  00072	c1 c0 08	 rol	 eax, 8
  00075	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0007a	48 0b d0	 or	 rdx, rax
  0007d	49 89 12	 mov	 QWORD PTR [r10], rdx
  00080	4c 3b c7	 cmp	 r8, rdi
  00083	75 ad		 jne	 SHORT $LL10@sha_end2
$LN16@sha_end2:

; 570  : 
; 571  :     /* we now need to mask valid bytes and add the padding which is */
; 572  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 573  :     /* we can always add the first padding byte here because the    */
; 574  :     /* buffer always has at least one empty slot                    */
; 575  :     ctx->wbuf[i >> 3] &= li_64(ffffffffffffff00) << 8 * (~i & 7);

  00085	41 8b c9	 mov	 ecx, r9d
  00088	45 8b c1	 mov	 r8d, r9d
  0008b	48 c7 c2 00 ff
	ff ff		 mov	 rdx, -256		; ffffffffffffff00H
  00092	49 c1 e8 03	 shr	 r8, 3
  00096	f7 d1		 not	 ecx

; 576  :     ctx->wbuf[i >> 3] |= li_64(0000000000000080) << 8 * (~i & 7);

  00098	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0009d	83 e1 07	 and	 ecx, 7
  000a0	c1 e1 03	 shl	 ecx, 3
  000a3	48 d3 e2	 shl	 rdx, cl
  000a6	48 d3 e0	 shl	 rax, cl
  000a9	4a 23 54 c3 50	 and	 rdx, QWORD PTR [rbx+r8*8+80]
  000ae	48 0b d0	 or	 rdx, rax
  000b1	4a 89 54 c3 50	 mov	 QWORD PTR [rbx+r8*8+80], rdx

; 577  : 
; 578  :     /* we need 17 or more empty byte positions, one for the padding */
; 579  :     /* byte (above) and sixteen for the length count.  If there is  */
; 580  :     /* not enough space pad and empty the buffer                    */
; 581  :     if(i > SHA512_BLOCK_SIZE - 17)

  000b6	41 83 f9 6f	 cmp	 r9d, 111		; 0000006fH
  000ba	76 1a		 jbe	 SHORT $LN8@sha_end2

; 582  :     {
; 583  :         if(i < 120) ctx->wbuf[15] = 0;

  000bc	41 83 f9 78	 cmp	 r9d, 120		; 00000078H
  000c0	73 07		 jae	 SHORT $LN7@sha_end2
  000c2	48 89 bb c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rdi
$LN7@sha_end2:

; 584  :         sha512_compile(ctx);

  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 sha512_compile

; 585  :         i = 0;

  000d1	44 8b cf	 mov	 r9d, edi

; 586  :     }
; 587  :     else

  000d4	eb 07		 jmp	 SHORT $LN14@sha_end2
$LN8@sha_end2:

; 588  :         i = (i >> 3) + 1;

  000d6	41 c1 e9 03	 shr	 r9d, 3
  000da	41 ff c1	 inc	 r9d
$LN14@sha_end2:

; 589  : 
; 590  :     while(i < 14)

  000dd	b8 0e 00 00 00	 mov	 eax, 14
  000e2	49 63 c9	 movsxd	 rcx, r9d
  000e5	44 3b c8	 cmp	 r9d, eax
  000e8	73 16		 jae	 SHORT $LN5@sha_end2

; 591  :         ctx->wbuf[i++] = 0;

  000ea	41 2b c1	 sub	 eax, r9d
  000ed	48 8d 4c cb 50	 lea	 rcx, QWORD PTR [rbx+rcx*8+80]
  000f2	33 d2		 xor	 edx, edx
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	49 c1 e0 03	 shl	 r8, 3
  000fb	e8 00 00 00 00	 call	 memset
$LN5@sha_end2:

; 592  : 
; 593  :     /* the following 64-bit length fields are assembled in the      */
; 594  :     /* wrong byte order on little endian machines but this is       */
; 595  :     /* corrected later since they are only ever used as 64-bit      */
; 596  :     /* word values.                                                 */
; 597  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 61);

  00100	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00103	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00107	48 c1 e1 03	 shl	 rcx, 3
  0010b	48 8b c2	 mov	 rax, rdx
  0010e	48 c1 e8 3d	 shr	 rax, 61			; 0000003dH
  00112	48 0b c8	 or	 rcx, rax

; 598  :     ctx->wbuf[15] = ctx->count[0] << 3;

  00115	48 8b c2	 mov	 rax, rdx
  00118	48 c1 e0 03	 shl	 rax, 3
  0011c	48 89 8b c0 00
	00 00		 mov	 QWORD PTR [rbx+192], rcx

; 599  :     sha512_compile(ctx);

  00123	48 8b cb	 mov	 rcx, rbx
  00126	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax
  0012d	e8 00 00 00 00	 call	 sha512_compile
  00132	48 8b d7	 mov	 rdx, rdi
$LL3@sha_end2:

; 600  : 
; 601  :     /* extract the hash value as bytes in case the hash buffer is   */
; 602  :     /* misaligned for 32-bit words                                  */
; 603  :     for(i = 0; i < hlen; ++i)
; 604  :         hval[i] = (unsigned char)(ctx->hash[i >> 3] >> (8 * (~i & 7)));

  00135	48 8b c2	 mov	 rax, rdx
  00138	8b cf		 mov	 ecx, edi
  0013a	ff c7		 inc	 edi
  0013c	48 c1 e8 03	 shr	 rax, 3
  00140	f7 d1		 not	 ecx
  00142	48 ff c2	 inc	 rdx
  00145	48 8b 44 c3 10	 mov	 rax, QWORD PTR [rbx+rax*8+16]
  0014a	83 e1 07	 and	 ecx, 7
  0014d	c1 e1 03	 shl	 ecx, 3
  00150	48 d3 e8	 shr	 rax, cl
  00153	88 06		 mov	 BYTE PTR [rsi], al
  00155	48 ff c6	 inc	 rsi
  00158	83 ff 40	 cmp	 edi, 64			; 00000040H
  0015b	72 d8		 jb	 SHORT $LL3@sha_end2

; 605  : }

  0015d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00162	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00167	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016b	5f		 pop	 rdi
  0016c	c3		 ret	 0
sha_end2 ENDP
_TEXT	ENDS
PUBLIC	sha512_hash
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha512_hash DD imagerel $LN14
	DD	imagerel $LN14+249
	DD	imagerel $unwind$sha512_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha512_hash DD 0c1d01H
	DD	0b741dH
	DD	0a641dH
	DD	09541dH
	DD	08341dH
	DD	0e019321dH
	DD	0c015d017H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha512_hash
_TEXT	SEGMENT
data$ = 64
len$ = 72
ctx$ = 80
sha512_hash PROC					; COMDAT

; 543  : {   uint_32t pos = (uint_32t)(ctx->count[0] & SHA512_MASK),

$LN14:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	41 55		 push	 r13
  00017	41 56		 push	 r14
  00019	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001d	45 8b 20	 mov	 r12d, DWORD PTR [r8]
  00020	8b f2		 mov	 esi, edx

; 544  :              space = SHA512_BLOCK_SIZE - pos;

  00022	bd 80 00 00 00	 mov	 ebp, 128		; 00000080H

; 545  :     const unsigned char *sp = data;
; 546  : 
; 547  :     if((ctx->count[0] += len) < len)

  00027	49 01 30	 add	 QWORD PTR [r8], rsi
  0002a	41 83 e4 7f	 and	 r12d, 127		; 0000007fH
  0002e	49 8b f8	 mov	 rdi, r8
  00031	41 2b ec	 sub	 ebp, r12d
  00034	4c 8b e9	 mov	 r13, rcx
  00037	49 39 30	 cmp	 QWORD PTR [r8], rsi
  0003a	0f 83 83 00 00
	00		 jae	 $LN13@sha512_has

; 548  :         ++(ctx->count[1]);

  00040	49 ff 40 08	 inc	 QWORD PTR [r8+8]

; 555  :         sha512_compile(ctx);

  00044	eb 7d		 jmp	 SHORT $LN13@sha512_has
$LL4@sha512_has:

; 549  : 
; 550  :     while(len >= space)     /* tranfer whole blocks while possible  */
; 551  :     {
; 552  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  00046	44 8b c5	 mov	 r8d, ebp
  00049	8b dd		 mov	 ebx, ebp
  0004b	e8 00 00 00 00	 call	 memcpy

; 553  :         sp += space; len -= space; space = SHA512_BLOCK_SIZE; pos = 0;

  00050	2b f5		 sub	 esi, ebp
  00052	bd 80 00 00 00	 mov	 ebp, 128		; 00000080H
  00057	4c 03 eb	 add	 r13, rbx
  0005a	4c 8d 87 d0 00
	00 00		 lea	 r8, QWORD PTR [rdi+208]
  00061	41 bb ff 00 ff
	00		 mov	 r11d, 16711935		; 00ff00ffH

; 554  :         bsw_64(ctx->wbuf, SHA512_BLOCK_SIZE >> 3);

  00067	44 8d 4d 90	 lea	 r9d, QWORD PTR [rbp-112]
  0006b	45 33 e4	 xor	 r12d, r12d
$LL2@sha512_has:
  0006e	49 83 e8 08	 sub	 r8, 8
  00072	41 ba 00 ff 00
	ff		 mov	 r10d, -16711936		; ff00ff00H
  00078	41 8b 10	 mov	 edx, DWORD PTR [r8]
  0007b	41 8b 00	 mov	 eax, DWORD PTR [r8]
  0007e	49 8b 08	 mov	 rcx, QWORD PTR [r8]
  00081	48 c1 e9 20	 shr	 rcx, 32			; 00000020H
  00085	c1 ca 08	 ror	 edx, 8
  00088	48 81 e2 00 ff
	00 ff		 and	 rdx, -16711936		; ffffffffff00ff00H
  0008f	c1 c0 08	 rol	 eax, 8
  00092	49 23 c3	 and	 rax, r11
  00095	48 0b d0	 or	 rdx, rax
  00098	8b c1		 mov	 eax, ecx
  0009a	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0009e	c1 c8 08	 ror	 eax, 8
  000a1	49 23 c2	 and	 rax, r10
  000a4	48 0b d0	 or	 rdx, rax
  000a7	8b c1		 mov	 eax, ecx
  000a9	c1 c0 08	 rol	 eax, 8
  000ac	49 23 c3	 and	 rax, r11
  000af	48 0b d0	 or	 rdx, rax
  000b2	49 83 e9 01	 sub	 r9, 1
  000b6	49 89 10	 mov	 QWORD PTR [r8], rdx
  000b9	75 b3		 jne	 SHORT $LL2@sha512_has

; 555  :         sha512_compile(ctx);

  000bb	48 8b cf	 mov	 rcx, rdi
  000be	e8 00 00 00 00	 call	 sha512_compile
$LN13@sha512_has:

; 556  :     }
; 557  : 
; 558  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  000c3	49 8d 4c 3c 50	 lea	 rcx, QWORD PTR [r12+rdi+80]
  000c8	49 8b d5	 mov	 rdx, r13
  000cb	3b f5		 cmp	 esi, ebp
  000cd	0f 83 73 ff ff
	ff		 jae	 $LL4@sha512_has
  000d3	44 8b c6	 mov	 r8d, esi

; 559  : }

  000d6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000db	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000e0	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000e5	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000ea	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ee	41 5e		 pop	 r14
  000f0	41 5d		 pop	 r13
  000f2	41 5c		 pop	 r12
  000f4	e9 00 00 00 00	 jmp	 memcpy
sha512_hash ENDP
PUBLIC	sha512_end
; Function compile flags: /Ogspy
;	COMDAT sha512_end
_TEXT	SEGMENT
hval$ = 8
ctx$ = 16
sha512_end PROC						; COMDAT

; 662  :     sha_end2(hval, ctx, SHA512_DIGEST_SIZE);

  00000	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H

; 663  : }

  00006	e9 00 00 00 00	 jmp	 sha_end2
sha512_end ENDP
END
