; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	mul_bex8
PUBLIC	mul_x
PUBLIC	mul_lex8
PUBLIC	bsw_32
PUBLIC	mul_x64
PUBLIC	mul_lex8_64
PUBLIC	move_block_aligned
PUBLIC	xor_block_aligned
PUBLIC	move_block_aligned64
PUBLIC	xor_block_aligned64
gf_poly	DD	00H
	DD	0e1000000H
gf_poly64 DD	00H
	DD	0d8000000H
gft_le	DW	00H
	DW	0c201H
	DW	08403H
	DW	04602H
	DW	0807H
	DW	0ca06H
	DW	08c04H
	DW	04e05H
	DW	0100eH
	DW	0d20fH
	DW	0940dH
	DW	0560cH
	DW	01809H
	DW	0da08H
	DW	09c0aH
	DW	05e0bH
	DW	0201cH
	DW	0e21dH
	DW	0a41fH
	DW	0661eH
	DW	0281bH
	DW	0ea1aH
	DW	0ac18H
	DW	06e19H
	DW	03012H
	DW	0f213H
	DW	0b411H
	DW	07610H
	DW	03815H
	DW	0fa14H
	DW	0bc16H
	DW	07e17H
	DW	04038H
	DW	08239H
	DW	0c43bH
	DW	063aH
	DW	0483fH
	DW	08a3eH
	DW	0cc3cH
	DW	0e3dH
	DW	05036H
	DW	09237H
	DW	0d435H
	DW	01634H
	DW	05831H
	DW	09a30H
	DW	0dc32H
	DW	01e33H
	DW	06024H
	DW	0a225H
	DW	0e427H
	DW	02626H
	DW	06823H
	DW	0aa22H
	DW	0ec20H
	DW	02e21H
	DW	0702aH
	DW	0b22bH
	DW	0f429H
	DW	03628H
	DW	0782dH
	DW	0ba2cH
	DW	0fc2eH
	DW	03e2fH
	DW	08070H
	DW	04271H
	DW	0473H
	DW	0c672H
	DW	08877H
	DW	04a76H
	DW	0c74H
	DW	0ce75H
	DW	0907eH
	DW	0527fH
	DW	0147dH
	DW	0d67cH
	DW	09879H
	DW	05a78H
	DW	01c7aH
	DW	0de7bH
	DW	0a06cH
	DW	0626dH
	DW	0246fH
	DW	0e66eH
	DW	0a86bH
	DW	06a6aH
	DW	02c68H
	DW	0ee69H
	DW	0b062H
	DW	07263H
	DW	03461H
	DW	0f660H
	DW	0b865H
	DW	07a64H
	DW	03c66H
	DW	0fe67H
	DW	0c048H
	DW	0249H
	DW	0444bH
	DW	0864aH
	DW	0c84fH
	DW	0a4eH
	DW	04c4cH
	DW	08e4dH
	DW	0d046H
	DW	01247H
	DW	05445H
	DW	09644H
	DW	0d841H
	DW	01a40H
	DW	05c42H
	DW	09e43H
	DW	0e054H
	DW	02255H
	DW	06457H
	DW	0a656H
	DW	0e853H
	DW	02a52H
	DW	06c50H
	DW	0ae51H
	DW	0f05aH
	DW	0325bH
	DW	07459H
	DW	0b658H
	DW	0f85dH
	DW	03a5cH
	DW	07c5eH
	DW	0be5fH
	DW	0e1H
	DW	0c2e0H
	DW	084e2H
	DW	046e3H
	DW	08e6H
	DW	0cae7H
	DW	08ce5H
	DW	04ee4H
	DW	010efH
	DW	0d2eeH
	DW	094ecH
	DW	056edH
	DW	018e8H
	DW	0dae9H
	DW	09cebH
	DW	05eeaH
	DW	020fdH
	DW	0e2fcH
	DW	0a4feH
	DW	066ffH
	DW	028faH
	DW	0eafbH
	DW	0acf9H
	DW	06ef8H
	DW	030f3H
	DW	0f2f2H
	DW	0b4f0H
	DW	076f1H
	DW	038f4H
	DW	0faf5H
	DW	0bcf7H
	DW	07ef6H
	DW	040d9H
	DW	082d8H
	DW	0c4daH
	DW	06dbH
	DW	048deH
	DW	08adfH
	DW	0ccddH
	DW	0edcH
	DW	050d7H
	DW	092d6H
	DW	0d4d4H
	DW	016d5H
	DW	058d0H
	DW	09ad1H
	DW	0dcd3H
	DW	01ed2H
	DW	060c5H
	DW	0a2c4H
	DW	0e4c6H
	DW	026c7H
	DW	068c2H
	DW	0aac3H
	DW	0ecc1H
	DW	02ec0H
	DW	070cbH
	DW	0b2caH
	DW	0f4c8H
	DW	036c9H
	DW	078ccH
	DW	0bacdH
	DW	0fccfH
	DW	03eceH
	DW	08091H
	DW	04290H
	DW	0492H
	DW	0c693H
	DW	08896H
	DW	04a97H
	DW	0c95H
	DW	0ce94H
	DW	0909fH
	DW	0529eH
	DW	0149cH
	DW	0d69dH
	DW	09898H
	DW	05a99H
	DW	01c9bH
	DW	0de9aH
	DW	0a08dH
	DW	0628cH
	DW	0248eH
	DW	0e68fH
	DW	0a88aH
	DW	06a8bH
	DW	02c89H
	DW	0ee88H
	DW	0b083H
	DW	07282H
	DW	03480H
	DW	0f681H
	DW	0b884H
	DW	07a85H
	DW	03c87H
	DW	0fe86H
	DW	0c0a9H
	DW	02a8H
	DW	044aaH
	DW	086abH
	DW	0c8aeH
	DW	0aafH
	DW	04cadH
	DW	08eacH
	DW	0d0a7H
	DW	012a6H
	DW	054a4H
	DW	096a5H
	DW	0d8a0H
	DW	01aa1H
	DW	05ca3H
	DW	09ea2H
	DW	0e0b5H
	DW	022b4H
	DW	064b6H
	DW	0a6b7H
	DW	0e8b2H
	DW	02ab3H
	DW	06cb1H
	DW	0aeb0H
	DW	0f0bbH
	DW	032baH
	DW	074b8H
	DW	0b6b9H
	DW	0f8bcH
	DW	03abdH
	DW	07cbfH
	DW	0bebeH
gft_le64 DW	00H
	DW	0b001H
	DW	06003H
	DW	0d002H
	DW	0c006H
	DW	07007H
	DW	0a005H
	DW	01004H
	DW	0800dH
	DW	0300cH
	DW	0e00eH
	DW	0500fH
	DW	0400bH
	DW	0f00aH
	DW	02008H
	DW	09009H
	DW	01bH
	DW	0b01aH
	DW	06018H
	DW	0d019H
	DW	0c01dH
	DW	0701cH
	DW	0a01eH
	DW	0101fH
	DW	08016H
	DW	03017H
	DW	0e015H
	DW	05014H
	DW	04010H
	DW	0f011H
	DW	02013H
	DW	09012H
	DW	036H
	DW	0b037H
	DW	06035H
	DW	0d034H
	DW	0c030H
	DW	07031H
	DW	0a033H
	DW	01032H
	DW	0803bH
	DW	0303aH
	DW	0e038H
	DW	05039H
	DW	0403dH
	DW	0f03cH
	DW	0203eH
	DW	0903fH
	DW	02dH
	DW	0b02cH
	DW	0602eH
	DW	0d02fH
	DW	0c02bH
	DW	0702aH
	DW	0a028H
	DW	01029H
	DW	08020H
	DW	03021H
	DW	0e023H
	DW	05022H
	DW	04026H
	DW	0f027H
	DW	02025H
	DW	09024H
	DW	06cH
	DW	0b06dH
	DW	0606fH
	DW	0d06eH
	DW	0c06aH
	DW	0706bH
	DW	0a069H
	DW	01068H
	DW	08061H
	DW	03060H
	DW	0e062H
	DW	05063H
	DW	04067H
	DW	0f066H
	DW	02064H
	DW	09065H
	DW	077H
	DW	0b076H
	DW	06074H
	DW	0d075H
	DW	0c071H
	DW	07070H
	DW	0a072H
	DW	01073H
	DW	0807aH
	DW	0307bH
	DW	0e079H
	DW	05078H
	DW	0407cH
	DW	0f07dH
	DW	0207fH
	DW	0907eH
	DW	05aH
	DW	0b05bH
	DW	06059H
	DW	0d058H
	DW	0c05cH
	DW	0705dH
	DW	0a05fH
	DW	0105eH
	DW	08057H
	DW	03056H
	DW	0e054H
	DW	05055H
	DW	04051H
	DW	0f050H
	DW	02052H
	DW	09053H
	DW	041H
	DW	0b040H
	DW	06042H
	DW	0d043H
	DW	0c047H
	DW	07046H
	DW	0a044H
	DW	01045H
	DW	0804cH
	DW	0304dH
	DW	0e04fH
	DW	0504eH
	DW	0404aH
	DW	0f04bH
	DW	02049H
	DW	09048H
	DW	0d8H
	DW	0b0d9H
	DW	060dbH
	DW	0d0daH
	DW	0c0deH
	DW	070dfH
	DW	0a0ddH
	DW	010dcH
	DW	080d5H
	DW	030d4H
	DW	0e0d6H
	DW	050d7H
	DW	040d3H
	DW	0f0d2H
	DW	020d0H
	DW	090d1H
	DW	0c3H
	DW	0b0c2H
	DW	060c0H
	DW	0d0c1H
	DW	0c0c5H
	DW	070c4H
	DW	0a0c6H
	DW	010c7H
	DW	080ceH
	DW	030cfH
	DW	0e0cdH
	DW	050ccH
	DW	040c8H
	DW	0f0c9H
	DW	020cbH
	DW	090caH
	DW	0eeH
	DW	0b0efH
	DW	060edH
	DW	0d0ecH
	DW	0c0e8H
	DW	070e9H
	DW	0a0ebH
	DW	010eaH
	DW	080e3H
	DW	030e2H
	DW	0e0e0H
	DW	050e1H
	DW	040e5H
	DW	0f0e4H
	DW	020e6H
	DW	090e7H
	DW	0f5H
	DW	0b0f4H
	DW	060f6H
	DW	0d0f7H
	DW	0c0f3H
	DW	070f2H
	DW	0a0f0H
	DW	010f1H
	DW	080f8H
	DW	030f9H
	DW	0e0fbH
	DW	050faH
	DW	040feH
	DW	0f0ffH
	DW	020fdH
	DW	090fcH
	DW	0b4H
	DW	0b0b5H
	DW	060b7H
	DW	0d0b6H
	DW	0c0b2H
	DW	070b3H
	DW	0a0b1H
	DW	010b0H
	DW	080b9H
	DW	030b8H
	DW	0e0baH
	DW	050bbH
	DW	040bfH
	DW	0f0beH
	DW	020bcH
	DW	090bdH
	DW	0afH
	DW	0b0aeH
	DW	060acH
	DW	0d0adH
	DW	0c0a9H
	DW	070a8H
	DW	0a0aaH
	DW	010abH
	DW	080a2H
	DW	030a3H
	DW	0e0a1H
	DW	050a0H
	DW	040a4H
	DW	0f0a5H
	DW	020a7H
	DW	090a6H
	DW	082H
	DW	0b083H
	DW	06081H
	DW	0d080H
	DW	0c084H
	DW	07085H
	DW	0a087H
	DW	01086H
	DW	0808fH
	DW	0308eH
	DW	0e08cH
	DW	0508dH
	DW	04089H
	DW	0f088H
	DW	0208aH
	DW	0908bH
	DW	099H
	DW	0b098H
	DW	0609aH
	DW	0d09bH
	DW	0c09fH
	DW	0709eH
	DW	0a09cH
	DW	0109dH
	DW	08094H
	DW	03095H
	DW	0e097H
	DW	05096H
	DW	04092H
	DW	0f093H
	DW	02091H
	DW	09090H
gft_be	DW	00H
	DW	01c2H
	DW	0384H
	DW	0246H
	DW	0708H
	DW	06caH
	DW	048cH
	DW	054eH
	DW	0e10H
	DW	0fd2H
	DW	0d94H
	DW	0c56H
	DW	0918H
	DW	08daH
	DW	0a9cH
	DW	0b5eH
	DW	01c20H
	DW	01de2H
	DW	01fa4H
	DW	01e66H
	DW	01b28H
	DW	01aeaH
	DW	018acH
	DW	0196eH
	DW	01230H
	DW	013f2H
	DW	011b4H
	DW	01076H
	DW	01538H
	DW	014faH
	DW	016bcH
	DW	0177eH
	DW	03840H
	DW	03982H
	DW	03bc4H
	DW	03a06H
	DW	03f48H
	DW	03e8aH
	DW	03cccH
	DW	03d0eH
	DW	03650H
	DW	03792H
	DW	035d4H
	DW	03416H
	DW	03158H
	DW	0309aH
	DW	032dcH
	DW	0331eH
	DW	02460H
	DW	025a2H
	DW	027e4H
	DW	02626H
	DW	02368H
	DW	022aaH
	DW	020ecH
	DW	0212eH
	DW	02a70H
	DW	02bb2H
	DW	029f4H
	DW	02836H
	DW	02d78H
	DW	02cbaH
	DW	02efcH
	DW	02f3eH
	DW	07080H
	DW	07142H
	DW	07304H
	DW	072c6H
	DW	07788H
	DW	0764aH
	DW	0740cH
	DW	075ceH
	DW	07e90H
	DW	07f52H
	DW	07d14H
	DW	07cd6H
	DW	07998H
	DW	0785aH
	DW	07a1cH
	DW	07bdeH
	DW	06ca0H
	DW	06d62H
	DW	06f24H
	DW	06ee6H
	DW	06ba8H
	DW	06a6aH
	DW	0682cH
	DW	069eeH
	DW	062b0H
	DW	06372H
	DW	06134H
	DW	060f6H
	DW	065b8H
	DW	0647aH
	DW	0663cH
	DW	067feH
	DW	048c0H
	DW	04902H
	DW	04b44H
	DW	04a86H
	DW	04fc8H
	DW	04e0aH
	DW	04c4cH
	DW	04d8eH
	DW	046d0H
	DW	04712H
	DW	04554H
	DW	04496H
	DW	041d8H
	DW	0401aH
	DW	0425cH
	DW	0439eH
	DW	054e0H
	DW	05522H
	DW	05764H
	DW	056a6H
	DW	053e8H
	DW	0522aH
	DW	0506cH
	DW	051aeH
	DW	05af0H
	DW	05b32H
	DW	05974H
	DW	058b6H
	DW	05df8H
	DW	05c3aH
	DW	05e7cH
	DW	05fbeH
	DW	0e100H
	DW	0e0c2H
	DW	0e284H
	DW	0e346H
	DW	0e608H
	DW	0e7caH
	DW	0e58cH
	DW	0e44eH
	DW	0ef10H
	DW	0eed2H
	DW	0ec94H
	DW	0ed56H
	DW	0e818H
	DW	0e9daH
	DW	0eb9cH
	DW	0ea5eH
	DW	0fd20H
	DW	0fce2H
	DW	0fea4H
	DW	0ff66H
	DW	0fa28H
	DW	0fbeaH
	DW	0f9acH
	DW	0f86eH
	DW	0f330H
	DW	0f2f2H
	DW	0f0b4H
	DW	0f176H
	DW	0f438H
	DW	0f5faH
	DW	0f7bcH
	DW	0f67eH
	DW	0d940H
	DW	0d882H
	DW	0dac4H
	DW	0db06H
	DW	0de48H
	DW	0df8aH
	DW	0ddccH
	DW	0dc0eH
	DW	0d750H
	DW	0d692H
	DW	0d4d4H
	DW	0d516H
	DW	0d058H
	DW	0d19aH
	DW	0d3dcH
	DW	0d21eH
	DW	0c560H
	DW	0c4a2H
	DW	0c6e4H
	DW	0c726H
	DW	0c268H
	DW	0c3aaH
	DW	0c1ecH
	DW	0c02eH
	DW	0cb70H
	DW	0cab2H
	DW	0c8f4H
	DW	0c936H
	DW	0cc78H
	DW	0cdbaH
	DW	0cffcH
	DW	0ce3eH
	DW	09180H
	DW	09042H
	DW	09204H
	DW	093c6H
	DW	09688H
	DW	0974aH
	DW	0950cH
	DW	094ceH
	DW	09f90H
	DW	09e52H
	DW	09c14H
	DW	09dd6H
	DW	09898H
	DW	0995aH
	DW	09b1cH
	DW	09adeH
	DW	08da0H
	DW	08c62H
	DW	08e24H
	DW	08fe6H
	DW	08aa8H
	DW	08b6aH
	DW	0892cH
	DW	088eeH
	DW	083b0H
	DW	08272H
	DW	08034H
	DW	081f6H
	DW	084b8H
	DW	0857aH
	DW	0873cH
	DW	086feH
	DW	0a9c0H
	DW	0a802H
	DW	0aa44H
	DW	0ab86H
	DW	0aec8H
	DW	0af0aH
	DW	0ad4cH
	DW	0ac8eH
	DW	0a7d0H
	DW	0a612H
	DW	0a454H
	DW	0a596H
	DW	0a0d8H
	DW	0a11aH
	DW	0a35cH
	DW	0a29eH
	DW	0b5e0H
	DW	0b422H
	DW	0b664H
	DW	0b7a6H
	DW	0b2e8H
	DW	0b32aH
	DW	0b16cH
	DW	0b0aeH
	DW	0bbf0H
	DW	0ba32H
	DW	0b874H
	DW	0b9b6H
	DW	0bcf8H
	DW	0bd3aH
	DW	0bf7cH
	DW	0bebeH
gft_be64 DW	00H
	DW	01b0H
	DW	0360H
	DW	02d0H
	DW	06c0H
	DW	0770H
	DW	05a0H
	DW	0410H
	DW	0d80H
	DW	0c30H
	DW	0ee0H
	DW	0f50H
	DW	0b40H
	DW	0af0H
	DW	0820H
	DW	0990H
	DW	01b00H
	DW	01ab0H
	DW	01860H
	DW	019d0H
	DW	01dc0H
	DW	01c70H
	DW	01ea0H
	DW	01f10H
	DW	01680H
	DW	01730H
	DW	015e0H
	DW	01450H
	DW	01040H
	DW	011f0H
	DW	01320H
	DW	01290H
	DW	03600H
	DW	037b0H
	DW	03560H
	DW	034d0H
	DW	030c0H
	DW	03170H
	DW	033a0H
	DW	03210H
	DW	03b80H
	DW	03a30H
	DW	038e0H
	DW	03950H
	DW	03d40H
	DW	03cf0H
	DW	03e20H
	DW	03f90H
	DW	02d00H
	DW	02cb0H
	DW	02e60H
	DW	02fd0H
	DW	02bc0H
	DW	02a70H
	DW	028a0H
	DW	02910H
	DW	02080H
	DW	02130H
	DW	023e0H
	DW	02250H
	DW	02640H
	DW	027f0H
	DW	02520H
	DW	02490H
	DW	06c00H
	DW	06db0H
	DW	06f60H
	DW	06ed0H
	DW	06ac0H
	DW	06b70H
	DW	069a0H
	DW	06810H
	DW	06180H
	DW	06030H
	DW	062e0H
	DW	06350H
	DW	06740H
	DW	066f0H
	DW	06420H
	DW	06590H
	DW	07700H
	DW	076b0H
	DW	07460H
	DW	075d0H
	DW	071c0H
	DW	07070H
	DW	072a0H
	DW	07310H
	DW	07a80H
	DW	07b30H
	DW	079e0H
	DW	07850H
	DW	07c40H
	DW	07df0H
	DW	07f20H
	DW	07e90H
	DW	05a00H
	DW	05bb0H
	DW	05960H
	DW	058d0H
	DW	05cc0H
	DW	05d70H
	DW	05fa0H
	DW	05e10H
	DW	05780H
	DW	05630H
	DW	054e0H
	DW	05550H
	DW	05140H
	DW	050f0H
	DW	05220H
	DW	05390H
	DW	04100H
	DW	040b0H
	DW	04260H
	DW	043d0H
	DW	047c0H
	DW	04670H
	DW	044a0H
	DW	04510H
	DW	04c80H
	DW	04d30H
	DW	04fe0H
	DW	04e50H
	DW	04a40H
	DW	04bf0H
	DW	04920H
	DW	04890H
	DW	0d800H
	DW	0d9b0H
	DW	0db60H
	DW	0dad0H
	DW	0dec0H
	DW	0df70H
	DW	0dda0H
	DW	0dc10H
	DW	0d580H
	DW	0d430H
	DW	0d6e0H
	DW	0d750H
	DW	0d340H
	DW	0d2f0H
	DW	0d020H
	DW	0d190H
	DW	0c300H
	DW	0c2b0H
	DW	0c060H
	DW	0c1d0H
	DW	0c5c0H
	DW	0c470H
	DW	0c6a0H
	DW	0c710H
	DW	0ce80H
	DW	0cf30H
	DW	0cde0H
	DW	0cc50H
	DW	0c840H
	DW	0c9f0H
	DW	0cb20H
	DW	0ca90H
	DW	0ee00H
	DW	0efb0H
	DW	0ed60H
	DW	0ecd0H
	DW	0e8c0H
	DW	0e970H
	DW	0eba0H
	DW	0ea10H
	DW	0e380H
	DW	0e230H
	DW	0e0e0H
	DW	0e150H
	DW	0e540H
	DW	0e4f0H
	DW	0e620H
	DW	0e790H
	DW	0f500H
	DW	0f4b0H
	DW	0f660H
	DW	0f7d0H
	DW	0f3c0H
	DW	0f270H
	DW	0f0a0H
	DW	0f110H
	DW	0f880H
	DW	0f930H
	DW	0fbe0H
	DW	0fa50H
	DW	0fe40H
	DW	0fff0H
	DW	0fd20H
	DW	0fc90H
	DW	0b400H
	DW	0b5b0H
	DW	0b760H
	DW	0b6d0H
	DW	0b2c0H
	DW	0b370H
	DW	0b1a0H
	DW	0b010H
	DW	0b980H
	DW	0b830H
	DW	0bae0H
	DW	0bb50H
	DW	0bf40H
	DW	0bef0H
	DW	0bc20H
	DW	0bd90H
	DW	0af00H
	DW	0aeb0H
	DW	0ac60H
	DW	0add0H
	DW	0a9c0H
	DW	0a870H
	DW	0aaa0H
	DW	0ab10H
	DW	0a280H
	DW	0a330H
	DW	0a1e0H
	DW	0a050H
	DW	0a440H
	DW	0a5f0H
	DW	0a720H
	DW	0a690H
	DW	08200H
	DW	083b0H
	DW	08160H
	DW	080d0H
	DW	084c0H
	DW	08570H
	DW	087a0H
	DW	08610H
	DW	08f80H
	DW	08e30H
	DW	08ce0H
	DW	08d50H
	DW	08940H
	DW	088f0H
	DW	08a20H
	DW	08b90H
	DW	09900H
	DW	098b0H
	DW	09a60H
	DW	09bd0H
	DW	09fc0H
	DW	09e70H
	DW	09ca0H
	DW	09d10H
	DW	09480H
	DW	09530H
	DW	097e0H
	DW	09650H
	DW	09240H
	DW	093f0H
	DW	09120H
	DW	09090H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\gfmul.c
;	COMDAT SetBit64
_TEXT	SEGMENT
bit$ = 8
a$ = 16
SetBit64 PROC						; COMDAT

; 584  : {

  00000	44 8b c1	 mov	 r8d, ecx

; 585  : 	a[(63 - bit) / 8] |= 0x80 >> ((63 - bit) % 8);

  00003	41 b9 3f 00 00
	00		 mov	 r9d, 63			; 0000003fH
  00009	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0000e	44 2b c9	 sub	 r9d, ecx
  00011	83 c9 ff	 or	 ecx, -1			; ffffffffH
  00014	41 2b c8	 sub	 ecx, r8d
  00017	49 c1 e9 03	 shr	 r9, 3
  0001b	83 e1 07	 and	 ecx, 7
  0001e	d3 f8		 sar	 eax, cl
  00020	41 08 04 11	 or	 BYTE PTR [r9+rdx], al

; 586  : }

  00024	c3		 ret	 0
SetBit64 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT SetBit128
_TEXT	SEGMENT
bit$ = 8
a$ = 16
SetBit128 PROC						; COMDAT

; 579  : {

  00000	44 8b c1	 mov	 r8d, ecx

; 580  : 	a[(127 - bit) / 8] |= 0x80 >> ((127 - bit) % 8);

  00003	41 b9 7f 00 00
	00		 mov	 r9d, 127		; 0000007fH
  00009	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0000e	44 2b c9	 sub	 r9d, ecx
  00011	83 c9 ff	 or	 ecx, -1			; ffffffffH
  00014	41 2b c8	 sub	 ecx, r8d
  00017	49 c1 e9 03	 shr	 r9, 3
  0001b	83 e1 07	 and	 ecx, 7
  0001e	d3 f8		 sar	 eax, cl
  00020	41 08 04 11	 or	 BYTE PTR [r9+rdx], al

; 581  : }

  00024	c3		 ret	 0
SetBit128 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT IsBitSet64
_TEXT	SEGMENT
bit$ = 8
a$ = 16
IsBitSet64 PROC						; COMDAT

; 574  : {

  00000	44 8b c9	 mov	 r9d, ecx

; 575  : 	return a[(63 - bit) / 8] & (0x80 >> ((63 - bit) % 8));

  00003	83 c9 ff	 or	 ecx, -1			; ffffffffH
  00006	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0000b	41 2b c9	 sub	 ecx, r9d
  0000e	83 e1 07	 and	 ecx, 7
  00011	d3 f8		 sar	 eax, cl
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	41 2b c9	 sub	 ecx, r9d
  0001b	48 c1 e9 03	 shr	 rcx, 3
  0001f	0f b6 14 11	 movzx	 edx, BYTE PTR [rcx+rdx]
  00023	23 c2		 and	 eax, edx

; 576  : }

  00025	c3		 ret	 0
IsBitSet64 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT IsBitSet128
_TEXT	SEGMENT
bit$ = 8
a$ = 16
IsBitSet128 PROC					; COMDAT

; 569  : {

  00000	44 8b c9	 mov	 r9d, ecx

; 570  : 	return a[(127 - bit) / 8] & (0x80 >> ((127 - bit) % 8));

  00003	83 c9 ff	 or	 ecx, -1			; ffffffffH
  00006	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0000b	41 2b c9	 sub	 ecx, r9d
  0000e	83 e1 07	 and	 ecx, 7
  00011	d3 f8		 sar	 eax, cl
  00013	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00018	41 2b c9	 sub	 ecx, r9d
  0001b	48 c1 e9 03	 shr	 rcx, 3
  0001f	0f b6 14 11	 movzx	 edx, BYTE PTR [rcx+rdx]
  00023	23 c2		 and	 eax, edx

; 571  : }

  00025	c3		 ret	 0
IsBitSet128 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT mul_lex8_64
_TEXT	SEGMENT
x$ = 8
mul_lex8_64 PROC					; COMDAT

; 354  :     x[1] = (x[1] << 8) | (x[0] >> 24);

  00000	44 8b 09	 mov	 r9d, DWORD PTR [rcx]
  00003	8b 51 04	 mov	 edx, DWORD PTR [rcx+4]
  00006	4c 8b d1	 mov	 r10, rcx
  00009	44 8b c2	 mov	 r8d, edx
  0000c	41 8b c1	 mov	 eax, r9d
  0000f	c1 e2 08	 shl	 edx, 8
  00012	c1 e8 18	 shr	 eax, 24
  00015	41 c1 e8 18	 shr	 r8d, 24

; 355  :     x[0] = (x[0] << 8) ^ gft_le64[t];

  00019	41 c1 e1 08	 shl	 r9d, 8
  0001d	0b c2		 or	 eax, edx
  0001f	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gft_le64
  00029	42 0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+r8*2]
  0002e	41 33 c9	 xor	 ecx, r9d
  00031	41 89 0a	 mov	 DWORD PTR [r10], ecx

; 356  : }

  00034	c3		 ret	 0
mul_lex8_64 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT mul_lex8
_TEXT	SEGMENT
x$ = 8
mul_lex8 PROC						; COMDAT

; 346  :     x[3] = (x[3] << 8) | (x[2] >> 24);

  00000	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  00004	8b 51 0c	 mov	 edx, DWORD PTR [rcx+12]
  00007	4c 8b d1	 mov	 r10, rcx
  0000a	44 8b ca	 mov	 r9d, edx
  0000d	c1 e2 08	 shl	 edx, 8
  00010	41 8b c0	 mov	 eax, r8d
  00013	c1 e8 18	 shr	 eax, 24

; 347  :     x[2] = (x[2] << 8) | (x[1] >> 24);

  00016	41 c1 e0 08	 shl	 r8d, 8
  0001a	41 c1 e9 18	 shr	 r9d, 24
  0001e	0b c2		 or	 eax, edx

; 348  :     x[1] = (x[1] << 8) | (x[0] >> 24);

  00020	41 8b 12	 mov	 edx, DWORD PTR [r10]
  00023	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00026	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00029	8b c1		 mov	 eax, ecx
  0002b	c1 e1 08	 shl	 ecx, 8
  0002e	c1 e8 18	 shr	 eax, 24
  00031	41 0b c0	 or	 eax, r8d
  00034	41 89 42 08	 mov	 DWORD PTR [r10+8], eax
  00038	8b c2		 mov	 eax, edx

; 349  :     x[0] = (x[0] << 8) ^ gft_le[t];

  0003a	c1 e2 08	 shl	 edx, 8
  0003d	c1 e8 18	 shr	 eax, 24
  00040	0b c1		 or	 eax, ecx
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gft_le
  00049	41 89 42 04	 mov	 DWORD PTR [r10+4], eax
  0004d	42 0f b7 0c 49	 movzx	 ecx, WORD PTR [rcx+r9*2]
  00052	33 ca		 xor	 ecx, edx
  00054	41 89 0a	 mov	 DWORD PTR [r10], ecx

; 350  : }

  00057	c3		 ret	 0
mul_lex8 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT xor_block_aligned64
_TEXT	SEGMENT
p$ = 8
q$ = 16
xor_block_aligned64 PROC				; COMDAT

; 173  :     lp32(p)[0] ^= lp32(q)[0], lp32(p)[1] ^= lp32(q)[1];

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	31 01		 xor	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	31 41 04	 xor	 DWORD PTR [rcx+4], eax

; 174  : }

  0000a	c3		 ret	 0
xor_block_aligned64 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT xor_block_aligned
_TEXT	SEGMENT
p$ = 8
q$ = 16
xor_block_aligned PROC					; COMDAT

; 167  :     lp32(p)[0] ^= lp32(q)[0], lp32(p)[1] ^= lp32(q)[1],
; 168  :     lp32(p)[2] ^= lp32(q)[2], lp32(p)[3] ^= lp32(q)[3];

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	31 01		 xor	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	31 41 04	 xor	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	31 41 08	 xor	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	31 41 0c	 xor	 DWORD PTR [rcx+12], eax

; 169  : }

  00016	c3		 ret	 0
xor_block_aligned ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT move_block_aligned64
_TEXT	SEGMENT
p$ = 8
q$ = 16
move_block_aligned64 PROC				; COMDAT

; 162  :     lp32(p)[0] = lp32(q)[0], lp32(p)[1] = lp32(q)[1];

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 163  : }

  0000a	c3		 ret	 0
move_block_aligned64 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT move_block_aligned
_TEXT	SEGMENT
p$ = 8
q$ = 16
move_block_aligned PROC					; COMDAT

; 156  :     lp32(p)[0] = lp32(q)[0], lp32(p)[1] = lp32(q)[1],
; 157  :     lp32(p)[2] = lp32(q)[2], lp32(p)[3] = lp32(q)[3];

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 158  : }

  00016	c3		 ret	 0
move_block_aligned ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT bsw_32
_TEXT	SEGMENT
p$ = 8
n$ = 16
bsw_32	PROC						; COMDAT

; 116  : {   unsigned int i = n;

  00000	48 63 c2	 movsxd	 rax, edx

; 117  :     while(i--)

  00003	85 d2		 test	 edx, edx
  00005	74 28		 je	 SHORT $LN6@bsw_32

; 116  : {   unsigned int i = n;

  00007	4c 8d 04 81	 lea	 r8, QWORD PTR [rcx+rax*4]
$LL2@bsw_32:

; 117  :     while(i--)

  0000b	49 83 e8 04	 sub	 r8, 4

; 118  :         ((mode(32t)*)p)[i] = bswap_32(((mode(32t)*)p)[i]);

  0000f	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00012	8b c8		 mov	 ecx, eax
  00014	c1 c9 08	 ror	 ecx, 8
  00017	81 e1 00 ff 00
	ff		 and	 ecx, -16711936		; ff00ff00H
  0001d	c1 c0 08	 rol	 eax, 8
  00020	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00025	0b c8		 or	 ecx, eax
  00027	83 c2 ff	 add	 edx, -1			; ffffffffH
  0002a	41 89 08	 mov	 DWORD PTR [r8], ecx
  0002d	75 dc		 jne	 SHORT $LL2@bsw_32
$LN6@bsw_32:

; 119  : }

  0002f	f3 c3		 fatret	 0
bsw_32	ENDP
PUBLIC	Gf64MulTab
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf64MulTab DD imagerel $LN39
	DD	imagerel $LN39+404
	DD	imagerel $unwind$Gf64MulTab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf64MulTab DD 020501H
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT Gf64MulTab
_TEXT	SEGMENT
a$ = 8
p$ = 16
ctx$ = 24
Gf64MulTab PROC						; COMDAT

; 727  : {  

$LN39:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 728  : 	/* Deprecated/legacy */
; 729  : 
; 730  : 	unsigned __int32 r[CBLK_LEN8 >> 2];
; 731  : 
; 732  : 	move_block_aligned64(r, ctx->gf_t64[7*2][a[7] & 15]);

  00005	44 0f b6 49 07	 movzx	 r9d, BYTE PTR [rcx+7]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b d1	 mov	 rdx, rcx
  00010	49 8b c1	 mov	 rax, r9

; 733  :     xor_block_aligned64(r,  ctx->gf_t64[7*2+1][a[7] >> 4]);

  00013	49 c1 e9 04	 shr	 r9, 4
  00017	83 e0 0f	 and	 eax, 15
  0001a	45 8b 94 c0 00
	17 00 00	 mov	 r10d, DWORD PTR [r8+rax*8+5888]
  00022	45 8b 9c c0 04
	17 00 00	 mov	 r11d, DWORD PTR [r8+rax*8+5892]
  0002a	47 33 94 c8 80
	17 00 00	 xor	 r10d, DWORD PTR [r8+r9*8+6016]
  00032	47 33 9c c8 84
	17 00 00	 xor	 r11d, DWORD PTR [r8+r9*8+6020]

; 734  : 
; 735  : 	if (*(unsigned __int16 *)a)

  0003a	66 83 39 00	 cmp	 WORD PTR [rcx], 0
  0003e	74 5b		 je	 SHORT $LN15@Gf64MulTab

; 736  : 	{
; 737  : 		xor_8k64(0);

  00040	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 c1 e9 04	 shr	 rcx, 4
  0004a	83 e0 0f	 and	 eax, 15
  0004d	45 33 94 c0 00
	10 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+4096]
  00055	45 33 9c c0 04
	10 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+4100]
  0005d	45 33 94 c8 80
	10 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+4224]
  00065	45 33 9c c8 84
	10 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+4228]

; 738  : 		xor_8k64(1);

  0006d	0f b6 4a 01	 movzx	 ecx, BYTE PTR [rdx+1]
  00071	48 8b c1	 mov	 rax, rcx
  00074	48 c1 e9 04	 shr	 rcx, 4
  00078	83 e0 0f	 and	 eax, 15
  0007b	45 33 94 c0 00
	11 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+4352]
  00083	45 33 9c c0 04
	11 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+4356]
  0008b	45 33 94 c8 80
	11 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+4480]
  00093	45 33 9c c8 84
	11 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+4484]
$LN15@Gf64MulTab:

; 739  : 	}
; 740  : 	if (a[2])

  0009b	8a 42 02	 mov	 al, BYTE PTR [rdx+2]
  0009e	84 c0		 test	 al, al
  000a0	74 2d		 je	 SHORT $LN19@Gf64MulTab

; 741  : 	{
; 742  : 		xor_8k64(2);

  000a2	0f b6 c8	 movzx	 ecx, al
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 c1 e9 04	 shr	 rcx, 4
  000ac	83 e0 0f	 and	 eax, 15
  000af	45 33 94 c0 00
	12 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+4608]
  000b7	45 33 9c c0 04
	12 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+4612]
  000bf	45 33 94 c8 80
	12 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+4736]
  000c7	45 33 9c c8 84
	12 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+4740]
$LN19@Gf64MulTab:

; 743  : 	}
; 744  : 	xor_8k64(3);

  000cf	0f b6 4a 03	 movzx	 ecx, BYTE PTR [rdx+3]
  000d3	48 8b c1	 mov	 rax, rcx
  000d6	48 c1 e9 04	 shr	 rcx, 4
  000da	83 e0 0f	 and	 eax, 15
  000dd	45 33 94 c0 00
	13 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+4864]
  000e5	45 33 9c c0 04
	13 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+4868]
  000ed	45 33 94 c8 80
	13 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+4992]
  000f5	45 33 9c c8 84
	13 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+4996]

; 745  :     xor_8k64(4);

  000fd	0f b6 4a 04	 movzx	 ecx, BYTE PTR [rdx+4]
  00101	48 8b c1	 mov	 rax, rcx
  00104	48 c1 e9 04	 shr	 rcx, 4
  00108	83 e0 0f	 and	 eax, 15
  0010b	45 33 94 c0 00
	14 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+5120]
  00113	45 33 9c c0 04
	14 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+5124]
  0011b	45 33 94 c8 80
	14 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+5248]
  00123	45 33 9c c8 84
	14 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+5252]

; 746  : 	xor_8k64(5);

  0012b	0f b6 4a 05	 movzx	 ecx, BYTE PTR [rdx+5]
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 c1 e9 04	 shr	 rcx, 4
  00136	83 e0 0f	 and	 eax, 15
  00139	45 33 94 c0 00
	15 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+5376]
  00141	45 33 9c c0 04
	15 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+5380]
  00149	45 33 94 c8 80
	15 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+5504]
  00151	45 33 9c c8 84
	15 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+5508]

; 747  : 	xor_8k64(6);

  00159	0f b6 4a 06	 movzx	 ecx, BYTE PTR [rdx+6]
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 c1 e9 04	 shr	 rcx, 4
  00164	83 e0 0f	 and	 eax, 15
  00167	45 33 94 c0 00
	16 00 00	 xor	 r10d, DWORD PTR [r8+rax*8+5632]
  0016f	45 33 9c c0 04
	16 00 00	 xor	 r11d, DWORD PTR [r8+rax*8+5636]
  00177	45 33 94 c8 80
	16 00 00	 xor	 r10d, DWORD PTR [r8+rcx*8+5760]
  0017f	45 33 9c c8 84
	16 00 00	 xor	 r11d, DWORD PTR [r8+rcx*8+5764]

; 748  : 
; 749  :     move_block_aligned64(p, r);

  00187	44 89 13	 mov	 DWORD PTR [rbx], r10d
  0018a	44 89 5b 04	 mov	 DWORD PTR [rbx+4], r11d

; 750  : }

  0018e	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00193	c3		 ret	 0
Gf64MulTab ENDP
_TEXT	ENDS
PUBLIC	Gf128MulBy64Tab
;	COMDAT pdata
pdata	SEGMENT
$pdata$Gf128MulBy64Tab DD imagerel $LN39
	DD	imagerel $LN39+593
	DD	imagerel $unwind$Gf128MulBy64Tab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf128MulBy64Tab DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT Gf128MulBy64Tab
_TEXT	SEGMENT
a$ = 8
p$ = 16
ctx$ = 24
Gf128MulBy64Tab PROC					; COMDAT

; 698  : {  

$LN39:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi

; 699  : 	unsigned __int32 r[CBLK_LEN >> 2];
; 700  : 
; 701  : 	move_block_aligned(r, ctx->gf_t128[7*2][a[7] & 15]);

  0000f	44 0f b6 49 07	 movzx	 r9d, BYTE PTR [rcx+7]
  00014	49 8b d8	 mov	 rbx, r8
  00017	48 8b f2	 mov	 rsi, rdx
  0001a	49 8b c1	 mov	 rax, r9

; 702  :     xor_block_aligned(r,  ctx->gf_t128[7*2+1][a[7] >> 4]);

  0001d	49 c1 e9 04	 shr	 r9, 4
  00021	48 8b f9	 mov	 rdi, rcx
  00024	83 e0 0f	 and	 eax, 15
  00027	49 81 c1 f0 00
	00 00		 add	 r9, 240			; 000000f0H
  0002e	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  00034	49 c1 e1 04	 shl	 r9, 4
  00038	4c 03 cb	 add	 r9, rbx
  0003b	48 c1 e0 04	 shl	 rax, 4
  0003f	49 03 c0	 add	 rax, r8
  00042	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00045	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  00048	44 8b 50 08	 mov	 r10d, DWORD PTR [rax+8]
  0004c	44 8b 58 0c	 mov	 r11d, DWORD PTR [rax+12]
  00050	45 33 01	 xor	 r8d, DWORD PTR [r9]
  00053	41 33 51 04	 xor	 edx, DWORD PTR [r9+4]
  00057	45 33 51 08	 xor	 r10d, DWORD PTR [r9+8]
  0005b	45 33 59 0c	 xor	 r11d, DWORD PTR [r9+12]

; 703  : 
; 704  : 	if (*(unsigned __int16 *)a)

  0005f	66 83 39 00	 cmp	 WORD PTR [rcx], 0
  00063	74 7b		 je	 SHORT $LN15@Gf128MulBy

; 705  : 	{
; 706  : 		xor_8kt64(0);

  00065	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 e9 04	 shr	 rcx, 4
  0006f	83 e0 0f	 and	 eax, 15
  00072	48 83 c1 10	 add	 rcx, 16
  00076	48 c1 e0 04	 shl	 rax, 4
  0007a	48 c1 e1 04	 shl	 rcx, 4
  0007e	48 03 c3	 add	 rax, rbx
  00081	48 03 cb	 add	 rcx, rbx
  00084	44 33 00	 xor	 r8d, DWORD PTR [rax]
  00087	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  0008a	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  0008e	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  00092	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  00095	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  00098	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  0009c	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]

; 707  : 		xor_8kt64(1);

  000a0	0f b6 4f 01	 movzx	 ecx, BYTE PTR [rdi+1]
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 c1 e9 04	 shr	 rcx, 4
  000ab	83 e0 0f	 and	 eax, 15
  000ae	48 83 c1 30	 add	 rcx, 48			; 00000030H
  000b2	48 83 c0 20	 add	 rax, 32			; 00000020H
  000b6	48 c1 e1 04	 shl	 rcx, 4
  000ba	48 03 cb	 add	 rcx, rbx
  000bd	48 c1 e0 04	 shl	 rax, 4
  000c1	48 03 c3	 add	 rax, rbx
  000c4	44 33 00	 xor	 r8d, DWORD PTR [rax]
  000c7	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  000ca	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  000ce	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  000d2	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  000d5	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  000d8	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  000dc	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]
$LN15@Gf128MulBy:

; 708  : 	}
; 709  : 	if (a[2])

  000e0	8a 47 02	 mov	 al, BYTE PTR [rdi+2]
  000e3	84 c0		 test	 al, al
  000e5	74 3f		 je	 SHORT $LN19@Gf128MulBy

; 710  : 	{
; 711  : 		xor_8kt64(2);

  000e7	0f b6 c8	 movzx	 ecx, al
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 c1 e9 04	 shr	 rcx, 4
  000f1	83 e0 0f	 and	 eax, 15
  000f4	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000f8	48 83 c0 40	 add	 rax, 64			; 00000040H
  000fc	48 c1 e1 04	 shl	 rcx, 4
  00100	48 03 cb	 add	 rcx, rbx
  00103	48 c1 e0 04	 shl	 rax, 4
  00107	48 03 c3	 add	 rax, rbx
  0010a	44 33 00	 xor	 r8d, DWORD PTR [rax]
  0010d	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  00110	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  00114	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  00118	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  0011b	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  0011e	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  00122	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]
$LN19@Gf128MulBy:

; 712  : 	}
; 713  : 	xor_8kt64(3);

  00126	0f b6 4f 03	 movzx	 ecx, BYTE PTR [rdi+3]
  0012a	48 8b c1	 mov	 rax, rcx
  0012d	48 c1 e9 04	 shr	 rcx, 4
  00131	83 e0 0f	 and	 eax, 15
  00134	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00138	48 83 c0 60	 add	 rax, 96			; 00000060H
  0013c	48 c1 e1 04	 shl	 rcx, 4
  00140	48 03 cb	 add	 rcx, rbx
  00143	48 c1 e0 04	 shl	 rax, 4
  00147	48 03 c3	 add	 rax, rbx
  0014a	44 33 00	 xor	 r8d, DWORD PTR [rax]
  0014d	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  00150	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  00154	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  00158	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  0015b	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  0015e	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  00162	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]

; 714  :     xor_8kt64(4);

  00166	0f b6 4f 04	 movzx	 ecx, BYTE PTR [rdi+4]
  0016a	48 8b c1	 mov	 rax, rcx
  0016d	48 c1 e9 04	 shr	 rcx, 4
  00171	83 e0 0f	 and	 eax, 15
  00174	48 81 c1 90 00
	00 00		 add	 rcx, 144		; 00000090H
  0017b	48 83 e8 80	 sub	 rax, -128		; ffffffffffffff80H
  0017f	48 c1 e1 04	 shl	 rcx, 4
  00183	48 03 cb	 add	 rcx, rbx
  00186	48 c1 e0 04	 shl	 rax, 4
  0018a	48 03 c3	 add	 rax, rbx
  0018d	44 33 00	 xor	 r8d, DWORD PTR [rax]
  00190	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  00193	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  00197	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  0019b	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  0019e	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  001a1	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  001a5	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]

; 715  : 	xor_8kt64(5);

  001a9	0f b6 4f 05	 movzx	 ecx, BYTE PTR [rdi+5]
  001ad	48 8b c1	 mov	 rax, rcx
  001b0	48 c1 e9 04	 shr	 rcx, 4
  001b4	83 e0 0f	 and	 eax, 15
  001b7	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  001be	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001c4	48 c1 e1 04	 shl	 rcx, 4
  001c8	48 03 cb	 add	 rcx, rbx
  001cb	48 c1 e0 04	 shl	 rax, 4
  001cf	48 03 c3	 add	 rax, rbx
  001d2	44 33 00	 xor	 r8d, DWORD PTR [rax]
  001d5	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  001d8	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  001dc	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  001e0	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  001e3	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  001e6	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  001ea	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]

; 716  : 	xor_8kt64(6);

  001ee	0f b6 4f 06	 movzx	 ecx, BYTE PTR [rdi+6]

; 717  : 
; 718  :     move_block_aligned(p, r);
; 719  : }

  001f2	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  001f7	48 8b c1	 mov	 rax, rcx
  001fa	48 c1 e9 04	 shr	 rcx, 4
  001fe	83 e0 0f	 and	 eax, 15
  00201	48 81 c1 d0 00
	00 00		 add	 rcx, 208		; 000000d0H
  00208	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  0020e	48 c1 e1 04	 shl	 rcx, 4
  00212	48 03 cb	 add	 rcx, rbx
  00215	48 c1 e0 04	 shl	 rax, 4
  00219	48 03 c3	 add	 rax, rbx
  0021c	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00221	44 33 00	 xor	 r8d, DWORD PTR [rax]
  00224	33 50 04	 xor	 edx, DWORD PTR [rax+4]
  00227	44 33 50 08	 xor	 r10d, DWORD PTR [rax+8]
  0022b	44 33 58 0c	 xor	 r11d, DWORD PTR [rax+12]
  0022f	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  00232	33 51 04	 xor	 edx, DWORD PTR [rcx+4]
  00235	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  00239	44 33 59 0c	 xor	 r11d, DWORD PTR [rcx+12]
  0023d	44 89 06	 mov	 DWORD PTR [rsi], r8d
  00240	89 56 04	 mov	 DWORD PTR [rsi+4], edx
  00243	44 89 56 08	 mov	 DWORD PTR [rsi+8], r10d
  00247	44 89 5e 0c	 mov	 DWORD PTR [rsi+12], r11d
  0024b	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  00250	c3		 ret	 0
Gf128MulBy64Tab ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	MirrorBits64
;	COMDAT pdata
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
pdata	SEGMENT
$pdata$MirrorBits64 DD imagerel $LN23
	DD	imagerel $LN23+166
	DD	imagerel $unwind$MirrorBits64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MirrorBits64 DD 021519H
	DD	070021206H
	DD	imagerel __GSHandlerCheck
	DD	08H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\gfmul.c
xdata	ENDS
;	COMDAT MirrorBits64
_TEXT	SEGMENT
t$ = 0
__$ArrayPad$ = 8
a$ = 32
MirrorBits64 PROC					; COMDAT

; 603  : {

$LN23:
  00000	40 57		 push	 rdi
  00002	48 83 ec 10	 sub	 rsp, 16
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 08	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 604  : 	unsigned __int8 t[64 / 8];
; 605  : 	int i;
; 606  : 	memset (t,0,8);

  00015	33 c0		 xor	 eax, eax

; 607  : 	for (i = 0; i < 64; i++)

  00017	33 ff		 xor	 edi, edi
  00019	4c 8b c1	 mov	 r8, rcx
  0001c	44 8d 50 3f	 lea	 r10d, QWORD PTR [rax+63]
  00020	48 89 04 24	 mov	 QWORD PTR t$[rsp], rax
  00024	41 83 cb ff	 or	 r11d, -1		; ffffffffH
$LL9@MirrorBits:

; 608  : 	{
; 609  : 		if (IsBitSet64(i, a))

  00028	41 8b c2	 mov	 eax, r10d
  0002b	41 8b cb	 mov	 ecx, r11d
  0002e	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00033	2b c7		 sub	 eax, edi
  00035	2b cf		 sub	 ecx, edi
  00037	83 e1 07	 and	 ecx, 7
  0003a	44 8b c8	 mov	 r9d, eax
  0003d	48 c1 e8 03	 shr	 rax, 3
  00041	d3 fa		 sar	 edx, cl
  00043	42 84 14 00	 test	 dl, BYTE PTR [rax+r8]
  00047	74 1d		 je	 SHORT $LN8@MirrorBits

; 610  : 			SetBit64 (63 - i, t);

  00049	41 8b d2	 mov	 edx, r10d
  0004c	41 8b cb	 mov	 ecx, r11d
  0004f	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00054	41 2b c9	 sub	 ecx, r9d
  00057	41 2b d1	 sub	 edx, r9d
  0005a	83 e1 07	 and	 ecx, 7
  0005d	48 c1 ea 03	 shr	 rdx, 3
  00061	d3 f8		 sar	 eax, cl
  00063	08 04 14	 or	 BYTE PTR t$[rsp+rdx], al
$LN8@MirrorBits:
  00066	ff c7		 inc	 edi
  00068	83 ff 40	 cmp	 edi, 64			; 00000040H
  0006b	7c bb		 jl	 SHORT $LL9@MirrorBits

; 611  : 	}
; 612  : 	memcpy (a, t, sizeof (t));

  0006d	48 8b 04 24	 mov	 rax, QWORD PTR t$[rsp]

; 613  : 	burn (t,sizeof (t));

  00071	ba 08 00 00 00	 mov	 edx, 8
  00076	48 8d 3c 24	 lea	 rdi, QWORD PTR t$[rsp]
  0007a	49 89 00	 mov	 QWORD PTR [r8], rax
  0007d	33 c0		 xor	 eax, eax
  0007f	48 8b ca	 mov	 rcx, rdx
  00082	f3 aa		 rep stosb
  00084	4c 8d 04 24	 lea	 r8, QWORD PTR t$[rsp]
$LL2@MirrorBits:
  00088	41 88 00	 mov	 BYTE PTR [r8], al
  0008b	49 ff c0	 inc	 r8
  0008e	83 ea 01	 sub	 edx, 1
  00091	75 f5		 jne	 SHORT $LL2@MirrorBits

; 614  : }

  00093	48 8b 4c 24 08	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00098	48 33 cc	 xor	 rcx, rsp
  0009b	e8 00 00 00 00	 call	 __security_check_cookie
  000a0	48 83 c4 10	 add	 rsp, 16
  000a4	5f		 pop	 rdi
  000a5	c3		 ret	 0
MirrorBits64 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	MirrorBits128
;	COMDAT pdata
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
pdata	SEGMENT
$pdata$MirrorBits128 DD imagerel $LN23
	DD	imagerel $LN23+170
	DD	imagerel $unwind$MirrorBits128
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MirrorBits128 DD 021519H
	DD	070023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\gfmul.c
xdata	ENDS
;	COMDAT MirrorBits128
_TEXT	SEGMENT
t$ = 0
__$ArrayPad$ = 16
a$ = 48
MirrorBits128 PROC					; COMDAT

; 589  : {

$LN23:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 10	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 590  : 	unsigned __int8 t[128 / 8];
; 591  : 	int i;
; 592  : 	memset (t,0,16);

  00015	33 c0		 xor	 eax, eax
  00017	4c 8b c1	 mov	 r8, rcx

; 593  : 	for (i = 0; i < 128; i++)

  0001a	33 ff		 xor	 edi, edi
  0001c	44 8d 58 7f	 lea	 r11d, QWORD PTR [rax+127]
  00020	48 89 04 24	 mov	 QWORD PTR t$[rsp], rax
  00024	48 89 44 24 08	 mov	 QWORD PTR t$[rsp+8], rax
  00029	45 8d 53 01	 lea	 r10d, QWORD PTR [r11+1]
$LL9@MirrorBits@2:

; 594  : 	{
; 595  : 		if (IsBitSet128(i, a))

  0002d	83 c9 ff	 or	 ecx, -1			; ffffffffH
  00030	41 8b c3	 mov	 eax, r11d
  00033	41 8b d2	 mov	 edx, r10d
  00036	2b c7		 sub	 eax, edi
  00038	2b cf		 sub	 ecx, edi
  0003a	83 e1 07	 and	 ecx, 7
  0003d	44 8b c8	 mov	 r9d, eax
  00040	48 c1 e8 03	 shr	 rax, 3
  00044	d3 fa		 sar	 edx, cl
  00046	42 84 14 00	 test	 dl, BYTE PTR [rax+r8]
  0004a	74 1b		 je	 SHORT $LN8@MirrorBits@2

; 596  : 			SetBit128 (127 - i, t);

  0004c	83 c9 ff	 or	 ecx, -1			; ffffffffH
  0004f	41 8b d3	 mov	 edx, r11d
  00052	41 8b c2	 mov	 eax, r10d
  00055	41 2b c9	 sub	 ecx, r9d
  00058	41 2b d1	 sub	 edx, r9d
  0005b	83 e1 07	 and	 ecx, 7
  0005e	48 c1 ea 03	 shr	 rdx, 3
  00062	d3 f8		 sar	 eax, cl
  00064	08 04 14	 or	 BYTE PTR t$[rsp+rdx], al
$LN8@MirrorBits@2:
  00067	ff c7		 inc	 edi
  00069	41 3b fa	 cmp	 edi, r10d
  0006c	7c bf		 jl	 SHORT $LL9@MirrorBits@2

; 597  : 	}
; 598  : 	memcpy (a, t, sizeof (t));

  0006e	f3 0f 6f 04 24	 movdqu	 xmm0, XMMWORD PTR t$[rsp]

; 599  : 	burn (t,sizeof (t));

  00073	ba 10 00 00 00	 mov	 edx, 16
  00078	48 8d 3c 24	 lea	 rdi, QWORD PTR t$[rsp]
  0007c	33 c0		 xor	 eax, eax
  0007e	48 8b ca	 mov	 rcx, rdx
  00081	f3 aa		 rep stosb
  00083	f3 41 0f 7f 00	 movdqu	 XMMWORD PTR [r8], xmm0
  00088	4c 8d 04 24	 lea	 r8, QWORD PTR t$[rsp]
$LL2@MirrorBits@2:
  0008c	41 88 00	 mov	 BYTE PTR [r8], al
  0008f	49 ff c0	 inc	 r8
  00092	83 ea 01	 sub	 edx, 1
  00095	75 f5		 jne	 SHORT $LL2@MirrorBits@2

; 600  : }

  00097	48 8b 4c 24 10	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0009c	48 33 cc	 xor	 rcx, rsp
  0009f	e8 00 00 00 00	 call	 __security_check_cookie
  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
MirrorBits128 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT mul_x64
_TEXT	SEGMENT
x$ = 8
mul_x64	PROC						; COMDAT

; 316  : 
; 317  :     bsw_32(x, 2);

  00000	4c 8d 49 08	 lea	 r9, QWORD PTR [rcx+8]
  00004	41 ba 02 00 00
	00		 mov	 r10d, 2
  0000a	4c 8b d9	 mov	 r11, rcx
  0000d	49 8b d1	 mov	 rdx, r9
  00010	45 8b c2	 mov	 r8d, r10d
$LL4@mul_x64:
  00013	48 83 ea 04	 sub	 rdx, 4
  00017	8b 02		 mov	 eax, DWORD PTR [rdx]
  00019	8b c8		 mov	 ecx, eax
  0001b	c1 c9 08	 ror	 ecx, 8
  0001e	81 e1 00 ff 00
	ff		 and	 ecx, -16711936		; ff00ff00H
  00024	c1 c0 08	 rol	 eax, 8
  00027	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0002c	0b c8		 or	 ecx, eax
  0002e	41 83 c0 ff	 add	 r8d, -1			; ffffffffH
  00032	89 0a		 mov	 DWORD PTR [rdx], ecx
  00034	75 dd		 jne	 SHORT $LL4@mul_x64

; 318  : 
; 319  :     /* at this point the filed element bits 0..127 are set out  */
; 320  :     /* as follows in 32-bit words (where the most significant   */
; 321  :     /* (ms) numeric bits are to the left)                       */
; 322  :     /*                                                          */
; 323  :     /*            x[0]      x[1]      x[2]      x[3]            */
; 324  :     /*          ms    ls  ms    ls  ms    ls  ms     ls         */
; 325  :     /* field:   0 ... 31  32 .. 63  64 .. 95  96 .. 127         */
; 326  : 
; 327  :     t = gf_poly64[x[1] & 1];          /* bit 127 of the element   */

  00036	41 8b 4b 04	 mov	 ecx, DWORD PTR [r11+4]

; 328  : 										/* shift bits up by one */
; 329  : 										/* position             */
; 330  :     x[1] = (x[1] >> 1) | (x[0] << 31);  /* if bit 7 is 1 xor in */

  0003a	45 8b 03	 mov	 r8d, DWORD PTR [r11]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gf_poly64
  00044	48 8b c1	 mov	 rax, rcx
  00047	d1 e9		 shr	 ecx, 1
  00049	83 e0 01	 and	 eax, 1
  0004c	8b 14 82	 mov	 edx, DWORD PTR [rdx+rax*4]
  0004f	41 8b c0	 mov	 eax, r8d

; 331  :     x[0] = (x[0] >> 1) ^ t;             /* the field polynomial */

  00052	41 d1 e8	 shr	 r8d, 1
  00055	c1 e0 1f	 shl	 eax, 31
  00058	0b c1		 or	 eax, ecx
  0005a	44 33 c2	 xor	 r8d, edx
  0005d	45 89 03	 mov	 DWORD PTR [r11], r8d
  00060	41 89 43 04	 mov	 DWORD PTR [r11+4], eax

; 332  :     bsw_32(x, 2);

$LL8@mul_x64:
  00064	49 83 e9 04	 sub	 r9, 4
  00068	41 8b 01	 mov	 eax, DWORD PTR [r9]
  0006b	8b c8		 mov	 ecx, eax
  0006d	c1 c9 08	 ror	 ecx, 8
  00070	81 e1 00 ff 00
	ff		 and	 ecx, -16711936		; ff00ff00H
  00076	c1 c0 08	 rol	 eax, 8
  00079	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0007e	0b c8		 or	 ecx, eax
  00080	41 83 c2 ff	 add	 r10d, -1		; ffffffffH
  00084	41 89 09	 mov	 DWORD PTR [r9], ecx
  00087	75 db		 jne	 SHORT $LL8@mul_x64

; 333  : }

  00089	f3 c3		 fatret	 0
mul_x64	ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT mul_x
_TEXT	SEGMENT
x$ = 8
mul_x	PROC						; COMDAT

; 295  : 
; 296  :     bsw_32(x, 4);

  00000	4c 8d 51 10	 lea	 r10, QWORD PTR [rcx+16]
  00004	4c 8b d9	 mov	 r11, rcx
  00007	41 b8 04 00 00
	00		 mov	 r8d, 4
  0000d	49 8b d2	 mov	 rdx, r10
$LL4@mul_x:
  00010	48 83 ea 04	 sub	 rdx, 4
  00014	8b 02		 mov	 eax, DWORD PTR [rdx]
  00016	8b c8		 mov	 ecx, eax
  00018	c1 c9 08	 ror	 ecx, 8
  0001b	81 e1 00 ff 00
	ff		 and	 ecx, -16711936		; ff00ff00H
  00021	c1 c0 08	 rol	 eax, 8
  00024	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00029	0b c8		 or	 ecx, eax
  0002b	41 83 c0 ff	 add	 r8d, -1			; ffffffffH
  0002f	89 0a		 mov	 DWORD PTR [rdx], ecx
  00031	75 dd		 jne	 SHORT $LL4@mul_x

; 297  : 
; 298  :     /* at this point the filed element bits 0..127 are set out  */
; 299  :     /* as follows in 32-bit words (where the most significant   */
; 300  :     /* (ms) numeric bits are to the left)                       */
; 301  :     /*                                                          */
; 302  :     /*            x[0]      x[1]      x[2]      x[3]            */
; 303  :     /*          ms    ls  ms    ls  ms    ls  ms     ls         */
; 304  :     /* field:   0 ... 31  32 .. 63  64 .. 95  96 .. 127         */
; 305  : 
; 306  :     t = gf_poly[x[3] & 1];          /* bit 127 of the element   */

  00033	41 8b 4b 0c	 mov	 ecx, DWORD PTR [r11+12]

; 307  :     x[3] = (x[3] >> 1) | (x[2] << 31);  /* shift bits up by one */

  00037	45 8b 43 08	 mov	 r8d, DWORD PTR [r11+8]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gf_poly
  00042	48 8b c1	 mov	 rax, rcx
  00045	d1 e9		 shr	 ecx, 1
  00047	83 e0 01	 and	 eax, 1
  0004a	44 8b 0c 82	 mov	 r9d, DWORD PTR [rdx+rax*4]

; 308  :     x[2] = (x[2] >> 1) | (x[1] << 31);  /* position             */

  0004e	41 8b 53 04	 mov	 edx, DWORD PTR [r11+4]
  00052	41 8b c0	 mov	 eax, r8d
  00055	c1 e0 1f	 shl	 eax, 31
  00058	41 d1 e8	 shr	 r8d, 1
  0005b	0b c1		 or	 eax, ecx

; 309  :     x[1] = (x[1] >> 1) | (x[0] << 31);  /* if bit 7 is 1 xor in */

  0005d	41 8b 0b	 mov	 ecx, DWORD PTR [r11]
  00060	41 89 43 0c	 mov	 DWORD PTR [r11+12], eax
  00064	8b c2		 mov	 eax, edx
  00066	d1 ea		 shr	 edx, 1
  00068	c1 e0 1f	 shl	 eax, 31
  0006b	41 0b c0	 or	 eax, r8d
  0006e	41 89 43 08	 mov	 DWORD PTR [r11+8], eax
  00072	8b c1		 mov	 eax, ecx

; 310  :     x[0] = (x[0] >> 1) ^ t;             /* the field polynomial */

  00074	d1 e9		 shr	 ecx, 1
  00076	c1 e0 1f	 shl	 eax, 31
  00079	0b c2		 or	 eax, edx
  0007b	41 33 c9	 xor	 ecx, r9d

; 311  :     bsw_32(x, 4);

  0007e	ba 04 00 00 00	 mov	 edx, 4
  00083	41 89 0b	 mov	 DWORD PTR [r11], ecx
  00086	41 89 43 04	 mov	 DWORD PTR [r11+4], eax
$LL8@mul_x:
  0008a	49 83 ea 04	 sub	 r10, 4
  0008e	41 8b 02	 mov	 eax, DWORD PTR [r10]
  00091	8b c8		 mov	 ecx, eax
  00093	c1 c9 08	 ror	 ecx, 8
  00096	81 e1 00 ff 00
	ff		 and	 ecx, -16711936		; ff00ff00H
  0009c	c1 c0 08	 rol	 eax, 8
  0009f	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  000a4	0b c8		 or	 ecx, eax
  000a6	83 c2 ff	 add	 edx, -1			; ffffffffH
  000a9	41 89 0a	 mov	 DWORD PTR [r10], ecx
  000ac	75 dc		 jne	 SHORT $LL8@mul_x

; 312  : }

  000ae	f3 c3		 fatret	 0
mul_x	ENDP
PUBLIC	compile_4k_table64
;	COMDAT pdata
pdata	SEGMENT
$pdata$compile_4k_table64 DD imagerel $LN38
	DD	imagerel $LN38+435
	DD	imagerel $unwind$compile_4k_table64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compile_4k_table64 DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT compile_4k_table64
_TEXT	SEGMENT
a$ = 64
ctx$ = 72
compile_4k_table64 PROC					; COMDAT

; 523  : {   int i, j, k;

$LN38:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	48 8b da	 mov	 rbx, rdx
  0001b	4c 8b e9	 mov	 r13, rcx

; 524  : 
; 525  :     memset(ctx->gf_t4k, 0, sizeof(ctx->gf_t4k));

  0001e	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  00024	48 8b cb	 mov	 rcx, rbx
  00027	33 d2		 xor	 edx, edx
  00029	e8 00 00 00 00	 call	 memset

; 526  :     for(i = 0; i < 2 * CBLK_LEN8; ++i)

  0002e	33 ff		 xor	 edi, edi
  00030	33 ed		 xor	 ebp, ebp
$LL21@compile_4k:

; 527  :     {
; 528  :         if(i == 0)

  00032	85 ff		 test	 edi, edi
  00034	75 76		 jne	 SHORT $LN18@compile_4k

; 529  :         {
; 530  :             memcpy(ctx->gf_t4k[1][8], a, CBLK_LEN8);

  00036	49 8b 45 00	 mov	 rax, QWORD PTR [r13]

; 531  :             for(j = 4; j > 0; j >>= 1)

  0003a	8d 77 04	 lea	 esi, QWORD PTR [rdi+4]
  0003d	48 89 83 80 01
	00 00		 mov	 QWORD PTR [rbx+384], rax
$LL17@compile_4k:

; 532  :             {
; 533  :                 memcpy(ctx->gf_t4k[1][j], ctx->gf_t4k[1][j + j], CBLK_LEN8);

  00044	48 63 d6	 movsxd	 rdx, esi
  00047	48 8d 42 08	 lea	 rax, QWORD PTR [rdx+8]
  0004b	48 8d 4a 10	 lea	 rcx, QWORD PTR [rdx+16]
  0004f	48 c1 e0 05	 shl	 rax, 5
  00053	48 c1 e1 04	 shl	 rcx, 4
  00057	48 8b 04 18	 mov	 rax, QWORD PTR [rax+rbx]
  0005b	48 03 cb	 add	 rcx, rbx
  0005e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 534  :                 mul_x64(ctx->gf_t4k[1][j]);

  00061	e8 00 00 00 00	 call	 mul_x64
  00066	d1 fe		 sar	 esi, 1
  00068	85 f6		 test	 esi, esi
  0006a	7f d8		 jg	 SHORT $LL17@compile_4k

; 535  :             }
; 536  :             memcpy(ctx->gf_t4k[0][8], ctx->gf_t4k[1][1], CBLK_LEN8);

  0006c	48 8b 83 10 01
	00 00		 mov	 rax, QWORD PTR [rbx+272]
  00073	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  0007a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 537  :             mul_x64(ctx->gf_t4k[0][8]);

  0007d	e8 00 00 00 00	 call	 mul_x64

; 538  :             for(j = 4; j > 0; j >>= 1)

  00082	be 04 00 00 00	 mov	 esi, 4
$LL14@compile_4k:

; 539  :             {
; 540  :                 memcpy(ctx->gf_t4k[0][j], ctx->gf_t4k[0][j + j], CBLK_LEN8);

  00087	48 63 d6	 movsxd	 rdx, esi
  0008a	48 8b ca	 mov	 rcx, rdx
  0008d	48 c1 e2 05	 shl	 rdx, 5
  00091	48 8b 04 1a	 mov	 rax, QWORD PTR [rdx+rbx]
  00095	48 c1 e1 04	 shl	 rcx, 4
  00099	48 03 cb	 add	 rcx, rbx
  0009c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 541  :                 mul_x64(ctx->gf_t4k[0][j]);

  0009f	e8 00 00 00 00	 call	 mul_x64
  000a4	d1 fe		 sar	 esi, 1
  000a6	85 f6		 test	 esi, esi
  000a8	7f dd		 jg	 SHORT $LL14@compile_4k

; 542  :             }
; 543  :         }
; 544  :         else if(i > 1)

  000aa	eb 5d		 jmp	 SHORT $LN7@compile_4k
$LN18@compile_4k:
  000ac	83 ff 01	 cmp	 edi, 1
  000af	7e 58		 jle	 SHORT $LN7@compile_4k

; 545  :             for(j = 8; j > 0; j >>= 1)

  000b1	41 ba 08 00 00
	00		 mov	 r10d, 8
$LL9@compile_4k:

; 546  :             {
; 547  :                 memcpy(ctx->gf_t4k[i][j], ctx->gf_t4k[i - 2][j], CBLK_LEN8);

  000b7	49 63 c2	 movsxd	 rax, r10d
  000ba	41 d1 fa	 sar	 r10d, 1
  000bd	4c 8d 0c 28	 lea	 r9, QWORD PTR [rax+rbp]
  000c1	48 8d 44 28 e0	 lea	 rax, QWORD PTR [rax+rbp-32]
  000c6	4d 03 c9	 add	 r9, r9
  000c9	48 03 c0	 add	 rax, rax
  000cc	48 8b 04 c3	 mov	 rax, QWORD PTR [rbx+rax*8]
  000d0	4a 89 04 cb	 mov	 QWORD PTR [rbx+r9*8], rax

; 548  :                 mul_x8_64(ctx->gf_t4k[i][j]);

  000d4	42 8b 4c cb 04	 mov	 ecx, DWORD PTR [rbx+r9*8+4]
  000d9	44 8b c0	 mov	 r8d, eax
  000dc	8b d1		 mov	 edx, ecx
  000de	c1 e1 08	 shl	 ecx, 8
  000e1	c1 e8 18	 shr	 eax, 24
  000e4	0b c1		 or	 eax, ecx
  000e6	c1 ea 18	 shr	 edx, 24
  000e9	41 c1 e0 08	 shl	 r8d, 8
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gft_le64
  000f4	42 89 44 cb 04	 mov	 DWORD PTR [rbx+r9*8+4], eax
  000f9	0f b7 0c 51	 movzx	 ecx, WORD PTR [rcx+rdx*2]
  000fd	41 33 c8	 xor	 ecx, r8d
  00100	42 89 0c cb	 mov	 DWORD PTR [rbx+r9*8], ecx
  00104	45 85 d2	 test	 r10d, r10d
  00107	7f ae		 jg	 SHORT $LL9@compile_4k
$LN7@compile_4k:

; 549  :             }
; 550  : 
; 551  :         for(j = 2; j < 16; j += j)

  00109	4c 63 c7	 movsxd	 r8, edi
  0010c	ba 02 00 00 00	 mov	 edx, 2
  00111	49 8b c0	 mov	 rax, r8
  00114	4c 8b d2	 mov	 r10, rdx
  00117	48 c1 e0 08	 shl	 rax, 8
  0011b	49 c1 e0 04	 shl	 r8, 4
  0011f	4c 8d 64 18 10	 lea	 r12, QWORD PTR [rax+rbx+16]
$LL6@compile_4k:

; 554  :             mode(32t) *pk = ctx->gf_t4k[i][1];
; 555  :             mode(32t) *pl = ctx->gf_t4k[i][j + 1];

  00124	8d 42 01	 lea	 eax, DWORD PTR [rdx+1]
  00127	4d 8d 0c 2a	 lea	 r9, QWORD PTR [r10+rbp]
  0012b	4d 8b dc	 mov	 r11, r12
  0012e	49 c1 e1 04	 shl	 r9, 4
  00132	48 63 c8	 movsxd	 rcx, eax
  00135	49 03 c8	 add	 rcx, r8
  00138	4c 03 cb	 add	 r9, rbx
  0013b	48 c1 e1 04	 shl	 rcx, 4
  0013f	48 03 cb	 add	 rcx, rbx

; 556  : 
; 557  :             for(k = 1; k < j; ++k)

  00142	83 fa 01	 cmp	 edx, 1
  00145	7e 3a		 jle	 SHORT $LN5@compile_4k

; 552  :         {
; 553  :             mode(32t) *pj = ctx->gf_t4k[i][j];

  00147	8d 72 ff	 lea	 esi, DWORD PTR [rdx-1]
$LL3@compile_4k:

; 558  :             {
; 559  :                 *pl++ = pj[0] ^ *pk++;

  0014a	41 8b 03	 mov	 eax, DWORD PTR [r11]

; 560  :                 *pl++ = pj[1] ^ *pk++;
; 561  :                 *pl++ = pj[2] ^ *pk++;
; 562  :                 *pl++ = pj[3] ^ *pk++;

  0014d	49 83 c3 10	 add	 r11, 16
  00151	41 33 01	 xor	 eax, DWORD PTR [r9]
  00154	89 01		 mov	 DWORD PTR [rcx], eax
  00156	41 8b 43 f4	 mov	 eax, DWORD PTR [r11-12]
  0015a	48 83 c1 10	 add	 rcx, 16
  0015e	41 33 41 04	 xor	 eax, DWORD PTR [r9+4]
  00162	89 41 f4	 mov	 DWORD PTR [rcx-12], eax
  00165	41 8b 43 f8	 mov	 eax, DWORD PTR [r11-8]
  00169	41 33 41 08	 xor	 eax, DWORD PTR [r9+8]
  0016d	89 41 f8	 mov	 DWORD PTR [rcx-8], eax
  00170	41 8b 41 0c	 mov	 eax, DWORD PTR [r9+12]
  00174	41 33 43 fc	 xor	 eax, DWORD PTR [r11-4]
  00178	48 83 ee 01	 sub	 rsi, 1
  0017c	89 41 fc	 mov	 DWORD PTR [rcx-4], eax
  0017f	75 c9		 jne	 SHORT $LL3@compile_4k
$LN5@compile_4k:

; 549  :             }
; 550  : 
; 551  :         for(j = 2; j < 16; j += j)

  00181	03 d2		 add	 edx, edx
  00183	4d 03 d2	 add	 r10, r10
  00186	83 fa 10	 cmp	 edx, 16
  00189	7c 99		 jl	 SHORT $LL6@compile_4k
  0018b	ff c7		 inc	 edi
  0018d	48 83 c5 10	 add	 rbp, 16
  00191	83 ff 10	 cmp	 edi, 16
  00194	0f 8c 98 fe ff
	ff		 jl	 $LL21@compile_4k

; 563  :             }
; 564  :         }
; 565  :     }
; 566  : }

  0019a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0019f	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001a4	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001ad	41 5d		 pop	 r13
  001af	41 5c		 pop	 r12
  001b1	5f		 pop	 rdi
  001b2	c3		 ret	 0
compile_4k_table64 ENDP
_TEXT	ENDS
PUBLIC	compile_8k_table
;	COMDAT pdata
pdata	SEGMENT
$pdata$compile_8k_table DD imagerel $LN38
	DD	imagerel $LN38+508
	DD	imagerel $unwind$compile_8k_table
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compile_8k_table DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT compile_8k_table
_TEXT	SEGMENT
a$ = 64
ctx$ = 72
compile_8k_table PROC					; COMDAT

; 476  : {   int i, j, k;

$LN38:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	48 8b da	 mov	 rbx, rdx
  0001b	4c 8b e9	 mov	 r13, rcx

; 477  : 
; 478  :     memset(ctx->gf_t8k, 0, 32 * 16 * 16);

  0001e	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  00024	48 8b cb	 mov	 rcx, rbx
  00027	33 d2		 xor	 edx, edx
  00029	e8 00 00 00 00	 call	 memset

; 479  :     for(i = 0; i < 2 * CBLK_LEN; ++i)

  0002e	33 ff		 xor	 edi, edi
  00030	33 ed		 xor	 ebp, ebp
$LL21@compile_8k:

; 480  :     {
; 481  :         if(i == 0)

  00032	85 ff		 test	 edi, edi
  00034	0f 85 82 00 00
	00		 jne	 $LN18@compile_8k

; 482  :         {
; 483  :             memcpy(ctx->gf_t8k[1][8], a, CBLK_LEN);

  0003a	f3 41 0f 6f 45
	00		 movdqu	 xmm0, XMMWORD PTR [r13]

; 484  :             for(j = 4; j > 0; j >>= 1)

  00040	8d 77 04	 lea	 esi, QWORD PTR [rdi+4]
  00043	f3 0f 7f 83 80
	01 00 00	 movdqu	 XMMWORD PTR [rbx+384], xmm0
$LL17@compile_8k:

; 485  :             {
; 486  :                 memcpy(ctx->gf_t8k[1][j], ctx->gf_t8k[1][j + j], CBLK_LEN);

  0004b	48 63 d6	 movsxd	 rdx, esi
  0004e	48 8d 42 08	 lea	 rax, QWORD PTR [rdx+8]
  00052	48 8d 4a 10	 lea	 rcx, QWORD PTR [rdx+16]
  00056	48 c1 e0 05	 shl	 rax, 5
  0005a	48 c1 e1 04	 shl	 rcx, 4
  0005e	48 03 cb	 add	 rcx, rbx
  00061	f3 0f 6f 04 18	 movdqu	 xmm0, XMMWORD PTR [rax+rbx]
  00066	f3 0f 7f 01	 movdqu	 XMMWORD PTR [rcx], xmm0

; 487  :                 mul_x(ctx->gf_t8k[1][j]);

  0006a	e8 00 00 00 00	 call	 mul_x
  0006f	d1 fe		 sar	 esi, 1
  00071	85 f6		 test	 esi, esi
  00073	7f d6		 jg	 SHORT $LL17@compile_8k

; 488  :             }
; 489  :             memcpy(ctx->gf_t8k[0][8], ctx->gf_t8k[1][1], CBLK_LEN);

  00075	f3 0f 6f 83 10
	01 00 00	 movdqu	 xmm0, XMMWORD PTR [rbx+272]
  0007d	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  00084	f3 0f 7f 01	 movdqu	 XMMWORD PTR [rcx], xmm0

; 490  :             mul_x(ctx->gf_t8k[0][8]);

  00088	e8 00 00 00 00	 call	 mul_x

; 491  :             for(j = 4; j > 0; j >>= 1)

  0008d	be 04 00 00 00	 mov	 esi, 4
$LL14@compile_8k:

; 492  :             {
; 493  :                 memcpy(ctx->gf_t8k[0][j], ctx->gf_t8k[0][j + j], CBLK_LEN);

  00092	48 63 d6	 movsxd	 rdx, esi
  00095	48 8b ca	 mov	 rcx, rdx
  00098	48 c1 e2 05	 shl	 rdx, 5
  0009c	48 c1 e1 04	 shl	 rcx, 4
  000a0	48 03 cb	 add	 rcx, rbx
  000a3	f3 0f 6f 04 1a	 movdqu	 xmm0, XMMWORD PTR [rdx+rbx]
  000a8	f3 0f 7f 01	 movdqu	 XMMWORD PTR [rcx], xmm0

; 494  :                 mul_x(ctx->gf_t8k[0][j]);

  000ac	e8 00 00 00 00	 call	 mul_x
  000b1	d1 fe		 sar	 esi, 1
  000b3	85 f6		 test	 esi, esi
  000b5	7f db		 jg	 SHORT $LL14@compile_8k

; 495  :             }
; 496  :         }
; 497  :         else if(i > 1)

  000b7	e9 94 00 00 00	 jmp	 $LN7@compile_8k
$LN18@compile_8k:
  000bc	83 ff 01	 cmp	 edi, 1
  000bf	0f 8e 8b 00 00
	00		 jle	 $LN7@compile_8k

; 498  :             for(j = 8; j > 0; j >>= 1)

  000c5	41 ba 08 00 00
	00		 mov	 r10d, 8
$LL9@compile_8k:

; 499  :             {
; 500  :                 memcpy(ctx->gf_t8k[i][j], ctx->gf_t8k[i - 2][j], CBLK_LEN);

  000cb	49 63 c2	 movsxd	 rax, r10d
  000ce	41 d1 fa	 sar	 r10d, 1
  000d1	4c 8d 0c 28	 lea	 r9, QWORD PTR [rax+rbp]
  000d5	48 8d 44 28 e0	 lea	 rax, QWORD PTR [rax+rbp-32]
  000da	48 03 c0	 add	 rax, rax
  000dd	4d 03 c9	 add	 r9, r9
  000e0	f3 0f 6f 04 c3	 movdqu	 xmm0, XMMWORD PTR [rbx+rax*8]
  000e5	f3 42 0f 7f 04
	cb		 movdqu	 XMMWORD PTR [rbx+r9*8], xmm0

; 501  :                 mul_x8(ctx->gf_t8k[i][j]);

  000eb	42 8b 4c cb 0c	 mov	 ecx, DWORD PTR [rbx+r9*8+12]
  000f0	42 8b 54 cb 08	 mov	 edx, DWORD PTR [rbx+r9*8+8]
  000f5	44 8b c1	 mov	 r8d, ecx
  000f8	c1 e1 08	 shl	 ecx, 8
  000fb	8b c2		 mov	 eax, edx
  000fd	c1 e8 18	 shr	 eax, 24
  00100	c1 e2 08	 shl	 edx, 8
  00103	41 c1 e8 18	 shr	 r8d, 24
  00107	0b c1		 or	 eax, ecx
  00109	42 8b 4c cb 04	 mov	 ecx, DWORD PTR [rbx+r9*8+4]
  0010e	42 89 44 cb 0c	 mov	 DWORD PTR [rbx+r9*8+12], eax
  00113	8b c1		 mov	 eax, ecx
  00115	c1 e1 08	 shl	 ecx, 8
  00118	c1 e8 18	 shr	 eax, 24
  0011b	0b c2		 or	 eax, edx
  0011d	42 8b 14 cb	 mov	 edx, DWORD PTR [rbx+r9*8]
  00121	42 89 44 cb 08	 mov	 DWORD PTR [rbx+r9*8+8], eax
  00126	8b c2		 mov	 eax, edx
  00128	c1 e2 08	 shl	 edx, 8
  0012b	c1 e8 18	 shr	 eax, 24
  0012e	0b c1		 or	 eax, ecx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gft_le
  00137	42 89 44 cb 04	 mov	 DWORD PTR [rbx+r9*8+4], eax
  0013c	42 0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+r8*2]
  00141	33 ca		 xor	 ecx, edx
  00143	42 89 0c cb	 mov	 DWORD PTR [rbx+r9*8], ecx
  00147	45 85 d2	 test	 r10d, r10d
  0014a	0f 8f 7b ff ff
	ff		 jg	 $LL9@compile_8k
$LN7@compile_8k:

; 502  :             }
; 503  : 
; 504  :         for(j = 2; j < 16; j += j)

  00150	4c 63 d7	 movsxd	 r10, edi
  00153	41 b8 02 00 00
	00		 mov	 r8d, 2
  00159	49 8b c2	 mov	 rax, r10
  0015c	4d 8b d8	 mov	 r11, r8
  0015f	48 c1 e0 08	 shl	 rax, 8
  00163	49 c1 e2 04	 shl	 r10, 4
  00167	4c 8d 64 18 10	 lea	 r12, QWORD PTR [rax+rbx+16]
$LL6@compile_8k:

; 507  :             mode(32t) *pk = ctx->gf_t8k[i][1];
; 508  :             mode(32t) *pl = ctx->gf_t8k[i][j + 1];

  0016c	41 8d 40 01	 lea	 eax, DWORD PTR [r8+1]
  00170	4d 8d 0c 2b	 lea	 r9, QWORD PTR [r11+rbp]
  00174	49 8b d4	 mov	 rdx, r12
  00177	49 c1 e1 04	 shl	 r9, 4
  0017b	48 63 c8	 movsxd	 rcx, eax
  0017e	49 03 ca	 add	 rcx, r10
  00181	4c 03 cb	 add	 r9, rbx
  00184	48 c1 e1 04	 shl	 rcx, 4
  00188	48 03 cb	 add	 rcx, rbx

; 509  : 
; 510  :             for(k = 1; k < j; ++k)

  0018b	41 83 f8 01	 cmp	 r8d, 1
  0018f	7e 37		 jle	 SHORT $LN5@compile_8k

; 505  :         {
; 506  :             mode(32t) *pj = ctx->gf_t8k[i][j];

  00191	41 8d 70 ff	 lea	 esi, DWORD PTR [r8-1]
$LL3@compile_8k:

; 511  :             {
; 512  :                 *pl++ = pj[0] ^ *pk++;

  00195	8b 02		 mov	 eax, DWORD PTR [rdx]

; 513  :                 *pl++ = pj[1] ^ *pk++;
; 514  :                 *pl++ = pj[2] ^ *pk++;
; 515  :                 *pl++ = pj[3] ^ *pk++;

  00197	48 83 c2 10	 add	 rdx, 16
  0019b	41 33 01	 xor	 eax, DWORD PTR [r9]
  0019e	89 01		 mov	 DWORD PTR [rcx], eax
  001a0	8b 42 f4	 mov	 eax, DWORD PTR [rdx-12]
  001a3	48 83 c1 10	 add	 rcx, 16
  001a7	41 33 41 04	 xor	 eax, DWORD PTR [r9+4]
  001ab	89 41 f4	 mov	 DWORD PTR [rcx-12], eax
  001ae	8b 42 f8	 mov	 eax, DWORD PTR [rdx-8]
  001b1	41 33 41 08	 xor	 eax, DWORD PTR [r9+8]
  001b5	89 41 f8	 mov	 DWORD PTR [rcx-8], eax
  001b8	8b 42 fc	 mov	 eax, DWORD PTR [rdx-4]
  001bb	41 33 41 0c	 xor	 eax, DWORD PTR [r9+12]
  001bf	48 83 ee 01	 sub	 rsi, 1
  001c3	89 41 fc	 mov	 DWORD PTR [rcx-4], eax
  001c6	75 cd		 jne	 SHORT $LL3@compile_8k
$LN5@compile_8k:

; 502  :             }
; 503  : 
; 504  :         for(j = 2; j < 16; j += j)

  001c8	45 03 c0	 add	 r8d, r8d
  001cb	4d 03 db	 add	 r11, r11
  001ce	41 83 f8 10	 cmp	 r8d, 16
  001d2	7c 98		 jl	 SHORT $LL6@compile_8k
  001d4	ff c7		 inc	 edi
  001d6	48 83 c5 10	 add	 rbp, 16
  001da	83 ff 20	 cmp	 edi, 32			; 00000020H
  001dd	0f 8c 4f fe ff
	ff		 jl	 $LL21@compile_8k

; 516  :             }
; 517  :         }
; 518  :     }
; 519  : }

  001e3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001e8	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001ed	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001f6	41 5d		 pop	 r13
  001f8	41 5c		 pop	 r12
  001fa	5f		 pop	 rdi
  001fb	c3		 ret	 0
compile_8k_table ENDP
PUBLIC	__$ArrayPad$
PUBLIC	Gf64TabInit
;	COMDAT pdata
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
pdata	SEGMENT
$pdata$Gf64TabInit DD imagerel $LN34
	DD	imagerel $LN34+353
	DD	imagerel $unwind$Gf64TabInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf64TabInit DD 0a2319H
	DD	0123414H
	DD	0f0107214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	030H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\gfmul.c
xdata	ENDS
;	COMDAT Gf64TabInit
_TEXT	SEGMENT
ctx$GSCopy$1$ = 32
am$ = 40
__$ArrayPad$ = 48
a$ = 128
ctx$ = 136
Gf64TabInit PROC					; COMDAT

; 655  : {

$LN34:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00023	48 89 54 24 20	 mov	 QWORD PTR ctx$GSCopy$1$[rsp], rdx
  00028	48 8b f9	 mov	 rdi, rcx

; 656  : 	/* Deprecated/legacy */
; 657  : 
; 658  : 	GfCtx4k64 *ctx4k;
; 659  : 	unsigned __int8 am[8];
; 660  : 	int i, j;
; 661  : 
; 662  : 	ctx4k = (GfCtx4k64 *) TCalloc (sizeof (GfCtx4k64));

  0002b	41 b8 54 43 4d
	4d		 mov	 r8d, 1296909140		; 4d4d4354H
  00031	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00036	33 c9		 xor	 ecx, ecx
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  0003e	48 8b f0	 mov	 rsi, rax

; 663  : 	if (!ctx4k)

  00041	48 85 c0	 test	 rax, rax
  00044	0f 84 f2 00 00
	00		 je	 $LN18@Gf64TabIni
$LN17@Gf64TabIni:

; 664  : 		return FALSE;
; 665  : 
; 666  : 	memcpy (am, a, 8);

  0004a	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 667  : 	MirrorBits64 (am);

  0004d	48 8d 4c 24 28	 lea	 rcx, QWORD PTR am$[rsp]
  00052	48 89 44 24 28	 mov	 QWORD PTR am$[rsp], rax
  00057	e8 00 00 00 00	 call	 MirrorBits64

; 668  :     compile_4k_table64 (am, ctx4k);

  0005c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR am$[rsp]
  00061	48 8b d6	 mov	 rdx, rsi
  00064	e8 00 00 00 00	 call	 compile_4k_table64
  00069	48 8b 5c 24 20	 mov	 rbx, QWORD PTR ctx$GSCopy$1$[rsp]
  0006e	bd 00 02 00 00	 mov	 ebp, 512		; 00000200H
  00073	4c 8b e5	 mov	 r12, rbp
  00076	48 8d be 00 0f
	00 00		 lea	 rdi, QWORD PTR [rsi+3840]
  0007d	41 bd 10 00 00
	00		 mov	 r13d, 16
$LL16@Gf64TabIni:

; 669  : 
; 670  : 	/* Convert LSB-first table to MSB-first */
; 671  : 	for (i = 0; i < 16; i++) 
; 672  : 	{
; 673  : 		for (j = 0; j < 16; j++) 

  00083	45 33 f6	 xor	 r14d, r14d
  00086	4c 8b ff	 mov	 r15, rdi
$LL13@Gf64TabIni:

; 674  : 		{
; 675  : 			int jm = 0;
; 676  : 			jm |= (j & 0x1) << 3;
; 677  : 			jm |= (j & 0x2) << 1;
; 678  : 			jm |= (j & 0x4) >> 1;
; 679  : 			jm |= (j & 0x8) >> 3;

  00089	41 8b d6	 mov	 edx, r14d
  0008c	41 8b c6	 mov	 eax, r14d
  0008f	41 8b ce	 mov	 ecx, r14d
  00092	c1 fa 02	 sar	 edx, 2
  00095	83 e0 04	 and	 eax, 4
  00098	83 e1 01	 and	 ecx, 1
  0009b	83 e2 02	 and	 edx, 2
  0009e	c1 e1 02	 shl	 ecx, 2
  000a1	0b d0		 or	 edx, eax
  000a3	41 8b c6	 mov	 eax, r14d
  000a6	83 e0 02	 and	 eax, 2
  000a9	d1 fa		 sar	 edx, 1
  000ab	0b c8		 or	 ecx, eax

; 680  : 
; 681  : 			memcpy (&ctx->gf_t64[i][jm], (unsigned char *)&ctx4k->gf_t4k[15-i][j], 8);

  000ad	49 8b 07	 mov	 rax, QWORD PTR [r15]
  000b0	03 c9		 add	 ecx, ecx
  000b2	0b d1		 or	 edx, ecx
  000b4	48 63 d2	 movsxd	 rdx, edx
  000b7	48 8d 0c 2a	 lea	 rcx, QWORD PTR [rdx+rbp]
  000bb	48 89 04 cb	 mov	 QWORD PTR [rbx+rcx*8], rax

; 682  : 			MirrorBits64 ((unsigned char *)&ctx->gf_t64[i][jm]);

  000bf	49 8d 04 14	 lea	 rax, QWORD PTR [r12+rdx]
  000c3	48 8d 0c c3	 lea	 rcx, QWORD PTR [rbx+rax*8]
  000c7	e8 00 00 00 00	 call	 MirrorBits64
  000cc	41 ff c6	 inc	 r14d
  000cf	49 83 c7 10	 add	 r15, 16
  000d3	41 83 fe 10	 cmp	 r14d, 16
  000d7	7c b0		 jl	 SHORT $LL13@Gf64TabIni
  000d9	49 83 c4 10	 add	 r12, 16
  000dd	48 83 c5 10	 add	 rbp, 16
  000e1	48 81 ef 00 01
	00 00		 sub	 rdi, 256		; 00000100H
  000e8	49 83 ed 01	 sub	 r13, 1
  000ec	75 95		 jne	 SHORT $LL16@Gf64TabIni

; 683  : 		}
; 684  : 	}
; 685  : 
; 686  : 	burn (ctx4k,sizeof (*ctx4k));

  000ee	bb 00 10 00 00	 mov	 ebx, 4096		; 00001000H
  000f3	48 8b fe	 mov	 rdi, rsi
  000f6	33 c0		 xor	 eax, eax
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	48 8b d6	 mov	 rdx, rsi
  000fe	f3 aa		 rep stosb
$LL7@Gf64TabIni:
  00100	88 02		 mov	 BYTE PTR [rdx], al
  00102	48 ff c2	 inc	 rdx
  00105	83 eb 01	 sub	 ebx, 1
  00108	75 f6		 jne	 SHORT $LL7@Gf64TabIni

; 687  : 	burn (am, sizeof (am));

  0010a	44 8d 43 08	 lea	 r8d, QWORD PTR [rbx+8]
  0010e	48 8d 7c 24 28	 lea	 rdi, QWORD PTR am$[rsp]
  00113	4c 8d 4c 24 28	 lea	 r9, QWORD PTR am$[rsp]
  00118	49 8b c8	 mov	 rcx, r8
  0011b	f3 aa		 rep stosb
$LL2@Gf64TabIni:
  0011d	41 88 01	 mov	 BYTE PTR [r9], al
  00120	49 ff c1	 inc	 r9
  00123	41 83 e8 01	 sub	 r8d, 1
  00127	75 f4		 jne	 SHORT $LL2@Gf64TabIni

; 688  : 	TCfree (ctx4k);

  00129	ba 54 43 4d 4d	 mov	 edx, 1296909140		; 4d4d4354H
  0012e	48 8b ce	 mov	 rcx, rsi
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 689  : 	return TRUE;

  00137	b8 01 00 00 00	 mov	 eax, 1
$LN18@Gf64TabIni:

; 690  : }

  0013c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00141	48 33 cc	 xor	 rcx, rsp
  00144	e8 00 00 00 00	 call	 __security_check_cookie
  00149	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  00151	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00155	41 5f		 pop	 r15
  00157	41 5e		 pop	 r14
  00159	41 5d		 pop	 r13
  0015b	41 5c		 pop	 r12
  0015d	5f		 pop	 rdi
  0015e	5e		 pop	 rsi
  0015f	5d		 pop	 rbp
  00160	c3		 ret	 0
Gf64TabInit ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	Gf128Tab64Init
;	COMDAT pdata
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
pdata	SEGMENT
$pdata$Gf128Tab64Init DD imagerel $LN34
	DD	imagerel $LN34+363
	DD	imagerel $unwind$Gf128Tab64Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Gf128Tab64Init DD 0a2319H
	DD	0143414H
	DD	0f0109214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	040H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\gfmul.c
xdata	ENDS
;	COMDAT Gf128Tab64Init
_TEXT	SEGMENT
ctx8k$1$ = 32
ctx$GSCopy$1$ = 40
am$ = 48
__$ArrayPad$ = 64
a$ = 144
ctx$ = 152
Gf128Tab64Init PROC					; COMDAT

; 619  : {

$LN34:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00023	48 89 54 24 28	 mov	 QWORD PTR ctx$GSCopy$1$[rsp], rdx
  00028	48 8b f9	 mov	 rdi, rcx

; 620  : 	GfCtx8k *ctx8k;
; 621  : 	unsigned __int8 am[16];
; 622  : 	int i, j;
; 623  : 
; 624  : 	ctx8k = (GfCtx8k *) TCalloc (sizeof (GfCtx8k));

  0002b	41 b8 54 43 4d
	4d		 mov	 r8d, 1296909140		; 4d4d4354H
  00031	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  00036	33 c9		 xor	 ecx, ecx
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  0003e	48 8b f0	 mov	 rsi, rax
  00041	48 89 44 24 20	 mov	 QWORD PTR ctx8k$1$[rsp], rax

; 625  : 	if (!ctx8k)

  00046	48 85 c0	 test	 rax, rax
  00049	0f 84 f7 00 00
	00		 je	 $LN18@Gf128Tab64
$LN17@Gf128Tab64:

; 626  : 		return FALSE;
; 627  : 
; 628  : 	memcpy (am, a, 16);

  0004f	f3 0f 6f 07	 movdqu	 xmm0, XMMWORD PTR [rdi]

; 629  : 	MirrorBits128 (am);

  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR am$[rsp]
  00058	f3 0f 7f 44 24
	30		 movdqu	 XMMWORD PTR am$[rsp], xmm0
  0005e	e8 00 00 00 00	 call	 MirrorBits128

; 630  :     compile_8k_table (am, ctx8k);

  00063	48 8d 4c 24 30	 lea	 rcx, QWORD PTR am$[rsp]
  00068	48 8b d6	 mov	 rdx, rsi
  0006b	e8 00 00 00 00	 call	 compile_8k_table
  00070	45 33 e4	 xor	 r12d, r12d
  00073	33 ff		 xor	 edi, edi
  00075	4c 8d ae 00 0f
	00 00		 lea	 r13, QWORD PTR [rsi+3840]
  0007c	48 8b 74 24 28	 mov	 rsi, QWORD PTR ctx$GSCopy$1$[rsp]
  00081	8d 5f 10	 lea	 ebx, QWORD PTR [rdi+16]
$LL16@Gf128Tab64:

; 631  : 
; 632  : 	/* Convert 8k LSB-first table to 4k MSB-first */
; 633  : 	for (i = 16; i < 32; i++) 

  00084	4d 63 f4	 movsxd	 r14, r12d

; 634  : 	{
; 635  : 		for (j = 0; j < 16; j++) 

  00087	45 33 ff	 xor	 r15d, r15d
  0008a	49 8b ed	 mov	 rbp, r13
  0008d	49 c1 e6 04	 shl	 r14, 4
$LL13@Gf128Tab64:

; 636  : 		{
; 637  : 			int jm = 0;
; 638  : 			jm |= (j & 0x1) << 3;
; 639  : 			jm |= (j & 0x2) << 1;
; 640  : 			jm |= (j & 0x4) >> 1;
; 641  : 			jm |= (j & 0x8) >> 3;
; 642  : 
; 643  : 			memcpy (&ctx->gf_t128[i-16][jm], (unsigned char *)&ctx8k->gf_t8k[31-i][j], 16);

  00091	f3 0f 6f 45 00	 movdqu	 xmm0, XMMWORD PTR [rbp]
  00096	41 8b d7	 mov	 edx, r15d
  00099	41 8b c7	 mov	 eax, r15d
  0009c	83 e0 04	 and	 eax, 4
  0009f	c1 fa 02	 sar	 edx, 2
  000a2	41 8b cf	 mov	 ecx, r15d
  000a5	83 e1 01	 and	 ecx, 1
  000a8	83 e2 02	 and	 edx, 2
  000ab	0b d0		 or	 edx, eax
  000ad	c1 e1 02	 shl	 ecx, 2
  000b0	41 8b c7	 mov	 eax, r15d
  000b3	83 e0 02	 and	 eax, 2
  000b6	d1 fa		 sar	 edx, 1
  000b8	0b c8		 or	 ecx, eax
  000ba	03 c9		 add	 ecx, ecx
  000bc	0b d1		 or	 edx, ecx
  000be	48 63 ca	 movsxd	 rcx, edx
  000c1	48 8d 04 0f	 lea	 rax, QWORD PTR [rdi+rcx]

; 644  : 			MirrorBits128 ((unsigned char *)&ctx->gf_t128[i-16][jm]);

  000c5	49 03 ce	 add	 rcx, r14
  000c8	48 c1 e1 04	 shl	 rcx, 4
  000cc	48 03 c0	 add	 rax, rax
  000cf	48 03 ce	 add	 rcx, rsi
  000d2	f3 0f 7f 04 c6	 movdqu	 XMMWORD PTR [rsi+rax*8], xmm0
  000d7	e8 00 00 00 00	 call	 MirrorBits128
  000dc	41 ff c7	 inc	 r15d
  000df	48 03 eb	 add	 rbp, rbx
  000e2	44 3b fb	 cmp	 r15d, ebx
  000e5	7c aa		 jl	 SHORT $LL13@Gf128Tab64
  000e7	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  000ec	48 03 fb	 add	 rdi, rbx
  000ef	41 ff c4	 inc	 r12d
  000f2	4c 2b e8	 sub	 r13, rax
  000f5	48 3b f8	 cmp	 rdi, rax
  000f8	7c 8a		 jl	 SHORT $LL16@Gf128Tab64

; 645  : 		}
; 646  : 	}
; 647  : 
; 648  : 	burn (ctx8k ,sizeof (*ctx8k));

  000fa	48 8b 74 24 20	 mov	 rsi, QWORD PTR ctx8k$1$[rsp]
  000ff	bd 00 20 00 00	 mov	 ebp, 8192		; 00002000H
  00104	33 c0		 xor	 eax, eax
  00106	48 8b fe	 mov	 rdi, rsi
  00109	48 8b cd	 mov	 rcx, rbp
  0010c	48 8b d6	 mov	 rdx, rsi
  0010f	f3 aa		 rep stosb
$LL7@Gf128Tab64:
  00111	88 02		 mov	 BYTE PTR [rdx], al
  00113	48 ff c2	 inc	 rdx
  00116	83 ed 01	 sub	 ebp, 1
  00119	75 f6		 jne	 SHORT $LL7@Gf128Tab64

; 649  : 	burn (am, sizeof (am));

  0011b	48 8d 7c 24 30	 lea	 rdi, QWORD PTR am$[rsp]
  00120	48 8b cb	 mov	 rcx, rbx
  00123	4c 8d 44 24 30	 lea	 r8, QWORD PTR am$[rsp]
  00128	f3 aa		 rep stosb
$LL2@Gf128Tab64:
  0012a	41 88 00	 mov	 BYTE PTR [r8], al
  0012d	49 ff c0	 inc	 r8
  00130	83 eb 01	 sub	 ebx, 1
  00133	75 f5		 jne	 SHORT $LL2@Gf128Tab64

; 650  : 	TCfree (ctx8k);

  00135	ba 54 43 4d 4d	 mov	 edx, 1296909140		; 4d4d4354H
  0013a	48 8b ce	 mov	 rcx, rsi
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 651  : 	return TRUE;

  00143	8d 43 01	 lea	 eax, QWORD PTR [rbx+1]
$LN18@Gf128Tab64:

; 652  : }

  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014b	48 33 cc	 xor	 rcx, rsp
  0014e	e8 00 00 00 00	 call	 __security_check_cookie
  00153	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  0015b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0015f	41 5f		 pop	 r15
  00161	41 5e		 pop	 r14
  00163	41 5d		 pop	 r13
  00165	41 5c		 pop	 r12
  00167	5f		 pop	 rdi
  00168	5e		 pop	 rsi
  00169	5d		 pop	 rbp
  0016a	c3		 ret	 0
Gf128Tab64Init ENDP
END
