; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Common\Wipe.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\wipe.c
;	COMDAT _Wipe1PseudoRandom
_TEXT	SEGMENT
_Wipe1PseudoRandom PROC					; COMDAT

; 15   : 	return FALSE;

  00000	33 c0		 xor	 eax, eax

; 16   : }

  00002	c3		 ret	 0
_Wipe1PseudoRandom ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Wipe3Dod5220
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_Wipe3Dod5220 PROC					; COMDAT
; _pass$ = eax
; _size$ = ecx

; 24   : 	byte wipeChar;
; 25   : 
; 26   : 	switch (pass)

  00000	83 e8 01	 sub	 eax, 1
  00003	74 0c		 je	 SHORT $LN3@Wipe3Dod52
  00005	83 e8 01	 sub	 eax, 1
  00008	74 03		 je	 SHORT $LN2@Wipe3Dod52

; 35   : 
; 36   : 	default:
; 37   : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 42   : }

  0000c	c3		 ret	 0
$LN2@Wipe3Dod52:

; 30   : 		break;
; 31   : 
; 32   : 	case 2:
; 33   : 		wipeChar = 0xff;

  0000d	0c ff		 or	 al, 255			; 000000ffH

; 34   : 		break;

  0000f	eb 02		 jmp	 SHORT $LN4@Wipe3Dod52
$LN3@Wipe3Dod52:

; 27   : 	{
; 28   : 	case 1:
; 29   : 		wipeChar = 0;

  00011	32 c0		 xor	 al, al
$LN4@Wipe3Dod52:

; 38   : 	}
; 39   : 
; 40   : 	memset (buffer, wipeChar, size);

  00013	0f b6 d0	 movzx	 edx, al
  00016	8b 44 24 04	 mov	 eax, DWORD PTR _buffer$[esp-4]
  0001a	51		 push	 ecx
  0001b	52		 push	 edx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	return TRUE;

  00025	b8 01 00 00 00	 mov	 eax, 1

; 42   : }

  0002a	c3		 ret	 0
_Wipe3Dod5220 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Wipe7Dod5220
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_Wipe7Dod5220 PROC					; COMDAT
; _pass$ = eax
; _randChars$ = ecx

; 47   : 	byte wipeChar;
; 48   : 
; 49   : 	switch (pass)

  00000	48		 dec	 eax
  00001	83 f8 05	 cmp	 eax, 5
  00004	77 3a		 ja	 SHORT $LN1@Wipe7Dod52
  00006	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@Wipe7Dod52[eax*4]
$LN6@Wipe7Dod52:

; 50   : 	{
; 51   : 	case 1:
; 52   : 		wipeChar = randChars[0];

  0000d	8a 01		 mov	 al, BYTE PTR [ecx]

; 53   : 		break;

  0000f	eb 13		 jmp	 SHORT $LN7@Wipe7Dod52
$LN5@Wipe7Dod52:

; 54   : 
; 55   : 	case 2:
; 56   : 		wipeChar = ~randChars[0];

  00011	8a 01		 mov	 al, BYTE PTR [ecx]

; 57   : 		break;

  00013	eb 0d		 jmp	 SHORT $LN11@Wipe7Dod52
$LN4@Wipe7Dod52:

; 58   : 
; 59   : 	case 4:
; 60   : 		wipeChar = randChars[1];

  00015	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 61   : 		break;

  00018	eb 0a		 jmp	 SHORT $LN7@Wipe7Dod52
$LN3@Wipe7Dod52:

; 62   : 
; 63   : 	case 5:
; 64   : 		wipeChar = randChars[2];

  0001a	8a 41 02	 mov	 al, BYTE PTR [ecx+2]

; 65   : 		break;

  0001d	eb 05		 jmp	 SHORT $LN7@Wipe7Dod52
$LN2@Wipe7Dod52:

; 66   : 
; 67   : 	case 6:
; 68   : 		wipeChar = ~randChars[2];

  0001f	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
$LN11@Wipe7Dod52:
  00022	f6 d0		 not	 al
$LN7@Wipe7Dod52:

; 73   : 	}
; 74   : 
; 75   : 	memset (buffer, wipeChar, size);

  00024	8b 4c 24 08	 mov	 ecx, DWORD PTR _size$[esp-4]
  00028	0f b6 d0	 movzx	 edx, al
  0002b	8b 44 24 04	 mov	 eax, DWORD PTR _buffer$[esp-4]
  0002f	51		 push	 ecx
  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 	return TRUE;

  0003a	b8 01 00 00 00	 mov	 eax, 1

; 77   : }

  0003f	c3		 ret	 0
$LN1@Wipe7Dod52:

; 69   : 		break;
; 70   : 
; 71   : 	default:
; 72   : 		return FALSE;

  00040	33 c0		 xor	 eax, eax

; 77   : }

  00042	c3		 ret	 0
  00043	90		 npad	 1
$LN12@Wipe7Dod52:
  00044	00 00 00 00	 DD	 $LN6@Wipe7Dod52
  00048	00 00 00 00	 DD	 $LN5@Wipe7Dod52
  0004c	00 00 00 00	 DD	 $LN1@Wipe7Dod52
  00050	00 00 00 00	 DD	 $LN4@Wipe7Dod52
  00054	00 00 00 00	 DD	 $LN3@Wipe7Dod52
  00058	00 00 00 00	 DD	 $LN2@Wipe7Dod52
_Wipe7Dod5220 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Wipe35Gutmann
_TEXT	SEGMENT
_wipePat3$ = -4						; size = 3
_Wipe35Gutmann PROC					; COMDAT
; _pass$ = edx
; _buffer$ = ebx
; _size$ = edi

; 84   : {

  00000	51		 push	 ecx

; 85   : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };
; 86   : 	int wipePat3Pos;
; 87   : 	size_t i;
; 88   : 
; 89   : 	switch (pass)

  00001	8d 42 fb	 lea	 eax, DWORD PTR [edx-5]
  00004	56		 push	 esi
  00005	c6 44 24 04 92	 mov	 BYTE PTR _wipePat3$[esp+8], 146 ; 00000092H
  0000a	c6 44 24 05 49	 mov	 BYTE PTR _wipePat3$[esp+9], 73 ; 00000049H
  0000f	c6 44 24 06 24	 mov	 BYTE PTR _wipePat3$[esp+10], 36 ; 00000024H
  00014	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00017	0f 87 8d 00 00
	00		 ja	 $LN3@Wipe35Gutm
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN19@Wipe35Gutm[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@Wipe35Gutm[eax*4]
$LN12@Wipe35Gutm:

; 90   : 	{
; 91   : 	case 5:
; 92   : 		memset (buffer, 0x55, size);

  0002b	57		 push	 edi
  0002c	6a 55		 push	 85			; 00000055H

; 133  : 			memset (buffer, (pass - 10) * 0x11, size);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	5e		 pop	 esi

; 139  : }

  0003d	59		 pop	 ecx
  0003e	c3		 ret	 0
$LN11@Wipe35Gutm:

; 93   : 		break;
; 94   : 
; 95   : 	case 6:
; 96   : 		memset (buffer, 0xaa, size);

  0003f	57		 push	 edi
  00040	68 aa 00 00 00	 push	 170			; 000000aaH

; 133  : 			memset (buffer, (pass - 10) * 0x11, size);

  00045	53		 push	 ebx
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	5e		 pop	 esi

; 139  : }

  00054	59		 pop	 ecx
  00055	c3		 ret	 0
$LN10@Wipe35Gutm:

; 97   : 		break;
; 98   : 
; 99   : 	case 7:
; 100  : 	case 26:
; 101  : 	case 29:
; 102  : 		wipePat3Pos = 0;

  00056	33 c9		 xor	 ecx, ecx

; 103  : 		goto wipe3;

  00058	eb 0c		 jmp	 SHORT $wipe3$77644
$LN9@Wipe35Gutm:

; 104  : 
; 105  : 	case 8:
; 106  : 	case 27:
; 107  : 	case 30:
; 108  : 		wipePat3Pos = 1;

  0005a	b9 01 00 00 00	 mov	 ecx, 1

; 109  : 		goto wipe3;

  0005f	eb 05		 jmp	 SHORT $wipe3$77644
$LN8@Wipe35Gutm:

; 110  : 
; 111  : 	case 9:
; 112  : 	case 28:
; 113  : 	case 31:
; 114  : 		wipePat3Pos = 2;

  00061	b9 02 00 00 00	 mov	 ecx, 2
$wipe3$77644:

; 115  : 		goto wipe3;
; 116  : 
; 117  : wipe3:
; 118  : 		if (pass >= 29)

  00066	83 fa 1d	 cmp	 edx, 29			; 0000001dH
  00069	7c 0f		 jl	 SHORT $LN7@Wipe35Gutm

; 119  : 		{
; 120  : 			wipePat3[0] = ~wipePat3[0];

  0006b	c6 44 24 04 6d	 mov	 BYTE PTR _wipePat3$[esp+8], 109 ; 0000006dH

; 121  : 			wipePat3[1] = ~wipePat3[1];

  00070	c6 44 24 05 b6	 mov	 BYTE PTR _wipePat3$[esp+9], 182 ; 000000b6H

; 122  : 			wipePat3[2] = ~wipePat3[2];

  00075	c6 44 24 06 db	 mov	 BYTE PTR _wipePat3$[esp+10], 219 ; 000000dbH
$LN7@Wipe35Gutm:

; 123  : 		}
; 124  : 
; 125  : 		for (i = 0; i < size; ++i)

  0007a	33 f6		 xor	 esi, esi
  0007c	85 ff		 test	 edi, edi
  0007e	76 44		 jbe	 SHORT $LN1@Wipe35Gutm
$LL6@Wipe35Gutm:

; 126  : 		{
; 127  : 			buffer[i] = wipePat3[wipePat3Pos++ % 3];

  00080	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00085	f7 e9		 imul	 ecx
  00087	8b c2		 mov	 eax, edx
  00089	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008c	03 c2		 add	 eax, edx
  0008e	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00091	8b c1		 mov	 eax, ecx
  00093	2b c2		 sub	 eax, edx
  00095	8a 54 04 04	 mov	 dl, BYTE PTR _wipePat3$[esp+eax+8]
  00099	88 14 1e	 mov	 BYTE PTR [esi+ebx], dl
  0009c	46		 inc	 esi
  0009d	41		 inc	 ecx
  0009e	3b f7		 cmp	 esi, edi
  000a0	72 de		 jb	 SHORT $LL6@Wipe35Gutm

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  000a2	b8 01 00 00 00	 mov	 eax, 1
  000a7	5e		 pop	 esi

; 139  : }

  000a8	59		 pop	 ecx
  000a9	c3		 ret	 0
$LN3@Wipe35Gutm:

; 128  : 		}
; 129  : 		break;
; 130  : 
; 131  : 	default:
; 132  : 		if (pass >= 10 && pass <= 25)

  000aa	8d 42 f6	 lea	 eax, DWORD PTR [edx-10]
  000ad	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000b0	77 1a		 ja	 SHORT $LN2@Wipe35Gutm

; 133  : 			memset (buffer, (pass - 10) * 0x11, size);

  000b2	8b c8		 mov	 ecx, eax
  000b4	c1 e1 04	 shl	 ecx, 4
  000b7	57		 push	 edi
  000b8	03 c8		 add	 ecx, eax
  000ba	51		 push	 ecx
  000bb	53		 push	 ebx
  000bc	e8 00 00 00 00	 call	 _memset
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Wipe35Gutm:

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	5e		 pop	 esi

; 139  : }

  000ca	59		 pop	 ecx
  000cb	c3		 ret	 0
$LN2@Wipe35Gutm:

; 134  : 		else
; 135  : 			return FALSE;

  000cc	33 c0		 xor	 eax, eax
  000ce	5e		 pop	 esi

; 139  : }

  000cf	59		 pop	 ecx
  000d0	c3		 ret	 0
  000d1	8d 49 00	 npad	 3
$LN21@Wipe35Gutm:
  000d4	00 00 00 00	 DD	 $LN12@Wipe35Gutm
  000d8	00 00 00 00	 DD	 $LN11@Wipe35Gutm
  000dc	00 00 00 00	 DD	 $LN10@Wipe35Gutm
  000e0	00 00 00 00	 DD	 $LN9@Wipe35Gutm
  000e4	00 00 00 00	 DD	 $LN8@Wipe35Gutm
  000e8	00 00 00 00	 DD	 $LN3@Wipe35Gutm
$LN19@Wipe35Gutm:
  000ec	00		 DB	 0
  000ed	01		 DB	 1
  000ee	02		 DB	 2
  000ef	03		 DB	 3
  000f0	04		 DB	 4
  000f1	05		 DB	 5
  000f2	05		 DB	 5
  000f3	05		 DB	 5
  000f4	05		 DB	 5
  000f5	05		 DB	 5
  000f6	05		 DB	 5
  000f7	05		 DB	 5
  000f8	05		 DB	 5
  000f9	05		 DB	 5
  000fa	05		 DB	 5
  000fb	05		 DB	 5
  000fc	05		 DB	 5
  000fd	05		 DB	 5
  000fe	05		 DB	 5
  000ff	05		 DB	 5
  00100	05		 DB	 5
  00101	02		 DB	 2
  00102	03		 DB	 3
  00103	04		 DB	 4
  00104	02		 DB	 2
  00105	03		 DB	 3
  00106	04		 DB	 4
_Wipe35Gutmann ENDP
_TEXT	ENDS
PUBLIC	_GetWipePassCount
; Function compile flags: /Ogtpy
;	COMDAT _GetWipePassCount
_TEXT	SEGMENT
_algorithm$ = 8						; size = 4
_GetWipePassCount PROC					; COMDAT

; 144  : 	switch (algorithm)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _algorithm$[esp-4]
  00004	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  00009	7f 20		 jg	 SHORT $LN10@GetWipePas
  0000b	74 18		 je	 SHORT $LN3@GetWipePas
  0000d	83 f8 64	 cmp	 eax, 100		; 00000064H
  00010	74 0d		 je	 SHORT $LN5@GetWipePas
  00012	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00017	75 19		 jne	 SHORT $LN1@GetWipePas

; 148  : 
; 149  : 	case TC_WIPE_3_DOD_5220:
; 150  : 		return 3;

  00019	b8 03 00 00 00	 mov	 eax, 3

; 163  : }

  0001e	c3		 ret	 0
$LN5@GetWipePas:

; 145  : 	{
; 146  : 	case TC_WIPE_1_RAND:
; 147  : 		return 1;

  0001f	b8 01 00 00 00	 mov	 eax, 1

; 163  : }

  00024	c3		 ret	 0
$LN3@GetWipePas:

; 151  : 
; 152  : 	case TC_WIPE_7_DOD_5220:
; 153  : 		return 7;

  00025	b8 07 00 00 00	 mov	 eax, 7

; 163  : }

  0002a	c3		 ret	 0
$LN10@GetWipePas:

; 144  : 	switch (algorithm)

  0002b	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  00030	74 0a		 je	 SHORT $LN2@GetWipePas
$LN1@GetWipePas:

; 157  : 
; 158  : 	default:
; 159  : 		TC_THROW_FATAL_EXCEPTION;

  00032	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 160  : 	}
; 161  : 
; 162  : 	return 0;	// Prevent compiler warnings

  00039	33 c0		 xor	 eax, eax

; 163  : }

  0003b	c3		 ret	 0
$LN2@GetWipePas:

; 154  : 
; 155  : 	case TC_WIPE_35_GUTMANN:
; 156  : 		return 35;

  0003c	b8 23 00 00 00	 mov	 eax, 35			; 00000023H

; 163  : }

  00041	c3		 ret	 0
_GetWipePassCount ENDP
_TEXT	ENDS
PUBLIC	_WipeBuffer
; Function compile flags: /Ogtpy
;	COMDAT _WipeBuffer
_TEXT	SEGMENT
_algorithm$ = 8						; size = 4
_randChars$ = 12					; size = 4
_pass$ = 16						; size = 4
_buffer$ = 20						; size = 4
_size$ = 24						; size = 4
_WipeBuffer PROC					; COMDAT

; 168  : 	switch (algorithm)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _algorithm$[esp-4]
  00004	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  00009	7f 59		 jg	 SHORT $LN10@WipeBuffer
  0000b	74 3c		 je	 SHORT $LN3@WipeBuffer
  0000d	83 f8 64	 cmp	 eax, 100		; 00000064H
  00010	74 60		 je	 SHORT $LN5@WipeBuffer
  00012	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00017	75 52		 jne	 SHORT $LN1@WipeBuffer

; 169  : 	{
; 170  : 	case TC_WIPE_1_RAND:
; 171  : 		return Wipe1PseudoRandom (pass, buffer, size);
; 172  : 
; 173  : 	case TC_WIPE_3_DOD_5220:
; 174  : 		return Wipe3Dod5220 (pass, buffer, size);

  00019	8b 44 24 0c	 mov	 eax, DWORD PTR _pass$[esp-4]
  0001d	83 e8 01	 sub	 eax, 1
  00020	74 09		 je	 SHORT $LN15@WipeBuffer
  00022	83 e8 01	 sub	 eax, 1
  00025	75 4b		 jne	 SHORT $LN5@WipeBuffer
  00027	0c ff		 or	 al, 255			; 000000ffH
  00029	eb 02		 jmp	 SHORT $LN16@WipeBuffer
$LN15@WipeBuffer:
  0002b	32 c0		 xor	 al, al
$LN16@WipeBuffer:
  0002d	8b 4c 24 14	 mov	 ecx, DWORD PTR _size$[esp-4]
  00031	0f b6 d0	 movzx	 edx, al
  00034	8b 44 24 10	 mov	 eax, DWORD PTR _buffer$[esp-4]
  00038	51		 push	 ecx
  00039	52		 push	 edx
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	b8 01 00 00 00	 mov	 eax, 1

; 187  : }

  00048	c3		 ret	 0
$LN3@WipeBuffer:

; 175  : 
; 176  : 	case TC_WIPE_7_DOD_5220:
; 177  : 		return Wipe7Dod5220 (pass, randChars, buffer, size);

  00049	8b 4c 24 14	 mov	 ecx, DWORD PTR _size$[esp-4]
  0004d	8b 54 24 10	 mov	 edx, DWORD PTR _buffer$[esp-4]
  00051	8b 44 24 0c	 mov	 eax, DWORD PTR _pass$[esp-4]
  00055	51		 push	 ecx
  00056	8b 4c 24 0c	 mov	 ecx, DWORD PTR _randChars$[esp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _Wipe7Dod5220
  00060	83 c4 08	 add	 esp, 8

; 187  : }

  00063	c3		 ret	 0
$LN10@WipeBuffer:

; 168  : 	switch (algorithm)

  00064	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  00069	74 0a		 je	 SHORT $LN2@WipeBuffer
$LN1@WipeBuffer:

; 181  : 
; 182  : 	default:
; 183  : 		TC_THROW_FATAL_EXCEPTION;

  0006b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN5@WipeBuffer:

; 184  : 	}
; 185  : 
; 186  : 	return FALSE;	// Prevent compiler warnings

  00072	33 c0		 xor	 eax, eax

; 187  : }

  00074	c3		 ret	 0
$LN2@WipeBuffer:

; 178  : 
; 179  : 	case TC_WIPE_35_GUTMANN:
; 180  : 		return Wipe35Gutmann (pass, buffer, size);

  00075	8b 54 24 0c	 mov	 edx, DWORD PTR _pass$[esp-4]
  00079	53		 push	 ebx
  0007a	8b 5c 24 14	 mov	 ebx, DWORD PTR _buffer$[esp]
  0007e	57		 push	 edi
  0007f	8b 7c 24 1c	 mov	 edi, DWORD PTR _size$[esp+4]
  00083	e8 00 00 00 00	 call	 _Wipe35Gutmann
  00088	5f		 pop	 edi
  00089	5b		 pop	 ebx

; 187  : }

  0008a	c3		 ret	 0
_WipeBuffer ENDP
_TEXT	ENDS
END
