;	Static Name Aliases
;
;	$S206_s_box	EQU	s_box
;	$S207_inv_s_box	EQU	inv_s_box
;	$S208_gfm2_s_box	EQU	gfm2_s_box
;	$S209_gfm3_s_box	EQU	gfm3_s_box
;	$S210_gfmul_9	EQU	gfmul_9
;	$S211_gfmul_b	EQU	gfmul_b
;	$S212_gfmul_d	EQU	gfmul_d
;	$S213_gfmul_e	EQU	gfmul_e
	TITLE   ..\..\..\crypto\aessmall.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
_DATA      SEGMENT
$S206_s_box	DB	063H
	DB	07cH
	DB	077H
	DB	07bH
	DB	0f2H
	DB	06bH
	DB	06fH
	DB	0c5H
	DB	030H
	DB	01H
	DB	067H
	DB	02bH
	DB	0feH
	DB	0d7H
	DB	0abH
	DB	076H
	DB	0caH
	DB	082H
	DB	0c9H
	DB	07dH
	DB	0faH
	DB	059H
	DB	047H
	DB	0f0H
	DB	0adH
	DB	0d4H
	DB	0a2H
	DB	0afH
	DB	09cH
	DB	0a4H
	DB	072H
	DB	0c0H
	DB	0b7H
	DB	0fdH
	DB	093H
	DB	026H
	DB	036H
	DB	03fH
	DB	0f7H
	DB	0ccH
	DB	034H
	DB	0a5H
	DB	0e5H
	DB	0f1H
	DB	071H
	DB	0d8H
	DB	031H
	DB	015H
	DB	04H
	DB	0c7H
	DB	023H
	DB	0c3H
	DB	018H
	DB	096H
	DB	05H
	DB	09aH
	DB	07H
	DB	012H
	DB	080H
	DB	0e2H
	DB	0ebH
	DB	027H
	DB	0b2H
	DB	075H
	DB	09H
	DB	083H
	DB	02cH
	DB	01aH
	DB	01bH
	DB	06eH
	DB	05aH
	DB	0a0H
	DB	052H
	DB	03bH
	DB	0d6H
	DB	0b3H
	DB	029H
	DB	0e3H
	DB	02fH
	DB	084H
	DB	053H
	DB	0d1H
	DB	00H
	DB	0edH
	DB	020H
	DB	0fcH
	DB	0b1H
	DB	05bH
	DB	06aH
	DB	0cbH
	DB	0beH
	DB	039H
	DB	04aH
	DB	04cH
	DB	058H
	DB	0cfH
	DB	0d0H
	DB	0efH
	DB	0aaH
	DB	0fbH
	DB	043H
	DB	04dH
	DB	033H
	DB	085H
	DB	045H
	DB	0f9H
	DB	02H
	DB	07fH
	DB	050H
	DB	03cH
	DB	09fH
	DB	0a8H
	DB	051H
	DB	0a3H
	DB	040H
	DB	08fH
	DB	092H
	DB	09dH
	DB	038H
	DB	0f5H
	DB	0bcH
	DB	0b6H
	DB	0daH
	DB	021H
	DB	010H
	DB	0ffH
	DB	0f3H
	DB	0d2H
	DB	0cdH
	DB	0cH
	DB	013H
	DB	0ecH
	DB	05fH
	DB	097H
	DB	044H
	DB	017H
	DB	0c4H
	DB	0a7H
	DB	07eH
	DB	03dH
	DB	064H
	DB	05dH
	DB	019H
	DB	073H
	DB	060H
	DB	081H
	DB	04fH
	DB	0dcH
	DB	022H
	DB	02aH
	DB	090H
	DB	088H
	DB	046H
	DB	0eeH
	DB	0b8H
	DB	014H
	DB	0deH
	DB	05eH
	DB	0bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	03aH
	DB	0aH
	DB	049H
	DB	06H
	DB	024H
	DB	05cH
	DB	0c2H
	DB	0d3H
	DB	0acH
	DB	062H
	DB	091H
	DB	095H
	DB	0e4H
	DB	079H
	DB	0e7H
	DB	0c8H
	DB	037H
	DB	06dH
	DB	08dH
	DB	0d5H
	DB	04eH
	DB	0a9H
	DB	06cH
	DB	056H
	DB	0f4H
	DB	0eaH
	DB	065H
	DB	07aH
	DB	0aeH
	DB	08H
	DB	0baH
	DB	078H
	DB	025H
	DB	02eH
	DB	01cH
	DB	0a6H
	DB	0b4H
	DB	0c6H
	DB	0e8H
	DB	0ddH
	DB	074H
	DB	01fH
	DB	04bH
	DB	0bdH
	DB	08bH
	DB	08aH
	DB	070H
	DB	03eH
	DB	0b5H
	DB	066H
	DB	048H
	DB	03H
	DB	0f6H
	DB	0eH
	DB	061H
	DB	035H
	DB	057H
	DB	0b9H
	DB	086H
	DB	0c1H
	DB	01dH
	DB	09eH
	DB	0e1H
	DB	0f8H
	DB	098H
	DB	011H
	DB	069H
	DB	0d9H
	DB	08eH
	DB	094H
	DB	09bH
	DB	01eH
	DB	087H
	DB	0e9H
	DB	0ceH
	DB	055H
	DB	028H
	DB	0dfH
	DB	08cH
	DB	0a1H
	DB	089H
	DB	0dH
	DB	0bfH
	DB	0e6H
	DB	042H
	DB	068H
	DB	041H
	DB	099H
	DB	02dH
	DB	0fH
	DB	0b0H
	DB	054H
	DB	0bbH
	DB	016H
$S207_inv_s_box	DB	052H
	DB	09H
	DB	06aH
	DB	0d5H
	DB	030H
	DB	036H
	DB	0a5H
	DB	038H
	DB	0bfH
	DB	040H
	DB	0a3H
	DB	09eH
	DB	081H
	DB	0f3H
	DB	0d7H
	DB	0fbH
	DB	07cH
	DB	0e3H
	DB	039H
	DB	082H
	DB	09bH
	DB	02fH
	DB	0ffH
	DB	087H
	DB	034H
	DB	08eH
	DB	043H
	DB	044H
	DB	0c4H
	DB	0deH
	DB	0e9H
	DB	0cbH
	DB	054H
	DB	07bH
	DB	094H
	DB	032H
	DB	0a6H
	DB	0c2H
	DB	023H
	DB	03dH
	DB	0eeH
	DB	04cH
	DB	095H
	DB	0bH
	DB	042H
	DB	0faH
	DB	0c3H
	DB	04eH
	DB	08H
	DB	02eH
	DB	0a1H
	DB	066H
	DB	028H
	DB	0d9H
	DB	024H
	DB	0b2H
	DB	076H
	DB	05bH
	DB	0a2H
	DB	049H
	DB	06dH
	DB	08bH
	DB	0d1H
	DB	025H
	DB	072H
	DB	0f8H
	DB	0f6H
	DB	064H
	DB	086H
	DB	068H
	DB	098H
	DB	016H
	DB	0d4H
	DB	0a4H
	DB	05cH
	DB	0ccH
	DB	05dH
	DB	065H
	DB	0b6H
	DB	092H
	DB	06cH
	DB	070H
	DB	048H
	DB	050H
	DB	0fdH
	DB	0edH
	DB	0b9H
	DB	0daH
	DB	05eH
	DB	015H
	DB	046H
	DB	057H
	DB	0a7H
	DB	08dH
	DB	09dH
	DB	084H
	DB	090H
	DB	0d8H
	DB	0abH
	DB	00H
	DB	08cH
	DB	0bcH
	DB	0d3H
	DB	0aH
	DB	0f7H
	DB	0e4H
	DB	058H
	DB	05H
	DB	0b8H
	DB	0b3H
	DB	045H
	DB	06H
	DB	0d0H
	DB	02cH
	DB	01eH
	DB	08fH
	DB	0caH
	DB	03fH
	DB	0fH
	DB	02H
	DB	0c1H
	DB	0afH
	DB	0bdH
	DB	03H
	DB	01H
	DB	013H
	DB	08aH
	DB	06bH
	DB	03aH
	DB	091H
	DB	011H
	DB	041H
	DB	04fH
	DB	067H
	DB	0dcH
	DB	0eaH
	DB	097H
	DB	0f2H
	DB	0cfH
	DB	0ceH
	DB	0f0H
	DB	0b4H
	DB	0e6H
	DB	073H
	DB	096H
	DB	0acH
	DB	074H
	DB	022H
	DB	0e7H
	DB	0adH
	DB	035H
	DB	085H
	DB	0e2H
	DB	0f9H
	DB	037H
	DB	0e8H
	DB	01cH
	DB	075H
	DB	0dfH
	DB	06eH
	DB	047H
	DB	0f1H
	DB	01aH
	DB	071H
	DB	01dH
	DB	029H
	DB	0c5H
	DB	089H
	DB	06fH
	DB	0b7H
	DB	062H
	DB	0eH
	DB	0aaH
	DB	018H
	DB	0beH
	DB	01bH
	DB	0fcH
	DB	056H
	DB	03eH
	DB	04bH
	DB	0c6H
	DB	0d2H
	DB	079H
	DB	020H
	DB	09aH
	DB	0dbH
	DB	0c0H
	DB	0feH
	DB	078H
	DB	0cdH
	DB	05aH
	DB	0f4H
	DB	01fH
	DB	0ddH
	DB	0a8H
	DB	033H
	DB	088H
	DB	07H
	DB	0c7H
	DB	031H
	DB	0b1H
	DB	012H
	DB	010H
	DB	059H
	DB	027H
	DB	080H
	DB	0ecH
	DB	05fH
	DB	060H
	DB	051H
	DB	07fH
	DB	0a9H
	DB	019H
	DB	0b5H
	DB	04aH
	DB	0dH
	DB	02dH
	DB	0e5H
	DB	07aH
	DB	09fH
	DB	093H
	DB	0c9H
	DB	09cH
	DB	0efH
	DB	0a0H
	DB	0e0H
	DB	03bH
	DB	04dH
	DB	0aeH
	DB	02aH
	DB	0f5H
	DB	0b0H
	DB	0c8H
	DB	0ebH
	DB	0bbH
	DB	03cH
	DB	083H
	DB	053H
	DB	099H
	DB	061H
	DB	017H
	DB	02bH
	DB	04H
	DB	07eH
	DB	0baH
	DB	077H
	DB	0d6H
	DB	026H
	DB	0e1H
	DB	069H
	DB	014H
	DB	063H
	DB	055H
	DB	021H
	DB	0cH
	DB	07dH
$S208_gfm2_s_box	DB	0c6H
	DB	0f8H
	DB	0eeH
	DB	0f6H
	DB	0ffH
	DB	0d6H
	DB	0deH
	DB	091H
	DB	060H
	DB	02H
	DB	0ceH
	DB	056H
	DB	0e7H
	DB	0b5H
	DB	04dH
	DB	0ecH
	DB	08fH
	DB	01fH
	DB	089H
	DB	0faH
	DB	0efH
	DB	0b2H
	DB	08eH
	DB	0fbH
	DB	041H
	DB	0b3H
	DB	05fH
	DB	045H
	DB	023H
	DB	053H
	DB	0e4H
	DB	09bH
	DB	075H
	DB	0e1H
	DB	03dH
	DB	04cH
	DB	06cH
	DB	07eH
	DB	0f5H
	DB	083H
	DB	068H
	DB	051H
	DB	0d1H
	DB	0f9H
	DB	0e2H
	DB	0abH
	DB	062H
	DB	02aH
	DB	08H
	DB	095H
	DB	046H
	DB	09dH
	DB	030H
	DB	037H
	DB	0aH
	DB	02fH
	DB	0eH
	DB	024H
	DB	01bH
	DB	0dfH
	DB	0cdH
	DB	04eH
	DB	07fH
	DB	0eaH
	DB	012H
	DB	01dH
	DB	058H
	DB	034H
	DB	036H
	DB	0dcH
	DB	0b4H
	DB	05bH
	DB	0a4H
	DB	076H
	DB	0b7H
	DB	07dH
	DB	052H
	DB	0ddH
	DB	05eH
	DB	013H
	DB	0a6H
	DB	0b9H
	DB	00H
	DB	0c1H
	DB	040H
	DB	0e3H
	DB	079H
	DB	0b6H
	DB	0d4H
	DB	08dH
	DB	067H
	DB	072H
	DB	094H
	DB	098H
	DB	0b0H
	DB	085H
	DB	0bbH
	DB	0c5H
	DB	04fH
	DB	0edH
	DB	086H
	DB	09aH
	DB	066H
	DB	011H
	DB	08aH
	DB	0e9H
	DB	04H
	DB	0feH
	DB	0a0H
	DB	078H
	DB	025H
	DB	04bH
	DB	0a2H
	DB	05dH
	DB	080H
	DB	05H
	DB	03fH
	DB	021H
	DB	070H
	DB	0f1H
	DB	063H
	DB	077H
	DB	0afH
	DB	042H
	DB	020H
	DB	0e5H
	DB	0fdH
	DB	0bfH
	DB	081H
	DB	018H
	DB	026H
	DB	0c3H
	DB	0beH
	DB	035H
	DB	088H
	DB	02eH
	DB	093H
	DB	055H
	DB	0fcH
	DB	07aH
	DB	0c8H
	DB	0baH
	DB	032H
	DB	0e6H
	DB	0c0H
	DB	019H
	DB	09eH
	DB	0a3H
	DB	044H
	DB	054H
	DB	03bH
	DB	0bH
	DB	08cH
	DB	0c7H
	DB	06bH
	DB	028H
	DB	0a7H
	DB	0bcH
	DB	016H
	DB	0adH
	DB	0dbH
	DB	064H
	DB	074H
	DB	014H
	DB	092H
	DB	0cH
	DB	048H
	DB	0b8H
	DB	09fH
	DB	0bdH
	DB	043H
	DB	0c4H
	DB	039H
	DB	031H
	DB	0d3H
	DB	0f2H
	DB	0d5H
	DB	08bH
	DB	06eH
	DB	0daH
	DB	01H
	DB	0b1H
	DB	09cH
	DB	049H
	DB	0d8H
	DB	0acH
	DB	0f3H
	DB	0cfH
	DB	0caH
	DB	0f4H
	DB	047H
	DB	010H
	DB	06fH
	DB	0f0H
	DB	04aH
	DB	05cH
	DB	038H
	DB	057H
	DB	073H
	DB	097H
	DB	0cbH
	DB	0a1H
	DB	0e8H
	DB	03eH
	DB	096H
	DB	061H
	DB	0dH
	DB	0fH
	DB	0e0H
	DB	07cH
	DB	071H
	DB	0ccH
	DB	090H
	DB	06H
	DB	0f7H
	DB	01cH
	DB	0c2H
	DB	06aH
	DB	0aeH
	DB	069H
	DB	017H
	DB	099H
	DB	03aH
	DB	027H
	DB	0d9H
	DB	0ebH
	DB	02bH
	DB	022H
	DB	0d2H
	DB	0a9H
	DB	07H
	DB	033H
	DB	02dH
	DB	03cH
	DB	015H
	DB	0c9H
	DB	087H
	DB	0aaH
	DB	050H
	DB	0a5H
	DB	03H
	DB	059H
	DB	09H
	DB	01aH
	DB	065H
	DB	0d7H
	DB	084H
	DB	0d0H
	DB	082H
	DB	029H
	DB	05aH
	DB	01eH
	DB	07bH
	DB	0a8H
	DB	06dH
	DB	02cH
$S209_gfm3_s_box	DB	0a5H
	DB	084H
	DB	099H
	DB	08dH
	DB	0dH
	DB	0bdH
	DB	0b1H
	DB	054H
	DB	050H
	DB	03H
	DB	0a9H
	DB	07dH
	DB	019H
	DB	062H
	DB	0e6H
	DB	09aH
	DB	045H
	DB	09dH
	DB	040H
	DB	087H
	DB	015H
	DB	0ebH
	DB	0c9H
	DB	0bH
	DB	0ecH
	DB	067H
	DB	0fdH
	DB	0eaH
	DB	0bfH
	DB	0f7H
	DB	096H
	DB	05bH
	DB	0c2H
	DB	01cH
	DB	0aeH
	DB	06aH
	DB	05aH
	DB	041H
	DB	02H
	DB	04fH
	DB	05cH
	DB	0f4H
	DB	034H
	DB	08H
	DB	093H
	DB	073H
	DB	053H
	DB	03fH
	DB	0cH
	DB	052H
	DB	065H
	DB	05eH
	DB	028H
	DB	0a1H
	DB	0fH
	DB	0b5H
	DB	09H
	DB	036H
	DB	09bH
	DB	03dH
	DB	026H
	DB	069H
	DB	0cdH
	DB	09fH
	DB	01bH
	DB	09eH
	DB	074H
	DB	02eH
	DB	02dH
	DB	0b2H
	DB	0eeH
	DB	0fbH
	DB	0f6H
	DB	04dH
	DB	061H
	DB	0ceH
	DB	07bH
	DB	03eH
	DB	071H
	DB	097H
	DB	0f5H
	DB	068H
	DB	00H
	DB	02cH
	DB	060H
	DB	01fH
	DB	0c8H
	DB	0edH
	DB	0beH
	DB	046H
	DB	0d9H
	DB	04bH
	DB	0deH
	DB	0d4H
	DB	0e8H
	DB	04aH
	DB	06bH
	DB	02aH
	DB	0e5H
	DB	016H
	DB	0c5H
	DB	0d7H
	DB	055H
	DB	094H
	DB	0cfH
	DB	010H
	DB	06H
	DB	081H
	DB	0f0H
	DB	044H
	DB	0baH
	DB	0e3H
	DB	0f3H
	DB	0feH
	DB	0c0H
	DB	08aH
	DB	0adH
	DB	0bcH
	DB	048H
	DB	04H
	DB	0dfH
	DB	0c1H
	DB	075H
	DB	063H
	DB	030H
	DB	01aH
	DB	0eH
	DB	06dH
	DB	04cH
	DB	014H
	DB	035H
	DB	02fH
	DB	0e1H
	DB	0a2H
	DB	0ccH
	DB	039H
	DB	057H
	DB	0f2H
	DB	082H
	DB	047H
	DB	0acH
	DB	0e7H
	DB	02bH
	DB	095H
	DB	0a0H
	DB	098H
	DB	0d1H
	DB	07fH
	DB	066H
	DB	07eH
	DB	0abH
	DB	083H
	DB	0caH
	DB	029H
	DB	0d3H
	DB	03cH
	DB	079H
	DB	0e2H
	DB	01dH
	DB	076H
	DB	03bH
	DB	056H
	DB	04eH
	DB	01eH
	DB	0dbH
	DB	0aH
	DB	06cH
	DB	0e4H
	DB	05dH
	DB	06eH
	DB	0efH
	DB	0a6H
	DB	0a8H
	DB	0a4H
	DB	037H
	DB	08bH
	DB	032H
	DB	043H
	DB	059H
	DB	0b7H
	DB	08cH
	DB	064H
	DB	0d2H
	DB	0e0H
	DB	0b4H
	DB	0faH
	DB	07H
	DB	025H
	DB	0afH
	DB	08eH
	DB	0e9H
	DB	018H
	DB	0d5H
	DB	088H
	DB	06fH
	DB	072H
	DB	024H
	DB	0f1H
	DB	0c7H
	DB	051H
	DB	023H
	DB	07cH
	DB	09cH
	DB	021H
	DB	0ddH
	DB	0dcH
	DB	086H
	DB	085H
	DB	090H
	DB	042H
	DB	0c4H
	DB	0aaH
	DB	0d8H
	DB	05H
	DB	01H
	DB	012H
	DB	0a3H
	DB	05fH
	DB	0f9H
	DB	0d0H
	DB	091H
	DB	058H
	DB	027H
	DB	0b9H
	DB	038H
	DB	013H
	DB	0b3H
	DB	033H
	DB	0bbH
	DB	070H
	DB	089H
	DB	0a7H
	DB	0b6H
	DB	022H
	DB	092H
	DB	020H
	DB	049H
	DB	0ffH
	DB	078H
	DB	07aH
	DB	08fH
	DB	0f8H
	DB	080H
	DB	017H
	DB	0daH
	DB	031H
	DB	0c6H
	DB	0b8H
	DB	0c3H
	DB	0b0H
	DB	077H
	DB	011H
	DB	0cbH
	DB	0fcH
	DB	0d6H
	DB	03aH
$S210_gfmul_9	DB	00H
	DB	09H
	DB	012H
	DB	01bH
	DB	024H
	DB	02dH
	DB	036H
	DB	03fH
	DB	048H
	DB	041H
	DB	05aH
	DB	053H
	DB	06cH
	DB	065H
	DB	07eH
	DB	077H
	DB	090H
	DB	099H
	DB	082H
	DB	08bH
	DB	0b4H
	DB	0bdH
	DB	0a6H
	DB	0afH
	DB	0d8H
	DB	0d1H
	DB	0caH
	DB	0c3H
	DB	0fcH
	DB	0f5H
	DB	0eeH
	DB	0e7H
	DB	03bH
	DB	032H
	DB	029H
	DB	020H
	DB	01fH
	DB	016H
	DB	0dH
	DB	04H
	DB	073H
	DB	07aH
	DB	061H
	DB	068H
	DB	057H
	DB	05eH
	DB	045H
	DB	04cH
	DB	0abH
	DB	0a2H
	DB	0b9H
	DB	0b0H
	DB	08fH
	DB	086H
	DB	09dH
	DB	094H
	DB	0e3H
	DB	0eaH
	DB	0f1H
	DB	0f8H
	DB	0c7H
	DB	0ceH
	DB	0d5H
	DB	0dcH
	DB	076H
	DB	07fH
	DB	064H
	DB	06dH
	DB	052H
	DB	05bH
	DB	040H
	DB	049H
	DB	03eH
	DB	037H
	DB	02cH
	DB	025H
	DB	01aH
	DB	013H
	DB	08H
	DB	01H
	DB	0e6H
	DB	0efH
	DB	0f4H
	DB	0fdH
	DB	0c2H
	DB	0cbH
	DB	0d0H
	DB	0d9H
	DB	0aeH
	DB	0a7H
	DB	0bcH
	DB	0b5H
	DB	08aH
	DB	083H
	DB	098H
	DB	091H
	DB	04dH
	DB	044H
	DB	05fH
	DB	056H
	DB	069H
	DB	060H
	DB	07bH
	DB	072H
	DB	05H
	DB	0cH
	DB	017H
	DB	01eH
	DB	021H
	DB	028H
	DB	033H
	DB	03aH
	DB	0ddH
	DB	0d4H
	DB	0cfH
	DB	0c6H
	DB	0f9H
	DB	0f0H
	DB	0ebH
	DB	0e2H
	DB	095H
	DB	09cH
	DB	087H
	DB	08eH
	DB	0b1H
	DB	0b8H
	DB	0a3H
	DB	0aaH
	DB	0ecH
	DB	0e5H
	DB	0feH
	DB	0f7H
	DB	0c8H
	DB	0c1H
	DB	0daH
	DB	0d3H
	DB	0a4H
	DB	0adH
	DB	0b6H
	DB	0bfH
	DB	080H
	DB	089H
	DB	092H
	DB	09bH
	DB	07cH
	DB	075H
	DB	06eH
	DB	067H
	DB	058H
	DB	051H
	DB	04aH
	DB	043H
	DB	034H
	DB	03dH
	DB	026H
	DB	02fH
	DB	010H
	DB	019H
	DB	02H
	DB	0bH
	DB	0d7H
	DB	0deH
	DB	0c5H
	DB	0ccH
	DB	0f3H
	DB	0faH
	DB	0e1H
	DB	0e8H
	DB	09fH
	DB	096H
	DB	08dH
	DB	084H
	DB	0bbH
	DB	0b2H
	DB	0a9H
	DB	0a0H
	DB	047H
	DB	04eH
	DB	055H
	DB	05cH
	DB	063H
	DB	06aH
	DB	071H
	DB	078H
	DB	0fH
	DB	06H
	DB	01dH
	DB	014H
	DB	02bH
	DB	022H
	DB	039H
	DB	030H
	DB	09aH
	DB	093H
	DB	088H
	DB	081H
	DB	0beH
	DB	0b7H
	DB	0acH
	DB	0a5H
	DB	0d2H
	DB	0dbH
	DB	0c0H
	DB	0c9H
	DB	0f6H
	DB	0ffH
	DB	0e4H
	DB	0edH
	DB	0aH
	DB	03H
	DB	018H
	DB	011H
	DB	02eH
	DB	027H
	DB	03cH
	DB	035H
	DB	042H
	DB	04bH
	DB	050H
	DB	059H
	DB	066H
	DB	06fH
	DB	074H
	DB	07dH
	DB	0a1H
	DB	0a8H
	DB	0b3H
	DB	0baH
	DB	085H
	DB	08cH
	DB	097H
	DB	09eH
	DB	0e9H
	DB	0e0H
	DB	0fbH
	DB	0f2H
	DB	0cdH
	DB	0c4H
	DB	0dfH
	DB	0d6H
	DB	031H
	DB	038H
	DB	023H
	DB	02aH
	DB	015H
	DB	01cH
	DB	07H
	DB	0eH
	DB	079H
	DB	070H
	DB	06bH
	DB	062H
	DB	05dH
	DB	054H
	DB	04fH
	DB	046H
$S211_gfmul_b	DB	00H
	DB	0bH
	DB	016H
	DB	01dH
	DB	02cH
	DB	027H
	DB	03aH
	DB	031H
	DB	058H
	DB	053H
	DB	04eH
	DB	045H
	DB	074H
	DB	07fH
	DB	062H
	DB	069H
	DB	0b0H
	DB	0bbH
	DB	0a6H
	DB	0adH
	DB	09cH
	DB	097H
	DB	08aH
	DB	081H
	DB	0e8H
	DB	0e3H
	DB	0feH
	DB	0f5H
	DB	0c4H
	DB	0cfH
	DB	0d2H
	DB	0d9H
	DB	07bH
	DB	070H
	DB	06dH
	DB	066H
	DB	057H
	DB	05cH
	DB	041H
	DB	04aH
	DB	023H
	DB	028H
	DB	035H
	DB	03eH
	DB	0fH
	DB	04H
	DB	019H
	DB	012H
	DB	0cbH
	DB	0c0H
	DB	0ddH
	DB	0d6H
	DB	0e7H
	DB	0ecH
	DB	0f1H
	DB	0faH
	DB	093H
	DB	098H
	DB	085H
	DB	08eH
	DB	0bfH
	DB	0b4H
	DB	0a9H
	DB	0a2H
	DB	0f6H
	DB	0fdH
	DB	0e0H
	DB	0ebH
	DB	0daH
	DB	0d1H
	DB	0ccH
	DB	0c7H
	DB	0aeH
	DB	0a5H
	DB	0b8H
	DB	0b3H
	DB	082H
	DB	089H
	DB	094H
	DB	09fH
	DB	046H
	DB	04dH
	DB	050H
	DB	05bH
	DB	06aH
	DB	061H
	DB	07cH
	DB	077H
	DB	01eH
	DB	015H
	DB	08H
	DB	03H
	DB	032H
	DB	039H
	DB	024H
	DB	02fH
	DB	08dH
	DB	086H
	DB	09bH
	DB	090H
	DB	0a1H
	DB	0aaH
	DB	0b7H
	DB	0bcH
	DB	0d5H
	DB	0deH
	DB	0c3H
	DB	0c8H
	DB	0f9H
	DB	0f2H
	DB	0efH
	DB	0e4H
	DB	03dH
	DB	036H
	DB	02bH
	DB	020H
	DB	011H
	DB	01aH
	DB	07H
	DB	0cH
	DB	065H
	DB	06eH
	DB	073H
	DB	078H
	DB	049H
	DB	042H
	DB	05fH
	DB	054H
	DB	0f7H
	DB	0fcH
	DB	0e1H
	DB	0eaH
	DB	0dbH
	DB	0d0H
	DB	0cdH
	DB	0c6H
	DB	0afH
	DB	0a4H
	DB	0b9H
	DB	0b2H
	DB	083H
	DB	088H
	DB	095H
	DB	09eH
	DB	047H
	DB	04cH
	DB	051H
	DB	05aH
	DB	06bH
	DB	060H
	DB	07dH
	DB	076H
	DB	01fH
	DB	014H
	DB	09H
	DB	02H
	DB	033H
	DB	038H
	DB	025H
	DB	02eH
	DB	08cH
	DB	087H
	DB	09aH
	DB	091H
	DB	0a0H
	DB	0abH
	DB	0b6H
	DB	0bdH
	DB	0d4H
	DB	0dfH
	DB	0c2H
	DB	0c9H
	DB	0f8H
	DB	0f3H
	DB	0eeH
	DB	0e5H
	DB	03cH
	DB	037H
	DB	02aH
	DB	021H
	DB	010H
	DB	01bH
	DB	06H
	DB	0dH
	DB	064H
	DB	06fH
	DB	072H
	DB	079H
	DB	048H
	DB	043H
	DB	05eH
	DB	055H
	DB	01H
	DB	0aH
	DB	017H
	DB	01cH
	DB	02dH
	DB	026H
	DB	03bH
	DB	030H
	DB	059H
	DB	052H
	DB	04fH
	DB	044H
	DB	075H
	DB	07eH
	DB	063H
	DB	068H
	DB	0b1H
	DB	0baH
	DB	0a7H
	DB	0acH
	DB	09dH
	DB	096H
	DB	08bH
	DB	080H
	DB	0e9H
	DB	0e2H
	DB	0ffH
	DB	0f4H
	DB	0c5H
	DB	0ceH
	DB	0d3H
	DB	0d8H
	DB	07aH
	DB	071H
	DB	06cH
	DB	067H
	DB	056H
	DB	05dH
	DB	040H
	DB	04bH
	DB	022H
	DB	029H
	DB	034H
	DB	03fH
	DB	0eH
	DB	05H
	DB	018H
	DB	013H
	DB	0caH
	DB	0c1H
	DB	0dcH
	DB	0d7H
	DB	0e6H
	DB	0edH
	DB	0f0H
	DB	0fbH
	DB	092H
	DB	099H
	DB	084H
	DB	08fH
	DB	0beH
	DB	0b5H
	DB	0a8H
	DB	0a3H
$S212_gfmul_d	DB	00H
	DB	0dH
	DB	01aH
	DB	017H
	DB	034H
	DB	039H
	DB	02eH
	DB	023H
	DB	068H
	DB	065H
	DB	072H
	DB	07fH
	DB	05cH
	DB	051H
	DB	046H
	DB	04bH
	DB	0d0H
	DB	0ddH
	DB	0caH
	DB	0c7H
	DB	0e4H
	DB	0e9H
	DB	0feH
	DB	0f3H
	DB	0b8H
	DB	0b5H
	DB	0a2H
	DB	0afH
	DB	08cH
	DB	081H
	DB	096H
	DB	09bH
	DB	0bbH
	DB	0b6H
	DB	0a1H
	DB	0acH
	DB	08fH
	DB	082H
	DB	095H
	DB	098H
	DB	0d3H
	DB	0deH
	DB	0c9H
	DB	0c4H
	DB	0e7H
	DB	0eaH
	DB	0fdH
	DB	0f0H
	DB	06bH
	DB	066H
	DB	071H
	DB	07cH
	DB	05fH
	DB	052H
	DB	045H
	DB	048H
	DB	03H
	DB	0eH
	DB	019H
	DB	014H
	DB	037H
	DB	03aH
	DB	02dH
	DB	020H
	DB	06dH
	DB	060H
	DB	077H
	DB	07aH
	DB	059H
	DB	054H
	DB	043H
	DB	04eH
	DB	05H
	DB	08H
	DB	01fH
	DB	012H
	DB	031H
	DB	03cH
	DB	02bH
	DB	026H
	DB	0bdH
	DB	0b0H
	DB	0a7H
	DB	0aaH
	DB	089H
	DB	084H
	DB	093H
	DB	09eH
	DB	0d5H
	DB	0d8H
	DB	0cfH
	DB	0c2H
	DB	0e1H
	DB	0ecH
	DB	0fbH
	DB	0f6H
	DB	0d6H
	DB	0dbH
	DB	0ccH
	DB	0c1H
	DB	0e2H
	DB	0efH
	DB	0f8H
	DB	0f5H
	DB	0beH
	DB	0b3H
	DB	0a4H
	DB	0a9H
	DB	08aH
	DB	087H
	DB	090H
	DB	09dH
	DB	06H
	DB	0bH
	DB	01cH
	DB	011H
	DB	032H
	DB	03fH
	DB	028H
	DB	025H
	DB	06eH
	DB	063H
	DB	074H
	DB	079H
	DB	05aH
	DB	057H
	DB	040H
	DB	04dH
	DB	0daH
	DB	0d7H
	DB	0c0H
	DB	0cdH
	DB	0eeH
	DB	0e3H
	DB	0f4H
	DB	0f9H
	DB	0b2H
	DB	0bfH
	DB	0a8H
	DB	0a5H
	DB	086H
	DB	08bH
	DB	09cH
	DB	091H
	DB	0aH
	DB	07H
	DB	010H
	DB	01dH
	DB	03eH
	DB	033H
	DB	024H
	DB	029H
	DB	062H
	DB	06fH
	DB	078H
	DB	075H
	DB	056H
	DB	05bH
	DB	04cH
	DB	041H
	DB	061H
	DB	06cH
	DB	07bH
	DB	076H
	DB	055H
	DB	058H
	DB	04fH
	DB	042H
	DB	09H
	DB	04H
	DB	013H
	DB	01eH
	DB	03dH
	DB	030H
	DB	027H
	DB	02aH
	DB	0b1H
	DB	0bcH
	DB	0abH
	DB	0a6H
	DB	085H
	DB	088H
	DB	09fH
	DB	092H
	DB	0d9H
	DB	0d4H
	DB	0c3H
	DB	0ceH
	DB	0edH
	DB	0e0H
	DB	0f7H
	DB	0faH
	DB	0b7H
	DB	0baH
	DB	0adH
	DB	0a0H
	DB	083H
	DB	08eH
	DB	099H
	DB	094H
	DB	0dfH
	DB	0d2H
	DB	0c5H
	DB	0c8H
	DB	0ebH
	DB	0e6H
	DB	0f1H
	DB	0fcH
	DB	067H
	DB	06aH
	DB	07dH
	DB	070H
	DB	053H
	DB	05eH
	DB	049H
	DB	044H
	DB	0fH
	DB	02H
	DB	015H
	DB	018H
	DB	03bH
	DB	036H
	DB	021H
	DB	02cH
	DB	0cH
	DB	01H
	DB	016H
	DB	01bH
	DB	038H
	DB	035H
	DB	022H
	DB	02fH
	DB	064H
	DB	069H
	DB	07eH
	DB	073H
	DB	050H
	DB	05dH
	DB	04aH
	DB	047H
	DB	0dcH
	DB	0d1H
	DB	0c6H
	DB	0cbH
	DB	0e8H
	DB	0e5H
	DB	0f2H
	DB	0ffH
	DB	0b4H
	DB	0b9H
	DB	0aeH
	DB	0a3H
	DB	080H
	DB	08dH
	DB	09aH
	DB	097H
$S213_gfmul_e	DB	00H
	DB	0eH
	DB	01cH
	DB	012H
	DB	038H
	DB	036H
	DB	024H
	DB	02aH
	DB	070H
	DB	07eH
	DB	06cH
	DB	062H
	DB	048H
	DB	046H
	DB	054H
	DB	05aH
	DB	0e0H
	DB	0eeH
	DB	0fcH
	DB	0f2H
	DB	0d8H
	DB	0d6H
	DB	0c4H
	DB	0caH
	DB	090H
	DB	09eH
	DB	08cH
	DB	082H
	DB	0a8H
	DB	0a6H
	DB	0b4H
	DB	0baH
	DB	0dbH
	DB	0d5H
	DB	0c7H
	DB	0c9H
	DB	0e3H
	DB	0edH
	DB	0ffH
	DB	0f1H
	DB	0abH
	DB	0a5H
	DB	0b7H
	DB	0b9H
	DB	093H
	DB	09dH
	DB	08fH
	DB	081H
	DB	03bH
	DB	035H
	DB	027H
	DB	029H
	DB	03H
	DB	0dH
	DB	01fH
	DB	011H
	DB	04bH
	DB	045H
	DB	057H
	DB	059H
	DB	073H
	DB	07dH
	DB	06fH
	DB	061H
	DB	0adH
	DB	0a3H
	DB	0b1H
	DB	0bfH
	DB	095H
	DB	09bH
	DB	089H
	DB	087H
	DB	0ddH
	DB	0d3H
	DB	0c1H
	DB	0cfH
	DB	0e5H
	DB	0ebH
	DB	0f9H
	DB	0f7H
	DB	04dH
	DB	043H
	DB	051H
	DB	05fH
	DB	075H
	DB	07bH
	DB	069H
	DB	067H
	DB	03dH
	DB	033H
	DB	021H
	DB	02fH
	DB	05H
	DB	0bH
	DB	019H
	DB	017H
	DB	076H
	DB	078H
	DB	06aH
	DB	064H
	DB	04eH
	DB	040H
	DB	052H
	DB	05cH
	DB	06H
	DB	08H
	DB	01aH
	DB	014H
	DB	03eH
	DB	030H
	DB	022H
	DB	02cH
	DB	096H
	DB	098H
	DB	08aH
	DB	084H
	DB	0aeH
	DB	0a0H
	DB	0b2H
	DB	0bcH
	DB	0e6H
	DB	0e8H
	DB	0faH
	DB	0f4H
	DB	0deH
	DB	0d0H
	DB	0c2H
	DB	0ccH
	DB	041H
	DB	04fH
	DB	05dH
	DB	053H
	DB	079H
	DB	077H
	DB	065H
	DB	06bH
	DB	031H
	DB	03fH
	DB	02dH
	DB	023H
	DB	09H
	DB	07H
	DB	015H
	DB	01bH
	DB	0a1H
	DB	0afH
	DB	0bdH
	DB	0b3H
	DB	099H
	DB	097H
	DB	085H
	DB	08bH
	DB	0d1H
	DB	0dfH
	DB	0cdH
	DB	0c3H
	DB	0e9H
	DB	0e7H
	DB	0f5H
	DB	0fbH
	DB	09aH
	DB	094H
	DB	086H
	DB	088H
	DB	0a2H
	DB	0acH
	DB	0beH
	DB	0b0H
	DB	0eaH
	DB	0e4H
	DB	0f6H
	DB	0f8H
	DB	0d2H
	DB	0dcH
	DB	0ceH
	DB	0c0H
	DB	07aH
	DB	074H
	DB	066H
	DB	068H
	DB	042H
	DB	04cH
	DB	05eH
	DB	050H
	DB	0aH
	DB	04H
	DB	016H
	DB	018H
	DB	032H
	DB	03cH
	DB	02eH
	DB	020H
	DB	0ecH
	DB	0e2H
	DB	0f0H
	DB	0feH
	DB	0d4H
	DB	0daH
	DB	0c8H
	DB	0c6H
	DB	09cH
	DB	092H
	DB	080H
	DB	08eH
	DB	0a4H
	DB	0aaH
	DB	0b8H
	DB	0b6H
	DB	0cH
	DB	02H
	DB	010H
	DB	01eH
	DB	034H
	DB	03aH
	DB	028H
	DB	026H
	DB	07cH
	DB	072H
	DB	060H
	DB	06eH
	DB	044H
	DB	04aH
	DB	058H
	DB	056H
	DB	037H
	DB	039H
	DB	02bH
	DB	025H
	DB	0fH
	DB	01H
	DB	013H
	DB	01dH
	DB	047H
	DB	049H
	DB	05bH
	DB	055H
	DB	07fH
	DB	071H
	DB	063H
	DB	06dH
	DB	0d7H
	DB	0d9H
	DB	0cbH
	DB	0c5H
	DB	0efH
	DB	0e1H
	DB	0f3H
	DB	0fdH
	DB	0a7H
	DB	0a9H
	DB	0bbH
	DB	0b5H
	DB	09fH
	DB	091H
	DB	083H
	DB	08dH
_DATA      ENDS
_TEXT      SEGMENT
	ASSUME	CS: _TEXT

xor_block	PROC NEAR	;  COMDAT
;|*** /*
;|***  ---------------------------------------------------------------------------
;|***  Copyright (c) 1998-2006, Brian Gladman, Worcester, UK. All rights reserved.
;|*** 
;|***  LICENSE TERMS
;|*** 
;|***  The free distribution and use of this software is allowed (with or without
;|***  changes) provided that:
;|*** 
;|***   1. source code distributions include the above copyright notice, this
;|***      list of conditions and the following disclaimer;
;|*** 
;|***   2. binary distributions include the above copyright notice, this list
;|***      of conditions and the following disclaimer in their documentation;
;|*** 
;|***   3. the name of the copyright holder is not used to endorse products
;|***      built using this software without specific written permission.
;|*** 
;|***  DISCLAIMER
;|*** 
;|***  This software is provided 'as is' with no explicit or implied warranties
;|***  in respect of its properties, including, but not limited to, correctness
;|***  and/or fitness for purpose.
;|***  ---------------------------------------------------------------------------
;|***  Issue 09/09/2006
;|*** 
;|***  This is an AES implementation that uses only 8-bit byte operations on the
;|***  cipher state (there are options to use 32-bit types if available).
;|*** 
;|***  The combination of mix columns and byte substitution used here is based on
;|***  that developed by Karl Malbrain. His contribution is acknowledged.
;|***  */
;|*** 
;|*** /* Adapted for CipherShed:
;|***   - Macro-generated tables were replaced with static data to enable compiling
;|***     with MSVC++ 1.5 which runs out of resources when expanding large macros.
;|*** */
;|*** 
;|*** #pragma optimize ("t", on)
;|*** 
;|*** /* define if you have a fast memcpy function on your system */
;|*** #if 1
;|*** #  define HAVE_MEMCPY
;|*** #  include <string.h>
;|*** #  if defined( _MSC_VER )
;|*** #    ifndef DEBUG
;|*** #      pragma intrinsic( memcpy )
;|*** #    endif
;|*** #  endif
;|*** #endif
;|*** 
;|*** /* define if you have fast 32-bit types on your system */
;|*** #if 1
;|*** #  define HAVE_UINT_32T
;|*** #endif
;|*** 
;|*** /* alternative versions (test for performance on your system) */
;|*** #if 0
;|*** #  define VERSION_1
;|*** #endif
;|*** 
;|*** #include "AesSmall.h"
;|*** 
;|*** #define WPOLY   0x011b
;|*** #define DPOLY   0x008d
;|*** #define f1(x)   (x)
;|*** #define f2(x)   ((x<<1) ^ (((x>>7) & 1) * WPOLY))
;|*** #define f4(x)   ((x<<2) ^ (((x>>6) & 1) * WPOLY) ^ (((x>>6) & 2) * WPOLY))
;|*** #define f8(x)   ((x<<3) ^ (((x>>5) & 1) * WPOLY) ^ (((x>>5) & 2) * WPOLY) \
;|***                         ^ (((x>>5) & 4) * WPOLY))
;|*** #define d2(x)   (((x) >> 1) ^ ((x) & 1 ? DPOLY : 0))
;|*** 
;|*** #define f3(x)   (f2(x) ^ x)
;|*** #define f9(x)   (f8(x) ^ x)
;|*** #define fb(x)   (f8(x) ^ f2(x) ^ x)
;|*** #define fd(x)   (f8(x) ^ f4(x) ^ x)
;|*** #define fe(x)   (f8(x) ^ f4(x) ^ f2(x))
;|*** 
;|*** static const uint_8t s_box[256] = {
;|*** 	0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,
;|*** 	0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
;|*** 	0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,
;|*** 	0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
;|*** 	0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,
;|*** 	0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
;|*** 	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,
;|*** 	0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
;|*** 	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,
;|*** 	0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
;|*** 	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,
;|*** 	0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
;|*** 	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,
;|*** 	0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
;|*** 	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,
;|*** 	0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
;|*** 	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,
;|*** 	0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
;|*** 	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,
;|*** 	0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
;|*** 	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,
;|*** 	0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
;|*** 	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,
;|*** 	0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
;|*** 	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,
;|*** 	0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
;|*** 	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,
;|*** 	0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
;|*** 	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,
;|*** 	0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
;|*** 	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,
;|*** 	0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
;|*** };
;|*** 
;|*** static const uint_8t inv_s_box[256] = {
;|*** 	0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,
;|*** 	0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
;|*** 	0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,
;|*** 	0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
;|*** 	0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,
;|*** 	0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
;|*** 	0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,
;|*** 	0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
;|*** 	0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,
;|*** 	0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
;|*** 	0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,
;|*** 	0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
;|*** 	0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,
;|*** 	0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
;|*** 	0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,
;|*** 	0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
;|*** 	0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,
;|*** 	0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
;|*** 	0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,
;|*** 	0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
;|*** 	0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,
;|*** 	0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
;|*** 	0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,
;|*** 	0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
;|*** 	0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,
;|*** 	0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
;|*** 	0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,
;|*** 	0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
;|*** 	0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,
;|*** 	0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
;|*** 	0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,
;|*** 	0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
;|*** };
;|*** 
;|*** static const uint_8t gfm2_s_box[256] = {
;|*** 	0xc6,0xf8,0xee,0xf6,0xff,0xd6,0xde,0x91,
;|*** 	0x60,0x02,0xce,0x56,0xe7,0xb5,0x4d,0xec,
;|*** 	0x8f,0x1f,0x89,0xfa,0xef,0xb2,0x8e,0xfb,
;|*** 	0x41,0xb3,0x5f,0x45,0x23,0x53,0xe4,0x9b,
;|*** 	0x75,0xe1,0x3d,0x4c,0x6c,0x7e,0xf5,0x83,
;|*** 	0x68,0x51,0xd1,0xf9,0xe2,0xab,0x62,0x2a,
;|*** 	0x08,0x95,0x46,0x9d,0x30,0x37,0x0a,0x2f,
;|*** 	0x0e,0x24,0x1b,0xdf,0xcd,0x4e,0x7f,0xea,
;|*** 	0x12,0x1d,0x58,0x34,0x36,0xdc,0xb4,0x5b,
;|*** 	0xa4,0x76,0xb7,0x7d,0x52,0xdd,0x5e,0x13,
;|*** 	0xa6,0xb9,0x00,0xc1,0x40,0xe3,0x79,0xb6,
;|*** 	0xd4,0x8d,0x67,0x72,0x94,0x98,0xb0,0x85,
;|*** 	0xbb,0xc5,0x4f,0xed,0x86,0x9a,0x66,0x11,
;|*** 	0x8a,0xe9,0x04,0xfe,0xa0,0x78,0x25,0x4b,
;|*** 	0xa2,0x5d,0x80,0x05,0x3f,0x21,0x70,0xf1,
;|*** 	0x63,0x77,0xaf,0x42,0x20,0xe5,0xfd,0xbf,
;|*** 	0x81,0x18,0x26,0xc3,0xbe,0x35,0x88,0x2e,
;|*** 	0x93,0x55,0xfc,0x7a,0xc8,0xba,0x32,0xe6,
;|*** 	0xc0,0x19,0x9e,0xa3,0x44,0x54,0x3b,0x0b,
;|*** 	0x8c,0xc7,0x6b,0x28,0xa7,0xbc,0x16,0xad,
;|*** 	0xdb,0x64,0x74,0x14,0x92,0x0c,0x48,0xb8,
;|*** 	0x9f,0xbd,0x43,0xc4,0x39,0x31,0xd3,0xf2,
;|*** 	0xd5,0x8b,0x6e,0xda,0x01,0xb1,0x9c,0x49,
;|*** 	0xd8,0xac,0xf3,0xcf,0xca,0xf4,0x47,0x10,
;|*** 	0x6f,0xf0,0x4a,0x5c,0x38,0x57,0x73,0x97,
;|*** 	0xcb,0xa1,0xe8,0x3e,0x96,0x61,0x0d,0x0f,
;|*** 	0xe0,0x7c,0x71,0xcc,0x90,0x06,0xf7,0x1c,
;|*** 	0xc2,0x6a,0xae,0x69,0x17,0x99,0x3a,0x27,
;|*** 	0xd9,0xeb,0x2b,0x22,0xd2,0xa9,0x07,0x33,
;|*** 	0x2d,0x3c,0x15,0xc9,0x87,0xaa,0x50,0xa5,
;|*** 	0x03,0x59,0x09,0x1a,0x65,0xd7,0x84,0xd0,
;|*** 	0x82,0x29,0x5a,0x1e,0x7b,0xa8,0x6d,0x2c
;|*** };
;|*** 
;|*** static const uint_8t gfm3_s_box[256] = {
;|*** 	0xa5,0x84,0x99,0x8d,0x0d,0xbd,0xb1,0x54,
;|*** 	0x50,0x03,0xa9,0x7d,0x19,0x62,0xe6,0x9a,
;|*** 	0x45,0x9d,0x40,0x87,0x15,0xeb,0xc9,0x0b,
;|*** 	0xec,0x67,0xfd,0xea,0xbf,0xf7,0x96,0x5b,
;|*** 	0xc2,0x1c,0xae,0x6a,0x5a,0x41,0x02,0x4f,
;|*** 	0x5c,0xf4,0x34,0x08,0x93,0x73,0x53,0x3f,
;|*** 	0x0c,0x52,0x65,0x5e,0x28,0xa1,0x0f,0xb5,
;|*** 	0x09,0x36,0x9b,0x3d,0x26,0x69,0xcd,0x9f,
;|*** 	0x1b,0x9e,0x74,0x2e,0x2d,0xb2,0xee,0xfb,
;|*** 	0xf6,0x4d,0x61,0xce,0x7b,0x3e,0x71,0x97,
;|*** 	0xf5,0x68,0x00,0x2c,0x60,0x1f,0xc8,0xed,
;|*** 	0xbe,0x46,0xd9,0x4b,0xde,0xd4,0xe8,0x4a,
;|*** 	0x6b,0x2a,0xe5,0x16,0xc5,0xd7,0x55,0x94,
;|*** 	0xcf,0x10,0x06,0x81,0xf0,0x44,0xba,0xe3,
;|*** 	0xf3,0xfe,0xc0,0x8a,0xad,0xbc,0x48,0x04,
;|*** 	0xdf,0xc1,0x75,0x63,0x30,0x1a,0x0e,0x6d,
;|*** 	0x4c,0x14,0x35,0x2f,0xe1,0xa2,0xcc,0x39,
;|*** 	0x57,0xf2,0x82,0x47,0xac,0xe7,0x2b,0x95,
;|*** 	0xa0,0x98,0xd1,0x7f,0x66,0x7e,0xab,0x83,
;|*** 	0xca,0x29,0xd3,0x3c,0x79,0xe2,0x1d,0x76,
;|*** 	0x3b,0x56,0x4e,0x1e,0xdb,0x0a,0x6c,0xe4,
;|*** 	0x5d,0x6e,0xef,0xa6,0xa8,0xa4,0x37,0x8b,
;|*** 	0x32,0x43,0x59,0xb7,0x8c,0x64,0xd2,0xe0,
;|*** 	0xb4,0xfa,0x07,0x25,0xaf,0x8e,0xe9,0x18,
;|*** 	0xd5,0x88,0x6f,0x72,0x24,0xf1,0xc7,0x51,
;|*** 	0x23,0x7c,0x9c,0x21,0xdd,0xdc,0x86,0x85,
;|*** 	0x90,0x42,0xc4,0xaa,0xd8,0x05,0x01,0x12,
;|*** 	0xa3,0x5f,0xf9,0xd0,0x91,0x58,0x27,0xb9,
;|*** 	0x38,0x13,0xb3,0x33,0xbb,0x70,0x89,0xa7,
;|*** 	0xb6,0x22,0x92,0x20,0x49,0xff,0x78,0x7a,
;|*** 	0x8f,0xf8,0x80,0x17,0xda,0x31,0xc6,0xb8,
;|*** 	0xc3,0xb0,0x77,0x11,0xcb,0xfc,0xd6,0x3a
;|*** };
;|*** 
;|*** static const uint_8t gfmul_9[256] = {
;|*** 	0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,
;|*** 	0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
;|*** 	0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,
;|*** 	0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
;|*** 	0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,
;|*** 	0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
;|*** 	0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,
;|*** 	0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
;|*** 	0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,
;|*** 	0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
;|*** 	0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,
;|*** 	0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
;|*** 	0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,
;|*** 	0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
;|*** 	0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,
;|*** 	0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
;|*** 	0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,
;|*** 	0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
;|*** 	0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,
;|*** 	0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
;|*** 	0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,
;|*** 	0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
;|*** 	0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,
;|*** 	0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
;|*** 	0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,
;|*** 	0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
;|*** 	0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,
;|*** 	0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
;|*** 	0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,
;|*** 	0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
;|*** 	0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,
;|*** 	0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
;|*** };
;|*** 
;|*** static const uint_8t gfmul_b[256] = {
;|*** 	0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,
;|*** 	0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
;|*** 	0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,
;|*** 	0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
;|*** 	0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,
;|*** 	0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
;|*** 	0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,
;|*** 	0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
;|*** 	0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,
;|*** 	0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
;|*** 	0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,
;|*** 	0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
;|*** 	0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,
;|*** 	0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
;|*** 	0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,
;|*** 	0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
;|*** 	0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,
;|*** 	0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
;|*** 	0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,
;|*** 	0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
;|*** 	0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,
;|*** 	0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
;|*** 	0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,
;|*** 	0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
;|*** 	0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,
;|*** 	0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
;|*** 	0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,
;|*** 	0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
;|*** 	0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,
;|*** 	0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
;|*** 	0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,
;|*** 	0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
;|*** };
;|*** 
;|*** static const uint_8t gfmul_d[256] = {
;|*** 	0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,
;|*** 	0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
;|*** 	0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,
;|*** 	0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
;|*** 	0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,
;|*** 	0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
;|*** 	0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,
;|*** 	0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
;|*** 	0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,
;|*** 	0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
;|*** 	0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,
;|*** 	0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
;|*** 	0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,
;|*** 	0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
;|*** 	0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,
;|*** 	0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
;|*** 	0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,
;|*** 	0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
;|*** 	0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,
;|*** 	0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
;|*** 	0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,
;|*** 	0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
;|*** 	0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,
;|*** 	0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
;|*** 	0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,
;|*** 	0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
;|*** 	0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,
;|*** 	0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
;|*** 	0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,
;|*** 	0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
;|*** 	0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,
;|*** 	0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
;|*** };
;|*** 
;|*** static const uint_8t gfmul_e[256] = {
;|*** 	0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,
;|*** 	0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
;|*** 	0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,
;|*** 	0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
;|*** 	0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,
;|*** 	0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
;|*** 	0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,
;|*** 	0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
;|*** 	0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,
;|*** 	0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
;|*** 	0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,
;|*** 	0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
;|*** 	0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,
;|*** 	0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
;|*** 	0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,
;|*** 	0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
;|*** 	0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,
;|*** 	0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
;|*** 	0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,
;|*** 	0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
;|*** 	0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,
;|*** 	0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
;|*** 	0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,
;|*** 	0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
;|*** 	0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,
;|*** 	0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
;|*** 	0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,
;|*** 	0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
;|*** 	0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,
;|*** 	0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
;|*** 	0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,
;|*** 	0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
;|*** };
;|*** 
;|*** #if defined( HAVE_UINT_32T )
;|***   typedef unsigned long uint_32t;
;|*** #endif
;|*** 
;|*** #if defined( HAVE_MEMCPY )
;|*** #  define block_copy(d, s, l) memcpy(d, s, l)
;|*** #  define block16_copy(d, s)  memcpy(d, s, N_BLOCK)
;|*** #else
;|*** #  define block_copy(d, s, l) copy_block(d, s, l)
;|*** #  define block16_copy(d, s)  copy_block16(d, s)
;|*** #endif
;|*** 
;|*** /* block size 'nn' must be a multiple of four */
;|*** 
;|*** static void copy_block16( void *d, const void *s )
;|*** {
;|*** #if defined( HAVE_UINT_32T )
;|***     ((uint_32t*)d)[ 0] = ((uint_32t*)s)[ 0];
;|***     ((uint_32t*)d)[ 1] = ((uint_32t*)s)[ 1];
;|***     ((uint_32t*)d)[ 2] = ((uint_32t*)s)[ 2];
;|***     ((uint_32t*)d)[ 3] = ((uint_32t*)s)[ 3];
;|*** #else
;|***     ((uint_8t*)d)[ 0] = ((uint_8t*)s)[ 0];
;|***     ((uint_8t*)d)[ 1] = ((uint_8t*)s)[ 1];
;|***     ((uint_8t*)d)[ 2] = ((uint_8t*)s)[ 2];
;|***     ((uint_8t*)d)[ 3] = ((uint_8t*)s)[ 3];
;|***     ((uint_8t*)d)[ 4] = ((uint_8t*)s)[ 4];
;|***     ((uint_8t*)d)[ 5] = ((uint_8t*)s)[ 5];
;|***     ((uint_8t*)d)[ 6] = ((uint_8t*)s)[ 6];
;|***     ((uint_8t*)d)[ 7] = ((uint_8t*)s)[ 7];
;|***     ((uint_8t*)d)[ 8] = ((uint_8t*)s)[ 8];
;|***     ((uint_8t*)d)[ 9] = ((uint_8t*)s)[ 9];
;|***     ((uint_8t*)d)[10] = ((uint_8t*)s)[10];
;|***     ((uint_8t*)d)[11] = ((uint_8t*)s)[11];
;|***     ((uint_8t*)d)[12] = ((uint_8t*)s)[12];
;|***     ((uint_8t*)d)[13] = ((uint_8t*)s)[13];
;|***     ((uint_8t*)d)[14] = ((uint_8t*)s)[14];
;|***     ((uint_8t*)d)[15] = ((uint_8t*)s)[15];
;|*** #endif
;|*** }
;|*** 
;|*** static void copy_block( void * d, void *s, uint_8t nn )
;|*** {
;|***     while( nn-- )
;|***         *((uint_8t*)d)++ = *((uint_8t*)s)++;
;|*** }
;|*** 
;|*** static void xor_block( void *d, const void *s )
;|*** {
; Line 407
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
;	d = 4
;	s = 6
	*** 000004	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;s
	*** 000007	8b 7e 04 		mov	di,WORD PTR [bp+4]	;d
;|*** #if defined( HAVE_UINT_32T )
;|***     ((uint_32t*)d)[ 0] ^= ((uint_32t*)s)[ 0];
; Line 409
	*** 00000a	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 00000d	66 31 05 		xor	DWORD PTR [di],eax
;|***     ((uint_32t*)d)[ 1] ^= ((uint_32t*)s)[ 1];
; Line 410
	*** 000010	66 8b 47 04 		mov	eax,DWORD PTR [bx+4]
	*** 000014	66 31 45 04 		xor	DWORD PTR [di+4],eax
;|***     ((uint_32t*)d)[ 2] ^= ((uint_32t*)s)[ 2];
; Line 411
	*** 000018	66 8b 47 08 		mov	eax,DWORD PTR [bx+8]
	*** 00001c	66 31 45 08 		xor	DWORD PTR [di+8],eax
;|***     ((uint_32t*)d)[ 3] ^= ((uint_32t*)s)[ 3];
; Line 412
	*** 000020	66 8b 47 0c 		mov	eax,DWORD PTR [bx+12]
	*** 000024	66 31 45 0c 		xor	DWORD PTR [di+12],eax
;|*** #else
;|***     ((uint_8t*)d)[ 0] ^= ((uint_8t*)s)[ 0];
;|***     ((uint_8t*)d)[ 1] ^= ((uint_8t*)s)[ 1];
;|***     ((uint_8t*)d)[ 2] ^= ((uint_8t*)s)[ 2];
;|***     ((uint_8t*)d)[ 3] ^= ((uint_8t*)s)[ 3];
;|***     ((uint_8t*)d)[ 4] ^= ((uint_8t*)s)[ 4];
;|***     ((uint_8t*)d)[ 5] ^= ((uint_8t*)s)[ 5];
;|***     ((uint_8t*)d)[ 6] ^= ((uint_8t*)s)[ 6];
;|***     ((uint_8t*)d)[ 7] ^= ((uint_8t*)s)[ 7];
;|***     ((uint_8t*)d)[ 8] ^= ((uint_8t*)s)[ 8];
;|***     ((uint_8t*)d)[ 9] ^= ((uint_8t*)s)[ 9];
;|***     ((uint_8t*)d)[10] ^= ((uint_8t*)s)[10];
;|***     ((uint_8t*)d)[11] ^= ((uint_8t*)s)[11];
;|***     ((uint_8t*)d)[12] ^= ((uint_8t*)s)[12];
;|***     ((uint_8t*)d)[13] ^= ((uint_8t*)s)[13];
;|***     ((uint_8t*)d)[14] ^= ((uint_8t*)s)[14];
;|***     ((uint_8t*)d)[15] ^= ((uint_8t*)s)[15];
;|*** #endif
;|*** }
; Line 431
	*** 000028	5f 			pop	di
	*** 000029	c9 			leave	
	*** 00002a	c3 			ret	

xor_block	ENDP

copy_and_key	PROC NEAR	;  COMDAT
;|*** 
;|*** static void copy_and_key( void *d, const void *s, const void *k )
;|*** {
; Line 434
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
	*** 000004	56 			push	si
;	d = 4
;	s = 6
;	k = 8
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;d
	*** 000008	8b 7e 08 		mov	di,WORD PTR [bp+8]	;k
	*** 00000b	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;s
;|*** #if defined( HAVE_UINT_32T )
;|***     ((uint_32t*)d)[ 0] = ((uint_32t*)s)[ 0] ^ ((uint_32t*)k)[ 0];
; Line 436
	*** 00000e	66 8b 05 		mov	eax,DWORD PTR [di]
	*** 000011	66 33 07 		xor	eax,DWORD PTR [bx]
	*** 000014	66 89 04 		mov	DWORD PTR [si],eax
;|***     ((uint_32t*)d)[ 1] = ((uint_32t*)s)[ 1] ^ ((uint_32t*)k)[ 1];
; Line 437
	*** 000017	66 8b 45 04 		mov	eax,DWORD PTR [di+4]
	*** 00001b	66 33 47 04 		xor	eax,DWORD PTR [bx+4]
	*** 00001f	66 89 44 04 		mov	DWORD PTR [si+4],eax
;|***     ((uint_32t*)d)[ 2] = ((uint_32t*)s)[ 2] ^ ((uint_32t*)k)[ 2];
; Line 438
	*** 000023	66 8b 45 08 		mov	eax,DWORD PTR [di+8]
	*** 000027	66 33 47 08 		xor	eax,DWORD PTR [bx+8]
	*** 00002b	66 89 44 08 		mov	DWORD PTR [si+8],eax
;|***     ((uint_32t*)d)[ 3] = ((uint_32t*)s)[ 3] ^ ((uint_32t*)k)[ 3];
; Line 439
	*** 00002f	66 8b 45 0c 		mov	eax,DWORD PTR [di+12]
	*** 000033	66 33 47 0c 		xor	eax,DWORD PTR [bx+12]
	*** 000037	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** #elif 1
;|***     ((uint_8t*)d)[ 0] = ((uint_8t*)s)[ 0] ^ ((uint_8t*)k)[ 0];
;|***     ((uint_8t*)d)[ 1] = ((uint_8t*)s)[ 1] ^ ((uint_8t*)k)[ 1];
;|***     ((uint_8t*)d)[ 2] = ((uint_8t*)s)[ 2] ^ ((uint_8t*)k)[ 2];
;|***     ((uint_8t*)d)[ 3] = ((uint_8t*)s)[ 3] ^ ((uint_8t*)k)[ 3];
;|***     ((uint_8t*)d)[ 4] = ((uint_8t*)s)[ 4] ^ ((uint_8t*)k)[ 4];
;|***     ((uint_8t*)d)[ 5] = ((uint_8t*)s)[ 5] ^ ((uint_8t*)k)[ 5];
;|***     ((uint_8t*)d)[ 6] = ((uint_8t*)s)[ 6] ^ ((uint_8t*)k)[ 6];
;|***     ((uint_8t*)d)[ 7] = ((uint_8t*)s)[ 7] ^ ((uint_8t*)k)[ 7];
;|***     ((uint_8t*)d)[ 8] = ((uint_8t*)s)[ 8] ^ ((uint_8t*)k)[ 8];
;|***     ((uint_8t*)d)[ 9] = ((uint_8t*)s)[ 9] ^ ((uint_8t*)k)[ 9];
;|***     ((uint_8t*)d)[10] = ((uint_8t*)s)[10] ^ ((uint_8t*)k)[10];
;|***     ((uint_8t*)d)[11] = ((uint_8t*)s)[11] ^ ((uint_8t*)k)[11];
;|***     ((uint_8t*)d)[12] = ((uint_8t*)s)[12] ^ ((uint_8t*)k)[12];
;|***     ((uint_8t*)d)[13] = ((uint_8t*)s)[13] ^ ((uint_8t*)k)[13];
;|***     ((uint_8t*)d)[14] = ((uint_8t*)s)[14] ^ ((uint_8t*)k)[14];
;|***     ((uint_8t*)d)[15] = ((uint_8t*)s)[15] ^ ((uint_8t*)k)[15];
;|*** #else
;|***     block16_copy(d, s);
;|***     xor_block(d, k);
;|*** #endif
;|*** }
; Line 461
	*** 00003b	5e 			pop	si
	*** 00003c	5f 			pop	di
	*** 00003d	c9 			leave	
	*** 00003e	c3 			ret	

copy_and_key	ENDP

shift_sub_rows	PROC NEAR	;  COMDAT
;|*** 
;|*** static void add_round_key( uint_8t d[N_BLOCK], const uint_8t k[N_BLOCK] )
;|*** {
;|***     xor_block(d, k);
;|*** }
;|*** 
;|*** static void shift_sub_rows( uint_8t st[N_BLOCK] )
;|*** {   uint_8t tt;
; Line 469
	*** 000000	c8 02 00 00 		enter	2,0
	*** 000004	56 			push	si
;	tt = -1
;	st = 4
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;st
;|*** 
;|***     st[ 0] = s_box[st[ 0]]; st[ 4] = s_box[st[ 4]];
; Line 471
	*** 000008	2a ff 			sub	bh,bh
	*** 00000a	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00000c	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000010	88 04 			mov	BYTE PTR [si],al
	*** 000012	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 000015	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000019	88 44 04 		mov	BYTE PTR [si+4],al
;|***     st[ 8] = s_box[st[ 8]]; st[12] = s_box[st[12]];
; Line 472
	*** 00001c	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00001f	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000023	88 44 08 		mov	BYTE PTR [si+8],al
	*** 000026	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 000029	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00002d	88 44 0c 		mov	BYTE PTR [si+12],al
;|*** 
;|***     tt = st[1]; st[ 1] = s_box[st[ 5]]; st[ 5] = s_box[st[ 9]];
; Line 474
	*** 000030	8a 44 01 		mov	al,BYTE PTR [si+1]
	*** 000033	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000036	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000039	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00003d	88 44 01 		mov	BYTE PTR [si+1],al
	*** 000040	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 000043	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000047	88 44 05 		mov	BYTE PTR [si+5],al
;|***     st[ 9] = s_box[st[13]]; st[13] = s_box[ tt ];
; Line 475
	*** 00004a	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 00004d	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000051	88 44 09 		mov	BYTE PTR [si+9],al
	*** 000054	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 000057	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00005b	88 44 0d 		mov	BYTE PTR [si+13],al
;|*** 
;|***     tt = st[2]; st[ 2] = s_box[st[10]]; st[10] = s_box[ tt ];
; Line 477
	*** 00005e	8a 44 02 		mov	al,BYTE PTR [si+2]
	*** 000061	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000064	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 000067	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00006b	88 44 02 		mov	BYTE PTR [si+2],al
	*** 00006e	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 000071	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000075	88 44 0a 		mov	BYTE PTR [si+10],al
;|***     tt = st[6]; st[ 6] = s_box[st[14]]; st[14] = s_box[ tt ];
; Line 478
	*** 000078	8a 44 06 		mov	al,BYTE PTR [si+6]
	*** 00007b	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 00007e	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000081	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000085	88 44 06 		mov	BYTE PTR [si+6],al
	*** 000088	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 00008b	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00008f	88 44 0e 		mov	BYTE PTR [si+14],al
;|*** 
;|***     tt = st[15]; st[15] = s_box[st[11]]; st[11] = s_box[st[ 7]];
; Line 480
	*** 000092	8a 44 0f 		mov	al,BYTE PTR [si+15]
	*** 000095	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000098	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 00009b	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00009f	88 44 0f 		mov	BYTE PTR [si+15],al
	*** 0000a2	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 0000a5	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000a9	88 44 0b 		mov	BYTE PTR [si+11],al
;|***     st[ 7] = s_box[st[ 3]]; st[ 3] = s_box[ tt ];
; Line 481
	*** 0000ac	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 0000af	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000b3	88 44 07 		mov	BYTE PTR [si+7],al
	*** 0000b6	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 0000b9	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000bd	88 44 03 		mov	BYTE PTR [si+3],al
;|*** }
; Line 482
	*** 0000c0	5e 			pop	si
	*** 0000c1	c9 			leave	
	*** 0000c2	c3 			ret	

shift_sub_rows	ENDP

inv_shift_sub_rows	PROC NEAR	;  COMDAT
;|*** 
;|*** static void inv_shift_sub_rows( uint_8t st[N_BLOCK] )
;|*** {   uint_8t tt;
; Line 485
	*** 000000	c8 02 00 00 		enter	2,0
	*** 000004	56 			push	si
;	st = 4
;	tt = -1
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;st
;|*** 
;|***     st[ 0] = inv_s_box[st[ 0]]; st[ 4] = inv_s_box[st[ 4]];
; Line 487
	*** 000008	2a ff 			sub	bh,bh
	*** 00000a	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00000c	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000010	88 04 			mov	BYTE PTR [si],al
	*** 000012	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 000015	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000019	88 44 04 		mov	BYTE PTR [si+4],al
;|***     st[ 8] = inv_s_box[st[ 8]]; st[12] = inv_s_box[st[12]];
; Line 488
	*** 00001c	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00001f	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000023	88 44 08 		mov	BYTE PTR [si+8],al
	*** 000026	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 000029	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00002d	88 44 0c 		mov	BYTE PTR [si+12],al
;|*** 
;|***     tt = st[13]; st[13] = inv_s_box[st[9]]; st[ 9] = inv_s_box[st[5]];
; Line 490
	*** 000030	8a 44 0d 		mov	al,BYTE PTR [si+13]
	*** 000033	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000036	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 000039	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00003d	88 44 0d 		mov	BYTE PTR [si+13],al
	*** 000040	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000043	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000047	88 44 09 		mov	BYTE PTR [si+9],al
;|***     st[ 5] = inv_s_box[st[1]]; st[ 1] = inv_s_box[ tt ];
; Line 491
	*** 00004a	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 00004d	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000051	88 44 05 		mov	BYTE PTR [si+5],al
	*** 000054	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 000057	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00005b	88 44 01 		mov	BYTE PTR [si+1],al
;|*** 
;|***     tt = st[2]; st[ 2] = inv_s_box[st[10]]; st[10] = inv_s_box[ tt ];
; Line 493
	*** 00005e	8a 44 02 		mov	al,BYTE PTR [si+2]
	*** 000061	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000064	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 000067	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00006b	88 44 02 		mov	BYTE PTR [si+2],al
	*** 00006e	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 000071	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000075	88 44 0a 		mov	BYTE PTR [si+10],al
;|***     tt = st[6]; st[ 6] = inv_s_box[st[14]]; st[14] = inv_s_box[ tt ];
; Line 494
	*** 000078	8a 44 06 		mov	al,BYTE PTR [si+6]
	*** 00007b	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 00007e	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000081	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000085	88 44 06 		mov	BYTE PTR [si+6],al
	*** 000088	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 00008b	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00008f	88 44 0e 		mov	BYTE PTR [si+14],al
;|*** 
;|***     tt = st[3]; st[ 3] = inv_s_box[st[ 7]]; st[ 7] = inv_s_box[st[11]];
; Line 496
	*** 000092	8a 44 03 		mov	al,BYTE PTR [si+3]
	*** 000095	88 46 ff 		mov	BYTE PTR [bp-1],al	;tt
	*** 000098	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 00009b	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00009f	88 44 03 		mov	BYTE PTR [si+3],al
	*** 0000a2	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 0000a5	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000a9	88 44 07 		mov	BYTE PTR [si+7],al
;|***     st[11] = inv_s_box[st[15]]; st[15] = inv_s_box[ tt ];
; Line 497
	*** 0000ac	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 0000af	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000b3	88 44 0b 		mov	BYTE PTR [si+11],al
	*** 0000b6	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;tt
	*** 0000b9	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000bd	88 44 0f 		mov	BYTE PTR [si+15],al
;|*** }
; Line 498
	*** 0000c0	5e 			pop	si
	*** 0000c1	c9 			leave	
	*** 0000c2	c3 			ret	

inv_shift_sub_rows	ENDP

mix_sub_columns	PROC NEAR	;  COMDAT
;|*** 
;|*** #if defined( VERSION_1 )
;|***   static void mix_sub_columns( uint_8t dt[N_BLOCK] )
;|***   { uint_8t st[N_BLOCK];
;|***     block16_copy(st, dt);
;|*** #else
;|***   static void mix_sub_columns( uint_8t dt[N_BLOCK], uint_8t st[N_BLOCK] )
;|***   {
; Line 506
	*** 000000	c8 02 00 00 		enter	2,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	dt = 4
;	st = 6
	*** 000006	8b 76 06 		mov	si,WORD PTR [bp+6]	;st
	*** 000009	8b 7e 04 		mov	di,WORD PTR [bp+4]	;dt
;|*** #endif
;|***     dt[ 0] = gfm2_s_box[st[0]] ^ gfm3_s_box[st[5]] ^ s_box[st[10]] ^ s_box[st[15]];
; Line 508
	*** 00000c	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00000e	8b c3 			mov	ax,bx
	*** 000010	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000013	8b cb 			mov	cx,bx
	*** 000015	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 000018	8b d3 			mov	dx,bx
	*** 00001a	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 00001d	2a ff 			sub	bh,bh
	*** 00001f	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 000022	8a 87 00 00 		mov	al,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000026	8a da 			mov	bl,dl
	*** 000028	32 87 00 00 		xor	al,BYTE PTR $S206_s_box[bx]
	*** 00002c	8a d9 			mov	bl,cl
	*** 00002e	32 87 00 00 		xor	al,BYTE PTR $S206_s_box[bx]
	*** 000032	8a 5e fe 		mov	bl,BYTE PTR [bp-2]
	*** 000035	32 87 00 00 		xor	al,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000039	88 05 			mov	BYTE PTR [di],al
;|***     dt[ 1] = s_box[st[0]] ^ gfm2_s_box[st[5]] ^ gfm3_s_box[st[10]] ^ s_box[st[15]];
; Line 509
	*** 00003b	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00003d	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000041	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000044	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 000048	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 00004b	8a 97 00 00 		mov	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 00004f	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000052	32 97 00 00 		xor	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000056	32 ca 			xor	cl,dl
	*** 000058	32 c1 			xor	al,cl
	*** 00005a	88 45 01 		mov	BYTE PTR [di+1],al
;|***     dt[ 2] = s_box[st[0]] ^ s_box[st[5]] ^ gfm2_s_box[st[10]] ^ gfm3_s_box[st[15]];
; Line 510
	*** 00005d	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00005f	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000063	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000066	8a 8f 00 00 		mov	cl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 00006a	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 00006d	8a 97 00 00 		mov	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000071	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000074	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 000078	32 ca 			xor	cl,dl
	*** 00007a	32 c1 			xor	al,cl
	*** 00007c	88 45 02 		mov	BYTE PTR [di+2],al
;|***     dt[ 3] = gfm3_s_box[st[0]] ^ s_box[st[5]] ^ s_box[st[10]] ^ gfm2_s_box[st[15]];
; Line 511
	*** 00007f	8a 1c 			mov	bl,BYTE PTR [si]
	*** 000081	8a 87 00 00 		mov	al,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000085	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000088	8a 8f 00 00 		mov	cl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 00008c	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 00008f	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 000093	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000096	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 00009a	32 ca 			xor	cl,dl
	*** 00009c	32 c1 			xor	al,cl
	*** 00009e	88 45 03 		mov	BYTE PTR [di+3],al
;|*** 
;|***     dt[ 4] = gfm2_s_box[st[4]] ^ gfm3_s_box[st[9]] ^ s_box[st[14]] ^ s_box[st[3]];
; Line 513
	*** 0000a1	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 0000a4	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000a8	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 0000ab	8a 8f 00 00 		mov	cl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 0000af	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 0000b2	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 0000b6	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 0000b9	32 97 00 00 		xor	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0000bd	32 ca 			xor	cl,dl
	*** 0000bf	32 c1 			xor	al,cl
	*** 0000c1	88 45 04 		mov	BYTE PTR [di+4],al
;|***     dt[ 5] = s_box[st[4]] ^ gfm2_s_box[st[9]] ^ gfm3_s_box[st[14]] ^ s_box[st[3]];
; Line 514
	*** 0000c4	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 0000c7	8a 87 00 00 		mov	al,BYTE PTR $S209_gfm3_s_box[bx]
	*** 0000cb	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 0000ce	8a 8f 00 00 		mov	cl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0000d2	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 0000d5	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 0000d9	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 0000dc	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 0000e0	32 ca 			xor	cl,dl
	*** 0000e2	32 c1 			xor	al,cl
	*** 0000e4	88 45 05 		mov	BYTE PTR [di+5],al
;|***     dt[ 6] = s_box[st[4]] ^ s_box[st[9]] ^ gfm2_s_box[st[14]] ^ gfm3_s_box[st[3]];
; Line 515
	*** 0000e7	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 0000ea	8a 87 00 00 		mov	al,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0000ee	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 0000f1	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 0000f5	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 0000f8	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 0000fc	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 0000ff	32 97 00 00 		xor	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000103	32 ca 			xor	cl,dl
	*** 000105	32 c1 			xor	al,cl
	*** 000107	88 45 06 		mov	BYTE PTR [di+6],al
;|***     dt[ 7] = gfm3_s_box[st[4]] ^ s_box[st[9]] ^ s_box[st[14]] ^ gfm2_s_box[st[3]];
; Line 516
	*** 00010a	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 00010d	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000111	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 000114	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 000118	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 00011b	8a 97 00 00 		mov	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 00011f	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 000122	32 97 00 00 		xor	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000126	32 ca 			xor	cl,dl
	*** 000128	32 c1 			xor	al,cl
	*** 00012a	88 45 07 		mov	BYTE PTR [di+7],al
;|*** 
;|***     dt[ 8] = gfm2_s_box[st[8]] ^ gfm3_s_box[st[13]] ^ s_box[st[2]] ^ s_box[st[7]];
; Line 518
	*** 00012d	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000130	8a 87 00 00 		mov	al,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000134	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 000137	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 00013b	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00013e	8a 97 00 00 		mov	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000142	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 000145	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 000149	32 ca 			xor	cl,dl
	*** 00014b	32 c1 			xor	al,cl
	*** 00014d	88 45 08 		mov	BYTE PTR [di+8],al
;|***     dt[ 9] = s_box[st[8]] ^ gfm2_s_box[st[13]] ^ gfm3_s_box[st[2]] ^ s_box[st[7]];
; Line 519
	*** 000150	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000153	8a 87 00 00 		mov	al,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000157	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00015a	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 00015e	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 000161	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 000165	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 000168	32 97 00 00 		xor	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 00016c	32 ca 			xor	cl,dl
	*** 00016e	32 c1 			xor	al,cl
	*** 000170	88 45 09 		mov	BYTE PTR [di+9],al
;|***     dt[10] = s_box[st[8]] ^ s_box[st[13]] ^ gfm2_s_box[st[2]] ^ gfm3_s_box[st[7]];
; Line 520
	*** 000173	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000176	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00017a	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00017d	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 000181	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 000184	8a 97 00 00 		mov	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000188	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 00018b	32 97 00 00 		xor	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 00018f	32 ca 			xor	cl,dl
	*** 000191	32 c1 			xor	al,cl
	*** 000193	88 45 0a 		mov	BYTE PTR [di+10],al
;|***     dt[11] = gfm3_s_box[st[8]] ^ s_box[st[13]] ^ s_box[st[2]] ^ gfm2_s_box[st[7]];
; Line 521
	*** 000196	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000199	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00019d	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 0001a0	8a 8f 00 00 		mov	cl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0001a4	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 0001a7	8a 97 00 00 		mov	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 0001ab	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 0001ae	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 0001b2	32 ca 			xor	cl,dl
	*** 0001b4	32 c1 			xor	al,cl
	*** 0001b6	88 45 0b 		mov	BYTE PTR [di+11],al
;|*** 
;|***     dt[12] = gfm2_s_box[st[12]] ^ gfm3_s_box[st[1]] ^ s_box[st[6]] ^ s_box[st[11]];
; Line 523
	*** 0001b9	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 0001bc	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0001c0	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 0001c3	8a 8f 00 00 		mov	cl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0001c7	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 0001ca	8a 97 00 00 		mov	dl,BYTE PTR $S206_s_box[bx]
	*** 0001ce	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 0001d1	32 97 00 00 		xor	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 0001d5	32 ca 			xor	cl,dl
	*** 0001d7	32 c1 			xor	al,cl
	*** 0001d9	88 45 0c 		mov	BYTE PTR [di+12],al
;|***     dt[13] = s_box[st[12]] ^ gfm2_s_box[st[1]] ^ gfm3_s_box[st[6]] ^ s_box[st[11]];
; Line 524
	*** 0001dc	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 0001df	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0001e3	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 0001e6	8a 8f 00 00 		mov	cl,BYTE PTR $S206_s_box[bx]
	*** 0001ea	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 0001ed	8a 97 00 00 		mov	dl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 0001f1	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 0001f4	32 97 00 00 		xor	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 0001f8	32 ca 			xor	cl,dl
	*** 0001fa	32 c1 			xor	al,cl
	*** 0001fc	88 45 0d 		mov	BYTE PTR [di+13],al
;|***     dt[14] = s_box[st[12]] ^ s_box[st[1]] ^ gfm2_s_box[st[6]] ^ gfm3_s_box[st[11]];
; Line 525
	*** 0001ff	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 000202	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000206	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 000209	8a 8f 00 00 		mov	cl,BYTE PTR $S209_gfm3_s_box[bx]
	*** 00020d	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 000210	8a 97 00 00 		mov	dl,BYTE PTR $S208_gfm2_s_box[bx]
	*** 000214	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 000217	32 97 00 00 		xor	dl,BYTE PTR $S206_s_box[bx]
	*** 00021b	32 ca 			xor	cl,dl
	*** 00021d	32 c1 			xor	al,cl
	*** 00021f	88 45 0e 		mov	BYTE PTR [di+14],al
;|***     dt[15] = gfm3_s_box[st[12]] ^ s_box[st[1]] ^ s_box[st[6]] ^ gfm2_s_box[st[11]];
; Line 526
	*** 000222	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 000225	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000229	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 00022c	32 87 00 00 		xor	al,BYTE PTR $S206_s_box[bx]
	*** 000230	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 000233	32 87 00 00 		xor	al,BYTE PTR $S209_gfm3_s_box[bx]
	*** 000237	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 00023a	32 87 00 00 		xor	al,BYTE PTR $S208_gfm2_s_box[bx]
	*** 00023e	88 45 0f 		mov	BYTE PTR [di+15],al
;|***   }
; Line 527
	*** 000241	5e 			pop	si
	*** 000242	5f 			pop	di
	*** 000243	c9 			leave	
	*** 000244	c3 			ret	

mix_sub_columns	ENDP

inv_mix_sub_columns	PROC NEAR	;  COMDAT
;|*** 
;|*** #if defined( VERSION_1 )
;|***   static void inv_mix_sub_columns( uint_8t dt[N_BLOCK] )
;|***   { uint_8t st[N_BLOCK];
;|***     block16_copy(st, dt);
;|*** #else
;|***   static void inv_mix_sub_columns( uint_8t dt[N_BLOCK], uint_8t st[N_BLOCK] )
;|***   {
; Line 535
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
	*** 000004	56 			push	si
;	dt = 4
;	st = 6
	*** 000005	8b 76 06 		mov	si,WORD PTR [bp+6]	;st
	*** 000008	8b 7e 04 		mov	di,WORD PTR [bp+4]	;dt
;|*** #endif
;|***     dt[ 0] = inv_s_box[gfmul_e[st[ 0]] ^ gfmul_b[st[ 1]] ^ gfmul_d[st[ 2]] ^ gfmul_9[st[ 3]]];
; Line 537
	*** 00000b	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00000d	2a ff 			sub	bh,bh
	*** 00000f	8a 87 00 00 		mov	al,BYTE PTR $S213_gfmul_e[bx]
	*** 000013	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 000016	8a 8f 00 00 		mov	cl,BYTE PTR $S210_gfmul_9[bx]
	*** 00001a	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 00001d	8a 97 00 00 		mov	dl,BYTE PTR $S212_gfmul_d[bx]
	*** 000021	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 000024	8a 9f 00 00 		mov	bl,BYTE PTR $S211_gfmul_b[bx]
	*** 000028	32 da 			xor	bl,dl
	*** 00002a	32 d9 			xor	bl,cl
	*** 00002c	32 d8 			xor	bl,al
	*** 00002e	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000032	88 05 			mov	BYTE PTR [di],al
;|***     dt[ 5] = inv_s_box[gfmul_9[st[ 0]] ^ gfmul_e[st[ 1]] ^ gfmul_b[st[ 2]] ^ gfmul_d[st[ 3]]];
; Line 538
	*** 000034	8a 1c 			mov	bl,BYTE PTR [si]
	*** 000036	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 00003a	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 00003d	8a 8f 00 00 		mov	cl,BYTE PTR $S212_gfmul_d[bx]
	*** 000041	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 000044	8a 97 00 00 		mov	dl,BYTE PTR $S211_gfmul_b[bx]
	*** 000048	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 00004b	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 00004f	32 da 			xor	bl,dl
	*** 000051	32 d9 			xor	bl,cl
	*** 000053	32 d8 			xor	bl,al
	*** 000055	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000059	88 45 05 		mov	BYTE PTR [di+5],al
;|***     dt[10] = inv_s_box[gfmul_d[st[ 0]] ^ gfmul_9[st[ 1]] ^ gfmul_e[st[ 2]] ^ gfmul_b[st[ 3]]];
; Line 539
	*** 00005c	8a 1c 			mov	bl,BYTE PTR [si]
	*** 00005e	8a 87 00 00 		mov	al,BYTE PTR $S212_gfmul_d[bx]
	*** 000062	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 000065	8a 8f 00 00 		mov	cl,BYTE PTR $S211_gfmul_b[bx]
	*** 000069	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 00006c	8a 97 00 00 		mov	dl,BYTE PTR $S210_gfmul_9[bx]
	*** 000070	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 000073	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 000077	32 da 			xor	bl,dl
	*** 000079	32 d9 			xor	bl,cl
	*** 00007b	32 d8 			xor	bl,al
	*** 00007d	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000081	88 45 0a 		mov	BYTE PTR [di+10],al
;|***     dt[15] = inv_s_box[gfmul_b[st[ 0]] ^ gfmul_d[st[ 1]] ^ gfmul_9[st[ 2]] ^ gfmul_e[st[ 3]]];
; Line 540
	*** 000084	8a 1c 			mov	bl,BYTE PTR [si]
	*** 000086	8a 87 00 00 		mov	al,BYTE PTR $S211_gfmul_b[bx]
	*** 00008a	8a 5c 02 		mov	bl,BYTE PTR [si+2]
	*** 00008d	8a 8f 00 00 		mov	cl,BYTE PTR $S210_gfmul_9[bx]
	*** 000091	8a 5c 03 		mov	bl,BYTE PTR [si+3]
	*** 000094	8a 97 00 00 		mov	dl,BYTE PTR $S213_gfmul_e[bx]
	*** 000098	8a 5c 01 		mov	bl,BYTE PTR [si+1]
	*** 00009b	8a 9f 00 00 		mov	bl,BYTE PTR $S212_gfmul_d[bx]
	*** 00009f	32 da 			xor	bl,dl
	*** 0000a1	32 d9 			xor	bl,cl
	*** 0000a3	32 d8 			xor	bl,al
	*** 0000a5	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000a9	88 45 0f 		mov	BYTE PTR [di+15],al
;|*** 
;|***     dt[ 4] = inv_s_box[gfmul_e[st[ 4]] ^ gfmul_b[st[ 5]] ^ gfmul_d[st[ 6]] ^ gfmul_9[st[ 7]]];
; Line 542
	*** 0000ac	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 0000af	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 0000b3	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 0000b6	8a 8f 00 00 		mov	cl,BYTE PTR $S212_gfmul_d[bx]
	*** 0000ba	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 0000bd	8a 97 00 00 		mov	dl,BYTE PTR $S211_gfmul_b[bx]
	*** 0000c1	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 0000c4	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 0000c8	32 da 			xor	bl,dl
	*** 0000ca	32 d9 			xor	bl,cl
	*** 0000cc	32 d8 			xor	bl,al
	*** 0000ce	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000d2	88 45 04 		mov	BYTE PTR [di+4],al
;|***     dt[ 9] = inv_s_box[gfmul_9[st[ 4]] ^ gfmul_e[st[ 5]] ^ gfmul_b[st[ 6]] ^ gfmul_d[st[ 7]]];
; Line 543
	*** 0000d5	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 0000d8	8a 87 00 00 		mov	al,BYTE PTR $S212_gfmul_d[bx]
	*** 0000dc	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 0000df	8a 8f 00 00 		mov	cl,BYTE PTR $S211_gfmul_b[bx]
	*** 0000e3	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 0000e6	8a 97 00 00 		mov	dl,BYTE PTR $S210_gfmul_9[bx]
	*** 0000ea	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 0000ed	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 0000f1	32 da 			xor	bl,dl
	*** 0000f3	32 d9 			xor	bl,cl
	*** 0000f5	32 d8 			xor	bl,al
	*** 0000f7	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0000fb	88 45 09 		mov	BYTE PTR [di+9],al
;|***     dt[14] = inv_s_box[gfmul_d[st[ 4]] ^ gfmul_9[st[ 5]] ^ gfmul_e[st[ 6]] ^ gfmul_b[st[ 7]]];
; Line 544
	*** 0000fe	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 000101	8a 87 00 00 		mov	al,BYTE PTR $S211_gfmul_b[bx]
	*** 000105	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000108	8a 8f 00 00 		mov	cl,BYTE PTR $S210_gfmul_9[bx]
	*** 00010c	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 00010f	8a 97 00 00 		mov	dl,BYTE PTR $S213_gfmul_e[bx]
	*** 000113	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 000116	8a 9f 00 00 		mov	bl,BYTE PTR $S212_gfmul_d[bx]
	*** 00011a	32 da 			xor	bl,dl
	*** 00011c	32 d9 			xor	bl,cl
	*** 00011e	32 d8 			xor	bl,al
	*** 000120	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000124	88 45 0e 		mov	BYTE PTR [di+14],al
;|***     dt[ 3] = inv_s_box[gfmul_b[st[ 4]] ^ gfmul_d[st[ 5]] ^ gfmul_9[st[ 6]] ^ gfmul_e[st[ 7]]];
; Line 545
	*** 000127	8a 5c 06 		mov	bl,BYTE PTR [si+6]
	*** 00012a	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 00012e	8a 5c 07 		mov	bl,BYTE PTR [si+7]
	*** 000131	8a 8f 00 00 		mov	cl,BYTE PTR $S213_gfmul_e[bx]
	*** 000135	8a 5c 05 		mov	bl,BYTE PTR [si+5]
	*** 000138	8a 97 00 00 		mov	dl,BYTE PTR $S212_gfmul_d[bx]
	*** 00013c	8a 5c 04 		mov	bl,BYTE PTR [si+4]
	*** 00013f	8a 9f 00 00 		mov	bl,BYTE PTR $S211_gfmul_b[bx]
	*** 000143	32 da 			xor	bl,dl
	*** 000145	32 d9 			xor	bl,cl
	*** 000147	32 d8 			xor	bl,al
	*** 000149	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00014d	88 45 03 		mov	BYTE PTR [di+3],al
;|*** 
;|***     dt[ 8] = inv_s_box[gfmul_e[st[ 8]] ^ gfmul_b[st[ 9]] ^ gfmul_d[st[10]] ^ gfmul_9[st[11]]];
; Line 547
	*** 000150	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 000153	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 000157	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 00015a	8a 8f 00 00 		mov	cl,BYTE PTR $S212_gfmul_d[bx]
	*** 00015e	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 000161	8a 97 00 00 		mov	dl,BYTE PTR $S211_gfmul_b[bx]
	*** 000165	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 000168	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 00016c	32 da 			xor	bl,dl
	*** 00016e	32 d9 			xor	bl,cl
	*** 000170	32 d8 			xor	bl,al
	*** 000172	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000176	88 45 08 		mov	BYTE PTR [di+8],al
;|***     dt[13] = inv_s_box[gfmul_9[st[ 8]] ^ gfmul_e[st[ 9]] ^ gfmul_b[st[10]] ^ gfmul_d[st[11]]];
; Line 548
	*** 000179	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 00017c	8a 87 00 00 		mov	al,BYTE PTR $S212_gfmul_d[bx]
	*** 000180	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 000183	8a 8f 00 00 		mov	cl,BYTE PTR $S211_gfmul_b[bx]
	*** 000187	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 00018a	8a 97 00 00 		mov	dl,BYTE PTR $S210_gfmul_9[bx]
	*** 00018e	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 000191	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 000195	32 da 			xor	bl,dl
	*** 000197	32 d9 			xor	bl,cl
	*** 000199	32 d8 			xor	bl,al
	*** 00019b	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00019f	88 45 0d 		mov	BYTE PTR [di+13],al
;|***     dt[ 2] = inv_s_box[gfmul_d[st[ 8]] ^ gfmul_9[st[ 9]] ^ gfmul_e[st[10]] ^ gfmul_b[st[11]]];
; Line 549
	*** 0001a2	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 0001a5	8a 87 00 00 		mov	al,BYTE PTR $S211_gfmul_b[bx]
	*** 0001a9	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 0001ac	8a 8f 00 00 		mov	cl,BYTE PTR $S210_gfmul_9[bx]
	*** 0001b0	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 0001b3	8a 97 00 00 		mov	dl,BYTE PTR $S213_gfmul_e[bx]
	*** 0001b7	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 0001ba	8a 9f 00 00 		mov	bl,BYTE PTR $S212_gfmul_d[bx]
	*** 0001be	32 da 			xor	bl,dl
	*** 0001c0	32 d9 			xor	bl,cl
	*** 0001c2	32 d8 			xor	bl,al
	*** 0001c4	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0001c8	88 45 02 		mov	BYTE PTR [di+2],al
;|***     dt[ 7] = inv_s_box[gfmul_b[st[ 8]] ^ gfmul_d[st[ 9]] ^ gfmul_9[st[10]] ^ gfmul_e[st[11]]];
; Line 550
	*** 0001cb	8a 5c 0a 		mov	bl,BYTE PTR [si+10]
	*** 0001ce	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 0001d2	8a 5c 0b 		mov	bl,BYTE PTR [si+11]
	*** 0001d5	8a 8f 00 00 		mov	cl,BYTE PTR $S213_gfmul_e[bx]
	*** 0001d9	8a 5c 09 		mov	bl,BYTE PTR [si+9]
	*** 0001dc	8a 97 00 00 		mov	dl,BYTE PTR $S212_gfmul_d[bx]
	*** 0001e0	8a 5c 08 		mov	bl,BYTE PTR [si+8]
	*** 0001e3	8a 9f 00 00 		mov	bl,BYTE PTR $S211_gfmul_b[bx]
	*** 0001e7	32 da 			xor	bl,dl
	*** 0001e9	32 d9 			xor	bl,cl
	*** 0001eb	32 d8 			xor	bl,al
	*** 0001ed	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 0001f1	88 45 07 		mov	BYTE PTR [di+7],al
;|*** 
;|***     dt[12] = inv_s_box[gfmul_e[st[12]] ^ gfmul_b[st[13]] ^ gfmul_d[st[14]] ^ gfmul_9[st[15]]];
; Line 552
	*** 0001f4	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 0001f7	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 0001fb	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 0001fe	8a 8f 00 00 		mov	cl,BYTE PTR $S212_gfmul_d[bx]
	*** 000202	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000205	8a 97 00 00 		mov	dl,BYTE PTR $S211_gfmul_b[bx]
	*** 000209	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 00020c	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 000210	32 da 			xor	bl,dl
	*** 000212	32 d9 			xor	bl,cl
	*** 000214	32 d8 			xor	bl,al
	*** 000216	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00021a	88 45 0c 		mov	BYTE PTR [di+12],al
;|***     dt[ 1] = inv_s_box[gfmul_9[st[12]] ^ gfmul_e[st[13]] ^ gfmul_b[st[14]] ^ gfmul_d[st[15]]];
; Line 553
	*** 00021d	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000220	8a 87 00 00 		mov	al,BYTE PTR $S212_gfmul_d[bx]
	*** 000224	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000227	8a 8f 00 00 		mov	cl,BYTE PTR $S211_gfmul_b[bx]
	*** 00022b	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 00022e	8a 97 00 00 		mov	dl,BYTE PTR $S210_gfmul_9[bx]
	*** 000232	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000235	8a 9f 00 00 		mov	bl,BYTE PTR $S213_gfmul_e[bx]
	*** 000239	32 da 			xor	bl,dl
	*** 00023b	32 d9 			xor	bl,cl
	*** 00023d	32 d8 			xor	bl,al
	*** 00023f	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000243	88 45 01 		mov	BYTE PTR [di+1],al
;|***     dt[ 6] = inv_s_box[gfmul_d[st[12]] ^ gfmul_9[st[13]] ^ gfmul_e[st[14]] ^ gfmul_b[st[15]]];
; Line 554
	*** 000246	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000249	8a 87 00 00 		mov	al,BYTE PTR $S211_gfmul_b[bx]
	*** 00024d	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000250	8a 8f 00 00 		mov	cl,BYTE PTR $S210_gfmul_9[bx]
	*** 000254	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000257	8a 97 00 00 		mov	dl,BYTE PTR $S213_gfmul_e[bx]
	*** 00025b	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 00025e	8a 9f 00 00 		mov	bl,BYTE PTR $S212_gfmul_d[bx]
	*** 000262	32 da 			xor	bl,dl
	*** 000264	32 d9 			xor	bl,cl
	*** 000266	32 d8 			xor	bl,al
	*** 000268	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 00026c	88 45 06 		mov	BYTE PTR [di+6],al
;|***     dt[11] = inv_s_box[gfmul_b[st[12]] ^ gfmul_d[st[13]] ^ gfmul_9[st[14]] ^ gfmul_e[st[15]]];
; Line 555
	*** 00026f	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000272	8a 87 00 00 		mov	al,BYTE PTR $S210_gfmul_9[bx]
	*** 000276	8a 5c 0f 		mov	bl,BYTE PTR [si+15]
	*** 000279	8a 8f 00 00 		mov	cl,BYTE PTR $S213_gfmul_e[bx]
	*** 00027d	8a 5c 0d 		mov	bl,BYTE PTR [si+13]
	*** 000280	8a 97 00 00 		mov	dl,BYTE PTR $S212_gfmul_d[bx]
	*** 000284	8a 5c 0c 		mov	bl,BYTE PTR [si+12]
	*** 000287	8a 9f 00 00 		mov	bl,BYTE PTR $S211_gfmul_b[bx]
	*** 00028b	32 da 			xor	bl,dl
	*** 00028d	32 d9 			xor	bl,cl
	*** 00028f	32 d8 			xor	bl,al
	*** 000291	8a 87 00 00 		mov	al,BYTE PTR $S207_inv_s_box[bx]
	*** 000295	88 45 0b 		mov	BYTE PTR [di+11],al
;|***   }
; Line 556
	*** 000298	5e 			pop	si
	*** 000299	5f 			pop	di
	*** 00029a	c9 			leave	
	*** 00029b	c3 			ret	

inv_mix_sub_columns	ENDP
	PUBLIC	_aes_set_key
_aes_set_key	PROC NEAR	;  COMDAT
;|*** 
;|*** #if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )
;|*** 
;|*** /*  Set the cipher key for the pre-keyed version */
;|*** 
;|*** return_type aes_set_key( const unsigned char key[], length_type keylen, aes_context ctx[1] )
;|*** {
; Line 563
	*** 000000	c8 08 00 00 		enter	8,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	key = 4
;	keylen = 6
;	ctx = 8
;	cc = -1
;	rc = -6
;	hi = -7
;	tt = -8
;	t0 = -2
;	t1 = -3
;	t2 = -4
;	t3 = -5
;|***     uint_8t cc, rc, hi;
;|*** 
;|***     switch( keylen )
; Line 566
	*** 000006	8a 46 06 		mov	al,BYTE PTR [bp+6]	;keylen
	*** 000009	2a e4 			sub	ah,ah
;|***     {
;|***     case 16:
;|***     case 128:
;|***         keylen = 16;
;|***         break;
;|***     case 24:
;|***     case 192:
;|***         keylen = 24;
;|***         break;
;|***     case 32:
;|***     case 256:
;|***         keylen = 32;
;|***         break;
;|***     default:
;|***         ctx->rnd = 0;
;|***         return (return_type) -1;
;|***     }
; Line 583
	*** 00000b	3d 20 00 		cmp	ax,32	;0020H
	*** 00000e	74 38 			je	SHORT $SC290
	*** 000010	7f 18 			jg	SHORT $L334
	*** 000012	2d 10 00 		sub	ax,16	;0010H
	*** 000015	74 25 			je	SHORT $SC288
	*** 000017	2d 08 00 		sub	ax,8
	*** 00001a	74 26 			je	SHORT $SC289
					$SD291:
;|***         ctx->rnd = 0;
; Line 581
	*** 00001c	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;ctx
	*** 00001f	b0 ff 			mov	al,255	;00ffH
	*** 000021	c6 87 f0 00 00 		mov	BYTE PTR [bx+240],0
;|***         return (return_type) -1;
; Line 582
	*** 000026	5e 			pop	si
	*** 000027	5f 			pop	di
	*** 000028	c9 			leave	
	*** 000029	c3 			ret	
					$L334:
	*** 00002a	2d 80 00 		sub	ax,128	;0080H
	*** 00002d	74 0d 			je	SHORT $SC288
	*** 00002f	2d 40 00 		sub	ax,64	;0040H
	*** 000032	74 0e 			je	SHORT $SC289
	*** 000034	2d 40 00 		sub	ax,64	;0040H
	*** 000037	74 0f 			je	SHORT $SC290
	*** 000039	eb e1 			jmp	SHORT $SD291
	*** 00003b	90 			nop	
;|***     case 16:
; Line 568
					$SC288:
;|***     case 128:
;|***         keylen = 16;
; Line 570
	*** 00003c	c6 46 06 10 		mov	BYTE PTR [bp+6],16	;0010H	;keylen
;|***         break;
; Line 571
	*** 000040	eb 0a 			jmp	SHORT $SB285
;|***     case 24:
; Line 572
					$SC289:
;|***     case 192:
;|***         keylen = 24;
; Line 574
	*** 000042	c6 46 06 18 		mov	BYTE PTR [bp+6],24	;0018H	;keylen
;|***         break;
; Line 575
	*** 000046	eb 04 			jmp	SHORT $SB285
;|***     case 32:
; Line 576
					$SC290:
;|***     case 256:
;|***         keylen = 32;
; Line 578
	*** 000048	c6 46 06 20 		mov	BYTE PTR [bp+6],32	;0020H	;keylen
;|***         break;
;|***     default:
;|***         ctx->rnd = 0;
;|***         return (return_type) -1;
;|***     }
; Line 583
					$SB285:
;|***     block_copy(ctx->ksch, key, keylen);
; Line 584
	*** 00004c	8b 46 04 		mov	ax,WORD PTR [bp+4]	;key
	*** 00004f	8a 4e 06 		mov	cl,BYTE PTR [bp+6]	;keylen
	*** 000052	2a ed 			sub	ch,ch
	*** 000054	8b f0 			mov	si,ax
	*** 000056	1e 			push	ds
	*** 000057	07 			pop	es
	*** 000058	8b 7e 08 		mov	di,WORD PTR [bp+8]	;ctx
	*** 00005b	d1 e9 			shr	cx,1
	*** 00005d	f3 			rep
	*** 00005e	a5 			movsw
	*** 00005f	13 c9 			adc	cx,cx
	*** 000061	f3 			rep
	*** 000062	a4 			movsb
;|***     hi = (keylen + 28) << 2;
;|***     ctx->rnd = (hi >> 4) - 1;
; Line 586
	*** 000063	8a 46 06 		mov	al,BYTE PTR [bp+6]	;keylen
	*** 000066	04 1c 			add	al,28	;001cH
	*** 000068	c0 e0 02 		shl	al,2
	*** 00006b	88 46 f9 		mov	BYTE PTR [bp-7],al	;hi
	*** 00006e	c0 e8 04 		shr	al,4
	*** 000071	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;ctx
	*** 000074	fe c8 			dec	al
	*** 000076	88 87 f0 00 		mov	BYTE PTR [bx+240],al
;|***     for( cc = keylen, rc = 1; cc < hi; cc += 4 )
; Line 587
	*** 00007a	8a 46 06 		mov	al,BYTE PTR [bp+6]	;keylen
	*** 00007d	88 46 ff 		mov	BYTE PTR [bp-1],al	;cc
	*** 000080	c6 46 fa 01 		mov	BYTE PTR [bp-6],1	;rc
	*** 000084	8b 76 08 		mov	si,WORD PTR [bp+8]	;ctx
	*** 000087	e9 ea 00 		jmp	$L337
					$F292:
;|***     {   uint_8t tt, t0, t1, t2, t3;
;|*** 
;|***         t0 = ctx->ksch[cc - 4];
; Line 590
	*** 00008a	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;cc
	*** 00008d	2a ff 			sub	bh,bh
	*** 00008f	03 de 			add	bx,si
	*** 000091	8a 47 fc 		mov	al,BYTE PTR [bx-4]
	*** 000094	88 46 fe 		mov	BYTE PTR [bp-2],al	;t0
;|***         t1 = ctx->ksch[cc - 3];
; Line 591
	*** 000097	8a 47 fd 		mov	al,BYTE PTR [bx-3]
	*** 00009a	88 46 fd 		mov	BYTE PTR [bp-3],al	;t1
;|***         t2 = ctx->ksch[cc - 2];
; Line 592
	*** 00009d	8a 47 fe 		mov	al,BYTE PTR [bx-2]
	*** 0000a0	88 46 fc 		mov	BYTE PTR [bp-4],al	;t2
;|***         t3 = ctx->ksch[cc - 1];
; Line 593
	*** 0000a3	8a 47 ff 		mov	al,BYTE PTR [bx-1]
	*** 0000a6	88 46 fb 		mov	BYTE PTR [bp-5],al	;t3
;|***         if( cc % keylen == 0 )
; Line 594
	*** 0000a9	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;cc
	*** 0000ac	2a e4 			sub	ah,ah
	*** 0000ae	f6 76 06 		div	BYTE PTR [bp+6]	;keylen
	*** 0000b1	0a e4 			or	ah,ah
	*** 0000b3	75 4b 			jne	SHORT $I300
;|***         {
;|***             tt = t0;
; Line 596
	*** 0000b5	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;t0
	*** 0000b8	88 46 f8 		mov	BYTE PTR [bp-8],al	;tt
;|***             t0 = s_box[t1] ^ rc;
; Line 597
	*** 0000bb	8a 5e fd 		mov	bl,BYTE PTR [bp-3]	;t1
	*** 0000be	2a ff 			sub	bh,bh
	*** 0000c0	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000c4	32 46 fa 		xor	al,BYTE PTR [bp-6]	;rc
	*** 0000c7	88 46 fe 		mov	BYTE PTR [bp-2],al	;t0
;|***             t1 = s_box[t2];
; Line 598
	*** 0000ca	8a 5e fc 		mov	bl,BYTE PTR [bp-4]	;t2
	*** 0000cd	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000d1	88 46 fd 		mov	BYTE PTR [bp-3],al	;t1
;|***             t2 = s_box[t3];
; Line 599
	*** 0000d4	8a 5e fb 		mov	bl,BYTE PTR [bp-5]	;t3
	*** 0000d7	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000db	88 46 fc 		mov	BYTE PTR [bp-4],al	;t2
;|***             t3 = s_box[tt];
; Line 600
	*** 0000de	8a 5e f8 		mov	bl,BYTE PTR [bp-8]	;tt
	*** 0000e1	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 0000e5	88 46 fb 		mov	BYTE PTR [bp-5],al	;t3
;|***             rc = f2(rc);
; Line 601
	*** 0000e8	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;rc
	*** 0000eb	02 c0 			add	al,al
	*** 0000ed	8b c8 			mov	cx,ax
	*** 0000ef	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;rc
	*** 0000f2	c0 e8 07 		shr	al,7
	*** 0000f5	b2 1b 			mov	dl,27	;001bH
	*** 0000f7	f6 e2 			mul	dl
	*** 0000f9	32 c8 			xor	cl,al
	*** 0000fb	88 4e fa 		mov	BYTE PTR [bp-6],cl	;rc
;|***         }
;|***         else if( keylen > 24 && cc % keylen == 16 )
; Line 603
	*** 0000fe	eb 3d 			jmp	SHORT $I301
					$I300:
	*** 000100	80 7e 06 18 		cmp	BYTE PTR [bp+6],24	;0018H	;keylen
	*** 000104	76 37 			jbe	SHORT $I301
	*** 000106	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;cc
	*** 000109	2a e4 			sub	ah,ah
	*** 00010b	f6 76 06 		div	BYTE PTR [bp+6]	;keylen
	*** 00010e	80 fc 10 		cmp	ah,16	;0010H
	*** 000111	75 2a 			jne	SHORT $I301
;|***         {
;|***             t0 = s_box[t0];
; Line 605
	*** 000113	8a 5e fe 		mov	bl,BYTE PTR [bp-2]	;t0
	*** 000116	2a ff 			sub	bh,bh
	*** 000118	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00011c	88 46 fe 		mov	BYTE PTR [bp-2],al	;t0
;|***             t1 = s_box[t1];
; Line 606
	*** 00011f	8a 5e fd 		mov	bl,BYTE PTR [bp-3]	;t1
	*** 000122	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000126	88 46 fd 		mov	BYTE PTR [bp-3],al	;t1
;|***             t2 = s_box[t2];
; Line 607
	*** 000129	8a 5e fc 		mov	bl,BYTE PTR [bp-4]	;t2
	*** 00012c	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 000130	88 46 fc 		mov	BYTE PTR [bp-4],al	;t2
;|***             t3 = s_box[t3];
; Line 608
	*** 000133	8a 5e fb 		mov	bl,BYTE PTR [bp-5]	;t3
	*** 000136	8a 87 00 00 		mov	al,BYTE PTR $S206_s_box[bx]
	*** 00013a	88 46 fb 		mov	BYTE PTR [bp-5],al	;t3
;|***         }
;|***         tt = cc - keylen;
; Line 610
					$I301:
;|***         ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
; Line 611
	*** 00013d	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;cc
	*** 000140	2a 5e 06 		sub	bl,BYTE PTR [bp+6]	;keylen
	*** 000143	2a ff 			sub	bh,bh
	*** 000145	8a 00 			mov	al,BYTE PTR [bx][si]
	*** 000147	32 46 fe 		xor	al,BYTE PTR [bp-2]	;t0
	*** 00014a	8d 08 			lea	cx,WORD PTR [bx][si]
	*** 00014c	8a 5e ff 		mov	bl,BYTE PTR [bp-1]	;cc
	*** 00014f	8b f9 			mov	di,cx
	*** 000151	88 00 			mov	BYTE PTR [bx][si],al
;|***         ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
; Line 612
	*** 000153	8a 45 01 		mov	al,BYTE PTR [di+1]
	*** 000156	32 46 fd 		xor	al,BYTE PTR [bp-3]	;t1
	*** 000159	03 de 			add	bx,si
	*** 00015b	88 47 01 		mov	BYTE PTR [bx+1],al
;|***         ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
; Line 613
	*** 00015e	8a 45 02 		mov	al,BYTE PTR [di+2]
	*** 000161	32 46 fc 		xor	al,BYTE PTR [bp-4]	;t2
	*** 000164	88 47 02 		mov	BYTE PTR [bx+2],al
;|***         ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
; Line 614
	*** 000167	8a 45 03 		mov	al,BYTE PTR [di+3]
	*** 00016a	32 46 fb 		xor	al,BYTE PTR [bp-5]	;t3
	*** 00016d	88 47 03 		mov	BYTE PTR [bx+3],al
;|***     for( cc = keylen, rc = 1; cc < hi; cc += 4 )
; Line 587
	*** 000170	80 46 ff 04 		add	BYTE PTR [bp-1],4	;cc
					$L337:
	*** 000174	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;cc
	*** 000177	38 46 f9 		cmp	BYTE PTR [bp-7],al	;hi
	*** 00017a	0f 87 0c ff 		ja	$F292
;|***     {   uint_8t tt, t0, t1, t2, t3;
;|*** 
;|***         t0 = ctx->ksch[cc - 4];
;|***         t1 = ctx->ksch[cc - 3];
;|***         t2 = ctx->ksch[cc - 2];
;|***         t3 = ctx->ksch[cc - 1];
;|***         if( cc % keylen == 0 )
;|***         {
;|***             tt = t0;
;|***             t0 = s_box[t1] ^ rc;
;|***             t1 = s_box[t2];
;|***             t2 = s_box[t3];
;|***             t3 = s_box[tt];
;|***             rc = f2(rc);
;|***         }
;|***         else if( keylen > 24 && cc % keylen == 16 )
;|***         {
;|***             t0 = s_box[t0];
;|***             t1 = s_box[t1];
;|***             t2 = s_box[t2];
;|***             t3 = s_box[t3];
;|***         }
;|***         tt = cc - keylen;
;|***         ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
;|***         ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
;|***         ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
;|***         ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
;|***     }
;|***     return 0;
; Line 616
	*** 00017e	32 c0 			xor	al,al
;|*** }
; Line 617
	*** 000180	5e 			pop	si
	*** 000181	5f 			pop	di
	*** 000182	c9 			leave	
	*** 000183	c3 			ret	

_aes_set_key	ENDP
	PUBLIC	_aes_encrypt
_aes_encrypt	PROC NEAR	;  COMDAT
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_ENC_PREKEYED )
;|*** 
;|*** /*  Encrypt a single block of 16 bytes */
;|*** 
;|*** return_type aes_encrypt( const unsigned char in[N_BLOCK], unsigned char  out[N_BLOCK], const aes_context ctx[1] )
;|*** {
; Line 626
	*** 000000	c8 22 00 00 		enter	34,0
	*** 000004	56 			push	si
;	in = 4
;	out = 6
;	ctx = 8
;	s1 = -34
;	r = -1
;	s2 = -18
	*** 000005	8b 76 08 		mov	si,WORD PTR [bp+8]	;ctx
;|***     if( ctx->rnd )
; Line 627
	*** 000008	80 bc f0 00 00 		cmp	BYTE PTR [si+240],0
	*** 00000d	74 6f 			je	SHORT $I310
;|***     {
;|***         uint_8t s1[N_BLOCK], r;
;|***         copy_and_key( s1, in, ctx->ksch );
; Line 630
	*** 00000f	56 			push	si
	*** 000010	ff 76 04 		push	WORD PTR [bp+4]	;in
	*** 000013	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 000016	50 			push	ax
	*** 000017	e8 00 00 		call	copy_and_key
	*** 00001a	83 c4 06 		add	sp,6
;|*** 
;|***         for( r = 1 ; r < ctx->rnd ; ++r )
; Line 632
	*** 00001d	c6 46 ff 01 		mov	BYTE PTR [bp-1],1	;r
	*** 000021	eb 2b 			jmp	SHORT $L338
	*** 000023	90 			nop	
					$F313:
;|*** #if defined( VERSION_1 )
;|***         {
;|***             mix_sub_columns( s1 );
;|***             add_round_key( s1, ctx->ksch + r * N_BLOCK);
;|***         }
;|*** #else
;|***         {   uint_8t s2[N_BLOCK];
;|***             mix_sub_columns( s2, s1 );
; Line 640
	*** 000024	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 000027	50 			push	ax
	*** 000028	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;s2
	*** 00002b	51 			push	cx
	*** 00002c	e8 00 00 		call	mix_sub_columns
	*** 00002f	83 c4 04 		add	sp,4
;|***             copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
; Line 641
	*** 000032	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;r
	*** 000035	2a e4 			sub	ah,ah
	*** 000037	c1 e0 04 		shl	ax,4
	*** 00003a	03 c6 			add	ax,si
	*** 00003c	50 			push	ax
	*** 00003d	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;s2
	*** 000040	50 			push	ax
	*** 000041	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 000044	50 			push	ax
	*** 000045	e8 00 00 		call	copy_and_key
	*** 000048	83 c4 06 		add	sp,6
;|***         for( r = 1 ; r < ctx->rnd ; ++r )
; Line 632
	*** 00004b	fe 46 ff 		inc	BYTE PTR [bp-1]	;r
					$L338:
	*** 00004e	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;r
	*** 000051	38 84 f0 00 		cmp	BYTE PTR [si+240],al
	*** 000055	77 cd 			ja	SHORT $F313
;|*** #if defined( VERSION_1 )
;|***         {
;|***             mix_sub_columns( s1 );
;|***             add_round_key( s1, ctx->ksch + r * N_BLOCK);
;|***         }
;|*** #else
;|***         {   uint_8t s2[N_BLOCK];
;|***             mix_sub_columns( s2, s1 );
;|***             copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
;|***         }
;|*** #endif
;|***         shift_sub_rows( s1 );
; Line 644
	*** 000057	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00005a	50 			push	ax
	*** 00005b	e8 00 00 		call	shift_sub_rows
	*** 00005e	83 c4 02 		add	sp,2
;|***         copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
; Line 645
	*** 000061	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;r
	*** 000064	2a e4 			sub	ah,ah
	*** 000066	c1 e0 04 		shl	ax,4
	*** 000069	03 c6 			add	ax,si
	*** 00006b	50 			push	ax
	*** 00006c	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00006f	50 			push	ax
	*** 000070	ff 76 06 		push	WORD PTR [bp+6]	;out
	*** 000073	e8 00 00 		call	copy_and_key
	*** 000076	83 c4 06 		add	sp,6
;|***     }
;|***     else
;|***         return (return_type) -1;
;|***     return 0;
; Line 649
	*** 000079	32 c0 			xor	al,al
	*** 00007b	5e 			pop	si
	*** 00007c	c9 			leave	
	*** 00007d	c3 			ret	
;|***     else
; Line 647
					$I310:
;|***         return (return_type) -1;
; Line 648
	*** 00007e	b0 ff 			mov	al,255	;00ffH
;|***     return 0;
;|*** }
; Line 650
	*** 000080	5e 			pop	si
	*** 000081	c9 			leave	
	*** 000082	c3 			ret	

_aes_encrypt	ENDP
	PUBLIC	_aes_decrypt
_aes_decrypt	PROC NEAR	;  COMDAT
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_DEC_PREKEYED )
;|*** 
;|*** /*  Decrypt a single block of 16 bytes */
;|*** 
;|*** return_type aes_decrypt( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK], const aes_context ctx[1] )
;|*** {
; Line 659
	*** 000000	c8 22 00 00 		enter	34,0
	*** 000004	56 			push	si
;	out = 6
;	ctx = 8
;	s1 = -34
;	r = -1
;	s2 = -18
;	in = 4
	*** 000005	8b 76 08 		mov	si,WORD PTR [bp+8]	;ctx
;|***     if( ctx->rnd )
; Line 660
	*** 000008	80 bc f0 00 00 		cmp	BYTE PTR [si+240],0
	*** 00000d	74 6d 			je	SHORT $I325
;|***     {
;|***         uint_8t s1[N_BLOCK], r;
;|***         copy_and_key( s1, in, ctx->ksch + ctx->rnd * N_BLOCK );
; Line 663
	*** 00000f	8a 84 f0 00 		mov	al,BYTE PTR [si+240]
	*** 000013	2a e4 			sub	ah,ah
	*** 000015	c1 e0 04 		shl	ax,4
	*** 000018	03 c6 			add	ax,si
	*** 00001a	50 			push	ax
	*** 00001b	ff 76 04 		push	WORD PTR [bp+4]	;in
	*** 00001e	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 000021	50 			push	ax
	*** 000022	e8 00 00 		call	copy_and_key
	*** 000025	83 c4 06 		add	sp,6
;|***         inv_shift_sub_rows( s1 );
; Line 664
	*** 000028	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00002b	50 			push	ax
	*** 00002c	e8 00 00 		call	inv_shift_sub_rows
	*** 00002f	83 c4 02 		add	sp,2
;|*** 
;|***         for( r = ctx->rnd ; --r ; )
; Line 666
	*** 000032	8a 84 f0 00 		mov	al,BYTE PTR [si+240]
	*** 000036	88 46 ff 		mov	BYTE PTR [bp-1],al	;r
	*** 000039	eb 28 			jmp	SHORT $L339
	*** 00003b	90 			nop	
					$FC329:
;|*** #if defined( VERSION_1 )
;|***         {
;|***             add_round_key( s1, ctx->ksch + r * N_BLOCK );
;|***             inv_mix_sub_columns( s1 );
;|***         }
;|*** #else
;|***         {   uint_8t s2[N_BLOCK];
;|***             copy_and_key( s2, s1, ctx->ksch + r * N_BLOCK );
; Line 674
	*** 00003c	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;r
	*** 00003f	2a e4 			sub	ah,ah
	*** 000041	c1 e0 04 		shl	ax,4
	*** 000044	03 c6 			add	ax,si
	*** 000046	50 			push	ax
	*** 000047	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00004a	50 			push	ax
	*** 00004b	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;s2
	*** 00004e	51 			push	cx
	*** 00004f	e8 00 00 		call	copy_and_key
	*** 000052	83 c4 06 		add	sp,6
;|***             inv_mix_sub_columns( s1, s2 );
; Line 675
	*** 000055	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;s2
	*** 000058	50 			push	ax
	*** 000059	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00005c	50 			push	ax
	*** 00005d	e8 00 00 		call	inv_mix_sub_columns
	*** 000060	83 c4 04 		add	sp,4
;|***         }
; Line 676
					$L339:
	*** 000063	fe 4e ff 		dec	BYTE PTR [bp-1]	;r
	*** 000066	75 d4 			jne	SHORT $FC329
;|*** #endif
;|***         copy_and_key( out, s1, ctx->ksch );
; Line 678
	*** 000068	56 			push	si
	*** 000069	8d 46 de 		lea	ax,WORD PTR [bp-34]	;s1
	*** 00006c	50 			push	ax
	*** 00006d	ff 76 06 		push	WORD PTR [bp+6]	;out
	*** 000070	e8 00 00 		call	copy_and_key
	*** 000073	83 c4 06 		add	sp,6
;|***     }
;|***     else
;|***         return (return_type) -1;
;|***     return 0;
; Line 682
	*** 000076	32 c0 			xor	al,al
	*** 000078	5e 			pop	si
	*** 000079	c9 			leave	
	*** 00007a	c3 			ret	
	*** 00007b	90 			nop	
;|***     else
; Line 680
					$I325:
;|***         return (return_type) -1;
; Line 681
	*** 00007c	b0 ff 			mov	al,255	;00ffH
;|***     return 0;
;|*** }
; Line 683
	*** 00007e	5e 			pop	si
	*** 00007f	c9 			leave	
	*** 000080	c3 			ret	

_aes_decrypt	ENDP
	*** 000081	90 			nop	
_TEXT	ENDS
END
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_ENC_128_OTFK )
;|*** 
;|*** /*  The 'on the fly' encryption key update for for 128 bit keys */
;|*** 
;|*** static void update_encrypt_key_128( uint_8t k[N_BLOCK], uint_8t *rc )
;|*** {   uint_8t cc;
;|*** 
;|***     k[0] ^= s_box[k[13]] ^ *rc;
;|***     k[1] ^= s_box[k[14]];
;|***     k[2] ^= s_box[k[15]];
;|***     k[3] ^= s_box[k[12]];
;|***     *rc = f2( *rc );
;|*** 
;|***     for(cc = 4; cc < 16; cc += 4 )
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|*** }
;|*** 
;|*** /*  Encrypt a single block of 16 bytes with 'on the fly' 128 bit keying */
;|*** 
;|*** void aes_encrypt_128( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],
;|***                      const unsigned char key[N_BLOCK], unsigned char o_key[N_BLOCK] )
;|*** {   uint_8t s1[N_BLOCK], r, rc = 1;
;|*** 
;|***     if(o_key != key)
;|***         block16_copy( o_key, key );
;|***     copy_and_key( s1, in, o_key );
;|*** 
;|***     for( r = 1 ; r < 10 ; ++r )
;|*** #if defined( VERSION_1 )
;|***     {
;|***         mix_sub_columns( s1 );
;|***         update_encrypt_key_128( o_key, &rc );
;|***         add_round_key( s1, o_key );
;|***     }
;|*** #else
;|***     {   uint_8t s2[N_BLOCK];
;|***         mix_sub_columns( s2, s1 );
;|***         update_encrypt_key_128( o_key, &rc );
;|***         copy_and_key( s1, s2, o_key );
;|***     }
;|*** #endif
;|*** 
;|***     shift_sub_rows( s1 );
;|***     update_encrypt_key_128( o_key, &rc );
;|***     copy_and_key( out, s1, o_key );
;|*** }
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_DEC_128_OTFK )
;|*** 
;|*** /*  The 'on the fly' decryption key update for for 128 bit keys */
;|*** 
;|*** static void update_decrypt_key_128( uint_8t k[N_BLOCK], uint_8t *rc )
;|*** {   uint_8t cc;
;|*** 
;|***     for( cc = 12; cc > 0; cc -= 4 )
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|***     *rc = d2(*rc);
;|***     k[0] ^= s_box[k[13]] ^ *rc;
;|***     k[1] ^= s_box[k[14]];
;|***     k[2] ^= s_box[k[15]];
;|***     k[3] ^= s_box[k[12]];
;|*** }
;|*** 
;|*** /*  Decrypt a single block of 16 bytes with 'on the fly' 128 bit keying */
;|*** 
;|*** void aes_decrypt_128( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],
;|***                       const unsigned char key[N_BLOCK], unsigned char o_key[N_BLOCK] )
;|*** {
;|***     uint_8t s1[N_BLOCK], r, rc = 0x6c;
;|***     if(o_key != key)
;|***         block16_copy( o_key, key );
;|*** 
;|***     copy_and_key( s1, in, o_key );
;|***     inv_shift_sub_rows( s1 );
;|*** 
;|***     for( r = 10 ; --r ; )
;|*** #if defined( VERSION_1 )
;|***     {
;|***         update_decrypt_key_128( o_key, &rc );
;|***         add_round_key( s1, o_key );
;|***         inv_mix_sub_columns( s1 );
;|***     }
;|*** #else
;|***     {   uint_8t s2[N_BLOCK];
;|***         update_decrypt_key_128( o_key, &rc );
;|***         copy_and_key( s2, s1, o_key );
;|***         inv_mix_sub_columns( s1, s2 );
;|***     }
;|*** #endif
;|***     update_decrypt_key_128( o_key, &rc );
;|***     copy_and_key( out, s1, o_key );
;|*** }
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_ENC_256_OTFK )
;|*** 
;|*** /*  The 'on the fly' encryption key update for for 256 bit keys */
;|*** 
;|*** static void update_encrypt_key_256( uint_8t k[2 * N_BLOCK], uint_8t *rc )
;|*** {   uint_8t cc;
;|*** 
;|***     k[0] ^= s_box[k[29]] ^ *rc;
;|***     k[1] ^= s_box[k[30]];
;|***     k[2] ^= s_box[k[31]];
;|***     k[3] ^= s_box[k[28]];
;|***     *rc = f2( *rc );
;|*** 
;|***     for(cc = 4; cc < 16; cc += 4)
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|*** 
;|***     k[16] ^= s_box[k[12]];
;|***     k[17] ^= s_box[k[13]];
;|***     k[18] ^= s_box[k[14]];
;|***     k[19] ^= s_box[k[15]];
;|*** 
;|***     for( cc = 20; cc < 32; cc += 4 )
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|*** }
;|*** 
;|*** /*  Encrypt a single block of 16 bytes with 'on the fly' 256 bit keying */
;|*** 
;|*** void aes_encrypt_256( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],
;|***                       const unsigned char key[2 * N_BLOCK], unsigned char o_key[2 * N_BLOCK] )
;|*** {
;|***     uint_8t s1[N_BLOCK], r, rc = 1;
;|***     if(o_key != key)
;|***     {
;|***         block16_copy( o_key, key );
;|***         block16_copy( o_key + 16, key + 16 );
;|***     }
;|***     copy_and_key( s1, in, o_key );
;|*** 
;|***     for( r = 1 ; r < 14 ; ++r )
;|*** #if defined( VERSION_1 )
;|***     {
;|***         mix_sub_columns(s1);
;|***         if( r & 1 )
;|***             add_round_key( s1, o_key + 16 );
;|***         else
;|***         {
;|***             update_encrypt_key_256( o_key, &rc );
;|***             add_round_key( s1, o_key );
;|***         }
;|***     }
;|*** #else
;|***     {   uint_8t s2[N_BLOCK];
;|***         mix_sub_columns( s2, s1 );
;|***         if( r & 1 )
;|***             copy_and_key( s1, s2, o_key + 16 );
;|***         else
;|***         {
;|***             update_encrypt_key_256( o_key, &rc );
;|***             copy_and_key( s1, s2, o_key );
;|***         }
;|***     }
;|*** #endif
;|*** 
;|***     shift_sub_rows( s1 );
;|***     update_encrypt_key_256( o_key, &rc );
;|***     copy_and_key( out, s1, o_key );
;|*** }
;|*** 
;|*** #endif
;|*** 
;|*** #if defined( AES_DEC_256_OTFK )
;|*** 
;|*** /*  The 'on the fly' encryption key update for for 256 bit keys */
;|*** 
;|*** static void update_decrypt_key_256( uint_8t k[2 * N_BLOCK], uint_8t *rc )
;|*** {   uint_8t cc;
;|*** 
;|***     for(cc = 28; cc > 16; cc -= 4)
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|*** 
;|***     k[16] ^= s_box[k[12]];
;|***     k[17] ^= s_box[k[13]];
;|***     k[18] ^= s_box[k[14]];
;|***     k[19] ^= s_box[k[15]];
;|*** 
;|***     for(cc = 12; cc > 0; cc -= 4)
;|***     {
;|***         k[cc + 0] ^= k[cc - 4];
;|***         k[cc + 1] ^= k[cc - 3];
;|***         k[cc + 2] ^= k[cc - 2];
;|***         k[cc + 3] ^= k[cc - 1];
;|***     }
;|*** 
;|***     *rc = d2(*rc);
;|***     k[0] ^= s_box[k[29]] ^ *rc;
;|***     k[1] ^= s_box[k[30]];
;|***     k[2] ^= s_box[k[31]];
;|***     k[3] ^= s_box[k[28]];
;|*** }
;|*** 
;|*** /*  Decrypt a single block of 16 bytes with 'on the fly'
;|***     256 bit keying
;|*** */
;|*** void aes_decrypt_256( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],
;|***                       const unsigned char key[2 * N_BLOCK], unsigned char o_key[2 * N_BLOCK] )
;|*** {
;|***     uint_8t s1[N_BLOCK], r, rc = 0x80;
;|*** 
;|***     if(o_key != key)
;|***     {
;|***         block16_copy( o_key, key );
;|***         block16_copy( o_key + 16, key + 16 );
;|***     }
;|*** 
;|***     copy_and_key( s1, in, o_key );
;|***     inv_shift_sub_rows( s1 );
;|*** 
;|***     for( r = 14 ; --r ; )
;|*** #if defined( VERSION_1 )
;|***     {
;|***         if( ( r & 1 ) )
;|***         {
;|***             update_decrypt_key_256( o_key, &rc );
;|***             add_round_key( s1, o_key + 16 );
;|***         }
;|***         else
;|***             add_round_key( s1, o_key );
;|***         inv_mix_sub_columns( s1 );
;|***     }
;|*** #else
;|***     {   uint_8t s2[N_BLOCK];
;|***         if( ( r & 1 ) )
;|***         {
;|***             update_decrypt_key_256( o_key, &rc );
;|***             copy_and_key( s2, s1, o_key + 16 );
;|***         }
;|***         else
;|***             copy_and_key( s2, s1, o_key );
;|***         inv_mix_sub_columns( s1, s2 );
;|***     }
;|*** #endif
;|***     copy_and_key( out, s1, o_key );
;|*** }
;|*** 
;|*** #endif
