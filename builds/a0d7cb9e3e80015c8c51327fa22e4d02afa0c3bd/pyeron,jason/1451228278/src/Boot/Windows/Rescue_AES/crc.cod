;	Static Name Aliases
;
	TITLE   ..\..\..\common\crc.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
_TEXT      SEGMENT
	ASSUME	CS: _TEXT

GetCrc32Small	PROC NEAR	;  COMDAT
;|*** /*
;|***  Legal Notice: Some portions of the source code contained in this file were
;|***  derived from the source code of Encryption for the Masses 2.02a, which is
;|***  Copyright (c) 1998-2000 Paul Le Roux and which is governed by the 'License
;|***  Agreement for Encryption for the Masses'. Modifications and additions to
;|***  the original source code (contained in this file) and all other portions
;|***  of this file are Copyright (c) 2003-2008 TrueCrypt Developers Association
;|***  and are governed by the TrueCrypt License 3.0 the full text of which is
;|***  contained in the file License.txt included in TrueCrypt binary and source
;|***  code distribution packages. */
;|*** 
;|*** #include "Tcdefs.h"
;|*** #include "Crc.h"
;|*** #include "Endian.h"
;|*** 
;|*** /* CRC polynomial 0x04c11db7 */
;|*** #if !defined(TC_MINIMIZE_CODE_SIZE) || defined(CS_UNITTESTING)
;|*** unsigned __int32 crc_32_tab[256]=
;|*** {				
;|*** 	0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
;|*** 	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
;|*** 	0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
;|*** 	0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
;|*** 	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
;|*** 	0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
;|*** 	0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
;|*** 	0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
;|*** 	0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
;|*** 	0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
;|*** 	0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
;|*** 	0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
;|*** 	0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
;|*** 	0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
;|*** 	0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
;|*** 	0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
;|*** 	0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
;|*** 	0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
;|*** 	0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
;|*** 	0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
;|*** 	0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
;|*** 	0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
;|*** 	0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
;|*** 	0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
;|*** 	0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
;|*** 	0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
;|*** 	0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
;|*** 	0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
;|*** 	0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
;|*** 	0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
;|*** 	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
;|*** 	0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
;|*** };
;|*** #endif
;|*** 
;|*** #if !defined(TC_MINIMIZE_CODE_SIZE) || defined(CS_UNITTESTING)
;|*** unsigned __int32 crc32int (unsigned __int32 *data)
;|*** {
;|*** 	unsigned char *d = (unsigned char *) data;
;|*** 	unsigned __int32 CRC = 0xffffffff;
;|*** 
;|*** 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];
;|*** 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];
;|*** 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];
;|*** 	return (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d) & 0xFF ] ^ 0xffffffff;
;|*** }
;|*** #endif
;|*** 
;|*** static unsigned __int32 GetCrc32Small (unsigned char *data, int length)
;|*** {
; Line 69
	*** 000000	c8 08 00 00 		enter	8,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	data = 4
;	length = 6
;	r = -6
;	i = -8
;	b = -2
;|***     unsigned __int32 r = 0xFFFFFFFFUL;
; Line 70
	*** 000006	66 c7 46 fa ff ff ff ff mov	DWORD PTR [bp-6],-1	;r
;|*** 	int i, b;
;|*** 
;|***     for (i = 0; i < length; ++i)
; Line 73
	*** 00000e	33 f6 			xor	si,si
	*** 000010	8b 7e 04 		mov	di,WORD PTR [bp+4]	;data
	*** 000013	eb 51 			jmp	SHORT $L211
					$F182:
;|***     {
;|***         r ^= data[i];
; Line 75
	*** 000015	8b de 			mov	bx,si
	*** 000017	03 df 			add	bx,di
	*** 000019	2a e4 			sub	ah,ah
	*** 00001b	8a 07 			mov	al,BYTE PTR [bx]
	*** 00001d	2b d2 			sub	dx,dx
	*** 00001f	31 46 fa 		xor	WORD PTR [bp-6],ax	;r
	*** 000022	31 56 fc 		xor	WORD PTR [bp-4],dx
;|***         for (b = 0; b < 8; ++b)
; Line 76
	*** 000025	89 76 f8 		mov	WORD PTR [bp-8],si	;i
	*** 000028	8b f2 			mov	si,dx
	*** 00002a	eb 31 			jmp	SHORT $L210
					$F185:
;|***         {
;|***             if ((unsigned __int8) r & 1)
; Line 78
	*** 00002c	f6 46 fa 01 		test	BYTE PTR [bp-6],1	;r
	*** 000030	74 1a 			je	SHORT $I188
	*** 000032	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]	;r
	*** 000036	66 35 be f9 8e 24 	xor	eax,613349822	;248ef9beH
	*** 00003c	66 d1 e8 		shr	eax,1
	*** 00003f	66 8b d0 		mov	edx,eax
	*** 000042	66 c1 ea 10 		shr	edx,16	;00000010H
	*** 000046	f7 d0 			not	ax
	*** 000048	f7 d2 			not	dx
	*** 00004a	eb 0a 			jmp	SHORT $FC186
					$I188:
	*** 00004c	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;r
	*** 00004f	8b 56 fc 		mov	dx,WORD PTR [bp-4]
	*** 000052	d1 ea 			shr	dx,1
	*** 000054	d1 d8 			rcr	ax,1
					$FC186:
	*** 000056	89 46 fa 		mov	WORD PTR [bp-6],ax	;r
	*** 000059	89 56 fc 		mov	WORD PTR [bp-4],dx
;|***         for (b = 0; b < 8; ++b)
; Line 76
	*** 00005c	46 			inc	si
					$L210:
	*** 00005d	83 fe 08 		cmp	si,8
	*** 000060	7c ca 			jl	SHORT $F185
;|***     for (i = 0; i < length; ++i)
; Line 73
	*** 000062	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 000065	46 			inc	si
					$L211:
	*** 000066	39 76 06 		cmp	WORD PTR [bp+6],si	;length
	*** 000069	7f aa 			jg	SHORT $F182
;|***     {
;|***         r ^= data[i];
;|***         for (b = 0; b < 8; ++b)
;|***         {
;|***             if ((unsigned __int8) r & 1)
;|***                 r = (r >> 1) ^ 0xEDB88320UL;
;|***             else
;|***                 r >>= 1;
;|***         }
;|***     }
;|*** 
;|*** 	return r ^ 0xFFFFFFFFUL;
; Line 85
	*** 00006b	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;r
	*** 00006e	8b 56 fc 		mov	dx,WORD PTR [bp-4]
	*** 000071	f7 d0 			not	ax
	*** 000073	f7 d2 			not	dx
;|*** }
; Line 86
	*** 000075	5e 			pop	si
	*** 000076	5f 			pop	di
	*** 000077	c9 			leave	
	*** 000078	c3 			ret	

GetCrc32Small	ENDP

crc32_selfTestSmall	PROC NEAR	;  COMDAT
;|*** 
;|*** /* crc32_selfTestSmall() is used in unit-tests; ignore the gcc warning */
;|*** #ifndef CS_UNITTESTING
;|*** static
;|*** #endif
;|*** BOOL crc32_selfTestSmall(void)
;|*** {
; Line 93
	*** 000000	c8 22 00 00 		enter	34,0
	*** 000004	56 			push	si
;	testData = -34
;	i = -1
;|*** 	unsigned __int8 testData[32];
;|*** 	unsigned __int8 i;
;|*** 
;|*** 	for (i = 0; i < sizeof (testData); ++i)
; Line 97
	*** 000005	c6 46 ff 00 		mov	BYTE PTR [bp-1],0	;i
					$F194:
;|*** 		testData[i] = i;
; Line 98
	*** 000009	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;i
	*** 00000c	2a e4 			sub	ah,ah
	*** 00000e	8b f0 			mov	si,ax
	*** 000010	88 42 de 		mov	BYTE PTR [bp-34][si],al
;|*** 	for (i = 0; i < sizeof (testData); ++i)
; Line 97
	*** 000013	fe 46 ff 		inc	BYTE PTR [bp-1]	;i
	*** 000016	80 7e ff 20 		cmp	BYTE PTR [bp-1],32	;0020H	;i
	*** 00001a	72 ed 			jb	SHORT $F194
;|*** 		testData[i] = i;
;|*** 
;|*** 	return GetCrc32Small (testData, sizeof (testData)) == 0x91267E8AUL;
; Line 100
	*** 00001c	6a 20 			push	32	;0020H
	*** 00001e	8d 46 de 		lea	ax,WORD PTR [bp-34]	;testData
	*** 000021	50 			push	ax
	*** 000022	e8 00 00 		call	GetCrc32Small
	*** 000025	83 c4 04 		add	sp,4
	*** 000028	3d 8a 7e 		cmp	ax,32394	;7e8aH
	*** 00002b	75 0b 			jne	SHORT $L208
	*** 00002d	81 fa 26 91 		cmp	dx,-28378	;9126H
	*** 000031	75 05 			jne	SHORT $L208
	*** 000033	b0 01 			mov	al,1
	*** 000035	5e 			pop	si
	*** 000036	c9 			leave	
	*** 000037	c3 			ret	
					$L208:
	*** 000038	32 c0 			xor	al,al
;|*** }
; Line 101
	*** 00003a	5e 			pop	si
	*** 00003b	c9 			leave	
	*** 00003c	c3 			ret	

crc32_selfTestSmall	ENDP
	PUBLIC	_GetCrc32
_GetCrc32	PROC NEAR	;  COMDAT
;|*** 
;|*** #if !defined(TC_MINIMIZE_CODE_SIZE) || defined(CS_UNITTESTING)
;|*** static unsigned __int32 GetCrc32Large (unsigned char *data, int length)
;|*** {
;|*** 	unsigned __int32 CRC = 0xffffffff;
;|*** 
;|*** 	while (length--)
;|*** 	{
;|*** 		CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *data++) & 0xFF ];
;|*** 	}
;|*** 
;|*** 	return CRC ^ 0xffffffff;
;|*** }
;|*** #endif
;|*** 
;|*** #if !defined(TC_MINIMIZE_CODE_SIZE) || defined(CS_UNITTESTING)
;|*** BOOL crc32_selfTestLarge(void)
;|*** {
;|*** 	int i;
;|*** 	unsigned __int32 crc  = 0xffffffff;
;|*** 	BOOL bSuccess = FALSE;
;|*** 
;|*** 	for (i = 0; i < (int)sizeof(crc_32_tab); i++)
;|*** 		crc = UPDC32 (((unsigned char *) crc_32_tab)[i], crc);
;|*** 
;|*** 	bSuccess = CRC_SELFTEST == (crc ^ 0xffffffff);
;|*** 
;|*** 	bSuccess &= GetCrc32Large ((unsigned char *)crc_32_tab, sizeof crc_32_tab) == CRC_SELFTEST;
;|*** 
;|*** 	return bSuccess;
;|*** }
;|*** #endif
;|*** 
;|*** unsigned __int32 GetCrc32 (unsigned char *data, int length)
;|*** {
; Line 136
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	data = 4
;	length = 6
;|*** #	ifndef TC_MINIMIZE_CODE_SIZE
;|*** 		return GetCrc32Large(data,length);
;|*** #	else
;|*** 		return GetCrc32Small(data, length);
; Line 140
	*** 000003	66 ff 76 04 		push	DWORD PTR [bp+4]	;data
	*** 000007	e8 00 00 		call	GetCrc32Small
;|*** #	endif
;|*** }
; Line 142
	*** 00000a	c9 			leave	
	*** 00000b	c3 			ret	

_GetCrc32	ENDP
	PUBLIC	_crc32_selftests
_crc32_selftests	PROC NEAR	;  COMDAT
;|*** 
;|*** 
;|*** 
;|*** BOOL crc32_selftests (void)
;|*** {
;|*** #	ifndef TC_MINIMIZE_CODE_SIZE
;|*** 		return crc32_selfTestLarge();
;|*** #	else
;|*** 		return crc32_selfTestSmall();
; Line 151
	*** 000000	e8 00 00 		call	crc32_selfTestSmall
;|*** #	endif
;|*** }
; Line 153
	*** 000003	c3 			ret	

_crc32_selftests	ENDP
_TEXT	ENDS
END
;|*** 
