; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Mount\Hotkeys.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_Hotkeys:QWORD:09H
_DATA	ENDS
PUBLIC	??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@		; `string'
PUBLIC	??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@	; `string'
PUBLIC	??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@		; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9?$AA?$AA@		; `string'
PUBLIC	??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@		; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@		; `string'
PUBLIC	??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@ ; `string'
PUBLIC	??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@ ; `string'
PUBLIC	??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@ ; `string'
PUBLIC	??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_09LOOKHEPK@VK_NUMPAD?$AA@			; `string'
PUBLIC	??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_GetKeyName
EXTRN	_wcsncpy:PROC
EXTRN	_UnknownString:BYTE
EXTRN	_sprintf:PROC
EXTRN	_GetString:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\mount\hotkeys.c
CONST	SEGMENT
??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@ DB 'VKEY_%02X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@ DB 'P', 00H, 'A', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@ DB 'E'
	DB	00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'E', 00H
	DB	'O', 00H, 'F', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@ DB 'E', 00H, 'x', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@ DB 'C', 00H, 'r', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@ DB 'A', 00H, 't', 00H, 't', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@ DB 'I'
	DB	00H, 'C', 00H, 'O', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'E', 00H
	DB	'A', 00H, 'R', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@ DB 'I', 00H, 'C'
	DB	00H, 'O', 00H, '_', 00H, '0', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@ DB 'I'
	DB	00H, 'C', 00H, 'O', 00H, '_', 00H, 'H', 00H, 'E', 00H, 'L', 00H
	DB	'P', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@ DB 'O', 00H
	DB	'E', 00H, 'M', 00H, ' ', 00H, '1', 00H, '0', 00H, '2', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@ DB 'O', 00H, 'E'
	DB	00H, 'M', 00H, ' ', 00H, 'A', 00H, 'X', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@ DB 'O', 00H, 'E', 00H
	DB	'M', 00H, ' ', 00H, '8', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '7', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '6', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ']', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '5', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '\', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '4', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '[', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '3', 00H, ' ', 00H, '(', 00H
	DB	'`', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '2', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '/', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@ DB '.', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9?$AA?$AA@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9?$AA?$AA@ DB '-', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@ DB ',', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@ DB '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '1', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ';', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@
CONST	SEGMENT
??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '/', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@
CONST	SEGMENT
??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@
CONST	SEGMENT
??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '-', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '+', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@
CONST	SEGMENT
??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
CONST	SEGMENT
??_C@_09LOOKHEPK@VK_NUMPAD?$AA@ DB 'VK_NUMPAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@ DB 'F', 00H, '%', 00H, 'd', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@ DB 'O', 00H
	DB	'E', 00H, 'M', 00H, '-', 00H, '%', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@ DB '%', 00H, 'h', 00H, 'c', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetKeyName
_TEXT	SEGMENT
_key$86408 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_vKey$ = 8						; size = 4
_keyName$ = 12						; size = 4
_GetKeyName PROC					; COMDAT

; 43   : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax

; 44   : 	BOOL result = TRUE;
; 45   : 
; 46   : 	if (vKey >= 0x30 && vKey <= 0x5a)	

  0000e	8b 44 24 18	 mov	 eax, DWORD PTR _vKey$[esp+16]
  00012	56		 push	 esi
  00013	8b 74 24 20	 mov	 esi, DWORD PTR _keyName$[esp+20]
  00017	8d 48 d0	 lea	 ecx, DWORD PTR [eax-48]
  0001a	57		 push	 edi
  0001b	bf 01 00 00 00	 mov	 edi, 1
  00020	83 f9 2a	 cmp	 ecx, 42			; 0000002aH
  00023	77 15		 ja	 SHORT $LN43@GetKeyName

; 47   : 	{
; 48   : 		// ASCII characters
; 49   : 		wsprintfW (keyName, L"%hc", (char) vKey);

  00025	0f be d0	 movsx	 edx, al
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@
  0002e	56		 push	 esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00035	e9 4d 06 00 00	 jmp	 $LN95@GetKeyName
$LN43@GetKeyName:

; 50   : 	}
; 51   : 	else if (vKey >= 0xE9 && vKey <= 0xF5)	

  0003a	8d 88 17 ff ff
	ff		 lea	 ecx, DWORD PTR [eax-233]
  00040	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00043	77 12		 ja	 SHORT $LN41@GetKeyName

; 52   : 	{
; 53   : 		// OEM-specific
; 54   : 		wsprintfW (keyName, L"OEM-%d", vKey);

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@
  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00052	e9 30 06 00 00	 jmp	 $LN95@GetKeyName
$LN41@GetKeyName:

; 55   : 	}
; 56   : 	else if (vKey >= VK_F1 && vKey <= VK_F24)

  00057	8d 50 90	 lea	 edx, DWORD PTR [eax-112]
  0005a	83 fa 17	 cmp	 edx, 23			; 00000017H
  0005d	77 15		 ja	 SHORT $LN39@GetKeyName

; 57   : 	{
; 58   : 		// F1-F24
; 59   : 		wsprintfW (keyName, L"F%d", vKey - VK_F1 + 1);

  0005f	83 c0 91	 add	 eax, -111		; ffffff91H
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@
  00068	56		 push	 esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0006f	e9 13 06 00 00	 jmp	 $LN95@GetKeyName
$LN39@GetKeyName:

; 60   : 	}
; 61   : 	else if (vKey >= VK_NUMPAD0 && vKey <= VK_NUMPAD9)

  00074	8d 48 a0	 lea	 ecx, DWORD PTR [eax-96]
  00077	83 f9 09	 cmp	 ecx, 9
  0007a	77 31		 ja	 SHORT $LN37@GetKeyName

; 62   : 	{
; 63   : 		// Numpad numbers
; 64   : 		wsprintfW (keyName, L"%s %d", GetString ("VK_NUMPAD"), vKey - VK_NUMPAD0); 

  0007c	51		 push	 ecx
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00082	e8 00 00 00 00	 call	 _GetString
  00087	83 c4 04	 add	 esp, 4
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
  00090	56		 push	 esi
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0009a	8b c7		 mov	 eax, edi
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 120  : }

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  000a2	33 cc		 xor	 ecx, esp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	83 c4 14	 add	 esp, 20			; 00000014H
  000ac	c3		 ret	 0
$LN37@GetKeyName:

; 65   : 	}
; 66   : 	else
; 67   : 	{
; 68   : 		switch (vKey)

  000ad	3d db 00 00 00	 cmp	 eax, 219		; 000000dbH
  000b2	0f 87 aa 02 00
	00		 ja	 $LN69@GetKeyName
  000b8	0f 84 74 02 00
	00		 je	 $LN20@GetKeyName
  000be	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000c3	0f 87 79 05 00
	00		 ja	 $LN3@GetKeyName
  000c9	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN93@GetKeyName[eax]
  000d0	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN96@GetKeyName[ecx*4]
$LN33@GetKeyName:

; 69   : 		{
; 70   : 		case VK_MULTIPLY:	wsprintfW (keyName, L"%s *", GetString ("VK_NUMPAD")); break;

  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  000dc	e8 00 00 00 00	 call	 _GetString
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@
  000e7	56		 push	 esi
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  000f1	8b c7		 mov	 eax, edi
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi

; 120  : }

  000f5	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  000f9	33 cc		 xor	 ecx, esp
  000fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00100	83 c4 14	 add	 esp, 20			; 00000014H
  00103	c3		 ret	 0
$LN32@GetKeyName:

; 71   : 		case VK_ADD:		wsprintfW (keyName, L"%s +", GetString ("VK_NUMPAD")); break;

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00109	e8 00 00 00 00	 call	 _GetString
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@
  00114	56		 push	 esi
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0011b	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0011e	8b c7		 mov	 eax, edi
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi

; 120  : }

  00122	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00126	33 cc		 xor	 ecx, esp
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	83 c4 14	 add	 esp, 20			; 00000014H
  00130	c3		 ret	 0
$LN31@GetKeyName:

; 72   : 		case VK_SEPARATOR:	wsprintfW (keyName, L"%s Separator", GetString ("VK_NUMPAD")); break;

  00131	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00136	e8 00 00 00 00	 call	 _GetString
  0013b	50		 push	 eax
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
  00141	56		 push	 esi
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00148	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0014b	8b c7		 mov	 eax, edi
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi

; 120  : }

  0014f	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00153	33 cc		 xor	 ecx, esp
  00155	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015a	83 c4 14	 add	 esp, 20			; 00000014H
  0015d	c3		 ret	 0
$LN30@GetKeyName:

; 73   : 		case VK_SUBTRACT:	wsprintfW (keyName, L"%s -", GetString ("VK_NUMPAD")); break;

  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00163	e8 00 00 00 00	 call	 _GetString
  00168	50		 push	 eax
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@
  0016e	56		 push	 esi
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00175	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  00178	8b c7		 mov	 eax, edi
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi

; 120  : }

  0017c	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00180	33 cc		 xor	 ecx, esp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	83 c4 14	 add	 esp, 20			; 00000014H
  0018a	c3		 ret	 0
$LN29@GetKeyName:

; 74   : 		case VK_DECIMAL:	wsprintfW (keyName, L"%s .", GetString ("VK_NUMPAD")); break;

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00190	e8 00 00 00 00	 call	 _GetString
  00195	50		 push	 eax
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@
  0019b	56		 push	 esi
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  001a2	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  001a5	8b c7		 mov	 eax, edi
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi

; 120  : }

  001a9	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  001ad	33 cc		 xor	 ecx, esp
  001af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b4	83 c4 14	 add	 esp, 20			; 00000014H
  001b7	c3		 ret	 0
$LN28@GetKeyName:

; 75   : 		case VK_DIVIDE:		wsprintfW (keyName, L"%s /", GetString ("VK_NUMPAD")); break;

  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  001bd	e8 00 00 00 00	 call	 _GetString
  001c2	50		 push	 eax
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@
  001c8	56		 push	 esi
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  001cf	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  001d2	8b c7		 mov	 eax, edi
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi

; 120  : }

  001d6	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  001da	33 cc		 xor	 ecx, esp
  001dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e1	83 c4 14	 add	 esp, 20			; 00000014H
  001e4	c3		 ret	 0
$LN27@GetKeyName:

; 76   : 		case VK_OEM_1:		wcscpy (keyName, L"OEM 1 (';')"); break;

  001e5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@
  001ea	2b f0		 sub	 esi, eax
  001ec	8d 64 24 00	 npad	 4
$LL46@GetKeyName:
  001f0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001f3	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx
  001f7	83 c0 02	 add	 eax, 2
  001fa	66 85 c9	 test	 cx, cx
  001fd	75 f1		 jne	 SHORT $LL46@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  001ff	8b c7		 mov	 eax, edi
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi

; 120  : }

  00203	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00207	33 cc		 xor	 ecx, esp
  00209	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020e	83 c4 14	 add	 esp, 20			; 00000014H
  00211	c3		 ret	 0
$LN26@GetKeyName:

; 77   : 		case VK_OEM_PLUS:	wcscpy (keyName, L"+"); break;

  00212	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00217	2b f0		 sub	 esi, eax
  00219	8d a4 24 00 00
	00 00		 npad	 7
$LL47@GetKeyName:
  00220	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00223	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx
  00227	83 c0 02	 add	 eax, 2
  0022a	66 85 c9	 test	 cx, cx
  0022d	75 f1		 jne	 SHORT $LL47@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0022f	8b c7		 mov	 eax, edi
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi

; 120  : }

  00233	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00237	33 cc		 xor	 ecx, esp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	83 c4 14	 add	 esp, 20			; 00000014H
  00241	c3		 ret	 0
$LN25@GetKeyName:

; 78   : 		case VK_OEM_COMMA:	wcscpy (keyName, L","); break;

  00242	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@
  00247	2b f0		 sub	 esi, eax
  00249	8d a4 24 00 00
	00 00		 npad	 7
$LL48@GetKeyName:
  00250	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00253	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx
  00257	83 c0 02	 add	 eax, 2
  0025a	66 85 c9	 test	 cx, cx
  0025d	75 f1		 jne	 SHORT $LL48@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0025f	8b c7		 mov	 eax, edi
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi

; 120  : }

  00263	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00267	33 cc		 xor	 ecx, esp
  00269	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026e	83 c4 14	 add	 esp, 20			; 00000014H
  00271	c3		 ret	 0
$LN24@GetKeyName:

; 79   : 		case VK_OEM_MINUS:	wcscpy (keyName, L"-"); break;

  00272	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_13IMODFHAA@?$AA?9?$AA?$AA@
  00277	2b f0		 sub	 esi, eax
  00279	8d a4 24 00 00
	00 00		 npad	 7
$LL49@GetKeyName:
  00280	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00283	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00287	83 c0 02	 add	 eax, 2
  0028a	66 85 c9	 test	 cx, cx
  0028d	75 f1		 jne	 SHORT $LL49@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0028f	8b c7		 mov	 eax, edi
  00291	5f		 pop	 edi
  00292	5e		 pop	 esi

; 120  : }

  00293	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00297	33 cc		 xor	 ecx, esp
  00299	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029e	83 c4 14	 add	 esp, 20			; 00000014H
  002a1	c3		 ret	 0
$LN23@GetKeyName:

; 80   : 		case VK_OEM_PERIOD:	wcscpy (keyName, L".");	break;

  002a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@
  002a7	2b f0		 sub	 esi, eax
  002a9	8d a4 24 00 00
	00 00		 npad	 7
$LL50@GetKeyName:
  002b0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002b3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  002b7	83 c0 02	 add	 eax, 2
  002ba	66 85 c9	 test	 cx, cx
  002bd	75 f1		 jne	 SHORT $LL50@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  002bf	8b c7		 mov	 eax, edi
  002c1	5f		 pop	 edi
  002c2	5e		 pop	 esi

; 120  : }

  002c3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  002c7	33 cc		 xor	 ecx, esp
  002c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ce	83 c4 14	 add	 esp, 20			; 00000014H
  002d1	c3		 ret	 0
$LN22@GetKeyName:

; 81   : 		case VK_OEM_2:		wcscpy (keyName, L"OEM 2 ('/')"); break;

  002d2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@
  002d7	2b f0		 sub	 esi, eax
  002d9	8d a4 24 00 00
	00 00		 npad	 7
$LL51@GetKeyName:
  002e0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002e3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  002e7	83 c0 02	 add	 eax, 2
  002ea	66 85 c9	 test	 cx, cx
  002ed	75 f1		 jne	 SHORT $LL51@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  002ef	8b c7		 mov	 eax, edi
  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi

; 120  : }

  002f3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  002f7	33 cc		 xor	 ecx, esp
  002f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fe	83 c4 14	 add	 esp, 20			; 00000014H
  00301	c3		 ret	 0
$LN21@GetKeyName:

; 82   : 		case VK_OEM_3:		wcscpy (keyName, L"OEM 3 (`)"); break;

  00302	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@
  00307	2b f0		 sub	 esi, eax
  00309	8d a4 24 00 00
	00 00		 npad	 7
$LL52@GetKeyName:
  00310	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00313	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00317	83 c0 02	 add	 eax, 2
  0031a	66 85 c9	 test	 cx, cx
  0031d	75 f1		 jne	 SHORT $LL52@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0031f	8b c7		 mov	 eax, edi
  00321	5f		 pop	 edi
  00322	5e		 pop	 esi

; 120  : }

  00323	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00327	33 cc		 xor	 ecx, esp
  00329	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032e	83 c4 14	 add	 esp, 20			; 00000014H
  00331	c3		 ret	 0
$LN20@GetKeyName:

; 83   : 		case VK_OEM_4:		wcscpy (keyName, L"OEM 4 ('[')"); break;

  00332	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@
  00337	2b f0		 sub	 esi, eax
  00339	8d a4 24 00 00
	00 00		 npad	 7
$LL53@GetKeyName:
  00340	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00343	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00347	83 c0 02	 add	 eax, 2
  0034a	66 85 c9	 test	 cx, cx
  0034d	75 f1		 jne	 SHORT $LL53@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0034f	8b c7		 mov	 eax, edi
  00351	5f		 pop	 edi
  00352	5e		 pop	 esi

; 120  : }

  00353	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00357	33 cc		 xor	 ecx, esp
  00359	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035e	83 c4 14	 add	 esp, 20			; 00000014H
  00361	c3		 ret	 0
$LN69@GetKeyName:

; 65   : 	}
; 66   : 	else
; 67   : 	{
; 68   : 		switch (vKey)

  00362	8d 88 24 ff ff
	ff		 lea	 ecx, DWORD PTR [eax-220]
  00368	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0036b	0f 87 d1 02 00
	00		 ja	 $LN3@GetKeyName
  00371	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN94@GetKeyName[ecx]
  00378	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN97@GetKeyName[edx*4]
$LN19@GetKeyName:

; 84   : 		case VK_OEM_5:		wcscpy (keyName, L"OEM 5 ('\\')"); break;

  0037f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@
  00384	2b f0		 sub	 esi, eax
$LL54@GetKeyName:
  00386	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00389	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  0038d	83 c0 02	 add	 eax, 2
  00390	66 85 c9	 test	 cx, cx
  00393	75 f1		 jne	 SHORT $LL54@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  00395	8b c7		 mov	 eax, edi
  00397	5f		 pop	 edi
  00398	5e		 pop	 esi

; 120  : }

  00399	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  0039d	33 cc		 xor	 ecx, esp
  0039f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a4	83 c4 14	 add	 esp, 20			; 00000014H
  003a7	c3		 ret	 0
$LN18@GetKeyName:

; 85   : 		case VK_OEM_6:		wcscpy (keyName, L"OEM 6 (']')"); break;

  003a8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@
  003ad	2b f0		 sub	 esi, eax
  003af	90		 npad	 1
$LL55@GetKeyName:
  003b0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  003b3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  003b7	83 c0 02	 add	 eax, 2
  003ba	66 85 c9	 test	 cx, cx
  003bd	75 f1		 jne	 SHORT $LL55@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  003bf	8b c7		 mov	 eax, edi
  003c1	5f		 pop	 edi
  003c2	5e		 pop	 esi

; 120  : }

  003c3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  003c7	33 cc		 xor	 ecx, esp
  003c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ce	83 c4 14	 add	 esp, 20			; 00000014H
  003d1	c3		 ret	 0
$LN17@GetKeyName:

; 86   : 		case VK_OEM_7:		wcscpy (keyName, L"OEM 7 (')"); break;

  003d2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@
  003d7	2b f0		 sub	 esi, eax
  003d9	8d a4 24 00 00
	00 00		 npad	 7
$LL56@GetKeyName:
  003e0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  003e3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  003e7	83 c0 02	 add	 eax, 2
  003ea	66 85 c9	 test	 cx, cx
  003ed	75 f1		 jne	 SHORT $LL56@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  003ef	8b c7		 mov	 eax, edi
  003f1	5f		 pop	 edi
  003f2	5e		 pop	 esi

; 120  : }

  003f3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  003f7	33 cc		 xor	 ecx, esp
  003f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003fe	83 c4 14	 add	 esp, 20			; 00000014H
  00401	c3		 ret	 0
$LN16@GetKeyName:

; 87   : 		case VK_OEM_8:		wcscpy (keyName, L"OEM 8"); break;

  00402	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@
  00407	2b f0		 sub	 esi, eax
  00409	8d a4 24 00 00
	00 00		 npad	 7
$LL57@GetKeyName:
  00410	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00413	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00417	83 c0 02	 add	 eax, 2
  0041a	66 85 c9	 test	 cx, cx
  0041d	75 f1		 jne	 SHORT $LL57@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0041f	8b c7		 mov	 eax, edi
  00421	5f		 pop	 edi
  00422	5e		 pop	 esi

; 120  : }

  00423	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00427	33 cc		 xor	 ecx, esp
  00429	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042e	83 c4 14	 add	 esp, 20			; 00000014H
  00431	c3		 ret	 0
$LN15@GetKeyName:

; 88   : 		case VK_OEM_AX:		wcscpy (keyName, L"OEM AX"); break;

  00432	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@
  00437	2b f0		 sub	 esi, eax
  00439	8d a4 24 00 00
	00 00		 npad	 7
$LL58@GetKeyName:
  00440	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00443	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00447	83 c0 02	 add	 eax, 2
  0044a	66 85 c9	 test	 cx, cx
  0044d	75 f1		 jne	 SHORT $LL58@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0044f	8b c7		 mov	 eax, edi
  00451	5f		 pop	 edi
  00452	5e		 pop	 esi

; 120  : }

  00453	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00457	33 cc		 xor	 ecx, esp
  00459	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045e	83 c4 14	 add	 esp, 20			; 00000014H
  00461	c3		 ret	 0
$LN14@GetKeyName:

; 89   : 		case VK_OEM_102:	wcscpy (keyName, L"OEM 102"); break;

  00462	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@
  00467	2b f0		 sub	 esi, eax
  00469	8d a4 24 00 00
	00 00		 npad	 7
$LL59@GetKeyName:
  00470	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00473	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00477	83 c0 02	 add	 eax, 2
  0047a	66 85 c9	 test	 cx, cx
  0047d	75 f1		 jne	 SHORT $LL59@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0047f	8b c7		 mov	 eax, edi
  00481	5f		 pop	 edi
  00482	5e		 pop	 esi

; 120  : }

  00483	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00487	33 cc		 xor	 ecx, esp
  00489	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0048e	83 c4 14	 add	 esp, 20			; 00000014H
  00491	c3		 ret	 0
$LN13@GetKeyName:

; 90   : 		case VK_ICO_HELP:	wcscpy (keyName, L"ICO_HELP"); break;

  00492	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@
  00497	2b f0		 sub	 esi, eax
  00499	8d a4 24 00 00
	00 00		 npad	 7
$LL60@GetKeyName:
  004a0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004a3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  004a7	83 c0 02	 add	 eax, 2
  004aa	66 85 c9	 test	 cx, cx
  004ad	75 f1		 jne	 SHORT $LL60@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  004af	8b c7		 mov	 eax, edi
  004b1	5f		 pop	 edi
  004b2	5e		 pop	 esi

; 120  : }

  004b3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  004b7	33 cc		 xor	 ecx, esp
  004b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004be	83 c4 14	 add	 esp, 20			; 00000014H
  004c1	c3		 ret	 0
$LN12@GetKeyName:

; 91   : 		case VK_ICO_00:		wcscpy (keyName, L"ICO_00"); break;

  004c2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@
  004c7	2b f0		 sub	 esi, eax
  004c9	8d a4 24 00 00
	00 00		 npad	 7
$LL61@GetKeyName:
  004d0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004d3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  004d7	83 c0 02	 add	 eax, 2
  004da	66 85 c9	 test	 cx, cx
  004dd	75 f1		 jne	 SHORT $LL61@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  004df	8b c7		 mov	 eax, edi
  004e1	5f		 pop	 edi
  004e2	5e		 pop	 esi

; 120  : }

  004e3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  004e7	33 cc		 xor	 ecx, esp
  004e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ee	83 c4 14	 add	 esp, 20			; 00000014H
  004f1	c3		 ret	 0
$LN11@GetKeyName:

; 92   : 		case VK_ICO_CLEAR:	wcscpy (keyName, L"ICO_CLEAR"); break;

  004f2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@
  004f7	2b f0		 sub	 esi, eax
  004f9	8d a4 24 00 00
	00 00		 npad	 7
$LL62@GetKeyName:
  00500	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00503	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00507	83 c0 02	 add	 eax, 2
  0050a	66 85 c9	 test	 cx, cx
  0050d	75 f1		 jne	 SHORT $LL62@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0050f	8b c7		 mov	 eax, edi
  00511	5f		 pop	 edi
  00512	5e		 pop	 esi

; 120  : }

  00513	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00517	33 cc		 xor	 ecx, esp
  00519	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051e	83 c4 14	 add	 esp, 20			; 00000014H
  00521	c3		 ret	 0
$LN10@GetKeyName:

; 93   : 		case VK_ATTN:		wcscpy (keyName, L"Attn"); break;

  00522	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@
  00527	2b f0		 sub	 esi, eax
  00529	8d a4 24 00 00
	00 00		 npad	 7
$LL63@GetKeyName:
  00530	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00533	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00537	83 c0 02	 add	 eax, 2
  0053a	66 85 c9	 test	 cx, cx
  0053d	75 f1		 jne	 SHORT $LL63@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0053f	8b c7		 mov	 eax, edi
  00541	5f		 pop	 edi
  00542	5e		 pop	 esi

; 120  : }

  00543	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00547	33 cc		 xor	 ecx, esp
  00549	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0054e	83 c4 14	 add	 esp, 20			; 00000014H
  00551	c3		 ret	 0
$LN9@GetKeyName:

; 94   : 		case VK_CRSEL:		wcscpy (keyName, L"CrSel"); break;

  00552	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@
  00557	2b f0		 sub	 esi, eax
  00559	8d a4 24 00 00
	00 00		 npad	 7
$LL64@GetKeyName:
  00560	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00563	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00567	83 c0 02	 add	 eax, 2
  0056a	66 85 c9	 test	 cx, cx
  0056d	75 f1		 jne	 SHORT $LL64@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0056f	8b c7		 mov	 eax, edi
  00571	5f		 pop	 edi
  00572	5e		 pop	 esi

; 120  : }

  00573	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00577	33 cc		 xor	 ecx, esp
  00579	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0057e	83 c4 14	 add	 esp, 20			; 00000014H
  00581	c3		 ret	 0
$LN8@GetKeyName:

; 95   : 		case VK_EXSEL:		wcscpy (keyName, L"ExSel"); break;

  00582	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@
  00587	2b f0		 sub	 esi, eax
  00589	8d a4 24 00 00
	00 00		 npad	 7
$LL65@GetKeyName:
  00590	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00593	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00597	83 c0 02	 add	 eax, 2
  0059a	66 85 c9	 test	 cx, cx
  0059d	75 f1		 jne	 SHORT $LL65@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0059f	8b c7		 mov	 eax, edi
  005a1	5f		 pop	 edi
  005a2	5e		 pop	 esi

; 120  : }

  005a3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  005a7	33 cc		 xor	 ecx, esp
  005a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ae	83 c4 14	 add	 esp, 20			; 00000014H
  005b1	c3		 ret	 0
$LN7@GetKeyName:

; 96   : 		case VK_EREOF:		wcscpy (keyName, L"Erase EOF"); break;

  005b2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@
  005b7	2b f0		 sub	 esi, eax
  005b9	8d a4 24 00 00
	00 00		 npad	 7
$LL66@GetKeyName:
  005c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  005c3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  005c7	83 c0 02	 add	 eax, 2
  005ca	66 85 c9	 test	 cx, cx
  005cd	75 f1		 jne	 SHORT $LL66@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  005cf	8b c7		 mov	 eax, edi
  005d1	5f		 pop	 edi
  005d2	5e		 pop	 esi

; 120  : }

  005d3	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  005d7	33 cc		 xor	 ecx, esp
  005d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005de	83 c4 14	 add	 esp, 20			; 00000014H
  005e1	c3		 ret	 0
$LN6@GetKeyName:

; 97   : 		case VK_PA1:		wcscpy (keyName, L"PA1"); break;

  005e2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@
  005e7	2b f0		 sub	 esi, eax
  005e9	8d a4 24 00 00
	00 00		 npad	 7
$LL67@GetKeyName:
  005f0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  005f3	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  005f7	83 c0 02	 add	 eax, 2
  005fa	66 85 c9	 test	 cx, cx
  005fd	75 f1		 jne	 SHORT $LL67@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  005ff	8b c7		 mov	 eax, edi
  00601	5f		 pop	 edi
  00602	5e		 pop	 esi

; 120  : }

  00603	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00607	33 cc		 xor	 ecx, esp
  00609	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0060e	83 c4 14	 add	 esp, 20			; 00000014H
  00611	c3		 ret	 0
$LN5@GetKeyName:

; 98   : 		case VK_OEM_CLEAR:	wcscpy (keyName, L"OEM Clear"); break;

  00612	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@
  00617	2b f0		 sub	 esi, eax
  00619	8d a4 24 00 00
	00 00		 npad	 7
$LL68@GetKeyName:
  00620	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00623	66 89 0c 30	 mov	 WORD PTR [eax+esi], cx
  00627	83 c0 02	 add	 eax, 2
  0062a	66 85 c9	 test	 cx, cx
  0062d	75 f1		 jne	 SHORT $LL68@GetKeyName

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  0062f	8b c7		 mov	 eax, edi
  00631	5f		 pop	 edi
  00632	5e		 pop	 esi

; 120  : }

  00633	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00637	33 cc		 xor	 ecx, esp
  00639	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0063e	83 c4 14	 add	 esp, 20			; 00000014H
  00641	c3		 ret	 0
$LN3@GetKeyName:

; 99   : 
; 100  : 		case 0:
; 101  : 		case 1:
; 102  : 		case 0xFF:
; 103  : 			result = FALSE;
; 104  : 			break;
; 105  : 
; 106  : 		default:
; 107  : 			{
; 108  : 				char key[16];
; 109  : 				wchar_t *desc;
; 110  : 				sprintf (key, "VKEY_%02X", vKey);

  00642	50		 push	 eax
  00643	8d 44 24 0c	 lea	 eax, DWORD PTR _key$86408[esp+32]
  00647	68 00 00 00 00	 push	 OFFSET ??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@
  0064c	50		 push	 eax
  0064d	e8 00 00 00 00	 call	 _sprintf

; 111  : 				desc = GetString (key);

  00652	8d 4c 24 14	 lea	 ecx, DWORD PTR _key$86408[esp+40]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 _GetString
  0065c	83 c4 10	 add	 esp, 16			; 00000010H

; 112  : 				if (desc == UnknownString)

  0065f	3d 00 00 00 00	 cmp	 eax, OFFSET _UnknownString
  00664	75 15		 jne	 SHORT $LN2@GetKeyName
$LN4@GetKeyName:

; 113  : 					result = FALSE;

  00666	33 ff		 xor	 edi, edi

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 	return result;

  00668	8b c7		 mov	 eax, edi
  0066a	5f		 pop	 edi
  0066b	5e		 pop	 esi

; 120  : }

  0066c	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00670	33 cc		 xor	 ecx, esp
  00672	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00677	83 c4 14	 add	 esp, 20			; 00000014H
  0067a	c3		 ret	 0
$LN2@GetKeyName:

; 114  : 				else
; 115  : 					wcsncpy (keyName, desc, MAX_KEY_COMB_NAME_LEN);

  0067b	68 04 01 00 00	 push	 260			; 00000104H
  00680	50		 push	 eax
  00681	56		 push	 esi
  00682	e8 00 00 00 00	 call	 _wcsncpy
$LN95@GetKeyName:

; 120  : }

  00687	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
  0068b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0068e	8b c7		 mov	 eax, edi
  00690	5f		 pop	 edi
  00691	5e		 pop	 esi
  00692	33 cc		 xor	 ecx, esp
  00694	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00699	83 c4 14	 add	 esp, 20			; 00000014H
  0069c	c3		 ret	 0
  0069d	8d 49 00	 npad	 3
$LN96@GetKeyName:
  006a0	00 00 00 00	 DD	 $LN4@GetKeyName
  006a4	00 00 00 00	 DD	 $LN33@GetKeyName
  006a8	00 00 00 00	 DD	 $LN32@GetKeyName
  006ac	00 00 00 00	 DD	 $LN31@GetKeyName
  006b0	00 00 00 00	 DD	 $LN30@GetKeyName
  006b4	00 00 00 00	 DD	 $LN29@GetKeyName
  006b8	00 00 00 00	 DD	 $LN28@GetKeyName
  006bc	00 00 00 00	 DD	 $LN27@GetKeyName
  006c0	00 00 00 00	 DD	 $LN26@GetKeyName
  006c4	00 00 00 00	 DD	 $LN25@GetKeyName
  006c8	00 00 00 00	 DD	 $LN24@GetKeyName
  006cc	00 00 00 00	 DD	 $LN23@GetKeyName
  006d0	00 00 00 00	 DD	 $LN22@GetKeyName
  006d4	00 00 00 00	 DD	 $LN21@GetKeyName
  006d8	00 00 00 00	 DD	 $LN3@GetKeyName
$LN93@GetKeyName:
  006dc	00		 DB	 0
  006dd	00		 DB	 0
  006de	0e		 DB	 14			; 0000000eH
  006df	0e		 DB	 14			; 0000000eH
  006e0	0e		 DB	 14			; 0000000eH
  006e1	0e		 DB	 14			; 0000000eH
  006e2	0e		 DB	 14			; 0000000eH
  006e3	0e		 DB	 14			; 0000000eH
  006e4	0e		 DB	 14			; 0000000eH
  006e5	0e		 DB	 14			; 0000000eH
  006e6	0e		 DB	 14			; 0000000eH
  006e7	0e		 DB	 14			; 0000000eH
  006e8	0e		 DB	 14			; 0000000eH
  006e9	0e		 DB	 14			; 0000000eH
  006ea	0e		 DB	 14			; 0000000eH
  006eb	0e		 DB	 14			; 0000000eH
  006ec	0e		 DB	 14			; 0000000eH
  006ed	0e		 DB	 14			; 0000000eH
  006ee	0e		 DB	 14			; 0000000eH
  006ef	0e		 DB	 14			; 0000000eH
  006f0	0e		 DB	 14			; 0000000eH
  006f1	0e		 DB	 14			; 0000000eH
  006f2	0e		 DB	 14			; 0000000eH
  006f3	0e		 DB	 14			; 0000000eH
  006f4	0e		 DB	 14			; 0000000eH
  006f5	0e		 DB	 14			; 0000000eH
  006f6	0e		 DB	 14			; 0000000eH
  006f7	0e		 DB	 14			; 0000000eH
  006f8	0e		 DB	 14			; 0000000eH
  006f9	0e		 DB	 14			; 0000000eH
  006fa	0e		 DB	 14			; 0000000eH
  006fb	0e		 DB	 14			; 0000000eH
  006fc	0e		 DB	 14			; 0000000eH
  006fd	0e		 DB	 14			; 0000000eH
  006fe	0e		 DB	 14			; 0000000eH
  006ff	0e		 DB	 14			; 0000000eH
  00700	0e		 DB	 14			; 0000000eH
  00701	0e		 DB	 14			; 0000000eH
  00702	0e		 DB	 14			; 0000000eH
  00703	0e		 DB	 14			; 0000000eH
  00704	0e		 DB	 14			; 0000000eH
  00705	0e		 DB	 14			; 0000000eH
  00706	0e		 DB	 14			; 0000000eH
  00707	0e		 DB	 14			; 0000000eH
  00708	0e		 DB	 14			; 0000000eH
  00709	0e		 DB	 14			; 0000000eH
  0070a	0e		 DB	 14			; 0000000eH
  0070b	0e		 DB	 14			; 0000000eH
  0070c	0e		 DB	 14			; 0000000eH
  0070d	0e		 DB	 14			; 0000000eH
  0070e	0e		 DB	 14			; 0000000eH
  0070f	0e		 DB	 14			; 0000000eH
  00710	0e		 DB	 14			; 0000000eH
  00711	0e		 DB	 14			; 0000000eH
  00712	0e		 DB	 14			; 0000000eH
  00713	0e		 DB	 14			; 0000000eH
  00714	0e		 DB	 14			; 0000000eH
  00715	0e		 DB	 14			; 0000000eH
  00716	0e		 DB	 14			; 0000000eH
  00717	0e		 DB	 14			; 0000000eH
  00718	0e		 DB	 14			; 0000000eH
  00719	0e		 DB	 14			; 0000000eH
  0071a	0e		 DB	 14			; 0000000eH
  0071b	0e		 DB	 14			; 0000000eH
  0071c	0e		 DB	 14			; 0000000eH
  0071d	0e		 DB	 14			; 0000000eH
  0071e	0e		 DB	 14			; 0000000eH
  0071f	0e		 DB	 14			; 0000000eH
  00720	0e		 DB	 14			; 0000000eH
  00721	0e		 DB	 14			; 0000000eH
  00722	0e		 DB	 14			; 0000000eH
  00723	0e		 DB	 14			; 0000000eH
  00724	0e		 DB	 14			; 0000000eH
  00725	0e		 DB	 14			; 0000000eH
  00726	0e		 DB	 14			; 0000000eH
  00727	0e		 DB	 14			; 0000000eH
  00728	0e		 DB	 14			; 0000000eH
  00729	0e		 DB	 14			; 0000000eH
  0072a	0e		 DB	 14			; 0000000eH
  0072b	0e		 DB	 14			; 0000000eH
  0072c	0e		 DB	 14			; 0000000eH
  0072d	0e		 DB	 14			; 0000000eH
  0072e	0e		 DB	 14			; 0000000eH
  0072f	0e		 DB	 14			; 0000000eH
  00730	0e		 DB	 14			; 0000000eH
  00731	0e		 DB	 14			; 0000000eH
  00732	0e		 DB	 14			; 0000000eH
  00733	0e		 DB	 14			; 0000000eH
  00734	0e		 DB	 14			; 0000000eH
  00735	0e		 DB	 14			; 0000000eH
  00736	0e		 DB	 14			; 0000000eH
  00737	0e		 DB	 14			; 0000000eH
  00738	0e		 DB	 14			; 0000000eH
  00739	0e		 DB	 14			; 0000000eH
  0073a	0e		 DB	 14			; 0000000eH
  0073b	0e		 DB	 14			; 0000000eH
  0073c	0e		 DB	 14			; 0000000eH
  0073d	0e		 DB	 14			; 0000000eH
  0073e	0e		 DB	 14			; 0000000eH
  0073f	0e		 DB	 14			; 0000000eH
  00740	0e		 DB	 14			; 0000000eH
  00741	0e		 DB	 14			; 0000000eH
  00742	0e		 DB	 14			; 0000000eH
  00743	0e		 DB	 14			; 0000000eH
  00744	0e		 DB	 14			; 0000000eH
  00745	0e		 DB	 14			; 0000000eH
  00746	01		 DB	 1
  00747	02		 DB	 2
  00748	03		 DB	 3
  00749	04		 DB	 4
  0074a	05		 DB	 5
  0074b	06		 DB	 6
  0074c	0e		 DB	 14			; 0000000eH
  0074d	0e		 DB	 14			; 0000000eH
  0074e	0e		 DB	 14			; 0000000eH
  0074f	0e		 DB	 14			; 0000000eH
  00750	0e		 DB	 14			; 0000000eH
  00751	0e		 DB	 14			; 0000000eH
  00752	0e		 DB	 14			; 0000000eH
  00753	0e		 DB	 14			; 0000000eH
  00754	0e		 DB	 14			; 0000000eH
  00755	0e		 DB	 14			; 0000000eH
  00756	0e		 DB	 14			; 0000000eH
  00757	0e		 DB	 14			; 0000000eH
  00758	0e		 DB	 14			; 0000000eH
  00759	0e		 DB	 14			; 0000000eH
  0075a	0e		 DB	 14			; 0000000eH
  0075b	0e		 DB	 14			; 0000000eH
  0075c	0e		 DB	 14			; 0000000eH
  0075d	0e		 DB	 14			; 0000000eH
  0075e	0e		 DB	 14			; 0000000eH
  0075f	0e		 DB	 14			; 0000000eH
  00760	0e		 DB	 14			; 0000000eH
  00761	0e		 DB	 14			; 0000000eH
  00762	0e		 DB	 14			; 0000000eH
  00763	0e		 DB	 14			; 0000000eH
  00764	0e		 DB	 14			; 0000000eH
  00765	0e		 DB	 14			; 0000000eH
  00766	0e		 DB	 14			; 0000000eH
  00767	0e		 DB	 14			; 0000000eH
  00768	0e		 DB	 14			; 0000000eH
  00769	0e		 DB	 14			; 0000000eH
  0076a	0e		 DB	 14			; 0000000eH
  0076b	0e		 DB	 14			; 0000000eH
  0076c	0e		 DB	 14			; 0000000eH
  0076d	0e		 DB	 14			; 0000000eH
  0076e	0e		 DB	 14			; 0000000eH
  0076f	0e		 DB	 14			; 0000000eH
  00770	0e		 DB	 14			; 0000000eH
  00771	0e		 DB	 14			; 0000000eH
  00772	0e		 DB	 14			; 0000000eH
  00773	0e		 DB	 14			; 0000000eH
  00774	0e		 DB	 14			; 0000000eH
  00775	0e		 DB	 14			; 0000000eH
  00776	0e		 DB	 14			; 0000000eH
  00777	0e		 DB	 14			; 0000000eH
  00778	0e		 DB	 14			; 0000000eH
  00779	0e		 DB	 14			; 0000000eH
  0077a	0e		 DB	 14			; 0000000eH
  0077b	0e		 DB	 14			; 0000000eH
  0077c	0e		 DB	 14			; 0000000eH
  0077d	0e		 DB	 14			; 0000000eH
  0077e	0e		 DB	 14			; 0000000eH
  0077f	0e		 DB	 14			; 0000000eH
  00780	0e		 DB	 14			; 0000000eH
  00781	0e		 DB	 14			; 0000000eH
  00782	0e		 DB	 14			; 0000000eH
  00783	0e		 DB	 14			; 0000000eH
  00784	0e		 DB	 14			; 0000000eH
  00785	0e		 DB	 14			; 0000000eH
  00786	0e		 DB	 14			; 0000000eH
  00787	0e		 DB	 14			; 0000000eH
  00788	0e		 DB	 14			; 0000000eH
  00789	0e		 DB	 14			; 0000000eH
  0078a	0e		 DB	 14			; 0000000eH
  0078b	0e		 DB	 14			; 0000000eH
  0078c	0e		 DB	 14			; 0000000eH
  0078d	0e		 DB	 14			; 0000000eH
  0078e	0e		 DB	 14			; 0000000eH
  0078f	0e		 DB	 14			; 0000000eH
  00790	0e		 DB	 14			; 0000000eH
  00791	0e		 DB	 14			; 0000000eH
  00792	0e		 DB	 14			; 0000000eH
  00793	0e		 DB	 14			; 0000000eH
  00794	0e		 DB	 14			; 0000000eH
  00795	0e		 DB	 14			; 0000000eH
  00796	07		 DB	 7
  00797	08		 DB	 8
  00798	09		 DB	 9
  00799	0a		 DB	 10			; 0000000aH
  0079a	0b		 DB	 11			; 0000000bH
  0079b	0c		 DB	 12			; 0000000cH
  0079c	0d		 DB	 13			; 0000000dH
  0079d	8d 49 00	 npad	 3
$LN97@GetKeyName:
  007a0	00 00 00 00	 DD	 $LN19@GetKeyName
  007a4	00 00 00 00	 DD	 $LN18@GetKeyName
  007a8	00 00 00 00	 DD	 $LN17@GetKeyName
  007ac	00 00 00 00	 DD	 $LN16@GetKeyName
  007b0	00 00 00 00	 DD	 $LN15@GetKeyName
  007b4	00 00 00 00	 DD	 $LN14@GetKeyName
  007b8	00 00 00 00	 DD	 $LN13@GetKeyName
  007bc	00 00 00 00	 DD	 $LN12@GetKeyName
  007c0	00 00 00 00	 DD	 $LN11@GetKeyName
  007c4	00 00 00 00	 DD	 $LN10@GetKeyName
  007c8	00 00 00 00	 DD	 $LN9@GetKeyName
  007cc	00 00 00 00	 DD	 $LN8@GetKeyName
  007d0	00 00 00 00	 DD	 $LN7@GetKeyName
  007d4	00 00 00 00	 DD	 $LN6@GetKeyName
  007d8	00 00 00 00	 DD	 $LN5@GetKeyName
  007dc	00 00 00 00	 DD	 $LN4@GetKeyName
  007e0	00 00 00 00	 DD	 $LN3@GetKeyName
$LN94@GetKeyName:
  007e4	00		 DB	 0
  007e5	01		 DB	 1
  007e6	02		 DB	 2
  007e7	03		 DB	 3
  007e8	10		 DB	 16			; 00000010H
  007e9	04		 DB	 4
  007ea	05		 DB	 5
  007eb	06		 DB	 6
  007ec	07		 DB	 7
  007ed	10		 DB	 16			; 00000010H
  007ee	08		 DB	 8
  007ef	10		 DB	 16			; 00000010H
  007f0	10		 DB	 16			; 00000010H
  007f1	10		 DB	 16			; 00000010H
  007f2	10		 DB	 16			; 00000010H
  007f3	10		 DB	 16			; 00000010H
  007f4	10		 DB	 16			; 00000010H
  007f5	10		 DB	 16			; 00000010H
  007f6	10		 DB	 16			; 00000010H
  007f7	10		 DB	 16			; 00000010H
  007f8	10		 DB	 16			; 00000010H
  007f9	10		 DB	 16			; 00000010H
  007fa	10		 DB	 16			; 00000010H
  007fb	10		 DB	 16			; 00000010H
  007fc	10		 DB	 16			; 00000010H
  007fd	10		 DB	 16			; 00000010H
  007fe	09		 DB	 9
  007ff	0a		 DB	 10			; 0000000aH
  00800	0b		 DB	 11			; 0000000bH
  00801	0c		 DB	 12			; 0000000cH
  00802	10		 DB	 16			; 00000010H
  00803	10		 DB	 16			; 00000010H
  00804	10		 DB	 16			; 00000010H
  00805	0d		 DB	 13			; 0000000dH
  00806	0e		 DB	 14			; 0000000eH
  00807	0f		 DB	 15			; 0000000fH
_GetKeyName ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ShortcutInUse
_TEXT	SEGMENT
_ShortcutInUse PROC					; COMDAT
; _vKeyCode$ = esi
; _modifiers$ = edx
; _hotkeys$ = ecx

; 125  : 	int i;
; 126  : 
; 127  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00000	33 c0		 xor	 eax, eax
$LL4@ShortcutIn:

; 128  : 	{
; 129  : 		if (hotkeys[i].vKeyCode == vKeyCode && hotkeys[i].vKeyModifiers == modifiers)

  00002	39 34 c1	 cmp	 DWORD PTR [ecx+eax*8], esi
  00005	75 06		 jne	 SHORT $LN3@ShortcutIn
  00007	39 54 c1 04	 cmp	 DWORD PTR [ecx+eax*8+4], edx
  0000b	74 09		 je	 SHORT $LN8@ShortcutIn
$LN3@ShortcutIn:

; 125  : 	int i;
; 126  : 
; 127  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  0000d	40		 inc	 eax
  0000e	83 f8 09	 cmp	 eax, 9
  00011	7c ef		 jl	 SHORT $LL4@ShortcutIn

; 131  : 	}
; 132  : 	return FALSE;

  00013	33 c0		 xor	 eax, eax

; 133  : }

  00015	c3		 ret	 0
$LN8@ShortcutIn:

; 130  : 			return TRUE;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 133  : }

  0001b	c3		 ret	 0
_ShortcutInUse ENDP
_TEXT	ENDS
PUBLIC	_UnregisterAllHotkeys
EXTRN	__imp__UnregisterHotKey@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _UnregisterAllHotkeys
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_hotkeys$ = 12						; size = 4
_UnregisterAllHotkeys PROC				; COMDAT

; 137  : {

  00000	53		 push	 ebx

; 138  : 	int i;
; 139  : 
; 140  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _hwndDlg$[esp]
  00005	55		 push	 ebp
  00006	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__UnregisterHotKey@8
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7c 24 18	 mov	 edi, DWORD PTR _hotkeys$[esp+12]
  00012	33 f6		 xor	 esi, esi
$LL9@Unregister:

; 141  : 	{
; 142  : 		if (hotkeys[i].vKeyCode != 0)

  00014	83 3c f7 00	 cmp	 DWORD PTR [edi+esi*8], 0
  00018	74 04		 je	 SHORT $LN3@Unregister

; 143  : 			UnregisterHotKey (hwndDlg, i);

  0001a	56		 push	 esi
  0001b	53		 push	 ebx
  0001c	ff d5		 call	 ebp
$LN3@Unregister:
  0001e	46		 inc	 esi
  0001f	83 fe 09	 cmp	 esi, 9
  00022	7c f0		 jl	 SHORT $LL9@Unregister
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	5b		 pop	 ebx

; 144  : 
; 145  : 	}
; 146  : }

  00028	c3		 ret	 0
_UnregisterAllHotkeys ENDP
_TEXT	ENDS
PUBLIC	_RegisterAllHotkeys
EXTRN	__imp__RegisterHotKey@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _RegisterAllHotkeys
_TEXT	SEGMENT
_result$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_hotkeys$ = 12						; size = 4
_RegisterAllHotkeys PROC				; COMDAT

; 150  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 151  : 	BOOL result = TRUE;
; 152  : 	int i;
; 153  : 
; 154  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR _hwndDlg$[esp+4]
  00006	55		 push	 ebp
  00007	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__RegisterHotKey@16
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 1c	 mov	 edi, DWORD PTR _hotkeys$[esp+16]
  00013	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _result$[esp+20], 1
  0001b	33 f6		 xor	 esi, esi
  0001d	8d 49 00	 npad	 3
$LL10@RegisterAl:

; 155  : 	{
; 156  : 		if (hotkeys[i].vKeyCode != 0
; 157  : 		&& !RegisterHotKey (hwndDlg, i, hotkeys[i].vKeyModifiers, hotkeys[i].vKeyCode))

  00020	83 3c f7 00	 cmp	 DWORD PTR [edi+esi*8], 0
  00024	74 15		 je	 SHORT $LN3@RegisterAl
  00026	8b 04 f7	 mov	 eax, DWORD PTR [edi+esi*8]
  00029	8b 4c f7 04	 mov	 ecx, DWORD PTR [edi+esi*8+4]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	56		 push	 esi
  00030	53		 push	 ebx
  00031	ff d5		 call	 ebp
  00033	85 c0		 test	 eax, eax
  00035	75 04		 jne	 SHORT $LN3@RegisterAl

; 158  : 			result = FALSE;

  00037	89 44 24 10	 mov	 DWORD PTR _result$[esp+20], eax
$LN3@RegisterAl:

; 151  : 	BOOL result = TRUE;
; 152  : 	int i;
; 153  : 
; 154  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  0003b	46		 inc	 esi
  0003c	83 fe 09	 cmp	 esi, 9
  0003f	7c df		 jl	 SHORT $LL10@RegisterAl

; 159  : 	}
; 160  : 
; 161  : 	return result;

  00041	8b 44 24 10	 mov	 eax, DWORD PTR _result$[esp+20]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	5b		 pop	 ebx

; 162  : }

  00049	59		 pop	 ecx
  0004a	c3		 ret	 0
_RegisterAllHotkeys ENDP
_TEXT	ENDS
PUBLIC	??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_06LKCBLNGG@VK_WIN?$AA@			; `string'
PUBLIC	??_C@_06HJLFINBF@VK_ALT?$AA@			; `string'
PUBLIC	??_C@_08BHJBIDAM@VK_SHIFT?$AA@			; `string'
PUBLIC	??_C@_0L@GEFMOENA@VK_CONTROL?$AA@		; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@ ; `string'
PUBLIC	??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@ ; `string'
PUBLIC	??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@ ; `string'
PUBLIC	??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@ ; `string'
PUBLIC	??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@		; `string'
PUBLIC	??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@		; `string'
PUBLIC	??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
_tmpHotkeys DQ	09H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKCBLNGG@VK_WIN?$AA@
CONST	SEGMENT
??_C@_06LKCBLNGG@VK_WIN?$AA@ DB 'VK_WIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJLFINBF@VK_ALT?$AA@
CONST	SEGMENT
??_C@_06HJLFINBF@VK_ALT?$AA@ DB 'VK_ALT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHJBIDAM@VK_SHIFT?$AA@
CONST	SEGMENT
??_C@_08BHJBIDAM@VK_SHIFT?$AA@ DB 'VK_SHIFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEFMOENA@VK_CONTROL?$AA@
CONST	SEGMENT
??_C@_0L@GEFMOENA@VK_CONTROL?$AA@ DB 'VK_CONTROL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@
CONST	SEGMENT
??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@ DB '[', 00H, '?', 00H, ']'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@
CONST	SEGMENT
??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@ DB 'IDM_CLOSE_ALL_TO'
	DB	'KEN_SESSIONS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@
CONST	SEGMENT
??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@ DB 'HK_SHOW_HIDE_MAIN_WI'
	DB	'NDOW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@ DB 'HK_MOUNT_FAVORITE_V'
	DB	'OLUMES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@
CONST	SEGMENT
??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@ DB 'HK_FORCE_DISMOUN'
	DB	'T_ALL_AND_WIPE_AND_EXIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@
CONST	SEGMENT
??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@ DB 'HK_FORCE_DISMO'
	DB	'UNT_ALL_AND_WIPE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@
CONST	SEGMENT
??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@ DB 'HK_DISMOUNT_ALL_AND_'
	DB	'WIPE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@
CONST	SEGMENT
??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@ DB 'HK_WIPE_CACHE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@
CONST	SEGMENT
??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@ DB 'HK_DISMOUNT_ALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@
CONST	SEGMENT
??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@ DB 'HK_AUTOMOUNT_DEVICES', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DisplayHotkeyList
_TEXT	SEGMENT
_hList$ = -2140						; size = 4
_item$ = -2136						; size = 52
_ShortcutMod$ = -2084					; size = 520
_Shortcut$ = -1564					; size = 520
_ShortcutFinal$ = -1044					; size = 1040
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_DisplayHotkeyList PROC					; COMDAT

; 166  : {

  00000	81 ec 5c 08 00
	00		 sub	 esp, 2140		; 0000085cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2140], eax
  00014	8b 84 24 60 08
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+2136]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi

; 167  : 	LVITEMW item;
; 168  : 	HWND hList = GetDlgItem (hwndDlg, IDC_HOTKEY_LIST);

  0001e	68 41 04 00 00	 push	 1089			; 00000441H
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0002a	8b f0		 mov	 esi, eax

; 169  : 	int i;
; 170  : 	wchar_t ShortcutMod [MAX_KEY_COMB_NAME_LEN];
; 171  : 	wchar_t ShortcutFinal [MAX_KEY_COMB_NAME_LEN*2];
; 172  : 	wchar_t Shortcut [MAX_KEY_COMB_NAME_LEN];
; 173  : 
; 174  : 	SendMessage (hList, LVM_DELETEALLITEMS,0, (LPARAM)&item);

  0002c	8d 44 24 10	 lea	 eax, DWORD PTR _item$[esp+2152]
  00030	50		 push	 eax
  00031	6a 00		 push	 0
  00033	68 09 10 00 00	 push	 4105			; 00001009H
  00038	56		 push	 esi
  00039	89 74 24 1c	 mov	 DWORD PTR _hList$[esp+2168], esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 175  : 
; 176  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00043	33 db		 xor	 ebx, ebx
$LL21@DisplayHot:

; 177  : 	{
; 178  : 		memset (&item,0,sizeof(item));

  00045	6a 34		 push	 52			; 00000034H
  00047	8d 4c 24 14	 lea	 ecx, DWORD PTR _item$[esp+2156]
  0004b	6a 00		 push	 0
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 179  : 		item.mask = LVIF_TEXT;

  00056	bf 01 00 00 00	 mov	 edi, 1
  0005b	89 7c 24 10	 mov	 DWORD PTR _item$[esp+2152], edi

; 180  : 		item.iItem = i;

  0005f	89 5c 24 14	 mov	 DWORD PTR _item$[esp+2156], ebx

; 181  : 		item.iSubItem = 0;

  00063	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _item$[esp+2160], 0

; 182  : 
; 183  : 		switch (i)

  0006b	83 fb 08	 cmp	 ebx, 8
  0006e	0f 87 b8 00 00
	00		 ja	 $LN7@DisplayHot
  00074	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN43@DisplayHot[ebx*4]
$LN16@DisplayHot:

; 184  : 		{
; 185  : 			
; 186  : 		case HK_AUTOMOUNT_DEVICES:	
; 187  : 			item.pszText = GetString ("HK_AUTOMOUNT_DEVICES");

  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@
  00080	e8 00 00 00 00	 call	 _GetString
  00085	83 c4 04	 add	 esp, 4
  00088	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 188  : 			break;

  0008c	e9 a3 00 00 00	 jmp	 $LN17@DisplayHot
$LN15@DisplayHot:

; 189  : 
; 190  : 		case HK_DISMOUNT_ALL:	
; 191  : 			item.pszText = GetString ("HK_DISMOUNT_ALL");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@
  00096	e8 00 00 00 00	 call	 _GetString
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 192  : 			break;

  000a2	e9 8d 00 00 00	 jmp	 $LN17@DisplayHot
$LN14@DisplayHot:

; 193  : 
; 194  : 		case HK_WIPE_CACHE:	
; 195  : 			item.pszText = GetString ("HK_WIPE_CACHE");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@
  000ac	e8 00 00 00 00	 call	 _GetString
  000b1	83 c4 04	 add	 esp, 4
  000b4	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 196  : 			break;

  000b8	eb 7a		 jmp	 SHORT $LN17@DisplayHot
$LN13@DisplayHot:

; 197  : 
; 198  : 		case HK_DISMOUNT_ALL_AND_WIPE:	
; 199  : 			item.pszText = GetString ("HK_DISMOUNT_ALL_AND_WIPE");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@
  000bf	e8 00 00 00 00	 call	 _GetString
  000c4	83 c4 04	 add	 esp, 4
  000c7	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 200  : 			break;

  000cb	eb 67		 jmp	 SHORT $LN17@DisplayHot
$LN12@DisplayHot:

; 201  : 
; 202  : 		case HK_FORCE_DISMOUNT_ALL_AND_WIPE:	
; 203  : 			item.pszText = GetString ("HK_FORCE_DISMOUNT_ALL_AND_WIPE");

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@
  000d2	e8 00 00 00 00	 call	 _GetString
  000d7	83 c4 04	 add	 esp, 4
  000da	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 204  : 			break;

  000de	eb 54		 jmp	 SHORT $LN17@DisplayHot
$LN11@DisplayHot:

; 205  : 
; 206  : 		case HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT:	
; 207  : 			item.pszText = GetString ("HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT");

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@
  000e5	e8 00 00 00 00	 call	 _GetString
  000ea	83 c4 04	 add	 esp, 4
  000ed	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 208  : 			break;

  000f1	eb 41		 jmp	 SHORT $LN17@DisplayHot
$LN10@DisplayHot:

; 209  : 
; 210  : 		case HK_MOUNT_FAVORITE_VOLUMES:	
; 211  : 			item.pszText = GetString ("HK_MOUNT_FAVORITE_VOLUMES");

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@
  000f8	e8 00 00 00 00	 call	 _GetString
  000fd	83 c4 04	 add	 esp, 4
  00100	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 212  : 			break;

  00104	eb 2e		 jmp	 SHORT $LN17@DisplayHot
$LN9@DisplayHot:

; 213  : 
; 214  : 		case HK_SHOW_HIDE_MAIN_WINDOW:	
; 215  : 			item.pszText = GetString ("HK_SHOW_HIDE_MAIN_WINDOW");

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@
  0010b	e8 00 00 00 00	 call	 _GetString
  00110	83 c4 04	 add	 esp, 4
  00113	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 216  : 			break;

  00117	eb 1b		 jmp	 SHORT $LN17@DisplayHot
$LN8@DisplayHot:

; 217  : 
; 218  : 		case HK_CLOSE_SECURITY_TOKEN_SESSIONS:
; 219  : 			item.pszText = GetString ("IDM_CLOSE_ALL_TOKEN_SESSIONS");

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@
  0011e	e8 00 00 00 00	 call	 _GetString
  00123	83 c4 04	 add	 esp, 4
  00126	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax

; 220  : 			break;

  0012a	eb 08		 jmp	 SHORT $LN17@DisplayHot
$LN7@DisplayHot:

; 221  : 
; 222  : 		default:		
; 223  : 			item.pszText = L"[?]";

  0012c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _item$[esp+2172], OFFSET ??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@
$LN17@DisplayHot:

; 224  : 		}
; 225  : 
; 226  : 		SendMessageW (hList,LVM_INSERTITEMW,0,(LPARAM)&item);

  00134	8d 54 24 10	 lea	 edx, DWORD PTR _item$[esp+2152]
  00138	52		 push	 edx
  00139	6a 00		 push	 0
  0013b	68 4d 10 00 00	 push	 4173			; 0000104dH
  00140	56		 push	 esi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 227  : 
; 228  : 		item.iSubItem = 1;

  00147	89 7c 24 18	 mov	 DWORD PTR _item$[esp+2160], edi

; 229  : 		wcscpy (Shortcut, L"");

  0014b	33 c0		 xor	 eax, eax
  0014d	8d 49 00	 npad	 3
$LL24@DisplayHot:
  00150	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR ??_C@_11LOCGONAA@?$AA?$AA@[eax]
  00157	66 89 8c 04 4c
	02 00 00	 mov	 WORD PTR _Shortcut$[esp+eax+2152], cx
  0015f	83 c0 02	 add	 eax, 2
  00162	66 85 c9	 test	 cx, cx
  00165	75 e9		 jne	 SHORT $LL24@DisplayHot

; 230  : 		wcscpy (ShortcutMod, L"");

  00167	33 c0		 xor	 eax, eax
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL25@DisplayHot:
  00170	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR ??_C@_11LOCGONAA@?$AA?$AA@[eax]
  00177	66 89 4c 04 44	 mov	 WORD PTR _ShortcutMod$[esp+eax+2152], cx
  0017c	83 c0 02	 add	 eax, 2
  0017f	66 85 c9	 test	 cx, cx
  00182	75 ec		 jne	 SHORT $LL25@DisplayHot

; 231  : 
; 232  : 		if (GetKeyName (tmpHotkeys[i].vKeyCode, Shortcut))

  00184	8b 0c dd 00 00
	00 00		 mov	 ecx, DWORD PTR _tmpHotkeys[ebx*8]
  0018b	8d 84 24 4c 02
	00 00		 lea	 eax, DWORD PTR _Shortcut$[esp+2152]
  00192	50		 push	 eax
  00193	51		 push	 ecx
  00194	e8 00 00 00 00	 call	 _GetKeyName
  00199	83 c4 08	 add	 esp, 8
  0019c	85 c0		 test	 eax, eax
  0019e	0f 84 f4 01 00
	00		 je	 $LN6@DisplayHot

; 233  : 		{
; 234  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_CONTROL)

  001a4	f6 04 dd 04 00
	00 00 02	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 2
  001ac	74 66		 je	 SHORT $LN42@DisplayHot

; 235  : 			{
; 236  : 				wcscat (ShortcutMod, GetString ("VK_CONTROL"));

  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GEFMOENA@VK_CONTROL?$AA@
  001b3	e8 00 00 00 00	 call	 _GetString
  001b8	83 c4 04	 add	 esp, 4
  001bb	8b d0		 mov	 edx, eax
  001bd	8d 49 00	 npad	 3
$LL30@DisplayHot:
  001c0	66 8b 08	 mov	 cx, WORD PTR [eax]
  001c3	83 c0 02	 add	 eax, 2
  001c6	66 85 c9	 test	 cx, cx
  001c9	75 f5		 jne	 SHORT $LL30@DisplayHot
  001cb	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  001cf	2b c2		 sub	 eax, edx
  001d1	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL31@DisplayHot:
  001d4	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  001d8	83 c7 02	 add	 edi, 2
  001db	66 85 c9	 test	 cx, cx
  001de	75 f4		 jne	 SHORT $LL31@DisplayHot
  001e0	8b c8		 mov	 ecx, eax
  001e2	c1 e9 02	 shr	 ecx, 2
  001e5	8b f2		 mov	 esi, edx
  001e7	f3 a5		 rep movsd
  001e9	8b c8		 mov	 ecx, eax
  001eb	83 e1 03	 and	 ecx, 3
  001ee	f3 a4		 rep movsb

; 237  : 				wcscat (ShortcutMod, L"+");

  001f0	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  001f4	83 c7 fe	 add	 edi, -2			; fffffffeH
  001f7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL32@DisplayHot:
  00200	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00204	83 c7 02	 add	 edi, 2
  00207	66 85 c0	 test	 ax, ax
  0020a	75 f4		 jne	 SHORT $LL32@DisplayHot
  0020c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00212	89 17		 mov	 DWORD PTR [edi], edx
$LN42@DisplayHot:

; 238  : 			}
; 239  : 
; 240  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_SHIFT)

  00214	f6 04 dd 04 00
	00 00 04	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 4
  0021c	74 65		 je	 SHORT $LN4@DisplayHot

; 241  : 			{
; 242  : 				wcscat (ShortcutMod, GetString ("VK_SHIFT"));

  0021e	68 00 00 00 00	 push	 OFFSET ??_C@_08BHJBIDAM@VK_SHIFT?$AA@
  00223	e8 00 00 00 00	 call	 _GetString
  00228	83 c4 04	 add	 esp, 4
  0022b	8b d0		 mov	 edx, eax
  0022d	8d 49 00	 npad	 3
$LL33@DisplayHot:
  00230	66 8b 08	 mov	 cx, WORD PTR [eax]
  00233	83 c0 02	 add	 eax, 2
  00236	66 85 c9	 test	 cx, cx
  00239	75 f5		 jne	 SHORT $LL33@DisplayHot
  0023b	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  0023f	2b c2		 sub	 eax, edx
  00241	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL34@DisplayHot:
  00244	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00248	83 c7 02	 add	 edi, 2
  0024b	66 85 c9	 test	 cx, cx
  0024e	75 f4		 jne	 SHORT $LL34@DisplayHot
  00250	8b c8		 mov	 ecx, eax
  00252	c1 e9 02	 shr	 ecx, 2
  00255	8b f2		 mov	 esi, edx
  00257	f3 a5		 rep movsd
  00259	8b c8		 mov	 ecx, eax
  0025b	83 e1 03	 and	 ecx, 3
  0025e	f3 a4		 rep movsb

; 243  : 				wcscat (ShortcutMod, L"+");

  00260	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  00264	83 c7 fe	 add	 edi, -2			; fffffffeH
  00267	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL35@DisplayHot:
  00270	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00274	83 c7 02	 add	 edi, 2
  00277	66 85 c0	 test	 ax, ax
  0027a	75 f4		 jne	 SHORT $LL35@DisplayHot
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00281	89 07		 mov	 DWORD PTR [edi], eax
$LN4@DisplayHot:

; 244  : 			}
; 245  : 
; 246  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_ALT)

  00283	f6 04 dd 04 00
	00 00 01	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 1
  0028b	74 67		 je	 SHORT $LN3@DisplayHot

; 247  : 			{
; 248  : 				wcscat (ShortcutMod, GetString ("VK_ALT"));

  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_06HJLFINBF@VK_ALT?$AA@
  00292	e8 00 00 00 00	 call	 _GetString
  00297	83 c4 04	 add	 esp, 4
  0029a	8b d0		 mov	 edx, eax
  0029c	8d 64 24 00	 npad	 4
$LL36@DisplayHot:
  002a0	66 8b 08	 mov	 cx, WORD PTR [eax]
  002a3	83 c0 02	 add	 eax, 2
  002a6	66 85 c9	 test	 cx, cx
  002a9	75 f5		 jne	 SHORT $LL36@DisplayHot
  002ab	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  002af	2b c2		 sub	 eax, edx
  002b1	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL37@DisplayHot:
  002b4	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  002b8	83 c7 02	 add	 edi, 2
  002bb	66 85 c9	 test	 cx, cx
  002be	75 f4		 jne	 SHORT $LL37@DisplayHot
  002c0	8b c8		 mov	 ecx, eax
  002c2	c1 e9 02	 shr	 ecx, 2
  002c5	8b f2		 mov	 esi, edx
  002c7	f3 a5		 rep movsd
  002c9	8b c8		 mov	 ecx, eax
  002cb	83 e1 03	 and	 ecx, 3
  002ce	f3 a4		 rep movsb

; 249  : 				wcscat (ShortcutMod, L"+");

  002d0	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  002d4	83 c7 fe	 add	 edi, -2			; fffffffeH
  002d7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL38@DisplayHot:
  002e0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  002e4	83 c7 02	 add	 edi, 2
  002e7	66 85 c0	 test	 ax, ax
  002ea	75 f4		 jne	 SHORT $LL38@DisplayHot
  002ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  002f2	89 0f		 mov	 DWORD PTR [edi], ecx
$LN3@DisplayHot:

; 250  : 			}
; 251  : 
; 252  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_WIN)

  002f4	f6 04 dd 04 00
	00 00 08	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 8
  002fc	74 66		 je	 SHORT $LN2@DisplayHot

; 253  : 			{
; 254  : 				wcscat (ShortcutMod, GetString ("VK_WIN"));

  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_06LKCBLNGG@VK_WIN?$AA@
  00303	e8 00 00 00 00	 call	 _GetString
  00308	83 c4 04	 add	 esp, 4
  0030b	8b d0		 mov	 edx, eax
  0030d	8d 49 00	 npad	 3
$LL39@DisplayHot:
  00310	66 8b 08	 mov	 cx, WORD PTR [eax]
  00313	83 c0 02	 add	 eax, 2
  00316	66 85 c9	 test	 cx, cx
  00319	75 f5		 jne	 SHORT $LL39@DisplayHot
  0031b	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  0031f	2b c2		 sub	 eax, edx
  00321	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL40@DisplayHot:
  00324	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00328	83 c7 02	 add	 edi, 2
  0032b	66 85 c9	 test	 cx, cx
  0032e	75 f4		 jne	 SHORT $LL40@DisplayHot
  00330	8b c8		 mov	 ecx, eax
  00332	c1 e9 02	 shr	 ecx, 2
  00335	8b f2		 mov	 esi, edx
  00337	f3 a5		 rep movsd
  00339	8b c8		 mov	 ecx, eax
  0033b	83 e1 03	 and	 ecx, 3
  0033e	f3 a4		 rep movsb

; 255  : 				wcscat (ShortcutMod, L"+");

  00340	8d 7c 24 44	 lea	 edi, DWORD PTR _ShortcutMod$[esp+2152]
  00344	83 c7 fe	 add	 edi, -2			; fffffffeH
  00347	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL41@DisplayHot:
  00350	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00354	83 c7 02	 add	 edi, 2
  00357	66 85 c0	 test	 ax, ax
  0035a	75 f4		 jne	 SHORT $LL41@DisplayHot
  0035c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00362	89 17		 mov	 DWORD PTR [edi], edx
$LN2@DisplayHot:

; 256  : 			}
; 257  : 
; 258  : 			wsprintfW (ShortcutFinal, L"%s%s", ShortcutMod, Shortcut);

  00364	8d 84 24 4c 02
	00 00		 lea	 eax, DWORD PTR _Shortcut$[esp+2152]
  0036b	50		 push	 eax
  0036c	8d 4c 24 48	 lea	 ecx, DWORD PTR _ShortcutMod$[esp+2156]
  00370	51		 push	 ecx
  00371	8d 94 24 5c 04
	00 00		 lea	 edx, DWORD PTR _ShortcutFinal$[esp+2160]
  00378	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  0037d	52		 push	 edx
  0037e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 259  : 			item.pszText = ShortcutFinal;
; 260  : 		}
; 261  : 		else

  00384	8b 74 24 1c	 mov	 esi, DWORD PTR _hList$[esp+2168]
  00388	8d 84 24 64 04
	00 00		 lea	 eax, DWORD PTR _ShortcutFinal$[esp+2168]
  0038f	83 c4 10	 add	 esp, 16			; 00000010H
  00392	89 44 24 24	 mov	 DWORD PTR _item$[esp+2172], eax
  00396	eb 08		 jmp	 SHORT $LN1@DisplayHot
$LN6@DisplayHot:

; 262  : 			item.pszText = L"";

  00398	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _item$[esp+2172], OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN1@DisplayHot:

; 263  : 
; 264  : 		SendMessageW (hList, LVM_SETITEMW, 0, (LPARAM)&item); 

  003a0	8d 4c 24 10	 lea	 ecx, DWORD PTR _item$[esp+2152]
  003a4	51		 push	 ecx
  003a5	6a 00		 push	 0
  003a7	68 4c 10 00 00	 push	 4172			; 0000104cH
  003ac	56		 push	 esi
  003ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  003b3	43		 inc	 ebx
  003b4	83 fb 09	 cmp	 ebx, 9
  003b7	0f 8c 88 fc ff
	ff		 jl	 $LL21@DisplayHot

; 265  : 	}
; 266  : }

  003bd	8b 8c 24 64 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2152]
  003c4	5f		 pop	 edi
  003c5	5e		 pop	 esi
  003c6	5b		 pop	 ebx
  003c7	33 cc		 xor	 ecx, esp
  003c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ce	81 c4 5c 08 00
	00		 add	 esp, 2140		; 0000085cH
  003d4	c3		 ret	 0
  003d5	8d 49 00	 npad	 3
$LN43@DisplayHot:
  003d8	00 00 00 00	 DD	 $LN16@DisplayHot
  003dc	00 00 00 00	 DD	 $LN8@DisplayHot
  003e0	00 00 00 00	 DD	 $LN15@DisplayHot
  003e4	00 00 00 00	 DD	 $LN13@DisplayHot
  003e8	00 00 00 00	 DD	 $LN12@DisplayHot
  003ec	00 00 00 00	 DD	 $LN11@DisplayHot
  003f0	00 00 00 00	 DD	 $LN10@DisplayHot
  003f4	00 00 00 00	 DD	 $LN9@DisplayHot
  003f8	00 00 00 00	 DD	 $LN14@DisplayHot
_DisplayHotkeyList ENDP
_TEXT	ENDS
EXTRN	__imp__GetAsyncKeyState@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ScanAndProcessKey
_TEXT	SEGMENT
_keyName$ = 8						; size = 4
_ScanAndProcessKey PROC					; COMDAT
; _vKeyCode$ = edi

; 26   : {

  00000	53		 push	 ebx

; 27   : 	UINT vKey;
; 28   : 	*vKeyCode = 0;
; 29   : 
; 30   : 	for (vKey = 0; vKey <= 0xFF; vKey++)

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetAsyncKeyState@4
  00007	55		 push	 ebp
  00008	8b 6c 24 0c	 mov	 ebp, DWORD PTR _keyName$[esp+4]
  0000c	56		 push	 esi
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	33 f6		 xor	 esi, esi
$LL5@ScanAndPro:

; 31   : 	{
; 32   : 		if (GetAsyncKeyState (vKey) < 0)

  00015	56		 push	 esi
  00016	ff d3		 call	 ebx
  00018	66 85 c0	 test	 ax, ax
  0001b	7d 10		 jge	 SHORT $LN4@ScanAndPro

; 33   : 		{
; 34   : 			if (GetKeyName (vKey, keyName))	// If the key is allowed and its name has been resolved

  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _GetKeyName
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	74 02		 je	 SHORT $LN4@ScanAndPro

; 35   : 				*vKeyCode = vKey;

  0002b	89 37		 mov	 DWORD PTR [edi], esi
$LN4@ScanAndPro:

; 27   : 	UINT vKey;
; 28   : 	*vKeyCode = 0;
; 29   : 
; 30   : 	for (vKey = 0; vKey <= 0xFF; vKey++)

  0002d	46		 inc	 esi
  0002e	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00034	76 df		 jbe	 SHORT $LL5@ScanAndPro
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	5b		 pop	 ebx

; 36   : 		}
; 37   : 	}
; 38   : }

  00039	c3		 ret	 0
_ScanAndProcessKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@	; `string'
PUBLIC	??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@	; `string'
PUBLIC	??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@	; `string'
PUBLIC	??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@		; `string'
PUBLIC	??_C@_08KLMGAJAF@SHORTCUT?$AA@			; `string'
PUBLIC	??_C@_06DHJAPAEE@ACTION?$AA@			; `string'
PUBLIC	_lParam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_HotkeysDlgProc@16
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_SaveSettings:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_Error:PROC
EXTRN	_GetCheckBox:PROC
EXTRN	__imp__GetWindowTextLengthW@4:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	_bDisplayBalloonOnSuccessfulHkDismount:DWORD
EXTRN	_bPlaySoundOnSuccessfulHkDismount:DWORD
EXTRN	_SetCheckBox:PROC
EXTRN	_LocalizeDialog:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	__imp__GetParent@4:PROC
_BSS	SEGMENT
?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?) ; `HotkeysDlgProc'::`2'::bTDisplayBalloonOnSuccessfulHkDismount
?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?) ; `HotkeysDlgProc'::`2'::bTPlaySoundOnSuccessfulHkDismount
_currentVKeyCode DD 01H DUP (?)
_nSelectedHotkeyId DD 01H DUP (?)
?bKeyScanOn@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?)	; `HotkeysDlgProc'::`2'::bKeyScanOn
_BSS	ENDS
;	COMDAT ??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@
CONST	SEGMENT
??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@ DB 'CANNOT_USE_RESERVED_K'
	DB	'EY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@
CONST	SEGMENT
??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@ DB 'SHORTCUT_ALREADY_IN_U'
	DB	'SE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@
CONST	SEGMENT
??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@ DB 'PRESS_A_KEY_TO_ASSIGN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@
CONST	SEGMENT
??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@ DB 'IDD_HOTKEYS_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLMGAJAF@SHORTCUT?$AA@
CONST	SEGMENT
??_C@_08KLMGAJAF@SHORTCUT?$AA@ DB 'SHORTCUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJAPAEE@ACTION?$AA@
CONST	SEGMENT
??_C@_06DHJAPAEE@ACTION?$AA@ DB 'ACTION', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _HotkeysDlgProc@16
_TEXT	SEGMENT
_modifiers$86558 = -568					; size = 4
_hwndMainDlg$ = -568					; size = 4
_tmpVKeyCode$86541 = -564				; size = 4
_hList$ = -564						; size = 4
_col$86531 = -560					; size = 32
_lParam$GSCopy$ = -528					; size = 4
_keyName$86540 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_HotkeysDlgProc@16 PROC					; COMDAT

; 271  : {

  00000	81 ec 38 02 00
	00		 sub	 esp, 568		; 00000238H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 34 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+568], eax
  00014	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR _lParam$[esp+564]
  0001b	53		 push	 ebx
  0001c	8b 9c 24 40 02
	00 00		 mov	 ebx, DWORD PTR _hwndDlg$[esp+568]
  00023	55		 push	 ebp

; 272  : 	HWND hList = GetDlgItem (hwndDlg, IDC_HOTKEY_LIST);

  00024	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	68 41 04 00 00	 push	 1089			; 00000441H
  00031	53		 push	 ebx

; 467  : 		{
; 468  : 			int i;
; 469  : 
; 470  : 			for (i = 0; i < NBR_HOTKEYS; i++)
; 471  : 			{
; 472  : 				tmpHotkeys[i].vKeyCode = 0;

  00032	89 44 24 40	 mov	 DWORD PTR _lParam$GSCopy$[esp+592], eax
  00036	ff d5		 call	 ebp
  00038	8b b4 24 54 02
	00 00		 mov	 esi, DWORD PTR _wParam$[esp+580]
  0003f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00045	53		 push	 ebx
  00046	89 44 24 18	 mov	 DWORD PTR _hList$[esp+588], eax
  0004a	89 5c 24 14	 mov	 DWORD PTR _hwndMainDlg$[esp+588], ebx
  0004e	c1 ee 10	 shr	 esi, 16			; 00000010H
  00051	ff d7		 call	 edi
  00053	85 c0		 test	 eax, eax
  00055	74 12		 je	 SHORT $LN39@HotkeysDlg
$LL40@HotkeysDlg:

; 273  : 	HWND hwndMainDlg = hwndDlg;
; 274  : 	WORD lw = LOWORD (wParam);
; 275  : 	WORD hw = HIWORD (wParam);
; 276  : 	static BOOL bKeyScanOn;
; 277  : 	static BOOL bTPlaySoundOnSuccessfulHkDismount;
; 278  : 	static BOOL bTDisplayBalloonOnSuccessfulHkDismount;
; 279  : 
; 280  : 	while (GetParent (hwndMainDlg) != NULL)
; 281  : 	{
; 282  : 		hwndMainDlg = GetParent (hwndMainDlg);

  00057	8b 4c 24 10	 mov	 ecx, DWORD PTR _hwndMainDlg$[esp+584]
  0005b	51		 push	 ecx
  0005c	ff d7		 call	 edi
  0005e	50		 push	 eax
  0005f	89 44 24 14	 mov	 DWORD PTR _hwndMainDlg$[esp+588], eax
  00063	ff d7		 call	 edi
  00065	85 c0		 test	 eax, eax
  00067	75 ee		 jne	 SHORT $LL40@HotkeysDlg
$LN39@HotkeysDlg:

; 283  : 	}
; 284  : 
; 285  : 	switch (msg)

  00069	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR _msg$[esp+580]
  00070	81 f9 10 01 00
	00		 cmp	 ecx, 272		; 00000110H
  00076	0f 87 ad 01 00
	00		 ja	 $LN43@HotkeysDlg
  0007c	74 19		 je	 SHORT $LN36@HotkeysDlg
  0007e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00081	0f 84 1f 06 00
	00		 je	 $LN3@HotkeysDlg
  00087	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  0008a	0f 84 10 02 00
	00		 je	 $LN72@HotkeysDlg
$LN2@HotkeysDlg:

; 513  : 		}
; 514  : 		return 0;

  00090	33 c0		 xor	 eax, eax
  00092	e9 29 06 00 00	 jmp	 $LN41@HotkeysDlg
$LN36@HotkeysDlg:

; 286  : 	{
; 287  : 	case WM_INITDIALOG:
; 288  : 		{
; 289  : 			LVCOLUMNW col;
; 290  : 
; 291  : 			bKeyScanOn = FALSE;

  00097	33 c0		 xor	 eax, eax

; 292  : 			nSelectedHotkeyId = -1;
; 293  : 			currentVKeyCode = 0;
; 294  : 			memcpy (tmpHotkeys, Hotkeys, sizeof(tmpHotkeys));
; 295  : 
; 296  : 			SendMessageW (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,
; 297  : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_LABELTIP 
; 298  : 				); 

  00099	68 30 40 00 00	 push	 16432			; 00004030H
  0009e	50		 push	 eax
  0009f	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  000a4	be 00 00 00 00	 mov	 esi, OFFSET _Hotkeys
  000a9	bf 00 00 00 00	 mov	 edi, OFFSET _tmpHotkeys
  000ae	f3 a5		 rep movsd
  000b0	8b 74 24 1c	 mov	 esi, DWORD PTR _hList$[esp+592]
  000b4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  000ba	68 36 10 00 00	 push	 4150			; 00001036H
  000bf	56		 push	 esi
  000c0	a3 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, eax
  000c5	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1
  000cf	a3 00 00 00 00	 mov	 DWORD PTR _currentVKeyCode, eax
  000d4	ff d7		 call	 edi

; 299  : 
; 300  : 			memset (&col,0,sizeof(col));               

  000d6	33 c0		 xor	 eax, eax
  000d8	89 44 24 18	 mov	 DWORD PTR _col$86531[esp+584], eax

; 301  : 			col.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 302  : 			col.pszText = GetString ("ACTION");                           

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_06DHJAPAEE@ACTION?$AA@
  000e1	89 44 24 20	 mov	 DWORD PTR _col$86531[esp+592], eax
  000e5	89 44 24 24	 mov	 DWORD PTR _col$86531[esp+596], eax
  000e9	89 44 24 28	 mov	 DWORD PTR _col$86531[esp+600], eax
  000ed	89 44 24 2c	 mov	 DWORD PTR _col$86531[esp+604], eax
  000f1	89 44 24 30	 mov	 DWORD PTR _col$86531[esp+608], eax
  000f5	89 44 24 34	 mov	 DWORD PTR _col$86531[esp+612], eax
  000f9	89 44 24 38	 mov	 DWORD PTR _col$86531[esp+616], eax
  000fd	c7 44 24 1c 0f
	00 00 00	 mov	 DWORD PTR _col$86531[esp+588], 15 ; 0000000fH
  00105	e8 00 00 00 00	 call	 _GetString

; 303  : 			col.cx = CompensateXDPI (341);

  0010a	68 55 01 00 00	 push	 341			; 00000155H
  0010f	89 44 24 2c	 mov	 DWORD PTR _col$86531[esp+604], eax
  00113	e8 00 00 00 00	 call	 _CompensateXDPI
  00118	83 c4 08	 add	 esp, 8

; 304  : 			col.fmt = LVCFMT_LEFT;
; 305  : 			SendMessageW (hList,LVM_INSERTCOLUMNW,0,(LPARAM)&col);

  0011b	8d 54 24 18	 lea	 edx, DWORD PTR _col$86531[esp+584]
  0011f	52		 push	 edx
  00120	6a 00		 push	 0
  00122	68 61 10 00 00	 push	 4193			; 00001061H
  00127	56		 push	 esi
  00128	89 44 24 30	 mov	 DWORD PTR _col$86531[esp+608], eax
  0012c	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _col$86531[esp+604], 0
  00134	ff d7		 call	 edi

; 306  : 
; 307  : 			col.pszText = GetString ("SHORTCUT");  

  00136	68 00 00 00 00	 push	 OFFSET ??_C@_08KLMGAJAF@SHORTCUT?$AA@
  0013b	e8 00 00 00 00	 call	 _GetString

; 308  : 			col.cx = CompensateXDPI (190);           

  00140	68 be 00 00 00	 push	 190			; 000000beH
  00145	89 44 24 2c	 mov	 DWORD PTR _col$86531[esp+604], eax
  00149	e8 00 00 00 00	 call	 _CompensateXDPI
  0014e	83 c4 08	 add	 esp, 8
  00151	89 44 24 20	 mov	 DWORD PTR _col$86531[esp+592], eax

; 309  : 			col.fmt = LVCFMT_LEFT;
; 310  : 			SendMessageW (hList,LVM_INSERTCOLUMNW,1,(LPARAM)&col);

  00155	8d 44 24 18	 lea	 eax, DWORD PTR _col$86531[esp+584]
  00159	50		 push	 eax
  0015a	6a 01		 push	 1
  0015c	68 61 10 00 00	 push	 4193			; 00001061H
  00161	56		 push	 esi
  00162	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _col$86531[esp+604], 0
  0016a	ff d7		 call	 edi

; 311  : 
; 312  : 			LocalizeDialog (hwndDlg, "IDD_HOTKEYS_DLG");

  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@
  00171	53		 push	 ebx
  00172	e8 00 00 00 00	 call	 _LocalizeDialog

; 313  : 
; 314  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_CTRL, TRUE);

  00177	6a 01		 push	 1
  00179	68 46 04 00 00	 push	 1094			; 00000446H
  0017e	53		 push	 ebx
  0017f	e8 00 00 00 00	 call	 _SetCheckBox

; 315  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_SHIFT, FALSE);

  00184	6a 00		 push	 0
  00186	68 45 04 00 00	 push	 1093			; 00000445H
  0018b	53		 push	 ebx
  0018c	e8 00 00 00 00	 call	 _SetCheckBox

; 316  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_ALT, TRUE);

  00191	6a 01		 push	 1
  00193	68 47 04 00 00	 push	 1095			; 00000447H
  00198	53		 push	 ebx
  00199	e8 00 00 00 00	 call	 _SetCheckBox

; 317  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_WIN, FALSE);

  0019e	6a 00		 push	 0
  001a0	68 48 04 00 00	 push	 1096			; 00000448H
  001a5	53		 push	 ebx
  001a6	e8 00 00 00 00	 call	 _SetCheckBox

; 318  : 
; 319  : 			SetCheckBox (hwndDlg, IDC_HK_DISMOUNT_PLAY_SOUND, bPlaySoundOnSuccessfulHkDismount);

  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bPlaySoundOnSuccessfulHkDismount
  001b1	51		 push	 ecx
  001b2	68 3c 04 00 00	 push	 1084			; 0000043cH
  001b7	53		 push	 ebx
  001b8	e8 00 00 00 00	 call	 _SetCheckBox

; 320  : 			SetCheckBox (hwndDlg, IDC_HK_DISMOUNT_BALLOON_TOOLTIP, bDisplayBalloonOnSuccessfulHkDismount);

  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount
  001c3	83 c4 44	 add	 esp, 68			; 00000044H
  001c6	52		 push	 edx
  001c7	68 3a 04 00 00	 push	 1082			; 0000043aH
  001cc	53		 push	 ebx
  001cd	e8 00 00 00 00	 call	 _SetCheckBox

; 321  : 
; 322  : 			bTPlaySoundOnSuccessfulHkDismount = bPlaySoundOnSuccessfulHkDismount;

  001d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bPlaySoundOnSuccessfulHkDismount

; 323  : 			bTDisplayBalloonOnSuccessfulHkDismount = bDisplayBalloonOnSuccessfulHkDismount;

  001d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 324  : 
; 325  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  001e0	6a 00		 push	 0
  001e2	68 3d 04 00 00	 push	 1085			; 0000043dH
  001e7	53		 push	 ebx
  001e8	a3 00 00 00 00	 mov	 DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax
  001ed	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, ecx
  001f3	ff d5		 call	 ebp
  001f5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  001fb	50		 push	 eax
  001fc	ff d6		 call	 esi

; 326  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  001fe	6a 00		 push	 0
  00200	68 3e 04 00 00	 push	 1086			; 0000043eH
  00205	53		 push	 ebx
  00206	ff d5		 call	 ebp
  00208	50		 push	 eax
  00209	ff d6		 call	 esi

; 327  : 
; 328  : 			DisplayHotkeyList(hwndDlg);

  0020b	53		 push	 ebx
  0020c	e8 00 00 00 00	 call	 _DisplayHotkeyList
  00211	83 c4 04	 add	 esp, 4

; 329  : 			
; 330  : 			SetTimer (hwndDlg, 0xfe, 10, NULL);

  00214	6a 00		 push	 0
  00216	6a 0a		 push	 10			; 0000000aH
  00218	68 fe 00 00 00	 push	 254			; 000000feH
  0021d	53		 push	 ebx
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 331  : 			return 1;

  00224	e9 92 04 00 00	 jmp	 $LN77@HotkeysDlg
$LN43@HotkeysDlg:

; 283  : 	}
; 284  : 
; 285  : 	switch (msg)

  00229	8b c1		 mov	 eax, ecx
  0022b	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00230	74 6e		 je	 SHORT $LN72@HotkeysDlg
  00232	83 e8 02	 sub	 eax, 2

; 515  : 
; 516  : 	case WM_CLOSE:
; 517  : 
; 518  : 		KillTimer (hwndDlg, 0xfe);
; 519  : 		EndDialog (hwndDlg, IDCANCEL);
; 520  : 		return 1;
; 521  : 	}
; 522  : 	return 0;

  00235	0f 85 55 fe ff
	ff		 jne	 $LN2@HotkeysDlg

; 332  : 		}
; 333  : 
; 334  : 	case WM_TIMER:
; 335  : 		{
; 336  : 			if (nSelectedHotkeyId > -1)

  0023b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _nSelectedHotkeyId, -1
  00242	0f 8e 73 04 00
	00		 jle	 $LN77@HotkeysDlg

; 337  : 			{
; 338  : 				wchar_t keyName [MAX_KEY_COMB_NAME_LEN];
; 339  : 				UINT tmpVKeyCode;
; 340  : 
; 341  : 				keyName[0] = 0;
; 342  : 
; 343  : 				ScanAndProcessKey (&tmpVKeyCode, &keyName[0]);

  00248	8d 44 24 3c	 lea	 eax, DWORD PTR _keyName$86540[esp+584]
  0024c	33 d2		 xor	 edx, edx
  0024e	50		 push	 eax
  0024f	8d 7c 24 18	 lea	 edi, DWORD PTR _tmpVKeyCode$86541[esp+588]
  00253	66 89 54 24 40	 mov	 WORD PTR _keyName$86540[esp+588], dx
  00258	e8 00 00 00 00	 call	 _ScanAndProcessKey
  0025d	83 c4 04	 add	 esp, 4

; 344  : 
; 345  : 				if (keyName[0] != 0)

  00260	66 83 7c 24 3c
	00		 cmp	 WORD PTR _keyName$86540[esp+584], 0
  00266	0f 84 4f 04 00
	00		 je	 $LN77@HotkeysDlg

; 346  : 				{
; 347  : 					currentVKeyCode = tmpVKeyCode;

  0026c	8b 4c 24 14	 mov	 ecx, DWORD PTR _tmpVKeyCode$86541[esp+584]

; 348  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), keyName);

  00270	8d 54 24 3c	 lea	 edx, DWORD PTR _keyName$86540[esp+584]
  00274	52		 push	 edx
  00275	68 3f 04 00 00	 push	 1087			; 0000043fH
  0027a	53		 push	 ebx
  0027b	89 0d 00 00 00
	00		 mov	 DWORD PTR _currentVKeyCode, ecx
  00281	ff d5		 call	 ebp
  00283	50		 push	 eax
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 349  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), TRUE);

  0028a	6a 01		 push	 1
  0028c	68 3d 04 00 00	 push	 1085			; 0000043dH
  00291	53		 push	 ebx
  00292	ff d5		 call	 ebp
  00294	50		 push	 eax
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 350  : 				}
; 351  : 			}
; 352  : 			return 1;

  0029b	e9 1b 04 00 00	 jmp	 $LN77@HotkeysDlg
$LN72@HotkeysDlg:

; 353  : 		}
; 354  : 
; 355  : 	case WM_COMMAND:
; 356  : 	case WM_NOTIFY:
; 357  : 
; 358  : 		if (lw == IDC_HOTKEY_KEY && hw == EN_CHANGE)

  002a0	b8 3f 04 00 00	 mov	 eax, 1087		; 0000043fH
  002a5	66 39 84 24 54
	02 00 00	 cmp	 WORD PTR _wParam$[esp+580], ax
  002ad	75 54		 jne	 SHORT $LN68@HotkeysDlg
  002af	ba 00 03 00 00	 mov	 edx, 768		; 00000300H
  002b4	66 3b f2	 cmp	 si, dx
  002b7	75 4a		 jne	 SHORT $LN68@HotkeysDlg

; 359  : 		{
; 360  : 			if (!bKeyScanOn && nSelectedHotkeyId < 0 && GetWindowTextLengthW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY)))

  002b9	33 ff		 xor	 edi, edi
  002bb	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, edi
  002c1	75 4b		 jne	 SHORT $LN62@HotkeysDlg
  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
  002c8	3b c7		 cmp	 eax, edi
  002ca	7d 47		 jge	 SHORT $LN69@HotkeysDlg
  002cc	68 3f 04 00 00	 push	 1087			; 0000043fH
  002d1	53		 push	 ebx
  002d2	ff d5		 call	 ebp
  002d4	50		 push	 eax
  002d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthW@4
  002db	85 c0		 test	 eax, eax
  002dd	74 28		 je	 SHORT $LN73@HotkeysDlg

; 361  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  002df	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  002e4	68 3f 04 00 00	 push	 1087			; 0000043fH
  002e9	53		 push	 ebx
  002ea	ff d5		 call	 ebp
  002ec	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  002f2	50		 push	 eax
  002f3	ff d6		 call	 esi
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
  002fa	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR _msg$[esp+580]
  00301	eb 16		 jmp	 SHORT $LN30@HotkeysDlg
$LN68@HotkeysDlg:
  00303	33 ff		 xor	 edi, edi
  00305	eb 07		 jmp	 SHORT $LN62@HotkeysDlg
$LN73@HotkeysDlg:
  00307	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR _msg$[esp+580]
$LN62@HotkeysDlg:
  0030e	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
$LN69@HotkeysDlg:
  00313	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
$LN30@HotkeysDlg:

; 362  : 		}
; 363  : 
; 364  : 		if (msg == WM_NOTIFY && wParam == IDC_HOTKEY_LIST)

  00319	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  0031c	8b 8c 24 54 02
	00 00		 mov	 ecx, DWORD PTR _wParam$[esp+580]
  00323	0f 85 8c 00 00
	00		 jne	 $LN28@HotkeysDlg
  00329	81 f9 41 04 00
	00		 cmp	 ecx, 1089		; 00000441H
  0032f	0f 85 80 00 00
	00		 jne	 $LN28@HotkeysDlg

; 365  : 		{
; 366  : 			if (((LPNMHDR) lParam)->code == LVN_ITEMACTIVATE
; 367  : 				|| ((LPNMHDR) lParam)->code == LVN_ITEMCHANGED && (((LPNMLISTVIEW) lParam)->uNewState & LVIS_FOCUSED))

  00335	8b 44 24 38	 mov	 eax, DWORD PTR _lParam$GSCopy$[esp+584]
  00339	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0033c	83 f9 8e	 cmp	 ecx, -114		; ffffff8eH
  0033f	74 13		 je	 SHORT $LN27@HotkeysDlg
  00341	83 f9 9b	 cmp	 ecx, -101		; ffffff9bH
  00344	0f 85 46 fd ff
	ff		 jne	 $LN2@HotkeysDlg
  0034a	f6 40 14 01	 test	 BYTE PTR [eax+20], 1
  0034e	0f 84 3c fd ff
	ff		 je	 $LN2@HotkeysDlg
$LN27@HotkeysDlg:

; 368  : 			{
; 369  : 				LVITEM item;
; 370  : 				memset(&item,0,sizeof(item));
; 371  : 				nSelectedHotkeyId = ((LPNMLISTVIEW) lParam)->iItem;

  00354	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 372  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), GetString ("PRESS_A_KEY_TO_ASSIGN"));

  00357	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@
  0035c	a3 00 00 00 00	 mov	 DWORD PTR _nSelectedHotkeyId, eax
  00361	e8 00 00 00 00	 call	 _GetString
  00366	83 c4 04	 add	 esp, 4
  00369	50		 push	 eax
  0036a	68 3f 04 00 00	 push	 1087			; 0000043fH
  0036f	53		 push	 ebx
  00370	ff d5		 call	 ebp
  00372	50		 push	 eax
  00373	ff d6		 call	 esi

; 373  : 
; 374  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), (tmpHotkeys[nSelectedHotkeyId].vKeyCode > 0));

  00375	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nSelectedHotkeyId
  0037b	33 c9		 xor	 ecx, ecx
  0037d	3b 0c d5 00 00
	00 00		 cmp	 ecx, DWORD PTR _tmpHotkeys[edx*8]
  00384	1b c0		 sbb	 eax, eax
  00386	f7 d8		 neg	 eax
  00388	50		 push	 eax
  00389	68 3e 04 00 00	 push	 1086			; 0000043eH
  0038e	53		 push	 ebx
  0038f	ff d5		 call	 ebp
  00391	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00397	50		 push	 eax
  00398	ff d6		 call	 esi

; 375  : 
; 376  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  0039a	57		 push	 edi
  0039b	68 3d 04 00 00	 push	 1085			; 0000043dH
  003a0	53		 push	 ebx
  003a1	ff d5		 call	 ebp
  003a3	50		 push	 eax
  003a4	ff d6		 call	 esi

; 377  : 				bKeyScanOn = TRUE;

  003a6	b8 01 00 00 00	 mov	 eax, 1
  003ab	a3 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, eax

; 378  : 				return 1;

  003b0	e9 0b 03 00 00	 jmp	 $LN41@HotkeysDlg
$LN28@HotkeysDlg:

; 379  : 			}
; 380  : 		}
; 381  : 
; 382  : 		if (lw == IDC_HOTKEY_ASSIGN)

  003b5	ba 3d 04 00 00	 mov	 edx, 1085		; 0000043dH
  003ba	66 3b ca	 cmp	 cx, dx
  003bd	0f 85 81 01 00
	00		 jne	 $LN26@HotkeysDlg

; 383  : 		{
; 384  : 			BOOL bOwnActiveShortcut = FALSE;
; 385  : 
; 386  : 			if (nSelectedHotkeyId >= 0 && currentVKeyCode != 0)

  003c3	3b c7		 cmp	 eax, edi
  003c5	0f 8c 6b 01 00
	00		 jl	 $LN66@HotkeysDlg
  003cb	39 3d 00 00 00
	00		 cmp	 DWORD PTR _currentVKeyCode, edi
  003d1	0f 84 5f 01 00
	00		 je	 $LN66@HotkeysDlg

; 387  : 			{
; 388  : 				UINT modifiers = 0; 
; 389  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_CTRL))

  003d7	68 46 04 00 00	 push	 1094			; 00000446H
  003dc	53		 push	 ebx
  003dd	89 7c 24 18	 mov	 DWORD PTR _modifiers$86558[esp+592], edi
  003e1	e8 00 00 00 00	 call	 _GetCheckBox
  003e6	83 c4 08	 add	 esp, 8
  003e9	85 c0		 test	 eax, eax
  003eb	74 08		 je	 SHORT $LN24@HotkeysDlg

; 390  : 					modifiers = MOD_CONTROL;

  003ed	c7 44 24 10 02
	00 00 00	 mov	 DWORD PTR _modifiers$86558[esp+584], 2
$LN24@HotkeysDlg:

; 391  : 
; 392  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_ALT))

  003f5	68 47 04 00 00	 push	 1095			; 00000447H
  003fa	53		 push	 ebx
  003fb	e8 00 00 00 00	 call	 _GetCheckBox
  00400	83 c4 08	 add	 esp, 8
  00403	85 c0		 test	 eax, eax
  00405	74 05		 je	 SHORT $LN65@HotkeysDlg

; 393  : 					modifiers |= MOD_ALT;

  00407	83 4c 24 10 01	 or	 DWORD PTR _modifiers$86558[esp+584], 1
$LN65@HotkeysDlg:

; 394  : 
; 395  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_SHIFT))

  0040c	68 45 04 00 00	 push	 1093			; 00000445H
  00411	53		 push	 ebx
  00412	e8 00 00 00 00	 call	 _GetCheckBox
  00417	83 c4 08	 add	 esp, 8
  0041a	85 c0		 test	 eax, eax
  0041c	74 05		 je	 SHORT $LN75@HotkeysDlg

; 396  : 					modifiers |= MOD_SHIFT;

  0041e	83 4c 24 10 04	 or	 DWORD PTR _modifiers$86558[esp+584], 4
$LN75@HotkeysDlg:

; 397  : 
; 398  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_WIN))

  00423	68 48 04 00 00	 push	 1096			; 00000448H
  00428	53		 push	 ebx
  00429	e8 00 00 00 00	 call	 _GetCheckBox
  0042e	83 c4 08	 add	 esp, 8
  00431	85 c0		 test	 eax, eax
  00433	74 05		 je	 SHORT $LN76@HotkeysDlg

; 399  : 					modifiers |= MOD_WIN;

  00435	83 4c 24 10 08	 or	 DWORD PTR _modifiers$86558[esp+584], 8
$LN76@HotkeysDlg:

; 400  : 
; 401  : 				// Check if it's not already assigned
; 402  : 				if (ShortcutInUse (currentVKeyCode, modifiers, tmpHotkeys))

  0043a	8b 54 24 10	 mov	 edx, DWORD PTR _modifiers$86558[esp+584]
  0043e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _currentVKeyCode
  00444	b9 00 00 00 00	 mov	 ecx, OFFSET _tmpHotkeys
  00449	e8 00 00 00 00	 call	 _ShortcutInUse
  0044e	85 c0		 test	 eax, eax
  00450	74 12		 je	 SHORT $LN20@HotkeysDlg

; 403  : 				{
; 404  : 					Error ("SHORTCUT_ALREADY_IN_USE");

  00452	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@
  00457	e8 00 00 00 00	 call	 _Error
  0045c	83 c4 04	 add	 esp, 4

; 405  : 					return 1;

  0045f	e9 57 02 00 00	 jmp	 $LN77@HotkeysDlg
$LN20@HotkeysDlg:

; 406  : 				}
; 407  : 
; 408  : 				// Check for reserved system keys
; 409  : 				switch (currentVKeyCode)

  00464	83 fe 70	 cmp	 esi, 112		; 00000070H
  00467	74 05		 je	 SHORT $LN17@HotkeysDlg
  00469	83 fe 7b	 cmp	 esi, 123		; 0000007bH
  0046c	75 18		 jne	 SHORT $LN70@HotkeysDlg
$LN17@HotkeysDlg:

; 410  : 				{
; 411  : 				case VK_F1:
; 412  : 				case VK_F12:
; 413  : 					/* F1 is help and F12 is reserved for use by the debugger at all times */
; 414  : 					if (modifiers == 0)

  0046e	39 7c 24 10	 cmp	 DWORD PTR _modifiers$86558[esp+584], edi
  00472	75 12		 jne	 SHORT $LN70@HotkeysDlg

; 415  : 					{
; 416  : 						Error ("CANNOT_USE_RESERVED_KEY");

  00474	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@
  00479	e8 00 00 00 00	 call	 _Error
  0047e	83 c4 04	 add	 esp, 4

; 417  : 						return 1;

  00481	e9 35 02 00 00	 jmp	 $LN77@HotkeysDlg
$LN70@HotkeysDlg:

; 418  : 					}
; 419  : 					break;
; 420  : 				}
; 421  : 
; 422  : 				bOwnActiveShortcut = ShortcutInUse (currentVKeyCode, modifiers, Hotkeys);

  00486	8b 54 24 10	 mov	 edx, DWORD PTR _modifiers$86558[esp+584]
  0048a	b9 00 00 00 00	 mov	 ecx, OFFSET _Hotkeys
  0048f	e8 00 00 00 00	 call	 _ShortcutInUse

; 423  : 
; 424  : 				// Test if the shortcut can be assigned without errors
; 425  : 				if (!bOwnActiveShortcut
; 426  : 					&& !RegisterHotKey (hwndDlg, nSelectedHotkeyId, modifiers, currentVKeyCode))

  00494	3b c7		 cmp	 eax, edi
  00496	75 45		 jne	 SHORT $LN71@HotkeysDlg
  00498	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nSelectedHotkeyId
  0049e	56		 push	 esi
  0049f	8b c2		 mov	 eax, edx
  004a1	50		 push	 eax
  004a2	51		 push	 ecx
  004a3	53		 push	 ebx
  004a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterHotKey@16
  004aa	85 c0		 test	 eax, eax
  004ac	75 0e		 jne	 SHORT $LN57@HotkeysDlg

; 427  : 				{
; 428  : 					handleWin32Error(hwndDlg);

  004ae	53		 push	 ebx
  004af	e8 00 00 00 00	 call	 _handleWin32Error
  004b4	83 c4 04	 add	 esp, 4

; 429  : 					return 1;

  004b7	e9 ff 01 00 00	 jmp	 $LN77@HotkeysDlg
$LN57@HotkeysDlg:

; 430  : 				}
; 431  : 				else
; 432  : 				{
; 433  : 					if (!bOwnActiveShortcut && !UnregisterHotKey (hwndDlg, nSelectedHotkeyId))

  004bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nSelectedHotkeyId
  004c2	52		 push	 edx
  004c3	53		 push	 ebx
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterHotKey@8
  004ca	85 c0		 test	 eax, eax
  004cc	75 09		 jne	 SHORT $LN63@HotkeysDlg

; 434  : 						handleWin32Error(hwndDlg);

  004ce	53		 push	 ebx
  004cf	e8 00 00 00 00	 call	 _handleWin32Error
  004d4	83 c4 04	 add	 esp, 4
$LN63@HotkeysDlg:
  004d7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _currentVKeyCode
$LN71@HotkeysDlg:

; 435  : 
; 436  : 					tmpHotkeys[nSelectedHotkeyId].vKeyCode = currentVKeyCode;

  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId

; 437  : 					tmpHotkeys[nSelectedHotkeyId].vKeyModifiers = modifiers;

  004e2	8b 4c 24 10	 mov	 ecx, DWORD PTR _modifiers$86558[esp+584]

; 438  : 
; 439  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  004e6	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  004eb	68 3f 04 00 00	 push	 1087			; 0000043fH
  004f0	89 34 c5 00 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8], esi
  004f7	53		 push	 ebx
  004f8	89 0c c5 04 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8+4], ecx
  004ff	ff d5		 call	 ebp
  00501	50		 push	 eax
  00502	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN79@HotkeysDlg:

; 440  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  00508	57		 push	 edi
  00509	68 3d 04 00 00	 push	 1085			; 0000043dH
  0050e	53		 push	 ebx
  0050f	ff d5		 call	 ebp
  00511	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00517	50		 push	 eax
  00518	ff d6		 call	 esi

; 441  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  0051a	57		 push	 edi
  0051b	68 3e 04 00 00	 push	 1086			; 0000043eH
  00520	53		 push	 ebx
  00521	ff d5		 call	 ebp
  00523	50		 push	 eax
  00524	ff d6		 call	 esi

; 442  : 					nSelectedHotkeyId = -1;

  00526	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1

; 443  : 					bKeyScanOn = FALSE;

  00530	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, edi
$LN66@HotkeysDlg:

; 444  : 				}
; 445  : 			}
; 446  : 			DisplayHotkeyList(hwndDlg);

  00536	53		 push	 ebx
  00537	e8 00 00 00 00	 call	 _DisplayHotkeyList
  0053c	83 c4 04	 add	 esp, 4

; 447  : 			return 1;

  0053f	e9 77 01 00 00	 jmp	 $LN77@HotkeysDlg
$LN26@HotkeysDlg:

; 448  : 		}
; 449  : 
; 450  : 		if (lw == IDC_HOTKEY_REMOVE)

  00544	ba 3e 04 00 00	 mov	 edx, 1086		; 0000043eH
  00549	66 3b ca	 cmp	 cx, dx
  0054c	75 28		 jne	 SHORT $LN12@HotkeysDlg

; 451  : 		{
; 452  : 			if (nSelectedHotkeyId >= 0)

  0054e	3b c7		 cmp	 eax, edi
  00550	0f 8c 65 01 00
	00		 jl	 $LN77@HotkeysDlg

; 453  : 			{
; 454  : 				tmpHotkeys[nSelectedHotkeyId].vKeyCode = 0;

  00556	89 3c c5 00 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8], edi

; 455  : 				tmpHotkeys[nSelectedHotkeyId].vKeyModifiers = 0;

  0055d	89 3c c5 04 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8+4], edi
$LN80@HotkeysDlg:

; 456  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  00564	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00569	68 3f 04 00 00	 push	 1087			; 0000043fH
  0056e	53		 push	 ebx
  0056f	ff d5		 call	 ebp
  00571	50		 push	 eax
  00572	ff d6		 call	 esi

; 457  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);
; 458  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);
; 459  : 				nSelectedHotkeyId = -1;
; 460  : 				bKeyScanOn = FALSE;
; 461  : 				DisplayHotkeyList(hwndDlg);
; 462  : 			}
; 463  : 			return 1;

  00574	eb 92		 jmp	 SHORT $LN79@HotkeysDlg
$LN12@HotkeysDlg:

; 464  : 		}
; 465  : 
; 466  : 		if (lw == IDC_RESET_HOTKEYS)

  00576	b8 42 04 00 00	 mov	 eax, 1090		; 00000442H
  0057b	66 3b c8	 cmp	 cx, ax
  0057e	75 71		 jne	 SHORT $LN10@HotkeysDlg

; 467  : 		{
; 468  : 			int i;
; 469  : 
; 470  : 			for (i = 0; i < NBR_HOTKEYS; i++)
; 471  : 			{
; 472  : 				tmpHotkeys[i].vKeyCode = 0;

  00580	89 3d 00 00 00
	00		 mov	 DWORD PTR _tmpHotkeys, edi

; 473  : 				tmpHotkeys[i].vKeyModifiers = 0;

  00586	89 3d 04 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+4, edi
  0058c	89 3d 08 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+8, edi
  00592	89 3d 0c 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+12, edi
  00598	89 3d 10 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+16, edi
  0059e	89 3d 14 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+20, edi
  005a4	89 3d 18 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+24, edi
  005aa	89 3d 1c 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+28, edi
  005b0	89 3d 20 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+32, edi
  005b6	89 3d 24 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+36, edi
  005bc	89 3d 28 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+40, edi
  005c2	89 3d 2c 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+44, edi
  005c8	89 3d 30 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+48, edi
  005ce	89 3d 34 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+52, edi
  005d4	89 3d 38 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+56, edi
  005da	89 3d 3c 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+60, edi
  005e0	89 3d 40 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+64, edi
  005e6	89 3d 44 00 00
	00		 mov	 DWORD PTR _tmpHotkeys+68, edi

; 474  : 			}
; 475  : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");
; 476  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);
; 477  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);
; 478  : 			nSelectedHotkeyId = -1;
; 479  : 			bKeyScanOn = FALSE;
; 480  : 			DisplayHotkeyList(hwndDlg);
; 481  : 			return 1;

  005ec	e9 73 ff ff ff	 jmp	 $LN80@HotkeysDlg
$LN10@HotkeysDlg:

; 482  : 		}
; 483  : 
; 484  : 		if (lw == IDC_HK_DISMOUNT_PLAY_SOUND)

  005f1	ba 3c 04 00 00	 mov	 edx, 1084		; 0000043cH
  005f6	66 3b ca	 cmp	 cx, dx
  005f9	75 16		 jne	 SHORT $LN6@HotkeysDlg

; 485  : 		{
; 486  : 			bTPlaySoundOnSuccessfulHkDismount = GetCheckBox (hwndDlg, IDC_HK_DISMOUNT_PLAY_SOUND);

  005fb	52		 push	 edx
  005fc	53		 push	 ebx
  005fd	e8 00 00 00 00	 call	 _GetCheckBox
  00602	83 c4 08	 add	 esp, 8
  00605	a3 00 00 00 00	 mov	 DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax

; 513  : 		}
; 514  : 		return 0;

  0060a	33 c0		 xor	 eax, eax
  0060c	e9 af 00 00 00	 jmp	 $LN41@HotkeysDlg
$LN6@HotkeysDlg:

; 487  : 		}
; 488  : 
; 489  : 		if (lw == IDC_HK_DISMOUNT_BALLOON_TOOLTIP)

  00611	b8 3a 04 00 00	 mov	 eax, 1082		; 0000043aH
  00616	66 3b c8	 cmp	 cx, ax
  00619	75 16		 jne	 SHORT $LN5@HotkeysDlg

; 490  : 		{
; 491  : 			bTDisplayBalloonOnSuccessfulHkDismount = GetCheckBox (hwndDlg, IDC_HK_DISMOUNT_BALLOON_TOOLTIP);

  0061b	50		 push	 eax
  0061c	53		 push	 ebx
  0061d	e8 00 00 00 00	 call	 _GetCheckBox
  00622	83 c4 08	 add	 esp, 8
  00625	a3 00 00 00 00	 mov	 DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax

; 513  : 		}
; 514  : 		return 0;

  0062a	33 c0		 xor	 eax, eax
  0062c	e9 8f 00 00 00	 jmp	 $LN41@HotkeysDlg
$LN5@HotkeysDlg:

; 492  : 		}
; 493  : 
; 494  : 		if (lw == IDCANCEL || lw == IDCLOSE)

  00631	66 83 f9 02	 cmp	 cx, 2
  00635	74 6f		 je	 SHORT $LN3@HotkeysDlg
  00637	66 83 f9 08	 cmp	 cx, 8
  0063b	74 69		 je	 SHORT $LN3@HotkeysDlg

; 499  : 		}
; 500  : 
; 501  : 		if (lw == IDOK)

  0063d	66 83 f9 01	 cmp	 cx, 1
  00641	0f 85 49 fa ff
	ff		 jne	 $LN2@HotkeysDlg

; 502  : 		{
; 503  : 			UnregisterAllHotkeys (hwndMainDlg, Hotkeys);

  00647	8b 4c 24 10	 mov	 ecx, DWORD PTR _hwndMainDlg$[esp+584]
  0064b	68 00 00 00 00	 push	 OFFSET _Hotkeys
  00650	51		 push	 ecx
  00651	e8 00 00 00 00	 call	 _UnregisterAllHotkeys

; 504  : 			memcpy (Hotkeys, tmpHotkeys, sizeof(Hotkeys));
; 505  : 			RegisterAllHotkeys (hwndMainDlg, Hotkeys);

  00656	8b 54 24 18	 mov	 edx, DWORD PTR _hwndMainDlg$[esp+592]
  0065a	68 00 00 00 00	 push	 OFFSET _Hotkeys
  0065f	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00664	be 00 00 00 00	 mov	 esi, OFFSET _tmpHotkeys
  00669	bf 00 00 00 00	 mov	 edi, OFFSET _Hotkeys
  0066e	52		 push	 edx
  0066f	f3 a5		 rep movsd
  00671	e8 00 00 00 00	 call	 _RegisterAllHotkeys
  00676	83 c4 10	 add	 esp, 16			; 00000010H

; 506  : 			KillTimer (hwndDlg, 0xfe);

  00679	68 fe 00 00 00	 push	 254			; 000000feH
  0067e	53		 push	 ebx
  0067f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 507  : 			bPlaySoundOnSuccessfulHkDismount = bTPlaySoundOnSuccessfulHkDismount;

  00685	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9

; 508  : 			bDisplayBalloonOnSuccessfulHkDismount = bTDisplayBalloonOnSuccessfulHkDismount;

  0068a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9

; 509  : 
; 510  : 			SaveSettings (hwndDlg);

  00690	53		 push	 ebx
  00691	a3 00 00 00 00	 mov	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, eax
  00696	89 0d 00 00 00
	00		 mov	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, ecx
  0069c	e8 00 00 00 00	 call	 _SaveSettings
  006a1	83 c4 04	 add	 esp, 4

; 511  : 			EndDialog (hwndDlg, IDCANCEL);
; 512  : 			return 1;

  006a4	eb 0c		 jmp	 SHORT $LN78@HotkeysDlg
$LN3@HotkeysDlg:

; 495  : 		{
; 496  : 			KillTimer (hwndDlg, 0xfe);

  006a6	68 fe 00 00 00	 push	 254			; 000000feH
  006ab	53		 push	 ebx
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN78@HotkeysDlg:

; 497  : 			EndDialog (hwndDlg, IDCANCEL);

  006b2	6a 02		 push	 2
  006b4	53		 push	 ebx
  006b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN77@HotkeysDlg:

; 498  : 			return 1;

  006bb	b8 01 00 00 00	 mov	 eax, 1
$LN41@HotkeysDlg:

; 523  : }

  006c0	8b 8c 24 44 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+584]
  006c7	5f		 pop	 edi
  006c8	5e		 pop	 esi
  006c9	5d		 pop	 ebp
  006ca	5b		 pop	 ebx
  006cb	33 cc		 xor	 ecx, esp
  006cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006d2	81 c4 38 02 00
	00		 add	 esp, 568		; 00000238H
  006d8	c2 10 00	 ret	 16			; 00000010H
_HotkeysDlgProc@16 ENDP
_TEXT	ENDS
END
