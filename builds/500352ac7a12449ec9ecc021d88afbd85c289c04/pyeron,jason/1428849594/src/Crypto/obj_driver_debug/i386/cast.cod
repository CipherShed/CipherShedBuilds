; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\crypto\cast.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_S	DD	030fb40d4H
	DD	09fa0ff0bH
	DD	06beccd2fH
	DD	03f258c7aH
	DD	01e213f2fH
	DD	09c004dd3H
	DD	06003e540H
	DD	0cf9fc949H
	DD	0bfd4af27H
	DD	088bbbdb5H
	DD	0e2034090H
	DD	098d09675H
	DD	06e63a0e0H
	DD	015c361d2H
	DD	0c2e7661dH
	DD	022d4ff8eH
	DD	028683b6fH
	DD	0c07fd059H
	DD	0ff2379c8H
	DD	0775f50e2H
	DD	043c340d3H
	DD	0df2f8656H
	DD	0887ca41aH
	DD	0a2d2bd2dH
	DD	0a1c9e0d6H
	DD	0346c4819H
	DD	061b76d87H
	DD	022540f2fH
	DD	02abe32e1H
	DD	0aa54166bH
	DD	022568e3aH
	DD	0a2d341d0H
	DD	066db40c8H
	DD	0a784392fH
	DD	04dff2fH
	DD	02db9d2deH
	DD	097943facH
	DD	04a97c1d8H
	DD	0527644b7H
	DD	0b5f437a7H
	DD	0b82cbaefH
	DD	0d751d159H
	DD	06ff7f0edH
	DD	05a097a1fH
	DD	0827b68d0H
	DD	090ecf52eH
	DD	022b0c054H
	DD	0bc8e5935H
	DD	04b6d2f7fH
	DD	050bb64a2H
	DD	0d2664910H
	DD	0bee5812dH
	DD	0b7332290H
	DD	0e93b159fH
	DD	0b48ee411H
	DD	04bff345dH
	DD	0fd45c240H
	DD	0ad31973fH
	DD	0c4f6d02eH
	DD	055fc8165H
	DD	0d5b1caadH
	DD	0a1ac2daeH
	DD	0a2d4b76dH
	DD	0c19b0c50H
	DD	0882240f2H
	DD	0c6e4f38H
	DD	0a4e4bfd7H
	DD	04f5ba272H
	DD	0564c1d2fH
	DD	0c59c5319H
	DD	0b949e354H
	DD	0b04669feH
	DD	0b1b6ab8aH
	DD	0c71358ddH
	DD	06385c545H
	DD	0110f935dH
	DD	057538ad5H
	DD	06a390493H
	DD	0e63d37e0H
	DD	02a54f6b3H
	DD	03a787d5fH
	DD	06276a0b5H
	DD	019a6fcdfH
	DD	07a42206aH
	DD	029f9d4d5H
	DD	0f61b1891H
	DD	0bb72275eH
	DD	0aa508167H
	DD	038901091H
	DD	0c6b505ebH
	DD	084c7cb8cH
	DD	02ad75a0fH
	DD	0874a1427H
	DD	0a2d1936bH
	DD	02ad286afH
	DD	0aa56d291H
	DD	0d7894360H
	DD	0425c750dH
	DD	093b39e26H
	DD	0187184c9H
	DD	06c00b32dH
	DD	073e2bb14H
	DD	0a0bebc3cH
	DD	054623779H
	DD	064459eabH
	DD	03f328b82H
	DD	07718cf82H
	DD	059a2cea6H
	DD	04ee002eH
	DD	089fe78e6H
	DD	03fab0950H
	DD	0325ff6c2H
	DD	081383f05H
	DD	06963c5c8H
	DD	076cb5ad6H
	DD	0d49974c9H
	DD	0ca180dcfH
	DD	0380782d5H
	DD	0c7fa5cf6H
	DD	08ac31511H
	DD	035e79e13H
	DD	047da91d0H
	DD	0f40f9086H
	DD	0a7e2419eH
	DD	031366241H
	DD	051ef495H
	DD	0aa573b04H
	DD	04a805d8dH
	DD	0548300d0H
	DD	0322a3cH
	DD	0bf64cddfH
	DD	0ba57a68eH
	DD	075c6372bH
	DD	050afd341H
	DD	0a7c13275H
	DD	0915a0bf5H
	DD	06b54bfabH
	DD	02b0b1426H
	DD	0ab4cc9d7H
	DD	0449ccd82H
	DD	0f7fbf265H
	DD	0ab85c5f3H
	DD	01b55db94H
	DD	0aad4e324H
	DD	0cfa4bd3fH
	DD	02deaa3e2H
	DD	09e204d02H
	DD	0c8bd25acH
	DD	0eadf55b3H
	DD	0d5bd9e98H
	DD	0e31231b2H
	DD	02ad5ad6cH
	DD	0954329deH
	DD	0adbe4528H
	DD	0d8710f69H
	DD	0aa51c90fH
	DD	0aa786bf6H
	DD	022513f1eH
	DD	0aa51a79bH
	DD	02ad344ccH
	DD	07b5a41f0H
	DD	0d37cfbadH
	DD	01b069505H
	DD	041ece491H
	DD	0b4c332e6H
	DD	032268d4H
	DD	0c9600accH
	DD	0ce387e6dH
	DD	0bf6bb16cH
	DD	06a70fb78H
	DD	0d03d9c9H
	DD	0d4df39deH
	DD	0e01063daH
	DD	04736f464H
	DD	05ad328d8H
	DD	0b347cc96H
	DD	075bb0fc3H
	DD	098511bfbH
	DD	04ffbcc35H
	DD	0b58bcf6aH
	DD	0e11f0abcH
	DD	0bfc5fe4aH
	DD	0a70aec10H
	DD	0ac39570aH
	DD	03f04442fH
	DD	06188b153H
	DD	0e0397a2eH
	DD	05727cb79H
	DD	09ceb418fH
	DD	01cacd68dH
	DD	02ad37c96H
	DD	0175cb9dH
	DD	0c69dff09H
	DD	0c75b65f0H
	DD	0d9db40d8H
	DD	0ec0e7779H
	DD	04744ead4H
	DD	0b11c3274H
	DD	0dd24cb9eH
	DD	07e1c54bdH
	DD	0f01144f9H
	DD	0d2240eb1H
	DD	09675b3fdH
	DD	0a3ac3755H
	DD	0d47c27afH
	DD	051c85f4dH
	DD	056907596H
	DD	0a5bb15e6H
	DD	0580304f0H
	DD	0ca042cf1H
	DD	011a37eaH
	DD	08dbfaadbH
	DD	035ba3e4aH
	DD	03526ffa0H
	DD	0c37b4d09H
	DD	0bc306ed9H
	DD	098a52666H
	DD	05648f725H
	DD	0ff5e569dH
	DD	0ced63d0H
	DD	07c63b2cfH
	DD	0700b45e1H
	DD	0d5ea50f1H
	DD	085a92872H
	DD	0af1fbda7H
	DD	0d4234870H
	DD	0a7870bf3H
	DD	02d3b4d79H
	DD	042e04198H
	DD	0cd0ede7H
	DD	026470db8H
	DD	0f881814cH
	DD	0474d6ad7H
	DD	07c0c5e5cH
	DD	0d1231959H
	DD	0381b7298H
	DD	0f5d2f4dbH
	DD	0ab838653H
	DD	06e2f1e23H
	DD	083719c9eH
	DD	0bd91e046H
	DD	09a56456eH
	DD	0dc39200cH
	DD	020c8c571H
	DD	0962bda1cH
	DD	0e1e696ffH
	DD	0b141ab08H
	DD	07cca89b9H
	DD	01a69e783H
	DD	02cc4843H
	DD	0a2f7c579H
	DD	0429ef47dH
	DD	0427b169cH
	DD	05ac9f049H
	DD	0dd8f0f00H
	DD	05c8165bfH
	DD	01f201094H
	DD	0ef0ba75bH
	DD	069e3cf7eH
	DD	0393f4380H
	DD	0fe61cf7aH
	DD	0eec5207aH
	DD	055889c94H
	DD	072fc0651H
	DD	0ada7ef79H
	DD	04e1d7235H
	DD	0d55a63ceH
	DD	0de0436baH
	DD	099c430efH
	DD	05f0c0794H
	DD	018dcdb7dH
	DD	0a1d6eff3H
	DD	0a0b52f7bH
	DD	059e83605H
	DD	0ee15b094H
	DD	0e9ffd909H
	DD	0dc440086H
	DD	0ef944459H
	DD	0ba83ccb3H
	DD	0e0c3cdfbH
	DD	0d1da4181H
	DD	03b092ab1H
	DD	0f997f1c1H
	DD	0a5e6cf7bH
	DD	01420ddbH
	DD	0e4e7ef5bH
	DD	025a1ff41H
	DD	0e180f806H
	DD	01fc41080H
	DD	0179bee7aH
	DD	0d37ac6a9H
	DD	0fe5830a4H
	DD	098de8b7fH
	DD	077e83f4eH
	DD	079929269H
	DD	024fa9f7bH
	DD	0e113c85bH
	DD	0acc40083H
	DD	0d7503525H
	DD	0f7ea615fH
	DD	062143154H
	DD	0d554b63H
	DD	05d681121H
	DD	0c866c359H
	DD	03d63cf73H
	DD	0cee234c0H
	DD	0d4d87e87H
	DD	05c672b21H
	DD	071f6181H
	DD	039f7627fH
	DD	0361e3084H
	DD	0e4eb573bH
	DD	0602f64a4H
	DD	0d63acd9cH
	DD	01bbc4635H
	DD	09e81032dH
	DD	02701f50cH
	DD	099847ab4H
	DD	0a0e3df79H
	DD	0ba6cf38cH
	DD	010843094H
	DD	02537a95eH
	DD	0f46f6ffeH
	DD	0a1ff3b1fH
	DD	0208cfb6aH
	DD	08f458c74H
	DD	0d9e0a227H
	DD	04ec73a34H
	DD	0fc884f69H
	DD	03e4de8dfH
	DD	0ef0e0088H
	DD	03559648dH
	DD	08a45388cH
	DD	01d804366H
	DD	0721d9bfdH
	DD	0a58684bbH
	DD	0e8256333H
	DD	0844e8212H
	DD	0128d8098H
	DD	0fed33fb4H
	DD	0ce280ae1H
	DD	027e19ba5H
	DD	0d5a6c252H
	DD	0e49754bdH
	DD	0c5d655ddH
	DD	0eb667064H
	DD	077840b4dH
	DD	0a1b6a801H
	DD	084db26a9H
	DD	0e0b56714H
	DD	021f043b7H
	DD	0e5d05860H
	DD	054f03084H
	DD	066ff472H
	DD	0a31aa153H
	DD	0dadc4755H
	DD	0b5625dbfH
	DD	068561be6H
	DD	083ca6b94H
	DD	02d6ed23bH
	DD	0eccf01dbH
	DD	0a6d3d0baH
	DD	0b6803d5cH
	DD	0af77a709H
	DD	033b4a34cH
	DD	0397bc8d6H
	DD	05ee22b95H
	DD	05f0e5304H
	DD	081ed6f61H
	DD	020e74364H
	DD	0b45e1378H
	DD	0de18639bH
	DD	0881ca122H
	DD	0b96726d1H
	DD	08049a7e8H
	DD	022b7da7bH
	DD	05e552d25H
	DD	05272d237H
	DD	079d2951cH
	DD	0c60d894cH
	DD	0488cb402H
	DD	01ba4fe5bH
	DD	0a4b09f6bH
	DD	01ca815cfH
	DD	0a20c3005H
	DD	08871df63H
	DD	0b9de2fcbH
	DD	0cc6c9e9H
	DD	0beeff53H
	DD	0e3214517H
	DD	0b4542835H
	DD	09f63293cH
	DD	0ee41e729H
	DD	06e1d2d7cH
	DD	050045286H
	DD	01e6685f3H
	DD	0f33401c6H
	DD	030a22c95H
	DD	031a70850H
	DD	060930f13H
	DD	073f98417H
	DD	0a1269859H
	DD	0ec645c44H
	DD	052c877a9H
	DD	0cdff33a6H
	DD	0a02b1741H
	DD	07cbad9a2H
	DD	02180036fH
	DD	050d99c08H
	DD	0cb3f4861H
	DD	0c26bd765H
	DD	064a3f6abH
	DD	080342676H
	DD	025a75e7bH
	DD	0e4e6d1fcH
	DD	020c710e6H
	DD	0cdf0b680H
	DD	017844d3bH
	DD	031eef84dH
	DD	07e0824e4H
	DD	02ccb49ebH
	DD	0846a3baeH
	DD	08ff77888H
	DD	0ee5d60f6H
	DD	07af75673H
	DD	02fdd5cdbH
	DD	0a11631c1H
	DD	030f66f43H
	DD	0b3faec54H
	DD	0157fd7faH
	DD	0ef8579ccH
	DD	0d152de58H
	DD	0db2ffd5eH
	DD	08f32ce19H
	DD	0306af97aH
	DD	02f03ef8H
	DD	099319ad5H
	DD	0c242fa0fH
	DD	0a7e3ebb0H
	DD	0c68e4906H
	DD	0b8da230cH
	DD	080823028H
	DD	0dcdef3c8H
	DD	0d35fb171H
	DD	088a1bc8H
	DD	0bec0c560H
	DD	061a3c9e8H
	DD	0bca8f54dH
	DD	0c72feffaH
	DD	022822e99H
	DD	082c570b4H
	DD	0d8d94e89H
	DD	08b1c34bcH
	DD	0301e16e6H
	DD	0273be979H
	DD	0b0ffeaa6H
	DD	061d9b8c6H
	DD	0b24869H
	DD	0b7ffce3fH
	DD	08dc283bH
	DD	043daf65aH
	DD	0f7e19798H
	DD	07619b72fH
	DD	08f1c9ba4H
	DD	0dc8637a0H
	DD	016a7d3b1H
	DD	09fc393b7H
	DD	0a7136eebH
	DD	0c6bcc63eH
	DD	01a513742H
	DD	0ef6828bcH
	DD	0520365d6H
	DD	02d6a77abH
	DD	03527ed4bH
	DD	0821fd216H
	DD	095c6e2eH
	DD	0db92f2fbH
	DD	05eea29cbH
	DD	0145892f5H
	DD	091584f7fH
	DD	05483697bH
	DD	02667a8ccH
	DD	085196048H
	DD	08c4baceaH
	DD	0833860d4H
	DD	0d23e0f9H
	DD	06c387e8aH
	DD	0ae6d249H
	DD	0b284600cH
	DD	0d835731dH
	DD	0dcb1c647H
	DD	0ac4c56eaH
	DD	03ebd81b3H
	DD	0230eabb0H
	DD	06438bc87H
	DD	0f0b5b1faH
	DD	08f5ea2b3H
	DD	0fc184642H
	DD	0a036b7aH
	DD	04fb089bdH
	DD	0649da589H
	DD	0a345415eH
	DD	05c038323H
	DD	03e5d3bb9H
	DD	043d79572H
	DD	07e6dd07cH
	DD	06dfdf1eH
	DD	06c6cc4efH
	DD	07160a539H
	DD	073bfbe70H
	DD	083877605H
	DD	04523ecf1H
	DD	08defc240H
	DD	025fa5d9fH
	DD	0eb903dbfH
	DD	0e810c907H
	DD	047607fffH
	DD	0369fe44bH
	DD	08c1fc644H
	DD	0aececa90H
	DD	0beb1f9bfH
	DD	0eefbcaeaH
	DD	0e8cf1950H
	DD	051df07aeH
	DD	0920e8806H
	DD	0f0ad0548H
	DD	0e13c8d83H
	DD	0927010d5H
	DD	011107d9fH
	DD	07647db9H
	DD	0b2e3e4d4H
	DD	03d4f285eH
	DD	0b9afa820H
	DD	0fade82e0H
	DD	0a067268bH
	DD	08272792eH
	DD	0553fb2c0H
	DD	0489ae22bH
	DD	0d4ef9794H
	DD	0125e3fbcH
	DD	021fffceeH
	DD	0825b1bfdH
	DD	09255c5edH
	DD	01257a240H
	DD	04e1a8302H
	DD	0bae07fffH
	DD	0528246e7H
	DD	08e57140eH
	DD	03373f7bfH
	DD	08c9f8188H
	DD	0a6fc4ee8H
	DD	0c982b5a5H
	DD	0a8c01db7H
	DD	0579fc264H
	DD	067094f31H
	DD	0f2bd3f5fH
	DD	040fff7c1H
	DD	01fb78dfcH
	DD	08e6bd2c1H
	DD	0437be59bH
	DD	099b03dbfH
	DD	0b5dbc64bH
	DD	0638dc0e6H
	DD	055819d99H
	DD	0a197c81cH
	DD	04a012d6eH
	DD	0c5884a28H
	DD	0ccc36f71H
	DD	0b843c213H
	DD	06c0743f1H
	DD	08309893cH
	DD	0feddd5fH
	DD	02f7fe850H
	DD	0d7c07f7eH
	DD	02507fbfH
	DD	05afb9a04H
	DD	0a747d2d0H
	DD	01651192eH
	DD	0af70bf3eH
	DD	058c31380H
	DD	05f98302eH
	DD	0727cc3c4H
	DD	0a0fb402H
	DD	0f7fef82H
	DD	08c96fdadH
	DD	05d2c2aaeH
	DD	08ee99a49H
	DD	050da88b8H
	DD	08427f4a0H
	DD	01eac5790H
	DD	0796fb449H
	DD	08252dc15H
	DD	0efbd7d9bH
	DD	0a672597dH
	DD	0ada840d8H
	DD	045f54504H
	DD	0fa5d7403H
	DD	0e83ec305H
	DD	04f91751aH
	DD	0925669c2H
	DD	023efe941H
	DD	0a903f12eH
	DD	060270df2H
	DD	0276e4b6H
	DD	094fd6574H
	DD	0927985b2H
	DD	08276dbcbH
	DD	02778176H
	DD	0f8af918dH
	DD	04e48f79eH
	DD	08f616ddfH
	DD	0e29d840eH
	DD	0842f7d83H
	DD	0340ce5c8H
	DD	096bbb682H
	DD	093b4b148H
	DD	0ef303cabH
	DD	0984faf28H
	DD	0779faf9bH
	DD	092dc560dH
	DD	0224d1e20H
	DD	08437aa88H
	DD	07d29dc96H
	DD	02756d3dcH
	DD	08b907ceeH
	DD	0b51fd240H
	DD	0e7c07ce3H
	DD	0e566b4a1H
	DD	0c3e9615eH
	DD	03cf8209dH
	DD	06094d1e3H
	DD	0cd9ca341H
	DD	05c76460eH
	DD	0ea983bH
	DD	0d4d67881H
	DD	0fd47572cH
	DD	0f76cedd9H
	DD	0bda8229cH
	DD	0127dadaaH
	DD	0438a074eH
	DD	01f97c090H
	DD	081bdb8aH
	DD	093a07ebeH
	DD	0b938ca15H
	DD	097b03cffH
	DD	03dc2c0f8H
	DD	08d1ab2ecH
	DD	064380e51H
	DD	068cc7bfbH
	DD	0d90f2788H
	DD	012490181H
	DD	05de5ffd4H
	DD	0dd7ef86aH
	DD	076a2e214H
	DD	0b9a40368H
	DD	0925d958fH
	DD	04b39fffaH
	DD	0ba39aee9H
	DD	0a4ffd30bH
	DD	0faf7933bH
	DD	06d498623H
	DD	0193cbcfaH
	DD	027627545H
	DD	0825cf47aH
	DD	061bd8ba0H
	DD	0d11e42d1H
	DD	0cead04f4H
	DD	0127ea392H
	DD	010428db7H
	DD	08272a972H
	DD	09270c4a8H
	DD	0127de50bH
	DD	0285ba1c8H
	DD	03c62f44fH
	DD	035c0eaa5H
	DD	0e805d231H
	DD	0428929fbH
	DD	0b4fcdf82H
	DD	04fb66a53H
	DD	0e7dc15bH
	DD	01f081fabH
	DD	0108618aeH
	DD	0fcfd086dH
	DD	0f9ff2889H
	DD	0694bcc11H
	DD	0236a5caeH
	DD	012deca4dH
	DD	02c3f8cc5H
	DD	0d2d02dfeH
	DD	0f8ef5896H
	DD	0e4cf52daH
	DD	095155b67H
	DD	0494a488cH
	DD	0b9b6a80cH
	DD	05c8f82bcH
	DD	089d36b45H
	DD	03a609437H
	DD	0ec00c9a9H
	DD	044715253H
	DD	0a874b49H
	DD	0d773bc40H
	DD	07c34671cH
	DD	02717ef6H
	DD	04feb5536H
	DD	0a2d02fffH
	DD	0d2bf60c4H
	DD	0d43f03c0H
	DD	050b4ef6dH
	DD	07478cd1H
	DD	06e1888H
	DD	0a2e53f55H
	DD	0b9e6d4bcH
	DD	0a2048016H
	DD	097573833H
	DD	0d7207d67H
	DD	0de0f8f3dH
	DD	072f87b33H
	DD	0abcc4f33H
	DD	07688c55dH
	DD	07b00a6b0H
	DD	0947b0001H
	DD	0570075d2H
	DD	0f9bb88f8H
	DD	08942019eH
	DD	04264a5ffH
	DD	0856302e0H
	DD	072dbd92bH
	DD	0ee971b69H
	DD	06ea22fdeH
	DD	05f08ae2bH
	DD	0af7a616dH
	DD	0e5c98767H
	DD	0cf1febd2H
	DD	061efc8c2H
	DD	0f1ac2571H
	DD	0cc8239c2H
	DD	067214cb8H
	DD	0b1e583d1H
	DD	0b7dc3e62H
	DD	07f10bdceH
	DD	0f90a5c38H
	DD	0ff0443dH
	DD	0606e6dc6H
	DD	060543a49H
	DD	05727c148H
	DD	02be98a1dH
	DD	08ab41738H
	DD	020e1be24H
	DD	0af96da0fH
	DD	068458425H
	DD	099833be5H
	DD	0600d457dH
	DD	0282f9350H
	DD	08334b362H
	DD	0d91d1120H
	DD	02b6d8da0H
	DD	0642b1e31H
	DD	09c305a00H
	DD	052bce688H
	DD	01b03588aH
	DD	0f7baefd5H
	DD	04142ed9cH
	DD	0a4315c11H
	DD	083323ec5H
	DD	0dfef4636H
	DD	0a133c501H
	DD	0e9d3531cH
	DD	0ee353783H
	DD	09db30420H
	DD	01fb6e9deH
	DD	0a7be7befH
	DD	0d273a298H
	DD	04a4f7bdbH
	DD	064ad8c57H
	DD	085510443H
	DD	0fa020ed1H
	DD	07e287affH
	DD	0e60fb663H
	DD	095f35a1H
	DD	079ebf120H
	DD	0fd059d43H
	DD	06497b7b1H
	DD	0f3641f63H
	DD	0241e4adfH
	DD	028147f5fH
	DD	04fa2b8cdH
	DD	0c9430040H
	DD	0cc32220H
	DD	0fdd30b30H
	DD	0c0a5374fH
	DD	01d2d00d9H
	DD	024147b15H
	DD	0ee4d111aH
	DD	0fca5167H
	DD	071ff904cH
	DD	02d195ffeH
	DD	01a05645fH
	DD	0c13fefeH
	DD	081b08caH
	DD	05170121H
	DD	080530100H
	DD	0e83e5efeH
	DD	0ac9af4f8H
	DD	07fe72701H
	DD	0d2b8ee5fH
	DD	06df4261H
	DD	0bb9e9b8aH
	DD	07293ea25H
	DD	0ce84ffdfH
	DD	0f5718801H
	DD	03dd64b04H
	DD	0a26f263bH
	DD	07ed48400H
	DD	0547eebe6H
	DD	0446d4ca0H
	DD	06cf3d6f5H
	DD	02649abdfH
	DD	0aea0c7f5H
	DD	036338cc1H
	DD	0503f7e93H
	DD	0d3772061H
	DD	011b638e1H
	DD	072500e03H
	DD	0f80eb2bbH
	DD	0abe0502eH
	DD	0ec8d77deH
	DD	057971e81H
	DD	0e14f6746H
	DD	0c9335400H
	DD	06920318fH
	DD	081dbb99H
	DD	0ffc304a5H
	DD	04d351805H
	DD	07f3d5ce3H
	DD	0a6c866c6H
	DD	05d5bcca9H
	DD	0daec6feaH
	DD	09f926f91H
	DD	09f46222fH
	DD	03991467dH
	DD	0a5bf6d8eH
	DD	01143c44fH
	DD	043958302H
	DD	0d0214eebH
	DD	022083b8H
	DD	03fb6180cH
	DD	018f8931eH
	DD	0281658e6H
	DD	026486e3eH
	DD	08bd78a70H
	DD	07477e4c1H
	DD	0b506e07cH
	DD	0f32d0a25H
	DD	079098b02H
	DD	0e4eabb81H
	DD	028123b23H
	DD	069dead38H
	DD	01574ca16H
	DD	0df871b62H
	DD	0211c40b7H
	DD	0a51a9ef9H
	DD	014377bH
	DD	041e8ac8H
	DD	09114003H
	DD	0bd59e4d2H
	DD	0e3d156d5H
	DD	04fe876d5H
	DD	02f91a340H
	DD	0557be8deH
	DD	0eae4a7H
	DD	0ce5c2ecH
	DD	04db4bba6H
	DD	0e756bdffH
	DD	0dd3369acH
	DD	0ec17b035H
	DD	06572327H
	DD	099afc8b0H
	DD	056c8c391H
	DD	06b65811cH
	DD	05e146119H
	DD	06e85cb75H
	DD	0be07c002H
	DD	0c2325577H
	DD	0893ff4ecH
	DD	05bbfc92dH
	DD	0d0ec3b25H
	DD	0b7801ab7H
	DD	08d6d3b24H
	DD	020c763efH
	DD	0c366a5fcH
	DD	09c382880H
	DD	0ace3205H
	DD	0aac9548aH
	DD	0eca1d7c7H
	DD	041afa32H
	DD	01d16625aH
	DD	06701902cH
	DD	09b757a54H
	DD	031d477f7H
	DD	09126b031H
	DD	036cc6fdbH
	DD	0c70b8b46H
	DD	0d9e66a48H
	DD	056e55a79H
	DD	026a4cebH
	DD	052437effH
	DD	02f8f76b4H
	DD	0df980a5H
	DD	08674cde3H
	DD	0edda04ebH
	DD	017a9be04H
	DD	02c18f4dfH
	DD	0b7747f9dH
	DD	0ab2af7b4H
	DD	0efc34d20H
	DD	02e096b7cH
	DD	01741a254H
	DD	0e5b6a035H
	DD	0213d42f6H
	DD	02c1c7c26H
	DD	061c2f50fH
	DD	06552daf9H
	DD	0d2c231f8H
	DD	025130f69H
	DD	0d8167fa2H
	DD	0418f2c8H
	DD	01a96a6H
	DD	0d1526abH
	DD	063315c21H
	DD	05e0a72ecH
	DD	049bafefdH
	DD	0187908d9H
	DD	08d0dbd86H
	DD	0311170a7H
	DD	03e9b640cH
	DD	0cc3e10d7H
	DD	0d5cad3b6H
	DD	0caec388H
	DD	0f73001e1H
	DD	06c728affH
	DD	071eae2a1H
	DD	01f9af36eH
	DD	0cfcbd12fH
	DD	0c1de8417H
	DD	0ac07be6bH
	DD	0cb44a1d8H
	DD	08b9b0f56H
	DD	013988c3H
	DD	0b1c52fcaH
	DD	0b4be31cdH
	DD	0d8782806H
	DD	012a3a4e2H
	DD	06f7de532H
	DD	058fd7eb6H
	DD	0d01ee900H
	DD	024adffc2H
	DD	0f4990fc5H
	DD	09711aac5H
	DD	01d7b95H
	DD	082e5e7d2H
	DD	0109873f6H
	DD	0613096H
	DD	0c32d9521H
	DD	0ada121ffH
	DD	029908415H
	DD	07fbb977fH
	DD	0af9eb3dbH
	DD	029c9ed2aH
	DD	05ce2a465H
	DD	0a730f32cH
	DD	0d0aa3fe8H
	DD	08a5cc091H
	DD	0d49e2ce7H
	DD	0ce454a9H
	DD	0d60acd86H
	DD	015f1919H
	DD	077079103H
	DD	0dea03af6H
	DD	078a8565eH
	DD	0dee356dfH
	DD	021f05cbeH
	DD	08b75e387H
	DD	0b3c50651H
	DD	0b8a5c3efH
	DD	0d8eeb6d2H
	DD	0e523be77H
	DD	0c2154529H
	DD	02f69efdfH
	DD	0afe67afbH
	DD	0f470c4b2H
	DD	0f3e0eb5bH
	DD	0d6cc9876H
	DD	039e4460cH
	DD	01fda8538H
	DD	01987832fH
	DD	0ca007367H
	DD	0a99144f8H
	DD	0296b299eH
	DD	0492fc295H
	DD	09266beabH
	DD	0b5676e69H
	DD	09bd3dddaH
	DD	0df7e052fH
	DD	0db25701cH
	DD	01b5e51eeH
	DD	0f65324e6H
	DD	06afce36cH
	DD	0316cc04H
	DD	08644213eH
	DD	0b7dc59d0H
	DD	07965291fH
	DD	0ccd6fd43H
	DD	041823979H
	DD	0932bcdf6H
	DD	0b657c34dH
	DD	04edfd282H
	DD	07ae5290cH
	DD	03cb9536bH
	DD	0851e20feH
	DD	09833557eH
	DD	013ecf0b0H
	DD	0d3ffb372H
	DD	03f85c5c1H
	DD	0aef7ed2H
	DD	07ec90c04H
	DD	02c6e74b9H
	DD	09b0e66dfH
	DD	0a6337911H
	DD	0b86a7fffH
	DD	01dd358f5H
	DD	044dd9d44H
	DD	01731167fH
	DD	08fbf1faH
	DD	0e7f511ccH
	DD	0d2051b00H
	DD	0735aba00H
	DD	02ab722d8H
	DD	0386381cbH
	DD	0acf6243aH
	DD	069befd7aH
	DD	0e6a2e77fH
	DD	0f0c720cdH
	DD	0c4494816H
	DD	0ccf5c180H
	DD	038851640H
	DD	015b0a848H
	DD	0e68b18cbH
	DD	04caadeffH
	DD	05f480a01H
	DD	0412b2aaH
	DD	0259814fcH
	DD	041d0efe2H
	DD	04e40b48dH
	DD	0248eb6fbH
	DD	08dba1cfeH
	DD	041a99b02H
	DD	01a550a04H
	DD	0ba8f65cbH
	DD	07251f4e7H
	DD	095a51725H
	DD	0c106ecd7H
	DD	097a5980aH
	DD	0c539b9aaH
	DD	04d79fe6aH
	DD	0f2f3f763H
	DD	068af8040H
	DD	0ed0c9e56H
	DD	011b4958bH
	DD	0e1eb5a88H
	DD	08709e6b0H
	DD	0d7e07156H
	DD	04e29fea7H
	DD	06366e52dH
	DD	02d1c000H
	DD	0c4ac8e05H
	DD	09377f571H
	DD	0c05372aH
	DD	0578535f2H
	DD	02261be02H
	DD	0d642a0c9H
	DD	0df13a280H
	DD	074b55bd2H
	DD	0682199c0H
	DD	0d421e5ecH
	DD	053fb3ce8H
	DD	0c8adedb3H
	DD	028a87fc9H
	DD	03d959981H
	DD	05c1ff900H
	DD	0fe38d399H
	DD	0c4eff0bH
	DD	062407eaH
	DD	0aa2f4fb1H
	DD	04fb96976H
	DD	090c79505H
	DD	0b0a8a774H
	DD	0ef55a1ffH
	DD	0e59ca2c2H
	DD	0a6b62d27H
	DD	0e66a4263H
	DD	0df65001fH
	DD	0ec50966H
	DD	0dfdd55bcH
	DD	029de0655H
	DD	0911e739aH
	DD	017af8975H
	DD	032c7911cH
	DD	089f89468H
	DD	0d01e980H
	DD	0524755f4H
	DD	03b63cc9H
	DD	0cc844b2H
	DD	0bcf3f0aaH
	DD	087ac36e9H
	DD	0e53a7426H
	DD	01b3d82bH
	DD	01a9e7449H
	DD	064ee2d7eH
	DD	0cddbb1daH
	DD	01c94910H
	DD	0b868bf80H
	DD	0d26f3fdH
	DD	09342ede7H
	DD	04a5c284H
	DD	0636737b6H
	DD	050f5b616H
	DD	0f24766e3H
	DD	08eca36c1H
	DD	0136e05dbH
	DD	0fef18391H
	DD	0fb887a37H
	DD	0d6e7f7d4H
	DD	0c7fb7dc9H
	DD	03063fcdfH
	DD	0b6f589deH
	DD	0ec2941daH
	DD	026e46695H
	DD	0b7566419H
	DD	0f654efc5H
	DD	0d08d58b7H
	DD	048925401H
	DD	0c1bacb7fH
	DD	0e5ff550fH
	DD	0b6083049H
	DD	05bb5d0e8H
	DD	087d72e5aH
	DD	0ab6a6ee1H
	DD	0223a66ceH
	DD	0c62bf3cdH
	DD	09e0885f9H
	DD	068cb3e47H
	DD	086c010fH
	DD	0a21de820H
	DD	0d18b69deH
	DD	0f3f65777H
	DD	0fa02c3f6H
	DD	0407edac3H
	DD	0cbb3d550H
	DD	01793084dH
	DD	0b0d70ebaH
	DD	0ab378d5H
	DD	0d951fb0cH
	DD	0ded7da56H
	DD	04124bbe4H
	DD	094ca0b56H
	DD	0f5755d1H
	DD	0e0e1e56eH
	DD	06184b5beH
	DD	0580a249fH
	DD	094f74bc0H
	DD	0e327888eH
	DD	09f7b5561H
	DD	0c3dc0280H
	DD	05687715H
	DD	0646c6bd7H
	DD	044904db3H
	DD	066b4f0a3H
	DD	0c0f1648aH
	DD	0697ed5afH
	DD	049e92ff6H
	DD	0309e374fH
	DD	02cb6356aH
	DD	085808573H
	DD	04991f840H
	DD	076f0ae02H
	DD	083be84dH
	DD	028421c9aH
	DD	044489406H
	DD	0736e4cb8H
	DD	0c1092910H
	DD	08bc95fc6H
	DD	07d869cf4H
	DD	0134f616fH
	DD	02e77118dH
	DD	0b31b2be1H
	DD	0aa90b472H
	DD	03ca5d717H
	DD	07d161bbaH
	DD	09cad9010H
	DD	0af462ba2H
	DD	09fe459d2H
	DD	045d34559H
	DD	0d9f2da13H
	DD	0dbc65487H
	DD	0f3e4f94eH
	DD	0176d486fH
	DD	097c13eaH
	DD	0631da5c7H
	DD	0445f7382H
	DD	0175683f4H
	DD	0cdc66a97H
	DD	070be0288H
	DD	0b3cdcf72H
	DD	06e5dd2f3H
	DD	020936079H
	DD	0459b80a5H
	DD	0be60e2dbH
	DD	0a9c23101H
	DD	0eba5315cH
	DD	0224e42f2H
	DD	01c5c1572H
	DD	0f6721b2cH
	DD	01ad2fff3H
	DD	08c25404eH
	DD	0324ed72fH
	DD	04067b7fdH
	DD	0523138eH
	DD	05ca3bc78H
	DD	0dc0fd66eH
	DD	075922283H
	DD	0784d6b17H
	DD	058ebb16eH
	DD	044094f85H
	DD	03f481d87H
	DD	0fcfeae7bH
	DD	077b5ff76H
	DD	08c2302bfH
	DD	0aaf47556H
	DD	05f46b02aH
	DD	02b092801H
	DD	03d38f5f7H
	DD	0ca81f36H
	DD	052af4a8aH
	DD	066d5e7c0H
	DD	0df3b0874H
	DD	095055110H
	DD	01b5ad7a8H
	DD	0f61ed5adH
	DD	06cf6e479H
	DD	020758184H
	DD	0d0cefa65H
	DD	088f7be58H
	DD	04a046826H
	DD	0ff6f8f3H
	DD	0a09c7f70H
	DD	05346aba0H
	DD	05ce96c28H
	DD	0e176eda3H
	DD	06bac307fH
	DD	0376829d2H
	DD	085360fa9H
	DD	017e3fe2aH
	DD	024b79767H
	DD	0f5a96b20H
	DD	0d6cd2595H
	DD	068ff1ebfH
	DD	07555442cH
	DD	0f19f06beH
	DD	0f9e0659aH
	DD	0eeb9491dH
	DD	034010718H
	DD	0bb30cab8H
	DD	0e822fe15H
	DD	088570983H
	DD	0750e6249H
	DD	0da627e55H
	DD	05e76ffa8H
	DD	0b1534546H
	DD	06d47de08H
	DD	0efe9e7d4H
	DD	0f6fa8f9dH
	DD	02cac6ce1H
	DD	04ca34867H
	DD	0e2337f7cH
	DD	095db08e7H
	DD	016843b4H
	DD	0eced5cbcH
	DD	0325553acH
	DD	0bf9f0960H
	DD	0dfa1e2edH
	DD	083f0579dH
	DD	063ed86b9H
	DD	01ab6a6b8H
	DD	0de5ebe39H
	DD	0f38ff732H
	DD	08989b138H
	DD	033f14961H
	DD	0c01937bdH
	DD	0f506c6daH
	DD	0e4625e7eH
	DD	0a308ea99H
	DD	04e23e33cH
	DD	079cbd7ccH
	DD	048a14367H
	DD	0a3149619H
	DD	0fec94bd5H
	DD	0a114174aH
	DD	0eaa01866H
	DD	0a084db2dH
	DD	09a8486fH
	DD	0a888614aH
	DD	02900af98H
	DD	01665991H
	DD	0e1992863H
	DD	0c8f30c60H
	DD	02e78ef3cH
	DD	0d0d51932H
	DD	0cf0fec14H
	DD	0f7ca07d2H
	DD	0d0a82072H
	DD	0fd41197eH
	DD	09305a6b0H
	DD	0e86be3daH
	DD	074bed3cdH
	DD	0372da53cH
	DD	04c7f4448H
	DD	0dab5d440H
	DD	06dba0ec3H
	DD	083919a7H
	DD	09fbaeed9H
	DD	049dbcfb0H
	DD	04e670c53H
	DD	05c3d9c01H
	DD	064bdb941H
	DD	02c0e636aH
	DD	0ba7dd9cdH
	DD	0ea6f7388H
	DD	0e70bc762H
	DD	035f29adbH
	DD	05c4cdd8dH
	DD	0f0d48d8cH
	DD	0b88153e2H
	DD	08a19866H
	DD	01ae2eac8H
	DD	0284caf89H
	DD	0aa928223H
	DD	09334be53H
	DD	03b3a21bfH
	DD	016434be3H
	DD	09aea3906H
	DD	0efe8c36eH
	DD	0f890cdd9H
	DD	080226daeH
	DD	0c340a4a3H
	DD	0df7e9c09H
	DD	0a694a807H
	DD	05b7c5eccH
	DD	0221db3a6H
	DD	09a69a02fH
	DD	068818a54H
	DD	0ceb2296fH
	DD	053c0843aH
	DD	0fe893655H
	DD	025bfe68aH
	DD	0b4628abcH
	DD	0cf222ebfH
	DD	025ac6f48H
	DD	0a9a99387H
	DD	053bddb65H
	DD	0e76ffbe7H
	DD	0e967fd78H
	DD	0ba93563H
	DD	08e342bc1H
	DD	0e8a11be9H
	DD	04980740dH
	DD	0c8087dfcH
	DD	08de4bf99H
	DD	0a11101a0H
	DD	07fd37975H
	DD	0da5a26c0H
	DD	0e81f994fH
	DD	09528cd89H
	DD	0fd339fedH
	DD	0b87834bfH
	DD	05f04456dH
	DD	022258698H
	DD	0c9c4c83bH
	DD	02dc156beH
	DD	04f628daaH
	DD	057f55ec5H
	DD	0e2220abeH
	DD	0d2916ebfH
	DD	04ec75b95H
	DD	024f2c3c0H
	DD	042d15d99H
	DD	0cd0d7fa0H
	DD	07b6e27ffH
	DD	0a8dc8af0H
	DD	07345c106H
	DD	0f41e232fH
	DD	035162386H
	DD	0e6ea8926H
	DD	03333b094H
	DD	0157ec6f2H
	DD	0372b74afH
	DD	0692573e4H
	DD	0e9a9d848H
	DD	0f3160289H
	DD	03a62ef1dH
	DD	0a787e238H
	DD	0f3a5f676H
	DD	074364853H
	DD	020951063H
	DD	04576698dH
	DD	0b6fad407H
	DD	0592af950H
	DD	036f73523H
	DD	04cfb6e87H
	DD	07da4cec0H
	DD	06c152daaH
	DD	0cb0396a8H
	DD	0c50dfe5dH
	DD	0fcd707abH
	DD	0921c42fH
	DD	089dff0bbH
	DD	05fe2be78H
	DD	0448f4f33H
	DD	0754613c9H
	DD	02b05d08dH
	DD	048b9d585H
	DD	0dc049441H
	DD	0c8098f9bH
	DD	07dede786H
	DD	0c39a3373H
	DD	042410005H
	DD	06a091751H
	DD	0ef3c8a6H
	DD	0890072d6H
	DD	028207682H
	DD	0a9a9f7beH
	DD	0bf32679dH
	DD	0d45b5b75H
	DD	0b353fd00H
	DD	0cbb0e358H
	DD	0830f220aH
	DD	01f8fb214H
	DD	0d372cf08H
	DD	0cc3c4a13H
	DD	08cf63166H
	DD	061c87beH
	DD	088c98f88H
	DD	06062e397H
	DD	047cf8e7aH
	DD	0b6c85283H
	DD	03cc2acfbH
	DD	03fc06976H
	DD	04e8f0252H
	DD	064d8314dH
	DD	0da3870e3H
	DD	01e665459H
	DD	0c10908f0H
	DD	0513021a5H
	DD	06c5b68b7H
	DD	0822f8aa0H
	DD	03007cd3eH
	DD	074719eefH
	DD	0dc872681H
	DD	073340d4H
	DD	07e432fd9H
	DD	0c5ec241H
	DD	08809286cH
	DD	0f592d891H
	DD	08a930f6H
	DD	0957ef305H
	DD	0b7fbffbdH
	DD	0c266e96fH
	DD	06fe4ac98H
	DD	0b173ecc0H
	DD	0bc60b42aH
	DD	0953498daH
	DD	0fba1ae12H
	DD	02d4bd736H
	DD	0f25faabH
	DD	0a4f3fcebH
	DD	0e2969123H
	DD	0257f0c3dH
	DD	09348af49H
	DD	0361400bcH
	DD	0e8816f4aH
	DD	03814f200H
	DD	0a3f94043H
	DD	09c7a54c2H
	DD	0bc704f57H
	DD	0da41e7f9H
	DD	0c25ad33aH
	DD	054f4a084H
	DD	0b17f5505H
	DD	059357cbeH
	DD	0edbd15c8H
	DD	07f97c5abH
	DD	0ba5ac7b5H
	DD	0b6f6deafH
	DD	03a479c3aH
	DD	05302da25H
	DD	0653d7e6aH
	DD	054268d49H
	DD	051a477eaH
	DD	05017d55bH
	DD	0d7d25d88H
	DD	044136c76H
	DD	0404a8c8H
	DD	0b8e5a121H
	DD	0b81a928aH
	DD	060ed5869H
	DD	097c55b96H
	DD	0eaec991bH
	DD	029935913H
	DD	01fdb7f1H
	DD	088e8dfaH
	DD	09ab6f6f5H
	DD	03b4cbf9fH
	DD	04a5de3abH
	DD	0e6051d35H
	DD	0a0e1d855H
	DD	0d36b4cf1H
	DD	0f544edebH
	DD	0b0e93524H
	DD	0bebb8fbdH
	DD	0a2d762cfH
	DD	049c92f54H
	DD	038b5f331H
	DD	07128a454H
	DD	048392905H
	DD	0a65b1db8H
	DD	0851c97bdH
	DD	0d675cf2fH
	DD	085e04019H
	DD	0332bf567H
	DD	0662dbfffH
	DD	0cfc65693H
	DD	02a8d7f6fH
	DD	0ab9bc912H
	DD	0de6008a1H
	DD	02028da1fH
	DD	0227bce7H
	DD	04d642916H
	DD	018fac300H
	DD	050f18b82H
	DD	02cb2cb11H
	DD	0b232e75cH
	DD	04b3695f2H
	DD	0b28707deH
	DD	0a05fbcf6H
	DD	0cd4181e9H
	DD	0e150210cH
	DD	0e24ef1bdH
	DD	0b168c381H
	DD	0fde4e789H
	DD	05c79b0d8H
	DD	01e8bfd43H
	DD	04d495001H
	DD	038be4341H
	DD	0913cee1dH
	DD	092a79c3fH
	DD	089766beH
	DD	0baeeadf4H
	DD	01286becfH
	DD	0b6eacb19H
	DD	02660c200H
	DD	07565bde4H
	DD	064241f7aH
	DD	08248dca9H
	DD	0c3b3ad66H
	DD	028136086H
	DD	0bd8dfa8H
	DD	0356d1cf2H
	DD	0107789beH
	DD	0b3b2e9ceH
	DD	0502aa8fH
	DD	0bc0351eH
	DD	0166bf52aH
	DD	0eb12ff82H
	DD	0e3486911H
	DD	0d34d7516H
	DD	04e7b3affH
	DD	05f43671bH
	DD	09cf6e037H
	DD	04981ac83H
	DD	0334266ceH
	DD	08c9341b7H
	DD	0d0d854c0H
	DD	0cb3a6c88H
	DD	047bc2829H
	DD	04725ba37H
	DD	0a66ad22bH
	DD	07ad61f1eH
	DD	0c5cbafaH
	DD	04437f107H
	DD	0b6e79962H
	DD	042d2d816H
	DD	0a961288H
	DD	0e1a5c06eH
	DD	013749e67H
	DD	072fc081aH
	DD	0b1d139f7H
	DD	0f9583745H
	DD	0cf19df58H
	DD	0bec3f756H
	DD	0c06eba30H
	DD	07211b24H
	DD	045c28829H
	DD	0c95e317fH
	DD	0bc8ec511H
	DD	038bc46e9H
	DD	0c6e6fa14H
	DD	0bae8584aH
	DD	0ad4ebc46H
	DD	0468f508bH
	DD	07829435fH
	DD	0f124183bH
	DD	0821dba9fH
	DD	0aff60ff4H
	DD	0ea2c4e6dH
	DD	016e39264H
	DD	092544a8bH
	DD	09b4fc3H
	DD	0aba68cedH
	DD	09ac96f78H
	DD	06a5b79aH
	DD	0b2856e6eH
	DD	01aec3ca9H
	DD	0be838688H
	DD	0e0804e9H
	DD	055f1be56H
	DD	0e7e5363bH
	DD	0b3a1f25dH
	DD	0f7debb85H
	DD	061fe033cH
	DD	016746233H
	DD	03c034c28H
	DD	0da6d0c74H
	DD	079aac56cH
	DD	03ce4e1adH
	DD	051f0c802H
	DD	098f8f35aH
	DD	01626a49fH
	DD	0eed82b29H
	DD	01d382fe3H
	DD	0c4fb99aH
	DD	0bb325778H
	DD	03ec6d97bH
	DD	06e77a6a9H
	DD	0cb658b5cH
	DD	0d45230c7H
	DD	02bd1408bH
	DD	060c03eb7H
	DD	0b9068d78H
	DD	0a33754f4H
	DD	0f430c87dH
	DD	0c8a71302H
	DD	0b96d8c32H
	DD	0ebd4e7beH
	DD	0be8b9d2dH
	DD	07979fb06H
	DD	0e7225308H
	DD	08b75cf77H
	DD	011ef8da4H
	DD	0e083c858H
	DD	08d6b786fH
	DD	05a6317a6H
	DD	0fa5cf7a0H
	DD	05dda0033H
	DD	0f28ebfb0H
	DD	0f5b9c310H
	DD	0a0eac280H
	DD	08b9767aH
	DD	0a3d9d2b0H
	DD	079d34217H
	DD	021a718dH
	DD	09ac6336aH
	DD	02711fd60H
	DD	0438050e3H
	DD	069908a8H
	DD	03d7fedc4H
	DD	0826d2befH
	DD	04eeb8476H
	DD	0488dcf25H
	DD	036c9d566H
	DD	028e74e41H
	DD	0c2610acaH
	DD	03d49a9cfH
	DD	0bae3b9dfH
	DD	0b65f8de6H
	DD	092aeaf64H
	DD	03ac7d5e6H
	DD	09ea80509H
	DD	0f22b017dH
	DD	0a4173f70H
	DD	0dd1e16c3H
	DD	015e0d7f9H
	DD	050b1b887H
	DD	02b9f4fd5H
	DD	0625aba82H
	DD	06a017962H
	DD	02ec01b9cH
	DD	015488aa9H
	DD	0d716e740H
	DD	040055a2cH
	DD	093d29a22H
	DD	0e32dbf9aH
	DD	058745b9H
	DD	03453dc1eH
	DD	0d699296eH
	DD	0496cff6fH
	DD	01c9f4986H
	DD	0dfe2ed07H
	DD	0b87242d1H
	DD	019de7eaeH
	DD	053e561aH
	DD	015ad6f8cH
	DD	066626c1cH
	DD	07154c24cH
	DD	0ea082b2aH
	DD	093eb2939H
	DD	017dcb0f0H
	DD	058d4f2aeH
	DD	09ea294fbH
	DD	052cf564cH
	DD	09883fe66H
	DD	02ec40581H
	DD	0763953c3H
	DD	01d6692eH
	DD	0d3a0c108H
	DD	0a1e7160eH
	DD	0e4f2dfa6H
	DD	0693ed285H
	DD	074904698H
	DD	04c2b0eddH
	DD	04f757656H
	DD	05d393378H
	DD	0a132234fH
	DD	03d321c5dH
	DD	0c3f5e194H
	DD	04b269301H
	DD	0c79f022fH
	DD	03c997e7eH
	DD	05e4f9504H
	DD	03ffafbbdH
	DD	076f7ad0eH
	DD	0296693f4H
	DD	03d1fce6fH
	DD	0c61e45beH
	DD	0d3b5ab34H
	DD	0f72bf9b7H
	DD	01b0434c0H
	DD	04e72b567H
	DD	05592a33dH
	DD	0b5229301H
	DD	0cfd2a87fH
	DD	060aeb767H
	DD	01814386bH
	DD	030bcc33dH
	DD	038a0c07dH
	DD	0fd1606f2H
	DD	0c363519bH
	DD	0589dd390H
	DD	05479f8e6H
	DD	01cb8d647H
	DD	097fd61a9H
	DD	0ea7759f4H
	DD	02d57539dH
	DD	0569a58cfH
	DD	0e84e63adH
	DD	0462e1b78H
	DD	06580f87eH
	DD	0f3817914H
	DD	091da55f4H
	DD	040a230f3H
	DD	0d1988f35H
	DD	0b6e318d2H
	DD	03ffa50bcH
	DD	03d40f021H
	DD	0c3c0bdaeH
	DD	04958c24cH
	DD	0518f36b2H
	DD	084b1d370H
	DD	0fedce83H
	DD	0878ddadaH
	DD	0f2a279c7H
	DD	094e01be8H
	DD	090716f4bH
	DD	0954b8aa3H
	DD	0e216300dH
	DD	0bbddfffcH
	DD	0a7ebdabdH
	DD	035648095H
	DD	07789f8b7H
	DD	0e6c1121bH
	DD	0e241600H
	DD	052ce8b5H
	DD	011a9cfb0H
	DD	0e5952f11H
	DD	0ece7990aH
	DD	09386d174H
	DD	02a42931cH
	DD	076e38111H
	DD	0b12def3aH
	DD	037ddddfcH
	DD	0de9adeb1H
	DD	0a0cc32cH
	DD	0be197029H
	DD	084a00940H
	DD	0bb243a0fH
	DD	0b4d137cfH
	DD	0b44e79f0H
	DD	049eedfdH
	DD	0b15a15dH
	DD	0480d3168H
	DD	08bbbde5aH
	DD	0669ded42H
	DD	0c7ece831H
	DD	03f8f95e7H
	DD	072df191bH
	DD	07580330dH
	DD	094074251H
	DD	05c7dcdfaH
	DD	0abbe6d63H
	DD	0aa402164H
	DD	0b301d40aH
	DD	02e7d1caH
	DD	053571daeH
	DD	07a3182a2H
	DD	012a8ddecH
	DD	0fdaa335dH
	DD	0176f43e8H
	DD	071fb46d4H
	DD	038129022H
	DD	0ce949ad4H
	DD	0b84769adH
	DD	0965bd862H
	DD	082f3d055H
	DD	066fb9767H
	DD	015b80b4eH
	DD	01d5b47a0H
	DD	04cfde06fH
	DD	0c28ec4b8H
	DD	057e8726eH
	DD	0647a78fcH
	DD	099865d44H
	DD	0608bd593H
	DD	06c200e03H
	DD	039dc5ff6H
	DD	05d0b00a3H
	DD	0ae63aff2H
	DD	07e8bd632H
	DD	070108c0cH
	DD	0bbd35049H
	DD	02998df04H
	DD	0980cf42aH
	DD	09b6df491H
	DD	09e7edd53H
	DD	06918548H
	DD	058cb7e07H
	DD	03b74ef2eH
	DD	0522fffb1H
	DD	0d24708ccH
	DD	01c7e27cdH
	DD	0a4eb215bH
	DD	03cf1d2e2H
	DD	019b47a38H
	DD	0424f7618H
	DD	035856039H
	DD	09d17dee7H
	DD	027eb35e6H
	DD	0c9aff67bH
	DD	036baf5b8H
	DD	09c467cdH
	DD	0c18910b1H
	DD	0e11dbf7bH
	DD	06cd1af8H
	DD	07170c608H
	DD	02d5e3354H
	DD	0d4de495aH
	DD	064c6d006H
	DD	0bcc0c62cH
	DD	03dd00db3H
	DD	0708f8f34H
	DD	077d51b42H
	DD	0264f620fH
	DD	024b8d2bfH
	DD	015c1b79eH
	DD	046a52564H
	DD	0f8d7e54eH
	DD	03e378160H
	DD	07895cda5H
	DD	0859c15a5H
	DD	0e6459788H
	DD	0c37bc75fH
	DD	0db07ba0cH
	DD	0676a3abH
	DD	07f229b1eH
	DD	031842e7bH
	DD	024259fd7H
	DD	0f8bef472H
	DD	0835ffcb8H
	DD	06df4c1f2H
	DD	096f5b195H
	DD	0fd0af0fcH
	DD	0b0fe134cH
	DD	0e2506d3dH
	DD	04f9b12eaH
	DD	0f215f225H
	DD	0a223736fH
	DD	09fb4c428H
	DD	025d04979H
	DD	034c713f8H
	DD	0c4618187H
	DD	0ea7a6e98H
	DD	07cd16efcH
	DD	01436876cH
	DD	0f1544107H
	DD	0bedeee14H
	DD	056e9af27H
	DD	0a04aa441H
	DD	03cf7c899H
	DD	092ecbae6H
	DD	0dd67016dH
	DD	0151682ebH
	DD	0a842eedfH
	DD	0fdba60b4H
	DD	0f1907b75H
	DD	020e3030fH
	DD	024d8c29eH
	DD	0e139673bH
	DD	0efa63fb8H
	DD	071873054H
	DD	0b6f2cf3bH
	DD	09f326442H
	DD	0cb15a4ccH
	DD	0b01a4504H
	DD	0f1e47d8dH
	DD	0844a1be5H
	DD	0bae7dfdcH
	DD	042cbda70H
	DD	0cd7dae0aH
	DD	057e85b7aH
	DD	0d53f5af6H
	DD	020cf4d8cH
	DD	0cea4d428H
	DD	079d130a4H
	DD	03486ebfbH
	DD	033d3cddcH
	DD	077853b53H
	DD	037effcb5H
	DD	0c5068778H
	DD	0e580b3e6H
	DD	04e68b8f4H
	DD	0c5c8b37eH
	DD	0d809ea2H
	DD	0398feb7cH
	DD	0132a4f94H
	DD	043b7950eH
	DD	02fee7d1cH
	DD	0223613bdH
	DD	0dd06caa2H
	DD	037df932bH
	DD	0c4248289H
	DD	0acf3ebc3H
	DD	05715f6b7H
	DD	0ef3478ddH
	DD	0f267616fH
	DD	0c148cbe4H
	DD	09052815eH
	DD	05e410fabH
	DD	0b48a2465H
	DD	02eda7fa4H
	DD	0e87b40e4H
	DD	0e98ea084H
	DD	05889e9e1H
	DD	0efd390fcH
	DD	0dd07d35bH
	DD	0db485694H
	DD	038d7e5b2H
	DD	057720101H
	DD	0730edebcH
	DD	05b643113H
	DD	094917e4fH
	DD	0503c2fbaH
	DD	0646f1282H
	DD	07523d24aH
	DD	0e0779695H
	DD	0f9c17a8fH
	DD	07a5b2121H
	DD	0d187b896H
	DD	029263a4dH
	DD	0ba510cdfH
	DD	081f47c9fH
	DD	0ad1163edH
	DD	0ea7b5965H
	DD	01a00726eH
	DD	011403092H
	DD	0da6d77H
	DD	04a0cdd61H
	DD	0ad1f4603H
	DD	0605bdfb0H
	DD	09eedc364H
	DD	022ebe6a8H
	DD	0cee7d28aH
	DD	0a0e736a0H
	DD	05564a6b9H
	DD	010853209H
	DD	0c7eb8f37H
	DD	02de705caH
	DD	08951570fH
	DD	0df09822bH
	DD	0bd691a6cH
	DD	0aa12e4f2H
	DD	087451c0fH
	DD	0e0f6a27aH
	DD	03ada4819H
	DD	04cf1764fH
	DD	0d771c2bH
	DD	067cdb156H
	DD	0350d8384H
	DD	05938fa0fH
	DD	042399ef3H
	DD	036997b07H
	DD	0e84093dH
	DD	04aa93e61H
	DD	08360d87bH
	DD	01fa98b0cH
	DD	01149382cH
	DD	0e97625a5H
	DD	0614d1b7H
	DD	0e25244bH
	DD	0c768347H
	DD	0589e8d82H
	DD	0d2059d1H
	DD	0a466bb1eH
	DD	0f8da0a82H
	DD	04f19130H
	DD	0ba6e4ec0H
	DD	099265164H
	DD	01ee7230dH
	DD	050b2ad80H
	DD	0eaee6801H
	DD	08db2a283H
	DD	0ea8bf59eH
CONST	ENDS
PUBLIC	_Cast5Encrypt@12
EXTRN	_MirrorBytes32@4:PROC
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\cast.c
;	COMDAT _Cast5Encrypt@12
_TEXT	SEGMENT
_t$ = -16						; size = 4
_r$ = -12						; size = 4
_l$ = -8						; size = 4
_K$ = -4						; size = 4
_inBlock$ = 8						; size = 4
_outBlock$ = 12						; size = 4
_key$ = 16						; size = 4
_Cast5Encrypt@12 PROC					; COMDAT

; 589  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 590  : 	word32 l = BE32 (((word32 *)inBlock)[0]);

  00008	8b 45 08	 mov	 eax, DWORD PTR _inBlock$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00013	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 591  : 	word32 r = BE32 (((word32 *)inBlock)[1]);

  00016	8b 55 08	 mov	 edx, DWORD PTR _inBlock$[ebp]
  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00022	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 592  : 	word32 *K = key->K;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00028	89 4d fc	 mov	 DWORD PTR _K$[ebp], ecx

; 593  : 	word32 t;
; 594  : 
; 595  : 	/* Do the work */
; 596  : 	F1(l, r,  0, 16);

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0002e	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _rotlVariable@8
  00040	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00043	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00046	c1 e8 18	 shr	 eax, 24			; 00000018H
  00049	0f b6 c8	 movzx	 ecx, al
  0004c	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0004f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00052	0f b6 c2	 movzx	 eax, dl
  00055	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  0005c	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  00063	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00066	c1 ea 08	 shr	 edx, 8
  00069	0f b6 c2	 movzx	 eax, dl
  0006c	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  00073	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00077	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0007e	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  00081	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 597  : 	F2(r, l,  1, 16);

  00084	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00087	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0008a	51		 push	 ecx
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0008e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00091	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _rotlVariable@8
  0009a	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0009d	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  000a0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000a3	0f b6 d1	 movzx	 edx, cl
  000a6	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  000a9	c1 e8 10	 shr	 eax, 16			; 00000010H
  000ac	0f b6 c8	 movzx	 ecx, al
  000af	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  000b6	2b 14 8d 00 04
	00 00		 sub	 edx, DWORD PTR _S[ecx*4+1024]
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  000c0	c1 e8 08	 shr	 eax, 8
  000c3	0f b6 c8	 movzx	 ecx, al
  000c6	03 14 8d 00 08
	00 00		 add	 edx, DWORD PTR _S[ecx*4+2048]
  000cd	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  000d1	33 14 85 00 0c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+3072]
  000d8	33 55 f4	 xor	 edx, DWORD PTR _r$[ebp]
  000db	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx

; 598  : 	F3(l, r,  2, 16);

  000de	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  000e1	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  000e4	52		 push	 edx
  000e5	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  000e8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000eb	2b 4d f4	 sub	 ecx, DWORD PTR _r$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 _rotlVariable@8
  000f4	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  000f7	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  000fa	c1 ea 18	 shr	 edx, 24			; 00000018H
  000fd	0f b6 c2	 movzx	 eax, dl
  00100	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00103	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00106	0f b6 d1	 movzx	 edx, cl
  00109	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  00110	03 04 95 00 04
	00 00		 add	 eax, DWORD PTR _S[edx*4+1024]
  00117	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0011a	c1 e9 08	 shr	 ecx, 8
  0011d	0f b6 d1	 movzx	 edx, cl
  00120	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _S[edx*4+2048]
  00127	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  0012b	2b 04 8d 00 0c
	00 00		 sub	 eax, DWORD PTR _S[ecx*4+3072]
  00132	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  00135	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 599  : 	F1(r, l,  3, 16);

  00138	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0013b	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0013e	50		 push	 eax
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00142	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00145	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 _rotlVariable@8
  0014e	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00151	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00154	c1 e8 18	 shr	 eax, 24			; 00000018H
  00157	0f b6 c8	 movzx	 ecx, al
  0015a	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0015d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00160	0f b6 c2	 movzx	 eax, dl
  00163	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  0016a	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  00171	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00174	c1 ea 08	 shr	 edx, 8
  00177	0f b6 c2	 movzx	 eax, dl
  0017a	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  00181	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00185	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0018c	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  0018f	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 600  : 	F2(l, r,  4, 16);

  00192	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00195	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00198	51		 push	 ecx
  00199	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0019c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0019f	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _rotlVariable@8
  001a8	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  001ab	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  001ae	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001b1	0f b6 d1	 movzx	 edx, cl
  001b4	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  001b7	c1 e8 10	 shr	 eax, 16			; 00000010H
  001ba	0f b6 c8	 movzx	 ecx, al
  001bd	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  001c4	2b 14 8d 00 04
	00 00		 sub	 edx, DWORD PTR _S[ecx*4+1024]
  001cb	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  001ce	c1 e8 08	 shr	 eax, 8
  001d1	0f b6 c8	 movzx	 ecx, al
  001d4	03 14 8d 00 08
	00 00		 add	 edx, DWORD PTR _S[ecx*4+2048]
  001db	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  001df	33 14 85 00 0c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+3072]
  001e6	33 55 f8	 xor	 edx, DWORD PTR _l$[ebp]
  001e9	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx

; 601  : 	F3(r, l,  5, 16);

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  001ef	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  001f2	52		 push	 edx
  001f3	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  001f6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001f9	2b 4d f8	 sub	 ecx, DWORD PTR _l$[ebp]
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 _rotlVariable@8
  00202	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00205	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00208	c1 ea 18	 shr	 edx, 24			; 00000018H
  0020b	0f b6 c2	 movzx	 eax, dl
  0020e	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00211	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00214	0f b6 d1	 movzx	 edx, cl
  00217	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0021e	03 04 95 00 04
	00 00		 add	 eax, DWORD PTR _S[edx*4+1024]
  00225	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00228	c1 e9 08	 shr	 ecx, 8
  0022b	0f b6 d1	 movzx	 edx, cl
  0022e	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _S[edx*4+2048]
  00235	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00239	2b 04 8d 00 0c
	00 00		 sub	 eax, DWORD PTR _S[ecx*4+3072]
  00240	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  00243	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 602  : 	F1(l, r,  6, 16);

  00246	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00249	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0024c	50		 push	 eax
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00250	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00253	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 _rotlVariable@8
  0025c	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0025f	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00262	c1 e8 18	 shr	 eax, 24			; 00000018H
  00265	0f b6 c8	 movzx	 ecx, al
  00268	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0026b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0026e	0f b6 c2	 movzx	 eax, dl
  00271	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00278	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  0027f	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00282	c1 ea 08	 shr	 edx, 8
  00285	0f b6 c2	 movzx	 eax, dl
  00288	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  0028f	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00293	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0029a	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  0029d	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 603  : 	F2(r, l,  7, 16);

  002a0	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  002a3	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  002a6	51		 push	 ecx
  002a7	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  002aa	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002ad	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _rotlVariable@8
  002b6	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  002b9	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  002bc	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002bf	0f b6 d1	 movzx	 edx, cl
  002c2	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  002c5	c1 e8 10	 shr	 eax, 16			; 00000010H
  002c8	0f b6 c8	 movzx	 ecx, al
  002cb	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  002d2	2b 14 8d 00 04
	00 00		 sub	 edx, DWORD PTR _S[ecx*4+1024]
  002d9	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  002dc	c1 e8 08	 shr	 eax, 8
  002df	0f b6 c8	 movzx	 ecx, al
  002e2	03 14 8d 00 08
	00 00		 add	 edx, DWORD PTR _S[ecx*4+2048]
  002e9	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  002ed	33 14 85 00 0c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+3072]
  002f4	33 55 f4	 xor	 edx, DWORD PTR _r$[ebp]
  002f7	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx

; 604  : 	F3(l, r,  8, 16);

  002fa	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  002fd	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00300	52		 push	 edx
  00301	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00304	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00307	2b 4d f4	 sub	 ecx, DWORD PTR _r$[ebp]
  0030a	51		 push	 ecx
  0030b	e8 00 00 00 00	 call	 _rotlVariable@8
  00310	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00313	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00316	c1 ea 18	 shr	 edx, 24			; 00000018H
  00319	0f b6 c2	 movzx	 eax, dl
  0031c	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0031f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00322	0f b6 d1	 movzx	 edx, cl
  00325	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0032c	03 04 95 00 04
	00 00		 add	 eax, DWORD PTR _S[edx*4+1024]
  00333	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00336	c1 e9 08	 shr	 ecx, 8
  00339	0f b6 d1	 movzx	 edx, cl
  0033c	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _S[edx*4+2048]
  00343	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00347	2b 04 8d 00 0c
	00 00		 sub	 eax, DWORD PTR _S[ecx*4+3072]
  0034e	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  00351	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 605  : 	F1(r, l,  9, 16);

  00354	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00357	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0035a	50		 push	 eax
  0035b	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0035e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00361	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 _rotlVariable@8
  0036a	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0036d	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00370	c1 e8 18	 shr	 eax, 24			; 00000018H
  00373	0f b6 c8	 movzx	 ecx, al
  00376	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00379	c1 ea 10	 shr	 edx, 16			; 00000010H
  0037c	0f b6 c2	 movzx	 eax, dl
  0037f	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00386	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  0038d	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00390	c1 ea 08	 shr	 edx, 8
  00393	0f b6 c2	 movzx	 eax, dl
  00396	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  0039d	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  003a1	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  003a8	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  003ab	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 606  : 	F2(l, r, 10, 16);

  003ae	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  003b1	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  003b4	51		 push	 ecx
  003b5	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  003b8	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  003bb	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  003be	50		 push	 eax
  003bf	e8 00 00 00 00	 call	 _rotlVariable@8
  003c4	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  003c7	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  003ca	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003cd	0f b6 d1	 movzx	 edx, cl
  003d0	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  003d3	c1 e8 10	 shr	 eax, 16			; 00000010H
  003d6	0f b6 c8	 movzx	 ecx, al
  003d9	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  003e0	2b 14 8d 00 04
	00 00		 sub	 edx, DWORD PTR _S[ecx*4+1024]
  003e7	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  003ea	c1 e8 08	 shr	 eax, 8
  003ed	0f b6 c8	 movzx	 ecx, al
  003f0	03 14 8d 00 08
	00 00		 add	 edx, DWORD PTR _S[ecx*4+2048]
  003f7	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  003fb	33 14 85 00 0c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+3072]
  00402	33 55 f8	 xor	 edx, DWORD PTR _l$[ebp]
  00405	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx

; 607  : 	F3(r, l, 11, 16);

  00408	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0040b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0040e	52		 push	 edx
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00412	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00415	2b 4d f8	 sub	 ecx, DWORD PTR _l$[ebp]
  00418	51		 push	 ecx
  00419	e8 00 00 00 00	 call	 _rotlVariable@8
  0041e	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00421	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00424	c1 ea 18	 shr	 edx, 24			; 00000018H
  00427	0f b6 c2	 movzx	 eax, dl
  0042a	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0042d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00430	0f b6 d1	 movzx	 edx, cl
  00433	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0043a	03 04 95 00 04
	00 00		 add	 eax, DWORD PTR _S[edx*4+1024]
  00441	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00444	c1 e9 08	 shr	 ecx, 8
  00447	0f b6 d1	 movzx	 edx, cl
  0044a	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _S[edx*4+2048]
  00451	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00455	2b 04 8d 00 0c
	00 00		 sub	 eax, DWORD PTR _S[ecx*4+3072]
  0045c	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  0045f	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 608  : 	F1(l, r, 12, 16);

  00462	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00465	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00468	50		 push	 eax
  00469	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0046c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0046f	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00472	52		 push	 edx
  00473	e8 00 00 00 00	 call	 _rotlVariable@8
  00478	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0047b	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  0047e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00481	0f b6 c8	 movzx	 ecx, al
  00484	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00487	c1 ea 10	 shr	 edx, 16			; 00000010H
  0048a	0f b6 c2	 movzx	 eax, dl
  0048d	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00494	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  0049b	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0049e	c1 ea 08	 shr	 edx, 8
  004a1	0f b6 c2	 movzx	 eax, dl
  004a4	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  004ab	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  004af	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  004b6	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  004b9	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 609  : 	F2(r, l, 13, 16);

  004bc	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  004bf	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  004c2	51		 push	 ecx
  004c3	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  004c6	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  004c9	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  004cc	50		 push	 eax
  004cd	e8 00 00 00 00	 call	 _rotlVariable@8
  004d2	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  004d5	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  004d8	c1 e9 18	 shr	 ecx, 24			; 00000018H
  004db	0f b6 d1	 movzx	 edx, cl
  004de	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  004e1	c1 e8 10	 shr	 eax, 16			; 00000010H
  004e4	0f b6 c8	 movzx	 ecx, al
  004e7	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  004ee	2b 14 8d 00 04
	00 00		 sub	 edx, DWORD PTR _S[ecx*4+1024]
  004f5	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  004f8	c1 e8 08	 shr	 eax, 8
  004fb	0f b6 c8	 movzx	 ecx, al
  004fe	03 14 8d 00 08
	00 00		 add	 edx, DWORD PTR _S[ecx*4+2048]
  00505	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  00509	33 14 85 00 0c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+3072]
  00510	33 55 f4	 xor	 edx, DWORD PTR _r$[ebp]
  00513	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx

; 610  : 	F3(l, r, 14, 16);

  00516	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00519	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0051c	52		 push	 edx
  0051d	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00520	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00523	2b 4d f4	 sub	 ecx, DWORD PTR _r$[ebp]
  00526	51		 push	 ecx
  00527	e8 00 00 00 00	 call	 _rotlVariable@8
  0052c	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0052f	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00532	c1 ea 18	 shr	 edx, 24			; 00000018H
  00535	0f b6 c2	 movzx	 eax, dl
  00538	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0053b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0053e	0f b6 d1	 movzx	 edx, cl
  00541	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  00548	03 04 95 00 04
	00 00		 add	 eax, DWORD PTR _S[edx*4+1024]
  0054f	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00552	c1 e9 08	 shr	 ecx, 8
  00555	0f b6 d1	 movzx	 edx, cl
  00558	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _S[edx*4+2048]
  0055f	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00563	2b 04 8d 00 0c
	00 00		 sub	 eax, DWORD PTR _S[ecx*4+3072]
  0056a	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  0056d	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 611  : 	F1(r, l, 15, 16);

  00570	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00573	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00576	50		 push	 eax
  00577	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0057a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0057d	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  00580	52		 push	 edx
  00581	e8 00 00 00 00	 call	 _rotlVariable@8
  00586	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00589	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  0058c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0058f	0f b6 c8	 movzx	 ecx, al
  00592	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00595	c1 ea 10	 shr	 edx, 16			; 00000010H
  00598	0f b6 c2	 movzx	 eax, dl
  0059b	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  005a2	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  005a9	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  005ac	c1 ea 08	 shr	 edx, 8
  005af	0f b6 c2	 movzx	 eax, dl
  005b2	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  005b9	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  005bd	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  005c4	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  005c7	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 612  : 
; 613  : 	/* Put l,r into outblock */
; 614  : 	((word32 *)outBlock)[0] = BE32 (r);

  005ca	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 _MirrorBytes32@4
  005d3	8b 4d 0c	 mov	 ecx, DWORD PTR _outBlock$[ebp]
  005d6	89 01		 mov	 DWORD PTR [ecx], eax

; 615  : 	((word32 *)outBlock)[1] = BE32 (l);

  005d8	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  005db	52		 push	 edx
  005dc	e8 00 00 00 00	 call	 _MirrorBytes32@4
  005e1	8b 4d 0c	 mov	 ecx, DWORD PTR _outBlock$[ebp]
  005e4	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 616  : }

  005e7	8b e5		 mov	 esp, ebp
  005e9	5d		 pop	 ebp
  005ea	c2 0c 00	 ret	 12			; 0000000cH
_Cast5Encrypt@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _rotlVariable@8
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_rotlVariable@8 PROC					; COMDAT

; 25   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 26   : 	return (word32)((x<<y) | (x>>(sizeof(word32)*8-y)));

  00005	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0000b	d3 e0		 shl	 eax, cl
  0000d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00012	2b 4d 0c	 sub	 ecx, DWORD PTR _y$[ebp]
  00015	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00018	d3 ea		 shr	 edx, cl
  0001a	0b c2		 or	 eax, edx

; 27   : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
_rotlVariable@8 ENDP
_TEXT	ENDS
PUBLIC	_Cast5Decrypt@12
; Function compile flags: /Odtp
;	COMDAT _Cast5Decrypt@12
_TEXT	SEGMENT
_t$ = -16						; size = 4
_r$ = -12						; size = 4
_l$ = -8						; size = 4
_K$ = -4						; size = 4
_inBlock$ = 8						; size = 4
_outBlock$ = 12						; size = 4
_key$ = 16						; size = 4
_Cast5Decrypt@12 PROC					; COMDAT

; 620  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 621  : 	word32 r = BE32 (((word32 *)inBlock)[0]);

  00008	8b 45 08	 mov	 eax, DWORD PTR _inBlock$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00013	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 622  : 	word32 l = BE32 (((word32 *)inBlock)[1]);

  00016	8b 55 08	 mov	 edx, DWORD PTR _inBlock$[ebp]
  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00022	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 623  : 	word32 *K = key->K;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00028	89 4d fc	 mov	 DWORD PTR _K$[ebp], ecx

; 624  : 	word32 t;
; 625  : 
; 626  : 	/* Only do full 16 rounds if key length > 80 bits */
; 627  : 	F1(r, l, 15, 16);

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0002e	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00035	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00038	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _rotlVariable@8
  00041	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00044	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00047	c1 e8 18	 shr	 eax, 24			; 00000018H
  0004a	0f b6 c8	 movzx	 ecx, al
  0004d	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00050	c1 ea 10	 shr	 edx, 16			; 00000010H
  00053	0f b6 c2	 movzx	 eax, dl
  00056	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  0005d	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  00064	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00067	c1 ea 08	 shr	 edx, 8
  0006a	0f b6 c2	 movzx	 eax, dl
  0006d	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  00074	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00078	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0007f	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  00082	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 628  : 	F3(l, r, 14, 16);

  00085	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00088	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0008b	51		 push	 ecx
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0008f	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00092	2b 45 f4	 sub	 eax, DWORD PTR _r$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _rotlVariable@8
  0009b	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  000a1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000a4	0f b6 d1	 movzx	 edx, cl
  000a7	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  000aa	c1 e8 10	 shr	 eax, 16			; 00000010H
  000ad	0f b6 c8	 movzx	 ecx, al
  000b0	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  000b7	03 14 8d 00 04
	00 00		 add	 edx, DWORD PTR _S[ecx*4+1024]
  000be	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  000c1	c1 e8 08	 shr	 eax, 8
  000c4	0f b6 c8	 movzx	 ecx, al
  000c7	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+2048]
  000ce	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  000d2	2b 14 85 00 0c
	00 00		 sub	 edx, DWORD PTR _S[eax*4+3072]
  000d9	33 55 f8	 xor	 edx, DWORD PTR _l$[ebp]
  000dc	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx

; 629  : 	F2(r, l, 13, 16);

  000df	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  000e2	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  000e5	52		 push	 edx
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  000e9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000ec	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 _rotlVariable@8
  000f5	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  000f8	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  000fb	c1 ea 18	 shr	 edx, 24			; 00000018H
  000fe	0f b6 c2	 movzx	 eax, dl
  00101	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00104	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00107	0f b6 d1	 movzx	 edx, cl
  0010a	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  00111	2b 04 95 00 04
	00 00		 sub	 eax, DWORD PTR _S[edx*4+1024]
  00118	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0011b	c1 e9 08	 shr	 ecx, 8
  0011e	0f b6 d1	 movzx	 edx, cl
  00121	03 04 95 00 08
	00 00		 add	 eax, DWORD PTR _S[edx*4+2048]
  00128	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  0012c	33 04 8d 00 0c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+3072]
  00133	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  00136	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 630  : 	F1(l, r, 12, 16);

  00139	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0013c	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  0013f	50		 push	 eax
  00140	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00143	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00146	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 _rotlVariable@8
  0014f	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00152	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00155	c1 e8 18	 shr	 eax, 24			; 00000018H
  00158	0f b6 c8	 movzx	 ecx, al
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0015e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00161	0f b6 c2	 movzx	 eax, dl
  00164	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  0016b	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  00172	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00175	c1 ea 08	 shr	 edx, 8
  00178	0f b6 c2	 movzx	 eax, dl
  0017b	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  00182	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00186	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0018d	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  00190	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 631  : 	F3(r, l, 11, 16);

  00193	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00196	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00199	51		 push	 ecx
  0019a	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0019d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001a0	2b 45 f8	 sub	 eax, DWORD PTR _l$[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 _rotlVariable@8
  001a9	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  001ac	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  001af	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001b2	0f b6 d1	 movzx	 edx, cl
  001b5	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  001b8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001bb	0f b6 c8	 movzx	 ecx, al
  001be	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  001c5	03 14 8d 00 04
	00 00		 add	 edx, DWORD PTR _S[ecx*4+1024]
  001cc	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  001cf	c1 e8 08	 shr	 eax, 8
  001d2	0f b6 c8	 movzx	 ecx, al
  001d5	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+2048]
  001dc	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  001e0	2b 14 85 00 0c
	00 00		 sub	 edx, DWORD PTR _S[eax*4+3072]
  001e7	33 55 f4	 xor	 edx, DWORD PTR _r$[ebp]
  001ea	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx

; 632  : 	F2(l, r, 10, 16);

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  001f0	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  001f3	52		 push	 edx
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  001f7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001fa	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 _rotlVariable@8
  00203	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00206	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00209	c1 ea 18	 shr	 edx, 24			; 00000018H
  0020c	0f b6 c2	 movzx	 eax, dl
  0020f	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00212	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00215	0f b6 d1	 movzx	 edx, cl
  00218	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0021f	2b 04 95 00 04
	00 00		 sub	 eax, DWORD PTR _S[edx*4+1024]
  00226	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00229	c1 e9 08	 shr	 ecx, 8
  0022c	0f b6 d1	 movzx	 edx, cl
  0022f	03 04 95 00 08
	00 00		 add	 eax, DWORD PTR _S[edx*4+2048]
  00236	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  0023a	33 04 8d 00 0c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+3072]
  00241	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  00244	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 633  : 	F1(r, l,  9, 16);

  00247	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  0024a	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0024d	50		 push	 eax
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  00251	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00254	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  00257	52		 push	 edx
  00258	e8 00 00 00 00	 call	 _rotlVariable@8
  0025d	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00260	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00263	c1 e8 18	 shr	 eax, 24			; 00000018H
  00266	0f b6 c8	 movzx	 ecx, al
  00269	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0026c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0026f	0f b6 c2	 movzx	 eax, dl
  00272	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00279	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  00280	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00283	c1 ea 08	 shr	 edx, 8
  00286	0f b6 c2	 movzx	 eax, dl
  00289	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  00290	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  00294	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  0029b	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  0029e	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 634  : 	F3(l, r,  8, 16);

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  002a4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002a7	51		 push	 ecx
  002a8	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  002ab	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002ae	2b 45 f4	 sub	 eax, DWORD PTR _r$[ebp]
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 _rotlVariable@8
  002b7	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  002ba	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  002bd	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002c0	0f b6 d1	 movzx	 edx, cl
  002c3	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  002c6	c1 e8 10	 shr	 eax, 16			; 00000010H
  002c9	0f b6 c8	 movzx	 ecx, al
  002cc	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  002d3	03 14 8d 00 04
	00 00		 add	 edx, DWORD PTR _S[ecx*4+1024]
  002da	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  002dd	c1 e8 08	 shr	 eax, 8
  002e0	0f b6 c8	 movzx	 ecx, al
  002e3	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+2048]
  002ea	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  002ee	2b 14 85 00 0c
	00 00		 sub	 edx, DWORD PTR _S[eax*4+3072]
  002f5	33 55 f8	 xor	 edx, DWORD PTR _l$[ebp]
  002f8	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx

; 635  : 	F2(r, l,  7, 16);

  002fb	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  002fe	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00301	52		 push	 edx
  00302	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00305	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00308	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  0030b	51		 push	 ecx
  0030c	e8 00 00 00 00	 call	 _rotlVariable@8
  00311	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00314	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00317	c1 ea 18	 shr	 edx, 24			; 00000018H
  0031a	0f b6 c2	 movzx	 eax, dl
  0031d	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00320	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00323	0f b6 d1	 movzx	 edx, cl
  00326	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0032d	2b 04 95 00 04
	00 00		 sub	 eax, DWORD PTR _S[edx*4+1024]
  00334	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00337	c1 e9 08	 shr	 ecx, 8
  0033a	0f b6 d1	 movzx	 edx, cl
  0033d	03 04 95 00 08
	00 00		 add	 eax, DWORD PTR _S[edx*4+2048]
  00344	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00348	33 04 8d 00 0c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+3072]
  0034f	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  00352	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 636  : 	F1(l, r,  6, 16);

  00355	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00358	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0035b	50		 push	 eax
  0035c	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0035f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00362	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00365	52		 push	 edx
  00366	e8 00 00 00 00	 call	 _rotlVariable@8
  0036b	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0036e	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  00371	c1 e8 18	 shr	 eax, 24			; 00000018H
  00374	0f b6 c8	 movzx	 ecx, al
  00377	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0037a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0037d	0f b6 c2	 movzx	 eax, dl
  00380	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00387	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  0038e	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00391	c1 ea 08	 shr	 edx, 8
  00394	0f b6 c2	 movzx	 eax, dl
  00397	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  0039e	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  003a2	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  003a9	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  003ac	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 637  : 	F3(r, l,  5, 16);

  003af	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  003b2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  003b5	51		 push	 ecx
  003b6	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  003b9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003bc	2b 45 f8	 sub	 eax, DWORD PTR _l$[ebp]
  003bf	50		 push	 eax
  003c0	e8 00 00 00 00	 call	 _rotlVariable@8
  003c5	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  003c8	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  003cb	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003ce	0f b6 d1	 movzx	 edx, cl
  003d1	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  003d4	c1 e8 10	 shr	 eax, 16			; 00000010H
  003d7	0f b6 c8	 movzx	 ecx, al
  003da	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  003e1	03 14 8d 00 04
	00 00		 add	 edx, DWORD PTR _S[ecx*4+1024]
  003e8	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  003eb	c1 e8 08	 shr	 eax, 8
  003ee	0f b6 c8	 movzx	 ecx, al
  003f1	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+2048]
  003f8	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  003fc	2b 14 85 00 0c
	00 00		 sub	 edx, DWORD PTR _S[eax*4+3072]
  00403	33 55 f4	 xor	 edx, DWORD PTR _r$[ebp]
  00406	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx

; 638  : 	F2(l, r,  4, 16);

  00409	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0040c	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0040f	52		 push	 edx
  00410	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00413	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00416	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  00419	51		 push	 ecx
  0041a	e8 00 00 00 00	 call	 _rotlVariable@8
  0041f	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00422	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00425	c1 ea 18	 shr	 edx, 24			; 00000018H
  00428	0f b6 c2	 movzx	 eax, dl
  0042b	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0042e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00431	0f b6 d1	 movzx	 edx, cl
  00434	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  0043b	2b 04 95 00 04
	00 00		 sub	 eax, DWORD PTR _S[edx*4+1024]
  00442	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00445	c1 e9 08	 shr	 ecx, 8
  00448	0f b6 d1	 movzx	 edx, cl
  0044b	03 04 95 00 08
	00 00		 add	 eax, DWORD PTR _S[edx*4+2048]
  00452	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00456	33 04 8d 00 0c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+3072]
  0045d	33 45 f8	 xor	 eax, DWORD PTR _l$[ebp]
  00460	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 639  : 	F1(r, l,  3, 16);

  00463	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00466	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00469	50		 push	 eax
  0046a	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0046d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00470	03 55 f8	 add	 edx, DWORD PTR _l$[ebp]
  00473	52		 push	 edx
  00474	e8 00 00 00 00	 call	 _rotlVariable@8
  00479	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  0047c	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  0047f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00482	0f b6 c8	 movzx	 ecx, al
  00485	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00488	c1 ea 10	 shr	 edx, 16			; 00000010H
  0048b	0f b6 c2	 movzx	 eax, dl
  0048e	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  00495	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  0049c	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  0049f	c1 ea 08	 shr	 edx, 8
  004a2	0f b6 c2	 movzx	 eax, dl
  004a5	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  004ac	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  004b0	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  004b7	33 4d f4	 xor	 ecx, DWORD PTR _r$[ebp]
  004ba	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 640  : 	F3(l, r,  2, 16);

  004bd	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  004c0	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  004c3	51		 push	 ecx
  004c4	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  004c7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004ca	2b 45 f4	 sub	 eax, DWORD PTR _r$[ebp]
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 _rotlVariable@8
  004d3	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  004d6	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  004d9	c1 e9 18	 shr	 ecx, 24			; 00000018H
  004dc	0f b6 d1	 movzx	 edx, cl
  004df	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  004e2	c1 e8 10	 shr	 eax, 16			; 00000010H
  004e5	0f b6 c8	 movzx	 ecx, al
  004e8	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _S[edx*4]
  004ef	03 14 8d 00 04
	00 00		 add	 edx, DWORD PTR _S[ecx*4+1024]
  004f6	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  004f9	c1 e8 08	 shr	 eax, 8
  004fc	0f b6 c8	 movzx	 ecx, al
  004ff	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+2048]
  00506	0f b6 45 f0	 movzx	 eax, BYTE PTR _t$[ebp]
  0050a	2b 14 85 00 0c
	00 00		 sub	 edx, DWORD PTR _S[eax*4+3072]
  00511	33 55 f8	 xor	 edx, DWORD PTR _l$[ebp]
  00514	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx

; 641  : 	F2(r, l,  1, 16);

  00517	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0051a	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0051d	52		 push	 edx
  0051e	8b 45 fc	 mov	 eax, DWORD PTR _K$[ebp]
  00521	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00524	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  00527	51		 push	 ecx
  00528	e8 00 00 00 00	 call	 _rotlVariable@8
  0052d	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00530	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00533	c1 ea 18	 shr	 edx, 24			; 00000018H
  00536	0f b6 c2	 movzx	 eax, dl
  00539	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  0053c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0053f	0f b6 d1	 movzx	 edx, cl
  00542	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _S[eax*4]
  00549	2b 04 95 00 04
	00 00		 sub	 eax, DWORD PTR _S[edx*4+1024]
  00550	8b 4d f0	 mov	 ecx, DWORD PTR _t$[ebp]
  00553	c1 e9 08	 shr	 ecx, 8
  00556	0f b6 d1	 movzx	 edx, cl
  00559	03 04 95 00 08
	00 00		 add	 eax, DWORD PTR _S[edx*4+2048]
  00560	0f b6 4d f0	 movzx	 ecx, BYTE PTR _t$[ebp]
  00564	33 04 8d 00 0c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+3072]
  0056b	33 45 f4	 xor	 eax, DWORD PTR _r$[ebp]
  0056e	89 45 f4	 mov	 DWORD PTR _r$[ebp], eax

; 642  : 	F1(l, r,  0, 16);

  00571	8b 55 fc	 mov	 edx, DWORD PTR _K$[ebp]
  00574	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00577	50		 push	 eax
  00578	8b 4d fc	 mov	 ecx, DWORD PTR _K$[ebp]
  0057b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0057d	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00580	52		 push	 edx
  00581	e8 00 00 00 00	 call	 _rotlVariable@8
  00586	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax
  00589	8b 45 f0	 mov	 eax, DWORD PTR _t$[ebp]
  0058c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0058f	0f b6 c8	 movzx	 ecx, al
  00592	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  00595	c1 ea 10	 shr	 edx, 16			; 00000010H
  00598	0f b6 c2	 movzx	 eax, dl
  0059b	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4]
  005a2	33 0c 85 00 04
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+1024]
  005a9	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  005ac	c1 ea 08	 shr	 edx, 8
  005af	0f b6 c2	 movzx	 eax, dl
  005b2	2b 0c 85 00 08
	00 00		 sub	 ecx, DWORD PTR _S[eax*4+2048]
  005b9	0f b6 55 f0	 movzx	 edx, BYTE PTR _t$[ebp]
  005bd	03 0c 95 00 0c
	00 00		 add	 ecx, DWORD PTR _S[edx*4+3072]
  005c4	33 4d f8	 xor	 ecx, DWORD PTR _l$[ebp]
  005c7	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 643  : 	/* Put l,r into outblock */
; 644  : 	((word32 *)outBlock)[0] = BE32 (l);

  005ca	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 _MirrorBytes32@4
  005d3	8b 4d 0c	 mov	 ecx, DWORD PTR _outBlock$[ebp]
  005d6	89 01		 mov	 DWORD PTR [ecx], eax

; 645  : 	((word32 *)outBlock)[1] = BE32 (r);

  005d8	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  005db	52		 push	 edx
  005dc	e8 00 00 00 00	 call	 _MirrorBytes32@4
  005e1	8b 4d 0c	 mov	 ecx, DWORD PTR _outBlock$[ebp]
  005e4	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 646  : 	/* Wipe clean */
; 647  : 	t = l = r = 0;

  005e7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  005ee	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  005f1	89 55 f8	 mov	 DWORD PTR _l$[ebp], edx
  005f4	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  005f7	89 45 f0	 mov	 DWORD PTR _t$[ebp], eax

; 648  : }

  005fa	8b e5		 mov	 esp, ebp
  005fc	5d		 pop	 ebp
  005fd	c2 0c 00	 ret	 12			; 0000000cH
_Cast5Decrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_Cast5SetKey@12
; Function compile flags: /Odtp
;	COMDAT _Cast5SetKey@12
_TEXT	SEGMENT
_X$ = -40						; size = 16
_K$ = -24						; size = 4
_i$ = -20						; size = 4
_Z$ = -16						; size = 16
_key$ = 8						; size = 4
_keylength$ = 12					; size = 4
_userKey$ = 16						; size = 4
_Cast5SetKey@12 PROC					; COMDAT

; 651  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 28	 sub	 esp, 40			; 00000028H

; 652  : 	unsigned int i;
; 653  : 	word32 *K = key->K;

  00008	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000b	89 45 e8	 mov	 DWORD PTR _K$[ebp], eax

; 654  : 	word32 X[4], Z[4];
; 655  : 
; 656  : 	X[0] = BE32 (((word32 *)userKey)[0]);

  0000e	8b 4d 10	 mov	 ecx, DWORD PTR _userKey$[ebp]
  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00019	89 45 d8	 mov	 DWORD PTR _X$[ebp], eax

; 657  : 	X[1] = BE32 (((word32 *)userKey)[1]);

  0001c	8b 45 10	 mov	 eax, DWORD PTR _userKey$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00028	89 45 dc	 mov	 DWORD PTR _X$[ebp+4], eax

; 658  : 	X[2] = BE32 (((word32 *)userKey)[2]);

  0002b	8b 55 10	 mov	 edx, DWORD PTR _userKey$[ebp]
  0002e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00037	89 45 e0	 mov	 DWORD PTR _X$[ebp+8], eax

; 659  : 	X[3] = BE32 (((word32 *)userKey)[3]);

  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _userKey$[ebp]
  0003d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00046	89 45 e4	 mov	 DWORD PTR _X$[ebp+12], eax

; 660  : 
; 661  : #define x(i) GETBYTE(X[i/4], 3-i%4)
; 662  : #define z(i) GETBYTE(Z[i/4], 3-i%4)
; 663  : 
; 664  : 	for (i=0; i<=16; i+=16)

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN6@Cast5SetKe
$LN5@Cast5SetKe:
  00052	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00055	83 c0 10	 add	 eax, 16			; 00000010H
  00058	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN6@Cast5SetKe:
  0005b	83 7d ec 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0005f	0f 87 3c 0a 00
	00		 ja	 $LN4@Cast5SetKe

; 665  : 	{
; 666  : 		// this part is copied directly from RFC 2144 (with some search and replace) by Wei Dai
; 667  : 		Z[0] = X[0] ^ S[4][x(0xD)] ^ S[5][x(0xF)] ^ S[6][x(0xC)] ^ S[7][x(0xE)] ^ S[6][x(0x8)];

  00065	8b 4d e4	 mov	 ecx, DWORD PTR _X$[ebp+12]
  00068	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0006b	0f b6 d1	 movzx	 edx, cl
  0006e	8b 45 d8	 mov	 eax, DWORD PTR _X$[ebp]
  00071	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  00078	0f b6 4d e4	 movzx	 ecx, BYTE PTR _X$[ebp+12]
  0007c	33 04 8d 00 14
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+5120]
  00083	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  00086	c1 ea 18	 shr	 edx, 24			; 00000018H
  00089	0f b6 ca	 movzx	 ecx, dl
  0008c	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  00093	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  00096	c1 ea 08	 shr	 edx, 8
  00099	0f b6 ca	 movzx	 ecx, dl
  0009c	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  000a3	8b 55 e0	 mov	 edx, DWORD PTR _X$[ebp+8]
  000a6	c1 ea 18	 shr	 edx, 24			; 00000018H
  000a9	0f b6 ca	 movzx	 ecx, dl
  000ac	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  000b3	89 45 f0	 mov	 DWORD PTR _Z$[ebp], eax

; 668  : 		Z[1] = X[2] ^ S[4][z(0x0)] ^ S[5][z(0x2)] ^ S[6][z(0x1)] ^ S[7][z(0x3)] ^ S[7][x(0xA)];

  000b6	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  000b9	c1 ea 18	 shr	 edx, 24			; 00000018H
  000bc	0f b6 c2	 movzx	 eax, dl
  000bf	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  000c2	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  000c9	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  000cc	c1 ea 08	 shr	 edx, 8
  000cf	0f b6 c2	 movzx	 eax, dl
  000d2	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  000d9	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  000dc	c1 ea 10	 shr	 edx, 16			; 00000010H
  000df	0f b6 c2	 movzx	 eax, dl
  000e2	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  000e9	0f b6 55 f0	 movzx	 edx, BYTE PTR _Z$[ebp]
  000ed	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  000f4	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  000f7	c1 e8 08	 shr	 eax, 8
  000fa	0f b6 d0	 movzx	 edx, al
  000fd	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  00104	89 4d f4	 mov	 DWORD PTR _Z$[ebp+4], ecx

; 669  : 		Z[2] = X[3] ^ S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[4][x(0x9)];

  00107	0f b6 45 f4	 movzx	 eax, BYTE PTR _Z$[ebp+4]
  0010b	8b 4d e4	 mov	 ecx, DWORD PTR _X$[ebp+12]
  0010e	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00115	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00118	c1 ea 08	 shr	 edx, 8
  0011b	0f b6 c2	 movzx	 eax, dl
  0011e	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00125	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00128	c1 ea 10	 shr	 edx, 16			; 00000010H
  0012b	0f b6 c2	 movzx	 eax, dl
  0012e	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  00135	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00138	c1 ea 18	 shr	 edx, 24			; 00000018H
  0013b	0f b6 c2	 movzx	 eax, dl
  0013e	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+7168]
  00145	8b 55 e0	 mov	 edx, DWORD PTR _X$[ebp+8]
  00148	c1 ea 10	 shr	 edx, 16			; 00000010H
  0014b	0f b6 c2	 movzx	 eax, dl
  0014e	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00155	89 4d f8	 mov	 DWORD PTR _Z$[ebp+8], ecx

; 670  : 		Z[3] = X[1] ^ S[4][z(0xA)] ^ S[5][z(0x9)] ^ S[6][z(0xB)] ^ S[7][z(0x8)] ^ S[5][x(0xB)];

  00158	8b 4d f8	 mov	 ecx, DWORD PTR _Z$[ebp+8]
  0015b	c1 e9 08	 shr	 ecx, 8
  0015e	0f b6 d1	 movzx	 edx, cl
  00161	8b 45 dc	 mov	 eax, DWORD PTR _X$[ebp+4]
  00164	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  0016b	8b 4d f8	 mov	 ecx, DWORD PTR _Z$[ebp+8]
  0016e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00171	0f b6 d1	 movzx	 edx, cl
  00174	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  0017b	0f b6 4d f8	 movzx	 ecx, BYTE PTR _Z$[ebp+8]
  0017f	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  00186	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00189	c1 ea 18	 shr	 edx, 24			; 00000018H
  0018c	0f b6 ca	 movzx	 ecx, dl
  0018f	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  00196	0f b6 55 e0	 movzx	 edx, BYTE PTR _X$[ebp+8]
  0019a	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  001a1	89 45 fc	 mov	 DWORD PTR _Z$[ebp+12], eax

; 671  : 		K[i+0] = S[4][z(0x8)] ^ S[5][z(0x9)] ^ S[6][z(0x7)] ^ S[7][z(0x6)] ^ S[4][z(0x2)];

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  001a7	c1 e8 18	 shr	 eax, 24			; 00000018H
  001aa	0f b6 c8	 movzx	 ecx, al
  001ad	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  001b0	c1 ea 10	 shr	 edx, 16			; 00000010H
  001b3	0f b6 c2	 movzx	 eax, dl
  001b6	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  001bd	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  001c4	0f b6 55 f4	 movzx	 edx, BYTE PTR _Z$[ebp+4]
  001c8	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  001cf	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  001d2	c1 e8 08	 shr	 eax, 8
  001d5	0f b6 d0	 movzx	 edx, al
  001d8	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  001df	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  001e2	c1 e8 08	 shr	 eax, 8
  001e5	0f b6 d0	 movzx	 edx, al
  001e8	33 0c 95 00 10
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+4096]
  001ef	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001f2	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  001f5	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 672  : 		K[i+1] = S[4][z(0xA)] ^ S[5][z(0xB)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[5][z(0x6)];

  001f8	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  001fb	c1 e8 08	 shr	 eax, 8
  001fe	0f b6 c8	 movzx	 ecx, al
  00201	0f b6 55 f8	 movzx	 edx, BYTE PTR _Z$[ebp+8]
  00205	8b 04 8d 00 10
	00 00		 mov	 eax, DWORD PTR _S[ecx*4+4096]
  0020c	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  00213	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00216	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00219	0f b6 d1	 movzx	 edx, cl
  0021c	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  00223	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00226	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00229	0f b6 d1	 movzx	 edx, cl
  0022c	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00236	c1 e9 08	 shr	 ecx, 8
  00239	0f b6 d1	 movzx	 edx, cl
  0023c	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  00243	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00246	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  00249	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 673  : 		K[i+2] = S[4][z(0xC)] ^ S[5][z(0xD)] ^ S[6][z(0x3)] ^ S[7][z(0x2)] ^ S[6][z(0x9)];

  0024d	8b 45 fc	 mov	 eax, DWORD PTR _Z$[ebp+12]
  00250	c1 e8 18	 shr	 eax, 24			; 00000018H
  00253	0f b6 c8	 movzx	 ecx, al
  00256	8b 55 fc	 mov	 edx, DWORD PTR _Z$[ebp+12]
  00259	c1 ea 10	 shr	 edx, 16			; 00000010H
  0025c	0f b6 c2	 movzx	 eax, dl
  0025f	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  00266	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  0026d	0f b6 55 f0	 movzx	 edx, BYTE PTR _Z$[ebp]
  00271	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  00278	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  0027b	c1 e8 08	 shr	 eax, 8
  0027e	0f b6 d0	 movzx	 edx, al
  00281	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  00288	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  0028b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0028e	0f b6 d0	 movzx	 edx, al
  00291	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  00298	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0029b	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  0029e	89 4c 82 08	 mov	 DWORD PTR [edx+eax*4+8], ecx

; 674  : 		K[i+3] = S[4][z(0xE)] ^ S[5][z(0xF)] ^ S[6][z(0x1)] ^ S[7][z(0x0)] ^ S[7][z(0xC)];

  002a2	8b 45 fc	 mov	 eax, DWORD PTR _Z$[ebp+12]
  002a5	c1 e8 08	 shr	 eax, 8
  002a8	0f b6 c8	 movzx	 ecx, al
  002ab	0f b6 55 fc	 movzx	 edx, BYTE PTR _Z$[ebp+12]
  002af	8b 04 8d 00 10
	00 00		 mov	 eax, DWORD PTR _S[ecx*4+4096]
  002b6	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  002bd	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  002c0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002c3	0f b6 d1	 movzx	 edx, cl
  002c6	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  002cd	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  002d0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002d3	0f b6 d1	 movzx	 edx, cl
  002d6	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  002dd	8b 4d fc	 mov	 ecx, DWORD PTR _Z$[ebp+12]
  002e0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002e3	0f b6 d1	 movzx	 edx, cl
  002e6	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  002ed	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  002f0	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  002f3	89 44 8a 0c	 mov	 DWORD PTR [edx+ecx*4+12], eax

; 675  : 		X[0] = Z[2] ^ S[4][z(0x5)] ^ S[5][z(0x7)] ^ S[6][z(0x4)] ^ S[7][z(0x6)] ^ S[6][z(0x0)];

  002f7	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  002fa	c1 e8 10	 shr	 eax, 16			; 00000010H
  002fd	0f b6 c8	 movzx	 ecx, al
  00300	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00303	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  0030a	0f b6 45 f4	 movzx	 eax, BYTE PTR _Z$[ebp+4]
  0030e	33 14 85 00 14
	00 00		 xor	 edx, DWORD PTR _S[eax*4+5120]
  00315	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00318	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0031b	0f b6 c1	 movzx	 eax, cl
  0031e	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _S[eax*4+6144]
  00325	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00328	c1 e9 08	 shr	 ecx, 8
  0032b	0f b6 c1	 movzx	 eax, cl
  0032e	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  00335	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  00338	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0033b	0f b6 c1	 movzx	 eax, cl
  0033e	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _S[eax*4+6144]
  00345	89 55 d8	 mov	 DWORD PTR _X$[ebp], edx

; 676  : 		X[1] = Z[0] ^ S[4][x(0x0)] ^ S[5][x(0x2)] ^ S[6][x(0x1)] ^ S[7][x(0x3)] ^ S[7][z(0x2)];

  00348	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  0034b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0034e	0f b6 d1	 movzx	 edx, cl
  00351	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  00354	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  0035b	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  0035e	c1 e9 08	 shr	 ecx, 8
  00361	0f b6 d1	 movzx	 edx, cl
  00364	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  0036b	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  0036e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00371	0f b6 d1	 movzx	 edx, cl
  00374	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  0037b	0f b6 4d d8	 movzx	 ecx, BYTE PTR _X$[ebp]
  0037f	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  00386	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  00389	c1 ea 08	 shr	 edx, 8
  0038c	0f b6 ca	 movzx	 ecx, dl
  0038f	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  00396	89 45 dc	 mov	 DWORD PTR _X$[ebp+4], eax

; 677  : 		X[2] = Z[1] ^ S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[4][z(0x1)];

  00399	0f b6 55 dc	 movzx	 edx, BYTE PTR _X$[ebp+4]
  0039d	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  003a0	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  003a7	8b 4d dc	 mov	 ecx, DWORD PTR _X$[ebp+4]
  003aa	c1 e9 08	 shr	 ecx, 8
  003ad	0f b6 d1	 movzx	 edx, cl
  003b0	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  003b7	8b 4d dc	 mov	 ecx, DWORD PTR _X$[ebp+4]
  003ba	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003bd	0f b6 d1	 movzx	 edx, cl
  003c0	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  003c7	8b 4d dc	 mov	 ecx, DWORD PTR _X$[ebp+4]
  003ca	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003cd	0f b6 d1	 movzx	 edx, cl
  003d0	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  003d7	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  003da	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003dd	0f b6 d1	 movzx	 edx, cl
  003e0	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  003e7	89 45 e0	 mov	 DWORD PTR _X$[ebp+8], eax

; 678  : 		X[3] = Z[3] ^ S[4][x(0xA)] ^ S[5][x(0x9)] ^ S[6][x(0xB)] ^ S[7][x(0x8)] ^ S[5][z(0x3)];

  003ea	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  003ed	c1 e8 08	 shr	 eax, 8
  003f0	0f b6 c8	 movzx	 ecx, al
  003f3	8b 55 fc	 mov	 edx, DWORD PTR _Z$[ebp+12]
  003f6	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  003fd	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00400	c1 e8 10	 shr	 eax, 16			; 00000010H
  00403	0f b6 c8	 movzx	 ecx, al
  00406	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  0040d	0f b6 45 e0	 movzx	 eax, BYTE PTR _X$[ebp+8]
  00411	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _S[eax*4+6144]
  00418	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  0041b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0041e	0f b6 c1	 movzx	 eax, cl
  00421	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  00428	0f b6 4d f0	 movzx	 ecx, BYTE PTR _Z$[ebp]
  0042c	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  00433	89 55 e4	 mov	 DWORD PTR _X$[ebp+12], edx

; 679  : 		K[i+4] = S[4][x(0x3)] ^ S[5][x(0x2)] ^ S[6][x(0xC)] ^ S[7][x(0xD)] ^ S[4][x(0x8)];

  00436	0f b6 55 d8	 movzx	 edx, BYTE PTR _X$[ebp]
  0043a	8b 45 d8	 mov	 eax, DWORD PTR _X$[ebp]
  0043d	c1 e8 08	 shr	 eax, 8
  00440	0f b6 c8	 movzx	 ecx, al
  00443	8b 14 95 00 10
	00 00		 mov	 edx, DWORD PTR _S[edx*4+4096]
  0044a	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  00451	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  00454	c1 e8 18	 shr	 eax, 24			; 00000018H
  00457	0f b6 c8	 movzx	 ecx, al
  0045a	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  00461	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  00464	c1 e8 10	 shr	 eax, 16			; 00000010H
  00467	0f b6 c8	 movzx	 ecx, al
  0046a	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+7168]
  00471	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00474	c1 e8 18	 shr	 eax, 24			; 00000018H
  00477	0f b6 c8	 movzx	 ecx, al
  0047a	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  00481	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00484	8b 4d e8	 mov	 ecx, DWORD PTR _K$[ebp]
  00487	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx

; 680  : 		K[i+5] = S[4][x(0x1)] ^ S[5][x(0x0)] ^ S[6][x(0xE)] ^ S[7][x(0xF)] ^ S[5][x(0xD)];

  0048b	8b 55 d8	 mov	 edx, DWORD PTR _X$[ebp]
  0048e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00491	0f b6 c2	 movzx	 eax, dl
  00494	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  00497	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0049a	0f b6 d1	 movzx	 edx, cl
  0049d	8b 04 85 00 10
	00 00		 mov	 eax, DWORD PTR _S[eax*4+4096]
  004a4	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  004ab	8b 4d e4	 mov	 ecx, DWORD PTR _X$[ebp+12]
  004ae	c1 e9 08	 shr	 ecx, 8
  004b1	0f b6 d1	 movzx	 edx, cl
  004b4	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  004bb	0f b6 4d e4	 movzx	 ecx, BYTE PTR _X$[ebp+12]
  004bf	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  004c6	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  004c9	c1 ea 10	 shr	 edx, 16			; 00000010H
  004cc	0f b6 ca	 movzx	 ecx, dl
  004cf	33 04 8d 00 14
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+5120]
  004d6	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  004d9	8b 4d e8	 mov	 ecx, DWORD PTR _K$[ebp]
  004dc	89 44 91 14	 mov	 DWORD PTR [ecx+edx*4+20], eax

; 681  : 		K[i+6] = S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x8)] ^ S[7][x(0x9)] ^ S[6][x(0x3)];

  004e0	0f b6 55 dc	 movzx	 edx, BYTE PTR _X$[ebp+4]
  004e4	8b 45 dc	 mov	 eax, DWORD PTR _X$[ebp+4]
  004e7	c1 e8 08	 shr	 eax, 8
  004ea	0f b6 c8	 movzx	 ecx, al
  004ed	8b 14 95 00 10
	00 00		 mov	 edx, DWORD PTR _S[edx*4+4096]
  004f4	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  004fb	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  004fe	c1 e8 18	 shr	 eax, 24			; 00000018H
  00501	0f b6 c8	 movzx	 ecx, al
  00504	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  0050b	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  0050e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00511	0f b6 c8	 movzx	 ecx, al
  00514	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+7168]
  0051b	0f b6 45 d8	 movzx	 eax, BYTE PTR _X$[ebp]
  0051f	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _S[eax*4+6144]
  00526	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00529	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  0052c	89 54 88 18	 mov	 DWORD PTR [eax+ecx*4+24], edx

; 682  : 		K[i+7] = S[4][x(0x5)] ^ S[5][x(0x4)] ^ S[6][x(0xA)] ^ S[7][x(0xB)] ^ S[7][x(0x7)];

  00530	8b 4d dc	 mov	 ecx, DWORD PTR _X$[ebp+4]
  00533	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00536	0f b6 d1	 movzx	 edx, cl
  00539	8b 45 dc	 mov	 eax, DWORD PTR _X$[ebp+4]
  0053c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0053f	0f b6 c8	 movzx	 ecx, al
  00542	8b 14 95 00 10
	00 00		 mov	 edx, DWORD PTR _S[edx*4+4096]
  00549	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  00550	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00553	c1 e8 08	 shr	 eax, 8
  00556	0f b6 c8	 movzx	 ecx, al
  00559	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  00560	0f b6 45 e0	 movzx	 eax, BYTE PTR _X$[ebp+8]
  00564	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  0056b	0f b6 4d dc	 movzx	 ecx, BYTE PTR _X$[ebp+4]
  0056f	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+7168]
  00576	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00579	8b 4d e8	 mov	 ecx, DWORD PTR _K$[ebp]
  0057c	89 54 81 1c	 mov	 DWORD PTR [ecx+eax*4+28], edx

; 683  : 		Z[0] = X[0] ^ S[4][x(0xD)] ^ S[5][x(0xF)] ^ S[6][x(0xC)] ^ S[7][x(0xE)] ^ S[6][x(0x8)];

  00580	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  00583	c1 ea 10	 shr	 edx, 16			; 00000010H
  00586	0f b6 c2	 movzx	 eax, dl
  00589	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  0058c	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00593	0f b6 55 e4	 movzx	 edx, BYTE PTR _X$[ebp+12]
  00597	33 0c 95 00 14
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+5120]
  0059e	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  005a1	c1 e8 18	 shr	 eax, 24			; 00000018H
  005a4	0f b6 d0	 movzx	 edx, al
  005a7	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  005ae	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  005b1	c1 e8 08	 shr	 eax, 8
  005b4	0f b6 d0	 movzx	 edx, al
  005b7	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  005be	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  005c1	c1 e8 18	 shr	 eax, 24			; 00000018H
  005c4	0f b6 d0	 movzx	 edx, al
  005c7	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  005ce	89 4d f0	 mov	 DWORD PTR _Z$[ebp], ecx

; 684  : 		Z[1] = X[2] ^ S[4][z(0x0)] ^ S[5][z(0x2)] ^ S[6][z(0x1)] ^ S[7][z(0x3)] ^ S[7][x(0xA)];

  005d1	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  005d4	c1 e8 18	 shr	 eax, 24			; 00000018H
  005d7	0f b6 c8	 movzx	 ecx, al
  005da	8b 55 e0	 mov	 edx, DWORD PTR _X$[ebp+8]
  005dd	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  005e4	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  005e7	c1 e8 08	 shr	 eax, 8
  005ea	0f b6 c8	 movzx	 ecx, al
  005ed	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  005f4	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  005f7	c1 e8 10	 shr	 eax, 16			; 00000010H
  005fa	0f b6 c8	 movzx	 ecx, al
  005fd	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  00604	0f b6 45 f0	 movzx	 eax, BYTE PTR _Z$[ebp]
  00608	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  0060f	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  00612	c1 e9 08	 shr	 ecx, 8
  00615	0f b6 c1	 movzx	 eax, cl
  00618	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  0061f	89 55 f4	 mov	 DWORD PTR _Z$[ebp+4], edx

; 685  : 		Z[2] = X[3] ^ S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x5)] ^ S[7][z(0x4)] ^ S[4][x(0x9)];

  00622	0f b6 4d f4	 movzx	 ecx, BYTE PTR _Z$[ebp+4]
  00626	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  00629	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  00630	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  00633	c1 e8 08	 shr	 eax, 8
  00636	0f b6 c8	 movzx	 ecx, al
  00639	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  00640	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  00643	c1 e8 10	 shr	 eax, 16			; 00000010H
  00646	0f b6 c8	 movzx	 ecx, al
  00649	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  00650	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  00653	c1 e8 18	 shr	 eax, 24			; 00000018H
  00656	0f b6 c8	 movzx	 ecx, al
  00659	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+7168]
  00660	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00663	c1 e8 10	 shr	 eax, 16			; 00000010H
  00666	0f b6 c8	 movzx	 ecx, al
  00669	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+4096]
  00670	89 55 f8	 mov	 DWORD PTR _Z$[ebp+8], edx

; 686  : 		Z[3] = X[1] ^ S[4][z(0xA)] ^ S[5][z(0x9)] ^ S[6][z(0xB)] ^ S[7][z(0x8)] ^ S[5][x(0xB)];

  00673	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00676	c1 ea 08	 shr	 edx, 8
  00679	0f b6 c2	 movzx	 eax, dl
  0067c	8b 4d dc	 mov	 ecx, DWORD PTR _X$[ebp+4]
  0067f	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00686	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00689	c1 ea 10	 shr	 edx, 16			; 00000010H
  0068c	0f b6 c2	 movzx	 eax, dl
  0068f	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00696	0f b6 55 f8	 movzx	 edx, BYTE PTR _Z$[ebp+8]
  0069a	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  006a1	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  006a4	c1 e8 18	 shr	 eax, 24			; 00000018H
  006a7	0f b6 d0	 movzx	 edx, al
  006aa	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  006b1	0f b6 45 e0	 movzx	 eax, BYTE PTR _X$[ebp+8]
  006b5	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  006bc	89 4d fc	 mov	 DWORD PTR _Z$[ebp+12], ecx

; 687  : 		K[i+8] = S[4][z(0x3)] ^ S[5][z(0x2)] ^ S[6][z(0xC)] ^ S[7][z(0xD)] ^ S[4][z(0x9)];

  006bf	0f b6 4d f0	 movzx	 ecx, BYTE PTR _Z$[ebp]
  006c3	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  006c6	c1 ea 08	 shr	 edx, 8
  006c9	0f b6 c2	 movzx	 eax, dl
  006cc	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  006d3	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  006da	8b 55 fc	 mov	 edx, DWORD PTR _Z$[ebp+12]
  006dd	c1 ea 18	 shr	 edx, 24			; 00000018H
  006e0	0f b6 c2	 movzx	 eax, dl
  006e3	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  006ea	8b 55 fc	 mov	 edx, DWORD PTR _Z$[ebp+12]
  006ed	c1 ea 10	 shr	 edx, 16			; 00000010H
  006f0	0f b6 c2	 movzx	 eax, dl
  006f3	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+7168]
  006fa	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  006fd	c1 ea 10	 shr	 edx, 16			; 00000010H
  00700	0f b6 c2	 movzx	 eax, dl
  00703	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  0070a	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0070d	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  00710	89 4c 90 20	 mov	 DWORD PTR [eax+edx*4+32], ecx

; 688  : 		K[i+9] = S[4][z(0x1)] ^ S[5][z(0x0)] ^ S[6][z(0xE)] ^ S[7][z(0xF)] ^ S[5][z(0xC)];

  00714	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  00717	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0071a	0f b6 d1	 movzx	 edx, cl
  0071d	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  00720	c1 e8 18	 shr	 eax, 24			; 00000018H
  00723	0f b6 c8	 movzx	 ecx, al
  00726	8b 14 95 00 10
	00 00		 mov	 edx, DWORD PTR _S[edx*4+4096]
  0072d	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  00734	8b 45 fc	 mov	 eax, DWORD PTR _Z$[ebp+12]
  00737	c1 e8 08	 shr	 eax, 8
  0073a	0f b6 c8	 movzx	 ecx, al
  0073d	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  00744	0f b6 45 fc	 movzx	 eax, BYTE PTR _Z$[ebp+12]
  00748	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  0074f	8b 4d fc	 mov	 ecx, DWORD PTR _Z$[ebp+12]
  00752	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00755	0f b6 c1	 movzx	 eax, cl
  00758	33 14 85 00 14
	00 00		 xor	 edx, DWORD PTR _S[eax*4+5120]
  0075f	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00762	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  00765	89 54 88 24	 mov	 DWORD PTR [eax+ecx*4+36], edx

; 689  : 		K[i+10] = S[4][z(0x7)] ^ S[5][z(0x6)] ^ S[6][z(0x8)] ^ S[7][z(0x9)] ^ S[6][z(0x2)];

  00769	0f b6 4d f4	 movzx	 ecx, BYTE PTR _Z$[ebp+4]
  0076d	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00770	c1 ea 08	 shr	 edx, 8
  00773	0f b6 c2	 movzx	 eax, dl
  00776	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  0077d	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00784	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00787	c1 ea 18	 shr	 edx, 24			; 00000018H
  0078a	0f b6 c2	 movzx	 eax, dl
  0078d	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  00794	8b 55 f8	 mov	 edx, DWORD PTR _Z$[ebp+8]
  00797	c1 ea 10	 shr	 edx, 16			; 00000010H
  0079a	0f b6 c2	 movzx	 eax, dl
  0079d	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+7168]
  007a4	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  007a7	c1 ea 08	 shr	 edx, 8
  007aa	0f b6 c2	 movzx	 eax, dl
  007ad	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  007b4	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  007b7	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  007ba	89 4c 90 28	 mov	 DWORD PTR [eax+edx*4+40], ecx

; 690  : 		K[i+11] = S[4][z(0x5)] ^ S[5][z(0x4)] ^ S[6][z(0xA)] ^ S[7][z(0xB)] ^ S[7][z(0x6)];

  007be	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  007c1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  007c4	0f b6 d1	 movzx	 edx, cl
  007c7	8b 45 f4	 mov	 eax, DWORD PTR _Z$[ebp+4]
  007ca	c1 e8 18	 shr	 eax, 24			; 00000018H
  007cd	0f b6 c8	 movzx	 ecx, al
  007d0	8b 14 95 00 10
	00 00		 mov	 edx, DWORD PTR _S[edx*4+4096]
  007d7	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+5120]
  007de	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  007e1	c1 e8 08	 shr	 eax, 8
  007e4	0f b6 c8	 movzx	 ecx, al
  007e7	33 14 8d 00 18
	00 00		 xor	 edx, DWORD PTR _S[ecx*4+6144]
  007ee	0f b6 45 f8	 movzx	 eax, BYTE PTR _Z$[ebp+8]
  007f2	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  007f9	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  007fc	c1 e9 08	 shr	 ecx, 8
  007ff	0f b6 c1	 movzx	 eax, cl
  00802	33 14 85 00 1c
	00 00		 xor	 edx, DWORD PTR _S[eax*4+7168]
  00809	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  0080c	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  0080f	89 54 88 2c	 mov	 DWORD PTR [eax+ecx*4+44], edx

; 691  : 		X[0] = Z[2] ^ S[4][z(0x5)] ^ S[5][z(0x7)] ^ S[6][z(0x4)] ^ S[7][z(0x6)] ^ S[6][z(0x0)];

  00813	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  00816	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00819	0f b6 d1	 movzx	 edx, cl
  0081c	8b 45 f8	 mov	 eax, DWORD PTR _Z$[ebp+8]
  0081f	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  00826	0f b6 4d f4	 movzx	 ecx, BYTE PTR _Z$[ebp+4]
  0082a	33 04 8d 00 14
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+5120]
  00831	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00834	c1 ea 18	 shr	 edx, 24			; 00000018H
  00837	0f b6 ca	 movzx	 ecx, dl
  0083a	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  00841	8b 55 f4	 mov	 edx, DWORD PTR _Z$[ebp+4]
  00844	c1 ea 08	 shr	 edx, 8
  00847	0f b6 ca	 movzx	 ecx, dl
  0084a	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  00851	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  00854	c1 ea 18	 shr	 edx, 24			; 00000018H
  00857	0f b6 ca	 movzx	 ecx, dl
  0085a	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  00861	89 45 d8	 mov	 DWORD PTR _X$[ebp], eax

; 692  : 		X[1] = Z[0] ^ S[4][x(0x0)] ^ S[5][x(0x2)] ^ S[6][x(0x1)] ^ S[7][x(0x3)] ^ S[7][z(0x2)];

  00864	8b 55 d8	 mov	 edx, DWORD PTR _X$[ebp]
  00867	c1 ea 18	 shr	 edx, 24			; 00000018H
  0086a	0f b6 c2	 movzx	 eax, dl
  0086d	8b 4d f0	 mov	 ecx, DWORD PTR _Z$[ebp]
  00870	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00877	8b 55 d8	 mov	 edx, DWORD PTR _X$[ebp]
  0087a	c1 ea 08	 shr	 edx, 8
  0087d	0f b6 c2	 movzx	 eax, dl
  00880	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00887	8b 55 d8	 mov	 edx, DWORD PTR _X$[ebp]
  0088a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0088d	0f b6 c2	 movzx	 eax, dl
  00890	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  00897	0f b6 55 d8	 movzx	 edx, BYTE PTR _X$[ebp]
  0089b	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  008a2	8b 45 f0	 mov	 eax, DWORD PTR _Z$[ebp]
  008a5	c1 e8 08	 shr	 eax, 8
  008a8	0f b6 d0	 movzx	 edx, al
  008ab	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  008b2	89 4d dc	 mov	 DWORD PTR _X$[ebp+4], ecx

; 693  : 		X[2] = Z[1] ^ S[4][x(0x7)] ^ S[5][x(0x6)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[4][z(0x1)];

  008b5	0f b6 45 dc	 movzx	 eax, BYTE PTR _X$[ebp+4]
  008b9	8b 4d f4	 mov	 ecx, DWORD PTR _Z$[ebp+4]
  008bc	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  008c3	8b 55 dc	 mov	 edx, DWORD PTR _X$[ebp+4]
  008c6	c1 ea 08	 shr	 edx, 8
  008c9	0f b6 c2	 movzx	 eax, dl
  008cc	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  008d3	8b 55 dc	 mov	 edx, DWORD PTR _X$[ebp+4]
  008d6	c1 ea 10	 shr	 edx, 16			; 00000010H
  008d9	0f b6 c2	 movzx	 eax, dl
  008dc	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  008e3	8b 55 dc	 mov	 edx, DWORD PTR _X$[ebp+4]
  008e6	c1 ea 18	 shr	 edx, 24			; 00000018H
  008e9	0f b6 c2	 movzx	 eax, dl
  008ec	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+7168]
  008f3	8b 55 f0	 mov	 edx, DWORD PTR _Z$[ebp]
  008f6	c1 ea 10	 shr	 edx, 16			; 00000010H
  008f9	0f b6 c2	 movzx	 eax, dl
  008fc	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00903	89 4d e0	 mov	 DWORD PTR _X$[ebp+8], ecx

; 694  : 		X[3] = Z[3] ^ S[4][x(0xA)] ^ S[5][x(0x9)] ^ S[6][x(0xB)] ^ S[7][x(0x8)] ^ S[5][z(0x3)];

  00906	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  00909	c1 e9 08	 shr	 ecx, 8
  0090c	0f b6 d1	 movzx	 edx, cl
  0090f	8b 45 fc	 mov	 eax, DWORD PTR _Z$[ebp+12]
  00912	33 04 95 00 10
	00 00		 xor	 eax, DWORD PTR _S[edx*4+4096]
  00919	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  0091c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0091f	0f b6 d1	 movzx	 edx, cl
  00922	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  00929	0f b6 4d e0	 movzx	 ecx, BYTE PTR _X$[ebp+8]
  0092d	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+6144]
  00934	8b 55 e0	 mov	 edx, DWORD PTR _X$[ebp+8]
  00937	c1 ea 18	 shr	 edx, 24			; 00000018H
  0093a	0f b6 ca	 movzx	 ecx, dl
  0093d	33 04 8d 00 1c
	00 00		 xor	 eax, DWORD PTR _S[ecx*4+7168]
  00944	0f b6 55 f0	 movzx	 edx, BYTE PTR _Z$[ebp]
  00948	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  0094f	89 45 e4	 mov	 DWORD PTR _X$[ebp+12], eax

; 695  : 		K[i+12] = S[4][x(0x8)] ^ S[5][x(0x9)] ^ S[6][x(0x7)] ^ S[7][x(0x6)] ^ S[4][x(0x3)];

  00952	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00955	c1 e8 18	 shr	 eax, 24			; 00000018H
  00958	0f b6 c8	 movzx	 ecx, al
  0095b	8b 55 e0	 mov	 edx, DWORD PTR _X$[ebp+8]
  0095e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00961	0f b6 c2	 movzx	 eax, dl
  00964	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  0096b	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00972	0f b6 55 dc	 movzx	 edx, BYTE PTR _X$[ebp+4]
  00976	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  0097d	8b 45 dc	 mov	 eax, DWORD PTR _X$[ebp+4]
  00980	c1 e8 08	 shr	 eax, 8
  00983	0f b6 d0	 movzx	 edx, al
  00986	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  0098d	0f b6 45 d8	 movzx	 eax, BYTE PTR _X$[ebp]
  00991	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+4096]
  00998	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0099b	8b 45 e8	 mov	 eax, DWORD PTR _K$[ebp]
  0099e	89 4c 90 30	 mov	 DWORD PTR [eax+edx*4+48], ecx

; 696  : 		K[i+13] = S[4][x(0xA)] ^ S[5][x(0xB)] ^ S[6][x(0x5)] ^ S[7][x(0x4)] ^ S[5][x(0x7)];

  009a2	8b 4d e0	 mov	 ecx, DWORD PTR _X$[ebp+8]
  009a5	c1 e9 08	 shr	 ecx, 8
  009a8	0f b6 d1	 movzx	 edx, cl
  009ab	0f b6 45 e0	 movzx	 eax, BYTE PTR _X$[ebp+8]
  009af	8b 0c 95 00 10
	00 00		 mov	 ecx, DWORD PTR _S[edx*4+4096]
  009b6	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  009bd	8b 55 dc	 mov	 edx, DWORD PTR _X$[ebp+4]
  009c0	c1 ea 10	 shr	 edx, 16			; 00000010H
  009c3	0f b6 c2	 movzx	 eax, dl
  009c6	33 0c 85 00 18
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+6144]
  009cd	8b 55 dc	 mov	 edx, DWORD PTR _X$[ebp+4]
  009d0	c1 ea 18	 shr	 edx, 24			; 00000018H
  009d3	0f b6 c2	 movzx	 eax, dl
  009d6	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+7168]
  009dd	0f b6 55 dc	 movzx	 edx, BYTE PTR _X$[ebp+4]
  009e1	33 0c 95 00 14
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+5120]
  009e8	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  009eb	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  009ee	89 4c 82 34	 mov	 DWORD PTR [edx+eax*4+52], ecx

; 697  : 		K[i+14] = S[4][x(0xC)] ^ S[5][x(0xD)] ^ S[6][x(0x3)] ^ S[7][x(0x2)] ^ S[6][x(0x8)];

  009f2	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  009f5	c1 e8 18	 shr	 eax, 24			; 00000018H
  009f8	0f b6 c8	 movzx	 ecx, al
  009fb	8b 55 e4	 mov	 edx, DWORD PTR _X$[ebp+12]
  009fe	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a01	0f b6 c2	 movzx	 eax, dl
  00a04	8b 0c 8d 00 10
	00 00		 mov	 ecx, DWORD PTR _S[ecx*4+4096]
  00a0b	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _S[eax*4+5120]
  00a12	0f b6 55 d8	 movzx	 edx, BYTE PTR _X$[ebp]
  00a16	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  00a1d	8b 45 d8	 mov	 eax, DWORD PTR _X$[ebp]
  00a20	c1 e8 08	 shr	 eax, 8
  00a23	0f b6 d0	 movzx	 edx, al
  00a26	33 0c 95 00 1c
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+7168]
  00a2d	8b 45 e0	 mov	 eax, DWORD PTR _X$[ebp+8]
  00a30	c1 e8 18	 shr	 eax, 24			; 00000018H
  00a33	0f b6 d0	 movzx	 edx, al
  00a36	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _S[edx*4+6144]
  00a3d	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00a40	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  00a43	89 4c 82 38	 mov	 DWORD PTR [edx+eax*4+56], ecx

; 698  : 		K[i+15] = S[4][x(0xE)] ^ S[5][x(0xF)] ^ S[6][x(0x1)] ^ S[7][x(0x0)] ^ S[7][x(0xD)];

  00a47	8b 45 e4	 mov	 eax, DWORD PTR _X$[ebp+12]
  00a4a	c1 e8 08	 shr	 eax, 8
  00a4d	0f b6 c8	 movzx	 ecx, al
  00a50	0f b6 55 e4	 movzx	 edx, BYTE PTR _X$[ebp+12]
  00a54	8b 04 8d 00 10
	00 00		 mov	 eax, DWORD PTR _S[ecx*4+4096]
  00a5b	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _S[edx*4+5120]
  00a62	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  00a65	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a68	0f b6 d1	 movzx	 edx, cl
  00a6b	33 04 95 00 18
	00 00		 xor	 eax, DWORD PTR _S[edx*4+6144]
  00a72	8b 4d d8	 mov	 ecx, DWORD PTR _X$[ebp]
  00a75	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00a78	0f b6 d1	 movzx	 edx, cl
  00a7b	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  00a82	8b 4d e4	 mov	 ecx, DWORD PTR _X$[ebp+12]
  00a85	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a88	0f b6 d1	 movzx	 edx, cl
  00a8b	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _S[edx*4+7168]
  00a92	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00a95	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  00a98	89 44 8a 3c	 mov	 DWORD PTR [edx+ecx*4+60], eax

; 699  : 	}

  00a9c	e9 b1 f5 ff ff	 jmp	 $LN5@Cast5SetKe
$LN4@Cast5SetKe:

; 700  : 
; 701  : 	for (i=16; i<32; i++)

  00aa1	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _i$[ebp], 16	; 00000010H
  00aa8	eb 09		 jmp	 SHORT $LN3@Cast5SetKe
$LN2@Cast5SetKe:
  00aaa	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00aad	83 c0 01	 add	 eax, 1
  00ab0	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN3@Cast5SetKe:
  00ab3	83 7d ec 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00ab7	73 17		 jae	 SHORT $LN7@Cast5SetKe

; 702  : 		K[i] &= 0x1f;

  00ab9	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00abc	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  00abf	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00ac2	83 e0 1f	 and	 eax, 31			; 0000001fH
  00ac5	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00ac8	8b 55 e8	 mov	 edx, DWORD PTR _K$[ebp]
  00acb	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  00ace	eb da		 jmp	 SHORT $LN2@Cast5SetKe
$LN7@Cast5SetKe:

; 703  : }

  00ad0	8b e5		 mov	 esp, ebp
  00ad2	5d		 pop	 ebp
  00ad3	c2 0c 00	 ret	 12			; 0000000cH
_Cast5SetKey@12 ENDP
_TEXT	ENDS
END
