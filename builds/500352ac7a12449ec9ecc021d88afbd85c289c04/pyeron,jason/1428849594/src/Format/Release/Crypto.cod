; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\Crypto.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05HJMENKNE@SHA?91?$AA@			; `string'
PUBLIC	??_C@_09HLDHDDJL@Whirlpool?$AA@			; `string'
PUBLIC	??_C@_07MEOJAOJE@SHA?9512?$AA@			; `string'
PUBLIC	??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@		; `string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@		; `string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@			; `string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@			; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
_BSS	SEGMENT
_HwEncryptionDisabled DD 01H DUP (?)
?state@?1??IsAesHwCpuSupported@@9@9 DD 01H DUP (?)	; `IsAesHwCpuSupported'::`2'::state
?stateValid@?1??IsAesHwCpuSupported@@9@9 DD 01H DUP (?)	; `IsAesHwCpuSupported'::`2'::stateValid
_BSS	ENDS
;	COMDAT ??_C@_05HJMENKNE@SHA?91?$AA@
CONST	SEGMENT
??_C@_05HJMENKNE@SHA?91?$AA@ DB 'SHA-1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HLDHDDJL@Whirlpool?$AA@
CONST	SEGMENT
??_C@_09HLDHDDJL@Whirlpool?$AA@ DB 'Whirlpool', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEOJAOJE@SHA?9512?$AA@
CONST	SEGMENT
??_C@_07MEOJAOJE@SHA?9512?$AA@ DB 'SHA-512', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@
CONST	SEGMENT
??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@ DB 'RIPEMD-160', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_Ciphers DD	01H
	DD	FLAT:??_C@_03BKNEFOAH@AES?$AA@
	DD	010H
	DD	020H
	DD	01e8H
	DD	02H
	DD	FLAT:??_C@_07CCCAKGBN@Serpent?$AA@
	DD	010H
	DD	020H
	DD	0230H
	DD	03H
	DD	FLAT:??_C@_07DABDIDEC@Twofish?$AA@
	DD	010H
	DD	020H
	DD	010b4H
	DD	04H
	DD	FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@
	DD	08H
	DD	038H
	DD	01090H
	DD	05H
	DD	FLAT:??_C@_05LCFOLDPB@CAST5?$AA@
	DD	08H
	DD	010H
	DD	080H
	DD	06H
	DD	FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
	DD	08H
	DD	018H
	DD	0300H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_EncryptionAlgorithms DD 00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	01H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	03H
	DD	01H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	01H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	01H
	DD	02H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	01H
	DD	03H
	DD	02H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	04H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	05H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	06H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	04H
	DD	01H
	DD	00H
	ORG $+4
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	02H
	DD	04H
	DD	01H
	DD	00H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	ORG $+4
_Hashes	DD	01H
	DD	FLAT:??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:??_C@_07MEOJAOJE@SHA?9512?$AA@
	DD	00H
	DD	00H
	DD	03H
	DD	FLAT:??_C@_09HLDHDDJL@Whirlpool?$AA@
	DD	00H
	DD	00H
	DD	04H
	DD	FLAT:??_C@_05HJMENKNE@SHA?91?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
CONST	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@ DB 'Triple DES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@
CONST	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@ DB 'CAST5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@
CONST	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@ DB 'Blowfish', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
CONST	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	_CipherGet
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\crypto.c
;	COMDAT _CipherGet
_TEXT	SEGMENT
_id$ = 8						; size = 4
_CipherGet PROC						; COMDAT

; 316  : 	int i;
; 317  : 	for (i = 0; Ciphers[i].Id != 0; i++)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 17		 je	 SHORT $LN2@CipherGet
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _id$[esp-4]
$LL4@CipherGet:

; 318  : 		if (Ciphers[i].Id == id)

  00010	3b ca		 cmp	 ecx, edx
  00012	74 12		 je	 SHORT $LN8@CipherGet
  00014	40		 inc	 eax
  00015	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00018	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0001f	85 c9		 test	 ecx, ecx
  00021	75 ed		 jne	 SHORT $LL4@CipherGet
$LN2@CipherGet:

; 320  : 
; 321  : 	return NULL;

  00023	33 c0		 xor	 eax, eax

; 322  : }

  00025	c3		 ret	 0
$LN8@CipherGet:

; 319  : 			return &Ciphers[i];

  00026	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00029	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]

; 322  : }

  00030	c3		 ret	 0
_CipherGet ENDP
_TEXT	ENDS
PUBLIC	_CipherGetName
; Function compile flags: /Ogtpy
;	COMDAT _CipherGetName
_TEXT	SEGMENT
_cipherId$ = 8						; size = 4
_CipherGetName PROC					; COMDAT

; 326  : 	return CipherGet (cipherId) -> Name;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 17		 je	 SHORT $LN4@CipherGetN
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _cipherId$[esp-4]
$LL6@CipherGetN:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 15		 je	 SHORT $LN10@CipherGetN
  00014	40		 inc	 eax
  00015	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00018	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0001f	85 c9		 test	 ecx, ecx
  00021	75 ed		 jne	 SHORT $LL6@CipherGetN
$LN4@CipherGetN:
  00023	33 c0		 xor	 eax, eax
  00025	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 327  : }

  00028	c3		 ret	 0
$LN10@CipherGetN:

; 326  : 	return CipherGet (cipherId) -> Name;

  00029	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002c	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 327  : }

  00036	c3		 ret	 0
_CipherGetName ENDP
_TEXT	ENDS
PUBLIC	_CipherGetBlockSize
; Function compile flags: /Ogtpy
;	COMDAT _CipherGetBlockSize
_TEXT	SEGMENT
_cipherId$ = 8						; size = 4
_CipherGetBlockSize PROC				; COMDAT

; 331  : 	return CipherGet (cipherId) -> BlockSize;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 17		 je	 SHORT $LN4@CipherGetB
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _cipherId$[esp-4]
$LL6@CipherGetB:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 15		 je	 SHORT $LN10@CipherGetB
  00014	40		 inc	 eax
  00015	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00018	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0001f	85 c9		 test	 ecx, ecx
  00021	75 ed		 jne	 SHORT $LL6@CipherGetB
$LN4@CipherGetB:
  00023	33 c0		 xor	 eax, eax
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 332  : }

  00028	c3		 ret	 0
$LN10@CipherGetB:

; 331  : 	return CipherGet (cipherId) -> BlockSize;

  00029	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002c	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00033	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 332  : }

  00036	c3		 ret	 0
_CipherGetBlockSize ENDP
_TEXT	ENDS
PUBLIC	_CipherGetKeySize
; Function compile flags: /Ogtpy
;	COMDAT _CipherGetKeySize
_TEXT	SEGMENT
_cipherId$ = 8						; size = 4
_CipherGetKeySize PROC					; COMDAT

; 336  : 	return CipherGet (cipherId) -> KeySize;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 17		 je	 SHORT $LN4@CipherGetK
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _cipherId$[esp-4]
$LL6@CipherGetK:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 15		 je	 SHORT $LN10@CipherGetK
  00014	40		 inc	 eax
  00015	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00018	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0001f	85 c9		 test	 ecx, ecx
  00021	75 ed		 jne	 SHORT $LL6@CipherGetK
$LN4@CipherGetK:
  00023	33 c0		 xor	 eax, eax
  00025	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 337  : }

  00028	c3		 ret	 0
$LN10@CipherGetK:

; 336  : 	return CipherGet (cipherId) -> KeySize;

  00029	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002c	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00033	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 337  : }

  00036	c3		 ret	 0
_CipherGetKeySize ENDP
_TEXT	ENDS
PUBLIC	_CipherGetKeyScheduleSize
; Function compile flags: /Ogtpy
;	COMDAT _CipherGetKeyScheduleSize
_TEXT	SEGMENT
_cipherId$ = 8						; size = 4
_CipherGetKeyScheduleSize PROC				; COMDAT

; 341  : 	return CipherGet (cipherId) -> KeyScheduleSize;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 17		 je	 SHORT $LN4@CipherGetK@2
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _cipherId$[esp-4]
$LL6@CipherGetK@2:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 15		 je	 SHORT $LN10@CipherGetK@2
  00014	40		 inc	 eax
  00015	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00018	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0001f	85 c9		 test	 ecx, ecx
  00021	75 ed		 jne	 SHORT $LL6@CipherGetK@2
$LN4@CipherGetK@2:
  00023	33 c0		 xor	 eax, eax
  00025	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 342  : }

  00028	c3		 ret	 0
$LN10@CipherGetK@2:

; 341  : 	return CipherGet (cipherId) -> KeyScheduleSize;

  00029	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002c	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00033	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 342  : }

  00036	c3		 ret	 0
_CipherGetKeyScheduleSize ENDP
_TEXT	ENDS
PUBLIC	_EAGetFirst
; Function compile flags: /Ogtpy
;	COMDAT _EAGetFirst
_TEXT	SEGMENT
_EAGetFirst PROC					; COMDAT

; 358  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 359  : }

  00005	c3		 ret	 0
_EAGetFirst ENDP
_TEXT	ENDS
PUBLIC	_EAGetNext
; Function compile flags: /Ogtpy
;	COMDAT _EAGetNext
_TEXT	SEGMENT
_previousEA$ = 8					; size = 4
_EAGetNext PROC						; COMDAT

; 375  : 	int id = previousEA + 1;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _previousEA$[esp-4]
  00004	41		 inc	 ecx

; 376  : 	if (EncryptionAlgorithms[id].Ciphers[0] != 0) return id;

  00005	8b c1		 mov	 eax, ecx
  00007	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0000a	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax]
  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	23 c1		 and	 eax, ecx

; 377  : 	return 0;
; 378  : }

  00016	c3		 ret	 0
_EAGetNext ENDP
_TEXT	ENDS
PUBLIC	_EAGetFirstMode
; Function compile flags: /Ogtpy
;	COMDAT _EAGetFirstMode
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetFirstMode PROC					; COMDAT

; 508  : 	return (EncryptionAlgorithms[ea].Modes[0]);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ea$[esp-4]
  00004	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00007	8b 80 10 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax+16]

; 509  : }

  0000d	c3		 ret	 0
_EAGetFirstMode ENDP
_TEXT	ENDS
PUBLIC	_EAGetNextMode
; Function compile flags: /Ogtpy
;	COMDAT _EAGetNextMode
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_previousModeId$ = 12					; size = 4
_EAGetNextMode PROC					; COMDAT

; 514  : 	int c, i = 0;
; 515  : 	while (c = EncryptionAlgorithms[ea].Modes[i++])

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ea$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6b f6 0b	 imul	 esi, 11			; 0000000bH
  0000a	8b 04 b5 10 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[esi*4+16]
  00011	33 d2		 xor	 edx, edx
  00013	57		 push	 edi
  00014	85 c0		 test	 eax, eax
  00016	74 1b		 je	 SHORT $LN8@EAGetNextM
  00018	8b 7c 24 10	 mov	 edi, DWORD PTR _previousModeId$[esp+4]
  0001c	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0001f	81 c1 10 00 00
	00		 add	 ecx, OFFSET _EncryptionAlgorithms+16
$LL3@EAGetNextM:
  00025	42		 inc	 edx
  00026	83 c1 04	 add	 ecx, 4

; 516  : 	{
; 517  : 		if (c == previousModeId) 

  00029	3b c7		 cmp	 eax, edi
  0002b	74 0b		 je	 SHORT $LN7@EAGetNextM
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	85 c0		 test	 eax, eax
  00031	75 f2		 jne	 SHORT $LL3@EAGetNextM
$LN8@EAGetNextM:
  00033	5f		 pop	 edi

; 519  : 	}
; 520  : 
; 521  : 	return 0;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 522  : }

  00037	c3		 ret	 0
$LN7@EAGetNextM:

; 518  : 			return EncryptionAlgorithms[ea].Modes[i];

  00038	03 f2		 add	 esi, edx
  0003a	8b 04 b5 10 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[esi*4+16]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 522  : }

  00043	c3		 ret	 0
_EAGetNextMode ENDP
_TEXT	ENDS
PUBLIC	_EAGetCipherCount
; Function compile flags: /Ogtpy
;	COMDAT _EAGetCipherCount
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetCipherCount PROC					; COMDAT

; 624  : 	int i = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ea$[esp-4]
  00004	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00007	33 c9		 xor	 ecx, ecx
  00009	05 00 00 00 00	 add	 eax, OFFSET _EncryptionAlgorithms
  0000e	8b ff		 npad	 2
$LL2@EAGetCiphe:

; 625  : 	while (EncryptionAlgorithms[ea].Ciphers[i++]);

  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	41		 inc	 ecx
  00013	83 c0 04	 add	 eax, 4
  00016	85 d2		 test	 edx, edx
  00018	75 f6		 jne	 SHORT $LL2@EAGetCiphe

; 626  : 
; 627  : 	return i - 1;

  0001a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 628  : }

  0001d	c3		 ret	 0
_EAGetCipherCount ENDP
_TEXT	ENDS
PUBLIC	_EAGetFirstCipher
; Function compile flags: /Ogtpy
;	COMDAT _EAGetFirstCipher
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetFirstCipher PROC					; COMDAT

; 633  : 	return EncryptionAlgorithms[ea].Ciphers[0];

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ea$[esp-4]
  00004	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00007	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax]

; 634  : }

  0000d	c3		 ret	 0
_EAGetFirstCipher ENDP
_TEXT	ENDS
PUBLIC	_EAGetLastCipher
; Function compile flags: /Ogtpy
;	COMDAT _EAGetLastCipher
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetLastCipher PROC					; COMDAT

; 639  : 	int c, i = 0;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _ea$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00009	33 c9		 xor	 ecx, ecx
  0000b	05 00 00 00 00	 add	 eax, OFFSET _EncryptionAlgorithms
  00010	56		 push	 esi
$LL2@EAGetLastC:

; 640  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++]);

  00011	8b 30		 mov	 esi, DWORD PTR [eax]
  00013	41		 inc	 ecx
  00014	83 c0 04	 add	 eax, 4
  00017	85 f6		 test	 esi, esi
  00019	75 f6		 jne	 SHORT $LL2@EAGetLastC

; 641  : 
; 642  : 	return EncryptionAlgorithms[ea].Ciphers[i - 2];

  0001b	6b d2 0b	 imul	 edx, 11			; 0000000bH
  0001e	03 d1		 add	 edx, ecx
  00020	8b 04 95 f8 ff
	ff ff		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edx*4-8]
  00027	5e		 pop	 esi

; 643  : }

  00028	c3		 ret	 0
_EAGetLastCipher ENDP
_TEXT	ENDS
PUBLIC	_EAGetNextCipher
; Function compile flags: /Ogtpy
;	COMDAT _EAGetNextCipher
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_previousCipherId$ = 12					; size = 4
_EAGetNextCipher PROC					; COMDAT

; 648  : 	int c, i = 0;
; 649  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++])

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ea$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6b f6 0b	 imul	 esi, 11			; 0000000bH
  0000a	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[esi*4]
  00011	33 d2		 xor	 edx, edx
  00013	57		 push	 edi
  00014	85 c0		 test	 eax, eax
  00016	74 1b		 je	 SHORT $LN8@EAGetNextC
  00018	8b 7c 24 10	 mov	 edi, DWORD PTR _previousCipherId$[esp+4]
  0001c	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0001f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _EncryptionAlgorithms
$LL3@EAGetNextC:
  00025	42		 inc	 edx
  00026	83 c1 04	 add	 ecx, 4

; 650  : 	{
; 651  : 		if (c == previousCipherId) 

  00029	3b c7		 cmp	 eax, edi
  0002b	74 0b		 je	 SHORT $LN7@EAGetNextC
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	85 c0		 test	 eax, eax
  00031	75 f2		 jne	 SHORT $LL3@EAGetNextC
$LN8@EAGetNextC:
  00033	5f		 pop	 edi

; 653  : 	}
; 654  : 
; 655  : 	return 0;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 656  : }

  00037	c3		 ret	 0
$LN7@EAGetNextC:

; 652  : 			return EncryptionAlgorithms[ea].Ciphers[i];

  00038	03 f2		 add	 esi, edx
  0003a	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[esi*4]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 656  : }

  00043	c3		 ret	 0
_EAGetNextCipher ENDP
_TEXT	ENDS
PUBLIC	_EAGetPreviousCipher
; Function compile flags: /Ogtpy
;	COMDAT _EAGetPreviousCipher
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_previousCipherId$ = 12					; size = 4
_EAGetPreviousCipher PROC				; COMDAT

; 661  : 	int c, i = 0;
; 662  : 
; 663  : 	if (EncryptionAlgorithms[ea].Ciphers[i++] == previousCipherId)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ea$[esp-4]
  00004	8b d1		 mov	 edx, ecx
  00006	6b d2 0b	 imul	 edx, 11			; 0000000bH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR _previousCipherId$[esp+4]
  0000f	be 01 00 00 00	 mov	 esi, 1
  00014	39 3c 95 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[edx*4], edi

; 664  : 		return 0;

  0001b	74 22		 je	 SHORT $LN9@EAGetPrevi

; 665  : 
; 666  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++])

  0001d	8b 04 95 04 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edx*4+4]
  00024	85 c0		 test	 eax, eax
  00026	74 17		 je	 SHORT $LN9@EAGetPrevi
  00028	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0002b	81 c1 04 00 00
	00		 add	 ecx, OFFSET _EncryptionAlgorithms+4
$LL3@EAGetPrevi:
  00031	46		 inc	 esi
  00032	83 c1 04	 add	 ecx, 4

; 667  : 	{
; 668  : 		if (c == previousCipherId) 

  00035	3b c7		 cmp	 eax, edi
  00037	74 0b		 je	 SHORT $LN8@EAGetPrevi
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	85 c0		 test	 eax, eax
  0003d	75 f2		 jne	 SHORT $LL3@EAGetPrevi
$LN9@EAGetPrevi:
  0003f	5f		 pop	 edi

; 670  : 	}
; 671  : 
; 672  : 	return 0;

  00040	33 c0		 xor	 eax, eax
  00042	5e		 pop	 esi

; 673  : }

  00043	c3		 ret	 0
$LN8@EAGetPrevi:

; 669  : 			return EncryptionAlgorithms[ea].Ciphers[i - 2];

  00044	03 d6		 add	 edx, esi
  00046	8b 04 95 f8 ff
	ff ff		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edx*4-8]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 673  : }

  0004f	c3		 ret	 0
_EAGetPreviousCipher ENDP
_TEXT	ENDS
PUBLIC	_EAIsFormatEnabled
; Function compile flags: /Ogtpy
;	COMDAT _EAIsFormatEnabled
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAIsFormatEnabled PROC					; COMDAT

; 678  : 	return EncryptionAlgorithms[ea].FormatEnabled;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ea$[esp-4]
  00004	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00007	8b 80 28 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax+40]

; 679  : }

  0000d	c3		 ret	 0
_EAIsFormatEnabled ENDP
_TEXT	ENDS
PUBLIC	_EAIsModeSupported
; Function compile flags: /Ogtpy
;	COMDAT _EAIsModeSupported
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_testedMode$ = 12					; size = 4
_EAIsModeSupported PROC					; COMDAT

; 684  : {

  00000	53		 push	 ebx

; 685  : 	int mode;
; 686  : 
; 687  : 	for (mode = EAGetFirstMode (ea); mode != 0; mode = EAGetNextMode (ea, mode))

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ea$[esp]
  00005	8b c3		 mov	 eax, ebx
  00007	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0000a	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _EncryptionAlgorithms[eax+16]
  00010	55		 push	 ebp
  00011	8d a8 10 00 00
	00		 lea	 ebp, DWORD PTR _EncryptionAlgorithms[eax+16]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	85 d2		 test	 edx, edx
  0001b	74 31		 je	 SHORT $LN2@EAIsModeSu
  0001d	8d 49 00	 npad	 3
$LL22@EAIsModeSu:

; 688  : 	{
; 689  : 		if (mode == testedMode)

  00020	3b 54 24 18	 cmp	 edx, DWORD PTR _testedMode$[esp+12]
  00024	74 43		 je	 SHORT $LN17@EAIsModeSu
  00026	8b fb		 mov	 edi, ebx
  00028	6b ff 0b	 imul	 edi, 11			; 0000000bH
  0002b	8b 04 bd 10 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edi*4+16]
  00032	33 f6		 xor	 esi, esi
  00034	85 c0		 test	 eax, eax
  00036	74 16		 je	 SHORT $LN2@EAIsModeSu

; 685  : 	int mode;
; 686  : 
; 687  : 	for (mode = EAGetFirstMode (ea); mode != 0; mode = EAGetNextMode (ea, mode))

  00038	8b cd		 mov	 ecx, ebp
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL11@EAIsModeSu:
  00040	46		 inc	 esi
  00041	83 c1 04	 add	 ecx, 4
  00044	3b c2		 cmp	 eax, edx
  00046	74 0d		 je	 SHORT $LN16@EAIsModeSu
  00048	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004a	85 c0		 test	 eax, eax
  0004c	75 f2		 jne	 SHORT $LL11@EAIsModeSu
$LN2@EAIsModeSu:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp

; 691  : 	}
; 692  : 	return FALSE;

  00051	33 c0		 xor	 eax, eax
  00053	5b		 pop	 ebx

; 693  : }

  00054	c3		 ret	 0
$LN16@EAIsModeSu:

; 685  : 	int mode;
; 686  : 
; 687  : 	for (mode = EAGetFirstMode (ea); mode != 0; mode = EAGetNextMode (ea, mode))

  00055	03 fe		 add	 edi, esi
  00057	8b 14 bd 10 00
	00 00		 mov	 edx, DWORD PTR _EncryptionAlgorithms[edi*4+16]
  0005e	85 d2		 test	 edx, edx
  00060	75 be		 jne	 SHORT $LL22@EAIsModeSu
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5d		 pop	 ebp

; 691  : 	}
; 692  : 	return FALSE;

  00065	33 c0		 xor	 eax, eax
  00067	5b		 pop	 ebx

; 693  : }

  00068	c3		 ret	 0
$LN17@EAIsModeSu:
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5d		 pop	 ebp

; 690  : 			return TRUE;

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	5b		 pop	 ebx

; 693  : }

  00072	c3		 ret	 0
_EAIsModeSupported ENDP
_TEXT	ENDS
PUBLIC	_HashGet
; Function compile flags: /Ogtpy
;	COMDAT _HashGet
_TEXT	SEGMENT
_id$ = 8						; size = 4
_HashGet PROC						; COMDAT

; 698  : 	int i;
; 699  : 	for (i = 0; Hashes[i].Id != 0; i++)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 18		 je	 SHORT $LN2@HashGet
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _id$[esp-4]
$LL4@HashGet:

; 700  : 		if (Hashes[i].Id == id)

  00010	3b ca		 cmp	 ecx, edx
  00012	74 13		 je	 SHORT $LN8@HashGet
  00014	40		 inc	 eax
  00015	8b c8		 mov	 ecx, eax
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	8b 89 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes[ecx]
  00020	85 c9		 test	 ecx, ecx
  00022	75 ec		 jne	 SHORT $LL4@HashGet
$LN2@HashGet:

; 702  : 
; 703  : 	return 0;

  00024	33 c0		 xor	 eax, eax

; 704  : }

  00026	c3		 ret	 0
$LN8@HashGet:

; 701  : 			return &Hashes[i];

  00027	c1 e0 04	 shl	 eax, 4
  0002a	05 00 00 00 00	 add	 eax, OFFSET _Hashes

; 704  : }

  0002f	c3		 ret	 0
_HashGet ENDP
_TEXT	ENDS
PUBLIC	_HashGetIdByName
; Function compile flags: /Ogtpy
;	COMDAT _HashGetIdByName
_TEXT	SEGMENT
_name$ = 8						; size = 4
_HashGetIdByName PROC					; COMDAT

; 708  : {

  00000	56		 push	 esi

; 709  : 	int i;
; 710  : 	for (i = 0; Hashes[i].Id != 0; i++)

  00001	33 f6		 xor	 esi, esi
  00003	57		 push	 edi
  00004	39 35 00 00 00
	00		 cmp	 DWORD PTR _Hashes, esi
  0000a	74 4c		 je	 SHORT $LN2@HashGetIdB
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _name$[esp+4]
  00010	33 c0		 xor	 eax, eax
$LL4@HashGetIdB:

; 711  : 		if (strcmp (Hashes[i].Name, name) == 0)

  00012	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR _Hashes[eax+4]
  00018	8b cf		 mov	 ecx, edi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@HashGetIdB:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00024	75 1a		 jne	 SHORT $LN11@HashGetIdB
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN12@HashGetIdB
  0002a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00030	75 0e		 jne	 SHORT $LN11@HashGetIdB
  00032	83 c0 02	 add	 eax, 2
  00035	83 c1 02	 add	 ecx, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL10@HashGetIdB
$LN12@HashGetIdB:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN13@HashGetIdB
$LN11@HashGetIdB:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN13@HashGetIdB:
  00045	85 c0		 test	 eax, eax
  00047	74 14		 je	 SHORT $LN8@HashGetIdB
  00049	46		 inc	 esi
  0004a	8b c6		 mov	 eax, esi
  0004c	c1 e0 04	 shl	 eax, 4
  0004f	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _Hashes[eax], 0
  00056	75 ba		 jne	 SHORT $LL4@HashGetIdB
$LN2@HashGetIdB:
  00058	5f		 pop	 edi

; 713  : 
; 714  : 	return 0;

  00059	33 c0		 xor	 eax, eax
  0005b	5e		 pop	 esi

; 715  : }

  0005c	c3		 ret	 0
$LN8@HashGetIdB:

; 712  : 			return Hashes[i].Id;

  0005d	c1 e6 04	 shl	 esi, 4
  00060	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _Hashes[esi]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 715  : }

  00068	c3		 ret	 0
_HashGetIdByName ENDP
_TEXT	ENDS
PUBLIC	_HashGetName
; Function compile flags: /Ogtpy
;	COMDAT _HashGetName
_TEXT	SEGMENT
_hashId$ = 8						; size = 4
_HashGetName PROC					; COMDAT

; 720  : 	return HashGet (hashId) -> Name;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 18		 je	 SHORT $LN4@HashGetNam
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _hashId$[esp-4]
$LL6@HashGetNam:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 16		 je	 SHORT $LN10@HashGetNam
  00014	40		 inc	 eax
  00015	8b c8		 mov	 ecx, eax
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	8b 89 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes[ecx]
  00020	85 c9		 test	 ecx, ecx
  00022	75 ec		 jne	 SHORT $LL6@HashGetNam
$LN4@HashGetNam:
  00024	33 c0		 xor	 eax, eax
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 721  : }

  00029	c3		 ret	 0
$LN10@HashGetNam:

; 720  : 	return HashGet (hashId) -> Name;

  0002a	c1 e0 04	 shl	 eax, 4
  0002d	05 00 00 00 00	 add	 eax, OFFSET _Hashes
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 721  : }

  00035	c3		 ret	 0
_HashGetName ENDP
_TEXT	ENDS
PUBLIC	_HashIsDeprecated
; Function compile flags: /Ogtpy
;	COMDAT _HashIsDeprecated
_TEXT	SEGMENT
_hashId$ = 8						; size = 4
_HashIsDeprecated PROC					; COMDAT

; 726  : 	return HashGet (hashId) -> Deprecated;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 18		 je	 SHORT $LN4@HashIsDepr
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR _hashId$[esp-4]
$LL6@HashIsDepr:
  00010	3b ca		 cmp	 ecx, edx
  00012	74 16		 je	 SHORT $LN10@HashIsDepr
  00014	40		 inc	 eax
  00015	8b c8		 mov	 ecx, eax
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	8b 89 00 00 00
	00		 mov	 ecx, DWORD PTR _Hashes[ecx]
  00020	85 c9		 test	 ecx, ecx
  00022	75 ec		 jne	 SHORT $LL6@HashIsDepr
$LN4@HashIsDepr:
  00024	33 c0		 xor	 eax, eax
  00026	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 727  : }

  00029	c3		 ret	 0
$LN10@HashIsDepr:

; 726  : 	return HashGet (hashId) -> Deprecated;

  0002a	c1 e0 04	 shl	 eax, 4
  0002d	05 00 00 00 00	 add	 eax, OFFSET _Hashes
  00032	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 727  : }

  00035	c3		 ret	 0
_HashIsDeprecated ENDP
_TEXT	ENDS
PUBLIC	_crypto_open
EXTRN	__imp__VirtualLock@8:PROC
EXTRN	_malloc:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _crypto_open
_TEXT	SEGMENT
_crypto_open PROC					; COMDAT

; 741  : {

  00000	56		 push	 esi

; 742  : #ifndef TC_WINDOWS_BOOT
; 743  : 
; 744  : 	/* Do the crt allocation */
; 745  : 	PCRYPTO_INFO cryptoInfo = (PCRYPTO_INFO) TCalloc (sizeof (CRYPTO_INFO));

  00001	68 68 44 00 00	 push	 17512			; 00004468H
  00006	e8 00 00 00 00	 call	 _malloc
  0000b	8b f0		 mov	 esi, eax
  0000d	83 c4 04	 add	 esp, 4

; 746  : 	if (cryptoInfo == NULL)

  00010	85 f6		 test	 esi, esi
  00012	75 02		 jne	 SHORT $LN1@crypto_ope
  00014	5e		 pop	 esi

; 757  : 
; 758  : #else // TC_WINDOWS_BOOT
; 759  : 
; 760  : #if 0
; 761  : 	if (CryptoInfoBufferInUse)
; 762  : 		TC_THROW_FATAL_EXCEPTION;
; 763  : #endif
; 764  : 	CryptoInfoBufferInUse = 1;
; 765  : 	return &CryptoInfoBuffer;
; 766  : 
; 767  : #endif // TC_WINDOWS_BOOT
; 768  : }

  00015	c3		 ret	 0
$LN1@crypto_ope:

; 747  : 		return NULL;
; 748  : 
; 749  : 	memset (cryptoInfo, 0, sizeof (CRYPTO_INFO));

  00016	68 68 44 00 00	 push	 17512			; 00004468H
  0001b	6a 00		 push	 0
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _memset
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 750  : 
; 751  : #ifndef DEVICE_DRIVER
; 752  : 	VirtualLock (cryptoInfo, sizeof (CRYPTO_INFO));

  00026	68 68 44 00 00	 push	 17512			; 00004468H
  0002b	56		 push	 esi
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 753  : #endif
; 754  : 
; 755  : 	cryptoInfo->ea = -1;

  00032	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 756  : 	return cryptoInfo;

  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 757  : 
; 758  : #else // TC_WINDOWS_BOOT
; 759  : 
; 760  : #if 0
; 761  : 	if (CryptoInfoBufferInUse)
; 762  : 		TC_THROW_FATAL_EXCEPTION;
; 763  : #endif
; 764  : 	CryptoInfoBufferInUse = 1;
; 765  : 	return &CryptoInfoBuffer;
; 766  : 
; 767  : #endif // TC_WINDOWS_BOOT
; 768  : }

  0003b	c3		 ret	 0
_crypto_open ENDP
_TEXT	ENDS
PUBLIC	_crypto_loadkey
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _crypto_loadkey
_TEXT	SEGMENT
_keyInfo$ = 8						; size = 4
_lpszUserKey$ = 12					; size = 4
_nUserKeyLen$ = 16					; size = 4
_crypto_loadkey PROC					; COMDAT

; 772  : 	keyInfo->keyLength = nUserKeyLen;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _keyInfo$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 10	 mov	 ebx, DWORD PTR _nUserKeyLen$[esp]
  00009	56		 push	 esi

; 773  : 	burn (keyInfo->userKey, sizeof (keyInfo->userKey));

  0000a	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  0000d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00012	57		 push	 edi
  00013	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00016	8b d6		 mov	 edx, esi
  00018	8b f9		 mov	 edi, ecx
  0001a	8b c6		 mov	 eax, esi
  0001c	8d 64 24 00	 npad	 4
$LL9@crypto_loa:
  00020	c6 00 00	 mov	 BYTE PTR [eax], 0
  00023	40		 inc	 eax
  00024	83 ef 01	 sub	 edi, 1
  00027	75 f7		 jne	 SHORT $LL9@crypto_loa
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL2@crypto_loa:
  00030	49		 dec	 ecx
  00031	c6 02 00	 mov	 BYTE PTR [edx], 0
  00034	42		 inc	 edx
  00035	85 c9		 test	 ecx, ecx
  00037	75 f7		 jne	 SHORT $LL2@crypto_loa

; 774  : 	memcpy (keyInfo->userKey, lpszUserKey, nUserKeyLen);

  00039	8b 44 24 14	 mov	 eax, DWORD PTR _lpszUserKey$[esp+8]
  0003d	53		 push	 ebx
  0003e	50		 push	 eax
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 775  : }

  0004b	c3		 ret	 0
_crypto_loadkey ENDP
_TEXT	ENDS
PUBLIC	_crypto_close
EXTRN	_free:PROC
EXTRN	__imp__VirtualUnlock@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _crypto_close
_TEXT	SEGMENT
_cryptoInfo$ = 8					; size = 4
_crypto_close PROC					; COMDAT

; 778  : {

  00000	57		 push	 edi

; 779  : #ifndef TC_WINDOWS_BOOT
; 780  : 
; 781  : 	if (cryptoInfo != NULL)

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR _cryptoInfo$[esp]
  00005	85 ff		 test	 edi, edi
  00007	74 35		 je	 SHORT $LN6@crypto_clo

; 782  : 	{
; 783  : 		burn (cryptoInfo, sizeof (CRYPTO_INFO));

  00009	b9 68 44 00 00	 mov	 ecx, 17512		; 00004468H
  0000e	56		 push	 esi
  0000f	8b d7		 mov	 edx, edi
  00011	8b f1		 mov	 esi, ecx
  00013	8b c7		 mov	 eax, edi
$LL10@crypto_clo:
  00015	c6 00 00	 mov	 BYTE PTR [eax], 0
  00018	40		 inc	 eax
  00019	83 ee 01	 sub	 esi, 1
  0001c	75 f7		 jne	 SHORT $LL10@crypto_clo
  0001e	5e		 pop	 esi
  0001f	90		 npad	 1
$LL2@crypto_clo:
  00020	49		 dec	 ecx
  00021	c6 02 00	 mov	 BYTE PTR [edx], 0
  00024	42		 inc	 edx
  00025	85 c9		 test	 ecx, ecx
  00027	75 f7		 jne	 SHORT $LL2@crypto_clo

; 784  : #ifndef DEVICE_DRIVER
; 785  : 		VirtualUnlock (cryptoInfo, sizeof (CRYPTO_INFO));

  00029	68 68 44 00 00	 push	 17512			; 00004468H
  0002e	57		 push	 edi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualUnlock@8

; 786  : #endif
; 787  : 		TCfree (cryptoInfo);

  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN6@crypto_clo:
  0003e	5f		 pop	 edi

; 788  : 	}
; 789  : 
; 790  : #else // TC_WINDOWS_BOOT
; 791  : 
; 792  : 	burn (&CryptoInfoBuffer, sizeof (CryptoInfoBuffer));
; 793  : 	CryptoInfoBufferInUse = FALSE;
; 794  : 
; 795  : #endif // TC_WINDOWS_BOOT
; 796  : }

  0003f	c3		 ret	 0
_crypto_close ENDP
_TEXT	ENDS
PUBLIC	_Xor128
; Function compile flags: /Ogtpy
;	COMDAT _Xor128
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_Xor128	PROC						; COMDAT

; 805  : 	*a++ ^= *b++;

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _b$[esp-4]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	8b 44 24 04	 mov	 eax, DWORD PTR _a$[esp-4]
  0000a	31 10		 xor	 DWORD PTR [eax], edx
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	31 50 04	 xor	 DWORD PTR [eax+4], edx

; 806  : 	*a ^= *b;

  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	31 50 08	 xor	 DWORD PTR [eax+8], edx
  00018	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0001b	31 48 0c	 xor	 DWORD PTR [eax+12], ecx
  0001e	83 c0 08	 add	 eax, 8

; 807  : }

  00021	c3		 ret	 0
_Xor128	ENDP
_TEXT	ENDS
PUBLIC	_Xor64
; Function compile flags: /Ogtpy
;	COMDAT _Xor64
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_Xor64	PROC						; COMDAT

; 812  : 	*a ^= *b;

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _b$[esp-4]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	8b 44 24 04	 mov	 eax, DWORD PTR _a$[esp-4]
  0000a	31 10		 xor	 DWORD PTR [eax], edx
  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	31 48 04	 xor	 DWORD PTR [eax+4], ecx

; 813  : }

  00012	c3		 ret	 0
_Xor64	ENDP
_TEXT	ENDS
EXTRN	_crc32int:PROC
; Function compile flags: /Ogtpy
;	COMDAT _InitSectorIVAndWhitening
_TEXT	SEGMENT
_iv64$ = -32						; size = 32
_unitNo$ = 8						; size = 8
_blockSize$ = 16					; size = 4
_iv$ = 20						; size = 4
_whitening$ = 24					; size = 4
_InitSectorIVAndWhitening PROC				; COMDAT
; _ivSeed$ = eax

; 1010 : {

  00000	83 ec 20	 sub	 esp, 32			; 00000020H

; 1011 : 
; 1012 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1013 : 
; 1014 : 	unsigned __int64 iv64[4];
; 1015 : 	unsigned __int32 *iv32 = (unsigned __int32 *) iv64;
; 1016 : 
; 1017 : 	iv64[0] = ivSeed[0] ^ LE64(unitNo);

  00003	8b 4c 24 24	 mov	 ecx, DWORD PTR _unitNo$[esp+28]
  00007	8b 54 24 28	 mov	 edx, DWORD PTR _unitNo$[esp+32]
  0000b	53		 push	 ebx

; 1018 : 	iv64[1] = ivSeed[1] ^ LE64(unitNo);

  0000c	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  0000f	33 d9		 xor	 ebx, ecx
  00011	89 5c 24 0c	 mov	 DWORD PTR _iv64$[esp+44], ebx
  00015	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00018	33 da		 xor	 ebx, edx
  0001a	55		 push	 ebp

; 1019 : 	iv64[2] = ivSeed[2] ^ LE64(unitNo);

  0001b	8b 68 14	 mov	 ebp, DWORD PTR [eax+20]
  0001e	89 5c 24 14	 mov	 DWORD PTR _iv64$[esp+52], ebx
  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  00025	56		 push	 esi
  00026	8b 30		 mov	 esi, DWORD PTR [eax]
  00028	33 d9		 xor	 ebx, ecx
  0002a	57		 push	 edi
  0002b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0002e	89 5c 24 20	 mov	 DWORD PTR _iv64$[esp+64], ebx

; 1020 : 	if (blockSize == 16)

  00032	8b 5c 24 3c	 mov	 ebx, DWORD PTR _blockSize$[esp+44]
  00036	33 f1		 xor	 esi, ecx
  00038	33 fa		 xor	 edi, edx
  0003a	33 ea		 xor	 ebp, edx
  0003c	89 74 24 10	 mov	 DWORD PTR _iv64$[esp+48], esi
  00040	89 7c 24 14	 mov	 DWORD PTR _iv64$[esp+52], edi
  00044	89 6c 24 24	 mov	 DWORD PTR _iv64$[esp+68], ebp
  00048	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0004b	75 12		 jne	 SHORT $LN6@InitSector

; 1021 : 	{
; 1022 : 		iv64[3] = ivSeed[3] ^ LE64(unitNo);

  0004d	8b 68 18	 mov	 ebp, DWORD PTR [eax+24]
  00050	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00053	33 e9		 xor	 ebp, ecx
  00055	33 c2		 xor	 eax, edx
  00057	89 6c 24 28	 mov	 DWORD PTR _iv64$[esp+72], ebp
  0005b	89 44 24 2c	 mov	 DWORD PTR _iv64$[esp+76], eax
$LN6@InitSector:

; 1023 : 	}
; 1024 : 
; 1025 : 	iv[0] = iv32[0];

  0005f	8b 44 24 40	 mov	 eax, DWORD PTR _iv$[esp+44]
  00063	89 30		 mov	 DWORD PTR [eax], esi

; 1026 : 	iv[1] = iv32[1];

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1027 : 
; 1028 : 	switch (blockSize)

  00068	83 fb 08	 cmp	 ebx, 8
  0006b	74 53		 je	 SHORT $LN2@InitSector
  0006d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00070	74 0f		 je	 SHORT $LN3@InitSector
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5d		 pop	 ebp

; 1047 : 		break;
; 1048 : 
; 1049 : 	default:
; 1050 : 		TC_THROW_FATAL_EXCEPTION;

  00075	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  0007c	5b		 pop	 ebx

; 1051 : 	}
; 1052 : }

  0007d	83 c4 20	 add	 esp, 32			; 00000020H
  00080	c3		 ret	 0
$LN3@InitSector:

; 1029 : 	{
; 1030 : 	case 16:
; 1031 : 
; 1032 : 		// 128-bit block
; 1033 : 
; 1034 : 		iv[2] = iv32[2];

  00081	8b 4c 24 18	 mov	 ecx, DWORD PTR _iv64$[esp+56]

; 1035 : 		iv[3] = iv32[3];

  00085	8b 54 24 1c	 mov	 edx, DWORD PTR _iv64$[esp+60]
  00089	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0008c	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1036 : 
; 1037 : 		whitening[0] = LE32( crc32int ( &iv32[4] ) ^ crc32int ( &iv32[7] ) );

  0008f	8d 44 24 20	 lea	 eax, DWORD PTR _iv64$[esp+64]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _crc32int
  00099	8d 4c 24 30	 lea	 ecx, DWORD PTR _iv64$[esp+80]
  0009d	51		 push	 ecx
  0009e	8b f8		 mov	 edi, eax
  000a0	e8 00 00 00 00	 call	 _crc32int
  000a5	8b 74 24 4c	 mov	 esi, DWORD PTR _whitening$[esp+52]

; 1038 : 		whitening[1] = LE32( crc32int ( &iv32[5] ) ^ crc32int ( &iv32[6] ) );

  000a9	8d 54 24 2c	 lea	 edx, DWORD PTR _iv64$[esp+76]
  000ad	33 f8		 xor	 edi, eax
  000af	52		 push	 edx
  000b0	89 3e		 mov	 DWORD PTR [esi], edi
  000b2	e8 00 00 00 00	 call	 _crc32int
  000b7	8b f8		 mov	 edi, eax
  000b9	8d 44 24 34	 lea	 eax, DWORD PTR _iv64$[esp+84]
  000bd	50		 push	 eax

; 1039 : 		break;

  000be	eb 2f		 jmp	 SHORT $LN9@InitSector
$LN2@InitSector:

; 1040 : 
; 1041 : 	case 8:
; 1042 : 
; 1043 : 		// 64-bit block
; 1044 : 
; 1045 : 		whitening[0] = LE32( crc32int ( &iv32[2] ) ^ crc32int ( &iv32[5] ) );

  000c0	8d 4c 24 24	 lea	 ecx, DWORD PTR _iv64$[esp+68]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _crc32int
  000ca	8d 54 24 1c	 lea	 edx, DWORD PTR _iv64$[esp+60]
  000ce	52		 push	 edx
  000cf	8b f8		 mov	 edi, eax
  000d1	e8 00 00 00 00	 call	 _crc32int
  000d6	8b 74 24 4c	 mov	 esi, DWORD PTR _whitening$[esp+52]
  000da	33 f8		 xor	 edi, eax

; 1046 : 		whitening[1] = LE32( crc32int ( &iv32[3] ) ^ crc32int ( &iv32[4] ) );

  000dc	8d 44 24 28	 lea	 eax, DWORD PTR _iv64$[esp+72]
  000e0	50		 push	 eax
  000e1	89 3e		 mov	 DWORD PTR [esi], edi
  000e3	e8 00 00 00 00	 call	 _crc32int
  000e8	8d 4c 24 28	 lea	 ecx, DWORD PTR _iv64$[esp+72]
  000ec	8b f8		 mov	 edi, eax
  000ee	51		 push	 ecx
$LN9@InitSector:
  000ef	e8 00 00 00 00	 call	 _crc32int
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	33 f8		 xor	 edi, eax
  000f9	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5d		 pop	 ebp
  000ff	5b		 pop	 ebx

; 1051 : 	}
; 1052 : }

  00100	83 c4 20	 add	 esp, 32			; 00000020H
  00103	c3		 ret	 0
_InitSectorIVAndWhitening ENDP
_TEXT	ENDS
PUBLIC	_DataUnit2LRWIndex
; Function compile flags: /Ogtpy
;	COMDAT _DataUnit2LRWIndex
_TEXT	SEGMENT
_dataUnit$ = 8						; size = 8
_blockSize$ = 16					; size = 4
_ci$ = 20						; size = 4
_DataUnit2LRWIndex PROC					; COMDAT

; 1343 : 	/* Deprecated/legacy */
; 1344 : 
; 1345 : 	if (ci->hiddenVolume)

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _ci$[esp-4]
  00004	83 b8 a0 29 00
	00 00		 cmp	 DWORD PTR [eax+10656], 0

; 1346 : 		dataUnit -= ci->hiddenVolumeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  0000b	8b 54 24 08	 mov	 edx, DWORD PTR _dataUnit$[esp]
  0000f	74 1f		 je	 SHORT $LN7@DataUnit2L
  00011	8b 88 18 44 00
	00		 mov	 ecx, DWORD PTR [eax+17432]
  00017	56		 push	 esi
  00018	8b b0 1c 44 00
	00		 mov	 esi, DWORD PTR [eax+17436]
  0001e	8b 44 24 08	 mov	 eax, DWORD PTR _dataUnit$[esp]
  00022	0f ac f1 09	 shrd	 ecx, esi, 9
  00026	c1 ee 09	 shr	 esi, 9
  00029	2b c1		 sub	 eax, ecx
  0002b	1b d6		 sbb	 edx, esi
  0002d	5e		 pop	 esi

; 1347 : 	else

  0002e	eb 0a		 jmp	 SHORT $LN6@DataUnit2L
$LN7@DataUnit2L:

; 1348 : 		dataUnit -= TC_VOLUME_HEADER_SIZE_LEGACY / ENCRYPTION_DATA_UNIT_SIZE;	// Compensate for the volume header size

  00030	8b 44 24 04	 mov	 eax, DWORD PTR _dataUnit$[esp-4]
  00034	83 c0 ff	 add	 eax, -1
  00037	83 d2 ff	 adc	 edx, -1
$LN6@DataUnit2L:

; 1349 : 
; 1350 : 	switch (blockSize)

  0003a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _blockSize$[esp-4]
  0003e	83 f9 08	 cmp	 ecx, 8
  00041	74 1c		 je	 SHORT $LN3@DataUnit2L
  00043	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00046	74 0c		 je	 SHORT $LN2@DataUnit2L

; 1357 : 
; 1358 : 	default:
; 1359 : 		TC_THROW_FATAL_EXCEPTION;
; 1360 : 	}
; 1361 : 
; 1362 : 	return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00051	33 d2		 xor	 edx, edx

; 1363 : }

  00053	c3		 ret	 0
$LN2@DataUnit2L:

; 1354 : 
; 1355 : 	case 16:
; 1356 : 		return (dataUnit << 5) | 1;

  00054	0f a4 c2 05	 shld	 edx, eax, 5
  00058	c1 e0 05	 shl	 eax, 5
  0005b	83 c8 01	 or	 eax, 1

; 1363 : }

  0005e	c3		 ret	 0
$LN3@DataUnit2L:

; 1351 : 	{
; 1352 : 	case 8:
; 1353 : 		return (dataUnit << 6) | 1;

  0005f	0f a4 c2 06	 shld	 edx, eax, 6
  00063	c1 e0 06	 shl	 eax, 6
  00066	83 c8 01	 or	 eax, 1

; 1363 : }

  00069	c3		 ret	 0
_DataUnit2LRWIndex ENDP
_TEXT	ENDS
PUBLIC	_EncryptDataUnits
EXTRN	_EncryptionThreadPoolDoWork:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncryptDataUnits
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_structUnitNo$ = 12					; size = 4
_nbrUnits$ = 16						; size = 4
_ci$ = 20						; size = 4
_EncryptDataUnits PROC					; COMDAT

; 1373 : 	EncryptionThreadPoolDoWork (EncryptDataUnitsWork, buf, structUnitNo, nbrUnits, ci);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _ci$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nbrUnits$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR _structUnitNo$[esp-4]
  0000c	50		 push	 eax
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR _buf$[esp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 _EncryptionThreadPoolDoWork
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 1374 : }

  0001e	c3		 ret	 0
_EncryptDataUnits ENDP
_TEXT	ENDS
PUBLIC	_DecryptDataUnits
; Function compile flags: /Ogtpy
;	COMDAT _DecryptDataUnits
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_structUnitNo$ = 12					; size = 4
_nbrUnits$ = 16						; size = 4
_ci$ = 20						; size = 4
_DecryptDataUnits PROC					; COMDAT

; 1596 : 	EncryptionThreadPoolDoWork (DecryptDataUnitsWork, buf, structUnitNo, nbrUnits, ci);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _ci$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nbrUnits$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR _structUnitNo$[esp-4]
  0000c	50		 push	 eax
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR _buf$[esp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 _EncryptionThreadPoolDoWork
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 1597 : }

  0001e	c3		 ret	 0
_DecryptDataUnits ENDP
_TEXT	ENDS
PUBLIC	_IsAesHwCpuSupported
EXTRN	_is_aes_hw_cpu_supported:PROC
; Function compile flags: /Ogtpy
;	COMDAT _IsAesHwCpuSupported
_TEXT	SEGMENT
_IsAesHwCpuSupported PROC				; COMDAT

; 1844 : 	static BOOL state = FALSE;
; 1845 : 	static BOOL stateValid = FALSE;
; 1846 : 
; 1847 : 	if (!stateValid)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 0
  00007	75 1c		 jne	 SHORT $LN1@IsAesHwCpu

; 1848 : 	{
; 1849 : 		state = is_aes_hw_cpu_supported() ? TRUE : FALSE;

  00009	e8 00 00 00 00	 call	 _is_aes_hw_cpu_supported
  0000e	33 c9		 xor	 ecx, ecx
  00010	84 c0		 test	 al, al
  00012	0f 95 c1	 setne	 cl

; 1850 : 		stateValid = TRUE;

  00015	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 1
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, ecx
$LN1@IsAesHwCpu:

; 1851 : 	}
; 1852 : 
; 1853 : 	return state && !HwEncryptionDisabled;

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, 0
  0002c	74 0f		 je	 SHORT $LN4@IsAesHwCpu
  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _HwEncryptionDisabled, 0
  00035	75 06		 jne	 SHORT $LN4@IsAesHwCpu
  00037	b8 01 00 00 00	 mov	 eax, 1

; 1854 : }

  0003c	c3		 ret	 0
$LN4@IsAesHwCpu:

; 1851 : 	}
; 1852 : 
; 1853 : 	return state && !HwEncryptionDisabled;

  0003d	33 c0		 xor	 eax, eax

; 1854 : }

  0003f	c3		 ret	 0
_IsAesHwCpuSupported ENDP
_TEXT	ENDS
PUBLIC	_EnableHwEncryption
; Function compile flags: /Ogtpy
;	COMDAT _EnableHwEncryption
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_EnableHwEncryption PROC				; COMDAT

; 1858 : #if defined (TC_WINDOWS_BOOT)
; 1859 : 	if (enable)
; 1860 : 		aes_hw_cpu_enable_sse();
; 1861 : #endif
; 1862 : 
; 1863 : 	HwEncryptionDisabled = !enable;

  00000	33 c0		 xor	 eax, eax
  00002	39 44 24 04	 cmp	 DWORD PTR _enable$[esp-4], eax
  00006	0f 94 c0	 sete	 al
  00009	a3 00 00 00 00	 mov	 DWORD PTR _HwEncryptionDisabled, eax

; 1864 : }

  0000e	c3		 ret	 0
_EnableHwEncryption ENDP
_TEXT	ENDS
PUBLIC	_IsHwEncryptionEnabled
; Function compile flags: /Ogtpy
;	COMDAT _IsHwEncryptionEnabled
_TEXT	SEGMENT
_IsHwEncryptionEnabled PROC				; COMDAT

; 1868 : 	return !HwEncryptionDisabled;

  00000	33 c0		 xor	 eax, eax
  00002	39 05 00 00 00
	00		 cmp	 DWORD PTR _HwEncryptionDisabled, eax
  00008	0f 94 c0	 sete	 al

; 1869 : }

  0000b	c3		 ret	 0
_IsHwEncryptionEnabled ENDP
_TEXT	ENDS
PUBLIC	_CipherInit
EXTRN	_TripleDesSetKey:PROC
EXTRN	_Cast5SetKey:PROC
EXTRN	_BlowfishSetKey:PROC
EXTRN	_twofish_set_key:PROC
EXTRN	_serpent_set_key:PROC
EXTRN	_aes_decrypt_key256:PROC
EXTRN	_aes_encrypt_key256:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CipherInit
_TEXT	SEGMENT
_retVal$ = -4						; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_CipherInit PROC					; COMDAT

; 115  : {

  00000	51		 push	 ecx

; 116  : 	int retVal = ERR_SUCCESS;
; 117  : 
; 118  : 	switch (cipher)

  00001	8b 44 24 08	 mov	 eax, DWORD PTR _cipher$[esp]
  00005	48		 dec	 eax
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _retVal$[esp+12], 0
  00010	83 f8 05	 cmp	 eax, 5
  00013	77 35		 ja	 SHORT $LN1@CipherInit
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@CipherInit[eax*4]
$LN11@CipherInit:

; 119  : 	{
; 120  : 	case AES:
; 121  : #ifndef TC_WINDOWS_BOOT
; 122  : 		if (aes_encrypt_key256 (key, (aes_encrypt_ctx *) ks) != EXIT_SUCCESS)

  0001c	8b 74 24 18	 mov	 esi, DWORD PTR _ks$[esp+8]
  00020	8b 7c 24 14	 mov	 edi, DWORD PTR _key$[esp+8]
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _aes_encrypt_key256
  0002b	83 c4 08	 add	 esp, 8
  0002e	85 c0		 test	 eax, eax

; 123  : 			return ERR_CIPHER_INIT_FAILURE;

  00030	75 18		 jne	 SHORT $LN1@CipherInit

; 124  : 
; 125  : 		if (aes_decrypt_key256 (key, (aes_decrypt_ctx *) (ks + sizeof(aes_encrypt_ctx))) != EXIT_SUCCESS)

  00032	81 c6 f4 00 00
	00		 add	 esi, 244		; 000000f4H
  00038	56		 push	 esi
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 _aes_decrypt_key256
  0003f	83 c4 08	 add	 esp, 8
  00042	85 c0		 test	 eax, eax
  00044	0f 84 22 01 00
	00		 je	 $LN16@CipherInit
$LN1@CipherInit:
  0004a	5f		 pop	 edi

; 162  : 
; 163  : 		break;
; 164  : 
; 165  : #endif	// TC_WINDOWS_BOOT
; 166  : 
; 167  : 	default:
; 168  : 		// Unknown/wrong cipher ID
; 169  : 		return ERR_CIPHER_INIT_FAILURE;

  0004b	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00050	5e		 pop	 esi

; 173  : }

  00051	59		 pop	 ecx
  00052	c3		 ret	 0
$LN8@CipherInit:

; 126  : 			return ERR_CIPHER_INIT_FAILURE;
; 127  : #else
; 128  : 		if (aes_set_key (key, (length_type) CipherGetKeySize(AES), (aes_context *) ks) != 0)
; 129  : 			return ERR_CIPHER_INIT_FAILURE;
; 130  : #endif
; 131  : 		break;
; 132  : 
; 133  : 	case SERPENT:
; 134  : 		serpent_set_key (key, CipherGetKeySize(SERPENT) * 8, ks);

  00053	8b 44 24 18	 mov	 eax, DWORD PTR _ks$[esp+8]
  00057	50		 push	 eax
  00058	6a 02		 push	 2
  0005a	e8 00 00 00 00	 call	 _CipherGetKeySize
  0005f	8b 4c 24 1c	 mov	 ecx, DWORD PTR _key$[esp+16]
  00063	03 c0		 add	 eax, eax
  00065	03 c0		 add	 eax, eax
  00067	83 c4 04	 add	 esp, 4
  0006a	03 c0		 add	 eax, eax
  0006c	50		 push	 eax
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _serpent_set_key

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  00073	8b 44 24 14	 mov	 eax, DWORD PTR _retVal$[esp+24]
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 173  : }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
$LN7@CipherInit:

; 135  : 		break;
; 136  : 		
; 137  : 	case TWOFISH:
; 138  : 		twofish_set_key ((TwofishInstance *)ks, (const u4byte *)key, CipherGetKeySize(TWOFISH) * 8);

  0007e	6a 03		 push	 3
  00080	e8 00 00 00 00	 call	 _CipherGetKeySize
  00085	8b 54 24 18	 mov	 edx, DWORD PTR _key$[esp+12]
  00089	03 c0		 add	 eax, eax
  0008b	03 c0		 add	 eax, eax
  0008d	03 c0		 add	 eax, eax
  0008f	50		 push	 eax
  00090	8b 44 24 20	 mov	 eax, DWORD PTR _ks$[esp+16]
  00094	52		 push	 edx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _twofish_set_key

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  0009b	8b 44 24 18	 mov	 eax, DWORD PTR _retVal$[esp+28]
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi

; 173  : }

  000a4	59		 pop	 ecx
  000a5	c3		 ret	 0
$LN6@CipherInit:

; 139  : 		break;
; 140  : 
; 141  : #ifndef TC_WINDOWS_BOOT
; 142  : 		
; 143  : 	case BLOWFISH:
; 144  : 		/* Deprecated/legacy */
; 145  : 		BlowfishSetKey ((BF_KEY *)ks, CipherGetKeySize(BLOWFISH), key);

  000a6	8b 4c 24 14	 mov	 ecx, DWORD PTR _key$[esp+8]
  000aa	51		 push	 ecx
  000ab	6a 04		 push	 4
  000ad	e8 00 00 00 00	 call	 _CipherGetKeySize
  000b2	8b 54 24 20	 mov	 edx, DWORD PTR _ks$[esp+16]
  000b6	83 c4 04	 add	 esp, 4
  000b9	50		 push	 eax
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 _BlowfishSetKey

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  000c0	8b 44 24 14	 mov	 eax, DWORD PTR _retVal$[esp+24]
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi

; 173  : }

  000c9	59		 pop	 ecx
  000ca	c3		 ret	 0
$LN5@CipherInit:

; 146  : 		break;
; 147  : 
; 148  : 	case CAST:
; 149  : 		/* Deprecated/legacy */
; 150  : 		Cast5SetKey ((CAST_KEY *) ks, CipherGetKeySize(CAST), key);

  000cb	8b 44 24 14	 mov	 eax, DWORD PTR _key$[esp+8]
  000cf	50		 push	 eax
  000d0	6a 05		 push	 5
  000d2	e8 00 00 00 00	 call	 _CipherGetKeySize
  000d7	8b 4c 24 20	 mov	 ecx, DWORD PTR _ks$[esp+16]
  000db	83 c4 04	 add	 esp, 4
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _Cast5SetKey

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  000e5	8b 44 24 14	 mov	 eax, DWORD PTR _retVal$[esp+24]
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi

; 173  : }

  000ee	59		 pop	 ecx
  000ef	c3		 ret	 0
$LN4@CipherInit:

; 151  : 		break;
; 152  : 
; 153  : 	case TRIPLEDES:
; 154  : 		/* Deprecated/legacy */
; 155  : 		TripleDesSetKey (key, CipherGetKeySize (TRIPLEDES), (TDES_KEY *) ks);

  000f0	8b 54 24 18	 mov	 edx, DWORD PTR _ks$[esp+8]
  000f4	53		 push	 ebx
  000f5	55		 push	 ebp
  000f6	52		 push	 edx
  000f7	6a 06		 push	 6
  000f9	e8 00 00 00 00	 call	 _CipherGetKeySize
  000fe	8b 74 24 24	 mov	 esi, DWORD PTR _key$[esp+24]
  00102	83 c4 04	 add	 esp, 4
  00105	50		 push	 eax
  00106	56		 push	 esi
  00107	e8 00 00 00 00	 call	 _TripleDesSetKey

; 156  : 
; 157  : 		// Verify whether all three DES keys are mutually different
; 158  : 		if (((*((__int64 *) key) ^ *((__int64 *) key+1)) & 0xFEFEFEFEFEFEFEFEULL) == 0
; 159  : 		|| ((*((__int64 *) key+1) ^ *((__int64 *) key+2)) & 0xFEFEFEFEFEFEFEFEULL) == 0
; 160  : 		|| ((*((__int64 *) key) ^ *((__int64 *) key+2)) & 0xFEFEFEFEFEFEFEFEULL) == 0)

  0010c	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0010e	8b 6e 04	 mov	 ebp, DWORD PTR [esi+4]
  00111	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00114	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00117	8b c3		 mov	 eax, ebx
  00119	8b cd		 mov	 ecx, ebp
  0011b	33 c2		 xor	 eax, edx
  0011d	33 cf		 xor	 ecx, edi
  0011f	25 fe fe fe fe	 and	 eax, -16843010		; fefefefeH
  00124	81 e1 fe fe fe
	fe		 and	 ecx, -16843010		; fefefefeH
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	0b c1		 or	 eax, ecx
  0012f	74 31		 je	 SHORT $LN2@CipherInit
  00131	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00134	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  00137	8b c1		 mov	 eax, ecx
  00139	33 c2		 xor	 eax, edx
  0013b	8b d6		 mov	 edx, esi
  0013d	33 d7		 xor	 edx, edi
  0013f	25 fe fe fe fe	 and	 eax, -16843010		; fefefefeH
  00144	81 e2 fe fe fe
	fe		 and	 edx, -16843010		; fefefefeH
  0014a	0b c2		 or	 eax, edx
  0014c	74 14		 je	 SHORT $LN2@CipherInit
  0014e	33 cb		 xor	 ecx, ebx
  00150	33 f5		 xor	 esi, ebp
  00152	81 e1 fe fe fe
	fe		 and	 ecx, -16843010		; fefefefeH
  00158	81 e6 fe fe fe
	fe		 and	 esi, -16843010		; fefefefeH
  0015e	0b ce		 or	 ecx, esi
  00160	75 08		 jne	 SHORT $LN17@CipherInit
$LN2@CipherInit:

; 161  : 			retVal = ERR_CIPHER_INIT_WEAK_KEY;		// Non-fatal error

  00162	c7 44 24 10 12
	00 00 00	 mov	 DWORD PTR _retVal$[esp+20], 18 ; 00000012H
$LN17@CipherInit:
  0016a	5d		 pop	 ebp
  0016b	5b		 pop	 ebx
$LN16@CipherInit:

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  0016c	8b 44 24 08	 mov	 eax, DWORD PTR _retVal$[esp+12]
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi

; 173  : }

  00172	59		 pop	 ecx
  00173	c3		 ret	 0
$LN19@CipherInit:
  00174	00 00 00 00	 DD	 $LN11@CipherInit
  00178	00 00 00 00	 DD	 $LN8@CipherInit
  0017c	00 00 00 00	 DD	 $LN7@CipherInit
  00180	00 00 00 00	 DD	 $LN6@CipherInit
  00184	00 00 00 00	 DD	 $LN5@CipherInit
  00188	00 00 00 00	 DD	 $LN4@CipherInit
_CipherInit ENDP
_TEXT	ENDS
PUBLIC	_EncipherBlock
EXTRN	_TripleDesEncrypt:PROC
EXTRN	_Cast5Encrypt:PROC
EXTRN	_BlowfishEncryptLE:PROC
EXTRN	_serpent_encrypt:PROC
EXTRN	_twofish_encrypt:PROC
EXTRN	_aes_encrypt:PROC
EXTRN	_aes_hw_cpu_encrypt:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncipherBlock
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_data$ = 12						; size = 4
_ks$ = 16						; size = 4
_EncipherBlock PROC					; COMDAT

; 177  : 	switch (cipher)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _cipher$[esp-4]
  00004	48		 dec	 eax
  00005	83 f8 05	 cmp	 eax, 5
  00008	0f 87 92 00 00
	00		 ja	 $LN1@EncipherBl
  0000e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@EncipherBl[eax*4]
$LN9@EncipherBl:

; 178  : 	{
; 179  : 	case AES:	
; 180  : 		// In 32-bit kernel mode, due to KeSaveFloatingPointState() overhead, AES instructions can be used only when processing the whole data unit.
; 181  : #if (defined (_WIN64) || !defined (TC_WINDOWS_DRIVER)) && !defined (TC_WINDOWS_BOOT)
; 182  : 		if (IsAesHwCpuSupported())

  00015	e8 00 00 00 00	 call	 _IsAesHwCpuSupported
  0001a	85 c0		 test	 eax, eax

; 183  : 			aes_hw_cpu_encrypt (ks, data);

  0001c	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00020	74 0f		 je	 SHORT $LN8@EncipherBl
  00022	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  00026	50		 push	 eax
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _aes_hw_cpu_encrypt
  0002d	83 c4 08	 add	 esp, 8

; 197  : 	}
; 198  : }

  00030	c3		 ret	 0
$LN8@EncipherBl:

; 184  : 		else
; 185  : #endif
; 186  : 			aes_encrypt (data, data, ks);

  00031	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  00035	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  00039	e9 00 00 00 00	 jmp	 _aes_encrypt
$LN6@EncipherBl:

; 187  : 		break;
; 188  : 
; 189  : 	case TWOFISH:		twofish_encrypt (ks, data, data); break;

  0003e	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00042	50		 push	 eax
  00043	50		 push	 eax
  00044	8b 44 24 14	 mov	 eax, DWORD PTR _ks$[esp+4]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _twofish_encrypt
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 197  : 	}
; 198  : }

  00051	c3		 ret	 0
$LN5@EncipherBl:

; 190  : 	case SERPENT:		serpent_encrypt (data, data, ks); break;

  00052	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00056	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  0005a	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  0005e	e9 00 00 00 00	 jmp	 _serpent_encrypt
$LN4@EncipherBl:

; 191  : #ifndef TC_WINDOWS_BOOT
; 192  : 	case BLOWFISH:		BlowfishEncryptLE (data, data, ks, 1); break;	// Deprecated/legacy

  00063	8b 54 24 0c	 mov	 edx, DWORD PTR _ks$[esp-4]
  00067	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  0006b	6a 01		 push	 1
  0006d	52		 push	 edx
  0006e	50		 push	 eax
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _BlowfishEncryptLE
  00075	83 c4 10	 add	 esp, 16			; 00000010H

; 197  : 	}
; 198  : }

  00078	c3		 ret	 0
$LN3@EncipherBl:

; 193  : 	case CAST:			Cast5Encrypt (data, data, ks); break;			// Deprecated/legacy

  00079	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  0007d	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  00081	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  00085	e9 00 00 00 00	 jmp	 _Cast5Encrypt
$LN2@EncipherBl:

; 194  : 	case TRIPLEDES:		TripleDesEncrypt (data, data, ks, 1); break;	// Deprecated/legacy

  0008a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  0008e	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00092	6a 01		 push	 1
  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _TripleDesEncrypt
  0009c	83 c4 10	 add	 esp, 16			; 00000010H

; 197  : 	}
; 198  : }

  0009f	c3		 ret	 0
$LN1@EncipherBl:

; 195  : #endif
; 196  : 	default:			TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID

  000a0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 197  : 	}
; 198  : }

  000a7	c3		 ret	 0
$LN15@EncipherBl:
  000a8	00 00 00 00	 DD	 $LN9@EncipherBl
  000ac	00 00 00 00	 DD	 $LN5@EncipherBl
  000b0	00 00 00 00	 DD	 $LN6@EncipherBl
  000b4	00 00 00 00	 DD	 $LN4@EncipherBl
  000b8	00 00 00 00	 DD	 $LN3@EncipherBl
  000bc	00 00 00 00	 DD	 $LN2@EncipherBl
_EncipherBlock ENDP
_TEXT	ENDS
PUBLIC	_EncipherBlocks
EXTRN	_aes_hw_cpu_encrypt_32_blocks:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncipherBlocks
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_dataPtr$ = 12						; size = 4
_ks$ = 16						; size = 4
_blockCount$ = 20					; size = 4
_EncipherBlocks PROC					; COMDAT

; 203  : {

  00000	53		 push	 ebx

; 204  : 	byte *data = dataPtr;
; 205  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 206  : 	KFLOATING_SAVE floatingPointState;
; 207  : #endif
; 208  : 
; 209  : 	if (cipher == AES
; 210  : 		&& (blockCount & (32 - 1)) == 0
; 211  : 		&& IsAesHwCpuSupported()
; 212  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 213  : 		&& NT_SUCCESS (KeSaveFloatingPointState (&floatingPointState))
; 214  : #endif
; 215  : 		)

  00001	8b 5c 24 14	 mov	 ebx, DWORD PTR _blockCount$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR _dataPtr$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR _cipher$[esp+8]
  0000f	83 ff 01	 cmp	 edi, 1
  00012	75 36		 jne	 SHORT $LN6@EncipherBl@2
  00014	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00017	75 31		 jne	 SHORT $LN6@EncipherBl@2
  00019	e8 00 00 00 00	 call	 _IsAesHwCpuSupported
  0001e	85 c0		 test	 eax, eax
  00020	74 28		 je	 SHORT $LN6@EncipherBl@2

; 216  : 	{
; 217  : 		while (blockCount > 0)

  00022	85 db		 test	 ebx, ebx
  00024	76 51		 jbe	 SHORT $LN12@EncipherBl@2
  00026	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  00029	8b 5c 24 18	 mov	 ebx, DWORD PTR _ks$[esp+8]
  0002d	c1 ef 05	 shr	 edi, 5
  00030	47		 inc	 edi
$LL5@EncipherBl@2:

; 218  : 		{
; 219  : 			aes_hw_cpu_encrypt_32_blocks (ks, data);

  00031	56		 push	 esi
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _aes_hw_cpu_encrypt_32_blocks
  00038	83 c4 08	 add	 esp, 8

; 220  : 
; 221  : 			data += 32 * 16;

  0003b	81 c6 00 02 00
	00		 add	 esi, 512		; 00000200H
  00041	83 ef 01	 sub	 edi, 1
  00044	75 eb		 jne	 SHORT $LL5@EncipherBl@2
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 236  : 		}
; 237  : 	}
; 238  : }

  00049	c3		 ret	 0
$LN6@EncipherBl@2:
  0004a	55		 push	 ebp

; 222  : 			blockCount -= 32;
; 223  : 		}
; 224  : 
; 225  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 226  : 		KeRestoreFloatingPointState (&floatingPointState);
; 227  : #endif
; 228  : 	}
; 229  : 	else
; 230  : 	{
; 231  : 		size_t blockSize = CipherGetBlockSize (cipher);

  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00051	83 c4 04	 add	 esp, 4
  00054	8b e8		 mov	 ebp, eax

; 232  : 		while (blockCount-- > 0)

  00056	85 db		 test	 ebx, ebx
  00058	76 1c		 jbe	 SHORT $LN14@EncipherBl@2
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL2@EncipherBl@2:

; 233  : 		{
; 234  : 			EncipherBlock (cipher, data, ks);

  00060	8b 44 24 1c	 mov	 eax, DWORD PTR _ks$[esp+12]
  00064	50		 push	 eax
  00065	56		 push	 esi
  00066	57		 push	 edi
  00067	4b		 dec	 ebx
  00068	e8 00 00 00 00	 call	 _EncipherBlock
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  : 			data += blockSize;

  00070	03 f5		 add	 esi, ebp
  00072	85 db		 test	 ebx, ebx
  00074	77 ea		 ja	 SHORT $LL2@EncipherBl@2
$LN14@EncipherBl@2:
  00076	5d		 pop	 ebp
$LN12@EncipherBl@2:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 236  : 		}
; 237  : 	}
; 238  : }

  0007a	c3		 ret	 0
_EncipherBlocks ENDP
_TEXT	ENDS
PUBLIC	_DecipherBlock
EXTRN	_Cast5Decrypt:PROC
EXTRN	_aes_decrypt:PROC
EXTRN	_aes_hw_cpu_decrypt:PROC
EXTRN	_twofish_decrypt:PROC
EXTRN	_serpent_decrypt:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DecipherBlock
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_data$ = 12						; size = 4
_ks$ = 16						; size = 4
_DecipherBlock PROC					; COMDAT

; 244  : 	switch (cipher)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _cipher$[esp-4]
  00004	48		 dec	 eax
  00005	83 f8 05	 cmp	 eax, 5
  00008	0f 87 a9 00 00
	00		 ja	 $LN1@DecipherBl
  0000e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@DecipherBl[eax*4]
$LN9@DecipherBl:

; 245  : 	{
; 246  : 	case SERPENT:	serpent_decrypt (data, data, ks); break;

  00015	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00019	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  0001d	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  00021	e9 00 00 00 00	 jmp	 _serpent_decrypt
$LN8@DecipherBl:

; 247  : 	case TWOFISH:	twofish_decrypt (ks, data, data); break;

  00026	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  0002a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  0002e	50		 push	 eax
  0002f	50		 push	 eax
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _twofish_decrypt
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 266  : 	}
; 267  : }

  00039	c3		 ret	 0
$LN7@DecipherBl:

; 248  : #ifndef TC_WINDOWS_BOOT
; 249  : 
; 250  : 	case AES:
; 251  : #if defined (_WIN64) || !defined (TC_WINDOWS_DRIVER)
; 252  : 		if (IsAesHwCpuSupported())

  0003a	e8 00 00 00 00	 call	 _IsAesHwCpuSupported
  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN6@DecipherBl

; 253  : 			aes_hw_cpu_decrypt ((byte *) ks + sizeof (aes_encrypt_ctx), data);

  00043	8b 54 24 08	 mov	 edx, DWORD PTR _data$[esp-4]
  00047	8b 44 24 0c	 mov	 eax, DWORD PTR _ks$[esp-4]
  0004b	52		 push	 edx
  0004c	05 f4 00 00 00	 add	 eax, 244		; 000000f4H
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _aes_hw_cpu_decrypt
  00057	83 c4 08	 add	 esp, 8

; 266  : 	}
; 267  : }

  0005a	c3		 ret	 0
$LN6@DecipherBl:

; 254  : 		else
; 255  : #endif
; 256  : 			aes_decrypt (data, data, (void *) ((char *) ks + sizeof(aes_encrypt_ctx)));

  0005b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  0005f	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00063	81 c1 f4 00 00
	00		 add	 ecx, 244		; 000000f4H
  00069	89 4c 24 0c	 mov	 DWORD PTR _ks$[esp-4], ecx
  0006d	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  00071	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  00075	e9 00 00 00 00	 jmp	 _aes_decrypt
$LN4@DecipherBl:

; 257  : 		break;
; 258  : 
; 259  : 	case BLOWFISH:	BlowfishEncryptLE (data, data, ks, 0); break;	// Deprecated/legacy

  0007a	8b 54 24 0c	 mov	 edx, DWORD PTR _ks$[esp-4]
  0007e	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00082	6a 00		 push	 0
  00084	52		 push	 edx
  00085	50		 push	 eax
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _BlowfishEncryptLE
  0008c	83 c4 10	 add	 esp, 16			; 00000010H

; 266  : 	}
; 267  : }

  0008f	c3		 ret	 0
$LN3@DecipherBl:

; 260  : 	case CAST:		Cast5Decrypt (data, data, ks); break;			// Deprecated/legacy

  00090	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  00094	89 44 24 08	 mov	 DWORD PTR _data$[esp-4], eax
  00098	89 44 24 04	 mov	 DWORD PTR _cipher$[esp-4], eax
  0009c	e9 00 00 00 00	 jmp	 _Cast5Decrypt
$LN2@DecipherBl:

; 261  : 	case TRIPLEDES:	TripleDesEncrypt (data, data, ks, 0); break;	// Deprecated/legacy

  000a1	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  000a5	8b 44 24 08	 mov	 eax, DWORD PTR _data$[esp-4]
  000a9	6a 00		 push	 0
  000ab	51		 push	 ecx
  000ac	50		 push	 eax
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _TripleDesEncrypt
  000b3	83 c4 10	 add	 esp, 16			; 00000010H

; 266  : 	}
; 267  : }

  000b6	c3		 ret	 0
$LN1@DecipherBl:

; 262  : #else
; 263  : 	case AES:		aes_decrypt (data, data, ks); break;
; 264  : #endif
; 265  : 	default:		TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID

  000b7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 266  : 	}
; 267  : }

  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN15@DecipherBl:
  000c0	00 00 00 00	 DD	 $LN7@DecipherBl
  000c4	00 00 00 00	 DD	 $LN9@DecipherBl
  000c8	00 00 00 00	 DD	 $LN8@DecipherBl
  000cc	00 00 00 00	 DD	 $LN4@DecipherBl
  000d0	00 00 00 00	 DD	 $LN3@DecipherBl
  000d4	00 00 00 00	 DD	 $LN2@DecipherBl
_DecipherBlock ENDP
_TEXT	ENDS
PUBLIC	_DecipherBlocks
EXTRN	_aes_hw_cpu_decrypt_32_blocks:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DecipherBlocks
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_dataPtr$ = 12						; size = 4
_ks$ = 16						; size = 4
_blockCount$ = 20					; size = 4
_DecipherBlocks PROC					; COMDAT

; 272  : {

  00000	53		 push	 ebx

; 273  : 	byte *data = dataPtr;
; 274  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 275  : 	KFLOATING_SAVE floatingPointState;
; 276  : #endif
; 277  : 
; 278  : 	if (cipher == AES
; 279  : 		&& (blockCount & (32 - 1)) == 0
; 280  : 		&& IsAesHwCpuSupported()
; 281  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 282  : 		&& NT_SUCCESS (KeSaveFloatingPointState (&floatingPointState))
; 283  : #endif
; 284  : 		)

  00001	8b 5c 24 14	 mov	 ebx, DWORD PTR _blockCount$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	8b 74 24 14	 mov	 esi, DWORD PTR _dataPtr$[esp+8]
  0000b	57		 push	 edi
  0000c	8b 7c 24 14	 mov	 edi, DWORD PTR _cipher$[esp+12]
  00010	83 ff 01	 cmp	 edi, 1
  00013	75 3d		 jne	 SHORT $LN6@DecipherBl@2
  00015	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00018	75 38		 jne	 SHORT $LN6@DecipherBl@2
  0001a	e8 00 00 00 00	 call	 _IsAesHwCpuSupported
  0001f	85 c0		 test	 eax, eax
  00021	74 2f		 je	 SHORT $LN6@DecipherBl@2

; 285  : 	{
; 286  : 		while (blockCount > 0)

  00023	85 db		 test	 ebx, ebx
  00025	76 50		 jbe	 SHORT $LN12@DecipherBl@2
  00027	8b 6c 24 1c	 mov	 ebp, DWORD PTR _ks$[esp+12]
  0002b	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  0002e	c1 ef 05	 shr	 edi, 5
  00031	81 c5 f4 00 00
	00		 add	 ebp, 244		; 000000f4H
  00037	47		 inc	 edi
$LL5@DecipherBl@2:

; 287  : 		{
; 288  : 			aes_hw_cpu_decrypt_32_blocks ((byte *) ks + sizeof (aes_encrypt_ctx), data);

  00038	56		 push	 esi
  00039	55		 push	 ebp
  0003a	e8 00 00 00 00	 call	 _aes_hw_cpu_decrypt_32_blocks
  0003f	83 c4 08	 add	 esp, 8

; 289  : 
; 290  : 			data += 32 * 16;

  00042	81 c6 00 02 00
	00		 add	 esi, 512		; 00000200H
  00048	83 ef 01	 sub	 edi, 1
  0004b	75 eb		 jne	 SHORT $LL5@DecipherBl@2
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	5b		 pop	 ebx

; 305  : 		}
; 306  : 	}
; 307  : }

  00051	c3		 ret	 0
$LN6@DecipherBl@2:

; 291  : 			blockCount -= 32;
; 292  : 		}
; 293  : 
; 294  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 295  : 		KeRestoreFloatingPointState (&floatingPointState);
; 296  : #endif
; 297  : 	}
; 298  : 	else
; 299  : 	{
; 300  : 		size_t blockSize = CipherGetBlockSize (cipher);

  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00058	83 c4 04	 add	 esp, 4
  0005b	8b e8		 mov	 ebp, eax

; 301  : 		while (blockCount-- > 0)

  0005d	85 db		 test	 ebx, ebx
  0005f	76 16		 jbe	 SHORT $LN12@DecipherBl@2
$LL2@DecipherBl@2:

; 302  : 		{
; 303  : 			DecipherBlock (cipher, data, ks);

  00061	8b 44 24 1c	 mov	 eax, DWORD PTR _ks$[esp+12]
  00065	50		 push	 eax
  00066	56		 push	 esi
  00067	57		 push	 edi
  00068	4b		 dec	 ebx
  00069	e8 00 00 00 00	 call	 _DecipherBlock
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  : 			data += blockSize;

  00071	03 f5		 add	 esi, ebp
  00073	85 db		 test	 ebx, ebx
  00075	77 ea		 ja	 SHORT $LL2@DecipherBl@2
$LN12@DecipherBl@2:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5d		 pop	 ebp
  0007a	5b		 pop	 ebx

; 305  : 		}
; 306  : 	}
; 307  : }

  0007b	c3		 ret	 0
_DecipherBlocks ENDP
_TEXT	ENDS
PUBLIC	_CipherSupportsIntraDataUnitParallelization
; Function compile flags: /Ogtpy
;	COMDAT _CipherSupportsIntraDataUnitParallelization
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_CipherSupportsIntraDataUnitParallelization PROC	; COMDAT

; 348  : 	return cipher == AES && IsAesHwCpuSupported();

  00000	83 7c 24 04 01	 cmp	 DWORD PTR _cipher$[esp-4], 1
  00005	75 3d		 jne	 SHORT $LN3@CipherSupp
  00007	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 0
  0000e	75 1c		 jne	 SHORT $LN5@CipherSupp
  00010	e8 00 00 00 00	 call	 _is_aes_hw_cpu_supported
  00015	33 c9		 xor	 ecx, ecx
  00017	84 c0		 test	 al, al
  00019	0f 95 c1	 setne	 cl
  0001c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 1
  00026	89 0d 00 00 00
	00		 mov	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, ecx
$LN5@CipherSupp:
  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, 0
  00033	74 0f		 je	 SHORT $LN3@CipherSupp
  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _HwEncryptionDisabled, 0
  0003c	75 06		 jne	 SHORT $LN3@CipherSupp
  0003e	b8 01 00 00 00	 mov	 eax, 1

; 349  : }

  00043	c3		 ret	 0
$LN3@CipherSupp:

; 348  : 	return cipher == AES && IsAesHwCpuSupported();

  00044	33 c0		 xor	 eax, eax

; 349  : }

  00046	c3		 ret	 0
_CipherSupportsIntraDataUnitParallelization ENDP
_TEXT	ENDS
PUBLIC	_EAGetCount
; Function compile flags: /Ogtpy
;	COMDAT _EAGetCount
_TEXT	SEGMENT
_EAGetCount PROC					; COMDAT

; 364  : 	int ea, count = 0;

  00000	33 c0		 xor	 eax, eax

; 365  : 
; 366  : 	for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  00002	ba 01 00 00 00	 mov	 edx, 1
  00007	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0000c	8d 64 24 00	 npad	 4
$LL9@EAGetCount:

; 367  : 	{
; 368  : 		count++;

  00010	40		 inc	 eax
  00011	42		 inc	 edx
  00012	83 b9 2c 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[ecx+44], 0
  00019	74 07		 je	 SHORT $LN8@EAGetCount
  0001b	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0001e	85 d2		 test	 edx, edx
  00020	75 ee		 jne	 SHORT $LL9@EAGetCount

; 365  : 
; 366  : 	for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

$LN8@EAGetCount:

; 369  : 	}
; 370  : 	return count;
; 371  : }

  00022	c3		 ret	 0
_EAGetCount ENDP
_TEXT	ENDS
PUBLIC	_EAInit
; Function compile flags: /Ogtpy
;	COMDAT _EAInit
_TEXT	SEGMENT
_retVal$ = -4						; size = 4
_ea$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_EAInit	PROC						; COMDAT

; 383  : {

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 384  : 	int c, retVal = ERR_SUCCESS;
; 385  : 
; 386  : 	if (ea == 0)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _ea$[esp+4]
  00006	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _retVal$[esp+8], 0
  0000e	85 ed		 test	 ebp, ebp
  00010	75 06		 jne	 SHORT $LN8@EAInit

; 387  : 		return ERR_CIPHER_INIT_FAILURE;

  00012	8d 45 11	 lea	 eax, DWORD PTR [ebp+17]
  00015	5d		 pop	 ebp

; 405  : }

  00016	59		 pop	 ecx
  00017	c3		 ret	 0
$LN8@EAInit:

; 388  : 
; 389  : 	for (c = EAGetFirstCipher (ea); c != 0; c = EAGetNextCipher (ea, c))

  00018	8b c5		 mov	 eax, ebp
  0001a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	8b b0 00 00 00
	00		 mov	 esi, DWORD PTR _EncryptionAlgorithms[eax]
  00025	57		 push	 edi
  00026	85 f6		 test	 esi, esi
  00028	74 7e		 je	 SHORT $LN5@EAInit
  0002a	8b 7c 24 20	 mov	 edi, DWORD PTR _ks$[esp+16]
  0002e	8b 5c 24 1c	 mov	 ebx, DWORD PTR _key$[esp+16]
$LL7@EAInit:

; 390  : 	{
; 391  : 		switch (CipherInit (c, key, ks))

  00032	57		 push	 edi
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _CipherInit
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	83 e8 11	 sub	 eax, 17			; 00000011H
  00040	0f 84 84 00 00
	00		 je	 $LN2@EAInit
  00046	83 e8 01	 sub	 eax, 1
  00049	75 08		 jne	 SHORT $LN3@EAInit

; 395  : 
; 396  : 		case ERR_CIPHER_INIT_WEAK_KEY:
; 397  : 			retVal = ERR_CIPHER_INIT_WEAK_KEY;		// Non-fatal error

  0004b	c7 44 24 10 12
	00 00 00	 mov	 DWORD PTR _retVal$[esp+20], 18 ; 00000012H
$LN3@EAInit:

; 398  : 			break;
; 399  : 		}
; 400  : 
; 401  : 		key += CipherGetKeySize (c);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00059	33 c0		 xor	 eax, eax
  0005b	85 c9		 test	 ecx, ecx
  0005d	74 15		 je	 SHORT $LN16@EAInit
  0005f	8b d1		 mov	 edx, ecx
$LL18@EAInit:
  00061	3b d6		 cmp	 edx, esi
  00063	74 4d		 je	 SHORT $LN32@EAInit
  00065	40		 inc	 eax
  00066	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00069	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _Ciphers[edx*4]
  00070	85 d2		 test	 edx, edx
  00072	75 ed		 jne	 SHORT $LL18@EAInit
$LN16@EAInit:
  00074	33 c0		 xor	 eax, eax
$LN19@EAInit:
  00076	03 58 0c	 add	 ebx, DWORD PTR [eax+12]

; 402  : 		ks += CipherGetKeyScheduleSize (c);

  00079	33 c0		 xor	 eax, eax
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 14		 je	 SHORT $LN24@EAInit
  0007f	90		 npad	 1
$LL26@EAInit:
  00080	3b ce		 cmp	 ecx, esi
  00082	74 3a		 je	 SHORT $LN33@EAInit
  00084	40		 inc	 eax
  00085	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00088	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0008f	85 c9		 test	 ecx, ecx
  00091	75 ed		 jne	 SHORT $LL26@EAInit
$LN24@EAInit:
  00093	33 c0		 xor	 eax, eax
$LN27@EAInit:
  00095	03 78 10	 add	 edi, DWORD PTR [eax+16]
  00098	56		 push	 esi
  00099	55		 push	 ebp
  0009a	e8 00 00 00 00	 call	 _EAGetNextCipher
  0009f	8b f0		 mov	 esi, eax
  000a1	83 c4 08	 add	 esp, 8
  000a4	85 f6		 test	 esi, esi
  000a6	75 8a		 jne	 SHORT $LL7@EAInit
$LN5@EAInit:

; 403  : 	}
; 404  : 	return retVal;

  000a8	8b 44 24 10	 mov	 eax, DWORD PTR _retVal$[esp+20]
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	5d		 pop	 ebp

; 405  : }

  000b0	59		 pop	 ecx
  000b1	c3		 ret	 0
$LN32@EAInit:

; 398  : 			break;
; 399  : 		}
; 400  : 
; 401  : 		key += CipherGetKeySize (c);

  000b2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000b5	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  000bc	eb b8		 jmp	 SHORT $LN19@EAInit
$LN33@EAInit:

; 402  : 		ks += CipherGetKeyScheduleSize (c);

  000be	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000c1	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  000c8	eb cb		 jmp	 SHORT $LN27@EAInit
$LN2@EAInit:
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 392  : 		{
; 393  : 		case ERR_CIPHER_INIT_FAILURE:
; 394  : 			return ERR_CIPHER_INIT_FAILURE;

  000cd	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  000d2	5d		 pop	 ebp

; 405  : }

  000d3	59		 pop	 ecx
  000d4	c3		 ret	 0
_EAInit	ENDP
_TEXT	ENDS
PUBLIC	_EAInitMode
EXTRN	_Gf64TabInit:PROC
EXTRN	_Gf128Tab64Init:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EAInitMode
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_EAInitMode PROC					; COMDAT

; 411  : {

  00000	56		 push	 esi

; 412  : 	switch (ci->mode)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ci$[esp]
  00005	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00008	48		 dec	 eax
  00009	83 f8 04	 cmp	 eax, 4
  0000c	77 76		 ja	 SHORT $LN1@EAInitMode
  0000e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@EAInitMode[eax*4]
$LN10@EAInitMode:

; 413  : 	{
; 414  : 	case XTS:
; 415  : 		// Secondary key schedule
; 416  : 		if (EAInit (ci->ea, ci->k2, ci->ks2) != ERR_SUCCESS)

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
  00017	8d 86 d4 14 00
	00		 lea	 eax, DWORD PTR [esi+5332]
  0001d	50		 push	 eax
  0001e	8d 8e a8 42 00
	00		 lea	 ecx, DWORD PTR [esi+17064]
  00024	51		 push	 ecx
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 _EAInit
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	85 c0		 test	 eax, eax
  00030	74 59		 je	 SHORT $LN11@EAInitMode

; 417  : 			return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 453  : }

  00035	c3		 ret	 0
$LN8@EAInitMode:

; 418  : 
; 419  : 		/* Note: XTS mode could potentially be initialized with a weak key causing all blocks in one data unit
; 420  : 		on the volume to be tweaked with zero tweaks (i.e. 512 bytes of the volume would be encrypted in ECB
; 421  : 		mode). However, to create a CipherShed volume with such a weak key, each human being on Earth would have
; 422  : 		to create approximately 11,378,125,361,078,862 (about eleven quadrillion) CipherShed volumes (provided 
; 423  : 		that the size of each of the volumes is 1024 terabytes). */
; 424  : 		break;
; 425  : 
; 426  : 	case LRW:
; 427  : 		switch (CipherGetBlockSize (EAGetFirstCipher (ci->ea)))

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0003b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[eax]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00047	83 c4 04	 add	 esp, 4
  0004a	83 f8 08	 cmp	 eax, 8
  0004d	74 1d		 je	 SHORT $LN5@EAInitMode
  0004f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 432  : 
; 433  : 		case 16:
; 434  : 			return Gf128Tab64Init (ci->k2, &ci->gf_ctx);
; 435  : 
; 436  : 		default:
; 437  : 			TC_THROW_FATAL_EXCEPTION;
; 438  : 		}
; 439  : 
; 440  : 		break;

  00052	75 30		 jne	 SHORT $LN1@EAInitMode
  00054	8d 96 a8 29 00
	00		 lea	 edx, DWORD PTR [esi+10664]
  0005a	52		 push	 edx
  0005b	81 c6 a8 42 00
	00		 add	 esi, 17064		; 000042a8H
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _Gf128Tab64Init
  00067	83 c4 08	 add	 esp, 8
  0006a	5e		 pop	 esi

; 453  : }

  0006b	c3		 ret	 0
$LN5@EAInitMode:

; 428  : 		{
; 429  : 		case 8:
; 430  : 			/* Deprecated/legacy */
; 431  : 			return Gf64TabInit (ci->k2, &ci->gf_ctx);

  0006c	8d 86 a8 29 00
	00		 lea	 eax, DWORD PTR [esi+10664]
  00072	50		 push	 eax
  00073	81 c6 a8 42 00
	00		 add	 esi, 17064		; 000042a8H
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _Gf64TabInit
  0007f	83 c4 08	 add	 esp, 8
  00082	5e		 pop	 esi

; 453  : }

  00083	c3		 ret	 0
$LN1@EAInitMode:

; 441  : 
; 442  : 	case CBC:
; 443  : 	case INNER_CBC:
; 444  : 	case OUTER_CBC:
; 445  : 		// The mode does not need to be initialized or is initialized elsewhere 
; 446  : 		return TRUE;
; 447  : 
; 448  : 	default:		
; 449  : 		// Unknown/wrong ID
; 450  : 		TC_THROW_FATAL_EXCEPTION;

  00084	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN11@EAInitMode:

; 451  : 	}
; 452  : 	return TRUE;

  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	5e		 pop	 esi

; 453  : }

  00091	c3		 ret	 0
  00092	8b ff		 npad	 2
$LN17@EAInitMode:
  00094	00 00 00 00	 DD	 $LN10@EAInitMode
  00098	00 00 00 00	 DD	 $LN8@EAInitMode
  0009c	00 00 00 00	 DD	 $LN11@EAInitMode
  000a0	00 00 00 00	 DD	 $LN11@EAInitMode
  000a4	00 00 00 00	 DD	 $LN11@EAInitMode
_EAInitMode ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	_EAGetName
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _EAGetName
_TEXT	SEGMENT
tv224 = -4						; size = 4
_buf$ = 8						; size = 4
tv369 = 12						; size = 4
_ea$ = 12						; size = 4
_EAGetName PROC						; COMDAT

; 458  : {

  00000	51		 push	 ecx

; 459  : 	int i = EAGetLastCipher(ea);

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR _ea$[esp]
  00005	53		 push	 ebx
  00006	8b da		 mov	 ebx, edx
  00008	33 c9		 xor	 ecx, ecx
  0000a	6b db 2c	 imul	 ebx, 44			; 0000002cH
  0000d	55		 push	 ebp
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 5c 24 1c	 mov	 DWORD PTR tv369[esp+16], ebx
  00014	8d 83 00 00 00
	00		 lea	 eax, DWORD PTR _EncryptionAlgorithms[ebx]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@EAGetName:
  00020	8b 30		 mov	 esi, DWORD PTR [eax]
  00022	41		 inc	 ecx
  00023	83 c0 04	 add	 eax, 4
  00026	85 f6		 test	 esi, esi
  00028	75 f6		 jne	 SHORT $LL10@EAGetName
  0002a	8b fa		 mov	 edi, edx
  0002c	6b ff 0b	 imul	 edi, 11			; 0000000bH
  0002f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00032	8b 2c 85 f8 ff
	ff ff		 mov	 ebp, DWORD PTR _EncryptionAlgorithms[eax*4-8]
  00039	89 7c 24 10	 mov	 DWORD PTR tv224[esp+20], edi

; 460  : 	strcpy (buf, (i != 0) ? CipherGetName (i) : "?");

  0003d	85 ed		 test	 ebp, ebp
  0003f	74 0d		 je	 SHORT $LN5@EAGetName
  00041	55		 push	 ebp
  00042	e8 00 00 00 00	 call	 _CipherGetName
  00047	83 c4 04	 add	 esp, 4
  0004a	8b d0		 mov	 edx, eax
  0004c	eb 05		 jmp	 SHORT $LN6@EAGetName
$LN5@EAGetName:
  0004e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
$LN6@EAGetName:
  00053	8b 44 24 18	 mov	 eax, DWORD PTR _buf$[esp+16]
  00057	8b f0		 mov	 esi, eax
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL7@EAGetName:
  00060	8a 0a		 mov	 cl, BYTE PTR [edx]
  00062	88 0e		 mov	 BYTE PTR [esi], cl
  00064	42		 inc	 edx
  00065	46		 inc	 esi
  00066	84 c9		 test	 cl, cl
  00068	75 f6		 jne	 SHORT $LL7@EAGetName
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL2@EAGetName:

; 461  : 
; 462  : 	while (i = EAGetPreviousCipher(ea, i))

  00070	be 01 00 00 00	 mov	 esi, 1
  00075	39 2c bd 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[edi*4], ebp
  0007c	74 20		 je	 SHORT $LN42@EAGetName
  0007e	8b 0c bd 04 00
	00 00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[edi*4+4]
  00085	85 c9		 test	 ecx, ecx
  00087	74 15		 je	 SHORT $LN42@EAGetName
  00089	8d 93 04 00 00
	00		 lea	 edx, DWORD PTR _EncryptionAlgorithms[ebx+4]
  0008f	90		 npad	 1
$LL15@EAGetName:
  00090	46		 inc	 esi
  00091	83 c2 04	 add	 edx, 4
  00094	3b cd		 cmp	 ecx, ebp
  00096	74 0c		 je	 SHORT $LN32@EAGetName
  00098	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0009a	85 c9		 test	 ecx, ecx
  0009c	75 f2		 jne	 SHORT $LL15@EAGetName
$LN42@EAGetName:
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5d		 pop	 ebp
  000a1	5b		 pop	 ebx

; 467  : 
; 468  : 	return buf;
; 469  : }

  000a2	59		 pop	 ecx
  000a3	c3		 ret	 0
$LN32@EAGetName:

; 461  : 
; 462  : 	while (i = EAGetPreviousCipher(ea, i))

  000a4	03 fe		 add	 edi, esi
  000a6	8b 2c bd f8 ff
	ff ff		 mov	 ebp, DWORD PTR _EncryptionAlgorithms[edi*4-8]
  000ad	85 ed		 test	 ebp, ebp
  000af	74 ed		 je	 SHORT $LN42@EAGetName

; 463  : 	{
; 464  : 		strcat (buf, "-");

  000b1	8b f8		 mov	 edi, eax
  000b3	4f		 dec	 edi
$LL44@EAGetName:
  000b4	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000b7	47		 inc	 edi
  000b8	84 c9		 test	 cl, cl
  000ba	75 f8		 jne	 SHORT $LL44@EAGetName
  000bc	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
  000c3	66 89 0f	 mov	 WORD PTR [edi], cx

; 465  : 		strcat (buf, CipherGetName (i));

  000c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Ciphers
  000cc	33 c9		 xor	 ecx, ecx
  000ce	85 d2		 test	 edx, edx
  000d0	74 13		 je	 SHORT $LN22@EAGetName
$LL24@EAGetName:
  000d2	3b d5		 cmp	 edx, ebp
  000d4	74 4f		 je	 SHORT $LN33@EAGetName
  000d6	41		 inc	 ecx
  000d7	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  000da	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _Ciphers[edx*4]
  000e1	85 d2		 test	 edx, edx
  000e3	75 ed		 jne	 SHORT $LL24@EAGetName
$LN22@EAGetName:
  000e5	33 c9		 xor	 ecx, ecx
$LN25@EAGetName:
  000e7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ea	8b d1		 mov	 edx, ecx
  000ec	8d 64 24 00	 npad	 4
$LL45@EAGetName:
  000f0	8a 19		 mov	 bl, BYTE PTR [ecx]
  000f2	41		 inc	 ecx
  000f3	84 db		 test	 bl, bl
  000f5	75 f9		 jne	 SHORT $LL45@EAGetName
  000f7	2b ca		 sub	 ecx, edx
  000f9	8b f8		 mov	 edi, eax
  000fb	8b d9		 mov	 ebx, ecx
  000fd	4f		 dec	 edi
  000fe	8b ff		 npad	 2
$LL46@EAGetName:
  00100	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00103	47		 inc	 edi
  00104	84 c9		 test	 cl, cl
  00106	75 f8		 jne	 SHORT $LL46@EAGetName
  00108	8b cb		 mov	 ecx, ebx
  0010a	c1 e9 02	 shr	 ecx, 2
  0010d	8b f2		 mov	 esi, edx
  0010f	f3 a5		 rep movsd
  00111	8b cb		 mov	 ecx, ebx

; 466  : 	}

  00113	8b 5c 24 1c	 mov	 ebx, DWORD PTR tv369[esp+16]
  00117	83 e1 03	 and	 ecx, 3
  0011a	f3 a4		 rep movsb
  0011c	8b 7c 24 10	 mov	 edi, DWORD PTR tv224[esp+20]
  00120	e9 4b ff ff ff	 jmp	 $LL2@EAGetName
$LN33@EAGetName:

; 465  : 		strcat (buf, CipherGetName (i));

  00125	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00128	8d 0c 8d 00 00
	00 00		 lea	 ecx, DWORD PTR _Ciphers[ecx*4]
  0012f	eb b6		 jmp	 SHORT $LN25@EAGetName
_EAGetName ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_EAGetByName
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EAGetByName
_TEXT	SEGMENT
_n$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_EAGetByName PROC					; COMDAT

; 473  : {

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	53		 push	 ebx

; 474  : 	int ea = EAGetFirst ();

  00015	8b 9c 24 8c 00
	00 00		 mov	 ebx, DWORD PTR _name$[esp+132]
  0001c	56		 push	 esi
  0001d	be 01 00 00 00	 mov	 esi, 1
  00022	57		 push	 edi
  00023	8d 7e 2b	 lea	 edi, DWORD PTR [esi+43]
$LL4@EAGetByNam:

; 475  : 	char n[128];
; 476  : 
; 477  : 	do
; 478  : 	{
; 479  : 		EAGetName (n, ea);

  00026	8d 44 24 0c	 lea	 eax, DWORD PTR _n$[esp+144]
  0002a	56		 push	 esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _EAGetName
  00031	83 c4 08	 add	 esp, 8

; 480  : 		if (strcmp (n, name) == 0)

  00034	8b cb		 mov	 ecx, ebx
  00036	8d 44 24 0c	 lea	 eax, DWORD PTR _n$[esp+144]
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL15@EAGetByNam:
  00040	8a 10		 mov	 dl, BYTE PTR [eax]
  00042	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00044	75 1a		 jne	 SHORT $LN16@EAGetByNam
  00046	84 d2		 test	 dl, dl
  00048	74 12		 je	 SHORT $LN17@EAGetByNam
  0004a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0004d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00050	75 0e		 jne	 SHORT $LN16@EAGetByNam
  00052	83 c0 02	 add	 eax, 2
  00055	83 c1 02	 add	 ecx, 2
  00058	84 d2		 test	 dl, dl
  0005a	75 e4		 jne	 SHORT $LL15@EAGetByNam
$LN17@EAGetByNam:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN18@EAGetByNam
$LN16@EAGetByNam:
  00060	1b c0		 sbb	 eax, eax
  00062	83 d8 ff	 sbb	 eax, -1
$LN18@EAGetByNam:
  00065	85 c0		 test	 eax, eax
  00067	74 2f		 je	 SHORT $LN13@EAGetByNam

; 481  : 			return ea;
; 482  : 	}
; 483  : 	while (ea = EAGetNext (ea));

  00069	83 bf 2c 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[edi+44], 0
  00070	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00073	74 09		 je	 SHORT $LN14@EAGetByNam
  00075	83 c7 2c	 add	 edi, 44			; 0000002cH
  00078	8b f0		 mov	 esi, eax
  0007a	85 c0		 test	 eax, eax
  0007c	75 a8		 jne	 SHORT $LL4@EAGetByNam
$LN14@EAGetByNam:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 484  : 
; 485  : 	return 0;

  00080	33 c0		 xor	 eax, eax
  00082	5b		 pop	 ebx

; 486  : }

  00083	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+132]
  0008a	33 cc		 xor	 ecx, esp
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  00097	c3		 ret	 0
$LN13@EAGetByNam:
  00098	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+144]
  0009f	5f		 pop	 edi
  000a0	8b c6		 mov	 eax, esi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	33 cc		 xor	 ecx, esp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  000b1	c3		 ret	 0
_EAGetByName ENDP
_TEXT	ENDS
PUBLIC	_EAGetKeySize
; Function compile flags: /Ogtpy
;	COMDAT _EAGetKeySize
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetKeySize PROC					; COMDAT

; 492  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 493  : 	int i = EAGetFirstCipher (ea);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _ea$[esp+8]
  00007	8b c6		 mov	 eax, esi
  00009	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0000c	8d a8 00 00 00
	00		 lea	 ebp, DWORD PTR _EncryptionAlgorithms[eax]
  00012	57		 push	 edi
  00013	8b 7d 00	 mov	 edi, DWORD PTR [ebp]

; 494  : 	int size = CipherGetKeySize (i);

  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 _CipherGetKeySize
  0001c	8b de		 mov	 ebx, esi
  0001e	83 c4 04	 add	 esp, 4
  00021	6b db 0b	 imul	 ebx, 11			; 0000000bH
$LL2@EAGetKeySi:

; 495  : 
; 496  : 	while (i = EAGetNextCipher (ea, i))

  00024	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[ebx*4]
  0002b	33 f6		 xor	 esi, esi
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 10		 je	 SHORT $LN27@EAGetKeySi
  00031	8b d5		 mov	 edx, ebp
$LL9@EAGetKeySi:
  00033	46		 inc	 esi
  00034	83 c2 04	 add	 edx, 4
  00037	3b cf		 cmp	 ecx, edi
  00039	74 0b		 je	 SHORT $LN23@EAGetKeySi
  0003b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003d	85 c9		 test	 ecx, ecx
  0003f	75 f2		 jne	 SHORT $LL9@EAGetKeySi
$LN27@EAGetKeySi:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	5b		 pop	 ebx

; 500  : 
; 501  : 	return size;
; 502  : }

  00045	c3		 ret	 0
$LN23@EAGetKeySi:
  00046	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  00049	8b 3c 8d 00 00
	00 00		 mov	 edi, DWORD PTR _EncryptionAlgorithms[ecx*4]
  00050	85 ff		 test	 edi, edi
  00052	74 ed		 je	 SHORT $LN27@EAGetKeySi
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Ciphers
  0005a	33 c9		 xor	 ecx, ecx
  0005c	85 d2		 test	 edx, edx
  0005e	74 13		 je	 SHORT $LN15@EAGetKeySi

; 497  : 	{
; 498  : 		size += CipherGetKeySize (i);

$LL17@EAGetKeySi:
  00060	3b d7		 cmp	 edx, edi
  00062	74 16		 je	 SHORT $LN24@EAGetKeySi
  00064	41		 inc	 ecx
  00065	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00068	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _Ciphers[edx*4]
  0006f	85 d2		 test	 edx, edx
  00071	75 ed		 jne	 SHORT $LL17@EAGetKeySi
$LN15@EAGetKeySi:
  00073	33 c9		 xor	 ecx, ecx
  00075	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 499  : 	}

  00078	eb aa		 jmp	 SHORT $LL2@EAGetKeySi
$LN24@EAGetKeySi:

; 497  : 	{
; 498  : 		size += CipherGetKeySize (i);

  0007a	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0007d	03 04 8d 0c 00
	00 00		 add	 eax, DWORD PTR _Ciphers[ecx*4+12]
  00084	8d 0c 8d 00 00
	00 00		 lea	 ecx, DWORD PTR _Ciphers[ecx*4]

; 499  : 	}

  0008b	eb 97		 jmp	 SHORT $LL2@EAGetKeySi
_EAGetKeySize ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@		; `string'
PUBLIC	??_C@_09OHJJMGAK@inner?9CBC?$AA@		; `string'
PUBLIC	??_C@_09KIMEMFNK@Inner?9CBC?$AA@		; `string'
PUBLIC	??_C@_03PPFAJCFI@CBC?$AA@			; `string'
PUBLIC	??_C@_09CJGJEHAC@outer?9CBC?$AA@		; `string'
PUBLIC	??_C@_09GGDEEENC@Outer?9CBC?$AA@		; `string'
PUBLIC	??_C@_03JFLLPGCL@LRW?$AA@			; `string'
PUBLIC	??_C@_03CKCBIPFF@XTS?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_EAGetModeName
;	COMDAT ??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@
CONST	SEGMENT
??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@ DB '[unknown]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHJJMGAK@inner?9CBC?$AA@
CONST	SEGMENT
??_C@_09OHJJMGAK@inner?9CBC?$AA@ DB 'inner-CBC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIMEMFNK@Inner?9CBC?$AA@
CONST	SEGMENT
??_C@_09KIMEMFNK@Inner?9CBC?$AA@ DB 'Inner-CBC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPFAJCFI@CBC?$AA@
CONST	SEGMENT
??_C@_03PPFAJCFI@CBC?$AA@ DB 'CBC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJGJEHAC@outer?9CBC?$AA@
CONST	SEGMENT
??_C@_09CJGJEHAC@outer?9CBC?$AA@ DB 'outer-CBC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGDEEENC@Outer?9CBC?$AA@
CONST	SEGMENT
??_C@_09GGDEEENC@Outer?9CBC?$AA@ DB 'Outer-CBC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JFLLPGCL@LRW?$AA@
CONST	SEGMENT
??_C@_03JFLLPGCL@LRW?$AA@ DB 'LRW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CKCBIPFF@XTS?$AA@
CONST	SEGMENT
??_C@_03CKCBIPFF@XTS?$AA@ DB 'XTS', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _EAGetModeName
_TEXT	SEGMENT
_eaName$78930 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_ea$ = 8						; size = 4
_mode$ = 12						; size = 4
_capitalLetters$ = 16					; size = 4
_EAGetModeName PROC					; COMDAT

; 529  : {

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 64	 mov	 DWORD PTR __$ArrayPad$[esp+104], eax

; 530  : 	switch (mode)

  0000e	8b 44 24 70	 mov	 eax, DWORD PTR _mode$[esp+100]
  00012	48		 dec	 eax
  00013	83 f8 04	 cmp	 eax, 4
  00016	0f 87 c6 00 00
	00		 ja	 $LN7@EAGetModeN
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@EAGetModeN[eax*4]
$LN6@EAGetModeN:

; 531  : 	{
; 532  : 	case XTS:
; 533  : 
; 534  : 		return "XTS";

  00023	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03CKCBIPFF@XTS?$AA@

; 569  : }

  00028	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  0002c	33 cc		 xor	 ecx, esp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	83 c4 68	 add	 esp, 104		; 00000068H
  00036	c3		 ret	 0
$LN5@EAGetModeN:

; 535  : 
; 536  : 	case LRW:
; 537  : 
; 538  : 		/* Deprecated/legacy */
; 539  : 
; 540  : 		return "LRW";

  00037	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JFLLPGCL@LRW?$AA@

; 569  : }

  0003c	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  00040	33 cc		 xor	 ecx, esp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	83 c4 68	 add	 esp, 104		; 00000068H
  0004a	c3		 ret	 0
$LN4@EAGetModeN:

; 541  : 
; 542  : 	case CBC:
; 543  : 		{
; 544  : 			/* Deprecated/legacy */
; 545  : 
; 546  : 			char eaName[100];
; 547  : 			EAGetName (eaName, ea);

  0004b	8b 44 24 6c	 mov	 eax, DWORD PTR _ea$[esp+100]
  0004f	50		 push	 eax
  00050	8d 4c 24 04	 lea	 ecx, DWORD PTR _eaName$78930[esp+108]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _EAGetName
  0005a	83 c4 08	 add	 esp, 8

; 548  : 
; 549  : 			if (strcmp (eaName, "Triple DES") == 0)

  0005d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
  00062	8d 0c 24	 lea	 ecx, DWORD PTR _eaName$78930[esp+104]
$LL17@EAGetModeN:
  00065	8a 01		 mov	 al, BYTE PTR [ecx]
  00067	3a 02		 cmp	 al, BYTE PTR [edx]
  00069	75 1a		 jne	 SHORT $LN18@EAGetModeN
  0006b	84 c0		 test	 al, al
  0006d	74 12		 je	 SHORT $LN19@EAGetModeN
  0006f	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00072	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00075	75 0e		 jne	 SHORT $LN18@EAGetModeN
  00077	83 c1 02	 add	 ecx, 2
  0007a	83 c2 02	 add	 edx, 2
  0007d	84 c0		 test	 al, al
  0007f	75 e4		 jne	 SHORT $LL17@EAGetModeN
$LN19@EAGetModeN:
  00081	33 c0		 xor	 eax, eax
  00083	eb 05		 jmp	 SHORT $LN20@EAGetModeN
$LN18@EAGetModeN:
  00085	1b c0		 sbb	 eax, eax
  00087	83 d8 ff	 sbb	 eax, -1
$LN20@EAGetModeN:
  0008a	85 c0		 test	 eax, eax
  0008c	75 20		 jne	 SHORT $LN3@EAGetModeN
$LN2@EAGetModeN:

; 550  : 				return capitalLetters ? "Outer-CBC" : "outer-CBC";

  0008e	83 7c 24 74 00	 cmp	 DWORD PTR _capitalLetters$[esp+100], 0
  00093	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09GGDEEENC@Outer?9CBC?$AA@
  00098	75 4d		 jne	 SHORT $LN9@EAGetModeN
  0009a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09CJGJEHAC@outer?9CBC?$AA@

; 569  : }

  0009f	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000a3	33 cc		 xor	 ecx, esp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	83 c4 68	 add	 esp, 104		; 00000068H
  000ad	c3		 ret	 0
$LN3@EAGetModeN:

; 551  : 
; 552  : 			return "CBC";

  000ae	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03PPFAJCFI@CBC?$AA@

; 569  : }

  000b3	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000b7	33 cc		 xor	 ecx, esp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	83 c4 68	 add	 esp, 104		; 00000068H
  000c1	c3		 ret	 0
$LN1@EAGetModeN:

; 553  : 		}
; 554  : 
; 555  : 	case OUTER_CBC:
; 556  : 
; 557  : 		/* Deprecated/legacy */
; 558  : 
; 559  : 		return  capitalLetters ? "Outer-CBC" : "outer-CBC";
; 560  : 
; 561  : 	case INNER_CBC:
; 562  : 
; 563  : 		/* Deprecated/legacy */
; 564  : 
; 565  : 		return capitalLetters ? "Inner-CBC" : "inner-CBC";

  000c2	83 7c 24 74 00	 cmp	 DWORD PTR _capitalLetters$[esp+100], 0
  000c7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09KIMEMFNK@Inner?9CBC?$AA@
  000cc	75 19		 jne	 SHORT $LN9@EAGetModeN
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09OHJJMGAK@inner?9CBC?$AA@

; 569  : }

  000d3	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000d7	33 cc		 xor	 ecx, esp
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	83 c4 68	 add	 esp, 104		; 00000068H
  000e1	c3		 ret	 0
$LN7@EAGetModeN:

; 566  : 
; 567  : 	}
; 568  : 	return "[unknown]";

  000e2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@
$LN9@EAGetModeN:

; 569  : }

  000e7	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000eb	33 cc		 xor	 ecx, esp
  000ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f2	83 c4 68	 add	 esp, 104		; 00000068H
  000f5	c3		 ret	 0
  000f6	8b ff		 npad	 2
$LN21@EAGetModeN:
  000f8	00 00 00 00	 DD	 $LN6@EAGetModeN
  000fc	00 00 00 00	 DD	 $LN5@EAGetModeN
  00100	00 00 00 00	 DD	 $LN4@EAGetModeN
  00104	00 00 00 00	 DD	 $LN2@EAGetModeN
  00108	00 00 00 00	 DD	 $LN1@EAGetModeN
_EAGetModeName ENDP
_TEXT	ENDS
PUBLIC	_EAGetKeyScheduleSize
; Function compile flags: /Ogtpy
;	COMDAT _EAGetKeyScheduleSize
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_EAGetKeyScheduleSize PROC				; COMDAT

; 576  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 577  : 	int i = EAGetFirstCipher(ea);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _ea$[esp+8]
  00007	8b c6		 mov	 eax, esi
  00009	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0000c	8d a8 00 00 00
	00		 lea	 ebp, DWORD PTR _EncryptionAlgorithms[eax]
  00012	57		 push	 edi
  00013	8b 7d 00	 mov	 edi, DWORD PTR [ebp]

; 578  : 	int size = CipherGetKeyScheduleSize (i);

  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize
  0001c	8b de		 mov	 ebx, esi
  0001e	83 c4 04	 add	 esp, 4
  00021	6b db 0b	 imul	 ebx, 11			; 0000000bH
$LL2@EAGetKeySc:

; 579  : 
; 580  : 	while (i = EAGetNextCipher(ea, i))

  00024	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[ebx*4]
  0002b	33 f6		 xor	 esi, esi
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 10		 je	 SHORT $LN27@EAGetKeySc
  00031	8b d5		 mov	 edx, ebp
$LL9@EAGetKeySc:
  00033	46		 inc	 esi
  00034	83 c2 04	 add	 edx, 4
  00037	3b cf		 cmp	 ecx, edi
  00039	74 0b		 je	 SHORT $LN23@EAGetKeySc
  0003b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003d	85 c9		 test	 ecx, ecx
  0003f	75 f2		 jne	 SHORT $LL9@EAGetKeySc
$LN27@EAGetKeySc:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	5b		 pop	 ebx

; 584  : 
; 585  : 	return size;
; 586  : }

  00045	c3		 ret	 0
$LN23@EAGetKeySc:
  00046	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  00049	8b 3c 8d 00 00
	00 00		 mov	 edi, DWORD PTR _EncryptionAlgorithms[ecx*4]
  00050	85 ff		 test	 edi, edi
  00052	74 ed		 je	 SHORT $LN27@EAGetKeySc
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Ciphers
  0005a	33 c9		 xor	 ecx, ecx
  0005c	85 d2		 test	 edx, edx
  0005e	74 13		 je	 SHORT $LN15@EAGetKeySc

; 581  : 	{
; 582  : 		size += CipherGetKeyScheduleSize (i);

$LL17@EAGetKeySc:
  00060	3b d7		 cmp	 edx, edi
  00062	74 16		 je	 SHORT $LN24@EAGetKeySc
  00064	41		 inc	 ecx
  00065	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00068	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _Ciphers[edx*4]
  0006f	85 d2		 test	 edx, edx
  00071	75 ed		 jne	 SHORT $LL17@EAGetKeySc
$LN15@EAGetKeySc:
  00073	33 c9		 xor	 ecx, ecx
  00075	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 583  : 	}

  00078	eb aa		 jmp	 SHORT $LL2@EAGetKeySc
$LN24@EAGetKeySc:

; 581  : 	{
; 582  : 		size += CipherGetKeyScheduleSize (i);

  0007a	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0007d	03 04 8d 10 00
	00 00		 add	 eax, DWORD PTR _Ciphers[ecx*4+16]
  00084	8d 0c 8d 00 00
	00 00		 lea	 ecx, DWORD PTR _Ciphers[ecx*4]

; 583  : 	}

  0008b	eb 97		 jmp	 SHORT $LL2@EAGetKeySc
_EAGetKeyScheduleSize ENDP
_TEXT	ENDS
PUBLIC	_EAGetLargestKeyForMode
; Function compile flags: /Ogtpy
;	COMDAT _EAGetLargestKeyForMode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_EAGetLargestKeyForMode PROC				; COMDAT

; 591  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 592  : 	int ea, key = 0;

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _mode$[esp+4]
  00006	56		 push	 esi
  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi

; 593  : 
; 594  : 	for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	8d 7b 2c	 lea	 edi, DWORD PTR [ebx+44]
$LL11@EAGetLarge:

; 595  : 	{
; 596  : 		if (!EAIsModeSupported (ea, mode))

  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _EAIsModeSupported
  00019	83 c4 08	 add	 esp, 8
  0001c	85 c0		 test	 eax, eax
  0001e	74 18		 je	 SHORT $LN4@EAGetLarge

; 597  : 			continue;
; 598  : 
; 599  : 		if (EAGetKeySize (ea) >= key)

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _EAGetKeySize
  00026	83 c4 04	 add	 esp, 4
  00029	3b c3		 cmp	 eax, ebx
  0002b	7c 0b		 jl	 SHORT $LN4@EAGetLarge

; 600  : 			key = EAGetKeySize (ea);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _EAGetKeySize
  00033	83 c4 04	 add	 esp, 4
  00036	8b d8		 mov	 ebx, eax
$LN4@EAGetLarge:
  00038	46		 inc	 esi
  00039	83 bf 2c 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[edi+44], 0
  00040	74 07		 je	 SHORT $LN16@EAGetLarge
  00042	83 c7 2c	 add	 edi, 44			; 0000002cH
  00045	85 f6		 test	 esi, esi
  00047	75 c9		 jne	 SHORT $LL11@EAGetLarge
$LN16@EAGetLarge:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp

; 601  : 	}
; 602  : 	return key;

  0004c	8b c3		 mov	 eax, ebx
  0004e	5b		 pop	 ebx

; 603  : }

  0004f	c3		 ret	 0
_EAGetLargestKeyForMode ENDP
_TEXT	ENDS
PUBLIC	_EAGetLargestKey
; Function compile flags: /Ogtpy
;	COMDAT _EAGetLargestKey
_TEXT	SEGMENT
_EAGetLargestKey PROC					; COMDAT

; 608  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 609  : 	int ea, key = 0;

  00002	33 db		 xor	 ebx, ebx
  00004	57		 push	 edi

; 610  : 
; 611  : 	for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  00005	be 01 00 00 00	 mov	 esi, 1
  0000a	8d 7b 2c	 lea	 edi, DWORD PTR [ebx+44]
  0000d	8d 49 00	 npad	 3
$LL10@EAGetLarge@2:

; 612  : 	{
; 613  : 		if (EAGetKeySize (ea) >= key)

  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _EAGetKeySize
  00016	83 c4 04	 add	 esp, 4
  00019	3b c3		 cmp	 eax, ebx
  0001b	7c 0b		 jl	 SHORT $LN3@EAGetLarge@2

; 614  : 			key = EAGetKeySize (ea);

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _EAGetKeySize
  00023	83 c4 04	 add	 esp, 4
  00026	8b d8		 mov	 ebx, eax
$LN3@EAGetLarge@2:
  00028	46		 inc	 esi
  00029	83 bf 2c 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[edi+44], 0
  00030	74 07		 je	 SHORT $LN15@EAGetLarge@2
  00032	83 c7 2c	 add	 edi, 44			; 0000002cH
  00035	85 f6		 test	 esi, esi
  00037	75 d7		 jne	 SHORT $LL10@EAGetLarge@2
$LN15@EAGetLarge@2:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 615  : 	}
; 616  : 
; 617  : 	return key;

  0003b	8b c3		 mov	 eax, ebx
  0003d	5b		 pop	 ebx

; 618  : }

  0003e	c3		 ret	 0
_EAGetLargestKey ENDP
_TEXT	ENDS
PUBLIC	_cryptoInfo$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_EncryptBufferLRW128
EXTRN	_Gf128MulBy64Tab:PROC
EXTRN	_MirrorBytes64:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncryptBufferLRW128
_TEXT	SEGMENT
_cryptoInfo$GSCopy$ = -52				; size = 4
_b$ = -48						; size = 8
_cipherCount$ = -40					; size = 4
$T80336 = -36						; size = 8
_i$ = -28						; size = 8
_t$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 8
_blockIndex$ = 20					; size = 8
_cryptoInfo$ = 28					; size = 4
_EncryptBufferLRW128 PROC				; COMDAT

; 817  : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 30	 mov	 DWORD PTR __$ArrayPad$[esp+52], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi
  00011	8b 74 24 44	 mov	 esi, DWORD PTR _buffer$[esp+60]
  00015	57		 push	 edi
  00016	8b 7c 24 5c	 mov	 edi, DWORD PTR _cryptoInfo$[esp+64]

; 818  : 	/* Deprecated/legacy */
; 819  : 
; 820  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0001a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001c	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0001f	8b a9 00 00 00
	00		 mov	 ebp, DWORD PTR _EncryptionAlgorithms[ecx]
  00025	8d 89 00 00 00
	00		 lea	 ecx, DWORD PTR _EncryptionAlgorithms[ecx]

; 832  : 
; 833  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 834  : 
; 835  : 	for (b = 0; b < length >> 4; b++)

  0002b	89 7c 24 10	 mov	 DWORD PTR _cryptoInfo$GSCopy$[esp+68], edi
  0002f	33 c0		 xor	 eax, eax
$LL22@EncryptBuf:
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	40		 inc	 eax
  00034	83 c1 04	 add	 ecx, 4
  00037	85 d2		 test	 edx, edx
  00039	75 f6		 jne	 SHORT $LL22@EncryptBuf
  0003b	8b 4c 24 54	 mov	 ecx, DWORD PTR _blockIndex$[esp+64]
  0003f	48		 dec	 eax
  00040	89 44 24 1c	 mov	 DWORD PTR _cipherCount$[esp+68], eax
  00044	8b 44 24 58	 mov	 eax, DWORD PTR _blockIndex$[esp+68]
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0004d	e8 00 00 00 00	 call	 _MirrorBytes64
  00052	8b 4c 24 54	 mov	 ecx, DWORD PTR _length$[esp+72]
  00056	89 44 24 30	 mov	 DWORD PTR _i$[esp+76], eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	89 54 24 34	 mov	 DWORD PTR _i$[esp+80], edx
  00060	83 e0 0f	 and	 eax, 15			; 0000000fH
  00063	33 d2		 xor	 edx, edx
  00065	83 c4 08	 add	 esp, 8
  00068	0b c2		 or	 eax, edx
  0006a	74 06		 je	 SHORT $LN16@EncryptBuf

; 821  : 	int cipherCount = EAGetCipherCount (cryptoInfo->ea);
; 822  : 	unsigned __int8 *p = buffer;
; 823  : 	unsigned __int8 *ks = cryptoInfo->ks;
; 824  : 	unsigned __int8 i[8];
; 825  : 	unsigned __int8 t[16];
; 826  : 	unsigned __int64 b;
; 827  : 
; 828  : 	*(unsigned __int64 *)i = BE64(blockIndex);
; 829  : 
; 830  : 	if (length % 16)
; 831  : 		TC_THROW_FATAL_EXCEPTION;

  0006c	88 15 00 00 00
	00		 mov	 BYTE PTR ds:0, dl
$LN16@EncryptBuf:

; 832  : 
; 833  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 834  : 
; 835  : 	for (b = 0; b < length >> 4; b++)

  00072	8b 44 24 50	 mov	 eax, DWORD PTR _length$[esp+68]
  00076	0f ac c1 04	 shrd	 ecx, eax, 4
  0007a	33 d2		 xor	 edx, edx
  0007c	c1 e8 04	 shr	 eax, 4
  0007f	89 54 24 14	 mov	 DWORD PTR _b$[esp+68], edx
  00083	89 54 24 18	 mov	 DWORD PTR _b$[esp+72], edx
  00087	89 44 24 24	 mov	 DWORD PTR $T80336[esp+72], eax
  0008b	89 4c 24 20	 mov	 DWORD PTR $T80336[esp+68], ecx
  0008f	3b c2		 cmp	 eax, edx
  00091	0f 82 69 01 00
	00		 jb	 $LN5@EncryptBuf
  00097	77 08		 ja	 SHORT $LL60@EncryptBuf
  00099	3b ca		 cmp	 ecx, edx
  0009b	0f 86 5f 01 00
	00		 jbe	 $LN5@EncryptBuf
$LL60@EncryptBuf:

; 836  : 	{
; 837  : 		Gf128MulBy64Tab (i, t, &cryptoInfo->gf_ctx);

  000a1	8d 87 a8 29 00
	00		 lea	 eax, DWORD PTR [edi+10664]
  000a7	50		 push	 eax
  000a8	8d 54 24 34	 lea	 edx, DWORD PTR _t$[esp+72]
  000ac	52		 push	 edx
  000ad	8d 44 24 30	 lea	 eax, DWORD PTR _i$[esp+76]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _Gf128MulBy64Tab

; 838  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000b7	8b 4c 24 3c	 mov	 ecx, DWORD PTR _t$[esp+80]
  000bb	31 0e		 xor	 DWORD PTR [esi], ecx
  000bd	8b 54 24 40	 mov	 edx, DWORD PTR _t$[esp+84]
  000c1	31 56 04	 xor	 DWORD PTR [esi+4], edx
  000c4	8b 44 24 44	 mov	 eax, DWORD PTR _t$[esp+88]
  000c8	8b 4c 24 48	 mov	 ecx, DWORD PTR _t$[esp+92]
  000cc	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000cf	31 4e 0c	 xor	 DWORD PTR [esi+12], ecx
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  : 
; 840  : 		if (cipherCount > 1)

  000d5	83 7c 24 1c 01	 cmp	 DWORD PTR _cipherCount$[esp+68], 1
  000da	0f 8e 97 00 00
	00		 jle	 $LN12@EncryptBuf

; 841  : 		{
; 842  : 			// Cipher cascade
; 843  : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 844  : 				cipher != 0;
; 845  : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  000e0	8b 17		 mov	 edx, DWORD PTR [edi]
  000e2	6b d2 2c	 imul	 edx, 44			; 0000002cH
  000e5	8b aa 00 00 00
	00		 mov	 ebp, DWORD PTR _EncryptionAlgorithms[edx]
$LN71@EncryptBuf:
  000eb	85 ed		 test	 ebp, ebp
  000ed	74 65		 je	 SHORT $LN58@EncryptBuf

; 846  : 			{
; 847  : 				EncipherBlock (cipher, p, ks);

  000ef	53		 push	 ebx
  000f0	56		 push	 esi
  000f1	55		 push	 ebp
  000f2	e8 00 00 00 00	 call	 _EncipherBlock

; 848  : 				ks += CipherGetKeyScheduleSize (cipher);

  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	33 c0		 xor	 eax, eax
  00102	85 c9		 test	 ecx, ecx
  00104	74 13		 je	 SHORT $LN37@EncryptBuf
$LL39@EncryptBuf:
  00106	3b cd		 cmp	 ecx, ebp
  00108	74 4f		 je	 SHORT $LN50@EncryptBuf
  0010a	40		 inc	 eax
  0010b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0010e	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  00115	85 c9		 test	 ecx, ecx
  00117	75 ed		 jne	 SHORT $LL39@EncryptBuf
$LN37@EncryptBuf:
  00119	33 c0		 xor	 eax, eax
$LN40@EncryptBuf:
  0011b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0011d	03 58 10	 add	 ebx, DWORD PTR [eax+16]
  00120	8b d1		 mov	 edx, ecx
  00122	6b d2 0b	 imul	 edx, 11			; 0000000bH
  00125	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edx*4]
  0012c	33 ff		 xor	 edi, edi
  0012e	85 c0		 test	 eax, eax
  00130	74 1c		 je	 SHORT $LN59@EncryptBuf
  00132	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00135	81 c1 00 00 00
	00		 add	 ecx, OFFSET _EncryptionAlgorithms
  0013b	eb 03 8d 49 00	 npad	 5
$LL31@EncryptBuf:
  00140	47		 inc	 edi
  00141	83 c1 04	 add	 ecx, 4
  00144	3b c5		 cmp	 eax, ebp
  00146	74 1d		 je	 SHORT $LN51@EncryptBuf
  00148	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014a	85 c0		 test	 eax, eax
  0014c	75 f2		 jne	 SHORT $LL31@EncryptBuf
$LN59@EncryptBuf:

; 841  : 		{
; 842  : 			// Cipher cascade
; 843  : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 844  : 				cipher != 0;
; 845  : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  0014e	8b 7c 24 10	 mov	 edi, DWORD PTR _cryptoInfo$GSCopy$[esp+68]
  00152	33 ed		 xor	 ebp, ebp
$LN58@EncryptBuf:

; 849  : 			}
; 850  : 			ks = cryptoInfo->ks;

  00154	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]

; 851  : 		}
; 852  : 		else

  00157	eb 29		 jmp	 SHORT $LN8@EncryptBuf
$LN50@EncryptBuf:

; 848  : 				ks += CipherGetKeyScheduleSize (cipher);

  00159	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0015c	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00163	eb b6		 jmp	 SHORT $LN40@EncryptBuf
$LN51@EncryptBuf:

; 841  : 		{
; 842  : 			// Cipher cascade
; 843  : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 844  : 				cipher != 0;
; 845  : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  00165	03 d7		 add	 edx, edi
  00167	8b 2c 95 00 00
	00 00		 mov	 ebp, DWORD PTR _EncryptionAlgorithms[edx*4]
  0016e	8b 7c 24 10	 mov	 edi, DWORD PTR _cryptoInfo$GSCopy$[esp+68]
  00172	e9 74 ff ff ff	 jmp	 $LN71@EncryptBuf
$LN12@EncryptBuf:

; 853  : 		{
; 854  : 			EncipherBlock (cipher, p, ks);

  00177	53		 push	 ebx
  00178	56		 push	 esi
  00179	55		 push	 ebp
  0017a	e8 00 00 00 00	 call	 _EncipherBlock
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@EncryptBuf:

; 855  : 		}
; 856  : 
; 857  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  00182	8b 54 24 30	 mov	 edx, DWORD PTR _t$[esp+68]
  00186	31 16		 xor	 DWORD PTR [esi], edx
  00188	8b 44 24 34	 mov	 eax, DWORD PTR _t$[esp+72]
  0018c	31 46 04	 xor	 DWORD PTR [esi+4], eax
  0018f	8b 4c 24 38	 mov	 ecx, DWORD PTR _t$[esp+76]
  00193	8b 54 24 3c	 mov	 edx, DWORD PTR _t$[esp+80]
  00197	31 4e 08	 xor	 DWORD PTR [esi+8], ecx
  0019a	31 56 0c	 xor	 DWORD PTR [esi+12], edx

; 858  : 
; 859  : 		p += 16;

  0019d	83 c6 10	 add	 esi, 16			; 00000010H

; 860  : 
; 861  : 		if (i[7] != 0xff)

  001a0	80 7c 24 2f ff	 cmp	 BYTE PTR _i$[esp+75], 255 ; 000000ffH
  001a5	74 06		 je	 SHORT $LN7@EncryptBuf

; 862  : 			i[7]++;

  001a7	fe 44 24 2f	 inc	 BYTE PTR _i$[esp+75]

; 863  : 		else

  001ab	eb 27		 jmp	 SHORT $LN14@EncryptBuf
$LN7@EncryptBuf:

; 864  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  001ad	8b 44 24 2c	 mov	 eax, DWORD PTR _i$[esp+72]
  001b1	8b 4c 24 28	 mov	 ecx, DWORD PTR _i$[esp+68]
  001b5	50		 push	 eax
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 _MirrorBytes64
  001bc	83 c0 01	 add	 eax, 1
  001bf	83 d2 00	 adc	 edx, 0
  001c2	52		 push	 edx
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _MirrorBytes64
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
  001cc	89 44 24 28	 mov	 DWORD PTR _i$[esp+68], eax
  001d0	89 54 24 2c	 mov	 DWORD PTR _i$[esp+72], edx
$LN14@EncryptBuf:
  001d4	83 44 24 14 01	 add	 DWORD PTR _b$[esp+68], 1
  001d9	8b 44 24 18	 mov	 eax, DWORD PTR _b$[esp+72]
  001dd	83 d0 00	 adc	 eax, 0
  001e0	89 44 24 18	 mov	 DWORD PTR _b$[esp+72], eax
  001e4	3b 44 24 24	 cmp	 eax, DWORD PTR $T80336[esp+72]
  001e8	0f 82 b3 fe ff
	ff		 jb	 $LL60@EncryptBuf

; 832  : 
; 833  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 834  : 
; 835  : 	for (b = 0; b < length >> 4; b++)

  001ee	77 0e		 ja	 SHORT $LN64@EncryptBuf
  001f0	8b 54 24 20	 mov	 edx, DWORD PTR $T80336[esp+68]
  001f4	39 54 24 14	 cmp	 DWORD PTR _b$[esp+68], edx
  001f8	0f 82 a3 fe ff
	ff		 jb	 $LL60@EncryptBuf
$LN64@EncryptBuf:
  001fe	33 d2		 xor	 edx, edx
$LN5@EncryptBuf:
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp

; 865  : 	}
; 866  : 
; 867  : 	FAST_ERASE64 (t, sizeof(t));

  00203	8d 44 24 24	 lea	 eax, DWORD PTR _t$[esp+56]
  00207	b9 02 00 00 00	 mov	 ecx, 2
  0020c	5b		 pop	 ebx
  0020d	8d 49 00	 npad	 3
$LL2@EncryptBuf:
  00210	89 10		 mov	 DWORD PTR [eax], edx
  00212	49		 dec	 ecx
  00213	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00216	83 c0 08	 add	 eax, 8
  00219	3b ca		 cmp	 ecx, edx
  0021b	75 f3		 jne	 SHORT $LL2@EncryptBuf

; 868  : }

  0021d	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  00221	33 cc		 xor	 ecx, esp
  00223	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00228	83 c4 34	 add	 esp, 52			; 00000034H
  0022b	c3		 ret	 0
_EncryptBufferLRW128 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_EncryptBufferLRW64
EXTRN	_Gf64MulTab:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncryptBufferLRW64
_TEXT	SEGMENT
_cipher$ = -44						; size = 4
_ks$ = -40						; size = 4
_b$ = -36						; size = 8
$T80370 = -28						; size = 8
_t$ = -20						; size = 8
_i$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 8
_blockIndex$ = 20					; size = 8
_cryptoInfo$ = 28					; size = 4
_EncryptBufferLRW64 PROC				; COMDAT

; 872  : {

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+44], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi
  00011	8b 74 24 3c	 mov	 esi, DWORD PTR _buffer$[esp+52]
  00015	57		 push	 edi
  00016	8b 7c 24 54	 mov	 edi, DWORD PTR _cryptoInfo$[esp+56]

; 873  : 	/* Deprecated/legacy */
; 874  : 
; 875  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0001a	8b 07		 mov	 eax, DWORD PTR [edi]
  0001c	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0001f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[eax]

; 876  : 	unsigned __int8 *p = buffer;
; 877  : 	unsigned __int8 *ks = cryptoInfo->ks;
; 878  : 	unsigned __int8 i[8];
; 879  : 	unsigned __int8 t[8];
; 880  : 	unsigned __int64 b;
; 881  : 
; 882  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  00025	8b 44 24 50	 mov	 eax, DWORD PTR _blockIndex$[esp+60]
  00029	89 4c 24 10	 mov	 DWORD PTR _cipher$[esp+60], ecx
  0002d	8b 4c 24 4c	 mov	 ecx, DWORD PTR _blockIndex$[esp+56]
  00031	50		 push	 eax
  00032	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00035	51		 push	 ecx
  00036	89 54 24 1c	 mov	 DWORD PTR _ks$[esp+68], edx
  0003a	e8 00 00 00 00	 call	 _MirrorBytes64

; 883  : 
; 884  : 	if (length % 8)

  0003f	8b 4c 24 4c	 mov	 ecx, DWORD PTR _length$[esp+64]
  00043	89 44 24 38	 mov	 DWORD PTR _i$[esp+68], eax
  00047	8b c1		 mov	 eax, ecx
  00049	89 54 24 3c	 mov	 DWORD PTR _i$[esp+72], edx
  0004d	83 e0 07	 and	 eax, 7
  00050	33 d2		 xor	 edx, edx
  00052	83 c4 08	 add	 esp, 8
  00055	33 db		 xor	 ebx, ebx
  00057	0b c2		 or	 eax, edx
  00059	74 06		 je	 SHORT $LN11@EncryptBuf@2

; 885  : 		TC_THROW_FATAL_EXCEPTION;

  0005b	88 15 00 00 00
	00		 mov	 BYTE PTR ds:0, dl
$LN11@EncryptBuf@2:

; 886  : 
; 887  : 	for (b = 0; b < length >> 3; b++)

  00061	8b 6c 24 48	 mov	 ebp, DWORD PTR _length$[esp+60]
  00065	0f ac e9 03	 shrd	 ecx, ebp, 3
  00069	c1 ed 03	 shr	 ebp, 3
  0006c	33 c0		 xor	 eax, eax
  0006e	89 5c 24 18	 mov	 DWORD PTR _b$[esp+60], ebx
  00072	89 4c 24 20	 mov	 DWORD PTR $T80370[esp+60], ecx
  00076	3b e8		 cmp	 ebp, eax
  00078	0f 82 a4 00 00
	00		 jb	 $LN27@EncryptBuf@2
  0007e	77 08		 ja	 SHORT $LN25@EncryptBuf@2
  00080	3b c8		 cmp	 ecx, eax
  00082	0f 86 9a 00 00
	00		 jbe	 $LN27@EncryptBuf@2
$LN25@EncryptBuf@2:
  00088	81 c7 a8 29 00
	00		 add	 edi, 10664		; 000029a8H
  0008e	8b ff		 npad	 2
$LL10@EncryptBuf@2:

; 888  : 	{
; 889  : 		Gf64MulTab (i, t, &cryptoInfo->gf_ctx);

  00090	57		 push	 edi
  00091	8d 54 24 2c	 lea	 edx, DWORD PTR _t$[esp+64]
  00095	52		 push	 edx
  00096	8d 44 24 38	 lea	 eax, DWORD PTR _i$[esp+68]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _Gf64MulTab

; 890  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000a0	8b 4c 24 34	 mov	 ecx, DWORD PTR _t$[esp+72]

; 891  : 
; 892  : 		EncipherBlock (cipher, p, ks);

  000a4	8b 44 24 20	 mov	 eax, DWORD PTR _ks$[esp+72]
  000a8	31 0e		 xor	 DWORD PTR [esi], ecx
  000aa	8b 4c 24 1c	 mov	 ecx, DWORD PTR _cipher$[esp+72]
  000ae	8b 54 24 38	 mov	 edx, DWORD PTR _t$[esp+76]
  000b2	31 56 04	 xor	 DWORD PTR [esi+4], edx
  000b5	50		 push	 eax
  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _EncipherBlock

; 893  : 
; 894  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000bd	8b 54 24 40	 mov	 edx, DWORD PTR _t$[esp+84]
  000c1	8b 44 24 44	 mov	 eax, DWORD PTR _t$[esp+88]
  000c5	31 16		 xor	 DWORD PTR [esi], edx
  000c7	31 46 04	 xor	 DWORD PTR [esi+4], eax
  000ca	83 c4 18	 add	 esp, 24			; 00000018H

; 895  : 
; 896  : 		p += 8;

  000cd	83 c6 08	 add	 esi, 8

; 897  : 
; 898  : 		if (i[7] != 0xff)

  000d0	80 7c 24 37 ff	 cmp	 BYTE PTR _i$[esp+67], 255 ; 000000ffH
  000d5	74 06		 je	 SHORT $LN7@EncryptBuf@2

; 899  : 			i[7]++;

  000d7	fe 44 24 37	 inc	 BYTE PTR _i$[esp+67]

; 900  : 		else

  000db	eb 27		 jmp	 SHORT $LN9@EncryptBuf@2
$LN7@EncryptBuf@2:

; 901  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  000dd	8b 4c 24 34	 mov	 ecx, DWORD PTR _i$[esp+64]
  000e1	8b 54 24 30	 mov	 edx, DWORD PTR _i$[esp+60]
  000e5	51		 push	 ecx
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 _MirrorBytes64
  000ec	83 c0 01	 add	 eax, 1
  000ef	83 d2 00	 adc	 edx, 0
  000f2	52		 push	 edx
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _MirrorBytes64
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
  000fc	89 44 24 30	 mov	 DWORD PTR _i$[esp+60], eax
  00100	89 54 24 34	 mov	 DWORD PTR _i$[esp+64], edx
$LN9@EncryptBuf@2:
  00104	83 44 24 18 01	 add	 DWORD PTR _b$[esp+60], 1
  00109	83 d3 00	 adc	 ebx, 0
  0010c	3b dd		 cmp	 ebx, ebp
  0010e	72 80		 jb	 SHORT $LL10@EncryptBuf@2

; 886  : 
; 887  : 	for (b = 0; b < length >> 3; b++)

  00110	77 0e		 ja	 SHORT $LN29@EncryptBuf@2
  00112	8b 44 24 20	 mov	 eax, DWORD PTR $T80370[esp+60]
  00116	39 44 24 18	 cmp	 DWORD PTR _b$[esp+60], eax
  0011a	0f 82 70 ff ff
	ff		 jb	 $LL10@EncryptBuf@2
$LN29@EncryptBuf@2:

; 902  : 	}
; 903  : 
; 904  : 	FAST_ERASE64 (t, sizeof(t));

  00120	33 c0		 xor	 eax, eax
$LN27@EncryptBuf@2:
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	89 44 24 20	 mov	 DWORD PTR _t$[esp+52], eax
  00128	5d		 pop	 ebp
  00129	89 44 24 20	 mov	 DWORD PTR _t$[esp+52], eax

; 905  : }

  0012d	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+48]
  00131	5b		 pop	 ebx
  00132	33 cc		 xor	 ecx, esp
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	83 c4 2c	 add	 esp, 44			; 0000002cH
  0013c	c3		 ret	 0
_EncryptBufferLRW64 ENDP
_TEXT	ENDS
PUBLIC	_cryptoInfo$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_DecryptBufferLRW128
; Function compile flags: /Ogtpy
;	COMDAT _DecryptBufferLRW128
_TEXT	SEGMENT
_cryptoInfo$GSCopy$ = -52				; size = 4
_b$ = -48						; size = 8
_cipherCount$ = -40					; size = 4
$T80453 = -36						; size = 8
_i$ = -28						; size = 8
_t$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 8
_blockIndex$ = 20					; size = 8
_cryptoInfo$ = 28					; size = 4
_DecryptBufferLRW128 PROC				; COMDAT

; 909  : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 30	 mov	 DWORD PTR __$ArrayPad$[esp+52], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	8b 6c 24 54	 mov	 ebp, DWORD PTR _cryptoInfo$[esp+56]

; 910  : 	/* Deprecated/legacy */
; 911  : 
; 912  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  00014	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00017	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0001a	56		 push	 esi
  0001b	8b 74 24 44	 mov	 esi, DWORD PTR _buffer$[esp+60]
  0001f	8d 89 00 00 00
	00		 lea	 ecx, DWORD PTR _EncryptionAlgorithms[ecx]
  00025	57		 push	 edi
  00026	8b 39		 mov	 edi, DWORD PTR [ecx]

; 924  : 
; 925  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 926  : 
; 927  : 	for (b = 0; b < length >> 4; b++)

  00028	89 6c 24 10	 mov	 DWORD PTR _cryptoInfo$GSCopy$[esp+68], ebp
  0002c	33 c0		 xor	 eax, eax
  0002e	8b ff		 npad	 2
$LL22@DecryptBuf:
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	40		 inc	 eax
  00033	83 c1 04	 add	 ecx, 4
  00036	85 d2		 test	 edx, edx
  00038	75 f6		 jne	 SHORT $LL22@DecryptBuf
  0003a	8b 4c 24 54	 mov	 ecx, DWORD PTR _blockIndex$[esp+64]
  0003e	48		 dec	 eax
  0003f	89 44 24 1c	 mov	 DWORD PTR _cipherCount$[esp+68], eax
  00043	8b 44 24 58	 mov	 eax, DWORD PTR _blockIndex$[esp+68]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	8d 5d 08	 lea	 ebx, DWORD PTR [ebp+8]
  0004c	e8 00 00 00 00	 call	 _MirrorBytes64
  00051	8b 4c 24 54	 mov	 ecx, DWORD PTR _length$[esp+72]
  00055	89 44 24 30	 mov	 DWORD PTR _i$[esp+76], eax
  00059	8b c1		 mov	 eax, ecx
  0005b	89 54 24 34	 mov	 DWORD PTR _i$[esp+80], edx
  0005f	83 e0 0f	 and	 eax, 15			; 0000000fH
  00062	33 d2		 xor	 edx, edx
  00064	83 c4 08	 add	 esp, 8
  00067	0b c2		 or	 eax, edx
  00069	74 06		 je	 SHORT $LN16@DecryptBuf

; 913  : 	int cipherCount = EAGetCipherCount (cryptoInfo->ea);
; 914  : 	unsigned __int8 *p = buffer;
; 915  : 	unsigned __int8 *ks = cryptoInfo->ks;
; 916  : 	unsigned __int8 i[8];
; 917  : 	unsigned __int8 t[16];
; 918  : 	unsigned __int64 b;
; 919  : 
; 920  : 	*(unsigned __int64 *)i = BE64(blockIndex);
; 921  : 
; 922  : 	if (length % 16)
; 923  : 		TC_THROW_FATAL_EXCEPTION;

  0006b	88 15 00 00 00
	00		 mov	 BYTE PTR ds:0, dl
$LN16@DecryptBuf:

; 924  : 
; 925  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 926  : 
; 927  : 	for (b = 0; b < length >> 4; b++)

  00071	8b 44 24 50	 mov	 eax, DWORD PTR _length$[esp+68]
  00075	0f ac c1 04	 shrd	 ecx, eax, 4
  00079	33 d2		 xor	 edx, edx
  0007b	c1 e8 04	 shr	 eax, 4
  0007e	89 54 24 14	 mov	 DWORD PTR _b$[esp+68], edx
  00082	89 54 24 18	 mov	 DWORD PTR _b$[esp+72], edx
  00086	89 44 24 24	 mov	 DWORD PTR $T80453[esp+72], eax
  0008a	89 4c 24 20	 mov	 DWORD PTR $T80453[esp+68], ecx
  0008e	3b c2		 cmp	 eax, edx
  00090	0f 82 a7 01 00
	00		 jb	 $LN5@DecryptBuf
  00096	77 08		 ja	 SHORT $LL65@DecryptBuf
  00098	3b ca		 cmp	 ecx, edx
  0009a	0f 86 9d 01 00
	00		 jbe	 $LN5@DecryptBuf
$LL65@DecryptBuf:

; 928  : 	{
; 929  : 		Gf128MulBy64Tab (i, t, &cryptoInfo->gf_ctx);

  000a0	8d 85 a8 29 00
	00		 lea	 eax, DWORD PTR [ebp+10664]
  000a6	50		 push	 eax
  000a7	8d 54 24 34	 lea	 edx, DWORD PTR _t$[esp+72]
  000ab	52		 push	 edx
  000ac	8d 44 24 30	 lea	 eax, DWORD PTR _i$[esp+76]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _Gf128MulBy64Tab

; 930  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000b6	8b 4c 24 3c	 mov	 ecx, DWORD PTR _t$[esp+80]
  000ba	31 0e		 xor	 DWORD PTR [esi], ecx
  000bc	8b 54 24 40	 mov	 edx, DWORD PTR _t$[esp+84]
  000c0	31 56 04	 xor	 DWORD PTR [esi+4], edx
  000c3	8b 44 24 44	 mov	 eax, DWORD PTR _t$[esp+88]
  000c7	8b 4c 24 48	 mov	 ecx, DWORD PTR _t$[esp+92]
  000cb	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000ce	31 4e 0c	 xor	 DWORD PTR [esi+12], ecx
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 931  : 
; 932  : 		if (cipherCount > 1)

  000d4	83 7c 24 1c 01	 cmp	 DWORD PTR _cipherCount$[esp+68], 1
  000d9	0f 8e d5 00 00
	00		 jle	 $LN12@DecryptBuf

; 933  : 		{
; 934  : 			// Cipher cascade
; 935  : 			ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  000df	8b 7d 00	 mov	 edi, DWORD PTR [ebp]
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  000e8	8d 5c 28 08	 lea	 ebx, DWORD PTR [eax+ebp+8]
  000ec	8b c7		 mov	 eax, edi
  000ee	6b c0 2c	 imul	 eax, 44			; 0000002cH
  000f1	83 c4 04	 add	 esp, 4

; 936  : 
; 937  : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 938  : 				cipher != 0;
; 939  : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  000f4	33 c9		 xor	 ecx, ecx
  000f6	05 00 00 00 00	 add	 eax, OFFSET _EncryptionAlgorithms
  000fb	eb 03 8d 49 00	 npad	 5
$LL28@DecryptBuf:
  00100	8b 10		 mov	 edx, DWORD PTR [eax]
  00102	41		 inc	 ecx
  00103	83 c0 04	 add	 eax, 4
  00106	85 d2		 test	 edx, edx
  00108	75 f6		 jne	 SHORT $LL28@DecryptBuf
  0010a	6b ff 0b	 imul	 edi, 11			; 0000000bH
  0010d	03 f9		 add	 edi, ecx
  0010f	8b 3c bd f8 ff
	ff ff		 mov	 edi, DWORD PTR _EncryptionAlgorithms[edi*4-8]
$LN77@DecryptBuf:
  00116	85 ff		 test	 edi, edi
  00118	0f 84 a1 00 00
	00		 je	 $LN8@DecryptBuf

; 940  : 			{
; 941  : 				ks -= CipherGetKeyScheduleSize (cipher);

  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00124	33 c0		 xor	 eax, eax
  00126	85 c9		 test	 ecx, ecx
  00128	74 19		 je	 SHORT $LN40@DecryptBuf
  0012a	8d 9b 00 00 00
	00		 npad	 6
$LL42@DecryptBuf:
  00130	3b cf		 cmp	 ecx, edi
  00132	74 62		 je	 SHORT $LN54@DecryptBuf
  00134	40		 inc	 eax
  00135	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00138	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0013f	85 c9		 test	 ecx, ecx
  00141	75 ed		 jne	 SHORT $LL42@DecryptBuf
$LN40@DecryptBuf:
  00143	33 c0		 xor	 eax, eax
$LN43@DecryptBuf:
  00145	2b 58 10	 sub	 ebx, DWORD PTR [eax+16]

; 942  : 				DecipherBlock (cipher, p, ks);

  00148	53		 push	 ebx
  00149	56		 push	 esi
  0014a	57		 push	 edi
  0014b	e8 00 00 00 00	 call	 _DecipherBlock
  00150	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00153	8b c2		 mov	 eax, edx
  00155	6b c0 0b	 imul	 eax, 11			; 0000000bH
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	bd 01 00 00 00	 mov	 ebp, 1
  00160	39 3c 85 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[eax*4], edi
  00167	74 25		 je	 SHORT $LN64@DecryptBuf
  00169	8b 0c 85 04 00
	00 00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[eax*4+4]
  00170	85 c9		 test	 ecx, ecx
  00172	74 1a		 je	 SHORT $LN64@DecryptBuf
  00174	6b d2 2c	 imul	 edx, 44			; 0000002cH
  00177	81 c2 04 00 00
	00		 add	 edx, OFFSET _EncryptionAlgorithms+4
  0017d	8d 49 00	 npad	 3
$LL33@DecryptBuf:
  00180	45		 inc	 ebp
  00181	83 c2 04	 add	 edx, 4
  00184	3b cf		 cmp	 ecx, edi
  00186	74 1a		 je	 SHORT $LN55@DecryptBuf
  00188	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0018a	85 c9		 test	 ecx, ecx
  0018c	75 f2		 jne	 SHORT $LL33@DecryptBuf
$LN64@DecryptBuf:

; 943  : 			}
; 944  : 		}
; 945  : 		else

  0018e	8b 6c 24 10	 mov	 ebp, DWORD PTR _cryptoInfo$GSCopy$[esp+68]
  00192	33 ff		 xor	 edi, edi
  00194	eb 29		 jmp	 SHORT $LN8@DecryptBuf
$LN54@DecryptBuf:

; 940  : 			{
; 941  : 				ks -= CipherGetKeyScheduleSize (cipher);

  00196	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00199	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  001a0	eb a3		 jmp	 SHORT $LN43@DecryptBuf
$LN55@DecryptBuf:

; 936  : 
; 937  : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 938  : 				cipher != 0;
; 939  : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  001a2	03 c5		 add	 eax, ebp
  001a4	8b 3c 85 f8 ff
	ff ff		 mov	 edi, DWORD PTR _EncryptionAlgorithms[eax*4-8]
  001ab	8b 6c 24 10	 mov	 ebp, DWORD PTR _cryptoInfo$GSCopy$[esp+68]
  001af	e9 62 ff ff ff	 jmp	 $LN77@DecryptBuf
$LN12@DecryptBuf:

; 946  : 		{
; 947  : 			DecipherBlock (cipher, p, ks);

  001b4	53		 push	 ebx
  001b5	56		 push	 esi
  001b6	57		 push	 edi
  001b7	e8 00 00 00 00	 call	 _DecipherBlock
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@DecryptBuf:

; 948  : 		}
; 949  : 
; 950  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  001bf	8b 54 24 30	 mov	 edx, DWORD PTR _t$[esp+68]
  001c3	31 16		 xor	 DWORD PTR [esi], edx
  001c5	8b 44 24 34	 mov	 eax, DWORD PTR _t$[esp+72]
  001c9	31 46 04	 xor	 DWORD PTR [esi+4], eax
  001cc	8b 4c 24 38	 mov	 ecx, DWORD PTR _t$[esp+76]
  001d0	8b 54 24 3c	 mov	 edx, DWORD PTR _t$[esp+80]
  001d4	31 4e 08	 xor	 DWORD PTR [esi+8], ecx
  001d7	31 56 0c	 xor	 DWORD PTR [esi+12], edx

; 951  : 
; 952  : 		p += 16;

  001da	83 c6 10	 add	 esi, 16			; 00000010H

; 953  : 
; 954  : 		if (i[7] != 0xff)

  001dd	80 7c 24 2f ff	 cmp	 BYTE PTR _i$[esp+75], 255 ; 000000ffH
  001e2	74 06		 je	 SHORT $LN7@DecryptBuf

; 955  : 			i[7]++;

  001e4	fe 44 24 2f	 inc	 BYTE PTR _i$[esp+75]

; 956  : 		else

  001e8	eb 27		 jmp	 SHORT $LN14@DecryptBuf
$LN7@DecryptBuf:

; 957  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  001ea	8b 44 24 2c	 mov	 eax, DWORD PTR _i$[esp+72]
  001ee	8b 4c 24 28	 mov	 ecx, DWORD PTR _i$[esp+68]
  001f2	50		 push	 eax
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 _MirrorBytes64
  001f9	83 c0 01	 add	 eax, 1
  001fc	83 d2 00	 adc	 edx, 0
  001ff	52		 push	 edx
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _MirrorBytes64
  00206	83 c4 10	 add	 esp, 16			; 00000010H
  00209	89 44 24 28	 mov	 DWORD PTR _i$[esp+68], eax
  0020d	89 54 24 2c	 mov	 DWORD PTR _i$[esp+72], edx
$LN14@DecryptBuf:
  00211	83 44 24 14 01	 add	 DWORD PTR _b$[esp+68], 1
  00216	8b 44 24 18	 mov	 eax, DWORD PTR _b$[esp+72]
  0021a	83 d0 00	 adc	 eax, 0
  0021d	89 44 24 18	 mov	 DWORD PTR _b$[esp+72], eax
  00221	3b 44 24 24	 cmp	 eax, DWORD PTR $T80453[esp+72]
  00225	0f 82 75 fe ff
	ff		 jb	 $LL65@DecryptBuf

; 924  : 
; 925  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 926  : 
; 927  : 	for (b = 0; b < length >> 4; b++)

  0022b	77 0e		 ja	 SHORT $LN69@DecryptBuf
  0022d	8b 54 24 20	 mov	 edx, DWORD PTR $T80453[esp+68]
  00231	39 54 24 14	 cmp	 DWORD PTR _b$[esp+68], edx
  00235	0f 82 65 fe ff
	ff		 jb	 $LL65@DecryptBuf
$LN69@DecryptBuf:
  0023b	33 d2		 xor	 edx, edx
$LN5@DecryptBuf:
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5d		 pop	 ebp

; 958  : 	}
; 959  : 
; 960  : 	FAST_ERASE64 (t, sizeof(t));

  00240	8d 44 24 24	 lea	 eax, DWORD PTR _t$[esp+56]
  00244	b9 02 00 00 00	 mov	 ecx, 2
  00249	5b		 pop	 ebx
  0024a	8d 9b 00 00 00
	00		 npad	 6
$LL2@DecryptBuf:
  00250	89 10		 mov	 DWORD PTR [eax], edx
  00252	49		 dec	 ecx
  00253	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00256	83 c0 08	 add	 eax, 8
  00259	3b ca		 cmp	 ecx, edx
  0025b	75 f3		 jne	 SHORT $LL2@DecryptBuf

; 961  : }

  0025d	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  00261	33 cc		 xor	 ecx, esp
  00263	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00268	83 c4 34	 add	 esp, 52			; 00000034H
  0026b	c3		 ret	 0
_DecryptBufferLRW128 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_DecryptBufferLRW64
; Function compile flags: /Ogtpy
;	COMDAT _DecryptBufferLRW64
_TEXT	SEGMENT
_cipher$ = -44						; size = 4
_ks$ = -40						; size = 4
_b$ = -36						; size = 8
$T80489 = -28						; size = 8
_t$ = -20						; size = 8
_i$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 8
_blockIndex$ = 20					; size = 8
_cryptoInfo$ = 28					; size = 4
_DecryptBufferLRW64 PROC				; COMDAT

; 966  : {

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+44], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi
  00011	8b 74 24 3c	 mov	 esi, DWORD PTR _buffer$[esp+52]
  00015	57		 push	 edi
  00016	8b 7c 24 54	 mov	 edi, DWORD PTR _cryptoInfo$[esp+56]

; 967  : 	/* Deprecated/legacy */
; 968  : 
; 969  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0001a	8b 07		 mov	 eax, DWORD PTR [edi]
  0001c	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0001f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[eax]

; 970  : 	unsigned __int8 *p = buffer;
; 971  : 	unsigned __int8 *ks = cryptoInfo->ks;
; 972  : 	unsigned __int8 i[8];
; 973  : 	unsigned __int8 t[8];
; 974  : 	unsigned __int64 b;
; 975  : 
; 976  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  00025	8b 44 24 50	 mov	 eax, DWORD PTR _blockIndex$[esp+60]
  00029	89 4c 24 10	 mov	 DWORD PTR _cipher$[esp+60], ecx
  0002d	8b 4c 24 4c	 mov	 ecx, DWORD PTR _blockIndex$[esp+56]
  00031	50		 push	 eax
  00032	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00035	51		 push	 ecx
  00036	89 54 24 1c	 mov	 DWORD PTR _ks$[esp+68], edx
  0003a	e8 00 00 00 00	 call	 _MirrorBytes64

; 977  : 
; 978  : 	if (length % 8)

  0003f	8b 4c 24 4c	 mov	 ecx, DWORD PTR _length$[esp+64]
  00043	89 44 24 38	 mov	 DWORD PTR _i$[esp+68], eax
  00047	8b c1		 mov	 eax, ecx
  00049	89 54 24 3c	 mov	 DWORD PTR _i$[esp+72], edx
  0004d	83 e0 07	 and	 eax, 7
  00050	33 d2		 xor	 edx, edx
  00052	83 c4 08	 add	 esp, 8
  00055	33 db		 xor	 ebx, ebx
  00057	0b c2		 or	 eax, edx
  00059	74 06		 je	 SHORT $LN11@DecryptBuf@2

; 979  : 		TC_THROW_FATAL_EXCEPTION;

  0005b	88 15 00 00 00
	00		 mov	 BYTE PTR ds:0, dl
$LN11@DecryptBuf@2:

; 980  : 
; 981  : 	for (b = 0; b < length >> 3; b++)

  00061	8b 6c 24 48	 mov	 ebp, DWORD PTR _length$[esp+60]
  00065	0f ac e9 03	 shrd	 ecx, ebp, 3
  00069	c1 ed 03	 shr	 ebp, 3
  0006c	33 c0		 xor	 eax, eax
  0006e	89 5c 24 18	 mov	 DWORD PTR _b$[esp+60], ebx
  00072	89 4c 24 20	 mov	 DWORD PTR $T80489[esp+60], ecx
  00076	3b e8		 cmp	 ebp, eax
  00078	0f 82 a4 00 00
	00		 jb	 $LN27@DecryptBuf@2
  0007e	77 08		 ja	 SHORT $LN25@DecryptBuf@2
  00080	3b c8		 cmp	 ecx, eax
  00082	0f 86 9a 00 00
	00		 jbe	 $LN27@DecryptBuf@2
$LN25@DecryptBuf@2:
  00088	81 c7 a8 29 00
	00		 add	 edi, 10664		; 000029a8H
  0008e	8b ff		 npad	 2
$LL10@DecryptBuf@2:

; 982  : 	{
; 983  : 		Gf64MulTab (i, t, &cryptoInfo->gf_ctx);

  00090	57		 push	 edi
  00091	8d 54 24 2c	 lea	 edx, DWORD PTR _t$[esp+64]
  00095	52		 push	 edx
  00096	8d 44 24 38	 lea	 eax, DWORD PTR _i$[esp+68]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _Gf64MulTab

; 984  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000a0	8b 4c 24 34	 mov	 ecx, DWORD PTR _t$[esp+72]

; 985  : 
; 986  : 		DecipherBlock (cipher, p, ks);

  000a4	8b 44 24 20	 mov	 eax, DWORD PTR _ks$[esp+72]
  000a8	31 0e		 xor	 DWORD PTR [esi], ecx
  000aa	8b 4c 24 1c	 mov	 ecx, DWORD PTR _cipher$[esp+72]
  000ae	8b 54 24 38	 mov	 edx, DWORD PTR _t$[esp+76]
  000b2	31 56 04	 xor	 DWORD PTR [esi+4], edx
  000b5	50		 push	 eax
  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _DecipherBlock

; 987  : 
; 988  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000bd	8b 54 24 40	 mov	 edx, DWORD PTR _t$[esp+84]
  000c1	8b 44 24 44	 mov	 eax, DWORD PTR _t$[esp+88]
  000c5	31 16		 xor	 DWORD PTR [esi], edx
  000c7	31 46 04	 xor	 DWORD PTR [esi+4], eax
  000ca	83 c4 18	 add	 esp, 24			; 00000018H

; 989  : 
; 990  : 		p += 8;

  000cd	83 c6 08	 add	 esi, 8

; 991  : 
; 992  : 		if (i[7] != 0xff)

  000d0	80 7c 24 37 ff	 cmp	 BYTE PTR _i$[esp+67], 255 ; 000000ffH
  000d5	74 06		 je	 SHORT $LN7@DecryptBuf@2

; 993  : 			i[7]++;

  000d7	fe 44 24 37	 inc	 BYTE PTR _i$[esp+67]

; 994  : 		else

  000db	eb 27		 jmp	 SHORT $LN9@DecryptBuf@2
$LN7@DecryptBuf@2:

; 995  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  000dd	8b 4c 24 34	 mov	 ecx, DWORD PTR _i$[esp+64]
  000e1	8b 54 24 30	 mov	 edx, DWORD PTR _i$[esp+60]
  000e5	51		 push	 ecx
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 _MirrorBytes64
  000ec	83 c0 01	 add	 eax, 1
  000ef	83 d2 00	 adc	 edx, 0
  000f2	52		 push	 edx
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _MirrorBytes64
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
  000fc	89 44 24 30	 mov	 DWORD PTR _i$[esp+60], eax
  00100	89 54 24 34	 mov	 DWORD PTR _i$[esp+64], edx
$LN9@DecryptBuf@2:
  00104	83 44 24 18 01	 add	 DWORD PTR _b$[esp+60], 1
  00109	83 d3 00	 adc	 ebx, 0
  0010c	3b dd		 cmp	 ebx, ebp
  0010e	72 80		 jb	 SHORT $LL10@DecryptBuf@2

; 980  : 
; 981  : 	for (b = 0; b < length >> 3; b++)

  00110	77 0e		 ja	 SHORT $LN29@DecryptBuf@2
  00112	8b 44 24 20	 mov	 eax, DWORD PTR $T80489[esp+60]
  00116	39 44 24 18	 cmp	 DWORD PTR _b$[esp+60], eax
  0011a	0f 82 70 ff ff
	ff		 jb	 $LL10@DecryptBuf@2
$LN29@DecryptBuf@2:

; 996  : 	}
; 997  : 
; 998  : 	FAST_ERASE64 (t, sizeof(t));

  00120	33 c0		 xor	 eax, eax
$LN27@DecryptBuf@2:
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	89 44 24 20	 mov	 DWORD PTR _t$[esp+52], eax
  00128	5d		 pop	 ebp
  00129	89 44 24 20	 mov	 DWORD PTR _t$[esp+52], eax

; 999  : }

  0012d	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+48]
  00131	5b		 pop	 ebx
  00132	33 cc		 xor	 ecx, esp
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	83 c4 2c	 add	 esp, 44			; 0000002cH
  0013c	c3		 ret	 0
_DecryptBufferLRW64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _EncryptBufferCBC
_TEXT	SEGMENT
_blockSize$ = -36					; size = 4
tv258 = -32						; size = 4
tv330 = -28						; size = 4
_i$ = -24						; size = 8
_bufIV$ = -16						; size = 16
tv277 = 8						; size = 4
_len$ = 8						; size = 4
_ks$ = 12						; size = 4
_whitening$ = 16					; size = 4
_ea$ = 20						; size = 4
_EncryptBufferCBC PROC					; COMDAT
; _data$ = edx
; _iv$ = ecx
; _cipher$ = eax

; 1073 : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b 6c 24 34	 mov	 ebp, DWORD PTR _ks$[esp+40]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f8		 mov	 edi, eax

; 1074 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1075 : 
; 1076 : 	unsigned __int32 bufIV[4];
; 1077 : 	unsigned __int64 i;
; 1078 : 	int blockSize = CipherGetBlockSize (ea != 0 ? EAGetFirstCipher (ea) : cipher);

  0000d	8b 44 24 44	 mov	 eax, DWORD PTR _ea$[esp+48]
  00011	8b d9		 mov	 ebx, ecx
  00013	8b f2		 mov	 esi, edx
  00015	85 c0		 test	 eax, eax
  00017	74 0b		 je	 SHORT $LN16@EncryptBuf@3
  00019	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0001c	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax]
  00022	eb 02		 jmp	 SHORT $LN17@EncryptBuf@3
$LN16@EncryptBuf@3:
  00024	8b c7		 mov	 eax, edi
$LN17@EncryptBuf@3:
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0002c	8b c8		 mov	 ecx, eax

; 1079 : 
; 1080 : 	if (len % blockSize)

  0002e	8b 44 24 3c	 mov	 eax, DWORD PTR _len$[esp+52]
  00032	33 d2		 xor	 edx, edx
  00034	f7 f1		 div	 ecx
  00036	83 c4 04	 add	 esp, 4
  00039	89 4c 24 10	 mov	 DWORD PTR _blockSize$[esp+52], ecx
  0003d	89 44 24 38	 mov	 DWORD PTR tv277[esp+48], eax
  00041	85 d2		 test	 edx, edx
  00043	74 07		 je	 SHORT $LN13@EncryptBuf@3

; 1081 : 		TC_THROW_FATAL_EXCEPTION;

  00045	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN13@EncryptBuf@3:

; 1082 : 
; 1083 : 	//  IV
; 1084 : 	bufIV[0] = iv[0];
; 1085 : 	bufIV[1] = iv[1];
; 1086 : 	if (blockSize == 16)

  0004c	83 7c 24 10 10	 cmp	 DWORD PTR _blockSize$[esp+52], 16 ; 00000010H
  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
  00053	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00056	75 0e		 jne	 SHORT $LN49@EncryptBuf@3

; 1087 : 	{
; 1088 : 		bufIV[2] = iv[2];

  00058	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0005b	89 54 24 2c	 mov	 DWORD PTR _bufIV$[esp+60], edx

; 1089 : 		bufIV[3] = iv[3];

  0005f	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00062	89 54 24 30	 mov	 DWORD PTR _bufIV$[esp+64], edx
$LN49@EncryptBuf@3:

; 1090 : 	}
; 1091 : 
; 1092 : 	// Encrypt each block
; 1093 : 	for (i = 0; i < len/blockSize; i++)

  00066	33 d2		 xor	 edx, edx
  00068	89 54 24 1c	 mov	 DWORD PTR _i$[esp+52], edx
  0006c	89 54 24 20	 mov	 DWORD PTR _i$[esp+56], edx
  00070	3b d2		 cmp	 edx, edx
  00072	0f 82 6e 01 00
	00		 jb	 $LN48@EncryptBuf@3
  00078	77 0a		 ja	 SHORT $LN47@EncryptBuf@3
  0007a	39 54 24 38	 cmp	 DWORD PTR tv277[esp+48], edx
  0007e	0f 86 62 01 00
	00		 jbe	 $LN48@EncryptBuf@3
$LN47@EncryptBuf@3:
  00084	8b 54 24 10	 mov	 edx, DWORD PTR _blockSize$[esp+52]
  00088	c1 ea 02	 shr	 edx, 2
  0008b	03 d2		 add	 edx, edx
  0008d	03 d2		 add	 edx, edx
  0008f	89 54 24 18	 mov	 DWORD PTR tv330[esp+52], edx
$LL50@EncryptBuf@3:

; 1094 : 	{
; 1095 : 		// CBC
; 1096 : 		data[0] ^= bufIV[0];

  00093	31 06		 xor	 DWORD PTR [esi], eax

; 1097 : 		data[1] ^= bufIV[1];

  00095	31 4e 04	 xor	 DWORD PTR [esi+4], ecx

; 1098 : 		if (blockSize == 16)

  00098	83 7c 24 10 10	 cmp	 DWORD PTR _blockSize$[esp+52], 16 ; 00000010H
  0009d	75 0e		 jne	 SHORT $LN8@EncryptBuf@3

; 1099 : 		{
; 1100 : 			data[2] ^= bufIV[2];

  0009f	8b 44 24 2c	 mov	 eax, DWORD PTR _bufIV$[esp+60]

; 1101 : 			data[3] ^= bufIV[3];

  000a3	8b 4c 24 30	 mov	 ecx, DWORD PTR _bufIV$[esp+64]
  000a7	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000aa	31 4e 0c	 xor	 DWORD PTR [esi+12], ecx
$LN8@EncryptBuf@3:

; 1102 : 		}
; 1103 : 
; 1104 : 		if (ea != 0)

  000ad	8b 5c 24 44	 mov	 ebx, DWORD PTR _ea$[esp+48]
  000b1	85 db		 test	 ebx, ebx
  000b3	0f 84 b6 00 00
	00		 je	 $LN7@EncryptBuf@3

; 1105 : 		{
; 1106 : 			// Outer-CBC
; 1107 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  000b9	8b d3		 mov	 edx, ebx
  000bb	6b d2 2c	 imul	 edx, 44			; 0000002cH
  000be	8b ba 00 00 00
	00		 mov	 edi, DWORD PTR _EncryptionAlgorithms[edx]
  000c4	8d 82 00 00 00
	00		 lea	 eax, DWORD PTR _EncryptionAlgorithms[edx]
  000ca	89 44 24 14	 mov	 DWORD PTR tv258[esp+52], eax
  000ce	85 ff		 test	 edi, edi
  000d0	74 62		 je	 SHORT $LN45@EncryptBuf@3
  000d2	6b db 0b	 imul	 ebx, 11			; 0000000bH
$LL25@EncryptBuf@3:

; 1108 : 			{
; 1109 : 				EncipherBlock (cipher, data, ks);

  000d5	55		 push	 ebp
  000d6	56		 push	 esi
  000d7	57		 push	 edi
  000d8	e8 00 00 00 00	 call	 _EncipherBlock

; 1110 : 				ks += CipherGetKeyScheduleSize (cipher);

  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c9		 test	 ecx, ecx
  000ea	74 17		 je	 SHORT $LN30@EncryptBuf@3
  000ec	8d 64 24 00	 npad	 4
$LL32@EncryptBuf@3:
  000f0	3b cf		 cmp	 ecx, edi
  000f2	74 4d		 je	 SHORT $LN39@EncryptBuf@3
  000f4	40		 inc	 eax
  000f5	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000f8	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  000ff	85 c9		 test	 ecx, ecx
  00101	75 ed		 jne	 SHORT $LL32@EncryptBuf@3
$LN30@EncryptBuf@3:
  00103	33 c0		 xor	 eax, eax
$LN33@EncryptBuf@3:
  00105	03 68 10	 add	 ebp, DWORD PTR [eax+16]
  00108	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[ebx*4]
  0010f	33 d2		 xor	 edx, edx
  00111	85 c0		 test	 eax, eax
  00113	74 19		 je	 SHORT $LN52@EncryptBuf@3
  00115	8b 4c 24 14	 mov	 ecx, DWORD PTR tv258[esp+52]
  00119	8d a4 24 00 00
	00 00		 npad	 7

; 1105 : 		{
; 1106 : 			// Outer-CBC
; 1107 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

$LL24@EncryptBuf@3:
  00120	42		 inc	 edx
  00121	83 c1 04	 add	 ecx, 4
  00124	3b c7		 cmp	 eax, edi
  00126	74 25		 je	 SHORT $LN40@EncryptBuf@3
  00128	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012a	85 c0		 test	 eax, eax
  0012c	75 f2		 jne	 SHORT $LL24@EncryptBuf@3
$LN52@EncryptBuf@3:
  0012e	8b 5c 24 44	 mov	 ebx, DWORD PTR _ea$[esp+48]
  00132	33 ff		 xor	 edi, edi
$LN45@EncryptBuf@3:

; 1111 : 			}
; 1112 : 			ks -= EAGetKeyScheduleSize (ea);

  00134	53		 push	 ebx
  00135	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  0013a	83 c4 04	 add	 esp, 4
  0013d	2b e8		 sub	 ebp, eax

; 1113 : 		}
; 1114 : 		else

  0013f	eb 39		 jmp	 SHORT $LN3@EncryptBuf@3
$LN39@EncryptBuf@3:

; 1110 : 				ks += CipherGetKeyScheduleSize (cipher);

  00141	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00144	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  0014b	eb b8		 jmp	 SHORT $LN33@EncryptBuf@3
$LN40@EncryptBuf@3:

; 1105 : 		{
; 1106 : 			// Outer-CBC
; 1107 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  0014d	03 d3		 add	 edx, ebx
  0014f	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR _EncryptionAlgorithms[edx*4]
  00156	85 ff		 test	 edi, edi
  00158	0f 85 77 ff ff
	ff		 jne	 $LL25@EncryptBuf@3
  0015e	8b 5c 24 44	 mov	 ebx, DWORD PTR _ea$[esp+48]

; 1111 : 			}
; 1112 : 			ks -= EAGetKeyScheduleSize (ea);

  00162	53		 push	 ebx
  00163	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  00168	83 c4 04	 add	 esp, 4
  0016b	2b e8		 sub	 ebp, eax

; 1113 : 		}
; 1114 : 		else

  0016d	eb 0b		 jmp	 SHORT $LN3@EncryptBuf@3
$LN7@EncryptBuf@3:

; 1115 : 		{
; 1116 : 			// CBC/inner-CBC
; 1117 : 			EncipherBlock (cipher, data, ks);

  0016f	55		 push	 ebp
  00170	56		 push	 esi
  00171	57		 push	 edi
  00172	e8 00 00 00 00	 call	 _EncipherBlock
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@EncryptBuf@3:

; 1118 : 		}
; 1119 : 
; 1120 : 		// CBC
; 1121 : 		bufIV[0] = data[0];
; 1122 : 		bufIV[1] = data[1];
; 1123 : 		if (blockSize == 16)

  0017a	83 7c 24 10 10	 cmp	 DWORD PTR _blockSize$[esp+52], 16 ; 00000010H
  0017f	8b 06		 mov	 eax, DWORD PTR [esi]
  00181	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00184	75 0e		 jne	 SHORT $LN2@EncryptBuf@3

; 1124 : 		{
; 1125 : 			bufIV[2] = data[2];

  00186	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00189	89 54 24 2c	 mov	 DWORD PTR _bufIV$[esp+60], edx

; 1126 : 			bufIV[3] = data[3];

  0018d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00190	89 54 24 30	 mov	 DWORD PTR _bufIV$[esp+64], edx
$LN2@EncryptBuf@3:

; 1127 : 		}
; 1128 : 
; 1129 : 		// Whitening
; 1130 : 		data[0] ^= whitening[0];

  00194	8b 54 24 40	 mov	 edx, DWORD PTR _whitening$[esp+48]
  00198	8b 1a		 mov	 ebx, DWORD PTR [edx]
  0019a	33 d8		 xor	 ebx, eax
  0019c	89 1e		 mov	 DWORD PTR [esi], ebx

; 1131 : 		data[1] ^= whitening[1];

  0019e	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  001a1	33 d9		 xor	 ebx, ecx

; 1132 : 		if (blockSize == 16)

  001a3	83 7c 24 10 10	 cmp	 DWORD PTR _blockSize$[esp+52], 16 ; 00000010H
  001a8	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  001ab	75 0b		 jne	 SHORT $LN1@EncryptBuf@3

; 1133 : 		{
; 1134 : 			data[2] ^= whitening[0];

  001ad	8b 1a		 mov	 ebx, DWORD PTR [edx]
  001af	31 5e 08	 xor	 DWORD PTR [esi+8], ebx

; 1135 : 			data[3] ^= whitening[1];

  001b2	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001b5	31 56 0c	 xor	 DWORD PTR [esi+12], edx
$LN1@EncryptBuf@3:

; 1136 : 		}
; 1137 : 
; 1138 : 		data += blockSize / sizeof(*data);

  001b8	03 74 24 18	 add	 esi, DWORD PTR tv330[esp+52]
  001bc	83 44 24 1c 01	 add	 DWORD PTR _i$[esp+52], 1
  001c1	8b 5c 24 20	 mov	 ebx, DWORD PTR _i$[esp+56]
  001c5	83 d3 00	 adc	 ebx, 0
  001c8	33 d2		 xor	 edx, edx
  001ca	89 5c 24 20	 mov	 DWORD PTR _i$[esp+56], ebx
  001ce	3b da		 cmp	 ebx, edx
  001d0	0f 82 bd fe ff
	ff		 jb	 $LL50@EncryptBuf@3

; 1090 : 	}
; 1091 : 
; 1092 : 	// Encrypt each block
; 1093 : 	for (i = 0; i < len/blockSize; i++)

  001d6	77 0e		 ja	 SHORT $LN48@EncryptBuf@3
  001d8	8b 54 24 38	 mov	 edx, DWORD PTR tv277[esp+48]
  001dc	39 54 24 1c	 cmp	 DWORD PTR _i$[esp+52], edx
  001e0	0f 82 ad fe ff
	ff		 jb	 $LL50@EncryptBuf@3
$LN48@EncryptBuf@3:
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5d		 pop	 ebp
  001e9	5b		 pop	 ebx

; 1139 : 	}
; 1140 : }

  001ea	83 c4 24	 add	 esp, 36			; 00000024H
  001ed	c3		 ret	 0
_EncryptBufferCBC ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _DecryptBufferCBC
_TEXT	SEGMENT
_blockSize$ = -48					; size = 4
tv277 = -44						; size = 4
_i$ = -40						; size = 8
_bufIV$ = -32						; size = 16
_ct$ = -16						; size = 16
tv337 = 8						; size = 4
_len$ = 8						; size = 4
_ks$ = 12						; size = 4
_whitening$ = 16					; size = 4
_ea$ = 20						; size = 4
_DecryptBufferCBC PROC					; COMDAT
; _data$ = edx
; _iv$ = ecx
; _cipher$ = eax

; 1161 : {

  00000	83 ec 30	 sub	 esp, 48			; 00000030H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b 6c 24 40	 mov	 ebp, DWORD PTR _ks$[esp+52]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f8		 mov	 edi, eax

; 1162 : 
; 1163 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1164 : 
; 1165 : 	unsigned __int32 bufIV[4];
; 1166 : 	unsigned __int64 i;
; 1167 : 	unsigned __int32 ct[4];
; 1168 : 	int blockSize = CipherGetBlockSize (ea != 0 ? EAGetFirstCipher (ea) : cipher);

  0000d	8b 44 24 50	 mov	 eax, DWORD PTR _ea$[esp+60]
  00011	8b d9		 mov	 ebx, ecx
  00013	8b f2		 mov	 esi, edx
  00015	85 c0		 test	 eax, eax
  00017	74 0b		 je	 SHORT $LN16@DecryptBuf@3
  00019	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0001c	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax]
  00022	eb 02		 jmp	 SHORT $LN17@DecryptBuf@3
$LN16@DecryptBuf@3:
  00024	8b c7		 mov	 eax, edi
$LN17@DecryptBuf@3:
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0002c	8b c8		 mov	 ecx, eax

; 1169 : 
; 1170 : 	if (len % blockSize)

  0002e	8b 44 24 48	 mov	 eax, DWORD PTR _len$[esp+64]
  00032	33 d2		 xor	 edx, edx
  00034	f7 f1		 div	 ecx
  00036	83 c4 04	 add	 esp, 4
  00039	89 4c 24 10	 mov	 DWORD PTR _blockSize$[esp+64], ecx
  0003d	89 44 24 14	 mov	 DWORD PTR tv277[esp+64], eax
  00041	85 d2		 test	 edx, edx
  00043	74 07		 je	 SHORT $LN13@DecryptBuf@3

; 1171 : 		TC_THROW_FATAL_EXCEPTION;

  00045	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN13@DecryptBuf@3:

; 1172 : 
; 1173 : 	//  IV
; 1174 : 	bufIV[0] = iv[0];

  0004c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0004e	89 54 24 20	 mov	 DWORD PTR _bufIV$[esp+64], edx

; 1175 : 	bufIV[1] = iv[1];

  00052	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00055	89 54 24 24	 mov	 DWORD PTR _bufIV$[esp+68], edx

; 1176 : 	if (blockSize == 16)

  00059	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005c	75 0e		 jne	 SHORT $LN49@DecryptBuf@3

; 1177 : 	{
; 1178 : 		bufIV[2] = iv[2];

  0005e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00061	89 54 24 28	 mov	 DWORD PTR _bufIV$[esp+72], edx

; 1179 : 		bufIV[3] = iv[3];

  00065	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00068	89 54 24 2c	 mov	 DWORD PTR _bufIV$[esp+76], edx
$LN49@DecryptBuf@3:

; 1180 : 	}
; 1181 : 
; 1182 : 	// Decrypt each block
; 1183 : 	for (i = 0; i < len/blockSize; i++)

  0006c	33 d2		 xor	 edx, edx
  0006e	89 54 24 18	 mov	 DWORD PTR _i$[esp+64], edx
  00072	89 54 24 1c	 mov	 DWORD PTR _i$[esp+68], edx
  00076	3b d2		 cmp	 edx, edx
  00078	0f 82 96 01 00
	00		 jb	 $LN48@DecryptBuf@3
  0007e	77 08		 ja	 SHORT $LN47@DecryptBuf@3
  00080	3b c2		 cmp	 eax, edx
  00082	0f 86 8c 01 00
	00		 jbe	 $LN48@DecryptBuf@3
$LN47@DecryptBuf@3:
  00088	8b c1		 mov	 eax, ecx
  0008a	c1 e8 02	 shr	 eax, 2
  0008d	03 c0		 add	 eax, eax
  0008f	03 c0		 add	 eax, eax
  00091	89 44 24 44	 mov	 DWORD PTR tv337[esp+60], eax
  00095	eb 0d		 jmp	 SHORT $LN11@DecryptBuf@3
  00097	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL50@DecryptBuf@3:
  000a0	8b 4c 24 10	 mov	 ecx, DWORD PTR _blockSize$[esp+64]
$LN11@DecryptBuf@3:

; 1184 : 	{
; 1185 : 		// Dewhitening
; 1186 : 		data[0] ^= whitening[0];

  000a4	8b 44 24 4c	 mov	 eax, DWORD PTR _whitening$[esp+60]
  000a8	8b 10		 mov	 edx, DWORD PTR [eax]
  000aa	31 16		 xor	 DWORD PTR [esi], edx

; 1187 : 		data[1] ^= whitening[1];

  000ac	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000af	31 56 04	 xor	 DWORD PTR [esi+4], edx

; 1188 : 		if (blockSize == 16)

  000b2	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000b5	75 0b		 jne	 SHORT $LN8@DecryptBuf@3

; 1189 : 		{
; 1190 : 			data[2] ^= whitening[0];

  000b7	8b 10		 mov	 edx, DWORD PTR [eax]
  000b9	31 56 08	 xor	 DWORD PTR [esi+8], edx

; 1191 : 			data[3] ^= whitening[1];

  000bc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bf	31 46 0c	 xor	 DWORD PTR [esi+12], eax
$LN8@DecryptBuf@3:

; 1192 : 		}
; 1193 : 
; 1194 : 		// CBC
; 1195 : 		ct[0] = data[0];

  000c2	8b 16		 mov	 edx, DWORD PTR [esi]

; 1196 : 		ct[1] = data[1];

  000c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c7	89 54 24 30	 mov	 DWORD PTR _ct$[esp+64], edx
  000cb	89 44 24 34	 mov	 DWORD PTR _ct$[esp+68], eax

; 1197 : 		if (blockSize == 16)

  000cf	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000d2	75 0e		 jne	 SHORT $LN51@DecryptBuf@3

; 1198 : 		{
; 1199 : 			ct[2] = data[2];

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1200 : 			ct[3] = data[3];

  000d7	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000da	89 4c 24 38	 mov	 DWORD PTR _ct$[esp+72], ecx
  000de	89 54 24 3c	 mov	 DWORD PTR _ct$[esp+76], edx
$LN51@DecryptBuf@3:

; 1201 : 		}
; 1202 : 
; 1203 : 		if (ea != 0)

  000e2	8b 5c 24 50	 mov	 ebx, DWORD PTR _ea$[esp+60]
  000e6	85 db		 test	 ebx, ebx
  000e8	0f 84 ab 00 00
	00		 je	 $LN6@DecryptBuf@3

; 1204 : 		{
; 1205 : 			// Outer-CBC
; 1206 : 			ks += EAGetKeyScheduleSize (ea);

  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize

; 1207 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  000f4	53		 push	 ebx
  000f5	03 e8		 add	 ebp, eax
  000f7	e8 00 00 00 00	 call	 _EAGetLastCipher
  000fc	8b f8		 mov	 edi, eax
  000fe	83 c4 08	 add	 esp, 8
  00101	85 ff		 test	 edi, edi
  00103	0f 84 9b 00 00
	00		 je	 $LN53@DecryptBuf@3
  00109	6b db 0b	 imul	 ebx, 11			; 0000000bH
  0010c	8d 64 24 00	 npad	 4
$LL24@DecryptBuf@3:

; 1208 : 			{
; 1209 : 				ks -= CipherGetKeyScheduleSize (cipher);

  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00116	33 c0		 xor	 eax, eax
  00118	85 c9		 test	 ecx, ecx
  0011a	74 17		 je	 SHORT $LN29@DecryptBuf@3
  0011c	8d 64 24 00	 npad	 4
$LL31@DecryptBuf@3:
  00120	3b cf		 cmp	 ecx, edi
  00122	74 56		 je	 SHORT $LN38@DecryptBuf@3
  00124	40		 inc	 eax
  00125	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00128	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0012f	85 c9		 test	 ecx, ecx
  00131	75 ed		 jne	 SHORT $LL31@DecryptBuf@3
$LN29@DecryptBuf@3:
  00133	33 c0		 xor	 eax, eax
$LN32@DecryptBuf@3:
  00135	2b 68 10	 sub	 ebp, DWORD PTR [eax+16]

; 1210 : 				DecipherBlock (cipher, data, ks);

  00138	55		 push	 ebp
  00139	56		 push	 esi
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 _DecipherBlock
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
  00143	ba 01 00 00 00	 mov	 edx, 1
  00148	39 3c 9d 00 00
	00 00		 cmp	 DWORD PTR _EncryptionAlgorithms[ebx*4], edi
  0014f	74 25		 je	 SHORT $LN45@DecryptBuf@3
  00151	8b 0c 9d 04 00
	00 00		 mov	 ecx, DWORD PTR _EncryptionAlgorithms[ebx*4+4]
  00158	85 c9		 test	 ecx, ecx
  0015a	74 1a		 je	 SHORT $LN45@DecryptBuf@3
  0015c	8b 44 24 50	 mov	 eax, DWORD PTR _ea$[esp+60]
  00160	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00163	05 04 00 00 00	 add	 eax, OFFSET _EncryptionAlgorithms+4
$LL22@DecryptBuf@3:
  00168	42		 inc	 edx
  00169	83 c0 04	 add	 eax, 4
  0016c	3b cf		 cmp	 ecx, edi
  0016e	74 16		 je	 SHORT $LN39@DecryptBuf@3
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	85 c9		 test	 ecx, ecx
  00174	75 f2		 jne	 SHORT $LL22@DecryptBuf@3
$LN45@DecryptBuf@3:

; 1207 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  00176	33 ff		 xor	 edi, edi
  00178	eb 2a		 jmp	 SHORT $LN53@DecryptBuf@3
$LN38@DecryptBuf@3:

; 1208 : 			{
; 1209 : 				ks -= CipherGetKeyScheduleSize (cipher);

  0017a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0017d	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  00184	eb af		 jmp	 SHORT $LN32@DecryptBuf@3
$LN39@DecryptBuf@3:

; 1207 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  00186	03 d3		 add	 edx, ebx
  00188	8b 3c 95 f8 ff
	ff ff		 mov	 edi, DWORD PTR _EncryptionAlgorithms[edx*4-8]
  0018f	85 ff		 test	 edi, edi
  00191	0f 85 79 ff ff
	ff		 jne	 $LL24@DecryptBuf@3
  00197	eb 0b		 jmp	 SHORT $LN53@DecryptBuf@3
$LN6@DecryptBuf@3:

; 1211 : 			}
; 1212 : 		}
; 1213 : 		else
; 1214 : 		{
; 1215 : 			// CBC/inner-CBC
; 1216 : 			DecipherBlock (cipher, data, ks);

  00199	55		 push	 ebp
  0019a	56		 push	 esi
  0019b	57		 push	 edi
  0019c	e8 00 00 00 00	 call	 _DecipherBlock
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN53@DecryptBuf@3:

; 1217 : 		}
; 1218 : 
; 1219 : 		// CBC
; 1220 : 		data[0] ^= bufIV[0];

  001a4	8b 44 24 20	 mov	 eax, DWORD PTR _bufIV$[esp+64]

; 1221 : 		data[1] ^= bufIV[1];

  001a8	8b 4c 24 24	 mov	 ecx, DWORD PTR _bufIV$[esp+68]
  001ac	31 06		 xor	 DWORD PTR [esi], eax
  001ae	31 4e 04	 xor	 DWORD PTR [esi+4], ecx

; 1222 : 		bufIV[0] = ct[0];
; 1223 : 		bufIV[1] = ct[1];
; 1224 : 		if (blockSize == 16)

  001b1	83 7c 24 10 10	 cmp	 DWORD PTR _blockSize$[esp+64], 16 ; 00000010H
  001b6	8b 54 24 30	 mov	 edx, DWORD PTR _ct$[esp+64]
  001ba	8b 44 24 34	 mov	 eax, DWORD PTR _ct$[esp+68]
  001be	89 54 24 20	 mov	 DWORD PTR _bufIV$[esp+64], edx
  001c2	89 44 24 24	 mov	 DWORD PTR _bufIV$[esp+68], eax
  001c6	75 1e		 jne	 SHORT $LN1@DecryptBuf@3

; 1225 : 		{
; 1226 : 			data[2] ^= bufIV[2];

  001c8	8b 4c 24 28	 mov	 ecx, DWORD PTR _bufIV$[esp+72]
  001cc	31 4e 08	 xor	 DWORD PTR [esi+8], ecx

; 1227 : 			data[3] ^= bufIV[3];

  001cf	8b 54 24 2c	 mov	 edx, DWORD PTR _bufIV$[esp+76]

; 1228 : 			bufIV[2] = ct[2];

  001d3	8b 44 24 38	 mov	 eax, DWORD PTR _ct$[esp+72]

; 1229 : 			bufIV[3] = ct[3];

  001d7	8b 4c 24 3c	 mov	 ecx, DWORD PTR _ct$[esp+76]
  001db	31 56 0c	 xor	 DWORD PTR [esi+12], edx
  001de	89 44 24 28	 mov	 DWORD PTR _bufIV$[esp+72], eax
  001e2	89 4c 24 2c	 mov	 DWORD PTR _bufIV$[esp+76], ecx
$LN1@DecryptBuf@3:

; 1230 : 		}
; 1231 : 
; 1232 : 		data += blockSize / sizeof(*data);

  001e6	03 74 24 44	 add	 esi, DWORD PTR tv337[esp+60]
  001ea	83 44 24 18 01	 add	 DWORD PTR _i$[esp+64], 1
  001ef	8b 4c 24 1c	 mov	 ecx, DWORD PTR _i$[esp+68]
  001f3	83 d1 00	 adc	 ecx, 0
  001f6	33 c0		 xor	 eax, eax
  001f8	89 4c 24 1c	 mov	 DWORD PTR _i$[esp+68], ecx
  001fc	3b c8		 cmp	 ecx, eax
  001fe	0f 82 9c fe ff
	ff		 jb	 $LL50@DecryptBuf@3

; 1180 : 	}
; 1181 : 
; 1182 : 	// Decrypt each block
; 1183 : 	for (i = 0; i < len/blockSize; i++)

  00204	77 0e		 ja	 SHORT $LN48@DecryptBuf@3
  00206	8b 54 24 18	 mov	 edx, DWORD PTR _i$[esp+64]
  0020a	3b 54 24 14	 cmp	 edx, DWORD PTR tv277[esp+64]
  0020e	0f 82 8c fe ff
	ff		 jb	 $LL50@DecryptBuf@3
$LN48@DecryptBuf@3:
  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5d		 pop	 ebp
  00217	5b		 pop	 ebx

; 1233 : 	}
; 1234 : }

  00218	83 c4 30	 add	 esp, 48			; 00000030H
  0021b	c3		 ret	 0
_DecryptBufferCBC ENDP
_TEXT	ENDS
PUBLIC	_EncryptBuffer
EXTRN	_EncryptBufferXTS:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncryptBuffer
_TEXT	SEGMENT
_dataUnitNo$79366 = -8					; size = 8
_buf$ = 8						; size = 4
_len$ = 12						; size = 8
_cryptoInfo$ = 20					; size = 4
_EncryptBuffer PROC					; COMDAT

; 1244 : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1245 : 	switch (cryptoInfo->mode)

  00007	8b 7c 24 28	 mov	 edi, DWORD PTR _cryptoInfo$[esp+20]
  0000b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000e	48		 dec	 eax
  0000f	83 f8 04	 cmp	 eax, 4
  00012	0f 87 63 01 00
	00		 ja	 $LN1@EncryptBuf@4
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@EncryptBuf@4[eax*4]
$LN16@EncryptBuf@4:

; 1246 : 	{
; 1247 : 	case XTS:
; 1248 : 		{
; 1249 : 			unsigned __int8 *ks = cryptoInfo->ks;
; 1250 : 			unsigned __int8 *ks2 = cryptoInfo->ks2;
; 1251 : 			UINT64_STRUCT dataUnitNo;
; 1252 : 			int cipher;
; 1253 : 
; 1254 : 			// When encrypting/decrypting a buffer (typically a volume header) the sequential number
; 1255 : 			// of the first XTS data unit in the buffer is always 0 and the start of the buffer is
; 1256 : 			// always assumed to be aligned with the start of a data unit.
; 1257 : 			dataUnitNo.LowPart = 0;
; 1258 : 			dataUnitNo.HighPart = 0;
; 1259 : 
; 1260 : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 1261 : 				cipher != 0;
; 1262 : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  0001f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00021	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00024	8b b1 00 00 00
	00		 mov	 esi, DWORD PTR _EncryptionAlgorithms[ecx]
  0002a	33 c0		 xor	 eax, eax
  0002c	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0002f	8d af d4 14 00
	00		 lea	 ebp, DWORD PTR [edi+5332]
  00035	89 44 24 10	 mov	 DWORD PTR _dataUnitNo$79366[esp+24], eax
  00039	89 44 24 14	 mov	 DWORD PTR _dataUnitNo$79366[esp+28], eax
  0003d	3b f0		 cmp	 esi, eax
  0003f	0f 84 3d 01 00
	00		 je	 $LN17@EncryptBuf@4
$LL31@EncryptBuf@4:

; 1263 : 			{
; 1264 : 				EncryptBufferXTS (buf, len, &dataUnitNo, 0, ks, ks2, cipher);

  00045	8b 44 24 24	 mov	 eax, DWORD PTR _len$[esp+24]
  00049	8b 4c 24 20	 mov	 ecx, DWORD PTR _len$[esp+20]
  0004d	56		 push	 esi
  0004e	55		 push	 ebp
  0004f	53		 push	 ebx
  00050	6a 00		 push	 0
  00052	8d 54 24 20	 lea	 edx, DWORD PTR _dataUnitNo$79366[esp+40]
  00056	52		 push	 edx
  00057	8b 54 24 30	 mov	 edx, DWORD PTR _buf$[esp+40]
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 _EncryptBufferXTS

; 1265 : 
; 1266 : 				ks += CipherGetKeyScheduleSize (cipher);

  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1267 : 				ks2 += CipherGetKeyScheduleSize (cipher);

  00069	56		 push	 esi
  0006a	03 d8		 add	 ebx, eax
  0006c	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize
  00071	03 e8		 add	 ebp, eax
  00073	8b 07		 mov	 eax, DWORD PTR [edi]
  00075	56		 push	 esi
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _EAGetNextCipher
  0007c	8b f0		 mov	 esi, eax
  0007e	83 c4 30	 add	 esp, 48			; 00000030H
  00081	85 f6		 test	 esi, esi
  00083	75 c0		 jne	 SHORT $LL31@EncryptBuf@4
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp
  00088	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  00089	83 c4 08	 add	 esp, 8
  0008c	c3		 ret	 0
$LN12@EncryptBuf@4:

; 1268 : 			}
; 1269 : 		}
; 1270 : 		break;
; 1271 : 
; 1272 : #ifndef TC_NO_COMPILER_INT64
; 1273 : 	case LRW:
; 1274 : 
; 1275 : 		/* Deprecated/legacy */
; 1276 : 
; 1277 : 		switch (CipherGetBlockSize (EAGetFirstCipher (cryptoInfo->ea)))

  0008d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0008f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00092	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _EncryptionAlgorithms[ecx]
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0009e	83 c4 04	 add	 esp, 4
  000a1	83 f8 08	 cmp	 eax, 8
  000a4	74 2d		 je	 SHORT $LN9@EncryptBuf@4
  000a6	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1281 : 			break;
; 1282 : 
; 1283 : 		case 16:
; 1284 : 			EncryptBufferLRW128 ((unsigned __int8 *)buf, (unsigned __int64) len, 1, cryptoInfo);
; 1285 : 			break;
; 1286 : 
; 1287 : 		default:
; 1288 : 			TC_THROW_FATAL_EXCEPTION;

  000a9	0f 85 cc 00 00
	00		 jne	 $LN1@EncryptBuf@4
  000af	8b 44 24 24	 mov	 eax, DWORD PTR _len$[esp+24]
  000b3	8b 4c 24 20	 mov	 ecx, DWORD PTR _len$[esp+20]
  000b7	8b 54 24 1c	 mov	 edx, DWORD PTR _buf$[esp+20]
  000bb	57		 push	 edi
  000bc	6a 00		 push	 0
  000be	6a 01		 push	 1
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _EncryptBufferLRW128
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  000cf	83 c4 08	 add	 esp, 8
  000d2	c3		 ret	 0
$LN9@EncryptBuf@4:

; 1278 : 		{
; 1279 : 		case 8:
; 1280 : 			EncryptBufferLRW64 ((unsigned __int8 *)buf, (unsigned __int64) len, 1, cryptoInfo);

  000d3	8b 44 24 24	 mov	 eax, DWORD PTR _len$[esp+24]
  000d7	8b 4c 24 20	 mov	 ecx, DWORD PTR _len$[esp+20]
  000db	8b 54 24 1c	 mov	 edx, DWORD PTR _buf$[esp+20]
  000df	57		 push	 edi
  000e0	6a 00		 push	 0
  000e2	6a 01		 push	 1
  000e4	50		 push	 eax
  000e5	51		 push	 ecx
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 _EncryptBufferLRW64
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5d		 pop	 ebp
  000f2	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  000f3	83 c4 08	 add	 esp, 8
  000f6	c3		 ret	 0
$LN6@EncryptBuf@4:

; 1289 : 		}
; 1290 : 		break;
; 1291 : 
; 1292 : 	case CBC:
; 1293 : 	case INNER_CBC:
; 1294 : 		{
; 1295 : 			/* Deprecated/legacy */
; 1296 : 
; 1297 : 			unsigned __int8 *ks = cryptoInfo->ks;
; 1298 : 			int cipher;
; 1299 : 
; 1300 : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 1301 : 				cipher != 0;
; 1302 : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  000f7	8b 07		 mov	 eax, DWORD PTR [edi]
  000f9	6b c0 2c	 imul	 eax, 44			; 0000002cH
  000fc	8b b0 00 00 00
	00		 mov	 esi, DWORD PTR _EncryptionAlgorithms[eax]
  00102	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00105	85 f6		 test	 esi, esi
  00107	74 79		 je	 SHORT $LN17@EncryptBuf@4
  00109	8d af b0 42 00
	00		 lea	 ebp, DWORD PTR [edi+17072]
  0010f	90		 npad	 1
$LL32@EncryptBuf@4:

; 1303 : 			{
; 1304 : 				EncryptBufferCBC ((unsigned __int32 *) buf,
; 1305 : 					(unsigned int) len,
; 1306 : 					ks,
; 1307 : 					(unsigned __int32 *) cryptoInfo->k2,
; 1308 : 					(unsigned __int32 *) &cryptoInfo->k2[8],
; 1309 : 					0,
; 1310 : 					cipher);

  00110	8b 4c 24 20	 mov	 ecx, DWORD PTR _len$[esp+20]
  00114	8b 54 24 1c	 mov	 edx, DWORD PTR _buf$[esp+20]
  00118	6a 00		 push	 0
  0011a	55		 push	 ebp
  0011b	53		 push	 ebx
  0011c	51		 push	 ecx
  0011d	8b c6		 mov	 eax, esi
  0011f	8d 8f a8 42 00
	00		 lea	 ecx, DWORD PTR [edi+17064]
  00125	e8 00 00 00 00	 call	 _EncryptBufferCBC

; 1311 : 
; 1312 : 				ks += CipherGetKeyScheduleSize (cipher);

  0012a	56		 push	 esi
  0012b	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize
  00130	8b 17		 mov	 edx, DWORD PTR [edi]
  00132	56		 push	 esi
  00133	52		 push	 edx
  00134	03 d8		 add	 ebx, eax
  00136	e8 00 00 00 00	 call	 _EAGetNextCipher
  0013b	8b f0		 mov	 esi, eax
  0013d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00140	85 f6		 test	 esi, esi
  00142	75 cc		 jne	 SHORT $LL32@EncryptBuf@4
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5d		 pop	 ebp
  00147	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  00148	83 c4 08	 add	 esp, 8
  0014b	c3		 ret	 0
$LN2@EncryptBuf@4:

; 1313 : 			}
; 1314 : 		}
; 1315 : 		break;
; 1316 : 
; 1317 : 	case OUTER_CBC:
; 1318 : 
; 1319 : 		/* Deprecated/legacy */
; 1320 : 
; 1321 : 		EncryptBufferCBC ((unsigned __int32 *) buf,
; 1322 : 			(unsigned int) len,
; 1323 : 			cryptoInfo->ks,
; 1324 : 			(unsigned __int32 *) cryptoInfo->k2,
; 1325 : 			(unsigned __int32 *) &cryptoInfo->k2[8],
; 1326 : 			cryptoInfo->ea,
; 1327 : 			0);

  0014c	8b 07		 mov	 eax, DWORD PTR [edi]
  0014e	8b 54 24 20	 mov	 edx, DWORD PTR _len$[esp+20]
  00152	50		 push	 eax
  00153	8d 8f b0 42 00
	00		 lea	 ecx, DWORD PTR [edi+17072]
  00159	51		 push	 ecx
  0015a	8d 8f a8 42 00
	00		 lea	 ecx, DWORD PTR [edi+17064]
  00160	83 c7 08	 add	 edi, 8
  00163	57		 push	 edi
  00164	52		 push	 edx
  00165	8b 54 24 2c	 mov	 edx, DWORD PTR _buf$[esp+36]
  00169	33 c0		 xor	 eax, eax
  0016b	e8 00 00 00 00	 call	 _EncryptBufferCBC
  00170	83 c4 10	 add	 esp, 16			; 00000010H
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5d		 pop	 ebp
  00176	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  00177	83 c4 08	 add	 esp, 8
  0017a	c3		 ret	 0
$LN1@EncryptBuf@4:

; 1328 : 
; 1329 : 		break;
; 1330 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1331 : 
; 1332 : 	default:		
; 1333 : 		// Unknown/wrong ID
; 1334 : 		TC_THROW_FATAL_EXCEPTION;

  0017b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN17@EncryptBuf@4:
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5d		 pop	 ebp
  00185	5b		 pop	 ebx

; 1335 : 	}
; 1336 : }

  00186	83 c4 08	 add	 esp, 8
  00189	c3		 ret	 0
  0018a	8b ff		 npad	 2
$LN33@EncryptBuf@4:
  0018c	00 00 00 00	 DD	 $LN16@EncryptBuf@4
  00190	00 00 00 00	 DD	 $LN12@EncryptBuf@4
  00194	00 00 00 00	 DD	 $LN6@EncryptBuf@4
  00198	00 00 00 00	 DD	 $LN2@EncryptBuf@4
  0019c	00 00 00 00	 DD	 $LN6@EncryptBuf@4
_EncryptBuffer ENDP
_TEXT	ENDS
PUBLIC	_EncryptDataUnitsCurrentThread
EXTRN	__allmul:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EncryptDataUnitsCurrentThread
_TEXT	SEGMENT
tv395 = -40						; size = 4
_iv64$ = -36						; size = 4
tv337 = -32						; size = 8
_unitNo$ = -32						; size = 8
_secWhitening$ = -24					; size = 8
_sectorIV$ = -16					; size = 16
_buf$ = 8						; size = 4
tv333 = 12						; size = 4
_structUnitNo$ = 12					; size = 4
_nbrUnits$ = 16						; size = 8
_ea$ = 24						; size = 4
_ci$ = 24						; size = 4
_EncryptDataUnitsCurrentThread PROC			; COMDAT

; 1378 : {

  00000	83 ec 28	 sub	 esp, 40			; 00000028H
  00003	53		 push	 ebx

; 1379 : 	int ea = ci->ea;
; 1380 : 	unsigned __int8 *ks = ci->ks;
; 1381 : 	unsigned __int8 *ks2 = ci->ks2;
; 1382 : 	int cipher;
; 1383 : 
; 1384 : #ifndef TC_NO_COMPILER_INT64
; 1385 : 	void *iv = ci->k2;									// Deprecated/legacy
; 1386 : 	unsigned __int64 unitNo = structUnitNo->Value;

  00004	8b 5c 24 34	 mov	 ebx, DWORD PTR _structUnitNo$[esp+40]
  00008	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0000a	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0000d	55		 push	 ebp
  0000e	56		 push	 esi
  0000f	8b 74 24 48	 mov	 esi, DWORD PTR _ci$[esp+48]
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4c 24 14	 mov	 DWORD PTR _unitNo$[esp+52], ecx
  00019	8d 8e a8 42 00
	00		 lea	 ecx, DWORD PTR [esi+17064]
  0001f	89 4c 24 10	 mov	 DWORD PTR _iv64$[esp+52], ecx

; 1387 : 	unsigned __int64 *iv64 = (unsigned __int64 *) iv;	// Deprecated/legacy
; 1388 : 	unsigned __int32 sectorIV[4];						// Deprecated/legacy
; 1389 : 	unsigned __int32 secWhitening[2];					// Deprecated/legacy
; 1390 : #endif
; 1391 : 
; 1392 : 	switch (ci->mode)

  00023	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00026	49		 dec	 ecx
  00027	57		 push	 edi
  00028	89 44 24 4c	 mov	 DWORD PTR _ea$[esp+52], eax
  0002c	8d 6e 08	 lea	 ebp, DWORD PTR [esi+8]
  0002f	8d be d4 14 00
	00		 lea	 edi, DWORD PTR [esi+5332]
  00035	89 54 24 1c	 mov	 DWORD PTR _unitNo$[esp+60], edx
  00039	83 f9 04	 cmp	 ecx, 4
  0003c	0f 87 8f 03 00
	00		 ja	 $LN1@EncryptDat
  00042	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN101@EncryptDat[ecx*4]
$LN20@EncryptDat:

; 1393 : 	{
; 1394 : 	case XTS:
; 1395 : 		for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  00049	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0004c	8b b0 00 00 00
	00		 mov	 esi, DWORD PTR _EncryptionAlgorithms[eax]
  00052	85 f6		 test	 esi, esi
  00054	0f 84 7e 03 00
	00		 je	 $LN21@EncryptDat
  0005a	8b 54 24 48	 mov	 edx, DWORD PTR _nbrUnits$[esp+56]
  0005e	8b 44 24 44	 mov	 eax, DWORD PTR _nbrUnits$[esp+52]
  00062	6a 00		 push	 0
  00064	68 00 02 00 00	 push	 512			; 00000200H
  00069	52		 push	 edx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 __allmul
  00070	89 44 24 18	 mov	 DWORD PTR tv337[esp+56], eax
  00074	89 54 24 1c	 mov	 DWORD PTR tv337[esp+60], edx
  00078	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL98@EncryptDat:

; 1396 : 		{
; 1397 : 			EncryptBufferXTS (buf,
; 1398 : 				nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1399 : 				structUnitNo,
; 1400 : 				0,
; 1401 : 				ks,
; 1402 : 				ks2,
; 1403 : 				cipher);

  00080	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv337[esp+60]
  00084	8b 54 24 18	 mov	 edx, DWORD PTR tv337[esp+56]
  00088	8b 44 24 3c	 mov	 eax, DWORD PTR _buf$[esp+52]
  0008c	56		 push	 esi
  0008d	57		 push	 edi
  0008e	55		 push	 ebp
  0008f	6a 00		 push	 0
  00091	53		 push	 ebx
  00092	51		 push	 ecx
  00093	52		 push	 edx
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _EncryptBufferXTS

; 1404 : 
; 1405 : 			ks += CipherGetKeyScheduleSize (cipher);

  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1406 : 			ks2 += CipherGetKeyScheduleSize (cipher);

  000a0	56		 push	 esi
  000a1	03 e8		 add	 ebp, eax
  000a3	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize
  000a8	8b 4c 24 74	 mov	 ecx, DWORD PTR _ea$[esp+92]
  000ac	56		 push	 esi
  000ad	51		 push	 ecx
  000ae	03 f8		 add	 edi, eax
  000b0	e8 00 00 00 00	 call	 _EAGetNextCipher
  000b5	8b f0		 mov	 esi, eax
  000b7	83 c4 30	 add	 esp, 48			; 00000030H
  000ba	85 f6		 test	 esi, esi
  000bc	75 c2		 jne	 SHORT $LL98@EncryptDat
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5d		 pop	 ebp
  000c1	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  000c2	83 c4 28	 add	 esp, 40			; 00000028H
  000c5	c3		 ret	 0
$LN16@EncryptDat:

; 1407 : 		}
; 1408 : 		break;
; 1409 : 
; 1410 : #ifndef TC_NO_COMPILER_INT64
; 1411 : 	case LRW:
; 1412 : 
; 1413 : 		/* Deprecated/legacy */
; 1414 : 
; 1415 : 		switch (CipherGetBlockSize (EAGetFirstCipher (ea)))

  000c6	6b c0 2c	 imul	 eax, 44			; 0000002cH
  000c9	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _EncryptionAlgorithms[eax]
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 _CipherGetBlockSize
  000d5	83 c4 04	 add	 esp, 4
  000d8	83 f8 08	 cmp	 eax, 8
  000db	74 7f		 je	 SHORT $LN13@EncryptDat
  000dd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1429 : 			break;
; 1430 : 
; 1431 : 		default:
; 1432 : 			TC_THROW_FATAL_EXCEPTION;

  000e0	0f 85 eb 02 00
	00		 jne	 $LN1@EncryptDat

; 1422 : 			break;
; 1423 : 
; 1424 : 		case 16:
; 1425 : 			EncryptBufferLRW128 (buf,
; 1426 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1427 : 				DataUnit2LRWIndex (unitNo, 16, ci),
; 1428 : 				ci);

  000e6	83 be a0 29 00
	00 00		 cmp	 DWORD PTR [esi+10656], 0
  000ed	74 25		 je	 SHORT $LN44@EncryptDat
  000ef	8b 86 18 44 00
	00		 mov	 eax, DWORD PTR [esi+17432]
  000f5	8b 8e 1c 44 00
	00		 mov	 ecx, DWORD PTR [esi+17436]
  000fb	0f ac c8 09	 shrd	 eax, ecx, 9
  000ff	c1 e9 09	 shr	 ecx, 9
  00102	8b d0		 mov	 edx, eax
  00104	8b 44 24 18	 mov	 eax, DWORD PTR _unitNo$[esp+56]
  00108	8b f9		 mov	 edi, ecx
  0010a	8b 4c 24 1c	 mov	 ecx, DWORD PTR _unitNo$[esp+60]
  0010e	2b c2		 sub	 eax, edx
  00110	1b cf		 sbb	 ecx, edi
  00112	eb 0e		 jmp	 SHORT $LN43@EncryptDat
$LN44@EncryptDat:
  00114	8b 44 24 18	 mov	 eax, DWORD PTR _unitNo$[esp+56]
  00118	8b 4c 24 1c	 mov	 ecx, DWORD PTR _unitNo$[esp+60]
  0011c	83 c0 ff	 add	 eax, -1
  0011f	83 d1 ff	 adc	 ecx, -1
$LN43@EncryptDat:
  00122	0f a4 c1 05	 shld	 ecx, eax, 5
  00126	56		 push	 esi
  00127	51		 push	 ecx
  00128	8b 4c 24 4c	 mov	 ecx, DWORD PTR _nbrUnits$[esp+60]
  0012c	c1 e0 05	 shl	 eax, 5
  0012f	83 c8 01	 or	 eax, 1
  00132	50		 push	 eax
  00133	8b 44 24 54	 mov	 eax, DWORD PTR _nbrUnits$[esp+68]
  00137	6a 00		 push	 0
  00139	68 00 02 00 00	 push	 512			; 00000200H
  0013e	50		 push	 eax
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 __allmul
  00145	52		 push	 edx
  00146	8b 54 24 4c	 mov	 edx, DWORD PTR _buf$[esp+68]
  0014a	50		 push	 eax
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _EncryptBufferLRW128
  00151	83 c4 18	 add	 esp, 24			; 00000018H
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5d		 pop	 ebp
  00157	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  00158	83 c4 28	 add	 esp, 40			; 00000028H
  0015b	c3		 ret	 0
$LN13@EncryptDat:

; 1416 : 		{
; 1417 : 		case 8:
; 1418 : 			EncryptBufferLRW64 (buf,
; 1419 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1420 : 				DataUnit2LRWIndex (unitNo, 8, ci),
; 1421 : 				ci);

  0015c	83 be a0 29 00
	00 00		 cmp	 DWORD PTR [esi+10656], 0
  00163	74 25		 je	 SHORT $LN35@EncryptDat
  00165	8b 86 18 44 00
	00		 mov	 eax, DWORD PTR [esi+17432]
  0016b	8b 8e 1c 44 00
	00		 mov	 ecx, DWORD PTR [esi+17436]
  00171	0f ac c8 09	 shrd	 eax, ecx, 9
  00175	c1 e9 09	 shr	 ecx, 9
  00178	8b d0		 mov	 edx, eax
  0017a	8b 44 24 18	 mov	 eax, DWORD PTR _unitNo$[esp+56]
  0017e	8b f9		 mov	 edi, ecx
  00180	8b 4c 24 1c	 mov	 ecx, DWORD PTR _unitNo$[esp+60]
  00184	2b c2		 sub	 eax, edx
  00186	1b cf		 sbb	 ecx, edi
  00188	eb 0e		 jmp	 SHORT $LN34@EncryptDat
$LN35@EncryptDat:
  0018a	8b 44 24 18	 mov	 eax, DWORD PTR _unitNo$[esp+56]
  0018e	8b 4c 24 1c	 mov	 ecx, DWORD PTR _unitNo$[esp+60]
  00192	83 c0 ff	 add	 eax, -1
  00195	83 d1 ff	 adc	 ecx, -1
$LN34@EncryptDat:
  00198	0f a4 c1 06	 shld	 ecx, eax, 6
  0019c	56		 push	 esi
  0019d	51		 push	 ecx
  0019e	8b 4c 24 4c	 mov	 ecx, DWORD PTR _nbrUnits$[esp+60]
  001a2	c1 e0 06	 shl	 eax, 6
  001a5	83 c8 01	 or	 eax, 1
  001a8	50		 push	 eax
  001a9	8b 44 24 54	 mov	 eax, DWORD PTR _nbrUnits$[esp+68]
  001ad	6a 00		 push	 0
  001af	68 00 02 00 00	 push	 512			; 00000200H
  001b4	50		 push	 eax
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 __allmul
  001bb	52		 push	 edx
  001bc	8b 54 24 4c	 mov	 edx, DWORD PTR _buf$[esp+68]
  001c0	50		 push	 eax
  001c1	52		 push	 edx
  001c2	e8 00 00 00 00	 call	 _EncryptBufferLRW64
  001c7	83 c4 18	 add	 esp, 24			; 00000018H
  001ca	5f		 pop	 edi
  001cb	5e		 pop	 esi
  001cc	5d		 pop	 ebp
  001cd	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  001ce	83 c4 28	 add	 esp, 40			; 00000028H
  001d1	c3		 ret	 0
$LN73@EncryptDat:

; 1433 : 		}
; 1434 : 		break;
; 1435 : 
; 1436 : 	case CBC:
; 1437 : 	case INNER_CBC:
; 1438 : 
; 1439 : 		/* Deprecated/legacy */
; 1440 : 
; 1441 : 		while (nbrUnits--)

  001d2	8b 4c 24 44	 mov	 ecx, DWORD PTR _nbrUnits$[esp+52]
  001d6	0b 4c 24 48	 or	 ecx, DWORD PTR _nbrUnits$[esp+56]
  001da	0f 84 f8 01 00
	00		 je	 $LN21@EncryptDat
  001e0	8b 5c 24 3c	 mov	 ebx, DWORD PTR _buf$[esp+52]
  001e4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _Ciphers
  001ea	8b d0		 mov	 edx, eax
  001ec	6b d2 2c	 imul	 edx, 44			; 0000002cH

; 1460 : 		}
; 1461 : 		break;
; 1462 : 
; 1463 : 	case OUTER_CBC:
; 1464 : 
; 1465 : 		/* Deprecated/legacy */
; 1466 : 
; 1467 : 		while (nbrUnits--)

  001ef	8d 8a 00 00 00
	00		 lea	 ecx, DWORD PTR _EncryptionAlgorithms[edx]
  001f5	89 4c 24 40	 mov	 DWORD PTR tv333[esp+52], ecx
  001f9	eb 09		 jmp	 SHORT $LN9@EncryptDat
  001fb	eb 03 8d 49 00	 npad	 5
$LL93@EncryptDat:

; 1433 : 		}
; 1434 : 		break;
; 1435 : 
; 1436 : 	case CBC:
; 1437 : 	case INNER_CBC:
; 1438 : 
; 1439 : 		/* Deprecated/legacy */
; 1440 : 
; 1441 : 		while (nbrUnits--)

  00200	8b 44 24 4c	 mov	 eax, DWORD PTR _ea$[esp+52]
$LN9@EncryptDat:

; 1442 : 		{
; 1443 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  00204	8b 54 24 40	 mov	 edx, DWORD PTR tv333[esp+52]
  00208	8b 32		 mov	 esi, DWORD PTR [edx]
  0020a	83 c9 ff	 or	 ecx, -1
  0020d	01 4c 24 44	 add	 DWORD PTR _nbrUnits$[esp+52], ecx
  00211	11 4c 24 48	 adc	 DWORD PTR _nbrUnits$[esp+56], ecx
  00215	85 f6		 test	 esi, esi
  00217	0f 84 e9 00 00
	00		 je	 $LN92@EncryptDat
  0021d	6b c0 0b	 imul	 eax, 11			; 0000000bH
  00220	89 44 24 10	 mov	 DWORD PTR tv395[esp+56], eax
$LL94@EncryptDat:

; 1444 : 			{
; 1445 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  00224	33 c0		 xor	 eax, eax
  00226	85 ff		 test	 edi, edi
  00228	74 1d		 je	 SHORT $LN57@EncryptDat
  0022a	8b cf		 mov	 ecx, edi
  0022c	8d 64 24 00	 npad	 4
$LL59@EncryptDat:
  00230	3b ce		 cmp	 ecx, esi
  00232	0f 84 9a 00 00
	00		 je	 $LN79@EncryptDat
  00238	40		 inc	 eax
  00239	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0023c	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  00243	85 c9		 test	 ecx, ecx
  00245	75 e9		 jne	 SHORT $LL59@EncryptDat
$LN57@EncryptDat:
  00247	33 c0		 xor	 eax, eax
$LN60@EncryptDat:
  00249	8d 54 24 20	 lea	 edx, DWORD PTR _secWhitening$[esp+56]
  0024d	52		 push	 edx
  0024e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00251	8b 44 24 20	 mov	 eax, DWORD PTR _unitNo$[esp+64]
  00255	8d 4c 24 2c	 lea	 ecx, DWORD PTR _sectorIV$[esp+60]
  00259	51		 push	 ecx
  0025a	8b 4c 24 20	 mov	 ecx, DWORD PTR _unitNo$[esp+64]
  0025e	52		 push	 edx
  0025f	50		 push	 eax
  00260	8b 44 24 24	 mov	 eax, DWORD PTR _iv64$[esp+72]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 _InitSectorIVAndWhitening

; 1446 : 
; 1447 : 				EncryptBufferCBC ((unsigned __int32 *) buf,
; 1448 : 					ENCRYPTION_DATA_UNIT_SIZE,
; 1449 : 					ks,
; 1450 : 					sectorIV,
; 1451 : 					secWhitening,
; 1452 : 					0,
; 1453 : 					cipher);

  0026a	6a 00		 push	 0
  0026c	8d 54 24 38	 lea	 edx, DWORD PTR _secWhitening$[esp+80]
  00270	52		 push	 edx
  00271	55		 push	 ebp
  00272	68 00 02 00 00	 push	 512			; 00000200H
  00277	8b c6		 mov	 eax, esi
  00279	8d 4c 24 4c	 lea	 ecx, DWORD PTR _sectorIV$[esp+92]
  0027d	8b d3		 mov	 edx, ebx
  0027f	e8 00 00 00 00	 call	 _EncryptBufferCBC

; 1454 : 
; 1455 : 				ks += CipherGetKeyScheduleSize (cipher);

  00284	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _Ciphers
  0028a	83 c4 24	 add	 esp, 36			; 00000024H
  0028d	33 c0		 xor	 eax, eax
  0028f	85 ff		 test	 edi, edi
  00291	74 15		 je	 SHORT $LN65@EncryptDat
  00293	8b cf		 mov	 ecx, edi
$LL67@EncryptDat:
  00295	3b ce		 cmp	 ecx, esi
  00297	74 48		 je	 SHORT $LN80@EncryptDat
  00299	40		 inc	 eax
  0029a	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0029d	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  002a4	85 c9		 test	 ecx, ecx
  002a6	75 ed		 jne	 SHORT $LL67@EncryptDat
$LN65@EncryptDat:
  002a8	33 c0		 xor	 eax, eax
$LN68@EncryptDat:
  002aa	03 68 10	 add	 ebp, DWORD PTR [eax+16]
  002ad	8b 44 24 10	 mov	 eax, DWORD PTR tv395[esp+56]
  002b1	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax*4]
  002b8	33 d2		 xor	 edx, edx
  002ba	85 c0		 test	 eax, eax
  002bc	74 44		 je	 SHORT $LN100@EncryptDat
  002be	8b 4c 24 40	 mov	 ecx, DWORD PTR tv333[esp+52]

; 1442 : 		{
; 1443 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

$LL51@EncryptDat:
  002c2	42		 inc	 edx
  002c3	83 c1 04	 add	 ecx, 4
  002c6	3b c6		 cmp	 eax, esi
  002c8	74 23		 je	 SHORT $LN81@EncryptDat
  002ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  002cc	85 c0		 test	 eax, eax
  002ce	75 f2		 jne	 SHORT $LL51@EncryptDat
  002d0	eb 30		 jmp	 SHORT $LN100@EncryptDat
$LN79@EncryptDat:

; 1444 : 			{
; 1445 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  002d2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002d5	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  002dc	e9 68 ff ff ff	 jmp	 $LN60@EncryptDat
$LN80@EncryptDat:

; 1454 : 
; 1455 : 				ks += CipherGetKeyScheduleSize (cipher);

  002e1	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002e4	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  002eb	eb bd		 jmp	 SHORT $LN68@EncryptDat
$LN81@EncryptDat:

; 1442 : 		{
; 1443 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  002ed	8b 4c 24 10	 mov	 ecx, DWORD PTR tv395[esp+56]
  002f1	03 ca		 add	 ecx, edx
  002f3	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR _EncryptionAlgorithms[ecx*4]
  002fa	85 f6		 test	 esi, esi
  002fc	0f 85 22 ff ff
	ff		 jne	 $LL94@EncryptDat
$LN100@EncryptDat:
  00302	8b 44 24 4c	 mov	 eax, DWORD PTR _ea$[esp+52]
$LN92@EncryptDat:

; 1456 : 			}
; 1457 : 			ks -= EAGetKeyScheduleSize (ea);

  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  0030c	8b 54 24 48	 mov	 edx, DWORD PTR _nbrUnits$[esp+56]
  00310	83 c4 04	 add	 esp, 4
  00313	2b e8		 sub	 ebp, eax

; 1458 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  00315	81 c3 00 02 00
	00		 add	 ebx, 512		; 00000200H

; 1459 : 			unitNo++;

  0031b	83 44 24 18 01	 add	 DWORD PTR _unitNo$[esp+56], 1
  00320	83 54 24 1c 00	 adc	 DWORD PTR _unitNo$[esp+60], 0
  00325	0b 54 24 48	 or	 edx, DWORD PTR _nbrUnits$[esp+56]
  00329	0f 85 d1 fe ff
	ff		 jne	 $LL93@EncryptDat
  0032f	5f		 pop	 edi
  00330	5e		 pop	 esi
  00331	5d		 pop	 ebp
  00332	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  00333	83 c4 28	 add	 esp, 40			; 00000028H
  00336	c3		 ret	 0
$LN78@EncryptDat:

; 1460 : 		}
; 1461 : 		break;
; 1462 : 
; 1463 : 	case OUTER_CBC:
; 1464 : 
; 1465 : 		/* Deprecated/legacy */
; 1466 : 
; 1467 : 		while (nbrUnits--)

  00337	8b 7c 24 44	 mov	 edi, DWORD PTR _nbrUnits$[esp+52]
  0033b	8b 5c 24 48	 mov	 ebx, DWORD PTR _nbrUnits$[esp+56]
  0033f	8b c7		 mov	 eax, edi
  00341	0b c3		 or	 eax, ebx
  00343	0f 84 8f 00 00
	00		 je	 $LN21@EncryptDat
  00349	8b 4c 24 4c	 mov	 ecx, DWORD PTR _ea$[esp+52]
  0034d	8b 74 24 3c	 mov	 esi, DWORD PTR _buf$[esp+52]
  00351	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00354	8d 91 00 00 00
	00		 lea	 edx, DWORD PTR _EncryptionAlgorithms[ecx]
  0035a	89 54 24 40	 mov	 DWORD PTR tv333[esp+52], edx
  0035e	8b ff		 npad	 2
$LL3@EncryptDat:

; 1468 : 		{
; 1469 : 			InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (EAGetFirstCipher (ea)), sectorIV, iv64, secWhitening);

  00360	8b 54 24 40	 mov	 edx, DWORD PTR tv333[esp+52]
  00364	8d 44 24 20	 lea	 eax, DWORD PTR _secWhitening$[esp+56]
  00368	50		 push	 eax
  00369	8b 02		 mov	 eax, DWORD PTR [edx]
  0036b	8d 4c 24 2c	 lea	 ecx, DWORD PTR _sectorIV$[esp+60]
  0036f	51		 push	 ecx
  00370	83 c7 ff	 add	 edi, -1
  00373	50		 push	 eax
  00374	83 d3 ff	 adc	 ebx, -1
  00377	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0037c	8b 4c 24 28	 mov	 ecx, DWORD PTR _unitNo$[esp+72]
  00380	8b 54 24 24	 mov	 edx, DWORD PTR _unitNo$[esp+68]
  00384	83 c4 04	 add	 esp, 4
  00387	50		 push	 eax
  00388	8b 44 24 20	 mov	 eax, DWORD PTR _iv64$[esp+68]
  0038c	51		 push	 ecx
  0038d	52		 push	 edx
  0038e	e8 00 00 00 00	 call	 _InitSectorIVAndWhitening

; 1470 : 
; 1471 : 			EncryptBufferCBC ((unsigned __int32 *) buf,
; 1472 : 				ENCRYPTION_DATA_UNIT_SIZE,
; 1473 : 				ks,
; 1474 : 				sectorIV,
; 1475 : 				secWhitening,
; 1476 : 				ea,
; 1477 : 				0);

  00393	8b 44 24 60	 mov	 eax, DWORD PTR _ea$[esp+72]
  00397	50		 push	 eax
  00398	8d 4c 24 38	 lea	 ecx, DWORD PTR _secWhitening$[esp+80]
  0039c	51		 push	 ecx
  0039d	55		 push	 ebp
  0039e	68 00 02 00 00	 push	 512			; 00000200H
  003a3	33 c0		 xor	 eax, eax
  003a5	8d 4c 24 4c	 lea	 ecx, DWORD PTR _sectorIV$[esp+92]
  003a9	8b d6		 mov	 edx, esi
  003ab	e8 00 00 00 00	 call	 _EncryptBufferCBC
  003b0	83 c4 24	 add	 esp, 36			; 00000024H

; 1478 : 
; 1479 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  003b3	81 c6 00 02 00
	00		 add	 esi, 512		; 00000200H

; 1480 : 			unitNo++;

  003b9	83 44 24 18 01	 add	 DWORD PTR _unitNo$[esp+56], 1
  003be	8b d7		 mov	 edx, edi
  003c0	83 54 24 1c 00	 adc	 DWORD PTR _unitNo$[esp+60], 0
  003c5	0b d3		 or	 edx, ebx
  003c7	75 97		 jne	 SHORT $LL3@EncryptDat
  003c9	5f		 pop	 edi
  003ca	5e		 pop	 esi
  003cb	5d		 pop	 ebp
  003cc	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  003cd	83 c4 28	 add	 esp, 40			; 00000028H
  003d0	c3		 ret	 0
$LN1@EncryptDat:

; 1481 : 		}
; 1482 : 		break;
; 1483 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1484 : 
; 1485 : 	default:		
; 1486 : 		// Unknown/wrong ID
; 1487 : 		TC_THROW_FATAL_EXCEPTION;

  003d1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN21@EncryptDat:
  003d8	5f		 pop	 edi
  003d9	5e		 pop	 esi
  003da	5d		 pop	 ebp
  003db	5b		 pop	 ebx

; 1488 : 	}
; 1489 : }

  003dc	83 c4 28	 add	 esp, 40			; 00000028H
  003df	c3		 ret	 0
$LN101@EncryptDat:
  003e0	00 00 00 00	 DD	 $LN20@EncryptDat
  003e4	00 00 00 00	 DD	 $LN16@EncryptDat
  003e8	00 00 00 00	 DD	 $LN73@EncryptDat
  003ec	00 00 00 00	 DD	 $LN78@EncryptDat
  003f0	00 00 00 00	 DD	 $LN73@EncryptDat
_EncryptDataUnitsCurrentThread ENDP
_TEXT	ENDS
PUBLIC	_DecryptBuffer
EXTRN	_DecryptBufferXTS:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DecryptBuffer
_TEXT	SEGMENT
_dataUnitNo$79494 = -8					; size = 8
_buf$ = 8						; size = 4
_len$ = 12						; size = 8
_cryptoInfo$ = 20					; size = 4
_DecryptBuffer PROC					; COMDAT

; 1497 : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1498 : 	switch (cryptoInfo->mode)

  00007	8b 7c 24 28	 mov	 edi, DWORD PTR _cryptoInfo$[esp+20]
  0000b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000e	48		 dec	 eax
  0000f	83 f8 04	 cmp	 eax, 4
  00012	0f 87 7b 01 00
	00		 ja	 $LN1@DecryptBuf@4
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@DecryptBuf@4[eax*4]
$LN16@DecryptBuf@4:

; 1499 : 	{
; 1500 : 	case XTS:
; 1501 : 		{
; 1502 : 			unsigned __int8 *ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  0001f	8b 37		 mov	 esi, DWORD PTR [edi]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize

; 1503 : 			unsigned __int8 *ks2 = cryptoInfo->ks2 + EAGetKeyScheduleSize (cryptoInfo->ea);

  00027	56		 push	 esi
  00028	8d 5c 38 08	 lea	 ebx, DWORD PTR [eax+edi+8]
  0002c	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  00031	8d ac 38 d4 14
	00 00		 lea	 ebp, DWORD PTR [eax+edi+5332]

; 1504 : 			UINT64_STRUCT dataUnitNo;
; 1505 : 			int cipher;
; 1506 : 
; 1507 : 			// When encrypting/decrypting a buffer (typically a volume header) the sequential number
; 1508 : 			// of the first XTS data unit in the buffer is always 0 and the start of the buffer is
; 1509 : 			// always assumed to be aligned with the start of the data unit 0.
; 1510 : 			dataUnitNo.LowPart = 0;

  00038	33 c0		 xor	 eax, eax

; 1511 : 			dataUnitNo.HighPart = 0;
; 1512 : 
; 1513 : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 1514 : 				cipher != 0;
; 1515 : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  0003a	56		 push	 esi
  0003b	89 44 24 1c	 mov	 DWORD PTR _dataUnitNo$79494[esp+36], eax
  0003f	89 44 24 20	 mov	 DWORD PTR _dataUnitNo$79494[esp+40], eax
  00043	e8 00 00 00 00	 call	 _EAGetLastCipher
  00048	8b f0		 mov	 esi, eax
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	85 f6		 test	 esi, esi
  0004f	0f 84 45 01 00
	00		 je	 $LN17@DecryptBuf@4
$LL15@DecryptBuf@4:

; 1516 : 			{
; 1517 : 				ks -= CipherGetKeyScheduleSize (cipher);

  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1518 : 				ks2 -= CipherGetKeyScheduleSize (cipher);

  0005b	56		 push	 esi
  0005c	2b d8		 sub	 ebx, eax
  0005e	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1519 : 
; 1520 : 				DecryptBufferXTS (buf, len, &dataUnitNo, 0, ks, ks2, cipher);

  00063	8b 4c 24 2c	 mov	 ecx, DWORD PTR _len$[esp+32]
  00067	8b 54 24 28	 mov	 edx, DWORD PTR _len$[esp+28]
  0006b	56		 push	 esi
  0006c	2b e8		 sub	 ebp, eax
  0006e	55		 push	 ebp
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	8d 44 24 28	 lea	 eax, DWORD PTR _dataUnitNo$79494[esp+48]
  00076	50		 push	 eax
  00077	8b 44 24 38	 mov	 eax, DWORD PTR _buf$[esp+48]
  0007b	51		 push	 ecx
  0007c	52		 push	 edx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _DecryptBufferXTS
  00083	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00085	56		 push	 esi
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0008c	8b f0		 mov	 esi, eax
  0008e	83 c4 30	 add	 esp, 48			; 00000030H
  00091	85 f6		 test	 esi, esi
  00093	75 c0		 jne	 SHORT $LL15@DecryptBuf@4
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  00099	83 c4 08	 add	 esp, 8
  0009c	c3		 ret	 0
$LN12@DecryptBuf@4:

; 1521 : 			}
; 1522 : 		}
; 1523 : 		break;
; 1524 : 
; 1525 : #ifndef TC_NO_COMPILER_INT64
; 1526 : 	case LRW:
; 1527 : 
; 1528 : 		/* Deprecated/legacy */
; 1529 : 
; 1530 : 		switch (CipherGetBlockSize (EAGetFirstCipher (cryptoInfo->ea)))

  0009d	8b 17		 mov	 edx, DWORD PTR [edi]
  0009f	6b d2 2c	 imul	 edx, 44			; 0000002cH
  000a2	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[edx]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _CipherGetBlockSize
  000ae	83 c4 04	 add	 esp, 4
  000b1	83 f8 08	 cmp	 eax, 8
  000b4	74 2d		 je	 SHORT $LN9@DecryptBuf@4
  000b6	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1534 : 			break;
; 1535 : 
; 1536 : 		case 16:
; 1537 : 			DecryptBufferLRW128 (buf, (unsigned __int64) len, 1, cryptoInfo);
; 1538 : 			break;
; 1539 : 
; 1540 : 		default:
; 1541 : 			TC_THROW_FATAL_EXCEPTION;

  000b9	0f 85 d4 00 00
	00		 jne	 $LN1@DecryptBuf@4
  000bf	8b 4c 24 24	 mov	 ecx, DWORD PTR _len$[esp+24]
  000c3	8b 54 24 20	 mov	 edx, DWORD PTR _len$[esp+20]
  000c7	8b 44 24 1c	 mov	 eax, DWORD PTR _buf$[esp+20]
  000cb	57		 push	 edi
  000cc	6a 00		 push	 0
  000ce	6a 01		 push	 1
  000d0	51		 push	 ecx
  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 _DecryptBufferLRW128
  000d8	83 c4 18	 add	 esp, 24			; 00000018H
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5d		 pop	 ebp
  000de	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  000df	83 c4 08	 add	 esp, 8
  000e2	c3		 ret	 0
$LN9@DecryptBuf@4:

; 1531 : 		{
; 1532 : 		case 8:
; 1533 : 			DecryptBufferLRW64 (buf, (unsigned __int64) len, 1, cryptoInfo);

  000e3	8b 4c 24 24	 mov	 ecx, DWORD PTR _len$[esp+24]
  000e7	8b 54 24 20	 mov	 edx, DWORD PTR _len$[esp+20]
  000eb	8b 44 24 1c	 mov	 eax, DWORD PTR _buf$[esp+20]
  000ef	57		 push	 edi
  000f0	6a 00		 push	 0
  000f2	6a 01		 push	 1
  000f4	51		 push	 ecx
  000f5	52		 push	 edx
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 _DecryptBufferLRW64
  000fc	83 c4 18	 add	 esp, 24			; 00000018H
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5d		 pop	 ebp
  00102	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  00103	83 c4 08	 add	 esp, 8
  00106	c3		 ret	 0
$LN6@DecryptBuf@4:

; 1542 : 		}
; 1543 : 		break;
; 1544 : 
; 1545 : 	case CBC:
; 1546 : 	case INNER_CBC:
; 1547 : 		{
; 1548 : 			/* Deprecated/legacy */
; 1549 : 
; 1550 : 			unsigned __int8 *ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  00107	8b 37		 mov	 esi, DWORD PTR [edi]
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize

; 1551 : 			int cipher;
; 1552 : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 1553 : 				cipher != 0;
; 1554 : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  0010f	56		 push	 esi
  00110	8d 5c 38 08	 lea	 ebx, DWORD PTR [eax+edi+8]
  00114	e8 00 00 00 00	 call	 _EAGetLastCipher
  00119	8b f0		 mov	 esi, eax
  0011b	83 c4 08	 add	 esp, 8
  0011e	85 f6		 test	 esi, esi
  00120	74 78		 je	 SHORT $LN17@DecryptBuf@4
  00122	8d af b0 42 00
	00		 lea	 ebp, DWORD PTR [edi+17072]
$LL5@DecryptBuf@4:

; 1555 : 			{
; 1556 : 				ks -= CipherGetKeyScheduleSize (cipher);

  00128	56		 push	 esi
  00129	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1557 : 
; 1558 : 				DecryptBufferCBC ((unsigned __int32 *) buf,
; 1559 : 					(unsigned int) len,
; 1560 : 					ks,
; 1561 : 					(unsigned __int32 *) cryptoInfo->k2,
; 1562 : 					(unsigned __int32 *) &cryptoInfo->k2[8],
; 1563 : 					0,
; 1564 : 					cipher);

  0012e	8b 4c 24 24	 mov	 ecx, DWORD PTR _len$[esp+24]
  00132	8b 54 24 20	 mov	 edx, DWORD PTR _buf$[esp+24]
  00136	6a 00		 push	 0
  00138	2b d8		 sub	 ebx, eax
  0013a	55		 push	 ebp
  0013b	53		 push	 ebx
  0013c	51		 push	 ecx
  0013d	8b c6		 mov	 eax, esi
  0013f	8d 8f a8 42 00
	00		 lea	 ecx, DWORD PTR [edi+17064]
  00145	e8 00 00 00 00	 call	 _DecryptBufferCBC
  0014a	8b 17		 mov	 edx, DWORD PTR [edi]
  0014c	56		 push	 esi
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  00153	8b f0		 mov	 esi, eax
  00155	83 c4 1c	 add	 esp, 28			; 0000001cH
  00158	85 f6		 test	 esi, esi
  0015a	75 cc		 jne	 SHORT $LL5@DecryptBuf@4
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5d		 pop	 ebp
  0015f	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  00160	83 c4 08	 add	 esp, 8
  00163	c3		 ret	 0
$LN2@DecryptBuf@4:

; 1565 : 			}
; 1566 : 		}
; 1567 : 		break;
; 1568 : 
; 1569 : 	case OUTER_CBC:
; 1570 : 
; 1571 : 		/* Deprecated/legacy */
; 1572 : 
; 1573 : 		DecryptBufferCBC ((unsigned __int32 *) buf,
; 1574 : 			(unsigned int) len,
; 1575 : 			cryptoInfo->ks,
; 1576 : 			(unsigned __int32 *) cryptoInfo->k2,
; 1577 : 			(unsigned __int32 *) &cryptoInfo->k2[8],
; 1578 : 			cryptoInfo->ea,
; 1579 : 			0);

  00164	8b 07		 mov	 eax, DWORD PTR [edi]
  00166	8b 54 24 20	 mov	 edx, DWORD PTR _len$[esp+20]
  0016a	50		 push	 eax
  0016b	8d 8f b0 42 00
	00		 lea	 ecx, DWORD PTR [edi+17072]
  00171	51		 push	 ecx
  00172	8d 8f a8 42 00
	00		 lea	 ecx, DWORD PTR [edi+17064]
  00178	83 c7 08	 add	 edi, 8
  0017b	57		 push	 edi
  0017c	52		 push	 edx
  0017d	8b 54 24 2c	 mov	 edx, DWORD PTR _buf$[esp+36]
  00181	33 c0		 xor	 eax, eax
  00183	e8 00 00 00 00	 call	 _DecryptBufferCBC
  00188	83 c4 10	 add	 esp, 16			; 00000010H
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5d		 pop	 ebp
  0018e	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  0018f	83 c4 08	 add	 esp, 8
  00192	c3		 ret	 0
$LN1@DecryptBuf@4:

; 1580 : 
; 1581 : 		break;
; 1582 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1583 : 
; 1584 : 	default:		
; 1585 : 		// Unknown/wrong ID
; 1586 : 		TC_THROW_FATAL_EXCEPTION;

  00193	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN17@DecryptBuf@4:
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	5d		 pop	 ebp
  0019d	5b		 pop	 ebx

; 1587 : 	}
; 1588 : }

  0019e	83 c4 08	 add	 esp, 8
  001a1	c3		 ret	 0
  001a2	8b ff		 npad	 2
$LN27@DecryptBuf@4:
  001a4	00 00 00 00	 DD	 $LN16@DecryptBuf@4
  001a8	00 00 00 00	 DD	 $LN12@DecryptBuf@4
  001ac	00 00 00 00	 DD	 $LN6@DecryptBuf@4
  001b0	00 00 00 00	 DD	 $LN2@DecryptBuf@4
  001b4	00 00 00 00	 DD	 $LN6@DecryptBuf@4
_DecryptBuffer ENDP
_TEXT	ENDS
PUBLIC	_DecryptDataUnitsCurrentThread
; Function compile flags: /Ogtpy
;	COMDAT _DecryptDataUnitsCurrentThread
_TEXT	SEGMENT
_ea$ = -44						; size = 4
_iv64$ = -40						; size = 4
tv310 = -36						; size = 4
tv306 = -32						; size = 8
_unitNo$ = -32						; size = 8
_secWhitening$ = -24					; size = 8
_sectorIV$ = -16					; size = 16
_buf$ = 8						; size = 4
_structUnitNo$ = 12					; size = 4
_nbrUnits$ = 16						; size = 8
_ci$ = 24						; size = 4
_DecryptDataUnitsCurrentThread PROC			; COMDAT

; 1601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 1602 : 	int ea = ci->ea;
; 1603 : 	unsigned __int8 *ks = ci->ks;
; 1604 : 	unsigned __int8 *ks2 = ci->ks2;
; 1605 : 	int cipher;
; 1606 : 
; 1607 : #ifndef TC_NO_COMPILER_INT64
; 1608 : 	void *iv = ci->k2;									// Deprecated/legacy
; 1609 : 	unsigned __int64 unitNo = structUnitNo->Value;

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _structUnitNo$[ebp]
  0000c	53		 push	 ebx
  0000d	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	56		 push	 esi
  00013	8b 75 18	 mov	 esi, DWORD PTR _ci$[ebp]
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	89 4c 24 18	 mov	 DWORD PTR _unitNo$[esp+56], ecx

; 1610 : 	unsigned __int64 *iv64 = (unsigned __int64 *) iv;	// Deprecated/legacy
; 1611 : 	unsigned __int32 sectorIV[4];						// Deprecated/legacy
; 1612 : 	unsigned __int32 secWhitening[2];					// Deprecated/legacy
; 1613 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1614 : 
; 1615 : 
; 1616 : 	switch (ci->mode)

  0001c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001f	49		 dec	 ecx
  00020	8d 96 a8 42 00
	00		 lea	 edx, DWORD PTR [esi+17064]
  00026	57		 push	 edi
  00027	89 44 24 0c	 mov	 DWORD PTR _ea$[esp+56], eax
  0002b	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0002e	89 54 24 10	 mov	 DWORD PTR _iv64$[esp+56], edx
  00032	83 f9 04	 cmp	 ecx, 4
  00035	0f 87 28 03 00
	00		 ja	 $LN1@DecryptDat
  0003b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN82@DecryptDat[ecx*4]
$LN20@DecryptDat:

; 1617 : 	{
; 1618 : 	case XTS:
; 1619 : 		ks += EAGetKeyScheduleSize (ea);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  00048	03 f8		 add	 edi, eax

; 1620 : 		ks2 += EAGetKeyScheduleSize (ea);

  0004a	8b 44 24 10	 mov	 eax, DWORD PTR _ea$[esp+60]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize

; 1621 : 
; 1622 : 		for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  00054	8b 4c 24 14	 mov	 ecx, DWORD PTR _ea$[esp+64]
  00058	51		 push	 ecx
  00059	8d 9c 30 d4 14
	00 00		 lea	 ebx, DWORD PTR [eax+esi+5332]
  00060	e8 00 00 00 00	 call	 _EAGetLastCipher
  00065	8b f0		 mov	 esi, eax
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	85 f6		 test	 esi, esi
  0006c	0f 84 f8 02 00
	00		 je	 $LN21@DecryptDat
  00072	8b 55 14	 mov	 edx, DWORD PTR _nbrUnits$[ebp+4]
  00075	8b 45 10	 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  00078	6a 00		 push	 0
  0007a	68 00 02 00 00	 push	 512			; 00000200H
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 __allmul
  00086	89 44 24 18	 mov	 DWORD PTR tv306[esp+56], eax
  0008a	89 54 24 1c	 mov	 DWORD PTR tv306[esp+60], edx
  0008e	8b ff		 npad	 2
$LL19@DecryptDat:

; 1623 : 		{
; 1624 : 			ks -= CipherGetKeyScheduleSize (cipher);

  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1625 : 			ks2 -= CipherGetKeyScheduleSize (cipher);

  00096	56		 push	 esi
  00097	2b f8		 sub	 edi, eax
  00099	e8 00 00 00 00	 call	 _CipherGetKeyScheduleSize

; 1626 : 
; 1627 : 			DecryptBufferXTS (buf,
; 1628 : 				nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1629 : 				structUnitNo,
; 1630 : 				0,
; 1631 : 				ks,
; 1632 : 				ks2,
; 1633 : 				cipher);

  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _structUnitNo$[ebp]
  000a1	8b 54 24 24	 mov	 edx, DWORD PTR tv306[esp+68]
  000a5	56		 push	 esi
  000a6	2b d8		 sub	 ebx, eax
  000a8	8b 44 24 24	 mov	 eax, DWORD PTR tv306[esp+68]
  000ac	53		 push	 ebx
  000ad	57		 push	 edi
  000ae	6a 00		 push	 0
  000b0	51		 push	 ecx
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000b4	52		 push	 edx
  000b5	50		 push	 eax
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _DecryptBufferXTS
  000bc	8b 54 24 34	 mov	 edx, DWORD PTR _ea$[esp+96]
  000c0	56		 push	 esi
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  000c7	8b f0		 mov	 esi, eax
  000c9	83 c4 30	 add	 esp, 48			; 00000030H
  000cc	85 f6		 test	 esi, esi
  000ce	75 c0		 jne	 SHORT $LL19@DecryptDat

; 1715 : 	}
; 1716 : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN16@DecryptDat:

; 1634 : 		}
; 1635 : 		break;
; 1636 : 
; 1637 : #ifndef TC_NO_COMPILER_INT64
; 1638 : 	case LRW:
; 1639 : 
; 1640 : 		/* Deprecated/legacy */
; 1641 : 
; 1642 : 		switch (CipherGetBlockSize (EAGetFirstCipher (ea)))

  000d7	6b c0 2c	 imul	 eax, 44			; 0000002cH
  000da	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR _EncryptionAlgorithms[eax]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _CipherGetBlockSize
  000e6	83 c4 04	 add	 esp, 4
  000e9	83 f8 08	 cmp	 eax, 8
  000ec	74 6b		 je	 SHORT $LN13@DecryptDat
  000ee	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1656 : 			break;
; 1657 : 
; 1658 : 		default:
; 1659 : 			TC_THROW_FATAL_EXCEPTION;

  000f1	0f 85 6c 02 00
	00		 jne	 $LN1@DecryptDat
  000f7	83 be a0 29 00
	00 00		 cmp	 DWORD PTR [esi+10656], 0
  000fe	8b 44 24 1c	 mov	 eax, DWORD PTR _unitNo$[esp+60]
  00102	74 19		 je	 SHORT $LN42@DecryptDat
  00104	8b 8e 18 44 00
	00		 mov	 ecx, DWORD PTR [esi+17432]
  0010a	8b 96 1c 44 00
	00		 mov	 edx, DWORD PTR [esi+17436]
  00110	0f ac d1 09	 shrd	 ecx, edx, 9
  00114	c1 ea 09	 shr	 edx, 9
  00117	2b d9		 sub	 ebx, ecx
  00119	1b c2		 sbb	 eax, edx
  0011b	eb 06		 jmp	 SHORT $LN41@DecryptDat

; 1649 : 			break;
; 1650 : 
; 1651 : 		case 16:
; 1652 : 			DecryptBufferLRW128 (buf,
; 1653 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1654 : 				DataUnit2LRWIndex (unitNo, 16, ci),
; 1655 : 				ci);

$LN42@DecryptDat:
  0011d	83 c3 ff	 add	 ebx, -1
  00120	83 d0 ff	 adc	 eax, -1
$LN41@DecryptDat:
  00123	8b 4d 10	 mov	 ecx, DWORD PTR _nbrUnits$[ebp]
  00126	0f a4 d8 05	 shld	 eax, ebx, 5
  0012a	56		 push	 esi
  0012b	50		 push	 eax
  0012c	8b 45 14	 mov	 eax, DWORD PTR _nbrUnits$[ebp+4]
  0012f	c1 e3 05	 shl	 ebx, 5
  00132	83 cb 01	 or	 ebx, 1
  00135	53		 push	 ebx
  00136	6a 00		 push	 0
  00138	68 00 02 00 00	 push	 512			; 00000200H
  0013d	50		 push	 eax
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 __allmul
  00144	52		 push	 edx
  00145	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00148	50		 push	 eax
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 _DecryptBufferLRW128
  0014f	83 c4 18	 add	 esp, 24			; 00000018H

; 1715 : 	}
; 1716 : }

  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
$LN13@DecryptDat:

; 1643 : 		{
; 1644 : 		case 8:
; 1645 : 			DecryptBufferLRW64 (buf,
; 1646 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1647 : 				DataUnit2LRWIndex (unitNo, 8, ci),
; 1648 : 				ci);

  00159	83 be a0 29 00
	00 00		 cmp	 DWORD PTR [esi+10656], 0
  00160	74 1d		 je	 SHORT $LN33@DecryptDat
  00162	8b 86 18 44 00
	00		 mov	 eax, DWORD PTR [esi+17432]
  00168	8b 8e 1c 44 00
	00		 mov	 ecx, DWORD PTR [esi+17436]
  0016e	0f ac c8 09	 shrd	 eax, ecx, 9
  00172	c1 e9 09	 shr	 ecx, 9
  00175	2b d8		 sub	 ebx, eax
  00177	8b 44 24 1c	 mov	 eax, DWORD PTR _unitNo$[esp+60]
  0017b	1b c1		 sbb	 eax, ecx
  0017d	eb 0a		 jmp	 SHORT $LN32@DecryptDat
$LN33@DecryptDat:
  0017f	8b 44 24 1c	 mov	 eax, DWORD PTR _unitNo$[esp+60]
  00183	83 c3 ff	 add	 ebx, -1
  00186	83 d0 ff	 adc	 eax, -1
$LN32@DecryptDat:
  00189	8b 55 14	 mov	 edx, DWORD PTR _nbrUnits$[ebp+4]
  0018c	0f a4 d8 06	 shld	 eax, ebx, 6
  00190	56		 push	 esi
  00191	50		 push	 eax
  00192	8b 45 10	 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  00195	c1 e3 06	 shl	 ebx, 6
  00198	83 cb 01	 or	 ebx, 1
  0019b	53		 push	 ebx
  0019c	6a 00		 push	 0
  0019e	68 00 02 00 00	 push	 512			; 00000200H
  001a3	52		 push	 edx
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 __allmul
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001ad	52		 push	 edx
  001ae	50		 push	 eax
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 _DecryptBufferLRW64
  001b5	83 c4 18	 add	 esp, 24			; 00000018H

; 1715 : 	}
; 1716 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
$LN64@DecryptDat:

; 1660 : 		}
; 1661 : 		break;
; 1662 : 
; 1663 : 	case CBC:
; 1664 : 	case INNER_CBC:
; 1665 : 
; 1666 : 		/* Deprecated/legacy */
; 1667 : 
; 1668 : 		while (nbrUnits--)

  001bf	8b 55 10	 mov	 edx, DWORD PTR _nbrUnits$[ebp]
  001c2	0b 55 14	 or	 edx, DWORD PTR _nbrUnits$[ebp+4]
  001c5	0f 84 9f 01 00
	00		 je	 $LN21@DecryptDat
  001cb	eb 07		 jmp	 SHORT $LN9@DecryptDat
  001cd	8d 49 00	 npad	 3
$LL79@DecryptDat:
  001d0	8b 44 24 0c	 mov	 eax, DWORD PTR _ea$[esp+56]
$LN9@DecryptDat:
  001d4	83 c9 ff	 or	 ecx, -1
  001d7	01 4d 10	 add	 DWORD PTR _nbrUnits$[ebp], ecx

; 1669 : 		{
; 1670 : 			ks += EAGetKeyScheduleSize (ea);

  001da	50		 push	 eax
  001db	11 4d 14	 adc	 DWORD PTR _nbrUnits$[ebp+4], ecx
  001de	e8 00 00 00 00	 call	 _EAGetKeyScheduleSize
  001e3	03 f8		 add	 edi, eax

; 1671 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  001e5	8b 44 24 10	 mov	 eax, DWORD PTR _ea$[esp+60]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _EAGetLastCipher
  001ef	8b f0		 mov	 esi, eax
  001f1	83 c4 08	 add	 esp, 8
  001f4	85 f6		 test	 esi, esi
  001f6	0f 84 9f 00 00
	00		 je	 $LN5@DecryptDat
$LN7@DecryptDat:

; 1672 : 			{
; 1673 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  001fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00202	33 c0		 xor	 eax, eax
  00204	85 c9		 test	 ecx, ecx
  00206	74 17		 je	 SHORT $LN48@DecryptDat
$LL50@DecryptDat:
  00208	3b ce		 cmp	 ecx, esi
  0020a	0f 84 ad 00 00
	00		 je	 $LN69@DecryptDat
  00210	40		 inc	 eax
  00211	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00214	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0021b	85 c9		 test	 ecx, ecx
  0021d	75 e9		 jne	 SHORT $LL50@DecryptDat
$LN48@DecryptDat:
  0021f	33 c0		 xor	 eax, eax
$LN51@DecryptDat:
  00221	8d 54 24 20	 lea	 edx, DWORD PTR _secWhitening$[esp+56]
  00225	52		 push	 edx
  00226	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00229	8b 44 24 20	 mov	 eax, DWORD PTR _unitNo$[esp+64]
  0022d	8d 4c 24 2c	 lea	 ecx, DWORD PTR _sectorIV$[esp+60]
  00231	51		 push	 ecx
  00232	52		 push	 edx
  00233	50		 push	 eax
  00234	8b 44 24 20	 mov	 eax, DWORD PTR _iv64$[esp+72]
  00238	53		 push	 ebx
  00239	e8 00 00 00 00	 call	 _InitSectorIVAndWhitening

; 1674 : 
; 1675 : 				ks -= CipherGetKeyScheduleSize (cipher);

  0023e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Ciphers
  00244	83 c4 14	 add	 esp, 20			; 00000014H
  00247	33 c0		 xor	 eax, eax
  00249	85 c9		 test	 ecx, ecx
  0024b	74 16		 je	 SHORT $LN56@DecryptDat
  0024d	8d 49 00	 npad	 3
$LL58@DecryptDat:
  00250	3b ce		 cmp	 ecx, esi
  00252	74 78		 je	 SHORT $LN70@DecryptDat
  00254	40		 inc	 eax
  00255	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00258	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _Ciphers[ecx*4]
  0025f	85 c9		 test	 ecx, ecx
  00261	75 ed		 jne	 SHORT $LL58@DecryptDat
$LN56@DecryptDat:
  00263	33 c0		 xor	 eax, eax
$LN59@DecryptDat:
  00265	2b 78 10	 sub	 edi, DWORD PTR [eax+16]

; 1676 : 
; 1677 : 				DecryptBufferCBC ((unsigned __int32 *) buf,
; 1678 : 					ENCRYPTION_DATA_UNIT_SIZE,
; 1679 : 					ks,
; 1680 : 					sectorIV,
; 1681 : 					secWhitening,
; 1682 : 					0,
; 1683 : 					cipher);

  00268	6a 00		 push	 0
  0026a	8d 54 24 24	 lea	 edx, DWORD PTR _secWhitening$[esp+60]
  0026e	52		 push	 edx
  0026f	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00272	57		 push	 edi
  00273	68 00 02 00 00	 push	 512			; 00000200H
  00278	8b c6		 mov	 eax, esi
  0027a	8d 4c 24 38	 lea	 ecx, DWORD PTR _sectorIV$[esp+72]
  0027e	e8 00 00 00 00	 call	 _DecryptBufferCBC
  00283	8b 44 24 1c	 mov	 eax, DWORD PTR _ea$[esp+72]
  00287	56		 push	 esi
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0028e	8b f0		 mov	 esi, eax
  00290	83 c4 18	 add	 esp, 24			; 00000018H
  00293	85 f6		 test	 esi, esi
  00295	0f 85 61 ff ff
	ff		 jne	 $LN7@DecryptDat
$LN5@DecryptDat:

; 1684 : 			}
; 1685 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  0029b	81 45 08 00 02
	00 00		 add	 DWORD PTR _buf$[ebp], 512 ; 00000200H
  002a2	8b 4d 10	 mov	 ecx, DWORD PTR _nbrUnits$[ebp]

; 1686 : 			unitNo++;

  002a5	83 c3 01	 add	 ebx, 1
  002a8	83 54 24 1c 00	 adc	 DWORD PTR _unitNo$[esp+60], 0
  002ad	0b 4d 14	 or	 ecx, DWORD PTR _nbrUnits$[ebp+4]
  002b0	0f 85 1a ff ff
	ff		 jne	 $LL79@DecryptDat

; 1715 : 	}
; 1716 : }

  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	5b		 pop	 ebx
  002b9	8b e5		 mov	 esp, ebp
  002bb	5d		 pop	 ebp
  002bc	c3		 ret	 0
$LN69@DecryptDat:

; 1672 : 			{
; 1673 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  002bd	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002c0	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  002c7	e9 55 ff ff ff	 jmp	 $LN51@DecryptDat
$LN70@DecryptDat:

; 1674 : 
; 1675 : 				ks -= CipherGetKeyScheduleSize (cipher);

  002cc	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002cf	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _Ciphers[eax*4]
  002d6	eb 8d		 jmp	 SHORT $LN59@DecryptDat
$LN68@DecryptDat:

; 1687 : 		}
; 1688 : 		break;
; 1689 : 
; 1690 : 	case OUTER_CBC:
; 1691 : 
; 1692 : 		/* Deprecated/legacy */
; 1693 : 
; 1694 : 		while (nbrUnits--)

  002d8	8b 55 10	 mov	 edx, DWORD PTR _nbrUnits$[ebp]
  002db	0b 55 14	 or	 edx, DWORD PTR _nbrUnits$[ebp+4]
  002de	0f 84 86 00 00
	00		 je	 $LN21@DecryptDat
  002e4	8b 75 08	 mov	 esi, DWORD PTR _buf$[ebp]
  002e7	6b c0 2c	 imul	 eax, 44			; 0000002cH
  002ea	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR _EncryptionAlgorithms[eax]
  002f0	89 44 24 14	 mov	 DWORD PTR tv310[esp+56], eax
$LN3@DecryptDat:
  002f4	83 c8 ff	 or	 eax, -1
  002f7	01 45 10	 add	 DWORD PTR _nbrUnits$[ebp], eax

; 1695 : 		{
; 1696 : 			InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (EAGetFirstCipher (ea)), sectorIV, iv64, secWhitening);

  002fa	8d 4c 24 20	 lea	 ecx, DWORD PTR _secWhitening$[esp+56]
  002fe	51		 push	 ecx
  002ff	11 45 14	 adc	 DWORD PTR _nbrUnits$[ebp+4], eax
  00302	8b 44 24 18	 mov	 eax, DWORD PTR tv310[esp+60]
  00306	8b 08		 mov	 ecx, DWORD PTR [eax]
  00308	8d 54 24 2c	 lea	 edx, DWORD PTR _sectorIV$[esp+60]
  0030c	52		 push	 edx
  0030d	51		 push	 ecx
  0030e	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00313	8b 54 24 28	 mov	 edx, DWORD PTR _unitNo$[esp+72]
  00317	83 c4 04	 add	 esp, 4
  0031a	50		 push	 eax
  0031b	8b 44 24 1c	 mov	 eax, DWORD PTR _iv64$[esp+68]
  0031f	52		 push	 edx
  00320	53		 push	 ebx
  00321	e8 00 00 00 00	 call	 _InitSectorIVAndWhitening

; 1697 : 
; 1698 : 			DecryptBufferCBC ((unsigned __int32 *) buf,
; 1699 : 				ENCRYPTION_DATA_UNIT_SIZE,
; 1700 : 				ks,
; 1701 : 				sectorIV,
; 1702 : 				secWhitening,
; 1703 : 				ea,
; 1704 : 				0);

  00326	8b 44 24 20	 mov	 eax, DWORD PTR _ea$[esp+76]
  0032a	50		 push	 eax
  0032b	8d 4c 24 38	 lea	 ecx, DWORD PTR _secWhitening$[esp+80]
  0032f	51		 push	 ecx
  00330	57		 push	 edi
  00331	68 00 02 00 00	 push	 512			; 00000200H
  00336	33 c0		 xor	 eax, eax
  00338	8d 4c 24 4c	 lea	 ecx, DWORD PTR _sectorIV$[esp+92]
  0033c	8b d6		 mov	 edx, esi
  0033e	e8 00 00 00 00	 call	 _DecryptBufferCBC
  00343	8b 55 10	 mov	 edx, DWORD PTR _nbrUnits$[ebp]
  00346	83 c4 24	 add	 esp, 36			; 00000024H

; 1705 : 
; 1706 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  00349	81 c6 00 02 00
	00		 add	 esi, 512		; 00000200H

; 1707 : 			unitNo++;

  0034f	83 c3 01	 add	 ebx, 1
  00352	83 54 24 1c 00	 adc	 DWORD PTR _unitNo$[esp+60], 0
  00357	0b 55 14	 or	 edx, DWORD PTR _nbrUnits$[ebp+4]
  0035a	75 98		 jne	 SHORT $LN3@DecryptDat

; 1715 : 	}
; 1716 : }

  0035c	5f		 pop	 edi
  0035d	5e		 pop	 esi
  0035e	5b		 pop	 ebx
  0035f	8b e5		 mov	 esp, ebp
  00361	5d		 pop	 ebp
  00362	c3		 ret	 0
$LN1@DecryptDat:

; 1708 : 		}
; 1709 : 		break;
; 1710 : #endif // #ifndef TC_NO_COMPILER_INT64
; 1711 : 
; 1712 : 	default:		
; 1713 : 		// Unknown/wrong ID
; 1714 : 		TC_THROW_FATAL_EXCEPTION;

  00363	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN21@DecryptDat:

; 1715 : 	}
; 1716 : }

  0036a	5f		 pop	 edi
  0036b	5e		 pop	 esi
  0036c	5b		 pop	 ebx
  0036d	8b e5		 mov	 esp, ebp
  0036f	5d		 pop	 ebp
  00370	c3		 ret	 0
  00371	8d 49 00	 npad	 3
$LN82@DecryptDat:
  00374	00 00 00 00	 DD	 $LN20@DecryptDat
  00378	00 00 00 00	 DD	 $LN16@DecryptDat
  0037c	00 00 00 00	 DD	 $LN64@DecryptDat
  00380	00 00 00 00	 DD	 $LN68@DecryptDat
  00384	00 00 00 00	 DD	 $LN64@DecryptDat
_DecryptDataUnitsCurrentThread ENDP
_TEXT	ENDS
PUBLIC	_GetMaxPkcs5OutSize
; Function compile flags: /Ogtpy
;	COMDAT _GetMaxPkcs5OutSize
_TEXT	SEGMENT
_GetMaxPkcs5OutSize PROC				; COMDAT

; 1721 : {

  00000	56		 push	 esi

; 1722 : 	int size = 32;
; 1723 : 
; 1724 : 	size = max (size, EAGetLargestKeyForMode (XTS) * 2);	// Sizes of primary + secondary keys

  00001	6a 01		 push	 1
  00003	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  00008	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0000d	03 c0		 add	 eax, eax
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c6		 cmp	 eax, esi
  00014	7c 0e		 jl	 SHORT $LN4@GetMaxPkcs
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0001d	8b f0		 mov	 esi, eax
  0001f	83 c4 04	 add	 esp, 4
  00022	03 f6		 add	 esi, esi
$LN4@GetMaxPkcs:

; 1725 : 
; 1726 : #ifndef TC_WINDOWS_BOOT
; 1727 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (LRW));		// Deprecated/legacy

  00024	6a 02		 push	 2
  00026	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0002b	83 c0 20	 add	 eax, 32			; 00000020H
  0002e	83 c4 04	 add	 esp, 4
  00031	3b f0		 cmp	 esi, eax
  00033	7f 0f		 jg	 SHORT $LN6@GetMaxPkcs
  00035	6a 02		 push	 2
  00037	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0003c	8b f0		 mov	 esi, eax
  0003e	83 c4 04	 add	 esp, 4
  00041	83 c6 20	 add	 esi, 32			; 00000020H
$LN6@GetMaxPkcs:

; 1728 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (CBC));		// Deprecated/legacy

  00044	6a 03		 push	 3
  00046	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0004b	83 c0 20	 add	 eax, 32			; 00000020H
  0004e	83 c4 04	 add	 esp, 4
  00051	3b f0		 cmp	 esi, eax
  00053	7f 0f		 jg	 SHORT $LN8@GetMaxPkcs
  00055	6a 03		 push	 3
  00057	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0005c	8b f0		 mov	 esi, eax
  0005e	83 c4 04	 add	 esp, 4
  00061	83 c6 20	 add	 esi, 32			; 00000020H
$LN8@GetMaxPkcs:

; 1729 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (OUTER_CBC));	// Deprecated/legacy

  00064	6a 04		 push	 4
  00066	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0006b	83 c0 20	 add	 eax, 32			; 00000020H
  0006e	83 c4 04	 add	 esp, 4
  00071	3b f0		 cmp	 esi, eax
  00073	7f 0f		 jg	 SHORT $LN10@GetMaxPkcs
  00075	6a 04		 push	 4
  00077	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0007c	8b f0		 mov	 esi, eax
  0007e	83 c4 04	 add	 esp, 4
  00081	83 c6 20	 add	 esi, 32			; 00000020H
$LN10@GetMaxPkcs:

; 1730 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (INNER_CBC));	// Deprecated/legacy

  00084	6a 05		 push	 5
  00086	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0008b	83 c0 20	 add	 eax, 32			; 00000020H
  0008e	83 c4 04	 add	 esp, 4
  00091	3b f0		 cmp	 esi, eax
  00093	7f 0f		 jg	 SHORT $LN13@GetMaxPkcs
  00095	6a 05		 push	 5
  00097	e8 00 00 00 00	 call	 _EAGetLargestKeyForMode
  0009c	83 c4 04	 add	 esp, 4
  0009f	83 c0 20	 add	 eax, 32			; 00000020H
  000a2	5e		 pop	 esi

; 1734 : }

  000a3	c3		 ret	 0
$LN13@GetMaxPkcs:

; 1731 : #endif
; 1732 : 
; 1733 : 	return size;

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi

; 1734 : }

  000a7	c3		 ret	 0
_GetMaxPkcs5OutSize ENDP
_TEXT	ENDS
END
