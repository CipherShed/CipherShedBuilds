; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\common\tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ ; `string'
PUBLIC	??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; `string'
PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
PUBLIC	??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ ; `string'
PUBLIC	??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ ; `string'
PUBLIC	??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ ; `string'
PUBLIC	??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@		; `string'
PUBLIC	??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ ; `string'
PUBLIC	??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ ; `string'
PUBLIC	??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ ; `string'
PUBLIC	??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ ; `string'
PUBLIC	??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ ; `string'
PUBLIC	??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ ; `string'
PUBLIC	??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ ; `string'
PUBLIC	??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ ; `string'
PUBLIC	??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ ; `string'
PUBLIC	??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ ; `string'
PUBLIC	??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ ; `string'
PUBLIC	??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ ; `string'
PUBLIC	??_C@_08BPPJKMC@Hi?5There?$AA@			; `string'
PUBLIC	??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ ; `string'
PUBLIC	??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ ; `string'
PUBLIC	??_C@_04HDLGGHEL@Jefe?$AA@			; `string'
PUBLIC	??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ ; `string'
PUBLIC	_XTS_vectors
PUBLIC	_bf_ecb_vectors
PUBLIC	_tripledes_vectors
PUBLIC	_cast_ecb_vectors
PUBLIC	_aes_ecb_vectors
PUBLIC	_serpent_vectors
PUBLIC	_twofish_vectors
PUBLIC	_hmac_sha512_test_keys
PUBLIC	_hmac_sha512_test_data
PUBLIC	_hmac_sha512_test_vectors
PUBLIC	_hmac_sha1_test_keys
PUBLIC	_hmac_sha1_test_data
PUBLIC	_hmac_sha1_test_vectors
PUBLIC	_hmac_ripemd160_test_keys
PUBLIC	_hmac_ripemd160_test_data
PUBLIC	_hmac_ripemd160_test_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	_lrw_vectors
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:014ccH
_DATA	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
CONST	SEGMENT
??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ DB 085H
	DB	0f1H, 'dp>a', 0a6H, '11', 0beH, '~E', 095H, 08eH, 07H, 094H, 012H
	DB	'9', 04H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
CONST	SEGMENT
??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ DB 0f8H
	DB	'6b', 0ccH, 08dH, '3', 09cH, '"~`', 0fH, 0cdH, 'clW', 0d2H, 'W'
	DB	01bH, 01cH, '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
CONST	SEGMENT
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ DB '1234567890123456'
	DB	'7890123456789012345678901234567890123456789012345678901234567'
	DB	'890', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
CONST	SEGMENT
??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ DB 01H
	DB	'#Eg', 089H, 0abH, 0cdH, 0efH, 0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	00H, 011H, '"3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
CONST	SEGMENT
??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
CONST	SEGMENT
??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ DB 012H
	DB	']sB', 0b9H, 0acH, 011H, 0cdH, 091H, 0a3H, 09aH, 0f4H, 08aH, 0a1H
	DB	'{Oc', 0f1H, 'u', 0d3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ DB 0efH
	DB	0fcH, 0dfH, 'j', 0e5H, 0ebH, '/', 0a2H, 0d2H, 't', 016H, 0d5H, 0f1H
	DB	084H, 0dfH, 09cH, '%', 09aH, '|y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ DB 0b6H
	DB	017H, '1', 086H, 'U', 05H, 'rd', 0e2H, 08bH, 0c0H, 0b6H, 0fbH, '7'
	DB	08cH, 08eH, 0f1H, 'F', 0beH, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ DB 0bcH
	DB	0f4H, 01eH, 0abH, 08bH, 0b2H, 0d8H, 02H, 0f3H, 0d0H, '\', 0afH
	DB	'|', 0b0H, 092H, 0ecH, 0f8H, 0d1H, 0a3H, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
CONST	SEGMENT
??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@ DB 'Sample #3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
CONST	SEGMENT
??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ DB 'PQR'
	DB	'STUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~', 07fH, 080H, 081H
	DB	082H, 083H, 084H, 085H, 086H, 087H, 088H, 089H, 08aH, 08bH, 08cH
	DB	08dH, 08eH, 08fH, 090H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0aaH, 0abH, 0acH, 0adH
	DB	0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
CONST	SEGMENT
??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ DB 0e3H
	DB	'{jw]', 0c8H, '}', 0baH, 0a4H, 0dfH, 0a9H, 0f9H, 'n^?', 0fdH, 0deH
	DB	0bdH, 'q', 0f8H, 086H, 'r', 089H, 086H, ']', 0f5H, 0a3H, '- ', 0cdH
	DB	0c9H, 'D', 0b6H, 02H, ',', 0acH, '<I', 082H, 0b1H, 0dH, '^', 0ebH
	DB	'U', 0c3H, 0e4H, 0deH, 015H, 013H, 'Fv', 0fbH, 'm', 0e0H, 'D`e'
	DB	0c9H, 't@', 0faH, 08cH, 'jX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
CONST	SEGMENT
??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ DB 080H
	DB	0b2H, 'Bc', 0c7H, 0c1H, 0a3H, 0ebH, 0b7H, 014H, 093H, 0c1H, 0ddH
	DB	'{', 0e8H, 0b4H, 09bH, 'F', 0d1H, 0f4H, 01bH, 'J', 0eeH, 0c1H, 012H
	DB	01bH, 01H, '7', 083H, 0f8H, 0f3H, 'RkV', 0d0H, '7', 0e0H, '_%', 098H
	DB	0bdH, 0fH, 0d2H, '!]j', 01eH, 'R', 095H, 0e6H, 'Os', 0f6H, '?', 0aH
	DB	0ecH, 08bH, 091H, 'Z', 098H, ']xe', 098H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
CONST	SEGMENT
??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ DB 0b0H
	DB	0baH, 'FV7E', 08cH, 'i', 090H, 0e5H, 0a8H, 0c5H, 0f6H, 01dH, 'J'
	DB	0f7H, 0e5H, 'v', 0d9H, 07fH, 0f9H, 'K', 087H, '-', 0e7H, 'o', 080H
	DB	'P6', 01eH, 0e3H, 0dbH, 0a9H, 01cH, 0a5H, 0c1H, 01aH, 0a2H, '^'
	DB	0b4H, 0d6H, 'y''\', 0c5H, 'x', 080H, 'c', 0a5H, 0f1H, 097H, 'A'
	DB	012H, 0cH, 'O-', 0e2H, 0adH, 0ebH, 0ebH, 010H, 0a2H, 098H, 0ddH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
CONST	SEGMENT
??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ DB 0faH
	DB	's', 0b0H, 08H, 09dH, 'V', 0a2H, 084H, 0efH, 0b0H, 0f0H, 'ul', 089H
	DB	0bH, 0e9H, 0b1H, 0b5H, 0dbH, 0ddH, 08eH, 0e8H, 01aH, '6U', 0f8H
	DB	'>3', 0b2H, '''', 09dH, '9', 0bfH, '>', 084H, 082H, 'y', 0a7H, '"'
	DB	0c8H, 06H, 0b4H, 085H, 0a4H, '~g', 0c8H, 07H, 0b9H, 'F', 0a3H, '7'
	DB	0beH, 0e8H, 094H, '&t''', 088H, 'Y', 0e1H, '2', 092H, 0fbH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
CONST	SEGMENT
??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ DB 016H
	DB	'Kz{', 0fcH, 0f8H, 019H, 0e2H, 0e3H, 095H, 0fbH, 0e7H, ';V', 0e0H
	DB	0a3H, 087H, 0bdH, 'd".', 083H, 01fH, 0d6H, 010H, '''', 0cH, 0d7H
	DB	0eaH, '%', 05H, 'T', 097H, 'X', 0bfH, 'u', 0c0H, 'Z', 099H, 'J'
	DB	'm', 03H, 'Oe', 0f8H, 0f0H, 0e6H, 0fdH, 0caH, 0eaH, 0b1H, 0a3H
	DB	'MJkKcn', 07H, 0aH, '8', 0bcH, 0e7H, '7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
CONST	SEGMENT
??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ DB 087H
	DB	0aaH, '|', 0deH, 0a5H, 0efH, 'a', 09dH, 'O', 0f0H, 0b4H, '$', 01aH
	DB	01dH, 'l', 0b0H, '#y', 0f4H, 0e2H, 0ceH, 'N', 0c2H, 'xz', 0d0H
	DB	0b3H, 05H, 'E', 0e1H, '|', 0deH, 0daH, 0a8H, '3', 0b7H, 0d6H, 0b8H
	DB	0a7H, 02H, 03H, 08bH, '''N', 0aeH, 0a3H, 0f4H, 0e4H, 0beH, 09dH
	DB	091H, 'N', 0ebH, 'a', 0f1H, 'p.il :', 012H, 'hT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
CONST	SEGMENT
??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ DB 'This is a '
	DB	'test using a larger than block-size key and a larger than blo'
	DB	'ck-size data. The key needs to be hashed before being used by'
	DB	' the HMAC algorithm.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
CONST	SEGMENT
??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ DB 'Test Using '
	DB	'Larger Than Block-Size Key - Hash Key First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
CONST	SEGMENT
??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ DB 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
CONST	SEGMENT
??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ DB 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
CONST	SEGMENT
??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ DB 'what do '
	DB	'ya want for nothing?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPPJKMC@Hi?5There?$AA@
CONST	SEGMENT
??_C@_08BPPJKMC@Hi?5There?$AA@ DB 'Hi There', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
CONST	SEGMENT
??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
CONST	SEGMENT
??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H, 019H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLGGHEL@Jefe?$AA@
CONST	SEGMENT
??_C@_04HDLGGHEL@Jefe?$AA@ DB 'Jefe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
CONST	SEGMENT
??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ DB 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_bf_ecb_vectors DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'Q', 086H, 'o', 0d5H, 0b8H, '^', 0cbH, 08aH
	DB	'0', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	010H, 00H, 00H, 00H, 00H, 00H, 00H, 01H
	DB	'}', 085H, 'o', 09aH, 'a0c', 0f2H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'$f', 0ddH, 087H, 08bH, 096H, '<', 09dH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'a', 0f9H, 0c3H, 080H, '"', 081H, 0b0H, 096H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'}', 0cH, 0c6H, '0', 0afH, 0daH, 01eH, 0c7H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0aH, 0ceH, 0abH, 0fH, 0c6H, 0a0H, 0a2H, 08dH
	DB	'|', 0a1H, 010H, 'EJ', 01aH, 'nW'
	DB	01H, 0a1H, 0d6H, 0d0H, '9wgB'
	DB	'Y', 0c6H, 082H, 'E', 0ebH, 05H, '(+'
	DB	01H, '1', 0d9H, 'a', 09dH, 0c1H, '7n'
	DB	'\', 0d5H, 'L', 0a8H, '=', 0efH, 'W', 0daH
	DB	0b1H, 0b8H, 0ccH, 0bH, '%', 0fH, 09H, 0a0H
	DB	07H, 0a1H, 013H, '>J', 0bH, '&', 086H
	DB	02H, 'H', 0d4H, '8', 06H, 0f6H, 'qr'
	DB	017H, '0', 0e5H, 'w', 08bH, 0eaH, 01dH, 0a4H
	DB	'8IgL&', 02H, '1', 09eH
	DB	'QEKX-', 0dfH, 'D', 0aH
	DB	0a2H, '^xV', 0cfH, '&Q', 0ebH
	DB	04H, 0b9H, 015H, 0baH, 'C', 0feH, 0b5H, 0b6H
	DB	'B', 0fdH, 'D0YW', 07fH, 0a2H
	DB	'58', 082H, 0b1H, 09H, 0ceH, 08fH, 01aH
	DB	01H, 013H, 0b9H, 'p', 0fdH, '4', 0f2H, 0ceH
	DB	05H, 09bH, '^', 08H, 'Q', 0cfH, 014H, ':'
	DB	'H', 0f4H, 0d0H, 088H, 'L7', 099H, 018H
	DB	01H, 'p', 0f1H, 'uF', 08fH, 0b5H, 0e6H
	DB	07H, 'V', 0d8H, 0e0H, 'wGa', 0d2H
	DB	'C!', 093H, 0b7H, 089H, 'Q', 0fcH, 098H
	DB	'C)', 07fH, 0adH, '8', 0e3H, 's', 0feH
	DB	'v%', 014H, 0b8H, ')', 0bfH, 'Hj'
	DB	013H, 0f0H, 'AT', 0d6H, 09dH, 01aH, 0e5H
	DB	07H, 0a7H, 013H, 'pE', 0daH, '*', 016H
	DB	';', 0ddH, 011H, 090H, 'I7(', 02H
	DB	'.', 0edH, 0daH, 093H, 0ffH, 0d3H, 09cH, 'y'
	DB	04H, 'h', 091H, 04H, 0c2H, 0fdH, ';/'
	DB	'&', 095H, '_h5', 0afH, '`', 09aH
	DB	0d8H, 087H, 0e0H, '9<-', 0a6H, 0e3H
	DB	'7', 0d0H, 'k', 0b5H, 016H, 0cbH, 'uF'
	DB	016H, 'M^@O''R2'
	DB	'_', 099H, 0d0H, 'O[', 016H, '9i'
	DB	01fH, 08H, '&', 0dH, 01aH, 0c2H, 'F^'
	DB	'k', 05H, 'n', 018H, 'u', 09fH, '\', 0caH
	DB	'J', 05H, 'z;$', 0d3H, 097H, '{'
	DB	'X@#d', 01aH, 0baH, 'av'
	DB	00H, 'K', 0d6H, 0efH, 09H, 017H, '`b'
	DB	'E 1', 0c1H, 0e4H, 0faH, 0daH, 08eH
	DB	02H, 'X', 016H, 016H, 'F)', 0b0H, 07H
	DB	'H', 0dH, '9', 00H, 'n', 0e7H, 'b', 0f2H
	DB	'uU', 0aeH, '9', 0f5H, 09bH, 087H, 0bdH
	DB	'Iy>', 0bcH, 'y', 0b3H, '%', 08fH
	DB	'Cu@', 0c8H, 'i', 08fH, '<', 0faH
	DB	'S', 0c5H, '_', 09cH, 0b4H, 09fH, 0c0H, 019H
	DB	'O', 0b0H, '^', 015H, 015H, 0abH, 's', 0a7H
	DB	07H, '-C', 0a0H, 'w', 07H, 'R', 092H
	DB	'z', 08eH, '{', 0faH, 093H, '~', 089H, 0a3H
	DB	'I', 0e9H, ']mL', 0a2H, ')', 0bfH
	DB	02H, 0feH, 'Uw', 081H, 017H, 0f1H, '*'
	DB	0cfH, 09cH, ']zI', 086H, 0adH, 0b5H
	DB	01H, 083H, 010H, 0dcH, '@', 09bH, '&', 0d6H
	DB	01dH, 09dH, '\P', 018H, 0f7H, '(', 0c2H
	DB	0d1H, 0abH, 0b2H, 090H, 'e', 08bH, 0c7H, 'x'
	DB	01cH, 'X', 07fH, 01cH, 013H, 092H, 'O', 0efH
	DB	'0U2(mo)Z'
	DB	'U', 0cbH, '7t', 0d1H, '>', 0f2H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0faH, '4', 0ecH, 'HG', 0b2H, 'h', 0b2H
	DB	01fH, 01fH, 01fH, 01fH, 0eH, 0eH, 0eH, 0eH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0a7H, 090H, 'yQ', 08H, 0eaH, '<', 0aeH
	DB	0e0H, 0feH, 0e0H, 0feH, 0f1H, 0feH, 0f1H, 0feH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0c3H, 09eH, 07H, '-', 09fH, 0acH, 'c', 01dH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 'I3', 0e0H, 0cdH, 0afH, 0f6H, 0e4H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0f2H, 01eH, 09aH, 'w', 0b7H, 01cH, 'I', 0bcH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'$YF', 088H, 'WT6', 09aH
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'k\Z', 09cH, ']', 09eH, 0aH, 'Z'
_tripledes_vectors DB 01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0e7H
	DB	0deH
	DB	0bH
	DB	07cH
	DB	06H
	DB	0aeH
	DB	05eH
	DB	0eH
	DB	0d5H
_cast_ecb_vectors DB 01H, '#Eg', 012H, '4Vx#Eg', 089H, '4Vx', 09aH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'#', 08bH, 'O', 0e5H, 084H, '~D', 0b2H
_aes_ecb_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	DB	099H
	DB	0aaH
	DB	0bbH
	DB	0ccH
	DB	0ddH
	DB	0eeH
	DB	0ffH
	DB	08eH
	DB	0a2H
	DB	0b7H
	DB	0caH
	DB	051H
	DB	067H
	DB	045H
	DB	0bfH
	DB	0eaH
	DB	0fcH
	DB	049H
	DB	090H
	DB	04bH
	DB	049H
	DB	060H
	DB	089H
_serpent_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	0deH
	DB	026H
	DB	09fH
	DB	0f8H
	DB	033H
	DB	0e4H
	DB	032H
	DB	0b8H
	DB	05bH
	DB	02eH
	DB	088H
	DB	0d2H
	DB	070H
	DB	01cH
	DB	0e7H
	DB	05cH
_twofish_vectors DB 0d4H
	DB	03bH
	DB	0b7H
	DB	055H
	DB	06eH
	DB	0a3H
	DB	02eH
	DB	046H
	DB	0f2H
	DB	0a2H
	DB	082H
	DB	0b7H
	DB	0d4H
	DB	05bH
	DB	04eH
	DB	0dH
	DB	057H
	DB	0ffH
	DB	073H
	DB	09dH
	DB	04dH
	DB	0c9H
	DB	02cH
	DB	01bH
	DB	0d7H
	DB	0fcH
	DB	01H
	DB	070H
	DB	0cH
	DB	0c8H
	DB	021H
	DB	06fH
	DB	090H
	DB	0afH
	DB	0e9H
	DB	01bH
	DB	0b2H
	DB	088H
	DB	054H
	DB	04fH
	DB	02cH
	DB	032H
	DB	0dcH
	DB	023H
	DB	09bH
	DB	026H
	DB	035H
	DB	0e6H
	DB	06cH
	DB	0b4H
	DB	056H
	DB	01cH
	DB	040H
	DB	0bfH
	DB	0aH
	DB	097H
	DB	05H
	DB	093H
	DB	01cH
	DB	0b6H
	DB	0d4H
	DB	08H
	DB	0e7H
	DB	0faH
_hmac_sha512_test_keys DD FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
	DD	FLAT:??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
_hmac_sha512_test_data DD FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
	DD	FLAT:??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
	DD	FLAT:??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
	DD	FLAT:??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
_hmac_sha512_test_vectors DD FLAT:??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
	DD	FLAT:??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
	DD	FLAT:??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
	DD	FLAT:??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
	DD	FLAT:??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
	DD	FLAT:??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
_hmac_sha1_test_keys DD FLAT:??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
	DD	FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
_hmac_sha1_test_data DD FLAT:??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
	DD	FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
_hmac_sha1_test_vectors DD FLAT:??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
	DD	FLAT:??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
	DD	FLAT:??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
	DD	FLAT:??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
_hmac_ripemd160_test_keys DD FLAT:??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
	DD	FLAT:??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
_hmac_ripemd160_test_data DD FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DD	FLAT:??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
_hmac_ripemd160_test_vectors DD FLAT:??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
	DD	FLAT:??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_lrw_vectors DB	0f8H
	DB	0d4H
	DB	076H
	DB	0ffH
	DB	0d6H
	DB	046H
	DB	0eeH
	DB	06cH
	DB	023H
	DB	084H
	DB	0cbH
	DB	01cH
	DB	077H
	DB	0d6H
	DB	019H
	DB	05dH
	DB	0feH
	DB	0f1H
	DB	0a9H
	DB	0f3H
	DB	07bH
	DB	0bcH
	DB	08dH
	DB	021H
	DB	0a7H
	DB	09cH
	DB	021H
	DB	0f8H
	DB	0cbH
	DB	090H
	DB	02H
	DB	089H
	DB	0a8H
	DB	045H
	DB	034H
	DB	08eH
	DB	0c8H
	DB	0c5H
	DB	0b5H
	DB	0f1H
	DB	026H
	DB	0f5H
	DB	0eH
	DB	076H
	DB	0feH
	DB	0fdH
	DB	01bH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	0bdH
	DB	06H
	DB	0b8H
	DB	0e1H
	DB	0dbH
	DB	098H
	DB	089H
	DB	09eH
	DB	0c4H
	DB	098H
	DB	0e4H
	DB	091H
	DB	0cfH
	DB	01cH
	DB	070H
	DB	02bH
	DB	0fbH
	DB	076H
	DB	015H
	DB	0b2H
	DB	03dH
	DB	080H
	DB	089H
	DB	01dH
	DB	0d4H
	DB	070H
	DB	098H
	DB	0bH
	DB	0c7H
	DB	095H
	DB	084H
	DB	0c8H
	DB	0b2H
	DB	0fbH
	DB	064H
	DB	0ceH
	DB	060H
	DB	097H
	DB	087H
	DB	08dH
	DB	017H
	DB	0fcH
	DB	0e4H
	DB	05aH
	DB	049H
	DB	0e8H
	DB	030H
	DB	0b7H
	DB	06eH
	DB	078H
	DB	017H
	DB	0e7H
	DB	02dH
	DB	05eH
	DB	012H
	DB	0d4H
	DB	060H
	DB	064H
	DB	04H
	DB	07aH
	DB	0f1H
	DB	02fH
	DB	09eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	05bH
	DB	090H
	DB	08eH
	DB	0c1H
	DB	0abH
	DB	0ddH
	DB	067H
	DB	05fH
	DB	03dH
	DB	069H
	DB	08aH
	DB	095H
	DB	053H
	DB	0c8H
	DB	09cH
	DB	0e5H
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	_ci$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_XTSAesTest@4
EXTRN	_EncryptBufferXTS@32:PROC
EXTRN	_MirrorBytes64@8:PROC
EXTRN	_EAInitMode@4:PROC
EXTRN	_EAInit@12:PROC
EXTRN	_EAGetByName@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\tests.c
text$s	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@ DB 'AES', 00H	;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _XTSAesTest@4
_TEXT	SEGMENT
_dataUnitNo$ = -528					; size = 8
_ci$GSCopy$ = -520					; size = 4
_p$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_XTSAesTest@4 PROC					; COMDAT

; 259  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _ci$[ebp]
  0001a	57		 push	 edi

; 260  : 	unsigned __int8 p[ENCRYPTION_DATA_UNIT_SIZE];
; 261  : 	UINT64_STRUCT dataUnitNo;
; 262  : 	int i;
; 263  : 
; 264  : 	for (i = 0; i < XTS_TEST_COUNT; i++)

  0001b	89 b5 f8 fd ff
	ff		 mov	 DWORD PTR _ci$GSCopy$[ebp], esi
  00021	bb 20 00 00 00	 mov	 ebx, OFFSET _XTS_vectors+32
  00026	eb 06		 jmp	 SHORT $LN7@XTSAesTest
$LL17@XTSAesTest:
  00028	8b b5 f8 fd ff
	ff		 mov	 esi, DWORD PTR _ci$GSCopy$[ebp]
$LN7@XTSAesTest:

; 265  : 	{
; 266  : 		ci->ea = EAGetByName ("AES");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00033	e8 00 00 00 00	 call	 _EAGetByName@4
  00038	89 06		 mov	 DWORD PTR [esi], eax

; 267  : 		if (ci->ea == 0)

  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 cf 00 00
	00		 je	 $LN11@XTSAesTest

; 269  : 
; 270  : 		ci->mode = XTS;
; 271  : 
; 272  : 		if (EAInit (ci->ea, XTS_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  00042	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00045	51		 push	 ecx
  00046	8d 4b e0	 lea	 ecx, DWORD PTR [ebx-32]
  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  00052	e8 00 00 00 00	 call	 _EAInit@12
  00057	85 c0		 test	 eax, eax
  00059	0f 85 b2 00 00
	00		 jne	 $LN11@XTSAesTest

; 273  : 			return FALSE;
; 274  : 
; 275  : 		memcpy (&ci->k2, XTS_vectors[i].key2, sizeof (XTS_vectors[i].key2));

  0005f	6a 08		 push	 8
  00061	59		 pop	 ecx

; 276  : 
; 277  : 		if (!EAInitMode (ci))

  00062	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _ci$GSCopy$[ebp]
  00068	8d be a8 42 00
	00		 lea	 edi, DWORD PTR [esi+17064]
  0006e	8b f3		 mov	 esi, ebx
  00070	f3 a5		 rep movsd
  00072	e8 00 00 00 00	 call	 _EAInitMode@4
  00077	85 c0		 test	 eax, eax
  00079	0f 84 92 00 00
	00		 je	 $LN11@XTSAesTest

; 278  : 			return FALSE;
; 279  : 
; 280  : 		memcpy (p, XTS_vectors[i].plaintext, sizeof (p));
; 281  : 
; 282  : 		dataUnitNo.Value = BE64 (*((unsigned __int64 *) XTS_vectors[i].dataUnitNo));

  0007f	ff 73 24	 push	 DWORD PTR [ebx+36]
  00082	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00085	ff 73 20	 push	 DWORD PTR [ebx+32]
  00088	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0008d	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR _p$[ebp]
  00093	f3 a5		 rep movsd
  00095	e8 00 00 00 00	 call	 _MirrorBytes64@8
  0009a	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _dataUnitNo$[ebp], eax

; 283  : 
; 284  : 		EncryptBufferXTS (p, sizeof (p), &dataUnitNo, XTS_vectors[i].blockNo, (unsigned char *) (ci->ks), (unsigned char *) ci->ks2, AES);

  000a0	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _ci$GSCopy$[ebp]
  000a6	6a 01		 push	 1
  000a8	8d 88 d4 14 00
	00		 lea	 ecx, DWORD PTR [eax+5332]
  000ae	51		 push	 ecx
  000af	83 c0 08	 add	 eax, 8
  000b2	50		 push	 eax
  000b3	ff 73 28	 push	 DWORD PTR [ebx+40]
  000b6	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dataUnitNo$[ebp]
  000bc	50		 push	 eax
  000bd	6a 00		 push	 0
  000bf	68 00 02 00 00	 push	 512			; 00000200H
  000c4	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _p$[ebp]
  000ca	50		 push	 eax
  000cb	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _dataUnitNo$[ebp+4], edx
  000d1	e8 00 00 00 00	 call	 _EncryptBufferXTS@32

; 285  : 
; 286  : 		if (memcmp (XTS_vectors[i].ciphertext, p, sizeof (p)) != 0)

  000d6	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000db	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR _p$[ebp]
  000e1	8d b3 2c 02 00
	00		 lea	 esi, DWORD PTR [ebx+556]
  000e7	33 c0		 xor	 eax, eax
  000e9	f3 a7		 repe cmpsd
  000eb	75 24		 jne	 SHORT $LN11@XTSAesTest
  000ed	81 c3 4c 04 00
	00		 add	 ebx, 1100		; 0000044cH
  000f3	81 fb 9c 15 00
	00		 cmp	 ebx, OFFSET _XTS_vectors+5532
  000f9	0f 8c 29 ff ff
	ff		 jl	 $LL17@XTSAesTest

; 287  : 			return FALSE;
; 288  : 	}
; 289  : 
; 290  : 	return TRUE;

  000ff	40		 inc	 eax
$LN8@XTSAesTest:

; 291  : }

  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	33 cd		 xor	 ecx, ebp
  00107	5b		 pop	 ebx
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	c9		 leave
  0010e	c2 04 00	 ret	 4
$LN11@XTSAesTest:

; 268  : 			return FALSE;

  00111	33 c0		 xor	 eax, eax
  00113	eb eb		 jmp	 SHORT $LN8@XTSAesTest
_XTSAesTest@4 ENDP
_TEXT	ENDS
PUBLIC	_CipherInit2@16
EXTRN	_CipherInit@12:PROC
EXTRN	_BlowfishSetKey@12:PROC
EXTRN	__imp__KeBugCheckEx@20:PROC
; Function compile flags: /Ogsp
;	COMDAT _CipherInit2@16
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2@16 PROC					; COMDAT

; 534  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 535  : 	switch (cipher)

  00005	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00008	48		 dec	 eax
  00009	74 5d		 je	 SHORT $LN6@CipherInit
  0000b	48		 dec	 eax
  0000c	74 50		 je	 SHORT $LN4@CipherInit
  0000e	48		 dec	 eax
  0000f	74 43		 je	 SHORT $LN2@CipherInit
  00011	48		 dec	 eax
  00012	74 30		 je	 SHORT $LN7@CipherInit
  00014	48		 dec	 eax
  00015	74 23		 je	 SHORT $LN5@CipherInit
  00017	48		 dec	 eax
  00018	74 16		 je	 SHORT $LN3@CipherInit

; 563  : 
; 564  : 	default:			
; 565  : 		/* Unknown/wrong ID */
; 566  : 		TC_THROW_FATAL_EXCEPTION;

  0001a	68 43 54 00 00	 push	 21571			; 00005443H
  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 36 02 00 00	 push	 566			; 00000236H
  00028	6a 29		 push	 41			; 00000029H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN14@CipherInit:
$LN3@CipherInit:

; 554  : 
; 555  : 	case TRIPLEDES:
; 556  : 		/* Deprecated/legacy */
; 557  : 		CipherInit(cipher,key,ks);

  00030	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  00033	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00036	6a 06		 push	 6

; 558  : 		break;

  00038	eb 36		 jmp	 SHORT $LN13@CipherInit
$LN5@CipherInit:

; 544  : 		break;
; 545  : 
; 546  : 	case CAST:
; 547  : 		/* Deprecated/legacy */
; 548  : 		CipherInit(cipher,key,ks);

  0003a	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  0003d	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00040	6a 05		 push	 5

; 549  : 		break;

  00042	eb 2c		 jmp	 SHORT $LN13@CipherInit
$LN7@CipherInit:

; 536  : 	{
; 537  : 	case BLOWFISH:
; 538  : 		/* Deprecated/legacy */
; 539  : 		BlowfishSetKey (ks, key_len,  key); 

  00044	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00047	ff 75 14	 push	 DWORD PTR _key_len$[ebp]
  0004a	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  0004d	e8 00 00 00 00	 call	 _BlowfishSetKey@12

; 540  : 		break;

  00052	eb 21		 jmp	 SHORT $LN8@CipherInit
$LN2@CipherInit:

; 559  : 
; 560  : 	case TWOFISH:
; 561  : 		CipherInit(cipher,key,ks);

  00054	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  00057	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0005a	6a 03		 push	 3

; 562  : 		break;

  0005c	eb 12		 jmp	 SHORT $LN13@CipherInit
$LN4@CipherInit:

; 550  : 
; 551  : 	case SERPENT:
; 552  : 		CipherInit(cipher,key,ks);

  0005e	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  00061	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00064	6a 02		 push	 2

; 553  : 		break;

  00066	eb 08		 jmp	 SHORT $LN13@CipherInit
$LN6@CipherInit:

; 541  : 
; 542  : 	case AES:
; 543  : 		CipherInit(cipher,key,ks);

  00068	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  0006b	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0006e	6a 01		 push	 1
$LN13@CipherInit:
  00070	e8 00 00 00 00	 call	 _CipherInit@12
$LN8@CipherInit:

; 567  : 	}
; 568  : }

  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
$LN12@CipherInit:
_CipherInit2@16 ENDP
_TEXT	ENDS
PUBLIC	_ci$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_LRWAesTest@4
EXTRN	_EncryptBufferLRW128@24:PROC
; Function compile flags: /Ogsp
;	COMDAT _LRWAesTest@4
_TEXT	SEGMENT
_ci$GSCopy$ = -24					; size = 4
_p$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_LRWAesTest@4 PROC					; COMDAT

; 604  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 18	 sub	 esp, 24			; 00000018H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _ci$[ebp]
  00017	57		 push	 edi

; 605  : 	/* Deprecated/legacy */
; 606  : 
; 607  : 	unsigned __int8 p[16];
; 608  : 	int i;
; 609  : 
; 610  : 	for (i = 0; i < LRW_TEST_COUNT; i++)

  00018	89 75 e8	 mov	 DWORD PTR _ci$GSCopy$[ebp], esi
  0001b	bb 20 00 00 00	 mov	 ebx, OFFSET _lrw_vectors+32
  00020	eb 03		 jmp	 SHORT $LN7@LRWAesTest
$LL17@LRWAesTest:
  00022	8b 75 e8	 mov	 esi, DWORD PTR _ci$GSCopy$[ebp]
$LN7@LRWAesTest:

; 611  : 	{
; 612  : 		ci->ea = EAGetByName ("AES");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0002a	e8 00 00 00 00	 call	 _EAGetByName@4
  0002f	89 06		 mov	 DWORD PTR [esi], eax

; 613  : 		if (ci->ea == 0)

  00031	85 c0		 test	 eax, eax
  00033	0f 84 88 00 00
	00		 je	 $LN11@LRWAesTest

; 615  : 
; 616  : 		ci->mode = LRW;
; 617  : 
; 618  : 		if (EAInit (ci->ea, lrw_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  00039	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003c	51		 push	 ecx
  0003d	8d 4b e0	 lea	 ecx, DWORD PTR [ebx-32]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	c7 46 04 02 00
	00 00		 mov	 DWORD PTR [esi+4], 2
  00049	e8 00 00 00 00	 call	 _EAInit@12
  0004e	85 c0		 test	 eax, eax
  00050	75 6f		 jne	 SHORT $LN11@LRWAesTest

; 619  : 			return FALSE;
; 620  : 
; 621  : 		memcpy (&ci->k2, lrw_vectors[i].key2, sizeof (lrw_vectors[i].key2));
; 622  : 		if (!EAInitMode (ci))

  00052	ff 75 e8	 push	 DWORD PTR _ci$GSCopy$[ebp]
  00055	8d be a8 42 00
	00		 lea	 edi, DWORD PTR [esi+17064]
  0005b	8b f3		 mov	 esi, ebx
  0005d	a5		 movsd
  0005e	a5		 movsd
  0005f	a5		 movsd
  00060	a5		 movsd
  00061	e8 00 00 00 00	 call	 _EAInitMode@4
  00066	85 c0		 test	 eax, eax
  00068	74 57		 je	 SHORT $LN11@LRWAesTest

; 623  : 			return FALSE;
; 624  : 
; 625  : 		memcpy (p, lrw_vectors[i].plaintext, sizeof (p));
; 626  : 
; 627  : 		EncryptBufferLRW128 (p, sizeof (p), BE64(((unsigned __int64 *)(lrw_vectors[i].index))[1]), ci);

  0006a	ff 75 e8	 push	 DWORD PTR _ci$GSCopy$[ebp]
  0006d	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  00070	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00073	8d 7d ec	 lea	 edi, DWORD PTR _p$[ebp]
  00076	ff 73 18	 push	 DWORD PTR [ebx+24]
  00079	a5		 movsd
  0007a	a5		 movsd
  0007b	a5		 movsd
  0007c	a5		 movsd
  0007d	e8 00 00 00 00	 call	 _MirrorBytes64@8
  00082	52		 push	 edx
  00083	50		 push	 eax
  00084	6a 00		 push	 0
  00086	6a 10		 push	 16			; 00000010H
  00088	8d 45 ec	 lea	 eax, DWORD PTR _p$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _EncryptBufferLRW128@24

; 628  : 
; 629  : 		if (memcmp (lrw_vectors[i].ciphertext, p, sizeof (p)) != 0)

  00091	6a 04		 push	 4
  00093	59		 pop	 ecx
  00094	8d 7d ec	 lea	 edi, DWORD PTR _p$[ebp]
  00097	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
  0009a	33 c0		 xor	 eax, eax
  0009c	f3 a7		 repe cmpsd
  0009e	75 21		 jne	 SHORT $LN11@LRWAesTest
  000a0	83 c3 60	 add	 ebx, 96			; 00000060H
  000a3	81 fb e0 00 00
	00		 cmp	 ebx, OFFSET _lrw_vectors+224
  000a9	0f 8c 73 ff ff
	ff		 jl	 $LL17@LRWAesTest

; 630  : 			return FALSE;
; 631  : 	}
; 632  : 
; 633  : 	return TRUE;

  000af	40		 inc	 eax
$LN8@LRWAesTest:

; 634  : }

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	33 cd		 xor	 ecx, ebp
  000b7	5b		 pop	 ebx
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	c9		 leave
  000be	c2 04 00	 ret	 4
$LN11@LRWAesTest:

; 614  : 			return FALSE;

  000c1	33 c0		 xor	 eax, eax
  000c3	eb eb		 jmp	 SHORT $LN8@LRWAesTest
_LRWAesTest@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
PUBLIC	_TestLegacySectorBufEncryption@4
EXTRN	_EAGetNext@4:PROC
EXTRN	_EAGetNextMode@8:PROC
EXTRN	_DecryptBuffer@16:PROC
EXTRN	_EncryptBuffer@16:PROC
EXTRN	_DecryptDataUnits@16:PROC
EXTRN	_GetCrc32@8:PROC
EXTRN	_EncryptDataUnits@16:PROC
EXTRN	_EAGetFirstMode@4:PROC
EXTRN	_CipherGetBlockSize@4:PROC
EXTRN	_EAGetFirstCipher@4:PROC
EXTRN	_EAGetName@8:PROC
EXTRN	_EAGetFirst@0:PROC
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@ DB 'Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ DB 'Twofish-Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ DB 'Serpent-Twofis'
	DB	'h-AES', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@ DB 'Serpent-AES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ DB 'AES-Twofish-Se'
	DB	'rpent', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@ DB 'AES-Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ DB 'AES-Blowfish-'
	DB	'Serpent', 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@ DB 'AES-Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@ DB 'Triple DES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@ DB 'Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@ DB 'CAST5', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@ DB 'Blowfish', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _TestLegacySectorBufEncryption@4
_TEXT	SEGMENT
_unitNo$ = -1116					; size = 8
_blockSize$ = -1108					; size = 4
_lrw64InitDone$ = -1104					; size = 4
_lrw128InitDone$ = -1100				; size = 4
_nTestsPerformed$ = -1096				; size = 4
_buf$ = -1092						; size = 1024
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption@4 PROC			; COMDAT

; 1034 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 5c 04 00
	00		 sub	 esp, 1116		; 0000045cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	53		 push	 ebx
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _ci$[ebp]
  00019	56		 push	 esi

; 1035 : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 1036 : 	unsigned int i;
; 1037 : 	char name[64];
; 1038 : 	unsigned __int32 crc;
; 1039 : 	UINT64_STRUCT unitNo;
; 1040 : 	uint32 nbrUnits;
; 1041 : 	int blockSize;
; 1042 : 	BOOL lrw64InitDone = FALSE;

  0001a	33 f6		 xor	 esi, esi
  0001c	57		 push	 edi
  0001d	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _lrw64InitDone$[ebp], esi

; 1043 : 	BOOL lrw128InitDone = FALSE;

  00023	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR _lrw128InitDone$[ebp], esi

; 1044 : 	int nTestsPerformed = 0;

  00029	89 b5 b8 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], esi

; 1045 : 
; 1046 : 	unitNo.Value = 0x0234567890ABCDEFull;

  0002f	c7 85 a4 fb ff
	ff ef cd ab 90	 mov	 DWORD PTR _unitNo$[ebp], -1867788817 ; 90abcdefH
  00039	c7 85 a8 fb ff
	ff 78 56 34 02	 mov	 DWORD PTR _unitNo$[ebp+4], 36984440 ; 02345678H

; 1047 : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 1048 : 
; 1049 : 	for (i = 0; i < sizeof (buf); i++)

  00043	33 c0		 xor	 eax, eax
$LL143@TestLegacy:

; 1050 : 		buf[i] = (unsigned char) i;

  00045	88 84 05 bc fb
	ff ff		 mov	 BYTE PTR _buf$[ebp+eax], al
  0004c	40		 inc	 eax
  0004d	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00052	72 f1		 jb	 SHORT $LL143@TestLegacy

; 1051 : 
; 1052 : 	for (i = 0; i < sizeof (ci->k2); i++)

  00054	33 c0		 xor	 eax, eax
$LL140@TestLegacy:

; 1053 : 		ci->k2[i] = (unsigned char) i;

  00056	88 84 03 a8 42
	00 00		 mov	 BYTE PTR [ebx+eax+17064], al
  0005d	40		 inc	 eax
  0005e	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00063	72 f1		 jb	 SHORT $LL140@TestLegacy

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00065	e8 00 00 00 00	 call	 _EAGetFirst@0
  0006a	89 03		 mov	 DWORD PTR [ebx], eax
  0006c	3b c6		 cmp	 eax, esi
  0006e	0f 84 c8 05 00
	00		 je	 $LN135@TestLegacy
  00074	33 f6		 xor	 esi, esi
  00076	46		 inc	 esi
$LL239@TestLegacy:

; 1057 : 	{
; 1058 : 		EAGetName (name, ci->ea);

  00077	ff 33		 push	 DWORD PTR [ebx]
  00079	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _EAGetName@8

; 1059 : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  00082	ff 33		 push	 DWORD PTR [ebx]
  00084	e8 00 00 00 00	 call	 _EAGetFirstCipher@4
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  0008f	89 85 ac fb ff
	ff		 mov	 DWORD PTR _blockSize$[ebp], eax

; 1060 : 
; 1061 : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  00095	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00098	50		 push	 eax
  00099	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0009f	50		 push	 eax
  000a0	ff 33		 push	 DWORD PTR [ebx]
  000a2	e8 00 00 00 00	 call	 _EAInit@12
  000a7	83 f8 11	 cmp	 eax, 17			; 00000011H
  000aa	0f 84 a9 05 00
	00		 je	 $LN193@TestLegacy

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  000b0	ff 33		 push	 DWORD PTR [ebx]
  000b2	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  000b7	e9 64 05 00 00	 jmp	 $LN241@TestLegacy
$LL238@TestLegacy:

; 1068 : 		{
; 1069 : 			// Skip modes that are not deprecated
; 1070 : 			if (ci->mode == XTS)

  000bc	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000bf	3b c6		 cmp	 eax, esi
  000c1	0f 84 4f 05 00
	00		 je	 $LN132@TestLegacy

; 1071 : 				continue;
; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  000c7	83 f8 02	 cmp	 eax, 2
  000ca	75 48		 jne	 SHORT $LN123@TestLegacy
  000cc	8b bd ac fb ff
	ff		 mov	 edi, DWORD PTR _blockSize$[ebp]
  000d2	83 ff 08	 cmp	 edi, 8
  000d5	75 09		 jne	 SHORT $LN240@TestLegacy
  000d7	83 bd b0 fb ff
	ff 00		 cmp	 DWORD PTR _lrw64InitDone$[ebp], 0
  000de	74 0e		 je	 SHORT $LN128@TestLegacy
$LN240@TestLegacy:
  000e0	83 ff 10	 cmp	 edi, 16			; 00000010H
  000e3	75 2f		 jne	 SHORT $LN123@TestLegacy
  000e5	83 bd b4 fb ff
	ff 00		 cmp	 DWORD PTR _lrw128InitDone$[ebp], 0
  000ec	75 26		 jne	 SHORT $LN123@TestLegacy
$LN128@TestLegacy:

; 1075 : 			{
; 1076 : 				if (!EAInitMode (ci))

  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 _EAInitMode@4
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 5d 05 00
	00		 je	 $LN193@TestLegacy

; 1077 : 					return FALSE;
; 1078 : 
; 1079 : 				if (blockSize == 8)

  000fc	83 ff 08	 cmp	 edi, 8
  000ff	75 08		 jne	 SHORT $LN125@TestLegacy

; 1080 : 					lrw64InitDone = TRUE;

  00101	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _lrw64InitDone$[ebp], esi
  00107	eb 0b		 jmp	 SHORT $LN123@TestLegacy
$LN125@TestLegacy:

; 1081 : 				else if (blockSize == 16)

  00109	83 ff 10	 cmp	 edi, 16			; 00000010H
  0010c	75 06		 jne	 SHORT $LN123@TestLegacy

; 1082 : 					lrw128InitDone = TRUE;

  0010e	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR _lrw128InitDone$[ebp], esi
$LN123@TestLegacy:

; 1083 : 			}
; 1084 : 
; 1085 : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00114	53		 push	 ebx
  00115	6a 02		 push	 2
  00117	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  0011d	50		 push	 eax
  0011e	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1086 : 			crc = GetCrc32 (buf, sizeof (buf));

  0012a	68 00 04 00 00	 push	 1024			; 00000400H
  0012f	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _GetCrc32@8

; 1087 : 
; 1088 : 			switch (ci->mode)

  0013b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0013e	83 f9 02	 cmp	 ecx, 2
  00141	0f 84 54 01 00
	00		 je	 $LN120@TestLegacy
  00147	83 c1 fd	 add	 ecx, -3			; fffffffdH
  0014a	83 f9 02	 cmp	 ecx, 2
  0014d	0f 87 78 02 00
	00		 ja	 $LN89@TestLegacy

; 1156 : 				}
; 1157 : 				break;
; 1158 : 
; 1159 : 			case CBC:		// Deprecated/legacy
; 1160 : 			case INNER_CBC:	// Deprecated/legacy
; 1161 : 			case OUTER_CBC:	// Deprecated/legacy
; 1162 : 				if (strcmp (name, "AES") == 0)

  00153	6a 04		 push	 4
  00155	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0015a	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0015d	59		 pop	 ecx
  0015e	33 d2		 xor	 edx, edx
  00160	f3 a6		 repe cmpsb
  00162	75 16		 jne	 SHORT $LN86@TestLegacy

; 1163 : 				{
; 1164 : 					if (crc != 0x2274f53d)

  00164	3d 3d f5 74 22	 cmp	 eax, 578090301		; 2274f53dH
$LN246@TestLegacy:
  00169	0f 85 ea 04 00
	00		 jne	 $LN193@TestLegacy

; 1165 : 						return FALSE;
; 1166 : 					nTestsPerformed++;

  0016f	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
  00175	e9 5c 02 00 00	 jmp	 $LN198@TestLegacy
$LN86@TestLegacy:

; 1167 : 				}
; 1168 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0017a	6a 09		 push	 9
  0017c	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00181	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00184	59		 pop	 ecx
  00185	33 d2		 xor	 edx, edx
  00187	f3 a6		 repe cmpsb
  00189	75 07		 jne	 SHORT $LN83@TestLegacy

; 1169 : 				{
; 1170 : 					if (crc != 0x033899a1)

  0018b	3d a1 99 38 03	 cmp	 eax, 54040993		; 033899a1H

; 1171 : 						return FALSE;
; 1172 : 					nTestsPerformed++;

  00190	eb d7		 jmp	 SHORT $LN246@TestLegacy
$LN83@TestLegacy:

; 1173 : 				}
; 1174 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  00192	6a 06		 push	 6
  00194	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  00199	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0019c	59		 pop	 ecx
  0019d	33 d2		 xor	 edx, edx
  0019f	f3 a6		 repe cmpsb
  001a1	75 07		 jne	 SHORT $LN80@TestLegacy

; 1175 : 				{
; 1176 : 					if (crc != 0x331cecc7)	

  001a3	3d c7 ec 1c 33	 cmp	 eax, 857533639		; 331cecc7H

; 1177 : 						return FALSE;
; 1178 : 					nTestsPerformed++;

  001a8	eb bf		 jmp	 SHORT $LN246@TestLegacy
$LN80@TestLegacy:

; 1179 : 				}
; 1180 : 				else if (strcmp (name, "Serpent") == 0)

  001aa	6a 08		 push	 8
  001ac	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  001b1	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001b4	59		 pop	 ecx
  001b5	33 d2		 xor	 edx, edx
  001b7	f3 a6		 repe cmpsb
  001b9	75 07		 jne	 SHORT $LN77@TestLegacy

; 1181 : 				{
; 1182 : 					if (crc != 0x42dff3d4)

  001bb	3d d4 f3 df 42	 cmp	 eax, 1121973204		; 42dff3d4H

; 1183 : 						return FALSE;
; 1184 : 					nTestsPerformed++;

  001c0	eb a7		 jmp	 SHORT $LN246@TestLegacy
$LN77@TestLegacy:

; 1185 : 				}
; 1186 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  001c2	6a 0b		 push	 11			; 0000000bH
  001c4	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  001c9	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001cc	59		 pop	 ecx
  001cd	33 d2		 xor	 edx, edx
  001cf	f3 a6		 repe cmpsb
  001d1	75 07		 jne	 SHORT $LN74@TestLegacy

; 1187 : 				{
; 1188 : 					if (crc != 0xfe497d0c)

  001d3	3d 0c 7d 49 fe	 cmp	 eax, -28738292		; fe497d0cH

; 1189 : 						return FALSE;
; 1190 : 					nTestsPerformed++;

  001d8	eb 8f		 jmp	 SHORT $LN246@TestLegacy
$LN74@TestLegacy:

; 1191 : 				}
; 1192 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  001da	6a 0d		 push	 13			; 0000000dH
  001dc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  001e1	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001e4	59		 pop	 ecx
  001e5	33 d2		 xor	 edx, edx
  001e7	f3 a6		 repe cmpsb
  001e9	75 0a		 jne	 SHORT $LN71@TestLegacy

; 1193 : 				{
; 1194 : 					if (crc != 0xa7a80c84)

  001eb	3d 84 0c a8 a7	 cmp	 eax, -1482158972	; a7a80c84H

; 1195 : 						return FALSE;
; 1196 : 					nTestsPerformed++;

  001f0	e9 74 ff ff ff	 jmp	 $LN246@TestLegacy
$LN71@TestLegacy:

; 1197 : 				}
; 1198 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  001f5	6a 15		 push	 21			; 00000015H
  001f7	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  001fc	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001ff	59		 pop	 ecx
  00200	33 d2		 xor	 edx, edx
  00202	f3 a6		 repe cmpsb
  00204	75 0a		 jne	 SHORT $LN68@TestLegacy

; 1199 : 				{
; 1200 : 					if (crc != 0xa0584562)

  00206	3d 62 45 58 a0	 cmp	 eax, -1604827806	; a0584562H

; 1201 : 						return FALSE;
; 1202 : 					nTestsPerformed++;

  0020b	e9 59 ff ff ff	 jmp	 $LN246@TestLegacy
$LN68@TestLegacy:

; 1203 : 				}
; 1204 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00210	6a 0c		 push	 12			; 0000000cH
  00212	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00217	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0021a	59		 pop	 ecx
  0021b	33 d2		 xor	 edx, edx
  0021d	f3 a6		 repe cmpsb
  0021f	75 0a		 jne	 SHORT $LN65@TestLegacy

; 1205 : 				{
; 1206 : 					if (crc != 0x3c226444)

  00221	3d 44 64 22 3c	 cmp	 eax, 1008886852		; 3c226444H

; 1207 : 						return FALSE;
; 1208 : 					nTestsPerformed++;

  00226	e9 3e ff ff ff	 jmp	 $LN246@TestLegacy
$LN65@TestLegacy:

; 1209 : 				}
; 1210 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0022b	6a 14		 push	 20			; 00000014H
  0022d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00232	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00235	59		 pop	 ecx
  00236	33 d2		 xor	 edx, edx
  00238	f3 a6		 repe cmpsb
  0023a	75 0a		 jne	 SHORT $LN62@TestLegacy

; 1211 : 				{
; 1212 : 					if (crc != 0x5e5e77fd)

  0023c	3d fd 77 5e 5e	 cmp	 eax, 1583249405		; 5e5e77fdH

; 1213 : 						return FALSE;
; 1214 : 					nTestsPerformed++;

  00241	e9 23 ff ff ff	 jmp	 $LN246@TestLegacy
$LN62@TestLegacy:

; 1215 : 				}
; 1216 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00246	6a 0c		 push	 12			; 0000000cH
  00248	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0024d	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00250	59		 pop	 ecx
  00251	33 d2		 xor	 edx, edx
  00253	f3 a6		 repe cmpsb
  00255	75 0a		 jne	 SHORT $LN59@TestLegacy

; 1217 : 				{
; 1218 : 					if (crc != 0x57c612d5)

  00257	3d d5 12 c6 57	 cmp	 eax, 1472598741		; 57c612d5H

; 1219 : 						return FALSE;
; 1220 : 					nTestsPerformed++;

  0025c	e9 08 ff ff ff	 jmp	 $LN246@TestLegacy
$LN59@TestLegacy:

; 1221 : 				}
; 1222 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00261	6a 14		 push	 20			; 00000014H
  00263	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00268	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0026b	59		 pop	 ecx
  0026c	33 d2		 xor	 edx, edx
  0026e	f3 a6		 repe cmpsb
  00270	75 0a		 jne	 SHORT $LN56@TestLegacy

; 1223 : 				{
; 1224 : 					if (crc != 0x081e045a)

  00272	3d 5a 04 1e 08	 cmp	 eax, 136184922		; 081e045aH

; 1225 : 						return FALSE;
; 1226 : 					nTestsPerformed++;

  00277	e9 ed fe ff ff	 jmp	 $LN246@TestLegacy
$LN56@TestLegacy:

; 1227 : 				}
; 1228 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  0027c	6a 10		 push	 16			; 00000010H
  0027e	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00283	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00286	59		 pop	 ecx
  00287	33 d2		 xor	 edx, edx
  00289	f3 a6		 repe cmpsb
  0028b	0f 85 3a 01 00
	00		 jne	 $LN89@TestLegacy

; 1229 : 				{
; 1230 : 					if (crc != 0xa7b659f3)

  00291	3d f3 59 b6 a7	 cmp	 eax, -1481221645	; a7b659f3H

; 1231 : 						return FALSE;
; 1232 : 					nTestsPerformed++;
; 1233 : 				}
; 1234 : 				break;

  00296	e9 24 01 00 00	 jmp	 $LN247@TestLegacy
$LN120@TestLegacy:

; 1089 : 			{
; 1090 : 			case LRW:		// Deprecated/legacy
; 1091 : 				if (strcmp (name, "AES") == 0)

  0029b	6a 04		 push	 4
  0029d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  002a2	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002a5	59		 pop	 ecx
  002a6	33 d2		 xor	 edx, edx
  002a8	f3 a6		 repe cmpsb
  002aa	75 0a		 jne	 SHORT $LN119@TestLegacy

; 1092 : 				{
; 1093 : 					if (crc != 0x5237acf9)

  002ac	3d f9 ac 37 52	 cmp	 eax, 1379380473		; 5237acf9H

; 1094 : 						return FALSE;
; 1095 : 					nTestsPerformed++;

  002b1	e9 b3 fe ff ff	 jmp	 $LN246@TestLegacy
$LN119@TestLegacy:

; 1096 : 				}
; 1097 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  002b6	6a 09		 push	 9
  002b8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  002bd	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002c0	59		 pop	 ecx
  002c1	33 d2		 xor	 edx, edx
  002c3	f3 a6		 repe cmpsb
  002c5	75 0a		 jne	 SHORT $LN116@TestLegacy

; 1098 : 				{
; 1099 : 					if (crc != 0xf94d5300)

  002c7	3d 00 53 4d f9	 cmp	 eax, -112372992		; f94d5300H

; 1100 : 						return FALSE;
; 1101 : 					nTestsPerformed++;

  002cc	e9 98 fe ff ff	 jmp	 $LN246@TestLegacy
$LN116@TestLegacy:

; 1102 : 				}
; 1103 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  002d1	6a 06		 push	 6
  002d3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  002d8	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002db	59		 pop	 ecx
  002dc	33 d2		 xor	 edx, edx
  002de	f3 a6		 repe cmpsb
  002e0	75 0a		 jne	 SHORT $LN113@TestLegacy

; 1104 : 				{
; 1105 : 					if (crc != 0x33971e82)

  002e2	3d 82 1e 97 33	 cmp	 eax, 865541762		; 33971e82H

; 1106 : 						return FALSE;
; 1107 : 					nTestsPerformed++;

  002e7	e9 7d fe ff ff	 jmp	 $LN246@TestLegacy
$LN113@TestLegacy:

; 1108 : 				}
; 1109 : 				else if (strcmp (name, "Serpent") == 0)

  002ec	6a 08		 push	 8
  002ee	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  002f3	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002f6	59		 pop	 ecx
  002f7	33 d2		 xor	 edx, edx
  002f9	f3 a6		 repe cmpsb
  002fb	75 0a		 jne	 SHORT $LN110@TestLegacy

; 1110 : 				{
; 1111 : 					if (crc != 0x7fb86805)

  002fd	3d 05 68 b8 7f	 cmp	 eax, 2142791685		; 7fb86805H

; 1112 : 						return FALSE;
; 1113 : 					nTestsPerformed++;

  00302	e9 62 fe ff ff	 jmp	 $LN246@TestLegacy
$LN110@TestLegacy:

; 1114 : 				}
; 1115 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00307	6a 0b		 push	 11			; 0000000bH
  00309	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  0030e	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00311	59		 pop	 ecx
  00312	33 d2		 xor	 edx, edx
  00314	f3 a6		 repe cmpsb
  00316	75 0a		 jne	 SHORT $LN107@TestLegacy

; 1116 : 				{
; 1117 : 					if (crc != 0x2b20bb84)

  00318	3d 84 bb 20 2b	 cmp	 eax, 723565444		; 2b20bb84H

; 1118 : 						return FALSE;
; 1119 : 					nTestsPerformed++;

  0031d	e9 47 fe ff ff	 jmp	 $LN246@TestLegacy
$LN107@TestLegacy:

; 1120 : 				}
; 1121 : 				else if (strcmp (name, "Twofish") == 0)

  00322	6a 08		 push	 8
  00324	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00329	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0032c	59		 pop	 ecx
  0032d	33 d2		 xor	 edx, edx
  0032f	f3 a6		 repe cmpsb
  00331	75 0a		 jne	 SHORT $LN104@TestLegacy

; 1122 : 				{
; 1123 : 					if (crc != 0xa9de0f0b)

  00333	3d 0b 0f de a9	 cmp	 eax, -1445064949	; a9de0f0bH

; 1124 : 						return FALSE;
; 1125 : 					nTestsPerformed++;

  00338	e9 2c fe ff ff	 jmp	 $LN246@TestLegacy
$LN104@TestLegacy:

; 1126 : 				}
; 1127 : 				else if (strcmp (name, "AES-Twofish") == 0)

  0033d	6a 0c		 push	 12			; 0000000cH
  0033f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00344	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00347	59		 pop	 ecx
  00348	33 d2		 xor	 edx, edx
  0034a	f3 a6		 repe cmpsb
  0034c	75 0a		 jne	 SHORT $LN101@TestLegacy

; 1128 : 				{
; 1129 : 					if (crc != 0x4ed0fd80)

  0034e	3d 80 fd d0 4e	 cmp	 eax, 1322319232		; 4ed0fd80H

; 1130 : 						return FALSE;
; 1131 : 					nTestsPerformed++;

  00353	e9 11 fe ff ff	 jmp	 $LN246@TestLegacy
$LN101@TestLegacy:

; 1132 : 				}
; 1133 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00358	6a 14		 push	 20			; 00000014H
  0035a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0035f	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00362	59		 pop	 ecx
  00363	33 d2		 xor	 edx, edx
  00365	f3 a6		 repe cmpsb
  00367	75 0a		 jne	 SHORT $LN98@TestLegacy

; 1134 : 				{
; 1135 : 					if (crc != 0xea04b3cf)

  00369	3d cf b3 04 ea	 cmp	 eax, -368790577		; ea04b3cfH

; 1136 : 						return FALSE;
; 1137 : 					nTestsPerformed++;

  0036e	e9 f6 fd ff ff	 jmp	 $LN246@TestLegacy
$LN98@TestLegacy:

; 1138 : 				}
; 1139 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00373	6a 0c		 push	 12			; 0000000cH
  00375	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0037a	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0037d	59		 pop	 ecx
  0037e	33 d2		 xor	 edx, edx
  00380	f3 a6		 repe cmpsb
  00382	75 0a		 jne	 SHORT $LN95@TestLegacy

; 1140 : 				{
; 1141 : 					if (crc != 0x0d33596a)

  00384	3d 6a 59 33 0d	 cmp	 eax, 221469034		; 0d33596aH

; 1142 : 						return FALSE;
; 1143 : 					nTestsPerformed++;

  00389	e9 db fd ff ff	 jmp	 $LN246@TestLegacy
$LN95@TestLegacy:

; 1144 : 				}
; 1145 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  0038e	6a 14		 push	 20			; 00000014H
  00390	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00395	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00398	59		 pop	 ecx
  00399	33 d2		 xor	 edx, edx
  0039b	f3 a6		 repe cmpsb
  0039d	75 0a		 jne	 SHORT $LN92@TestLegacy

; 1146 : 				{
; 1147 : 					if (crc != 0x2845d0e3)

  0039f	3d e3 d0 45 28	 cmp	 eax, 675664099		; 2845d0e3H

; 1148 : 						return FALSE;
; 1149 : 					nTestsPerformed++;

  003a4	e9 c0 fd ff ff	 jmp	 $LN246@TestLegacy
$LN92@TestLegacy:

; 1150 : 				}
; 1151 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  003a9	6a 10		 push	 16			; 00000010H
  003ab	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  003b0	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  003b3	59		 pop	 ecx
  003b4	33 d2		 xor	 edx, edx
  003b6	f3 a6		 repe cmpsb
  003b8	75 11		 jne	 SHORT $LN89@TestLegacy

; 1152 : 				{
; 1153 : 					if (crc != 0xca65c5cd)

  003ba	3d cd c5 65 ca	 cmp	 eax, -899299891		; ca65c5cdH
$LN247@TestLegacy:
  003bf	0f 85 94 02 00
	00		 jne	 $LN193@TestLegacy

; 1154 : 						return FALSE;
; 1155 : 					nTestsPerformed++;

  003c5	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN89@TestLegacy:

; 1235 : 			}
; 1236 : 
; 1237 : 			if (crc == 0xb70b4c26)

  003cb	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  003d0	0f 84 83 02 00
	00		 je	 $LN193@TestLegacy
$LN198@TestLegacy:

; 1238 : 				return FALSE;
; 1239 : 
; 1240 : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  003d6	53		 push	 ebx
  003d7	6a 02		 push	 2
  003d9	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  003df	50		 push	 eax
  003e0	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003e6	50		 push	 eax
  003e7	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 1241 : 
; 1242 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  003ec	be 00 04 00 00	 mov	 esi, 1024		; 00000400H
  003f1	56		 push	 esi
  003f2	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 _GetCrc32@8
  003fe	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00403	0f 85 50 02 00
	00		 jne	 $LN193@TestLegacy

; 1243 : 				return FALSE;
; 1244 : 
; 1245 : 			nTestsPerformed++;

  00409	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]

; 1246 : 
; 1247 : 			EncryptBuffer (buf, sizeof (buf), ci);

  0040f	53		 push	 ebx
  00410	6a 00		 push	 0
  00412	56		 push	 esi
  00413	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 1248 : 			crc = GetCrc32 (buf, sizeof (buf));

  0041f	56		 push	 esi
  00420	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00426	50		 push	 eax
  00427	e8 00 00 00 00	 call	 _GetCrc32@8

; 1249 : 
; 1250 : 			switch (ci->mode)

  0042c	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0042f	83 f9 02	 cmp	 ecx, 2
  00432	0f 84 4d 01 00
	00		 je	 $LN47@TestLegacy
  00438	83 c1 fd	 add	 ecx, -3			; fffffffdH
  0043b	83 f9 02	 cmp	 ecx, 2
  0043e	0f 87 99 01 00
	00		 ja	 $LN40@TestLegacy

; 1270 : 				}
; 1271 : 				break;
; 1272 : 
; 1273 : 			case CBC:		// Deprecated/legacy
; 1274 : 			case INNER_CBC:	// Deprecated/legacy
; 1275 : 			case OUTER_CBC:	// Deprecated/legacy
; 1276 : 				if (strcmp (name, "AES") == 0)

  00444	6a 04		 push	 4
  00446	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0044b	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0044e	59		 pop	 ecx
  0044f	33 d2		 xor	 edx, edx
  00451	f3 a6		 repe cmpsb
  00453	75 16		 jne	 SHORT $LN37@TestLegacy

; 1277 : 				{
; 1278 : 					if (crc != 0x960f740e)

  00455	3d 0e 74 0f 96	 cmp	 eax, -1777372146	; 960f740eH
$LN248@TestLegacy:
  0045a	0f 85 f9 01 00
	00		 jne	 $LN193@TestLegacy

; 1279 : 						return FALSE;
; 1280 : 					nTestsPerformed++;

  00460	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
  00466	e9 79 01 00 00	 jmp	 $LN199@TestLegacy
$LN37@TestLegacy:

; 1281 : 				}
; 1282 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0046b	6a 09		 push	 9
  0046d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00472	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00475	59		 pop	 ecx
  00476	33 d2		 xor	 edx, edx
  00478	f3 a6		 repe cmpsb
  0047a	75 07		 jne	 SHORT $LN34@TestLegacy

; 1283 : 				{
; 1284 : 					if (crc != 0x7e1cfabb)

  0047c	3d bb fa 1c 7e	 cmp	 eax, 2115828411		; 7e1cfabbH

; 1285 : 						return FALSE;
; 1286 : 					nTestsPerformed++;

  00481	eb d7		 jmp	 SHORT $LN248@TestLegacy
$LN34@TestLegacy:

; 1287 : 				}
; 1288 : 				else if (strcmp (name, "CAST5") == 0)	// Deprecated/legacy

  00483	6a 06		 push	 6
  00485	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  0048a	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0048d	59		 pop	 ecx
  0048e	33 d2		 xor	 edx, edx
  00490	f3 a6		 repe cmpsb
  00492	75 07		 jne	 SHORT $LN31@TestLegacy

; 1289 : 				{
; 1290 : 					if (crc != 0xeaae21c8)

  00494	3d c8 21 ae ea	 cmp	 eax, -357686840		; eaae21c8H

; 1291 : 						return FALSE;
; 1292 : 					nTestsPerformed++;

  00499	eb bf		 jmp	 SHORT $LN248@TestLegacy
$LN31@TestLegacy:

; 1293 : 				}
; 1294 : 				else if (strcmp (name, "Serpent") == 0)

  0049b	6a 08		 push	 8
  0049d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  004a2	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  004a5	59		 pop	 ecx
  004a6	33 d2		 xor	 edx, edx
  004a8	f3 a6		 repe cmpsb
  004aa	75 07		 jne	 SHORT $LN28@TestLegacy

; 1295 : 				{
; 1296 : 					if (crc != 0xa8139d62)

  004ac	3d 62 9d 13 a8	 cmp	 eax, -1475109534	; a8139d62H

; 1297 : 						return FALSE;
; 1298 : 					nTestsPerformed++;

  004b1	eb a7		 jmp	 SHORT $LN248@TestLegacy
$LN28@TestLegacy:

; 1299 : 				}
; 1300 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  004b3	6a 0b		 push	 11			; 0000000bH
  004b5	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  004ba	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  004bd	59		 pop	 ecx
  004be	33 d2		 xor	 edx, edx
  004c0	f3 a6		 repe cmpsb
  004c2	75 07		 jne	 SHORT $LN25@TestLegacy

; 1301 : 				{
; 1302 : 					if (crc != 0xecf5d7d0)

  004c4	3d d0 d7 f5 ec	 cmp	 eax, -319432752		; ecf5d7d0H

; 1303 : 						return FALSE;
; 1304 : 					nTestsPerformed++;

  004c9	eb 8f		 jmp	 SHORT $LN248@TestLegacy
$LN25@TestLegacy:

; 1305 : 				}
; 1306 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  004cb	6a 0d		 push	 13			; 0000000dH
  004cd	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  004d2	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  004d5	59		 pop	 ecx
  004d6	33 d2		 xor	 edx, edx
  004d8	f3 a6		 repe cmpsb
  004da	75 0a		 jne	 SHORT $LN22@TestLegacy

; 1307 : 				{
; 1308 : 					if (crc != 0xb70171b6)

  004dc	3d b6 71 01 b7	 cmp	 eax, -1224642122	; b70171b6H

; 1309 : 						return FALSE;
; 1310 : 					nTestsPerformed++;

  004e1	e9 74 ff ff ff	 jmp	 $LN248@TestLegacy
$LN22@TestLegacy:

; 1311 : 				}
; 1312 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  004e6	6a 15		 push	 21			; 00000015H
  004e8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  004ed	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  004f0	59		 pop	 ecx
  004f1	33 d2		 xor	 edx, edx
  004f3	f3 a6		 repe cmpsb
  004f5	75 0a		 jne	 SHORT $LN19@TestLegacy

; 1313 : 				{
; 1314 : 					if (crc != 0x1e749a87)

  004f7	3d 87 9a 74 1e	 cmp	 eax, 510958215		; 1e749a87H

; 1315 : 						return FALSE;
; 1316 : 					nTestsPerformed++;

  004fc	e9 59 ff ff ff	 jmp	 $LN248@TestLegacy
$LN19@TestLegacy:

; 1317 : 				}
; 1318 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00501	6a 0c		 push	 12			; 0000000cH
  00503	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00508	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0050b	59		 pop	 ecx
  0050c	33 d2		 xor	 edx, edx
  0050e	f3 a6		 repe cmpsb
  00510	75 0a		 jne	 SHORT $LN16@TestLegacy

; 1319 : 				{
; 1320 : 					if (crc != 0xb4b8bb9b)

  00512	3d 9b bb b8 b4	 cmp	 eax, -1262961765	; b4b8bb9bH

; 1321 : 						return FALSE;
; 1322 : 					nTestsPerformed++;

  00517	e9 3e ff ff ff	 jmp	 $LN248@TestLegacy
$LN16@TestLegacy:

; 1323 : 				}
; 1324 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0051c	6a 14		 push	 20			; 00000014H
  0051e	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00523	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00526	59		 pop	 ecx
  00527	33 d2		 xor	 edx, edx
  00529	f3 a6		 repe cmpsb
  0052b	75 0a		 jne	 SHORT $LN13@TestLegacy

; 1325 : 				{
; 1326 : 					if (crc != 0x76b6c1cb)

  0052d	3d cb c1 b6 76	 cmp	 eax, 1991688651		; 76b6c1cbH

; 1327 : 						return FALSE;
; 1328 : 					nTestsPerformed++;

  00532	e9 23 ff ff ff	 jmp	 $LN248@TestLegacy
$LN13@TestLegacy:

; 1329 : 				}
; 1330 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00537	6a 0c		 push	 12			; 0000000cH
  00539	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0053e	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00541	59		 pop	 ecx
  00542	33 d2		 xor	 edx, edx
  00544	f3 a6		 repe cmpsb
  00546	75 0a		 jne	 SHORT $LN10@TestLegacy

; 1331 : 				{
; 1332 : 					if (crc != 0x634f12ed)

  00548	3d ed 12 4f 63	 cmp	 eax, 1666126573		; 634f12edH

; 1333 : 						return FALSE;
; 1334 : 					nTestsPerformed++;

  0054d	e9 08 ff ff ff	 jmp	 $LN248@TestLegacy
$LN10@TestLegacy:

; 1335 : 				}
; 1336 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00552	6a 14		 push	 20			; 00000014H
  00554	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00559	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0055c	59		 pop	 ecx
  0055d	33 d2		 xor	 edx, edx
  0055f	f3 a6		 repe cmpsb
  00561	75 0a		 jne	 SHORT $LN7@TestLegacy

; 1337 : 				{
; 1338 : 					if (crc != 0xe54bc1b9)

  00563	3d b9 c1 4b e5	 cmp	 eax, -448020039		; e54bc1b9H

; 1339 : 						return FALSE;
; 1340 : 					nTestsPerformed++;

  00568	e9 ed fe ff ff	 jmp	 $LN248@TestLegacy
$LN7@TestLegacy:

; 1341 : 				}
; 1342 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  0056d	6a 10		 push	 16			; 00000010H
  0056f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00574	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00577	59		 pop	 ecx
  00578	33 d2		 xor	 edx, edx
  0057a	f3 a6		 repe cmpsb
  0057c	75 5f		 jne	 SHORT $LN40@TestLegacy

; 1343 : 				{
; 1344 : 					if (crc != 0x21cdb382)

  0057e	3d 82 b3 cd 21	 cmp	 eax, 567128962		; 21cdb382H

; 1345 : 						return FALSE;
; 1346 : 					nTestsPerformed++;
; 1347 : 				}
; 1348 : 				break;

  00583	eb 4c		 jmp	 SHORT $LN249@TestLegacy
$LN47@TestLegacy:

; 1251 : 			{
; 1252 : 			case LRW:		// Deprecated/legacy
; 1253 : 				if (strcmp (name, "AES") == 0)

  00585	6a 04		 push	 4
  00587	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0058c	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0058f	59		 pop	 ecx
  00590	33 d2		 xor	 edx, edx
  00592	f3 a6		 repe cmpsb
  00594	75 0a		 jne	 SHORT $LN46@TestLegacy

; 1254 : 				{
; 1255 : 					if (crc != 0x5ae1e3d8)

  00596	3d d8 e3 e1 5a	 cmp	 eax, 1524753368		; 5ae1e3d8H

; 1256 : 						return FALSE;
; 1257 : 					nTestsPerformed++;

  0059b	e9 ba fe ff ff	 jmp	 $LN248@TestLegacy
$LN46@TestLegacy:

; 1258 : 				}
; 1259 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  005a0	6a 09		 push	 9
  005a2	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  005a7	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  005aa	59		 pop	 ecx
  005ab	33 d2		 xor	 edx, edx
  005ad	f3 a6		 repe cmpsb
  005af	75 0a		 jne	 SHORT $LN43@TestLegacy

; 1260 : 				{
; 1261 : 					if (crc != 0x2738426f)

  005b1	3d 6f 42 38 27	 cmp	 eax, 657998447		; 2738426fH

; 1262 : 						return FALSE;
; 1263 : 					nTestsPerformed++;

  005b6	e9 9f fe ff ff	 jmp	 $LN248@TestLegacy
$LN43@TestLegacy:

; 1264 : 				}
; 1265 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  005bb	6a 14		 push	 20			; 00000014H
  005bd	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  005c2	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  005c5	59		 pop	 ecx
  005c6	33 d2		 xor	 edx, edx
  005c8	f3 a6		 repe cmpsb
  005ca	75 11		 jne	 SHORT $LN40@TestLegacy

; 1266 : 				{
; 1267 : 					if (crc != 0x14f2948a)

  005cc	3d 8a 94 f2 14	 cmp	 eax, 351442058		; 14f2948aH
$LN249@TestLegacy:
  005d1	0f 85 82 00 00
	00		 jne	 $LN193@TestLegacy

; 1268 : 						return FALSE;
; 1269 : 					nTestsPerformed++;

  005d7	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN40@TestLegacy:

; 1349 : 			}
; 1350 : 
; 1351 : 			if (crc == 0xb70b4c26)

  005dd	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  005e2	74 75		 je	 SHORT $LN193@TestLegacy
$LN199@TestLegacy:

; 1352 : 				return FALSE;
; 1353 : 
; 1354 : 			DecryptBuffer (buf, sizeof (buf), ci);

  005e4	53		 push	 ebx
  005e5	6a 00		 push	 0
  005e7	be 00 04 00 00	 mov	 esi, 1024		; 00000400H
  005ec	56		 push	 esi
  005ed	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005f3	50		 push	 eax
  005f4	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 1355 : 
; 1356 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  005f9	56		 push	 esi
  005fa	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 _GetCrc32@8
  00606	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  0060b	75 4c		 jne	 SHORT $LN193@TestLegacy

; 1357 : 				return FALSE;
; 1358 : 
; 1359 : 			nTestsPerformed++;

  0060d	ff 85 b8 fb ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
  00613	33 f6		 xor	 esi, esi
  00615	46		 inc	 esi
$LN132@TestLegacy:
  00616	ff 73 04	 push	 DWORD PTR [ebx+4]
  00619	ff 33		 push	 DWORD PTR [ebx]
  0061b	e8 00 00 00 00	 call	 _EAGetNextMode@8
$LN241@TestLegacy:
  00620	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00623	85 c0		 test	 eax, eax
  00625	0f 85 91 fa ff
	ff		 jne	 $LL238@TestLegacy
  0062b	ff 33		 push	 DWORD PTR [ebx]
  0062d	e8 00 00 00 00	 call	 _EAGetNext@4
  00632	89 03		 mov	 DWORD PTR [ebx], eax
  00634	85 c0		 test	 eax, eax
  00636	0f 85 3b fa ff
	ff		 jne	 $LL239@TestLegacy
$LN135@TestLegacy:

; 1360 : 		}
; 1361 : 	}
; 1362 : 	return (nTestsPerformed == 86);

  0063c	33 c0		 xor	 eax, eax
  0063e	83 bd b8 fb ff
	ff 56		 cmp	 DWORD PTR _nTestsPerformed$[ebp], 86 ; 00000056H
  00645	0f 94 c0	 sete	 al
$LN144@TestLegacy:

; 1363 : }

  00648	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0064b	5f		 pop	 edi
  0064c	5e		 pop	 esi
  0064d	33 cd		 xor	 ecx, ebp
  0064f	5b		 pop	 ebx
  00650	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00655	c9		 leave
  00656	c2 04 00	 ret	 4
$LN193@TestLegacy:

; 1062 : 			return FALSE;

  00659	33 c0		 xor	 eax, eax
  0065b	eb eb		 jmp	 SHORT $LN144@TestLegacy
_TestLegacySectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha512@0
EXTRN	_hmac_sha512@24:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_sha512@0
_TEXT	SEGMENT
_nTestsPerformed$ = -72					; size = 4
_digest$27680 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_sha512@0 PROC				; COMDAT

; 1587 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 48	 sub	 esp, 72			; 00000048H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	53		 push	 ebx
  00013	56		 push	 esi

; 1588 : 	unsigned int i;
; 1589 : 	int nTestsPerformed = 0;

  00014	33 db		 xor	 ebx, ebx
  00016	57		 push	 edi
  00017	89 5d b8	 mov	 DWORD PTR _nTestsPerformed$[ebp], ebx
$LL5@test_hmac_:

; 1590 : 
; 1591 : 	for (i = 0; i < sizeof (hmac_sha512_test_data) / sizeof(char *); i++)
; 1592 : 	{
; 1593 : 		char digest[SHA512_DIGESTSIZE];
; 1594 : 		hmac_sha512 (hmac_sha512_test_keys[i], (int) strlen (hmac_sha512_test_keys[i]), hmac_sha512_test_data[i], (int) strlen (hmac_sha512_test_data[i]), digest, SHA512_DIGESTSIZE);

  0001a	8b 83 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_sha512_test_data[ebx]
  00020	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL11@test_hmac_:
  00023	8a 08		 mov	 cl, BYTE PTR [eax]
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f9		 jne	 SHORT $LL11@test_hmac_
  0002a	2b c6		 sub	 eax, esi
  0002c	8b b3 00 00 00
	00		 mov	 esi, DWORD PTR _hmac_sha512_test_keys[ebx]
  00032	8b d0		 mov	 edx, eax
  00034	8b c6		 mov	 eax, esi
  00036	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL12@test_hmac_:
  00039	8a 08		 mov	 cl, BYTE PTR [eax]
  0003b	40		 inc	 eax
  0003c	84 c9		 test	 cl, cl
  0003e	75 f9		 jne	 SHORT $LL12@test_hmac_
  00040	6a 40		 push	 64			; 00000040H
  00042	8d 4d bc	 lea	 ecx, DWORD PTR _digest$27680[ebp]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	ff b3 00 00 00
	00		 push	 DWORD PTR _hmac_sha512_test_data[ebx]
  0004d	2b c7		 sub	 eax, edi
  0004f	50		 push	 eax
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _hmac_sha512@24

; 1595 : 		if (memcmp (digest, hmac_sha512_test_vectors[i], SHA512_DIGESTSIZE) != 0)

  00056	8b bb 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_sha512_test_vectors[ebx]
  0005c	6a 10		 push	 16			; 00000010H
  0005e	59		 pop	 ecx
  0005f	8d 75 bc	 lea	 esi, DWORD PTR _digest$27680[ebp]
  00062	33 c0		 xor	 eax, eax
  00064	f3 a7		 repe cmpsd
  00066	75 21		 jne	 SHORT $LN9@test_hmac_

; 1597 : 		else
; 1598 : 			nTestsPerformed++;

  00068	ff 45 b8	 inc	 DWORD PTR _nTestsPerformed$[ebp]
  0006b	83 c3 04	 add	 ebx, 4
  0006e	83 fb 18	 cmp	 ebx, 24			; 00000018H
  00071	72 a7		 jb	 SHORT $LL5@test_hmac_

; 1599 : 	}
; 1600 : 
; 1601 : 	return (nTestsPerformed == 6);

  00073	83 7d b8 06	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 6
  00077	0f 94 c0	 sete	 al
$LN6@test_hmac_:

; 1602 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	33 cd		 xor	 ecx, ebp
  00081	5b		 pop	 ebx
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c3		 ret	 0
$LN9@test_hmac_:

; 1596 : 			return FALSE;

  00089	33 c0		 xor	 eax, eax
  0008b	eb ed		 jmp	 SHORT $LN6@test_hmac_
_test_hmac_sha512@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha1@0
EXTRN	_hmac_sha1@24:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_sha1@0
_TEXT	SEGMENT
_nTestsPerformed$ = -28					; size = 4
_digest$27691 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_test_hmac_sha1@0 PROC					; COMDAT

; 1605 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	53		 push	 ebx
  00013	56		 push	 esi

; 1606 : 	// Deprecated/legacy
; 1607 : 
; 1608 : 	int nTestsPerformed = 0;

  00014	33 db		 xor	 ebx, ebx
  00016	57		 push	 edi
  00017	89 5d e4	 mov	 DWORD PTR _nTestsPerformed$[ebp], ebx
$LL5@test_hmac_@2:

; 1609 : 	int i;
; 1610 : 
; 1611 : 	for (i = 0; i < 3; i++)
; 1612 : 	{
; 1613 : 		char digest[SHA1_DIGESTSIZE];
; 1614 : 		hmac_sha1 (hmac_sha1_test_keys[i], (int) strlen (hmac_sha1_test_keys[i]), hmac_sha1_test_data[i], (int) strlen (hmac_sha1_test_data[i]), digest, SHA1_DIGESTSIZE);

  0001a	8b 83 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_sha1_test_data[ebx]
  00020	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL11@test_hmac_@2:
  00023	8a 08		 mov	 cl, BYTE PTR [eax]
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f9		 jne	 SHORT $LL11@test_hmac_@2
  0002a	2b c6		 sub	 eax, esi
  0002c	8b b3 00 00 00
	00		 mov	 esi, DWORD PTR _hmac_sha1_test_keys[ebx]
  00032	8b d0		 mov	 edx, eax
  00034	8b c6		 mov	 eax, esi
  00036	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL12@test_hmac_@2:
  00039	8a 08		 mov	 cl, BYTE PTR [eax]
  0003b	40		 inc	 eax
  0003c	84 c9		 test	 cl, cl
  0003e	75 f9		 jne	 SHORT $LL12@test_hmac_@2
  00040	6a 14		 push	 20			; 00000014H
  00042	8d 4d e8	 lea	 ecx, DWORD PTR _digest$27691[ebp]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	ff b3 00 00 00
	00		 push	 DWORD PTR _hmac_sha1_test_data[ebx]
  0004d	2b c7		 sub	 eax, edi
  0004f	50		 push	 eax
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _hmac_sha1@24

; 1615 : 		if (memcmp (digest, hmac_sha1_test_vectors[i], SHA1_DIGESTSIZE) != 0)

  00056	8b bb 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_sha1_test_vectors[ebx]
  0005c	6a 05		 push	 5
  0005e	59		 pop	 ecx
  0005f	8d 75 e8	 lea	 esi, DWORD PTR _digest$27691[ebp]
  00062	33 c0		 xor	 eax, eax
  00064	f3 a7		 repe cmpsd
  00066	75 21		 jne	 SHORT $LN9@test_hmac_@2

; 1617 : 		else
; 1618 : 			nTestsPerformed++;

  00068	ff 45 e4	 inc	 DWORD PTR _nTestsPerformed$[ebp]
  0006b	83 c3 04	 add	 ebx, 4
  0006e	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00071	7c a7		 jl	 SHORT $LL5@test_hmac_@2

; 1619 : 	}
; 1620 : 
; 1621 : 	return (nTestsPerformed == 3);

  00073	83 7d e4 03	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 3
  00077	0f 94 c0	 sete	 al
$LN6@test_hmac_@2:

; 1622 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	33 cd		 xor	 ecx, ebp
  00081	5b		 pop	 ebx
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c3		 ret	 0
$LN9@test_hmac_@2:

; 1616 : 			return FALSE;

  00089	33 c0		 xor	 eax, eax
  0008b	eb ed		 jmp	 SHORT $LN6@test_hmac_@2
_test_hmac_sha1@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_ripemd160@0
EXTRN	_hmac_ripemd160@20:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_ripemd160@0
_TEXT	SEGMENT
_nTestsPerformed$ = -28					; size = 4
_digest$27703 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_test_hmac_ripemd160@0 PROC				; COMDAT

; 1625 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	53		 push	 ebx
  00013	56		 push	 esi

; 1626 : 	int nTestsPerformed = 0;

  00014	33 db		 xor	 ebx, ebx
  00016	57		 push	 edi
  00017	89 5d e4	 mov	 DWORD PTR _nTestsPerformed$[ebp], ebx
$LL5@test_hmac_@3:

; 1627 : 	unsigned int i;
; 1628 : 
; 1629 : 	for (i = 0; i < sizeof (hmac_ripemd160_test_data) / sizeof(char *); i++)
; 1630 : 	{
; 1631 : 		char digest[RIPEMD160_DIGESTSIZE];
; 1632 : 		hmac_ripemd160 (hmac_ripemd160_test_keys[i], RIPEMD160_DIGESTSIZE, hmac_ripemd160_test_data[i], (int) strlen (hmac_ripemd160_test_data[i]), digest);

  0001a	8b b3 00 00 00
	00		 mov	 esi, DWORD PTR _hmac_ripemd160_test_data[ebx]
  00020	8b c6		 mov	 eax, esi
  00022	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL11@test_hmac_@3:
  00025	8a 08		 mov	 cl, BYTE PTR [eax]
  00027	40		 inc	 eax
  00028	84 c9		 test	 cl, cl
  0002a	75 f9		 jne	 SHORT $LL11@test_hmac_@3
  0002c	8d 4d e8	 lea	 ecx, DWORD PTR _digest$27703[ebp]
  0002f	51		 push	 ecx
  00030	2b c7		 sub	 eax, edi
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	6a 14		 push	 20			; 00000014H
  00036	ff b3 00 00 00
	00		 push	 DWORD PTR _hmac_ripemd160_test_keys[ebx]
  0003c	e8 00 00 00 00	 call	 _hmac_ripemd160@20

; 1633 : 		if (memcmp (digest, hmac_ripemd160_test_vectors[i], RIPEMD160_DIGESTSIZE) != 0)

  00041	8b bb 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_ripemd160_test_vectors[ebx]
  00047	6a 05		 push	 5
  00049	59		 pop	 ecx
  0004a	8d 75 e8	 lea	 esi, DWORD PTR _digest$27703[ebp]
  0004d	33 c0		 xor	 eax, eax
  0004f	f3 a7		 repe cmpsd
  00051	75 21		 jne	 SHORT $LN9@test_hmac_@3

; 1635 : 		else
; 1636 : 			nTestsPerformed++;

  00053	ff 45 e4	 inc	 DWORD PTR _nTestsPerformed$[ebp]
  00056	83 c3 04	 add	 ebx, 4
  00059	83 fb 08	 cmp	 ebx, 8
  0005c	72 bc		 jb	 SHORT $LL5@test_hmac_@3

; 1637 : 	}
; 1638 : 
; 1639 : 	return (nTestsPerformed == 2);

  0005e	83 7d e4 02	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 2
  00062	0f 94 c0	 sete	 al
$LN6@test_hmac_@3:

; 1640 : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	33 cd		 xor	 ecx, ebp
  0006c	5b		 pop	 ebx
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	c9		 leave
  00073	c3		 ret	 0
$LN9@test_hmac_@3:

; 1634 : 			return FALSE;

  00074	33 c0		 xor	 eax, eax
  00076	eb ed		 jmp	 SHORT $LN6@test_hmac_@3
_test_hmac_ripemd160@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_whirlpool@0
EXTRN	_hmac_whirlpool@24:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_whirlpool@0
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool@0 PROC				; COMDAT

; 1643 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 44	 sub	 esp, 68			; 00000044H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1644 : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 1645 : 
; 1646 : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_whirlpool_test_data
  00018	56		 push	 esi
  00019	8b c1		 mov	 eax, ecx
  0001b	57		 push	 edi
  0001c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL4@test_hmac_@4:
  0001f	8a 10		 mov	 dl, BYTE PTR [eax]
  00021	40		 inc	 eax
  00022	84 d2		 test	 dl, dl
  00024	75 f9		 jne	 SHORT $LL4@test_hmac_@4
  00026	6a 40		 push	 64			; 00000040H
  00028	8d 55 bc	 lea	 edx, DWORD PTR _digest$[ebp]
  0002b	52		 push	 edx
  0002c	2b c6		 sub	 eax, esi
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	6a 40		 push	 64			; 00000040H
  00032	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_whirlpool_test_key
  00038	e8 00 00 00 00	 call	 _hmac_whirlpool@24

; 1647 : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  0003d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_whirlpool_test_vectors
  00043	6a 10		 push	 16			; 00000010H
  00045	59		 pop	 ecx
  00046	33 c0		 xor	 eax, eax
  00048	8d 75 bc	 lea	 esi, DWORD PTR _digest$[ebp]
  0004b	f3 a7		 repe cmpsd

; 1648 : 		return FALSE;
; 1649 : 
; 1650 : 	return TRUE;
; 1651 : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	0f 94 c0	 sete	 al
  00053	5f		 pop	 edi
  00054	33 cd		 xor	 ecx, ebp
  00056	5e		 pop	 esi
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	c9		 leave
  0005d	c3		 ret	 0
_test_hmac_whirlpool@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
PUBLIC	_test_pkcs5@0
EXTRN	_derive_key_whirlpool@28:PROC
EXTRN	_derive_key_ripemd160@28:PROC
EXTRN	_derive_key_sha1@28:PROC
EXTRN	_derive_key_sha512@28:PROC
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ DB 'z'
	DB	'=|', 03H, 0e7H, '&k', 0f8H, '=x', 0fbH, ')', 0d2H, 'd', 01fH, 'V'
	DB	0eaH, 0f0H, 0e5H, 0f5H, 0ccH, 0c4H, ':1', 0a8H, 084H, 'p', 0bfH
	DB	0bdH, 'o', 08eH, 'x$Z', 0c0H, 0aH, 0f6H, 0faH, 0f0H, 0f6H, 0e9H
	DB	00H, 'G_s', 0ceH, 0e1H, 'C', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@ DB 'z=|', 03H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@ DB '\u', 0ceH, 0f0H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ DB '\'
	DB	'u', 0ceH, 0f0H, 01aH, 096H, 0dH, 0f7H, 'L', 0b6H, 0b4H, 09bH, 09eH
	DB	'8', 0e6H, 0b5H, ';', 011H, 080H, 0e3H, '/', 0f7H, 0e0H, 0ddH, 0aaH
	DB	0caH, 08fH, 081H, '''', 0f6H, 09fH, 'O', 01dH, 0c8H, '/H-', 0dbH
	DB	01aH, 0aH, 0caH, 090H, 0cbH, 080H, 0b9H, '.', 090H, 09eH, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
text$s	SEGMENT
??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ DB 013H
	DB	'd', 0aeH, 0f8H, 0dH, 0f5H, 'Wl0', 0d5H, 'qL', 0a7H, 'u?', 0fdH
	DB	00H, 0e5H, '%', 08bH, '9', 0c7H, 'D', 07fH, 0ceH, '#=', 08H, 'u'
	DB	0e0H, '/H', 0d6H, '0', 0d7H, 00H, 0b6H, '$', 0dbH, 0e0H, 'Z', 0d7H
	DB	'G', 0efH, 'R', 0caH, 0a6H, '4', 083H, 'G', 0e5H, 0cbH, 0e9H, 087H
	DB	0f1H, ' Yj', 0e6H, 0a9H, 0cfH, 'Qx', 0c6H, 0b6H, '#', 0a6H, 't'
	DB	0dH, 0e8H, 091H, 0beH, 01aH, 0d0H, '(', 0ccH, 0ceH, 016H, 098H
	DB	09aH, 0beH, 0fbH, 0dcH, 'x', 0c9H, 0e1H, '}rg', 0ceH, 0e1H, 'a'
	DB	'V_', 096H, 'h', 0e6H, 0e1H, 0ddH, 0f4H, 0bfH, 01bH, 080H, 0e0H
	DB	019H, 01cH, 0f4H, 0c4H, 0d3H, 0ddH, 0d5H, 0d5H, 'W-', 083H, 0c7H
	DB	0a3H, '7', 087H, 0f4H, 'N', 0e0H, 0f6H, 0d8H, 'me', 0dcH, 0a0H
	DB	'R', 0a3H, 013H, 0beH, 081H, 0fcH, '0', 0beH, '}iX4', 0b6H, 0ddH
	DB	'A', 0c6H, 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@ DB 013H, 'd', 0aeH, 0f8H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _test_pkcs5@0
_TEXT	SEGMENT
_dk$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5@0 PROC					; COMDAT

; 1654 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1655 : 	char dk[144];
; 1656 : 
; 1657 : 	/* HMAC-SHA-512 tests */
; 1658 : 	if (!test_hmac_sha512())

  00015	e8 00 00 00 00	 call	 _test_hmac_sha512@0
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $LN12@test_pkcs5
$LN23@test_pkcs5:

; 1659 : 		return FALSE;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 8a 01 00 00	 jmp	 $LN1@test_pkcs5
$LN12@test_pkcs5:

; 1660 : 
; 1661 : 	/* HMAC-SHA-1 tests (deprecated/legacy)  */
; 1662 : 	if (test_hmac_sha1() == FALSE)

  00025	e8 00 00 00 00	 call	 _test_hmac_sha1@0
  0002a	85 c0		 test	 eax, eax

; 1663 : 		return FALSE;

  0002c	74 f0		 je	 SHORT $LN23@test_pkcs5

; 1664 : 
; 1665 : 	/* HMAC-RIPEMD-160 tests */
; 1666 : 	if (test_hmac_ripemd160() == FALSE)

  0002e	e8 00 00 00 00	 call	 _test_hmac_ripemd160@0
  00033	85 c0		 test	 eax, eax

; 1667 : 		return FALSE;

  00035	74 e7		 je	 SHORT $LN23@test_pkcs5

; 1668 : 
; 1669 : 	/* HMAC-Whirlpool tests */
; 1670 : 	if (test_hmac_whirlpool() == FALSE)

  00037	e8 00 00 00 00	 call	 _test_hmac_whirlpool@0
  0003c	85 c0		 test	 eax, eax

; 1671 : 		return FALSE;

  0003e	74 de		 je	 SHORT $LN23@test_pkcs5
  00040	53		 push	 ebx
  00041	56		 push	 esi

; 1672 : 
; 1673 : 	/* PKCS-5 test 1 with HMAC-SHA-512 used as the PRF */
; 1674 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00042	6a 04		 push	 4
  00044	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0004a	50		 push	 eax
  0004b	6a 05		 push	 5
  0004d	6a 04		 push	 4
  0004f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00054	56		 push	 esi
  00055	6a 08		 push	 8
  00057	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 _derive_key_sha512@28

; 1675 : 	if (memcmp (dk, "\x13\x64\xae\xf8", 4) != 0)

  00062	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  00068	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
  0006d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0006f	74 07		 je	 SHORT $LN8@test_pkcs5

; 1676 : 		return FALSE;

  00071	33 c0		 xor	 eax, eax
  00073	e9 35 01 00 00	 jmp	 $LN19@test_pkcs5
$LN8@test_pkcs5:
  00078	57		 push	 edi

; 1677 : 
; 1678 : 	/* PKCS-5 test 2 with HMAC-SHA-512 used as the PRF (derives a key longer than the underlying
; 1679 : 	hash output size and block size) */
; 1680 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 144);

  00079	68 90 00 00 00	 push	 144			; 00000090H
  0007e	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00084	50		 push	 eax
  00085	6a 05		 push	 5
  00087	6a 04		 push	 4
  00089	56		 push	 esi
  0008a	6a 08		 push	 8
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 _derive_key_sha512@28

; 1681 : 	if (memcmp (dk, "\x13\x64\xae\xf8\x0d\xf5\x57\x6c\x30\xd5\x71\x4c\xa7\x75\x3f\xfd\x00\xe5\x25\x8b\x39\xc7\x44\x7f\xce\x23\x3d\x08\x75\xe0\x2f\x48\xd6\x30\xd7\x00\xb6\x24\xdb\xe0\x5a\xd7\x47\xef\x52\xca\xa6\x34\x83\x47\xe5\xcb\xe9\x87\xf1\x20\x59\x6a\xe6\xa9\xcf\x51\x78\xc6\xb6\x23\xa6\x74\x0d\xe8\x91\xbe\x1a\xd0\x28\xcc\xce\x16\x98\x9a\xbe\xfb\xdc\x78\xc9\xe1\x7d\x72\x67\xce\xe1\x61\x56\x5f\x96\x68\xe6\xe1\xdd\xf4\xbf\x1b\x80\xe0\x19\x1c\xf4\xc4\xd3\xdd\xd5\xd5\x57\x2d\x83\xc7\xa3\x37\x87\xf4\x4e\xe0\xf6\xd8\x6d\x65\xdc\xa0\x52\xa3\x13\xbe\x81\xfc\x30\xbe\x7d\x69\x58\x34\xb6\xdd\x41\xc6", 144) != 0)

  00092	6a 24		 push	 36			; 00000024H
  00094	59		 pop	 ecx
  00095	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
  0009a	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  000a0	33 c0		 xor	 eax, eax
  000a2	f3 a7		 repe cmpsd

; 1682 : 		return FALSE;

  000a4	0f 85 d3 00 00
	00		 jne	 $LN22@test_pkcs5

; 1683 : 
; 1684 : 	/* PKCS-5 test 1 with HMAC-SHA-1 (deprecated/legacy) used as the PRF (derives a key longer than the underlying hash) */
; 1685 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  000aa	6a 30		 push	 48			; 00000030H
  000ac	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000b2	50		 push	 eax
  000b3	6a 05		 push	 5
  000b5	6a 04		 push	 4
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000bc	6a 08		 push	 8
  000be	53		 push	 ebx
  000bf	e8 00 00 00 00	 call	 _derive_key_sha1@28

; 1686 : 	if (memcmp (dk, "\x5c\x75\xce\xf0\x1a\x96\x0d\xf7\x4c\xb6\xb4\x9b\x9e\x38\xe6\xb5\x3b\x11\x80\xe3\x2f\xf7\xe0\xdd\xaa\xca\x8f\x81\x27\xf6\x9f\x4f\x1d\xc8\x2f\x48\x2d\xdb\x1a\x0a\xca\x90\xcb\x80\xb9\x2e\x90\x9e", 48) != 0)

  000c4	6a 0c		 push	 12			; 0000000cH
  000c6	59		 pop	 ecx
  000c7	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
  000cc	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  000d2	33 c0		 xor	 eax, eax
  000d4	f3 a7		 repe cmpsd

; 1687 : 		return FALSE;

  000d6	0f 85 a1 00 00
	00		 jne	 $LN22@test_pkcs5

; 1688 : 
; 1689 : 	/* PKCS-5 test 2 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1690 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000dc	6a 04		 push	 4
  000de	5f		 pop	 edi
  000df	57		 push	 edi
  000e0	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000e6	50		 push	 eax
  000e7	6a 05		 push	 5
  000e9	57		 push	 edi
  000ea	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000ef	56		 push	 esi
  000f0	6a 08		 push	 8
  000f2	53		 push	 ebx
  000f3	e8 00 00 00 00	 call	 _derive_key_sha1@28

; 1691 : 	if (memcmp (dk, "\x5c\x75\xce\xf0", 4) != 0)

  000f8	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
  00103	3b 08		 cmp	 ecx, DWORD PTR [eax]

; 1692 : 		return FALSE;

  00105	75 76		 jne	 SHORT $LN22@test_pkcs5

; 1693 : 
; 1694 : #if 0	// This test is disabled because it uses 1200 iterations (to prevent startup slowdown)
; 1695 : 	/* PKCS-5 test 3 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1696 : 	derive_key_sha1 ("password", 8, "ATHENA.MIT.EDUraeburn", 21, 1200, dk, 16);
; 1697 : 	if (memcmp (dk, "\x5c\x08\xeb\x61\xfd\xf7\x1e\x4e\x4e\xc3\xcf\x6b\xa1\xf5\x51\x2b", 16) != 0)
; 1698 : 		return FALSE;
; 1699 : #endif
; 1700 : 
; 1701 : 	/* PKCS-5 test 1 with HMAC-RIPEMD-160 used as the PRF */
; 1702 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00107	57		 push	 edi
  00108	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0010e	50		 push	 eax
  0010f	6a 05		 push	 5
  00111	57		 push	 edi
  00112	56		 push	 esi
  00113	6a 08		 push	 8
  00115	53		 push	 ebx
  00116	e8 00 00 00 00	 call	 _derive_key_ripemd160@28

; 1703 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03", 4) != 0)

  0011b	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  00121	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
  00126	3b 08		 cmp	 ecx, DWORD PTR [eax]

; 1704 : 		return FALSE;

  00128	75 53		 jne	 SHORT $LN22@test_pkcs5

; 1705 : 
; 1706 : 	/* PKCS-5 test 2 with HMAC-RIPEMD-160 used as the PRF (derives a key longer than the underlying hash) */
; 1707 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  0012a	6a 30		 push	 48			; 00000030H
  0012c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00132	50		 push	 eax
  00133	6a 05		 push	 5
  00135	57		 push	 edi
  00136	56		 push	 esi
  00137	6a 08		 push	 8
  00139	53		 push	 ebx
  0013a	e8 00 00 00 00	 call	 _derive_key_ripemd160@28

; 1708 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03\xe7\x26\x6b\xf8\x3d\x78\xfb\x29\xd2\x64\x1f\x56\xea\xf0\xe5\xf5\xcc\xc4\x3a\x31\xa8\x84\x70\xbf\xbd\x6f\x8e\x78\x24\x5a\xc0\x0a\xf6\xfa\xf0\xf6\xe9\x00\x47\x5f\x73\xce\xe1\x43", 48) != 0)

  0013f	6a 0c		 push	 12			; 0000000cH
  00141	59		 pop	 ecx
  00142	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
  00147	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  0014d	33 c0		 xor	 eax, eax
  0014f	f3 a7		 repe cmpsd

; 1709 : 		return FALSE;

  00151	75 2a		 jne	 SHORT $LN22@test_pkcs5

; 1710 : 
; 1711 : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 1712 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00153	6a 04		 push	 4
  00155	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0015b	50		 push	 eax
  0015c	6a 05		 push	 5
  0015e	6a 04		 push	 4
  00160	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00165	56		 push	 esi
  00166	6a 08		 push	 8
  00168	53		 push	 ebx
  00169	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 1713 : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  0016e	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  00174	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
  00179	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0017b	74 04		 je	 SHORT $LN2@test_pkcs5
$LN22@test_pkcs5:

; 1714 : 		return FALSE;

  0017d	33 c0		 xor	 eax, eax
  0017f	eb 2b		 jmp	 SHORT $LN21@test_pkcs5
$LN2@test_pkcs5:

; 1715 : 
; 1716 : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 1717 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  00181	6a 60		 push	 96			; 00000060H
  00183	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00189	50		 push	 eax
  0018a	6a 05		 push	 5
  0018c	6a 04		 push	 4
  0018e	56		 push	 esi
  0018f	6a 08		 push	 8
  00191	53		 push	 ebx
  00192	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 1718 : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  00197	6a 18		 push	 24			; 00000018H
  00199	33 c0		 xor	 eax, eax
  0019b	59		 pop	 ecx
  0019c	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  001a1	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  001a7	f3 a7		 repe cmpsd
  001a9	0f 94 c0	 sete	 al
$LN21@test_pkcs5:
  001ac	5f		 pop	 edi
$LN19@test_pkcs5:
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
$LN1@test_pkcs5:

; 1719 : 		return FALSE;
; 1720 : 
; 1721 : 	return TRUE;
; 1722 : }

  001af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b2	33 cd		 xor	 ecx, ebp
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	c9		 leave
  001ba	c3		 ret	 0
_test_pkcs5@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TestSectorBufEncryption@4
EXTRN	_EAIsModeSupported@8:PROC
; Function compile flags: /Ogsp
;	COMDAT _TestSectorBufEncryption@4
_TEXT	SEGMENT
_unitNo$ = -2140					; size = 8
_writeOffset$ = -2132					; size = 8
_testCase$ = -2124					; size = 4
_nTestsPerformed$ = -2120				; size = 4
_buf$ = -2116						; size = 2048
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption@4 PROC				; COMDAT

; 638  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 5c 08 00
	00		 sub	 esp, 2140		; 0000085cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 639  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 4];
; 640  : 	unsigned int i;
; 641  : 	char name[64];
; 642  : 	unsigned __int32 crc;
; 643  : 	UINT64_STRUCT unitNo;
; 644  : 	uint32 nbrUnits;
; 645  : 	unsigned __int64 writeOffset;
; 646  : 	int testCase = 0;

  00015	83 a5 b4 f7 ff
	ff 00		 and	 DWORD PTR _testCase$[ebp], 0

; 647  : 	int nTestsPerformed = 0;

  0001c	83 a5 b8 f7 ff
	ff 00		 and	 DWORD PTR _nTestsPerformed$[ebp], 0
  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _ci$[ebp]

; 648  : 
; 649  : 	static unsigned char key1[] =
; 650  : 	{ 
; 651  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 652  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 653  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 654  : 	};
; 655  : 
; 656  : 	if (!TestLegacySectorBufEncryption (ci))

  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption@4
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 f1 05 00
	00		 je	 $LN149@TestSector
$LN148@TestSector:
  00035	56		 push	 esi

; 657  : 		return FALSE;
; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()

  00036	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1

; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  0003d	c7 85 ac f7 ff
	ff 00 fe ff ff	 mov	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  00047	c7 85 b0 f7 ff
	ff ff ff 01 00	 mov	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  00051	57		 push	 edi
$LL147@TestSector:

; 672  : 	{
; 673  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  00052	8b 85 ac f7 ff
	ff		 mov	 eax, DWORD PTR _writeOffset$[ebp]
  00058	8b 8d b0 f7 ff
	ff		 mov	 ecx, DWORD PTR _writeOffset$[ebp+4]
  0005e	0f ac c8 09	 shrd	 eax, ecx, 9
  00062	c1 e9 09	 shr	 ecx, 9
  00065	89 85 a4 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp], eax
  0006b	89 8d a8 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp+4], ecx

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00071	e8 00 00 00 00	 call	 _EAGetFirst@0
  00076	e9 91 03 00 00	 jmp	 $LN236@TestSector
$LL232@TestSector:

; 677  : 		{
; 678  : 			if (!EAIsModeSupported (ci->ea, ci->mode))

  0007b	ff 73 04	 push	 DWORD PTR [ebx+4]
  0007e	ff 33		 push	 DWORD PTR [ebx]
  00080	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  00085	85 c0		 test	 eax, eax
  00087	0f 84 78 03 00
	00		 je	 $LN143@TestSector

; 679  : 				continue;
; 680  : 
; 681  : 			EAGetName (name, ci->ea);

  0008d	ff 33		 push	 DWORD PTR [ebx]
  0008f	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _EAGetName@8

; 682  : 
; 683  : 			if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00098	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  000a1	ff 33		 push	 DWORD PTR [ebx]
  000a3	e8 00 00 00 00	 call	 _EAInit@12
  000a8	85 c0		 test	 eax, eax
  000aa	0f 85 85 05 00
	00		 jne	 $LN205@TestSector
  000b0	8d bb a8 42 00
	00		 lea	 edi, DWORD PTR [ebx+17064]
$LL139@TestSector:

; 684  : 				return FALSE;
; 685  : 
; 686  : 			for (i = 0; i < sizeof (ci->k2); i++)
; 687  : 				ci->k2[i] = (unsigned char) i;

  000b6	88 04 07	 mov	 BYTE PTR [edi+eax], al
  000b9	40		 inc	 eax
  000ba	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000bf	72 f5		 jb	 SHORT $LL139@TestSector

; 688  : 
; 689  : 			memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  000c1	6a 08		 push	 8
  000c3	59		 pop	 ecx
  000c4	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432

; 690  : 
; 691  : 			if (!EAInitMode (ci))

  000c9	53		 push	 ebx
  000ca	f3 a5		 rep movsd
  000cc	e8 00 00 00 00	 call	 _EAInitMode@4
  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 5c 05 00
	00		 je	 $LN205@TestSector

; 692  : 				return FALSE;
; 693  : 
; 694  : 			// Each data unit will contain the same plaintext
; 695  : 			for (i = 0; i < nbrUnits; i++)
; 696  : 			{
; 697  : 				memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 698  : 					XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 699  : 					ENCRYPTION_DATA_UNIT_SIZE);
; 700  : 			}
; 701  : 
; 702  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  000d9	53		 push	 ebx
  000da	6a 04		 push	 4
  000dc	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  000e2	50		 push	 eax
  000e3	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000e8	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  000ed	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  000f3	f3 a5		 rep movsd
  000f5	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000fb	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00100	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  00106	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  0010c	50		 push	 eax
  0010d	f3 a5		 rep movsd
  0010f	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 703  : 
; 704  : 			crc = GetCrc32 (buf, sizeof (buf));

  00114	68 00 08 00 00	 push	 2048			; 00000800H
  00119	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _GetCrc32@8

; 705  : 
; 706  : 			if (strcmp (name, "AES") == 0)

  00125	6a 04		 push	 4
  00127	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0012c	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0012f	59		 pop	 ecx
  00130	33 d2		 xor	 edx, edx
  00132	f3 a6		 repe cmpsb
  00134	75 69		 jne	 SHORT $LN132@TestSector

; 707  : 			{
; 708  : 				// Verify the ciphertext of the "moving" data unit using the IEEE test vector #14
; 709  : 				if (memcmp (XTS_vectors[XTS_TEST_COUNT-1].ciphertext,
; 710  : 					(unsigned char *) buf + testCase * ENCRYPTION_DATA_UNIT_SIZE,
; 711  : 					ENCRYPTION_DATA_UNIT_SIZE) != 0)

  00136	8b bd b4 f7 ff
	ff		 mov	 edi, DWORD PTR _testCase$[ebp]
  0013c	c1 e7 09	 shl	 edi, 9
  0013f	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00144	8d bc 3d bc f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+edi]
  0014b	be 7c 13 00 00	 mov	 esi, OFFSET _XTS_vectors+4988
  00150	33 d2		 xor	 edx, edx
  00152	f3 a7		 repe cmpsd
  00154	0f 85 db 04 00
	00		 jne	 $LN205@TestSector

; 712  : 				{
; 713  : 					return FALSE;
; 714  : 				}
; 715  : 
; 716  : 				// CRC of all data units in the buffer for each test case
; 717  : 				switch (testCase)

  0015a	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  00160	2b ca		 sub	 ecx, edx
  00162	74 31		 je	 SHORT $LN128@TestSector
  00164	49		 dec	 ecx
  00165	74 27		 je	 SHORT $LN126@TestSector
  00167	49		 dec	 ecx
  00168	74 1d		 je	 SHORT $LN124@TestSector
  0016a	49		 dec	 ecx
  0016b	0f 85 51 02 00
	00		 jne	 $LN45@TestSector

; 734  : 				case 3:
; 735  : 					if (crc != 0x10473dc9)

  00171	3d c9 3d 47 10	 cmp	 eax, 273104329		; 10473dc9H
$LN241@TestSector:
  00176	0f 85 b9 04 00
	00		 jne	 $LN205@TestSector

; 736  : 						return FALSE;
; 737  : 					nTestsPerformed++;

  0017c	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]

; 738  : 					break;

  00182	e9 46 02 00 00	 jmp	 $LN212@TestSector
$LN124@TestSector:

; 729  : 				case 2:
; 730  : 					if (crc != 0xe058f5a2)

  00187	3d a2 f5 58 e0	 cmp	 eax, -531040862		; e058f5a2H

; 731  : 						return FALSE;
; 732  : 					nTestsPerformed++;
; 733  : 					break;

  0018c	eb e8		 jmp	 SHORT $LN241@TestSector
$LN126@TestSector:

; 721  : 						return FALSE;
; 722  : 					nTestsPerformed++;
; 723  : 					break;
; 724  : 				case 1:
; 725  : 					if (crc != 0xea28ea34)

  0018e	3d 34 ea 28 ea	 cmp	 eax, -366417356		; ea28ea34H

; 726  : 						return FALSE;
; 727  : 					nTestsPerformed++;
; 728  : 					break;

  00193	eb e1		 jmp	 SHORT $LN241@TestSector
$LN128@TestSector:

; 718  : 				{
; 719  : 				case 0: 
; 720  : 					if (crc != 0x888f2990)

  00195	3d 90 29 8f 88	 cmp	 eax, -2003883632	; 888f2990H

; 739  : 				}
; 740  : 			}
; 741  : 			else if (strcmp (name, "Serpent") == 0)

  0019a	e9 17 02 00 00	 jmp	 $LN242@TestSector
$LN132@TestSector:
  0019f	6a 08		 push	 8
  001a1	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  001a6	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001a9	59		 pop	 ecx
  001aa	33 d2		 xor	 edx, edx
  001ac	f3 a6		 repe cmpsb
  001ae	75 36		 jne	 SHORT $LN119@TestSector

; 742  : 			{
; 743  : 				switch (testCase)

  001b0	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  001b6	2b ca		 sub	 ecx, edx
  001b8	74 22		 je	 SHORT $LN116@TestSector
  001ba	49		 dec	 ecx
  001bb	74 18		 je	 SHORT $LN114@TestSector
  001bd	49		 dec	 ecx
  001be	74 0e		 je	 SHORT $LN112@TestSector
  001c0	49		 dec	 ecx
  001c1	0f 85 fb 01 00
	00		 jne	 $LN45@TestSector

; 760  : 				case 3:
; 761  : 					if (crc != 0xb5263e0c)

  001c7	3d 0c 3e 26 b5	 cmp	 eax, -1255784948	; b5263e0cH

; 762  : 						return FALSE;
; 763  : 					nTestsPerformed++;
; 764  : 					break;

  001cc	eb a8		 jmp	 SHORT $LN241@TestSector
$LN112@TestSector:

; 755  : 				case 2:
; 756  : 					if (crc != 0xc7b9fca5)

  001ce	3d a5 fc b9 c7	 cmp	 eax, -944112475		; c7b9fca5H

; 757  : 						return FALSE;
; 758  : 					nTestsPerformed++;
; 759  : 					break;

  001d3	eb a1		 jmp	 SHORT $LN241@TestSector
$LN114@TestSector:

; 747  : 						return FALSE;
; 748  : 					nTestsPerformed++;
; 749  : 					break;
; 750  : 				case 1:
; 751  : 					if (crc != 0x357baaaa)

  001d5	3d aa aa 7b 35	 cmp	 eax, 897297066		; 357baaaaH

; 752  : 						return FALSE;
; 753  : 					nTestsPerformed++;
; 754  : 					break;

  001da	eb 9a		 jmp	 SHORT $LN241@TestSector
$LN116@TestSector:

; 744  : 				{
; 745  : 				case 0:
; 746  : 					if (crc != 0x7edfecb3)

  001dc	3d b3 ec df 7e	 cmp	 eax, 2128604339		; 7edfecb3H

; 765  : 				}
; 766  : 			}
; 767  : 			else if (strcmp (name, "Twofish") == 0)

  001e1	e9 d0 01 00 00	 jmp	 $LN242@TestSector
$LN119@TestSector:
  001e6	6a 08		 push	 8
  001e8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  001ed	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  001f0	59		 pop	 ecx
  001f1	33 d2		 xor	 edx, edx
  001f3	f3 a6		 repe cmpsb
  001f5	75 3f		 jne	 SHORT $LN107@TestSector

; 768  : 			{
; 769  : 				switch (testCase)

  001f7	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  001fd	2b ca		 sub	 ecx, edx
  001ff	74 2b		 je	 SHORT $LN104@TestSector
  00201	49		 dec	 ecx
  00202	74 1e		 je	 SHORT $LN102@TestSector
  00204	49		 dec	 ecx
  00205	74 11		 je	 SHORT $LN100@TestSector
  00207	49		 dec	 ecx
  00208	0f 85 b4 01 00
	00		 jne	 $LN45@TestSector

; 786  : 				case 3:
; 787  : 					if (crc != 0xb1c45759)

  0020e	3d 59 57 c4 b1	 cmp	 eax, -1312532647	; b1c45759H

; 788  : 						return FALSE;
; 789  : 					nTestsPerformed++;
; 790  : 					break;

  00213	e9 5e ff ff ff	 jmp	 $LN241@TestSector
$LN100@TestSector:

; 781  : 				case 2:
; 782  : 					if (crc != 0x6bee346d)

  00218	3d 6d 34 ee 6b	 cmp	 eax, 1810773101		; 6bee346dH

; 783  : 						return FALSE;
; 784  : 					nTestsPerformed++;
; 785  : 					break;

  0021d	e9 54 ff ff ff	 jmp	 $LN241@TestSector
$LN102@TestSector:

; 773  : 						return FALSE;
; 774  : 					nTestsPerformed++;
; 775  : 					break;
; 776  : 				case 1:
; 777  : 					if (crc != 0x2895cc47)

  00222	3d 47 cc 95 28	 cmp	 eax, 680905799		; 2895cc47H

; 778  : 						return FALSE;
; 779  : 					nTestsPerformed++;
; 780  : 					break;

  00227	e9 4a ff ff ff	 jmp	 $LN241@TestSector
$LN104@TestSector:

; 770  : 				{
; 771  : 				case 0:
; 772  : 					if (crc != 0x91525124)

  0022c	3d 24 51 52 91	 cmp	 eax, -1856876252	; 91525124H

; 791  : 				}
; 792  : 			}
; 793  : 			else if (strcmp (name, "AES-Twofish") == 0)

  00231	e9 80 01 00 00	 jmp	 $LN242@TestSector
$LN107@TestSector:
  00236	6a 0c		 push	 12			; 0000000cH
  00238	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  0023d	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00240	59		 pop	 ecx
  00241	33 d2		 xor	 edx, edx
  00243	f3 a6		 repe cmpsb
  00245	75 3f		 jne	 SHORT $LN95@TestSector

; 794  : 			{
; 795  : 				switch (testCase)

  00247	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  0024d	2b ca		 sub	 ecx, edx
  0024f	74 2b		 je	 SHORT $LN92@TestSector
  00251	49		 dec	 ecx
  00252	74 1e		 je	 SHORT $LN90@TestSector
  00254	49		 dec	 ecx
  00255	74 11		 je	 SHORT $LN88@TestSector
  00257	49		 dec	 ecx
  00258	0f 85 64 01 00
	00		 jne	 $LN45@TestSector

; 812  : 				case 3:
; 813  : 					if (crc != 0xf16fd8c5)

  0025e	3d c5 d8 6f f1	 cmp	 eax, -244328251		; f16fd8c5H

; 814  : 						return FALSE;
; 815  : 					nTestsPerformed++;
; 816  : 					break;

  00263	e9 0e ff ff ff	 jmp	 $LN241@TestSector
$LN88@TestSector:

; 807  : 				case 2:
; 808  : 					if (crc != 0x88db8de5)

  00268	3d e5 8d db 88	 cmp	 eax, -1998877211	; 88db8de5H

; 809  : 						return FALSE;
; 810  : 					nTestsPerformed++;
; 811  : 					break;

  0026d	e9 04 ff ff ff	 jmp	 $LN241@TestSector
$LN90@TestSector:

; 799  : 						return FALSE;
; 800  : 					nTestsPerformed++;
; 801  : 					break;
; 802  : 				case 1:
; 803  : 					if (crc != 0x69052c4c)

  00272	3d 4c 2c 05 69	 cmp	 eax, 1761946700		; 69052c4cH

; 804  : 						return FALSE;
; 805  : 					nTestsPerformed++;
; 806  : 					break;

  00277	e9 fa fe ff ff	 jmp	 $LN241@TestSector
$LN92@TestSector:

; 796  : 				{
; 797  : 				case 0:
; 798  : 					if (crc != 0x6cea7fa2)

  0027c	3d a2 7f ea 6c	 cmp	 eax, 1827307426		; 6cea7fa2H

; 817  : 				}
; 818  : 			}
; 819  : 			else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00281	e9 30 01 00 00	 jmp	 $LN242@TestSector
$LN95@TestSector:
  00286	6a 14		 push	 20			; 00000014H
  00288	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0028d	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00290	59		 pop	 ecx
  00291	33 d2		 xor	 edx, edx
  00293	f3 a6		 repe cmpsb
  00295	75 3f		 jne	 SHORT $LN83@TestSector

; 820  : 			{
; 821  : 				switch (testCase)

  00297	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  0029d	2b ca		 sub	 ecx, edx
  0029f	74 2b		 je	 SHORT $LN80@TestSector
  002a1	49		 dec	 ecx
  002a2	74 1e		 je	 SHORT $LN78@TestSector
  002a4	49		 dec	 ecx
  002a5	74 11		 je	 SHORT $LN76@TestSector
  002a7	49		 dec	 ecx
  002a8	0f 85 14 01 00
	00		 jne	 $LN45@TestSector

; 838  : 				case 3:
; 839  : 					if (crc != 0xdadedff7)

  002ae	3d f7 df de da	 cmp	 eax, -622927881		; dadedff7H

; 840  : 						return FALSE;
; 841  : 					nTestsPerformed++;
; 842  : 					break;

  002b3	e9 be fe ff ff	 jmp	 $LN241@TestSector
$LN76@TestSector:

; 833  : 				case 2:
; 834  : 					if (crc != 0xdf0ea03e)

  002b8	3d 3e a0 0e df	 cmp	 eax, -552689602		; df0ea03eH

; 835  : 						return FALSE;
; 836  : 					nTestsPerformed++;
; 837  : 					break;

  002bd	e9 b4 fe ff ff	 jmp	 $LN241@TestSector
$LN78@TestSector:

; 825  : 						return FALSE;
; 826  : 					nTestsPerformed++;
; 827  : 					break;
; 828  : 				case 1:
; 829  : 					if (crc != 0xdbf76412)

  002c2	3d 12 64 f7 db	 cmp	 eax, -604543982		; dbf76412H

; 830  : 						return FALSE;
; 831  : 					nTestsPerformed++;
; 832  : 					break;

  002c7	e9 aa fe ff ff	 jmp	 $LN241@TestSector
$LN80@TestSector:

; 822  : 				{
; 823  : 				case 0:
; 824  : 					if (crc != 0xa2d7d82a)

  002cc	3d 2a d8 d7 a2	 cmp	 eax, -1562912726	; a2d7d82aH

; 843  : 				}
; 844  : 			}
; 845  : 			else if (strcmp (name, "Serpent-AES") == 0)

  002d1	e9 e0 00 00 00	 jmp	 $LN242@TestSector
$LN83@TestSector:
  002d6	6a 0c		 push	 12			; 0000000cH
  002d8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  002dd	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002e0	59		 pop	 ecx
  002e1	33 d2		 xor	 edx, edx
  002e3	f3 a6		 repe cmpsb
  002e5	75 3f		 jne	 SHORT $LN71@TestSector

; 846  : 			{
; 847  : 				switch (testCase)

  002e7	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  002ed	2b ca		 sub	 ecx, edx
  002ef	74 2b		 je	 SHORT $LN68@TestSector
  002f1	49		 dec	 ecx
  002f2	74 1e		 je	 SHORT $LN66@TestSector
  002f4	49		 dec	 ecx
  002f5	74 11		 je	 SHORT $LN64@TestSector
  002f7	49		 dec	 ecx
  002f8	0f 85 c4 00 00
	00		 jne	 $LN45@TestSector

; 864  : 				case 3:
; 865  : 					if (crc != 0x8a79fa2c)

  002fe	3d 2c fa 79 8a	 cmp	 eax, -1971717588	; 8a79fa2cH

; 866  : 						return FALSE;
; 867  : 					nTestsPerformed++;
; 868  : 					break;

  00303	e9 6e fe ff ff	 jmp	 $LN241@TestSector
$LN64@TestSector:

; 859  : 				case 2:
; 860  : 					if (crc != 0x39f83cd9)

  00308	3d d9 3c f8 39	 cmp	 eax, 972569817		; 39f83cd9H

; 861  : 						return FALSE;
; 862  : 					nTestsPerformed++;
; 863  : 					break;

  0030d	e9 64 fe ff ff	 jmp	 $LN241@TestSector
$LN66@TestSector:

; 851  : 						return FALSE;
; 852  : 					nTestsPerformed++;
; 853  : 					break;
; 854  : 				case 1:
; 855  : 					if (crc != 0x0e5717d2)

  00312	3d d2 17 57 0e	 cmp	 eax, 240588754		; 0e5717d2H

; 856  : 						return FALSE;
; 857  : 					nTestsPerformed++;
; 858  : 					break;

  00317	e9 5a fe ff ff	 jmp	 $LN241@TestSector
$LN68@TestSector:

; 848  : 				{
; 849  : 				case 0:
; 850  : 					if (crc != 0x6dd133b3)

  0031c	3d b3 33 d1 6d	 cmp	 eax, 1842426803		; 6dd133b3H

; 869  : 				}
; 870  : 			}
; 871  : 			else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00321	e9 90 00 00 00	 jmp	 $LN242@TestSector
$LN71@TestSector:
  00326	6a 14		 push	 20			; 00000014H
  00328	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  0032d	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00330	59		 pop	 ecx
  00331	33 d2		 xor	 edx, edx
  00333	f3 a6		 repe cmpsb
  00335	75 38		 jne	 SHORT $LN59@TestSector

; 872  : 			{
; 873  : 				switch (testCase)

  00337	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  0033d	2b ca		 sub	 ecx, edx
  0033f	74 27		 je	 SHORT $LN56@TestSector
  00341	49		 dec	 ecx
  00342	74 1a		 je	 SHORT $LN54@TestSector
  00344	49		 dec	 ecx
  00345	74 0d		 je	 SHORT $LN52@TestSector
  00347	49		 dec	 ecx
  00348	75 78		 jne	 SHORT $LN45@TestSector

; 890  : 				case 3:
; 891  : 					if (crc != 0xcac7bdc7)

  0034a	3d c7 bd c7 ca	 cmp	 eax, -892879417		; cac7bdc7H

; 892  : 						return FALSE;
; 893  : 					nTestsPerformed++;
; 894  : 					break;

  0034f	e9 22 fe ff ff	 jmp	 $LN241@TestSector
$LN52@TestSector:

; 885  : 				case 2:
; 886  : 					if (crc != 0x2cc1301a)

  00354	3d 1a 30 c1 2c	 cmp	 eax, 750858266		; 2cc1301aH

; 887  : 						return FALSE;
; 888  : 					nTestsPerformed++;
; 889  : 					break;

  00359	e9 18 fe ff ff	 jmp	 $LN241@TestSector
$LN54@TestSector:

; 877  : 						return FALSE;
; 878  : 					nTestsPerformed++;
; 879  : 					break;
; 880  : 				case 1:
; 881  : 					if (crc != 0x3ae89e7f)

  0035e	3d 7f 9e e8 3a	 cmp	 eax, 988323455		; 3ae89e7fH

; 882  : 						return FALSE;
; 883  : 					nTestsPerformed++;
; 884  : 					break;

  00363	e9 0e fe ff ff	 jmp	 $LN241@TestSector
$LN56@TestSector:

; 874  : 				{
; 875  : 				case 0:
; 876  : 					if (crc != 0xe536daf8)

  00368	3d f8 da 36 e5	 cmp	 eax, -449389832		; e536daf8H

; 895  : 				}
; 896  : 			}
; 897  : 			else if (strcmp (name, "Twofish-Serpent") == 0)

  0036d	eb 47		 jmp	 SHORT $LN242@TestSector
$LN59@TestSector:
  0036f	6a 10		 push	 16			; 00000010H
  00371	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00376	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00379	59		 pop	 ecx
  0037a	33 d2		 xor	 edx, edx
  0037c	f3 a6		 repe cmpsb
  0037e	75 42		 jne	 SHORT $LN45@TestSector

; 898  : 			{
; 899  : 				switch (testCase)

  00380	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  00386	2b ca		 sub	 ecx, edx
  00388	74 27		 je	 SHORT $LN44@TestSector
  0038a	49		 dec	 ecx
  0038b	74 1a		 je	 SHORT $LN42@TestSector
  0038d	49		 dec	 ecx
  0038e	74 0d		 je	 SHORT $LN40@TestSector
  00390	49		 dec	 ecx
  00391	75 2f		 jne	 SHORT $LN45@TestSector

; 916  : 				case 3:
; 917  : 					if (crc != 0xe95196cb)

  00393	3d cb 96 51 e9	 cmp	 eax, -380528949		; e95196cbH

; 918  : 						return FALSE;
; 919  : 					nTestsPerformed++;
; 920  : 					break;

  00398	e9 d9 fd ff ff	 jmp	 $LN241@TestSector
$LN40@TestSector:

; 911  : 				case 2:
; 912  : 					if (crc != 0x8dd13796)

  0039d	3d 96 37 d1 8d	 cmp	 eax, -1915668586	; 8dd13796H

; 913  : 						return FALSE;
; 914  : 					nTestsPerformed++;
; 915  : 					break;

  003a2	e9 cf fd ff ff	 jmp	 $LN241@TestSector
$LN42@TestSector:

; 905  : 					break;
; 906  : 				case 1:
; 907  : 					if (crc != 0x8a201780)

  003a7	3d 80 17 20 8a	 cmp	 eax, -1977608320	; 8a201780H

; 908  : 						return FALSE;
; 909  : 					nTestsPerformed++;
; 910  : 					break;

  003ac	e9 c5 fd ff ff	 jmp	 $LN241@TestSector
$LN44@TestSector:

; 900  : 				{
; 901  : 				case 0:
; 902  : 					if (crc != 0x2686c859)

  003b1	3d 59 c8 86 26	 cmp	 eax, 646367321		; 2686c859H
$LN242@TestSector:
  003b6	0f 85 79 02 00
	00		 jne	 $LN205@TestSector

; 903  : 						return FALSE;
; 904  : 					nTestsPerformed++;

  003bc	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN45@TestSector:

; 921  : 				}
; 922  : 			}
; 923  : 
; 924  : 			if (crc == 0x9f5edd58)

  003c2	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  003c7	0f 84 68 02 00
	00		 je	 $LN205@TestSector
$LN212@TestSector:

; 925  : 				return FALSE;
; 926  : 
; 927  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  003cd	53		 push	 ebx
  003ce	6a 04		 push	 4
  003d0	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  003d6	50		 push	 eax
  003d7	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 928  : 
; 929  : 			if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  003e3	68 00 08 00 00	 push	 2048			; 00000800H
  003e8	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 _GetCrc32@8
  003f4	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  003f9	0f 85 36 02 00
	00		 jne	 $LN205@TestSector

; 930  : 				return FALSE;
; 931  : 
; 932  : 			nTestsPerformed++;

  003ff	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN143@TestSector:

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00405	ff 33		 push	 DWORD PTR [ebx]
  00407	e8 00 00 00 00	 call	 _EAGetNext@4
$LN236@TestSector:
  0040c	89 03		 mov	 DWORD PTR [ebx], eax
  0040e	85 c0		 test	 eax, eax
  00410	0f 85 65 fc ff
	ff		 jne	 $LL232@TestSector

; 933  : 		}
; 934  : 		testCase++;

  00416	ff 85 b4 f7 ff
	ff		 inc	 DWORD PTR _testCase$[ebp]
  0041c	81 85 ac f7 ff
	ff 00 fe ff ff	 add	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  00426	83 95 b0 f7 ff
	ff ff		 adc	 DWORD PTR _writeOffset$[ebp+4], -1
  0042d	81 bd b0 f7 ff
	ff ff ff 01 00	 cmp	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  00437	0f 87 15 fc ff
	ff		 ja	 $LL147@TestSector

; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  0043d	72 10		 jb	 SHORT $LN145@TestSector
  0043f	81 bd ac f7 ff
	ff 00 f6 ff ff	 cmp	 DWORD PTR _writeOffset$[ebp], -2560 ; fffff600H
  00449	0f 87 03 fc ff
	ff		 ja	 $LL147@TestSector
$LN145@TestSector:

; 935  : 	}
; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0044f	e8 00 00 00 00	 call	 _EAGetFirst@0
  00454	e9 b5 01 00 00	 jmp	 $LN239@TestSector
$LL233@TestSector:

; 943  : 	{
; 944  : 		if (!EAIsModeSupported (ci->ea, ci->mode))

  00459	ff 73 04	 push	 DWORD PTR [ebx+4]
  0045c	ff 33		 push	 DWORD PTR [ebx]
  0045e	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  00463	85 c0		 test	 eax, eax
  00465	0f 84 9c 01 00
	00		 je	 $LN33@TestSector

; 945  : 			continue;
; 946  : 
; 947  : 		EAGetName (name, ci->ea);

  0046b	ff 33		 push	 DWORD PTR [ebx]
  0046d	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 _EAGetName@8

; 948  : 
; 949  : 		if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00476	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00479	50		 push	 eax
  0047a	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  0047f	ff 33		 push	 DWORD PTR [ebx]
  00481	e8 00 00 00 00	 call	 _EAInit@12
  00486	85 c0		 test	 eax, eax
  00488	0f 85 a7 01 00
	00		 jne	 $LN205@TestSector

; 950  : 			return FALSE;
; 951  : 
; 952  : 		memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  0048e	6a 08		 push	 8
  00490	59		 pop	 ecx
  00491	8d bb a8 42 00
	00		 lea	 edi, DWORD PTR [ebx+17064]
  00497	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432

; 953  : 
; 954  : 		if (!EAInitMode (ci))

  0049c	53		 push	 ebx
  0049d	f3 a5		 rep movsd
  0049f	e8 00 00 00 00	 call	 _EAInitMode@4
  004a4	85 c0		 test	 eax, eax
  004a6	0f 84 89 01 00
	00		 je	 $LN205@TestSector

; 955  : 			return FALSE;
; 956  : 
; 957  : 		// Each data unit will contain the same plaintext
; 958  : 		for (i = 0; i < nbrUnits; i++)
; 959  : 		{
; 960  : 			memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 961  : 				XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 962  : 				ENCRYPTION_DATA_UNIT_SIZE);
; 963  : 		}
; 964  : 
; 965  : 		EncryptBuffer (buf, sizeof (buf), ci);

  004ac	53		 push	 ebx
  004ad	6a 00		 push	 0
  004af	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  004b4	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  004b9	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  004bf	f3 a5		 rep movsd
  004c1	68 00 08 00 00	 push	 2048			; 00000800H
  004c6	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  004cc	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  004d1	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  004d7	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  004dd	50		 push	 eax
  004de	f3 a5		 rep movsd
  004e0	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 966  : 
; 967  : 		crc = GetCrc32 (buf, sizeof (buf));

  004e5	68 00 08 00 00	 push	 2048			; 00000800H
  004ea	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  004f0	50		 push	 eax
  004f1	e8 00 00 00 00	 call	 _GetCrc32@8

; 968  : 
; 969  : 		if (strcmp (name, "AES") == 0)

  004f6	6a 04		 push	 4
  004f8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  004fd	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00500	59		 pop	 ecx
  00501	33 d2		 xor	 edx, edx
  00503	f3 a6		 repe cmpsb
  00505	75 16		 jne	 SHORT $LN25@TestSector

; 970  : 		{
; 971  : 			if (crc != 0x33b91fab)

  00507	3d ab 1f b9 33	 cmp	 eax, 867770283		; 33b91fabH
$LN243@TestSector:
  0050c	0f 85 23 01 00
	00		 jne	 $LN205@TestSector

; 972  : 				return FALSE;
; 973  : 			nTestsPerformed++;

  00512	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
  00518	e9 bb 00 00 00	 jmp	 $LN213@TestSector
$LN25@TestSector:

; 974  : 		}
; 975  : 		else if (strcmp (name, "Serpent") == 0)

  0051d	6a 08		 push	 8
  0051f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00524	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00527	59		 pop	 ecx
  00528	33 d2		 xor	 edx, edx
  0052a	f3 a6		 repe cmpsb
  0052c	75 07		 jne	 SHORT $LN22@TestSector

; 976  : 		{
; 977  : 			if (crc != 0x3494d480)

  0052e	3d 80 d4 94 34	 cmp	 eax, 882168960		; 3494d480H

; 978  : 				return FALSE;
; 979  : 			nTestsPerformed++;

  00533	eb d7		 jmp	 SHORT $LN243@TestSector
$LN22@TestSector:

; 980  : 		}
; 981  : 		else if (strcmp (name, "Twofish") == 0)

  00535	6a 08		 push	 8
  00537	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  0053c	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0053f	59		 pop	 ecx
  00540	33 d2		 xor	 edx, edx
  00542	f3 a6		 repe cmpsb
  00544	75 07		 jne	 SHORT $LN19@TestSector

; 982  : 		{
; 983  : 			if (crc != 0xc4d65b46)

  00546	3d 46 5b d6 c4	 cmp	 eax, -992584890		; c4d65b46H

; 984  : 				return FALSE;
; 985  : 			nTestsPerformed++;

  0054b	eb bf		 jmp	 SHORT $LN243@TestSector
$LN19@TestSector:

; 986  : 		}
; 987  : 		else if (strcmp (name, "AES-Twofish") == 0)

  0054d	6a 0c		 push	 12			; 0000000cH
  0054f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00554	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00557	59		 pop	 ecx
  00558	33 d2		 xor	 edx, edx
  0055a	f3 a6		 repe cmpsb
  0055c	75 07		 jne	 SHORT $LN16@TestSector

; 988  : 		{
; 989  : 			if (crc != 0x14ce7385)

  0055e	3d 85 73 ce 14	 cmp	 eax, 349074309		; 14ce7385H

; 990  : 				return FALSE;
; 991  : 			nTestsPerformed++;

  00563	eb a7		 jmp	 SHORT $LN243@TestSector
$LN16@TestSector:

; 992  : 		}
; 993  : 		else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00565	6a 14		 push	 20			; 00000014H
  00567	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0056c	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  0056f	59		 pop	 ecx
  00570	33 d2		 xor	 edx, edx
  00572	f3 a6		 repe cmpsb
  00574	75 07		 jne	 SHORT $LN13@TestSector

; 994  : 		{
; 995  : 			if (crc != 0x0ec81bf7)

  00576	3d f7 1b c8 0e	 cmp	 eax, 247995383		; 0ec81bf7H

; 996  : 				return FALSE;
; 997  : 			nTestsPerformed++;

  0057b	eb 8f		 jmp	 SHORT $LN243@TestSector
$LN13@TestSector:

; 998  : 		}
; 999  : 		else if (strcmp (name, "Serpent-AES") == 0)

  0057d	6a 0c		 push	 12			; 0000000cH
  0057f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00584	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00587	59		 pop	 ecx
  00588	33 d2		 xor	 edx, edx
  0058a	f3 a6		 repe cmpsb
  0058c	75 0a		 jne	 SHORT $LN10@TestSector

; 1000 : 		{
; 1001 : 			if (crc != 0x42f919ad)

  0058e	3d ad 19 f9 42	 cmp	 eax, 1123621293		; 42f919adH

; 1002 : 				return FALSE;
; 1003 : 			nTestsPerformed++;

  00593	e9 74 ff ff ff	 jmp	 $LN243@TestSector
$LN10@TestSector:

; 1004 : 		}
; 1005 : 		else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00598	6a 14		 push	 20			; 00000014H
  0059a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  0059f	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  005a2	59		 pop	 ecx
  005a3	33 d2		 xor	 edx, edx
  005a5	f3 a6		 repe cmpsb
  005a7	75 0a		 jne	 SHORT $LN7@TestSector

; 1006 : 		{
; 1007 : 			if (crc != 0x208d5c58)

  005a9	3d 58 5c 8d 20	 cmp	 eax, 546135128		; 208d5c58H

; 1008 : 				return FALSE;
; 1009 : 			nTestsPerformed++;

  005ae	e9 59 ff ff ff	 jmp	 $LN243@TestSector
$LN7@TestSector:

; 1010 : 		}
; 1011 : 		else if (strcmp (name, "Twofish-Serpent") == 0)

  005b3	6a 10		 push	 16			; 00000010H
  005b5	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  005ba	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  005bd	59		 pop	 ecx
  005be	33 d2		 xor	 edx, edx
  005c0	f3 a6		 repe cmpsb
  005c2	75 0d		 jne	 SHORT $LN4@TestSector

; 1012 : 		{
; 1013 : 			if (crc != 0xbe78cec1)

  005c4	3d c1 ce 78 be	 cmp	 eax, -1099379007	; be78cec1H
  005c9	75 6a		 jne	 SHORT $LN205@TestSector

; 1014 : 				return FALSE;
; 1015 : 			nTestsPerformed++;

  005cb	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN4@TestSector:

; 1016 : 		}
; 1017 : 
; 1018 : 		if (crc == 0x9f5edd58)

  005d1	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  005d6	74 5d		 je	 SHORT $LN205@TestSector
$LN213@TestSector:

; 1019 : 			return FALSE;
; 1020 : 
; 1021 : 		DecryptBuffer (buf, sizeof (buf), ci);

  005d8	53		 push	 ebx
  005d9	6a 00		 push	 0
  005db	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
  005e0	56		 push	 esi
  005e1	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005e7	50		 push	 eax
  005e8	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 1022 : 
; 1023 : 		if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  005ed	56		 push	 esi
  005ee	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005f4	50		 push	 eax
  005f5	e8 00 00 00 00	 call	 _GetCrc32@8
  005fa	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  005ff	75 34		 jne	 SHORT $LN205@TestSector

; 1025 : 
; 1026 : 		nTestsPerformed++;

  00601	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN33@TestSector:

; 935  : 	}
; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00607	ff 33		 push	 DWORD PTR [ebx]
  00609	e8 00 00 00 00	 call	 _EAGetNext@4
$LN239@TestSector:
  0060e	89 03		 mov	 DWORD PTR [ebx], eax
  00610	85 c0		 test	 eax, eax
  00612	0f 85 41 fe ff
	ff		 jne	 $LL233@TestSector

; 1027 : 	}
; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);

  00618	33 c0		 xor	 eax, eax
  0061a	83 bd b8 f7 ff
	ff 50		 cmp	 DWORD PTR _nTestsPerformed$[ebp], 80 ; 00000050H
  00621	0f 94 c0	 sete	 al
$LN234@TestSector:
  00624	5f		 pop	 edi
  00625	5e		 pop	 esi
$LN149@TestSector:

; 1030 : }

  00626	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00629	33 cd		 xor	 ecx, ebp
  0062b	5b		 pop	 ebx
  0062c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00631	c9		 leave
  00632	c2 04 00	 ret	 4
$LN205@TestSector:

; 1024 : 			return FALSE;

  00635	33 c0		 xor	 eax, eax
  00637	eb eb		 jmp	 SHORT $LN234@TestSector
_TestSectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_crypto_close@4:PROC
EXTRN	_crc32_selftests@0:PROC
EXTRN	_DecipherBlocks@16:PROC
EXTRN	_EncipherBlocks@16:PROC
EXTRN	_DecipherBlock@12:PROC
EXTRN	_EncipherBlock@12:PROC
EXTRN	_BlowfishEncryptLE@16:PROC
EXTRN	_MirrorBytes32@4:PROC
EXTRN	_crypto_open@0:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT _DoAutoTestAlgorithms@0
_TEXT	SEGMENT
_ci$ = -1092						; size = 4
_bFailed$ = -1088					; size = 4
_i$ = -1084						; size = 4
tv842 = -1080						; size = 4
tv771 = -1080						; size = 4
tv726 = -1080						; size = 4
tv687 = -1080						; size = 4
tv654 = -1080						; size = 4
tv618 = -1080						; size = 4
_origCrc$27640 = -1080					; size = 4
_testData$27639 = -1076					; size = 1024
_key$ = -52						; size = 32
_tmp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_DoAutoTestAlgorithms@0 PROC				; COMDAT

; 1367 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 44 04 00
	00		 sub	 esp, 1092		; 00000444H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi

; 1368 : 	PCRYPTO_INFO ci;
; 1369 : 	char key[32];
; 1370 : 	unsigned char tmp[16];
; 1371 : 	BOOL bFailed = FALSE;

  00016	33 f6		 xor	 esi, esi
  00018	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi

; 1372 : 	int i;
; 1373 : 
; 1374 : 	ci = crypto_open ();

  0001e	e8 00 00 00 00	 call	 _crypto_open@0
  00023	89 85 bc fb ff
	ff		 mov	 DWORD PTR _ci$[ebp], eax

; 1375 : 	if (!ci)

  00029	3b c6		 cmp	 eax, esi
  0002b	75 07		 jne	 SHORT $LN45@DoAutoTest

; 1376 : 		return FALSE;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 12 05 00 00	 jmp	 $LN46@DoAutoTest
$LN45@DoAutoTest:
  00034	53		 push	 ebx
  00035	57		 push	 edi

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  00036	68 68 44 00 00	 push	 17512			; 00004468H
  0003b	56		 push	 esi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset

; 1379 : 
; 1380 : 	/* Blowfish (deprecated/legacy) */
; 1381 : 
; 1382 : 	for (i=0;i<BF_TEST_COUNT;i++)

  00042	89 b5 c4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], esi
  00048	be 08 00 00 00	 mov	 esi, OFFSET _bf_ecb_vectors+8
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	89 b5 c8 fb ff
	ff		 mov	 DWORD PTR tv618[ebp], esi
  00056	bb 00 00 00 00	 mov	 ebx, OFFSET _ks_tmp
  0005b	eb 06		 jmp	 SHORT $LN44@DoAutoTest
$LL94@DoAutoTest:

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  0005d	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv618[ebp]
$LN44@DoAutoTest:

; 1383 : 	{		
; 1384 : 		memcpy(key, bf_ecb_vectors[i].key, 8);

  00063	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00066	89 45 cc	 mov	 DWORD PTR _key$[ebp], eax
  00069	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0006c	89 45 d0	 mov	 DWORD PTR _key$[ebp+4], eax

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);

  0006f	8b 06		 mov	 eax, DWORD PTR [esi]
  00071	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax
  00074	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00077	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

  0007a	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  0007d	50		 push	 eax
  0007e	6a 08		 push	 8
  00080	53		 push	 ebx
  00081	e8 00 00 00 00	 call	 _BlowfishSetKey@12

; 1387 : 
; 1388 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  00086	ff 75 ec	 push	 DWORD PTR _tmp$[ebp]
  00089	e8 00 00 00 00	 call	 _MirrorBytes32@4

; 1389 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  0008e	ff 75 f0	 push	 DWORD PTR _tmp$[ebp+4]
  00091	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax
  00094	e8 00 00 00 00	 call	 _MirrorBytes32@4

; 1390 : 
; 1391 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  00099	6a 01		 push	 1
  0009b	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax
  0009e	53		 push	 ebx
  0009f	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  000a2	50		 push	 eax
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1392 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,0);

  000a9	6a 00		 push	 0
  000ab	53		 push	 ebx
  000ac	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  000af	50		 push	 eax
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1393 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000b6	6a 01		 push	 1
  000b8	53		 push	 ebx
  000b9	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  000bc	50		 push	 eax
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1394 : 
; 1395 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  000c3	ff 75 ec	 push	 DWORD PTR _tmp$[ebp]
  000c6	e8 00 00 00 00	 call	 _MirrorBytes32@4

; 1396 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  000cb	ff 75 f0	 push	 DWORD PTR _tmp$[ebp+4]
  000ce	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax
  000d1	e8 00 00 00 00	 call	 _MirrorBytes32@4
  000d6	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1397 : 
; 1398 : 		if (memcmp(bf_ecb_vectors[i].ciphertext,tmp,8)!=0)

  000d9	6a 02		 push	 2
  000db	83 c6 08	 add	 esi, 8
  000de	59		 pop	 ecx
  000df	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  000e2	33 c0		 xor	 eax, eax
  000e4	f3 a7		 repe cmpsd
  000e6	75 1d		 jne	 SHORT $LN48@DoAutoTest
  000e8	83 85 c8 fb ff
	ff 18		 add	 DWORD PTR tv618[ebp], 24 ; 00000018H
  000ef	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  000f5	81 bd c8 fb ff
	ff 38 03 00 00	 cmp	 DWORD PTR tv618[ebp], OFFSET _bf_ecb_vectors+824
  000ff	0f 8c 58 ff ff
	ff		 jl	 $LL94@DoAutoTest

; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

$LN48@DoAutoTest:

; 1399 : 			break;
; 1400 : 	}
; 1401 : 
; 1402 : 	if (i != BF_TEST_COUNT)

  00105	83 bd c4 fb ff
	ff 22		 cmp	 DWORD PTR _i$[ebp], 34	; 00000022H
  0010c	74 0a		 je	 SHORT $LN40@DoAutoTest

; 1403 : 		bFailed = TRUE;

  0010e	c7 85 c0 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFailed$[ebp], 1
$LN40@DoAutoTest:

; 1404 : 
; 1405 : 	/* CAST5 (deprecated/legacy) */
; 1406 : 
; 1407 : 	for (i=0;i<CAST_TEST_COUNT;i++)

  00118	83 a5 c4 fb ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  0011f	b8 10 00 00 00	 mov	 eax, OFFSET _cast_ecb_vectors+16
  00124	89 85 c8 fb ff
	ff		 mov	 DWORD PTR tv654[ebp], eax
  0012a	eb 06		 jmp	 SHORT $LN39@DoAutoTest
$LL95@DoAutoTest:
  0012c	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR tv654[ebp]
$LN39@DoAutoTest:

; 1408 : 	{			
; 1409 : 		int cipher = CAST;
; 1410 : 		memcpy(key, cast_ecb_vectors[i].key, 16);
; 1411 : 		memcpy(tmp, cast_ecb_vectors[i].plaintext, 8);

  00132	8b 08		 mov	 ecx, DWORD PTR [eax]
  00134	8d 70 f0	 lea	 esi, DWORD PTR [eax-16]
  00137	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013a	8d 7d cc	 lea	 edi, DWORD PTR _key$[ebp]
  0013d	a5		 movsd
  0013e	a5		 movsd

; 1412 : 		CipherInit2(cipher, key, ks_tmp, 16);

  0013f	6a 10		 push	 16			; 00000010H
  00141	53		 push	 ebx
  00142	a5		 movsd
  00143	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax
  00146	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  00149	50		 push	 eax
  0014a	6a 05		 push	 5
  0014c	a5		 movsd
  0014d	5e		 pop	 esi
  0014e	56		 push	 esi
  0014f	89 4d ec	 mov	 DWORD PTR _tmp$[ebp], ecx
  00152	e8 00 00 00 00	 call	 _CipherInit2@16

; 1413 : 
; 1414 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00157	53		 push	 ebx
  00158	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  0015b	50		 push	 eax
  0015c	56		 push	 esi
  0015d	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1415 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00162	53		 push	 ebx
  00163	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00166	50		 push	 eax
  00167	56		 push	 esi
  00168	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1416 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0016d	53		 push	 ebx
  0016e	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00171	50		 push	 eax
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1417 : 
; 1418 : 		if (memcmp(cast_ecb_vectors[i].ciphertext, tmp,8)!=0)

  00178	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv654[ebp]
  0017e	6a 02		 push	 2
  00180	83 c6 08	 add	 esi, 8
  00183	59		 pop	 ecx
  00184	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  00187	33 c0		 xor	 eax, eax
  00189	f3 a7		 repe cmpsd
  0018b	75 19		 jne	 SHORT $LN68@DoAutoTest
  0018d	83 85 c8 fb ff
	ff 20		 add	 DWORD PTR tv654[ebp], 32 ; 00000020H
  00194	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  0019a	81 bd c8 fb ff
	ff 30 00 00 00	 cmp	 DWORD PTR tv654[ebp], OFFSET _cast_ecb_vectors+48
  001a4	7c 86		 jl	 SHORT $LL95@DoAutoTest
$LN68@DoAutoTest:

; 1419 : 			break;
; 1420 : 	}
; 1421 : 
; 1422 : 	if (i!=CAST_TEST_COUNT)

  001a6	33 c0		 xor	 eax, eax
  001a8	40		 inc	 eax
  001a9	39 85 c4 fb ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  001af	74 06		 je	 SHORT $LN35@DoAutoTest

; 1423 : 		bFailed = TRUE;

  001b1	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], eax
$LN35@DoAutoTest:

; 1424 : 
; 1425 : 
; 1426 : 	/* Triple DES (TECB, EDE) - deprecated/legacy */
; 1427 : 
; 1428 : 	for (i = 0; i < TRIPLEDES_TEST_COUNT; i++)

  001b7	83 a5 c4 fb ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  001be	b8 18 00 00 00	 mov	 eax, OFFSET _tripledes_vectors+24
  001c3	89 85 c8 fb ff
	ff		 mov	 DWORD PTR tv687[ebp], eax
  001c9	eb 06		 jmp	 SHORT $LN34@DoAutoTest
$LL96@DoAutoTest:
  001cb	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR tv687[ebp]
$LN34@DoAutoTest:

; 1429 : 	{			
; 1430 : 		int cipher = TRIPLEDES;
; 1431 : 		memcpy(key, tripledes_vectors[i].key, sizeof(tripledes_vectors->key));

  001d1	6a 06		 push	 6
  001d3	59		 pop	 ecx
  001d4	8d 70 e8	 lea	 esi, DWORD PTR [eax-24]
  001d7	8d 7d cc	 lea	 edi, DWORD PTR _key$[ebp]
  001da	f3 a5		 rep movsd

; 1432 : 		memcpy(tmp, tripledes_vectors[i].plaintext, sizeof(tripledes_vectors->plaintext));

  001dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001de	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e1	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1433 : 
; 1434 : 		CipherInit(cipher, key, ks_tmp);

  001e4	53		 push	 ebx
  001e5	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  001e8	50		 push	 eax
  001e9	6a 06		 push	 6
  001eb	89 4d ec	 mov	 DWORD PTR _tmp$[ebp], ecx
  001ee	e8 00 00 00 00	 call	 _CipherInit@12

; 1435 : 
; 1436 : 		EncipherBlock(cipher, tmp, ks_tmp);

  001f3	53		 push	 ebx
  001f4	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  001f7	50		 push	 eax
  001f8	6a 06		 push	 6
  001fa	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1437 : 		if (memcmp(tripledes_vectors[i].ciphertext, tmp, sizeof(tripledes_vectors->ciphertext)) != 0)

  001ff	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv687[ebp]
  00205	6a 02		 push	 2
  00207	83 c6 08	 add	 esi, 8
  0020a	59		 pop	 ecx
  0020b	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  0020e	33 c0		 xor	 eax, eax
  00210	f3 a7		 repe cmpsd
  00212	75 37		 jne	 SHORT $LN69@DoAutoTest

; 1438 : 			break;
; 1439 : 
; 1440 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00214	53		 push	 ebx
  00215	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00218	50		 push	 eax
  00219	6a 06		 push	 6
  0021b	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1441 : 		if (memcmp(tripledes_vectors[i].plaintext, tmp, sizeof(tripledes_vectors->plaintext)) != 0)

  00220	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv687[ebp]
  00226	6a 02		 push	 2
  00228	59		 pop	 ecx
  00229	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  0022c	33 c0		 xor	 eax, eax
  0022e	f3 a7		 repe cmpsd
  00230	75 19		 jne	 SHORT $LN69@DoAutoTest
  00232	83 85 c8 fb ff
	ff 28		 add	 DWORD PTR tv687[ebp], 40 ; 00000028H
  00239	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  0023f	81 bd c8 fb ff
	ff 40 00 00 00	 cmp	 DWORD PTR tv687[ebp], OFFSET _tripledes_vectors+64
  00249	7c 80		 jl	 SHORT $LL96@DoAutoTest
$LN69@DoAutoTest:

; 1442 : 			break;
; 1443 : 	}
; 1444 : 	if (i != TRIPLEDES_TEST_COUNT)

  0024b	33 c0		 xor	 eax, eax
  0024d	40		 inc	 eax
  0024e	39 85 c4 fb ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  00254	74 06		 je	 SHORT $LN29@DoAutoTest

; 1445 : 		bFailed = TRUE;

  00256	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], eax
$LN29@DoAutoTest:

; 1446 : 
; 1447 : 
; 1448 : 	/* AES */
; 1449 : 
; 1450 : 	for (i = 0; i < AES_TEST_COUNT; i++)

  0025c	83 a5 c4 fb ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  00263	c7 85 c8 fb ff
	ff 20 00 00 00	 mov	 DWORD PTR tv726[ebp], OFFSET _aes_ecb_vectors+32
$LL97@DoAutoTest:

; 1451 : 	{			
; 1452 : 		int cipher = AES;
; 1453 : 		memcpy(key, aes_ecb_vectors[i].key, 32);

  0026d	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR tv726[ebp]
  00273	6a 08		 push	 8
  00275	59		 pop	 ecx
  00276	8d 70 e0	 lea	 esi, DWORD PTR [eax-32]
  00279	8d 7d cc	 lea	 edi, DWORD PTR _key$[ebp]
  0027c	f3 a5		 rep movsd

; 1454 : 		memcpy(tmp, aes_ecb_vectors[i].plaintext, 16);

  0027e	8b f0		 mov	 esi, eax
  00280	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  00283	a5		 movsd
  00284	a5		 movsd

; 1455 : 		CipherInit(cipher, key, ks_tmp);

  00285	53		 push	 ebx
  00286	a5		 movsd
  00287	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  0028a	50		 push	 eax
  0028b	6a 01		 push	 1
  0028d	a5		 movsd
  0028e	e8 00 00 00 00	 call	 _CipherInit@12

; 1456 : 
; 1457 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00293	53		 push	 ebx
  00294	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00297	50		 push	 eax
  00298	6a 01		 push	 1
  0029a	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1458 : 		if (memcmp(aes_ecb_vectors[i].ciphertext, tmp, 16) != 0)

  0029f	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv726[ebp]
  002a5	6a 04		 push	 4
  002a7	83 c6 10	 add	 esi, 16			; 00000010H
  002aa	59		 pop	 ecx
  002ab	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  002ae	33 c0		 xor	 eax, eax
  002b0	f3 a7		 repe cmpsd
  002b2	75 37		 jne	 SHORT $LN71@DoAutoTest

; 1459 : 			break;
; 1460 : 
; 1461 : 		DecipherBlock(cipher, tmp, ks_tmp);

  002b4	53		 push	 ebx
  002b5	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  002b8	50		 push	 eax
  002b9	6a 01		 push	 1
  002bb	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1462 : 		if (memcmp(aes_ecb_vectors[i].plaintext, tmp, 16) != 0)

  002c0	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv726[ebp]
  002c6	6a 04		 push	 4
  002c8	59		 pop	 ecx
  002c9	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  002cc	33 c0		 xor	 eax, eax
  002ce	f3 a7		 repe cmpsd
  002d0	75 19		 jne	 SHORT $LN71@DoAutoTest
  002d2	83 85 c8 fb ff
	ff 40		 add	 DWORD PTR tv726[ebp], 64 ; 00000040H
  002d9	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  002df	81 bd c8 fb ff
	ff 60 00 00 00	 cmp	 DWORD PTR tv726[ebp], OFFSET _aes_ecb_vectors+96
  002e9	7c 82		 jl	 SHORT $LL97@DoAutoTest
$LN71@DoAutoTest:

; 1463 : 			break;
; 1464 : 	}
; 1465 : 	if (i != AES_TEST_COUNT)

  002eb	33 ff		 xor	 edi, edi
  002ed	47		 inc	 edi
  002ee	39 bd c4 fb ff
	ff		 cmp	 DWORD PTR _i$[ebp], edi
  002f4	74 06		 je	 SHORT $LN23@DoAutoTest

; 1466 : 		bFailed = TRUE;

  002f6	89 bd c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], edi
$LN23@DoAutoTest:

; 1467 : 
; 1468 : 	// AES EncipherBlocks()/DecipherBlocks()
; 1469 : 	{
; 1470 : 		byte testData[1024];
; 1471 : 		uint32 origCrc;
; 1472 : 		size_t i;
; 1473 : 
; 1474 : 		for (i = 0; i < sizeof (testData); ++i)

  002fc	33 c0		 xor	 eax, eax
  002fe	be 00 04 00 00	 mov	 esi, 1024		; 00000400H
$LL22@DoAutoTest:

; 1475 : 		{
; 1476 : 			testData[i] = (byte) i;

  00303	88 84 05 cc fb
	ff ff		 mov	 BYTE PTR _testData$27639[ebp+eax], al
  0030a	40		 inc	 eax
  0030b	3b c6		 cmp	 eax, esi
  0030d	72 f4		 jb	 SHORT $LL22@DoAutoTest

; 1477 : 		}
; 1478 : 
; 1479 : 		origCrc = GetCrc32 (testData, sizeof (testData));

  0030f	56		 push	 esi
  00310	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 _GetCrc32@8
  0031c	89 85 c8 fb ff
	ff		 mov	 DWORD PTR _origCrc$27640[ebp], eax

; 1480 : 
; 1481 : 		CipherInit (AES, testData, ks_tmp);

  00322	53		 push	 ebx
  00323	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  00329	50		 push	 eax
  0032a	57		 push	 edi
  0032b	e8 00 00 00 00	 call	 _CipherInit@12

; 1482 : 		EncipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00330	57		 push	 edi
  00331	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  00336	8b c8		 mov	 ecx, eax
  00338	33 d2		 xor	 edx, edx
  0033a	8b c6		 mov	 eax, esi
  0033c	f7 f1		 div	 ecx
  0033e	50		 push	 eax
  0033f	53		 push	 ebx
  00340	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  00346	50		 push	 eax
  00347	57		 push	 edi
  00348	e8 00 00 00 00	 call	 _EncipherBlocks@16

; 1483 : 
; 1484 : 		if (GetCrc32 (testData, sizeof (testData)) != 0xb5cd5631)

  0034d	56		 push	 esi
  0034e	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 _GetCrc32@8
  0035a	3d 31 56 cd b5	 cmp	 eax, -1244834255	; b5cd5631H
  0035f	74 06		 je	 SHORT $LN19@DoAutoTest

; 1485 : 			bFailed = TRUE;

  00361	89 bd c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], edi
$LN19@DoAutoTest:

; 1486 : 
; 1487 : 		DecipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00367	57		 push	 edi
  00368	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  0036d	8b c8		 mov	 ecx, eax
  0036f	33 d2		 xor	 edx, edx
  00371	8b c6		 mov	 eax, esi
  00373	f7 f1		 div	 ecx
  00375	50		 push	 eax
  00376	53		 push	 ebx
  00377	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  0037d	50		 push	 eax
  0037e	57		 push	 edi
  0037f	e8 00 00 00 00	 call	 _DecipherBlocks@16

; 1488 : 
; 1489 : 		if (origCrc != GetCrc32 (testData, sizeof (testData)))

  00384	56		 push	 esi
  00385	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _testData$27639[ebp]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _GetCrc32@8
  00391	39 85 c8 fb ff
	ff		 cmp	 DWORD PTR _origCrc$27640[ebp], eax
  00397	74 06		 je	 SHORT $LN18@DoAutoTest

; 1490 : 			bFailed = TRUE;

  00399	89 bd c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], edi
$LN18@DoAutoTest:

; 1491 : 	}
; 1492 : 
; 1493 : 	/* Serpent */
; 1494 : 
; 1495 : 	for (i = 0; i < SERPENT_TEST_COUNT; i++)

  0039f	83 a5 c4 fb ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  003a6	c7 85 c8 fb ff
	ff 20 00 00 00	 mov	 DWORD PTR tv771[ebp], OFFSET _serpent_vectors+32
$LL98@DoAutoTest:

; 1496 : 	{			
; 1497 : 		int cipher = SERPENT;
; 1498 : 		memcpy(key, serpent_vectors[i].key, 32);

  003b0	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR tv771[ebp]
  003b6	6a 08		 push	 8
  003b8	59		 pop	 ecx
  003b9	8d 70 e0	 lea	 esi, DWORD PTR [eax-32]
  003bc	8d 7d cc	 lea	 edi, DWORD PTR _key$[ebp]
  003bf	f3 a5		 rep movsd

; 1499 : 		memcpy(tmp, serpent_vectors[i].plaintext, 16);

  003c1	8b f0		 mov	 esi, eax
  003c3	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  003c6	a5		 movsd
  003c7	a5		 movsd

; 1500 : 		CipherInit(cipher, key, ks_tmp);

  003c8	53		 push	 ebx
  003c9	a5		 movsd
  003ca	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  003cd	50		 push	 eax
  003ce	6a 02		 push	 2
  003d0	a5		 movsd
  003d1	e8 00 00 00 00	 call	 _CipherInit@12

; 1501 : 
; 1502 : 		EncipherBlock(cipher, tmp, ks_tmp);

  003d6	53		 push	 ebx
  003d7	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  003da	50		 push	 eax
  003db	6a 02		 push	 2
  003dd	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1503 : 		if (memcmp(serpent_vectors[i].ciphertext, tmp, 16) != 0)

  003e2	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv771[ebp]
  003e8	6a 04		 push	 4
  003ea	83 c6 10	 add	 esi, 16			; 00000010H
  003ed	59		 pop	 ecx
  003ee	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  003f1	33 c0		 xor	 eax, eax
  003f3	f3 a7		 repe cmpsd
  003f5	75 37		 jne	 SHORT $LN73@DoAutoTest

; 1504 : 			break;
; 1505 : 
; 1506 : 		DecipherBlock(cipher, tmp, ks_tmp);

  003f7	53		 push	 ebx
  003f8	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  003fb	50		 push	 eax
  003fc	6a 02		 push	 2
  003fe	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1507 : 		if (memcmp(serpent_vectors[i].plaintext, tmp, 16) != 0)

  00403	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv771[ebp]
  00409	6a 04		 push	 4
  0040b	59		 pop	 ecx
  0040c	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  0040f	33 c0		 xor	 eax, eax
  00411	f3 a7		 repe cmpsd
  00413	75 19		 jne	 SHORT $LN73@DoAutoTest
  00415	83 85 c8 fb ff
	ff 40		 add	 DWORD PTR tv771[ebp], 64 ; 00000040H
  0041c	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  00422	81 bd c8 fb ff
	ff 60 00 00 00	 cmp	 DWORD PTR tv771[ebp], OFFSET _serpent_vectors+96
  0042c	7c 82		 jl	 SHORT $LL98@DoAutoTest
$LN73@DoAutoTest:

; 1508 : 			break;
; 1509 : 	}
; 1510 : 	if (i != SERPENT_TEST_COUNT)

  0042e	33 c0		 xor	 eax, eax
  00430	40		 inc	 eax
  00431	39 85 c4 fb ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  00437	74 06		 je	 SHORT $LN12@DoAutoTest

; 1511 : 		bFailed = TRUE;

  00439	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], eax
$LN12@DoAutoTest:

; 1512 : 
; 1513 : 
; 1514 : 	/* Twofish */
; 1515 : 
; 1516 : 	for (i = 0; i < TWOFISH_TEST_COUNT; i++)

  0043f	83 a5 c4 fb ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  00446	c7 85 c8 fb ff
	ff 20 00 00 00	 mov	 DWORD PTR tv842[ebp], OFFSET _twofish_vectors+32
$LL99@DoAutoTest:

; 1517 : 	{			
; 1518 : 		int cipher = TWOFISH;
; 1519 : 		memcpy(key, twofish_vectors[i].key, 32);

  00450	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR tv842[ebp]
  00456	6a 08		 push	 8
  00458	59		 pop	 ecx
  00459	8d 70 e0	 lea	 esi, DWORD PTR [eax-32]
  0045c	8d 7d cc	 lea	 edi, DWORD PTR _key$[ebp]
  0045f	f3 a5		 rep movsd

; 1520 : 		memcpy(tmp, twofish_vectors[i].plaintext, 16);

  00461	8b f0		 mov	 esi, eax
  00463	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  00466	a5		 movsd
  00467	a5		 movsd

; 1521 : 		CipherInit(cipher, key, ks_tmp);

  00468	53		 push	 ebx
  00469	a5		 movsd
  0046a	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  0046d	50		 push	 eax
  0046e	6a 03		 push	 3
  00470	a5		 movsd
  00471	e8 00 00 00 00	 call	 _CipherInit@12

; 1522 : 
; 1523 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00476	53		 push	 ebx
  00477	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  0047a	50		 push	 eax
  0047b	6a 03		 push	 3
  0047d	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1524 : 		if (memcmp(twofish_vectors[i].ciphertext, tmp, 16) != 0)

  00482	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv842[ebp]
  00488	6a 04		 push	 4
  0048a	83 c6 10	 add	 esi, 16			; 00000010H
  0048d	59		 pop	 ecx
  0048e	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  00491	33 c0		 xor	 eax, eax
  00493	f3 a7		 repe cmpsd
  00495	75 37		 jne	 SHORT $LN75@DoAutoTest

; 1525 : 			break;
; 1526 : 
; 1527 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00497	53		 push	 ebx
  00498	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  0049b	50		 push	 eax
  0049c	6a 03		 push	 3
  0049e	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1528 : 		if (memcmp(twofish_vectors[i].plaintext, tmp, 16) != 0)

  004a3	8b b5 c8 fb ff
	ff		 mov	 esi, DWORD PTR tv842[ebp]
  004a9	6a 04		 push	 4
  004ab	59		 pop	 ecx
  004ac	8d 7d ec	 lea	 edi, DWORD PTR _tmp$[ebp]
  004af	33 c0		 xor	 eax, eax
  004b1	f3 a7		 repe cmpsd
  004b3	75 19		 jne	 SHORT $LN75@DoAutoTest
  004b5	83 85 c8 fb ff
	ff 40		 add	 DWORD PTR tv842[ebp], 64 ; 00000040H
  004bc	ff 85 c4 fb ff
	ff		 inc	 DWORD PTR _i$[ebp]
  004c2	81 bd c8 fb ff
	ff 60 00 00 00	 cmp	 DWORD PTR tv842[ebp], OFFSET _twofish_vectors+96
  004cc	7c 82		 jl	 SHORT $LL99@DoAutoTest
$LN75@DoAutoTest:

; 1529 : 			break;
; 1530 : 	}
; 1531 : 	if (i != TWOFISH_TEST_COUNT)

  004ce	33 f6		 xor	 esi, esi
  004d0	46		 inc	 esi
  004d1	39 b5 c4 fb ff
	ff		 cmp	 DWORD PTR _i$[ebp], esi
  004d7	74 06		 je	 SHORT $LN100@DoAutoTest

; 1532 : 		bFailed = TRUE;

  004d9	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN100@DoAutoTest:

; 1533 : 
; 1534 : 	
; 1535 : 	/* PKCS #5 and HMACs */
; 1536 : 	if (!test_pkcs5 ())

  004df	e8 00 00 00 00	 call	 _test_pkcs5@0
  004e4	85 c0		 test	 eax, eax
  004e6	75 06		 jne	 SHORT $LN5@DoAutoTest

; 1537 : 		bFailed = TRUE;

  004e8	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN5@DoAutoTest:

; 1538 : 
; 1539 : 	/* CRC-32 */
; 1540 : 	if (!crc32_selftests ())

  004ee	e8 00 00 00 00	 call	 _crc32_selftests@0
  004f3	85 c0		 test	 eax, eax
  004f5	75 06		 jne	 SHORT $LN4@DoAutoTest

; 1541 : 		bFailed = TRUE;

  004f7	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN4@DoAutoTest:

; 1542 : 
; 1543 : 	/* GF multiplicator */
; 1544 : #if 0
; 1545 : 	if (!GfMulSelfTest ())
; 1546 : 		bFailed = TRUE;
; 1547 : #endif
; 1548 : 
; 1549 : 	/* XTS-AES */
; 1550 : 	if (!XTSAesTest (ci))

  004fd	8b bd bc fb ff
	ff		 mov	 edi, DWORD PTR _ci$[ebp]
  00503	57		 push	 edi
  00504	e8 00 00 00 00	 call	 _XTSAesTest@4
  00509	85 c0		 test	 eax, eax
  0050b	75 06		 jne	 SHORT $LN3@DoAutoTest

; 1551 : 		bFailed = TRUE;

  0050d	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN3@DoAutoTest:

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  00513	57		 push	 edi
  00514	e8 00 00 00 00	 call	 _LRWAesTest@4
  00519	85 c0		 test	 eax, eax
  0051b	75 06		 jne	 SHORT $LN2@DoAutoTest

; 1555 : 		bFailed = TRUE;

  0051d	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN2@DoAutoTest:

; 1556 : 
; 1557 : 	/* Sector and buffer related algorithms */
; 1558 : 	if (!TestSectorBufEncryption (ci))

  00523	57		 push	 edi
  00524	e8 00 00 00 00	 call	 _TestSectorBufEncryption@4
  00529	85 c0		 test	 eax, eax
  0052b	75 06		 jne	 SHORT $LN1@DoAutoTest

; 1559 : 		bFailed = TRUE;

  0052d	89 b5 c0 fb ff
	ff		 mov	 DWORD PTR _bFailed$[ebp], esi
$LN1@DoAutoTest:

; 1560 : 	
; 1561 : 	crypto_close (ci);

  00533	57		 push	 edi
  00534	e8 00 00 00 00	 call	 _crypto_close@4

; 1562 : 	return !bFailed;

  00539	33 c0		 xor	 eax, eax
  0053b	39 85 c0 fb ff
	ff		 cmp	 DWORD PTR _bFailed$[ebp], eax
  00541	5f		 pop	 edi
  00542	0f 94 c0	 sete	 al
  00545	5b		 pop	 ebx
$LN46@DoAutoTest:

; 1563 : }

  00546	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00549	33 cd		 xor	 ecx, ebp
  0054b	5e		 pop	 esi
  0054c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00551	c9		 leave
  00552	c3		 ret	 0
_DoAutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	_AutoTestAlgorithms@0
EXTRN	_EnableHwEncryption@4:PROC
EXTRN	_IsHwEncryptionEnabled@0:PROC
; Function compile flags: /Ogsp
;	COMDAT _AutoTestAlgorithms@0
_TEXT	SEGMENT
_AutoTestAlgorithms@0 PROC				; COMDAT

; 1567 : {

  00000	8b ff		 npad	 2
  00002	56		 push	 esi

; 1568 : 	BOOL result = TRUE;

  00003	33 f6		 xor	 esi, esi
  00005	57		 push	 edi
  00006	46		 inc	 esi

; 1569 : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  00007	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled@0

; 1570 : 
; 1571 : 	EnableHwEncryption (FALSE);

  0000c	6a 00		 push	 0
  0000e	8b f8		 mov	 edi, eax
  00010	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 1572 : 
; 1573 : 	if (!DoAutoTestAlgorithms())

  00015	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0001a	85 c0		 test	 eax, eax
  0001c	75 02		 jne	 SHORT $LN2@AutoTestAl

; 1574 : 		result = FALSE;

  0001e	33 f6		 xor	 esi, esi
$LN2@AutoTestAl:

; 1575 : 
; 1576 : 	EnableHwEncryption (TRUE);

  00020	6a 01		 push	 1
  00022	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 1577 : 
; 1578 : 	if (!DoAutoTestAlgorithms())

  00027	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0002c	85 c0		 test	 eax, eax
  0002e	75 02		 jne	 SHORT $LN1@AutoTestAl

; 1579 : 		result = FALSE;

  00030	33 f6		 xor	 esi, esi
$LN1@AutoTestAl:

; 1580 : 
; 1581 : 	EnableHwEncryption (hwEncryptionEnabled);

  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _EnableHwEncryption@4
  00038	5f		 pop	 edi

; 1582 : 	return result;

  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi

; 1583 : }

  0003c	c3		 ret	 0
_AutoTestAlgorithms@0 ENDP
_TEXT	ENDS
END
