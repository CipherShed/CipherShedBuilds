;	Static Name Aliases
;
;	$S226_init	EQU	init
	TITLE   ..\..\..\crypto\aestab.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
EXTRN	__aNulshr:NEAR
EXTRN	__aNlshl:NEAR
_BSS      SEGMENT
COMM NEAR	_t_rc:	 4:	 10
COMM NEAR	_aes_enc_tab:	 1:	 2048
COMM NEAR	_aes_dec_tab:	 1:	 2048
_BSS      ENDS
_DATA      SEGMENT
$S226_init	DW	00H
_DATA      ENDS
_TEXT      SEGMENT
	ASSUME	CS: _TEXT

hibit	PROC NEAR	;  COMDAT
;|*** /*
;|***  ---------------------------------------------------------------------------
;|***  Copyright (c) 1998-2007, Brian Gladman, Worcester, UK. All rights reserved.
;|*** 
;|***  LICENSE TERMS
;|*** 
;|***  The free distribution and use of this software is allowed (with or without
;|***  changes) provided that:
;|*** 
;|***   1. source code distributions include the above copyright notice, this
;|***      list of conditions and the following disclaimer;
;|*** 
;|***   2. binary distributions include the above copyright notice, this list
;|***      of conditions and the following disclaimer in their documentation;
;|*** 
;|***   3. the name of the copyright holder is not used to endorse products
;|***      built using this software without specific written permission.
;|*** 
;|***  DISCLAIMER
;|*** 
;|***  This software is provided 'as is' with no explicit or implied warranties
;|***  in respect of its properties, including, but not limited to, correctness
;|***  and/or fitness for purpose.
;|***  ---------------------------------------------------------------------------
;|***  Issue Date: 20/12/2007
;|*** */
;|*** 
;|*** /* Adapted for CipherShed:
;|***    - Added run-time table generator for Aes_x86_v2.asm
;|*** */
;|*** 
;|*** #define DO_TABLES
;|*** 
;|*** #include "Aes.h"
;|*** #include "Aesopt.h"
;|*** 
;|*** #if defined(FIXED_TABLES)
;|*** 
;|*** #define sb_data(w) {\
;|***     w(0x63), w(0x7c), w(0x77), w(0x7b), w(0xf2), w(0x6b), w(0x6f), w(0xc5),\
;|***     w(0x30), w(0x01), w(0x67), w(0x2b), w(0xfe), w(0xd7), w(0xab), w(0x76),\
;|***     w(0xca), w(0x82), w(0xc9), w(0x7d), w(0xfa), w(0x59), w(0x47), w(0xf0),\
;|***     w(0xad), w(0xd4), w(0xa2), w(0xaf), w(0x9c), w(0xa4), w(0x72), w(0xc0),\
;|***     w(0xb7), w(0xfd), w(0x93), w(0x26), w(0x36), w(0x3f), w(0xf7), w(0xcc),\
;|***     w(0x34), w(0xa5), w(0xe5), w(0xf1), w(0x71), w(0xd8), w(0x31), w(0x15),\
;|***     w(0x04), w(0xc7), w(0x23), w(0xc3), w(0x18), w(0x96), w(0x05), w(0x9a),\
;|***     w(0x07), w(0x12), w(0x80), w(0xe2), w(0xeb), w(0x27), w(0xb2), w(0x75),\
;|***     w(0x09), w(0x83), w(0x2c), w(0x1a), w(0x1b), w(0x6e), w(0x5a), w(0xa0),\
;|***     w(0x52), w(0x3b), w(0xd6), w(0xb3), w(0x29), w(0xe3), w(0x2f), w(0x84),\
;|***     w(0x53), w(0xd1), w(0x00), w(0xed), w(0x20), w(0xfc), w(0xb1), w(0x5b),\
;|***     w(0x6a), w(0xcb), w(0xbe), w(0x39), w(0x4a), w(0x4c), w(0x58), w(0xcf),\
;|***     w(0xd0), w(0xef), w(0xaa), w(0xfb), w(0x43), w(0x4d), w(0x33), w(0x85),\
;|***     w(0x45), w(0xf9), w(0x02), w(0x7f), w(0x50), w(0x3c), w(0x9f), w(0xa8),\
;|***     w(0x51), w(0xa3), w(0x40), w(0x8f), w(0x92), w(0x9d), w(0x38), w(0xf5),\
;|***     w(0xbc), w(0xb6), w(0xda), w(0x21), w(0x10), w(0xff), w(0xf3), w(0xd2),\
;|***     w(0xcd), w(0x0c), w(0x13), w(0xec), w(0x5f), w(0x97), w(0x44), w(0x17),\
;|***     w(0xc4), w(0xa7), w(0x7e), w(0x3d), w(0x64), w(0x5d), w(0x19), w(0x73),\
;|***     w(0x60), w(0x81), w(0x4f), w(0xdc), w(0x22), w(0x2a), w(0x90), w(0x88),\
;|***     w(0x46), w(0xee), w(0xb8), w(0x14), w(0xde), w(0x5e), w(0x0b), w(0xdb),\
;|***     w(0xe0), w(0x32), w(0x3a), w(0x0a), w(0x49), w(0x06), w(0x24), w(0x5c),\
;|***     w(0xc2), w(0xd3), w(0xac), w(0x62), w(0x91), w(0x95), w(0xe4), w(0x79),\
;|***     w(0xe7), w(0xc8), w(0x37), w(0x6d), w(0x8d), w(0xd5), w(0x4e), w(0xa9),\
;|***     w(0x6c), w(0x56), w(0xf4), w(0xea), w(0x65), w(0x7a), w(0xae), w(0x08),\
;|***     w(0xba), w(0x78), w(0x25), w(0x2e), w(0x1c), w(0xa6), w(0xb4), w(0xc6),\
;|***     w(0xe8), w(0xdd), w(0x74), w(0x1f), w(0x4b), w(0xbd), w(0x8b), w(0x8a),\
;|***     w(0x70), w(0x3e), w(0xb5), w(0x66), w(0x48), w(0x03), w(0xf6), w(0x0e),\
;|***     w(0x61), w(0x35), w(0x57), w(0xb9), w(0x86), w(0xc1), w(0x1d), w(0x9e),\
;|***     w(0xe1), w(0xf8), w(0x98), w(0x11), w(0x69), w(0xd9), w(0x8e), w(0x94),\
;|***     w(0x9b), w(0x1e), w(0x87), w(0xe9), w(0xce), w(0x55), w(0x28), w(0xdf),\
;|***     w(0x8c), w(0xa1), w(0x89), w(0x0d), w(0xbf), w(0xe6), w(0x42), w(0x68),\
;|***     w(0x41), w(0x99), w(0x2d), w(0x0f), w(0xb0), w(0x54), w(0xbb), w(0x16) }
;|*** 
;|*** #define isb_data(w) {\
;|***     w(0x52), w(0x09), w(0x6a), w(0xd5), w(0x30), w(0x36), w(0xa5), w(0x38),\
;|***     w(0xbf), w(0x40), w(0xa3), w(0x9e), w(0x81), w(0xf3), w(0xd7), w(0xfb),\
;|***     w(0x7c), w(0xe3), w(0x39), w(0x82), w(0x9b), w(0x2f), w(0xff), w(0x87),\
;|***     w(0x34), w(0x8e), w(0x43), w(0x44), w(0xc4), w(0xde), w(0xe9), w(0xcb),\
;|***     w(0x54), w(0x7b), w(0x94), w(0x32), w(0xa6), w(0xc2), w(0x23), w(0x3d),\
;|***     w(0xee), w(0x4c), w(0x95), w(0x0b), w(0x42), w(0xfa), w(0xc3), w(0x4e),\
;|***     w(0x08), w(0x2e), w(0xa1), w(0x66), w(0x28), w(0xd9), w(0x24), w(0xb2),\
;|***     w(0x76), w(0x5b), w(0xa2), w(0x49), w(0x6d), w(0x8b), w(0xd1), w(0x25),\
;|***     w(0x72), w(0xf8), w(0xf6), w(0x64), w(0x86), w(0x68), w(0x98), w(0x16),\
;|***     w(0xd4), w(0xa4), w(0x5c), w(0xcc), w(0x5d), w(0x65), w(0xb6), w(0x92),\
;|***     w(0x6c), w(0x70), w(0x48), w(0x50), w(0xfd), w(0xed), w(0xb9), w(0xda),\
;|***     w(0x5e), w(0x15), w(0x46), w(0x57), w(0xa7), w(0x8d), w(0x9d), w(0x84),\
;|***     w(0x90), w(0xd8), w(0xab), w(0x00), w(0x8c), w(0xbc), w(0xd3), w(0x0a),\
;|***     w(0xf7), w(0xe4), w(0x58), w(0x05), w(0xb8), w(0xb3), w(0x45), w(0x06),\
;|***     w(0xd0), w(0x2c), w(0x1e), w(0x8f), w(0xca), w(0x3f), w(0x0f), w(0x02),\
;|***     w(0xc1), w(0xaf), w(0xbd), w(0x03), w(0x01), w(0x13), w(0x8a), w(0x6b),\
;|***     w(0x3a), w(0x91), w(0x11), w(0x41), w(0x4f), w(0x67), w(0xdc), w(0xea),\
;|***     w(0x97), w(0xf2), w(0xcf), w(0xce), w(0xf0), w(0xb4), w(0xe6), w(0x73),\
;|***     w(0x96), w(0xac), w(0x74), w(0x22), w(0xe7), w(0xad), w(0x35), w(0x85),\
;|***     w(0xe2), w(0xf9), w(0x37), w(0xe8), w(0x1c), w(0x75), w(0xdf), w(0x6e),\
;|***     w(0x47), w(0xf1), w(0x1a), w(0x71), w(0x1d), w(0x29), w(0xc5), w(0x89),\
;|***     w(0x6f), w(0xb7), w(0x62), w(0x0e), w(0xaa), w(0x18), w(0xbe), w(0x1b),\
;|***     w(0xfc), w(0x56), w(0x3e), w(0x4b), w(0xc6), w(0xd2), w(0x79), w(0x20),\
;|***     w(0x9a), w(0xdb), w(0xc0), w(0xfe), w(0x78), w(0xcd), w(0x5a), w(0xf4),\
;|***     w(0x1f), w(0xdd), w(0xa8), w(0x33), w(0x88), w(0x07), w(0xc7), w(0x31),\
;|***     w(0xb1), w(0x12), w(0x10), w(0x59), w(0x27), w(0x80), w(0xec), w(0x5f),\
;|***     w(0x60), w(0x51), w(0x7f), w(0xa9), w(0x19), w(0xb5), w(0x4a), w(0x0d),\
;|***     w(0x2d), w(0xe5), w(0x7a), w(0x9f), w(0x93), w(0xc9), w(0x9c), w(0xef),\
;|***     w(0xa0), w(0xe0), w(0x3b), w(0x4d), w(0xae), w(0x2a), w(0xf5), w(0xb0),\
;|***     w(0xc8), w(0xeb), w(0xbb), w(0x3c), w(0x83), w(0x53), w(0x99), w(0x61),\
;|***     w(0x17), w(0x2b), w(0x04), w(0x7e), w(0xba), w(0x77), w(0xd6), w(0x26),\
;|***     w(0xe1), w(0x69), w(0x14), w(0x63), w(0x55), w(0x21), w(0x0c), w(0x7d) }
;|*** 
;|*** #define mm_data(w) {\
;|***     w(0x00), w(0x01), w(0x02), w(0x03), w(0x04), w(0x05), w(0x06), w(0x07),\
;|***     w(0x08), w(0x09), w(0x0a), w(0x0b), w(0x0c), w(0x0d), w(0x0e), w(0x0f),\
;|***     w(0x10), w(0x11), w(0x12), w(0x13), w(0x14), w(0x15), w(0x16), w(0x17),\
;|***     w(0x18), w(0x19), w(0x1a), w(0x1b), w(0x1c), w(0x1d), w(0x1e), w(0x1f),\
;|***     w(0x20), w(0x21), w(0x22), w(0x23), w(0x24), w(0x25), w(0x26), w(0x27),\
;|***     w(0x28), w(0x29), w(0x2a), w(0x2b), w(0x2c), w(0x2d), w(0x2e), w(0x2f),\
;|***     w(0x30), w(0x31), w(0x32), w(0x33), w(0x34), w(0x35), w(0x36), w(0x37),\
;|***     w(0x38), w(0x39), w(0x3a), w(0x3b), w(0x3c), w(0x3d), w(0x3e), w(0x3f),\
;|***     w(0x40), w(0x41), w(0x42), w(0x43), w(0x44), w(0x45), w(0x46), w(0x47),\
;|***     w(0x48), w(0x49), w(0x4a), w(0x4b), w(0x4c), w(0x4d), w(0x4e), w(0x4f),\
;|***     w(0x50), w(0x51), w(0x52), w(0x53), w(0x54), w(0x55), w(0x56), w(0x57),\
;|***     w(0x58), w(0x59), w(0x5a), w(0x5b), w(0x5c), w(0x5d), w(0x5e), w(0x5f),\
;|***     w(0x60), w(0x61), w(0x62), w(0x63), w(0x64), w(0x65), w(0x66), w(0x67),\
;|***     w(0x68), w(0x69), w(0x6a), w(0x6b), w(0x6c), w(0x6d), w(0x6e), w(0x6f),\
;|***     w(0x70), w(0x71), w(0x72), w(0x73), w(0x74), w(0x75), w(0x76), w(0x77),\
;|***     w(0x78), w(0x79), w(0x7a), w(0x7b), w(0x7c), w(0x7d), w(0x7e), w(0x7f),\
;|***     w(0x80), w(0x81), w(0x82), w(0x83), w(0x84), w(0x85), w(0x86), w(0x87),\
;|***     w(0x88), w(0x89), w(0x8a), w(0x8b), w(0x8c), w(0x8d), w(0x8e), w(0x8f),\
;|***     w(0x90), w(0x91), w(0x92), w(0x93), w(0x94), w(0x95), w(0x96), w(0x97),\
;|***     w(0x98), w(0x99), w(0x9a), w(0x9b), w(0x9c), w(0x9d), w(0x9e), w(0x9f),\
;|***     w(0xa0), w(0xa1), w(0xa2), w(0xa3), w(0xa4), w(0xa5), w(0xa6), w(0xa7),\
;|***     w(0xa8), w(0xa9), w(0xaa), w(0xab), w(0xac), w(0xad), w(0xae), w(0xaf),\
;|***     w(0xb0), w(0xb1), w(0xb2), w(0xb3), w(0xb4), w(0xb5), w(0xb6), w(0xb7),\
;|***     w(0xb8), w(0xb9), w(0xba), w(0xbb), w(0xbc), w(0xbd), w(0xbe), w(0xbf),\
;|***     w(0xc0), w(0xc1), w(0xc2), w(0xc3), w(0xc4), w(0xc5), w(0xc6), w(0xc7),\
;|***     w(0xc8), w(0xc9), w(0xca), w(0xcb), w(0xcc), w(0xcd), w(0xce), w(0xcf),\
;|***     w(0xd0), w(0xd1), w(0xd2), w(0xd3), w(0xd4), w(0xd5), w(0xd6), w(0xd7),\
;|***     w(0xd8), w(0xd9), w(0xda), w(0xdb), w(0xdc), w(0xdd), w(0xde), w(0xdf),\
;|***     w(0xe0), w(0xe1), w(0xe2), w(0xe3), w(0xe4), w(0xe5), w(0xe6), w(0xe7),\
;|***     w(0xe8), w(0xe9), w(0xea), w(0xeb), w(0xec), w(0xed), w(0xee), w(0xef),\
;|***     w(0xf0), w(0xf1), w(0xf2), w(0xf3), w(0xf4), w(0xf5), w(0xf6), w(0xf7),\
;|***     w(0xf8), w(0xf9), w(0xfa), w(0xfb), w(0xfc), w(0xfd), w(0xfe), w(0xff) }
;|*** 
;|*** #define rc_data(w) {\
;|***     w(0x01), w(0x02), w(0x04), w(0x08), w(0x10),w(0x20), w(0x40), w(0x80),\
;|***     w(0x1b), w(0x36) }
;|*** 
;|*** #define h0(x)   (x)
;|*** 
;|*** #define w0(p)   bytes2word(p, 0, 0, 0)
;|*** #define w1(p)   bytes2word(0, p, 0, 0)
;|*** #define w2(p)   bytes2word(0, 0, p, 0)
;|*** #define w3(p)   bytes2word(0, 0, 0, p)
;|*** 
;|*** #define u0(p)   bytes2word(f2(p), p, p, f3(p))
;|*** #define u1(p)   bytes2word(f3(p), f2(p), p, p)
;|*** #define u2(p)   bytes2word(p, f3(p), f2(p), p)
;|*** #define u3(p)   bytes2word(p, p, f3(p), f2(p))
;|*** 
;|*** #define v0(p)   bytes2word(fe(p), f9(p), fd(p), fb(p))
;|*** #define v1(p)   bytes2word(fb(p), fe(p), f9(p), fd(p))
;|*** #define v2(p)   bytes2word(fd(p), fb(p), fe(p), f9(p))
;|*** #define v3(p)   bytes2word(f9(p), fd(p), fb(p), fe(p))
;|*** 
;|*** #endif
;|*** 
;|*** #if defined(FIXED_TABLES) || !defined(FF_TABLES)
;|*** 
;|*** #define f2(x)   ((x<<1) ^ (((x>>7) & 1) * WPOLY))
;|*** #define f4(x)   ((x<<2) ^ (((x>>6) & 1) * WPOLY) ^ (((x>>6) & 2) * WPOLY))
;|*** #define f8(x)   ((x<<3) ^ (((x>>5) & 1) * WPOLY) ^ (((x>>5) & 2) * WPOLY) \
;|***                         ^ (((x>>5) & 4) * WPOLY))
;|*** #define f3(x)   (f2(x) ^ x)
;|*** #define f9(x)   (f8(x) ^ x)
;|*** #define fb(x)   (f8(x) ^ f2(x) ^ x)
;|*** #define fd(x)   (f8(x) ^ f4(x) ^ x)
;|*** #define fe(x)   (f8(x) ^ f4(x) ^ f2(x))
;|*** 
;|*** #else
;|*** 
;|*** #define f2(x) ((x) ? pow[log[x] + 0x19] : 0)
;|*** #define f3(x) ((x) ? pow[log[x] + 0x01] : 0)
;|*** #define f9(x) ((x) ? pow[log[x] + 0xc7] : 0)
;|*** #define fb(x) ((x) ? pow[log[x] + 0x68] : 0)
;|*** #define fd(x) ((x) ? pow[log[x] + 0xee] : 0)
;|*** #define fe(x) ((x) ? pow[log[x] + 0xdf] : 0)
;|*** #define fi(x) ((x) ? pow[ 255 - log[x]] : 0)
;|*** 
;|*** #endif
;|*** 
;|*** #include "Aestab.h"
;|*** 
;|*** #if defined(__cplusplus)
;|*** extern "C"
;|*** {
;|*** #endif
;|*** 
;|*** #if defined(FIXED_TABLES)
;|*** 
;|*** /* implemented in case of wrong call for fixed tables */
;|*** 
;|*** AES_RETURN aes_init(void)
;|*** {
;|***     return EXIT_SUCCESS;
;|*** }
;|*** 
;|*** #else   /* dynamic table generation */
;|*** 
;|*** #if !defined(FF_TABLES)
;|*** 
;|*** /*  Generate the tables for the dynamic table option
;|*** 
;|***     It will generally be sensible to use tables to compute finite
;|***     field multiplies and inverses but where memory is scarse this
;|***     code might sometimes be better. But it only has effect during
;|***     initialisation so its pretty unimportant in overall terms.
;|*** */
;|*** 
;|*** /*  return 2 ^ (n - 1) where n is the bit number of the highest bit
;|***     set in x with x in the range 1 < x < 0x00000200.   This form is
;|***     used so that locals within fi can be bytes rather than words
;|*** */
;|*** 
;|*** static uint_8t hibit(const uint_32t x)
;|*** {   uint_8t r = (uint_8t)((x >> 1) | (x >> 2));
; Line 222
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	x = 4
;	r = -2
;|*** 
;|***     r |= (r >> 2);
;|***     r |= (r >> 4);
;|***     return (r + 1) >> 1;
; Line 226
	*** 000003	8b 46 04 		mov	ax,WORD PTR [bp+4]	;x
	*** 000006	8b 56 06 		mov	dx,WORD PTR [bp+6]
	*** 000009	b1 02 			mov	cl,2
	*** 00000b	e8 00 00 		call	__aNulshr
	*** 00000e	8b 4e 04 		mov	cx,WORD PTR [bp+4]	;x
	*** 000011	8b 56 06 		mov	dx,WORD PTR [bp+6]
	*** 000014	d1 ea 			shr	dx,1
	*** 000016	d1 d9 			rcr	cx,1
	*** 000018	0a c8 			or	cl,al
	*** 00001a	8a c1 			mov	al,cl
	*** 00001c	c0 e8 02 		shr	al,2
	*** 00001f	0a c1 			or	al,cl
	*** 000021	8b c8 			mov	cx,ax
	*** 000023	c0 e8 04 		shr	al,4
	*** 000026	0a c1 			or	al,cl
	*** 000028	2a e4 			sub	ah,ah
	*** 00002a	40 			inc	ax
	*** 00002b	d1 f8 			sar	ax,1
;|*** }
; Line 227
	*** 00002d	c9 			leave	
	*** 00002e	c3 			ret	

hibit	ENDP

fi	PROC NEAR	;  COMDAT
;|*** 
;|*** /* return the inverse of the finite field element x */
;|*** 
;|*** static uint_8t fi(const uint_8t x)
;|*** {   uint_8t p1 = x, p2 = BPOLY, n1 = hibit(x), n2 = 0x80, v1 = 1, v2 = 0;
; Line 232
	*** 000000	c8 06 00 00 		enter	6,0
;	x = 4
;	p1 = -3
;	p2 = -4
;	n1 = -1
;	n2 = -2
;	v1 = -6
;	v2 = -5
	*** 000004	8a 46 04 		mov	al,BYTE PTR [bp+4]	;x
	*** 000007	88 46 fd 		mov	BYTE PTR [bp-3],al	;p1
	*** 00000a	c6 46 fc 1b 		mov	BYTE PTR [bp-4],27	;001bH	;p2
	*** 00000e	2a e4 			sub	ah,ah
	*** 000010	6a 00 			push	0
	*** 000012	50 			push	ax
	*** 000013	e8 00 00 		call	hibit
	*** 000016	83 c4 04 		add	sp,4
	*** 000019	88 46 ff 		mov	BYTE PTR [bp-1],al	;n1
	*** 00001c	c6 46 fe 80 		mov	BYTE PTR [bp-2],128	;0080H	;n2
	*** 000020	c6 46 fa 01 		mov	BYTE PTR [bp-6],1	;v1
	*** 000024	c6 46 fb 00 		mov	BYTE PTR [bp-5],0	;v2
;|*** 
;|***     if(x < 2) return x;
; Line 234
	*** 000028	80 7e fd 02 		cmp	BYTE PTR [bp-3],2	;p1
	*** 00002c	73 05 			jae	SHORT $L238
	*** 00002e	8a 46 04 		mov	al,BYTE PTR [bp+4]	;x
	*** 000031	c9 			leave	
	*** 000032	c3 			ret	
					$L238:
;|*** 
;|***     for(;;)
;|***     {
;|***         if(!n1) return v1;
; Line 238
	*** 000033	80 7e ff 00 		cmp	BYTE PTR [bp-1],0	;n1
	*** 000037	74 69 			je	SHORT $L241
;|*** 
;|***         while(n2 >= n1)
; Line 240
	*** 000039	eb 29 			jmp	SHORT $L247
					$FC220:
;|***         {
;|***             n2 /= n1; p2 ^= p1 * n2; v2 ^= v1 * n2; n2 = hibit(p2);
; Line 242
	*** 00003b	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;n2
	*** 00003e	2a e4 			sub	ah,ah
	*** 000040	f6 76 ff 		div	BYTE PTR [bp-1]	;n1
	*** 000043	8b c8 			mov	cx,ax
	*** 000045	f6 66 fa 		mul	BYTE PTR [bp-6]	;v1
	*** 000048	30 46 fb 		xor	BYTE PTR [bp-5],al	;v2
	*** 00004b	8a c1 			mov	al,cl
	*** 00004d	f6 66 fd 		mul	BYTE PTR [bp-3]	;p1
	*** 000050	30 46 fc 		xor	BYTE PTR [bp-4],al	;p2
	*** 000053	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;p2
	*** 000056	2a e4 			sub	ah,ah
	*** 000058	6a 00 			push	0
	*** 00005a	50 			push	ax
	*** 00005b	e8 00 00 		call	hibit
	*** 00005e	83 c4 04 		add	sp,4
	*** 000061	88 46 fe 		mov	BYTE PTR [bp-2],al	;n2
;|***         }
; Line 243
					$L247:
	*** 000064	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;n1
	*** 000067	38 46 fe 		cmp	BYTE PTR [bp-2],al	;n2
	*** 00006a	73 cf 			jae	SHORT $FC220
;|*** 
;|***         if(!n2) return v2;
; Line 245
	*** 00006c	80 7e fe 00 		cmp	BYTE PTR [bp-2],0	;n2
	*** 000070	74 35 			je	SHORT $L243
;|*** 
;|***         while(n1 >= n2)
; Line 247
					$FC224:
	*** 000072	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;n1
	*** 000075	38 46 fe 		cmp	BYTE PTR [bp-2],al	;n2
	*** 000078	77 b9 			ja	SHORT $L238
;|***         {
;|***             n1 /= n2; p1 ^= p2 * n1; v1 ^= v2 * n1; n1 = hibit(p1);
; Line 249
	*** 00007a	2a e4 			sub	ah,ah
	*** 00007c	f6 76 fe 		div	BYTE PTR [bp-2]	;n2
	*** 00007f	8b c8 			mov	cx,ax
	*** 000081	f6 66 fb 		mul	BYTE PTR [bp-5]	;v2
	*** 000084	30 46 fa 		xor	BYTE PTR [bp-6],al	;v1
	*** 000087	8a c1 			mov	al,cl
	*** 000089	f6 66 fc 		mul	BYTE PTR [bp-4]	;p2
	*** 00008c	30 46 fd 		xor	BYTE PTR [bp-3],al	;p1
	*** 00008f	8a 46 fd 		mov	al,BYTE PTR [bp-3]	;p1
	*** 000092	2a e4 			sub	ah,ah
	*** 000094	6a 00 			push	0
	*** 000096	50 			push	ax
	*** 000097	e8 00 00 		call	hibit
	*** 00009a	83 c4 04 		add	sp,4
	*** 00009d	88 46 ff 		mov	BYTE PTR [bp-1],al	;n1
;|***         }
; Line 250
	*** 0000a0	eb d0 			jmp	SHORT $FC224
					$L241:
;|***         if(!n1) return v1;
; Line 238
	*** 0000a2	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;v1
	*** 0000a5	c9 			leave	
	*** 0000a6	c3 			ret	
					$L243:
;|*** 
;|***         while(n2 >= n1)
;|***         {
;|***             n2 /= n1; p2 ^= p1 * n2; v2 ^= v1 * n2; n2 = hibit(p2);
;|***         }
;|*** 
;|***         if(!n2) return v2;
; Line 245
	*** 0000a7	8a 46 fb 		mov	al,BYTE PTR [bp-5]	;v2
;|*** 
;|***         while(n1 >= n2)
;|***         {
;|***             n1 /= n2; p1 ^= p2 * n1; v1 ^= v2 * n1; n1 = hibit(p1);
;|***         }
;|***     }
;|*** }
; Line 252
	*** 0000aa	c9 			leave	
	*** 0000ab	c3 			ret	

fi	ENDP
	PUBLIC	_aes_init
_aes_init	PROC NEAR	;  COMDAT
;|*** 
;|*** #endif
;|*** 
;|*** /* The forward and inverse affine transformations used in the S-box */
;|*** 
;|*** #define fwd_affine(x) \
;|***     (w = (uint_32t)x, w ^= (w<<1)^(w<<2)^(w<<3)^(w<<4), 0x63^(uint_8t)(w^(w>>8)))
;|*** 
;|*** #define inv_affine(x) \
;|***     (w = (uint_32t)x, w = (w<<1)^(w<<3)^(w<<6), 0x05^(uint_8t)(w^(w>>8)))
;|*** 
;|*** static int init = 0;
;|*** 
;|*** #ifdef TC_WINDOWS_BOOT
;|*** 
;|*** #pragma optimize ("l", on)
;|*** uint_8t aes_enc_tab[256][8];
;|*** uint_8t aes_dec_tab[256][8];
;|*** 
;|*** #endif
;|*** 
;|*** AES_RETURN aes_init(void)
;|*** {   uint_32t  i, w;
; Line 275
	*** 000000	c8 22 00 00 		enter	34,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	i = -10
;	w = -6
;	x = -1
;|*** 
;|*** #ifdef TC_WINDOWS_BOOT
;|*** 
;|*** 	if (init)
; Line 279
	*** 000006	83 3e 00 00 00 		cmp	WORD PTR $S226_init,0
	*** 00000b	0f 85 b6 01 		jne	$L248
;|*** 		return EXIT_SUCCESS;
;|*** 
;|***     for (i = 0; i < 256; ++i)
; Line 282
	*** 00000f	2b c0 			sub	ax,ax
	*** 000011	89 46 f6 		mov	WORD PTR [bp-10],ax	;i
	*** 000014	bf 00 00 		mov	di,OFFSET DGROUP:_aes_dec_tab
	*** 000017	be 00 00 		mov	si,OFFSET DGROUP:_aes_enc_tab
					$F233:
;|***     { 
;|***         uint_8t x = fwd_affine(fi((uint_8t)i));
; Line 284
	*** 00001a	8a 46 f6 		mov	al,BYTE PTR [bp-10]	;i
	*** 00001d	50 			push	ax
	*** 00001e	e8 00 00 		call	fi
	*** 000021	5b 			pop	bx
	*** 000022	2a e4 			sub	ah,ah
	*** 000024	89 46 fa 		mov	WORD PTR [bp-6],ax	;w
	*** 000027	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0
	*** 00002c	8b 56 fc 		mov	dx,WORD PTR [bp-4]
	*** 00002f	03 c0 			add	ax,ax
	*** 000031	13 d2 			adc	dx,dx
	*** 000033	33 46 fa 		xor	ax,WORD PTR [bp-6]	;w
	*** 000036	33 56 fc 		xor	dx,WORD PTR [bp-4]
	*** 000039	03 c0 			add	ax,ax
	*** 00003b	13 d2 			adc	dx,dx
	*** 00003d	33 46 fa 		xor	ax,WORD PTR [bp-6]	;w
	*** 000040	33 56 fc 		xor	dx,WORD PTR [bp-4]
	*** 000043	03 c0 			add	ax,ax
	*** 000045	13 d2 			adc	dx,dx
	*** 000047	33 46 fa 		xor	ax,WORD PTR [bp-6]	;w
	*** 00004a	33 56 fc 		xor	dx,WORD PTR [bp-4]
	*** 00004d	03 c0 			add	ax,ax
	*** 00004f	13 d2 			adc	dx,dx
	*** 000051	31 46 fa 		xor	WORD PTR [bp-6],ax	;w
	*** 000054	31 56 fc 		xor	WORD PTR [bp-4],dx
;|*** 		aes_enc_tab[i][0] = 0;
; Line 285
	*** 000057	c6 04 00 		mov	BYTE PTR [si],0
;|*** 		aes_enc_tab[i][1] = x;
; Line 286
	*** 00005a	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]	;w
	*** 00005e	66 c1 e8 08 		shr	eax,8
	*** 000062	32 46 fa 		xor	al,BYTE PTR [bp-6]	;w
	*** 000065	34 63 			xor	al,99	;0063H
	*** 000067	88 44 01 		mov	BYTE PTR [si+1],al
;|*** 		aes_enc_tab[i][2] = x;
; Line 287
	*** 00006a	88 44 02 		mov	BYTE PTR [si+2],al
;|*** 		aes_enc_tab[i][3] = f3(x);
; Line 288
	*** 00006d	8b c8 			mov	cx,ax
	*** 00006f	02 c0 			add	al,al
	*** 000071	8b d0 			mov	dx,ax
	*** 000073	8a c1 			mov	al,cl
	*** 000075	c0 e8 07 		shr	al,7
	*** 000078	b3 1b 			mov	bl,27	;001bH
	*** 00007a	f6 e3 			mul	bl
	*** 00007c	32 d0 			xor	dl,al
	*** 00007e	8b c1 			mov	ax,cx
	*** 000080	32 ca 			xor	cl,dl
	*** 000082	88 4c 03 		mov	BYTE PTR [si+3],cl
;|*** 		aes_enc_tab[i][4] = f2(x);
; Line 289
	*** 000085	88 54 04 		mov	BYTE PTR [si+4],dl
;|*** 		aes_enc_tab[i][5] = x;
; Line 290
	*** 000088	88 44 05 		mov	BYTE PTR [si+5],al
;|*** 		aes_enc_tab[i][6] = x;
; Line 291
	*** 00008b	88 44 06 		mov	BYTE PTR [si+6],al
;|*** 		aes_enc_tab[i][7] = f3(x);
; Line 292
	*** 00008e	88 4c 07 		mov	BYTE PTR [si+7],cl
;|*** 
;|***         x = fi((uint_8t)inv_affine((uint_8t)i));
; Line 294
	*** 000091	8a 46 f6 		mov	al,BYTE PTR [bp-10]	;i
	*** 000094	2a e4 			sub	ah,ah
	*** 000096	2b d2 			sub	dx,dx
	*** 000098	b1 03 			mov	cl,3
	*** 00009a	89 46 f2 		mov	WORD PTR [bp-14],ax
	*** 00009d	89 56 f4 		mov	WORD PTR [bp-12],dx
	*** 0000a0	e8 00 00 		call	__aNlshl
	*** 0000a3	33 46 f2 		xor	ax,WORD PTR [bp-14]
	*** 0000a6	33 56 f4 		xor	dx,WORD PTR [bp-12]
	*** 0000a9	b1 02 			mov	cl,2
	*** 0000ab	e8 00 00 		call	__aNlshl
	*** 0000ae	33 46 f2 		xor	ax,WORD PTR [bp-14]
	*** 0000b1	33 56 f4 		xor	dx,WORD PTR [bp-12]
	*** 0000b4	03 c0 			add	ax,ax
	*** 0000b6	13 d2 			adc	dx,dx
	*** 0000b8	b1 08 			mov	cl,8
	*** 0000ba	89 46 ee 		mov	WORD PTR [bp-18],ax
	*** 0000bd	e8 00 00 		call	__aNulshr
	*** 0000c0	32 46 ee 		xor	al,BYTE PTR [bp-18]
	*** 0000c3	34 05 			xor	al,5
	*** 0000c5	50 			push	ax
	*** 0000c6	e8 00 00 		call	fi
	*** 0000c9	5b 			pop	bx
	*** 0000ca	88 46 ff 		mov	BYTE PTR [bp-1],al	;x
;|*** 		aes_dec_tab[i][0] = fe(x);
; Line 295
	*** 0000cd	02 c0 			add	al,al
	*** 0000cf	32 46 ff 		xor	al,BYTE PTR [bp-1]	;x
	*** 0000d2	8b c8 			mov	cx,ax
	*** 0000d4	02 c0 			add	al,al
	*** 0000d6	32 46 ff 		xor	al,BYTE PTR [bp-1]	;x
	*** 0000d9	02 c0 			add	al,al
	*** 0000db	8b d0 			mov	dx,ax
	*** 0000dd	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 0000e0	24 20 			and	al,32	;0020H
	*** 0000e2	c0 e8 05 		shr	al,5
	*** 0000e5	b3 1b 			mov	bl,27	;001bH
	*** 0000e7	f6 e3 			mul	bl
	*** 0000e9	32 d0 			xor	dl,al
	*** 0000eb	8b d8 			mov	bx,ax
	*** 0000ed	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 0000f0	24 40 			and	al,64	;0040H
	*** 0000f2	89 46 ec 		mov	WORD PTR [bp-20],ax
	*** 0000f5	c0 e8 05 		shr	al,5
	*** 0000f8	89 4e ea 		mov	WORD PTR [bp-22],cx
	*** 0000fb	b1 1b 			mov	cl,27	;001bH
	*** 0000fd	f6 e1 			mul	cl
	*** 0000ff	32 d0 			xor	dl,al
	*** 000101	8b c8 			mov	cx,ax
	*** 000103	8a 46 ec 		mov	al,BYTE PTR [bp-20]
	*** 000106	c0 e8 06 		shr	al,6
	*** 000109	89 4e e8 		mov	WORD PTR [bp-24],cx
	*** 00010c	b1 1b 			mov	cl,27	;001bH
	*** 00010e	f6 e1 			mul	cl
	*** 000110	32 d0 			xor	dl,al
	*** 000112	8b c8 			mov	cx,ax
	*** 000114	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 000117	24 9f 			and	al,159	;009fH
	*** 000119	c0 e8 05 		shr	al,5
	*** 00011c	89 4e e6 		mov	WORD PTR [bp-26],cx
	*** 00011f	b1 1b 			mov	cl,27	;001bH
	*** 000121	f6 e1 			mul	cl
	*** 000123	32 d0 			xor	dl,al
	*** 000125	8b c8 			mov	cx,ax
	*** 000127	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 00012a	24 bf 			and	al,191	;00bfH
	*** 00012c	c0 e8 06 		shr	al,6
	*** 00012f	89 4e e4 		mov	WORD PTR [bp-28],cx
	*** 000132	b1 1b 			mov	cl,27	;001bH
	*** 000134	f6 e1 			mul	cl
	*** 000136	32 d0 			xor	dl,al
	*** 000138	8b c8 			mov	cx,ax
	*** 00013a	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 00013d	c0 e8 07 		shr	al,7
	*** 000140	89 4e e2 		mov	WORD PTR [bp-30],cx
	*** 000143	b1 1b 			mov	cl,27	;001bH
	*** 000145	f6 e1 			mul	cl
	*** 000147	32 d0 			xor	dl,al
	*** 000149	88 15 			mov	BYTE PTR [di],dl
;|*** 		aes_dec_tab[i][1] = f9(x);
; Line 296
	*** 00014b	8b cb 			mov	cx,bx
	*** 00014d	32 5e e8 		xor	bl,BYTE PTR [bp-24]
	*** 000150	32 5e e4 		xor	bl,BYTE PTR [bp-28]
	*** 000153	89 46 e0 		mov	WORD PTR [bp-32],ax
	*** 000156	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 000159	c0 e0 03 		shl	al,3
	*** 00015c	32 d8 			xor	bl,al
	*** 00015e	32 5e ff 		xor	bl,BYTE PTR [bp-1]	;x
	*** 000161	88 5d 01 		mov	BYTE PTR [di+1],bl
;|*** 		aes_dec_tab[i][2] = fd(x);
; Line 297
	*** 000164	8a 46 ea 		mov	al,BYTE PTR [bp-22]
	*** 000167	c0 e0 02 		shl	al,2
	*** 00016a	89 4e de 		mov	WORD PTR [bp-34],cx
	*** 00016d	32 c8 			xor	cl,al
	*** 00016f	32 4e e8 		xor	cl,BYTE PTR [bp-24]
	*** 000172	32 4e e6 		xor	cl,BYTE PTR [bp-26]
	*** 000175	32 4e e4 		xor	cl,BYTE PTR [bp-28]
	*** 000178	32 4e e2 		xor	cl,BYTE PTR [bp-30]
	*** 00017b	32 4e ff 		xor	cl,BYTE PTR [bp-1]	;x
	*** 00017e	88 4d 02 		mov	BYTE PTR [di+2],cl
;|*** 		aes_dec_tab[i][3] = fb(x);
; Line 298
	*** 000181	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 000184	c0 e0 02 		shl	al,2
	*** 000187	32 46 ff 		xor	al,BYTE PTR [bp-1]	;x
	*** 00018a	02 c0 			add	al,al
	*** 00018c	32 46 de 		xor	al,BYTE PTR [bp-34]
	*** 00018f	32 46 e8 		xor	al,BYTE PTR [bp-24]
	*** 000192	32 46 e4 		xor	al,BYTE PTR [bp-28]
	*** 000195	32 46 e0 		xor	al,BYTE PTR [bp-32]
	*** 000198	32 46 ff 		xor	al,BYTE PTR [bp-1]	;x
	*** 00019b	88 45 03 		mov	BYTE PTR [di+3],al
;|*** 		aes_dec_tab[i][4] = fe(x);
; Line 299
	*** 00019e	88 55 04 		mov	BYTE PTR [di+4],dl
;|*** 		aes_dec_tab[i][5] = f9(x);
; Line 300
	*** 0001a1	88 5d 05 		mov	BYTE PTR [di+5],bl
;|*** 		aes_dec_tab[i][6] = fd(x);
; Line 301
	*** 0001a4	88 4d 06 		mov	BYTE PTR [di+6],cl
;|*** 		aes_dec_tab[i][7] = x;
; Line 302
	*** 0001a7	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;x
	*** 0001aa	88 45 07 		mov	BYTE PTR [di+7],al
	*** 0001ad	83 c7 08 		add	di,8
;|***     for (i = 0; i < 256; ++i)
; Line 282
	*** 0001b0	83 46 f6 01 		add	WORD PTR [bp-10],1	;i
	*** 0001b4	83 c6 08 		add	si,8
	*** 0001b7	81 fe 00 08 		cmp	si,OFFSET DGROUP:_aes_enc_tab+2048
	*** 0001bb	0f 82 5b fe 		jb	$F233
;|***     { 
;|***         uint_8t x = fwd_affine(fi((uint_8t)i));
;|*** 		aes_enc_tab[i][0] = 0;
;|*** 		aes_enc_tab[i][1] = x;
;|*** 		aes_enc_tab[i][2] = x;
;|*** 		aes_enc_tab[i][3] = f3(x);
;|*** 		aes_enc_tab[i][4] = f2(x);
;|*** 		aes_enc_tab[i][5] = x;
;|*** 		aes_enc_tab[i][6] = x;
;|*** 		aes_enc_tab[i][7] = f3(x);
;|*** 
;|***         x = fi((uint_8t)inv_affine((uint_8t)i));
;|*** 		aes_dec_tab[i][0] = fe(x);
;|*** 		aes_dec_tab[i][1] = f9(x);
;|*** 		aes_dec_tab[i][2] = fd(x);
;|*** 		aes_dec_tab[i][3] = fb(x);
;|*** 		aes_dec_tab[i][4] = fe(x);
;|*** 		aes_dec_tab[i][5] = f9(x);
;|*** 		aes_dec_tab[i][6] = fd(x);
;|*** 		aes_dec_tab[i][7] = x;
;|***     }
;|*** 
;|*** #else // TC_WINDOWS_BOOT
;|*** 
;|*** #if defined(FF_TABLES)
;|*** 
;|***     uint_8t  pow[512], log[256];
;|*** 
;|***     if(init)
;|***         return EXIT_SUCCESS;
;|***     /*  log and power tables for GF(2^8) finite field with
;|***         WPOLY as modular polynomial - the simplest primitive
;|***         root is 0x03, used here to generate the tables
;|***     */
;|*** 
;|***     i = 0; w = 1;
;|***     do
;|***     {
;|***         pow[i] = (uint_8t)w;
;|***         pow[i + 255] = (uint_8t)w;
;|***         log[w] = (uint_8t)i++;
;|***         w ^=  (w << 1) ^ (w & 0x80 ? WPOLY : 0);
;|***     }
;|***     while (w != 1);
;|*** 
;|*** #else
;|***     if(init)
;|***         return EXIT_SUCCESS;
;|*** #endif
;|*** 
;|***     for(i = 0, w = 1; i < RC_LENGTH; ++i)
;|***     {
;|***         t_set(r,c)[i] = bytes2word(w, 0, 0, 0);
;|***         w = f2(w);
;|***     }
;|*** 
;|***     for(i = 0; i < 256; ++i)
;|***     {   uint_8t    b;
;|*** 
;|***         b = fwd_affine(fi((uint_8t)i));
;|***         w = bytes2word(f2(b), b, b, f3(b));
;|*** 
;|*** #if defined( SBX_SET )
;|***         t_set(s,box)[i] = b;
;|*** #endif
;|*** 
;|*** #if defined( FT1_SET )                 /* tables for a normal encryption round */
;|***         t_set(f,n)[i] = w;
;|*** #endif
;|*** #if defined( FT4_SET )
;|***         t_set(f,n)[0][i] = w;
;|***         t_set(f,n)[1][i] = upr(w,1);
;|***         t_set(f,n)[2][i] = upr(w,2);
;|***         t_set(f,n)[3][i] = upr(w,3);
;|*** #endif
;|***         w = bytes2word(b, 0, 0, 0);
;|*** 
;|*** #if defined( FL1_SET )            /* tables for last encryption round (may also   */
;|***         t_set(f,l)[i] = w;        /* be used in the key schedule)                 */
;|*** #endif
;|*** #if defined( FL4_SET )
;|***         t_set(f,l)[0][i] = w;
;|***         t_set(f,l)[1][i] = upr(w,1);
;|***         t_set(f,l)[2][i] = upr(w,2);
;|***         t_set(f,l)[3][i] = upr(w,3);
;|*** #endif
;|*** 
;|*** #if defined( LS1_SET )			/* table for key schedule if t_set(f,l) above is*/
;|***         t_set(l,s)[i] = w;      /* not of the required form                     */
;|*** #endif
;|*** #if defined( LS4_SET )
;|***         t_set(l,s)[0][i] = w;
;|***         t_set(l,s)[1][i] = upr(w,1);
;|***         t_set(l,s)[2][i] = upr(w,2);
;|***         t_set(l,s)[3][i] = upr(w,3);
;|*** #endif
;|*** 
;|***         b = fi(inv_affine((uint_8t)i));
;|***         w = bytes2word(fe(b), f9(b), fd(b), fb(b));
;|*** 
;|*** #if defined( IM1_SET )			/* tables for the inverse mix column operation  */
;|***         t_set(i,m)[b] = w;
;|*** #endif
;|*** #if defined( IM4_SET )
;|***         t_set(i,m)[0][b] = w;
;|***         t_set(i,m)[1][b] = upr(w,1);
;|***         t_set(i,m)[2][b] = upr(w,2);
;|***         t_set(i,m)[3][b] = upr(w,3);
;|*** #endif
;|*** 
;|*** #if defined( ISB_SET )
;|***         t_set(i,box)[i] = b;
;|*** #endif
;|*** #if defined( IT1_SET )			/* tables for a normal decryption round */
;|***         t_set(i,n)[i] = w;
;|*** #endif
;|*** #if defined( IT4_SET )
;|***         t_set(i,n)[0][i] = w;
;|***         t_set(i,n)[1][i] = upr(w,1);
;|***         t_set(i,n)[2][i] = upr(w,2);
;|***         t_set(i,n)[3][i] = upr(w,3);
;|*** #endif
;|***         w = bytes2word(b, 0, 0, 0);
;|*** #if defined( IL1_SET )			/* tables for last decryption round */
;|***         t_set(i,l)[i] = w;
;|*** #endif
;|*** #if defined( IL4_SET )
;|***         t_set(i,l)[0][i] = w;
;|***         t_set(i,l)[1][i] = upr(w,1);
;|***         t_set(i,l)[2][i] = upr(w,2);
;|***         t_set(i,l)[3][i] = upr(w,3);
;|*** #endif
;|***     }
;|*** 
;|*** #endif // TC_WINDOWS_BOOT
;|*** 
;|***     init = 1;
; Line 419
	*** 0001bf	c7 06 00 00 01 00 	mov	WORD PTR $S226_init,1
;|***     return EXIT_SUCCESS;
; Line 420
					$L248:
	*** 0001c5	33 c0 			xor	ax,ax
;|*** }
; Line 421
	*** 0001c7	5e 			pop	si
	*** 0001c8	5f 			pop	di
	*** 0001c9	c9 			leave	
	*** 0001ca	c3 			ret	

_aes_init	ENDP
_TEXT	ENDS
END
;|*** 
;|*** #endif
;|*** 
;|*** #if defined(__cplusplus)
;|*** }
;|*** #endif
;|*** 
