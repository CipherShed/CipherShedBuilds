;	Static Name Aliases
;
	TITLE   ..\..\..\common\pkcs5.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
EXTRN	_RMD160Final:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	_RMD160Init:NEAR
EXTRN	_ThrowFatalException:NEAR
EXTRN	_EraseMemory:NEAR
EXTRN	_RMD160Update:NEAR
_TEXT      SEGMENT
	ASSUME	CS: _TEXT
	PUBLIC	_hmac_truncate
_hmac_truncate	PROC NEAR	;  COMDAT
;|*** /*
;|***  Legal Notice: Some portions of the source code contained in this file were
;|***  derived from the source code of Encryption for the Masses 2.02a, which is
;|***  Copyright (c) 1998-2000 Paul Le Roux and which is governed by the 'License
;|***  Agreement for Encryption for the Masses'. Modifications and additions to
;|***  the original source code (contained in this file) and all other portions
;|***  of this file are Copyright (c) 2003-2009 TrueCrypt Developers Association
;|***  and are governed by the TrueCrypt License 3.0 the full text of which is
;|***  contained in the file License.txt included in TrueCrypt binary and source
;|***  code distribution packages. */
;|*** 
;|*** #include "Tcdefs.h"
;|*** 
;|*** #include <memory.h>
;|*** #include "../Crypto/Rmd160.h"
;|*** #ifndef TC_WINDOWS_BOOT
;|*** #include "../Crypto/Sha1.h"
;|*** #include "../Crypto/Sha2.h"
;|*** #include "../Crypto/Whirlpool.h"
;|*** #endif
;|*** #include "Pkcs5.h"
;|*** #include "Crypto.h"
;|*** 
;|*** void hmac_truncate
;|***   (
;|*** 	  char *d1,		/* data to be truncated */
;|*** 	  char *d2,		/* truncated data */
;|*** 	  int len		/* length in bytes to keep */
;|*** )
;|*** {
; Line 30
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
	*** 000004	56 			push	si
;	d1 = 4
;	d2 = 6
;	len = 8
;	register si = i
;|*** 	int i;
;|*** 	for (i = 0; i < len; i++)
; Line 32
	*** 000005	33 f6 			xor	si,si
	*** 000007	8b 7e 04 		mov	di,WORD PTR [bp+4]	;d1
	*** 00000a	8b 56 06 		mov	dx,WORD PTR [bp+6]	;d2
	*** 00000d	8b 4e 08 		mov	cx,WORD PTR [bp+8]	;len
	*** 000010	eb 0b 			jmp	SHORT $L890
					$F790:
;|*** 		d2[i] = d1[i];
; Line 33
	*** 000012	8b de 			mov	bx,si
	*** 000014	03 df 			add	bx,di
	*** 000016	8a 07 			mov	al,BYTE PTR [bx]
	*** 000018	8b da 			mov	bx,dx
	*** 00001a	88 00 			mov	BYTE PTR [bx][si],al
;|*** 	for (i = 0; i < len; i++)
; Line 32
	*** 00001c	46 			inc	si
					$L890:
	*** 00001d	3b f1 			cmp	si,cx
	*** 00001f	7c f1 			jl	SHORT $F790
;|*** 		d2[i] = d1[i];
;|*** }
; Line 34
	*** 000021	5e 			pop	si
	*** 000022	5f 			pop	di
	*** 000023	c9 			leave	
	*** 000024	c3 			ret	

_hmac_truncate	ENDP
	PUBLIC	_hmac_ripemd160
_hmac_ripemd160	PROC NEAR	;  COMDAT
;|*** 
;|*** #ifndef TC_WINDOWS_BOOT
;|*** 
;|*** void hmac_sha512
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int ld,		/* length of data in bytes */
;|*** 	  char *out,		/* output buffer, at least "t" bytes */
;|*** 	  int t
;|*** )
;|*** {
;|*** 	sha512_ctx ictx, octx;
;|*** 	char isha[SHA512_DIGESTSIZE], osha[SHA512_DIGESTSIZE];
;|*** 	char key[SHA512_DIGESTSIZE];
;|*** 	char buf[SHA512_BLOCKSIZE];
;|*** 	int i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = sha512(key), as per HMAC specifications. */
;|*** 	if (lk > SHA512_BLOCKSIZE)
;|*** 	{
;|*** 		sha512_ctx tctx;
;|*** 
;|*** 		sha512_begin (&tctx);
;|*** 		sha512_hash ((unsigned char *) k, lk, &tctx);
;|*** 		sha512_end ((unsigned char *) key, &tctx);
;|*** 
;|*** 		k = key;
;|*** 		lk = SHA512_DIGESTSIZE;
;|*** 
;|*** 		burn (&tctx, sizeof(tctx));		// Prevent leaks
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	sha512_begin (&ictx);
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
;|*** 	for (i = lk; i < SHA512_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x36;
;|*** 
;|*** 	sha512_hash ((unsigned char *) buf, SHA512_BLOCKSIZE, &ictx);
;|*** 	sha512_hash ((unsigned char *) d, ld, &ictx);
;|*** 
;|*** 	sha512_end ((unsigned char *) isha, &ictx);
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 
;|*** 	sha512_begin (&octx);
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
;|*** 	for (i = lk; i < SHA512_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x5C;
;|*** 
;|*** 	sha512_hash ((unsigned char *) buf, SHA512_BLOCKSIZE, &octx);
;|*** 	sha512_hash ((unsigned char *) isha, SHA512_DIGESTSIZE, &octx);
;|*** 
;|*** 	sha512_end ((unsigned char *) osha, &octx);
;|*** 
;|*** 	/* truncate and print the results */
;|*** 	t = t > SHA512_DIGESTSIZE ? SHA512_DIGESTSIZE : t;
;|*** 	hmac_truncate (osha, out, t);
;|*** 
;|*** 	/* Prevent leaks */
;|*** 	burn (&ictx, sizeof(ictx));
;|*** 	burn (&octx, sizeof(octx));
;|*** 	burn (isha, sizeof(isha));
;|*** 	burn (osha, sizeof(osha));
;|*** 	burn (buf, sizeof(buf));
;|*** 	burn (key, sizeof(key));
;|*** }
;|*** 
;|*** 
;|*** void derive_u_sha512 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
;|*** 	char j[SHA512_DIGESTSIZE], k[SHA512_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
;|*** 	counter[3] = (char) b;
;|*** 	memcpy (init, salt, salt_len);	/* salt */
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
;|*** 	hmac_sha512 (pwd, pwd_len, init, salt_len + 4, j, SHA512_DIGESTSIZE);
;|*** 	memcpy (u, j, SHA512_DIGESTSIZE);
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
;|*** 	{
;|*** 		hmac_sha512 (pwd, pwd_len, j, SHA512_DIGESTSIZE, k, SHA512_DIGESTSIZE);
;|*** 		for (i = 0; i < SHA512_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
;|*** 	burn (k, sizeof(k));
;|*** }
;|*** 
;|*** 
;|*** void derive_key_sha512 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
;|*** 	char u[SHA512_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % SHA512_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / SHA512_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / SHA512_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * SHA512_DIGESTSIZE;
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
;|*** 	{
;|*** 		derive_u_sha512 (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, SHA512_DIGESTSIZE);
;|*** 		dk += SHA512_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_sha512 (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 	memcpy (dk, u, r);
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
;|*** }
;|*** 
;|*** 
;|*** /* Deprecated/legacy */
;|*** void hmac_sha1
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int ld,		/* length of data in bytes */
;|*** 	  char *out,		/* output buffer, at least "t" bytes */
;|*** 	  int t
;|*** )
;|*** {
;|*** 	sha1_ctx ictx, octx;
;|*** 	char isha[SHA1_DIGESTSIZE], osha[SHA1_DIGESTSIZE];
;|*** 	char key[SHA1_DIGESTSIZE];
;|*** 	char buf[SHA1_BLOCKSIZE];
;|*** 	int i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = sha1(key), as per HMAC specifications. */
;|*** 	if (lk > SHA1_BLOCKSIZE)
;|*** 	{
;|*** 		sha1_ctx tctx;
;|*** 
;|*** 		sha1_begin (&tctx);
;|*** 		sha1_hash ((unsigned char *) k, lk, &tctx);
;|*** 		sha1_end ((unsigned char *) key, &tctx);
;|*** 
;|*** 		k = key;
;|*** 		lk = SHA1_DIGESTSIZE;
;|*** 
;|*** 		burn (&tctx, sizeof(tctx));		// Prevent leaks
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	sha1_begin (&ictx);
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
;|*** 	for (i = lk; i < SHA1_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x36;
;|*** 
;|*** 	sha1_hash ((unsigned char *) buf, SHA1_BLOCKSIZE, &ictx);
;|*** 	sha1_hash ((unsigned char *) d, ld, &ictx);
;|*** 
;|*** 	sha1_end ((unsigned char *) isha, &ictx);
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 
;|*** 	sha1_begin (&octx);
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
;|*** 	for (i = lk; i < SHA1_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x5C;
;|*** 
;|*** 	sha1_hash ((unsigned char *) buf, SHA1_BLOCKSIZE, &octx);
;|*** 	sha1_hash ((unsigned char *) isha, SHA1_DIGESTSIZE, &octx);
;|*** 
;|*** 	sha1_end ((unsigned char *) osha, &octx);
;|*** 
;|*** 	/* truncate and print the results */
;|*** 	t = t > SHA1_DIGESTSIZE ? SHA1_DIGESTSIZE : t;
;|*** 	hmac_truncate (osha, out, t);
;|*** 
;|*** 	/* Prevent leaks */
;|*** 	burn (&ictx, sizeof(ictx));
;|*** 	burn (&octx, sizeof(octx));
;|*** 	burn (isha, sizeof(isha));
;|*** 	burn (osha, sizeof(osha));
;|*** 	burn (buf, sizeof(buf));
;|*** 	burn (key, sizeof(key));
;|*** }
;|*** 
;|*** 
;|*** /* Deprecated/legacy */
;|*** void derive_u_sha1 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
;|*** 	char j[SHA1_DIGESTSIZE], k[SHA1_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
;|*** 	counter[3] = (char) b;
;|*** 	memcpy (init, salt, salt_len);	/* salt */
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
;|*** 	hmac_sha1 (pwd, pwd_len, init, salt_len + 4, j, SHA1_DIGESTSIZE);
;|*** 	memcpy (u, j, SHA1_DIGESTSIZE);
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
;|*** 	{
;|*** 		hmac_sha1 (pwd, pwd_len, j, SHA1_DIGESTSIZE, k, SHA1_DIGESTSIZE);
;|*** 		for (i = 0; i < SHA1_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
;|*** 	burn (k, sizeof(k));
;|*** }
;|*** 
;|*** 
;|*** /* Deprecated/legacy */
;|*** void derive_key_sha1 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
;|*** 	char u[SHA1_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % SHA1_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / SHA1_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / SHA1_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * SHA1_DIGESTSIZE;
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
;|*** 	{
;|*** 		derive_u_sha1 (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, SHA1_DIGESTSIZE);
;|*** 		dk += SHA1_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_sha1 (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 	memcpy (dk, u, r);
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
;|*** }
;|*** 
;|*** #endif // TC_WINDOWS_BOOT
;|*** 
;|*** void hmac_ripemd160 (char *key, int keylen, char *input, int len, char *digest)
;|*** {
; Line 325
	*** 000000	c8 46 01 00 		enter	326,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	key = 4
;	keylen = 6
;	input = 8
;	len = 10
;	digest = 12
;	context = -326
;	k_ipad = -88
;	k_opad = -154
;	tk = -22
;	i = -2
;	tctx = -240
	*** 000006	8b 76 06 		mov	si,WORD PTR [bp+6]	;keylen
	*** 000009	8b 7e 04 		mov	di,WORD PTR [bp+4]	;key
;|***     RMD160_CTX context;
;|***     unsigned char k_ipad[65];  /* inner padding - key XORd with ipad */
;|***     unsigned char k_opad[65];  /* outer padding - key XORd with opad */
;|***     unsigned char tk[RIPEMD160_DIGESTSIZE];
;|***     int i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = ripemd160(key), as per HMAC specifications. */
;|***     if (keylen > RIPEMD160_BLOCKSIZE) 
; Line 334
	*** 00000c	83 fe 40 		cmp	si,64	;0040H
	*** 00000f	7e 3c 			jle	SHORT $I809
;|*** 	{
;|***         RMD160_CTX      tctx;
;|*** 
;|***         RMD160Init(&tctx);
; Line 338
	*** 000011	8d 86 10 ff 		lea	ax,WORD PTR [bp-240]	;tctx
	*** 000015	50 			push	ax
	*** 000016	e8 00 00 		call	_RMD160Init
	*** 000019	5b 			pop	bx
;|***         RMD160Update(&tctx, (const unsigned char *) key, keylen);
; Line 339
	*** 00001a	8b c6 			mov	ax,si
	*** 00001c	99 			cwd	
	*** 00001d	52 			push	dx
	*** 00001e	56 			push	si
	*** 00001f	57 			push	di
	*** 000020	8d 86 10 ff 		lea	ax,WORD PTR [bp-240]	;tctx
	*** 000024	50 			push	ax
	*** 000025	e8 00 00 		call	_RMD160Update
	*** 000028	83 c4 08 		add	sp,8
;|***         RMD160Final(tk, &tctx);
; Line 340
	*** 00002b	8d 86 10 ff 		lea	ax,WORD PTR [bp-240]	;tctx
	*** 00002f	50 			push	ax
	*** 000030	8d 4e ea 		lea	cx,WORD PTR [bp-22]	;tk
	*** 000033	51 			push	cx
	*** 000034	e8 00 00 		call	_RMD160Final
	*** 000037	83 c4 04 		add	sp,4
;|*** 
;|***         key = (char *) tk;
; Line 342
	*** 00003a	8d 7e ea 		lea	di,WORD PTR [bp-22]	;tk
;|***         keylen = RIPEMD160_DIGESTSIZE;
; Line 343
	*** 00003d	be 14 00 		mov	si,20	;0014H
;|*** 
;|*** 		burn (&tctx, sizeof(tctx));	// Prevent leaks
; Line 345
	*** 000040	6a 56 			push	86	;0056H
	*** 000042	8d 86 10 ff 		lea	ax,WORD PTR [bp-240]	;tctx
	*** 000046	50 			push	ax
	*** 000047	e8 00 00 		call	_EraseMemory
	*** 00004a	83 c4 04 		add	sp,4
;|***     }
;|*** 
;|*** 	/*
;|*** 
;|*** 	RMD160(K XOR opad, RMD160(K XOR ipad, text))
;|*** 
;|*** 	where K is an n byte key
;|*** 	ipad is the byte 0x36 repeated RIPEMD160_BLOCKSIZE times
;|*** 	opad is the byte 0x5c repeated RIPEMD160_BLOCKSIZE times
;|*** 	and text is the data being protected */
;|*** 
;|*** 
;|*** 	/* start out by storing key in pads */
;|*** 	memset(k_ipad, 0x36, sizeof(k_ipad));
; Line 359
					$I809:
	*** 00004d	6a 41 			push	65	;0041H
	*** 00004f	6a 36 			push	54	;0036H
	*** 000051	8d 46 a8 		lea	ax,WORD PTR [bp-88]	;k_ipad
	*** 000054	50 			push	ax
	*** 000055	e8 00 00 		call	_memset
	*** 000058	83 c4 06 		add	sp,6
;|***     memset(k_opad, 0x5c, sizeof(k_opad));
; Line 360
	*** 00005b	6a 41 			push	65	;0041H
	*** 00005d	6a 5c 			push	92	;005cH
	*** 00005f	8d 86 66 ff 		lea	ax,WORD PTR [bp-154]	;k_opad
	*** 000063	50 			push	ax
	*** 000064	e8 00 00 		call	_memset
	*** 000067	83 c4 06 		add	sp,6
;|*** 
;|***     /* XOR key with ipad and opad values */
;|***     for (i=0; i<keylen; i++) 
; Line 363
	*** 00006a	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 00006f	89 7e 04 		mov	WORD PTR [bp+4],di	;key
	*** 000072	89 76 06 		mov	WORD PTR [bp+6],si	;keylen
	*** 000075	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000078	8b 56 06 		mov	dx,WORD PTR [bp+6]	;keylen
	*** 00007b	eb 10 			jmp	SHORT $L891
					$F811:
;|*** 	{
;|***         k_ipad[i] ^= key[i];
; Line 365
	*** 00007d	8b de 			mov	bx,si
	*** 00007f	03 df 			add	bx,di
	*** 000081	8a 07 			mov	al,BYTE PTR [bx]
	*** 000083	30 42 a8 		xor	BYTE PTR [bp-88][si],al
;|***         k_opad[i] ^= key[i];
; Line 366
	*** 000086	8a 07 			mov	al,BYTE PTR [bx]
	*** 000088	30 82 66 ff 		xor	BYTE PTR [bp-154][si],al
;|***     for (i=0; i<keylen; i++) 
; Line 363
	*** 00008c	46 			inc	si
					$L891:
	*** 00008d	3b f2 			cmp	si,dx
	*** 00008f	7c ec 			jl	SHORT $F811
;|*** 	{
;|***         k_ipad[i] ^= key[i];
;|***         k_opad[i] ^= key[i];
;|***     }
; Line 367
	*** 000091	8b 76 0c 		mov	si,WORD PTR [bp+12]	;digest
;|*** 
;|***     /* perform inner RIPEMD-160 */
;|*** 
;|***     RMD160Init(&context);           /* init context for 1st pass */
; Line 371
	*** 000094	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 000098	50 			push	ax
	*** 000099	e8 00 00 		call	_RMD160Init
	*** 00009c	5b 			pop	bx
;|***     RMD160Update(&context, k_ipad, RIPEMD160_BLOCKSIZE);  /* start with inner pad */
; Line 372
	*** 00009d	6a 00 			push	0
	*** 00009f	6a 40 			push	64	;0040H
	*** 0000a1	8d 46 a8 		lea	ax,WORD PTR [bp-88]	;k_ipad
	*** 0000a4	50 			push	ax
	*** 0000a5	8d 8e ba fe 		lea	cx,WORD PTR [bp-326]	;context
	*** 0000a9	51 			push	cx
	*** 0000aa	e8 00 00 		call	_RMD160Update
	*** 0000ad	83 c4 08 		add	sp,8
;|***     RMD160Update(&context, (const unsigned char *) input, len); /* then text of datagram */
; Line 373
	*** 0000b0	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;len
	*** 0000b3	99 			cwd	
	*** 0000b4	52 			push	dx
	*** 0000b5	50 			push	ax
	*** 0000b6	ff 76 08 		push	WORD PTR [bp+8]	;input
	*** 0000b9	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 0000bd	50 			push	ax
	*** 0000be	e8 00 00 		call	_RMD160Update
	*** 0000c1	83 c4 08 		add	sp,8
;|***     RMD160Final((unsigned char *) digest, &context);         /* finish up 1st pass */
; Line 374
	*** 0000c4	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 0000c8	50 			push	ax
	*** 0000c9	56 			push	si
	*** 0000ca	e8 00 00 		call	_RMD160Final
	*** 0000cd	83 c4 04 		add	sp,4
;|*** 
;|***     /* perform outer RIPEMD-160 */
;|***     RMD160Init(&context);           /* init context for 2nd pass */
; Line 377
	*** 0000d0	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 0000d4	50 			push	ax
	*** 0000d5	e8 00 00 		call	_RMD160Init
	*** 0000d8	5b 			pop	bx
;|***     RMD160Update(&context, k_opad, RIPEMD160_BLOCKSIZE);  /* start with outer pad */
; Line 378
	*** 0000d9	6a 00 			push	0
	*** 0000db	6a 40 			push	64	;0040H
	*** 0000dd	8d 86 66 ff 		lea	ax,WORD PTR [bp-154]	;k_opad
	*** 0000e1	50 			push	ax
	*** 0000e2	8d 8e ba fe 		lea	cx,WORD PTR [bp-326]	;context
	*** 0000e6	51 			push	cx
	*** 0000e7	e8 00 00 		call	_RMD160Update
	*** 0000ea	83 c4 08 		add	sp,8
;|***     /* results of 1st hash */
;|***     RMD160Update(&context, (const unsigned char *) digest, RIPEMD160_DIGESTSIZE);
; Line 380
	*** 0000ed	6a 00 			push	0
	*** 0000ef	6a 14 			push	20	;0014H
	*** 0000f1	56 			push	si
	*** 0000f2	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 0000f6	50 			push	ax
	*** 0000f7	e8 00 00 		call	_RMD160Update
	*** 0000fa	83 c4 08 		add	sp,8
;|***     RMD160Final((unsigned char *) digest, &context);         /* finish up 2nd pass */
; Line 381
	*** 0000fd	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 000101	50 			push	ax
	*** 000102	56 			push	si
	*** 000103	e8 00 00 		call	_RMD160Final
	*** 000106	83 c4 04 		add	sp,4
;|*** 
;|*** 	/* Prevent possible leaks. */
;|***     burn (k_ipad, sizeof(k_ipad));
; Line 384
	*** 000109	6a 41 			push	65	;0041H
	*** 00010b	8d 46 a8 		lea	ax,WORD PTR [bp-88]	;k_ipad
	*** 00010e	50 			push	ax
	*** 00010f	e8 00 00 		call	_EraseMemory
	*** 000112	83 c4 04 		add	sp,4
;|***     burn (k_opad, sizeof(k_opad));
; Line 385
	*** 000115	6a 41 			push	65	;0041H
	*** 000117	8d 86 66 ff 		lea	ax,WORD PTR [bp-154]	;k_opad
	*** 00011b	50 			push	ax
	*** 00011c	e8 00 00 		call	_EraseMemory
	*** 00011f	83 c4 04 		add	sp,4
;|*** 	burn (tk, sizeof(tk));
; Line 386
	*** 000122	6a 14 			push	20	;0014H
	*** 000124	8d 46 ea 		lea	ax,WORD PTR [bp-22]	;tk
	*** 000127	50 			push	ax
	*** 000128	e8 00 00 		call	_EraseMemory
	*** 00012b	83 c4 04 		add	sp,4
;|*** 	burn (&context, sizeof(context));
; Line 387
	*** 00012e	6a 56 			push	86	;0056H
	*** 000130	8d 86 ba fe 		lea	ax,WORD PTR [bp-326]	;context
	*** 000134	50 			push	ax
	*** 000135	e8 00 00 		call	_EraseMemory
	*** 000138	83 c4 04 		add	sp,4
;|*** }
; Line 388
	*** 00013b	5e 			pop	si
	*** 00013c	5f 			pop	di
	*** 00013d	c9 			leave	
	*** 00013e	c3 			ret	

_hmac_ripemd160	ENDP
	PUBLIC	_derive_u_ripemd160
_derive_u_ripemd160	PROC NEAR	;  COMDAT
;|*** 
;|*** void derive_u_ripemd160 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
; Line 391
	*** 000000	c8 b0 00 00 		enter	176,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	counter = -8
;	c = -4
;	i = -2
;	pwd = 4
;	pwd_len = 6
;	salt = 8
;	salt_len = 10
;	iterations = 12
;	u = 14
;	b = 16
;	j = -28
;	k = -48
;	init = -176
	*** 000006	8b 76 0a 		mov	si,WORD PTR [bp+10]	;salt_len
;|*** 	char j[RIPEMD160_DIGESTSIZE], k[RIPEMD160_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
; Line 398
	*** 000009	6a 04 			push	4
	*** 00000b	6a 00 			push	0
	*** 00000d	8d 46 f8 		lea	ax,WORD PTR [bp-8]	;counter
	*** 000010	50 			push	ax
	*** 000011	e8 00 00 		call	_memset
	*** 000014	83 c4 06 		add	sp,6
;|*** 	counter[3] = (char) b;
; Line 399
	*** 000017	8a 46 10 		mov	al,BYTE PTR [bp+16]	;b
	*** 00001a	88 46 fb 		mov	BYTE PTR [bp-5],al
;|*** 	memcpy (init, salt, salt_len);	/* salt */
; Line 400
	*** 00001d	56 			push	si
	*** 00001e	ff 76 08 		push	WORD PTR [bp+8]	;salt
	*** 000021	8d 86 50 ff 		lea	ax,WORD PTR [bp-176]	;init
	*** 000025	50 			push	ax
	*** 000026	e8 00 00 		call	_memcpy
	*** 000029	83 c4 06 		add	sp,6
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
; Line 401
	*** 00002c	6a 04 			push	4
	*** 00002e	8d 46 f8 		lea	ax,WORD PTR [bp-8]	;counter
	*** 000031	50 			push	ax
	*** 000032	8d 82 50 ff 		lea	ax,WORD PTR [bp-176][si]
	*** 000036	50 			push	ax
	*** 000037	e8 00 00 		call	_memcpy
	*** 00003a	83 c4 06 		add	sp,6
;|*** 	hmac_ripemd160 (pwd, pwd_len, init, salt_len + 4, j);
; Line 402
	*** 00003d	8d 46 e4 		lea	ax,WORD PTR [bp-28]	;j
	*** 000040	50 			push	ax
	*** 000041	8d 4c 04 		lea	cx,WORD PTR [si+4]
	*** 000044	51 			push	cx
	*** 000045	8d 8e 50 ff 		lea	cx,WORD PTR [bp-176]	;init
	*** 000049	51 			push	cx
	*** 00004a	66 ff 76 04 		push	DWORD PTR [bp+4]	;pwd
	*** 00004e	e8 00 00 		call	_hmac_ripemd160
	*** 000051	83 c4 0a 		add	sp,10	;000aH
;|*** 	memcpy (u, j, RIPEMD160_DIGESTSIZE);
; Line 403
	*** 000054	6a 14 			push	20	;0014H
	*** 000056	8d 46 e4 		lea	ax,WORD PTR [bp-28]	;j
	*** 000059	50 			push	ax
	*** 00005a	ff 76 0e 		push	WORD PTR [bp+14]	;u
	*** 00005d	e8 00 00 		call	_memcpy
	*** 000060	83 c4 06 		add	sp,6
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
; Line 406
	*** 000063	c7 46 fc 01 00 		mov	WORD PTR [bp-4],1	;c
	*** 000068	eb 39 			jmp	SHORT $L893
					$F835:
;|*** 	{
;|*** 		hmac_ripemd160 (pwd, pwd_len, j, RIPEMD160_DIGESTSIZE, k);
; Line 408
	*** 00006a	8d 46 d0 		lea	ax,WORD PTR [bp-48]	;k
	*** 00006d	50 			push	ax
	*** 00006e	6a 14 			push	20	;0014H
	*** 000070	8d 46 e4 		lea	ax,WORD PTR [bp-28]	;j
	*** 000073	50 			push	ax
	*** 000074	66 ff 76 04 		push	DWORD PTR [bp+4]	;pwd
	*** 000078	e8 00 00 		call	_hmac_ripemd160
	*** 00007b	83 c4 0a 		add	sp,10	;000aH
;|*** 		for (i = 0; i < RIPEMD160_DIGESTSIZE; i++)
; Line 409
	*** 00007e	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000083	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000086	8b 7e 0e 		mov	di,WORD PTR [bp+14]	;u
	*** 000089	eb 10 			jmp	SHORT $L892
					$F838:
;|*** 		{
;|*** 			u[i] ^= k[i];
; Line 411
	*** 00008b	8a 42 d0 		mov	al,BYTE PTR [bp-48][si]
	*** 00008e	8b de 			mov	bx,si
	*** 000090	03 df 			add	bx,di
	*** 000092	30 07 			xor	BYTE PTR [bx],al
;|*** 			j[i] = k[i];
; Line 412
	*** 000094	8a 42 d0 		mov	al,BYTE PTR [bp-48][si]
	*** 000097	88 42 e4 		mov	BYTE PTR [bp-28][si],al
;|*** 		for (i = 0; i < RIPEMD160_DIGESTSIZE; i++)
; Line 409
	*** 00009a	46 			inc	si
					$L892:
	*** 00009b	83 fe 14 		cmp	si,20	;0014H
	*** 00009e	7c eb 			jl	SHORT $F838
;|*** 	for (c = 1; c < iterations; c++)
; Line 406
	*** 0000a0	ff 46 fc 		inc	WORD PTR [bp-4]	;c
					$L893:
	*** 0000a3	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;iterations
	*** 0000a6	39 46 fc 		cmp	WORD PTR [bp-4],ax	;c
	*** 0000a9	7c bf 			jl	SHORT $F835
;|*** 	{
;|*** 		hmac_ripemd160 (pwd, pwd_len, j, RIPEMD160_DIGESTSIZE, k);
;|*** 		for (i = 0; i < RIPEMD160_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
; Line 417
	*** 0000ab	6a 14 			push	20	;0014H
	*** 0000ad	8d 46 e4 		lea	ax,WORD PTR [bp-28]	;j
	*** 0000b0	50 			push	ax
	*** 0000b1	e8 00 00 		call	_EraseMemory
	*** 0000b4	83 c4 04 		add	sp,4
;|*** 	burn (k, sizeof(k));
; Line 418
	*** 0000b7	6a 14 			push	20	;0014H
	*** 0000b9	8d 46 d0 		lea	ax,WORD PTR [bp-48]	;k
	*** 0000bc	50 			push	ax
	*** 0000bd	e8 00 00 		call	_EraseMemory
	*** 0000c0	83 c4 04 		add	sp,4
;|*** }
; Line 419
	*** 0000c3	5e 			pop	si
	*** 0000c4	5f 			pop	di
	*** 0000c5	c9 			leave	
	*** 0000c6	c3 			ret	

_derive_u_ripemd160	ENDP
	PUBLIC	_derive_key_ripemd160
_derive_key_ripemd160	PROC NEAR	;  COMDAT
;|*** 
;|*** void derive_key_ripemd160 (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
; Line 422
	*** 000000	c8 1a 00 00 		enter	26,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	pwd = 4
;	pwd_len = 6
;	salt = 8
;	salt_len = 10
;	iterations = 12
;	dk = 14
;	dklen = 16
;	u = -26
;	b = -2
;	l = -4
;	r = -6
	*** 000006	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;dklen
;|*** 	char u[RIPEMD160_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % RIPEMD160_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / RIPEMD160_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / RIPEMD160_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * RIPEMD160_DIGESTSIZE;
; Line 435
	*** 000009	8b c3 			mov	ax,bx
	*** 00000b	b9 14 00 		mov	cx,20	;0014H
	*** 00000e	99 			cwd	
	*** 00000f	f7 f9 			idiv	cx
	*** 000011	0b d2 			or	dx,dx
	*** 000013	74 08 			je	SHORT $I860
	*** 000015	8b c3 			mov	ax,bx
	*** 000017	99 			cwd	
	*** 000018	f7 f9 			idiv	cx
	*** 00001a	40 			inc	ax
	*** 00001b	eb 05 			jmp	SHORT $I861
					$I860:
	*** 00001d	8b c3 			mov	ax,bx
	*** 00001f	99 			cwd	
	*** 000020	f7 f9 			idiv	cx
					$I861:
	*** 000022	89 46 fc 		mov	WORD PTR [bp-4],ax	;l
	*** 000025	48 			dec	ax
	*** 000026	f7 d8 			neg	ax
	*** 000028	6b c0 14 		imul	ax,ax,20	;0014H
	*** 00002b	03 c3 			add	ax,bx
	*** 00002d	89 46 fa 		mov	WORD PTR [bp-6],ax	;r
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
; Line 438
	*** 000030	be 01 00 		mov	si,1
	*** 000033	8b 7e 0e 		mov	di,WORD PTR [bp+14]	;dk
	*** 000036	eb 27 			jmp	SHORT $L894
					$F862:
;|*** 	{
;|*** 		derive_u_ripemd160 (pwd, pwd_len, salt, salt_len, iterations, u, b);
; Line 440
	*** 000038	56 			push	si
	*** 000039	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;u
	*** 00003c	50 			push	ax
	*** 00003d	66 ff 76 0a 		push	DWORD PTR [bp+10]	;salt_len
	*** 000041	66 ff 76 06 		push	DWORD PTR [bp+6]	;pwd_len
	*** 000045	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 000048	e8 00 00 		call	_derive_u_ripemd160
	*** 00004b	83 c4 0e 		add	sp,14	;000eH
;|*** 		memcpy (dk, u, RIPEMD160_DIGESTSIZE);
; Line 441
	*** 00004e	6a 14 			push	20	;0014H
	*** 000050	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;u
	*** 000053	50 			push	ax
	*** 000054	57 			push	di
	*** 000055	e8 00 00 		call	_memcpy
	*** 000058	83 c4 06 		add	sp,6
;|*** 		dk += RIPEMD160_DIGESTSIZE;
; Line 442
	*** 00005b	83 c7 14 		add	di,20	;0014H
;|*** 	for (b = 1; b < l; b++)
; Line 438
	*** 00005e	46 			inc	si
					$L894:
	*** 00005f	39 76 fc 		cmp	WORD PTR [bp-4],si	;l
	*** 000062	7f d4 			jg	SHORT $F862
	*** 000064	89 76 fe 		mov	WORD PTR [bp-2],si	;b
;|*** 	{
;|*** 		derive_u_ripemd160 (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, RIPEMD160_DIGESTSIZE);
;|*** 		dk += RIPEMD160_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_ripemd160 (pwd, pwd_len, salt, salt_len, iterations, u, b);
; Line 446
	*** 000067	56 			push	si
	*** 000068	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;u
	*** 00006b	50 			push	ax
	*** 00006c	66 ff 76 0a 		push	DWORD PTR [bp+10]	;salt_len
	*** 000070	66 ff 76 06 		push	DWORD PTR [bp+6]	;pwd_len
	*** 000074	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 000077	e8 00 00 		call	_derive_u_ripemd160
	*** 00007a	83 c4 0e 		add	sp,14	;000eH
;|*** 	memcpy (dk, u, r);
; Line 447
	*** 00007d	ff 76 fa 		push	WORD PTR [bp-6]	;r
	*** 000080	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;u
	*** 000083	50 			push	ax
	*** 000084	57 			push	di
	*** 000085	e8 00 00 		call	_memcpy
	*** 000088	83 c4 06 		add	sp,6
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
; Line 451
	*** 00008b	6a 14 			push	20	;0014H
	*** 00008d	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;u
	*** 000090	50 			push	ax
	*** 000091	e8 00 00 		call	_EraseMemory
	*** 000094	83 c4 04 		add	sp,4
;|*** }
; Line 452
	*** 000097	5e 			pop	si
	*** 000098	5f 			pop	di
	*** 000099	c9 			leave	
	*** 00009a	c3 			ret	

_derive_key_ripemd160	ENDP
	PUBLIC	_get_pkcs5_iteration_count
_get_pkcs5_iteration_count	PROC NEAR	;  COMDAT
;|*** 
;|*** #ifndef TC_WINDOWS_BOOT
;|*** 
;|*** void hmac_whirlpool
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int ld,		/* length of data in bytes */
;|*** 	  char *out,	/* output buffer, at least "t" bytes */
;|*** 	  int t
;|*** )
;|*** {
;|*** 	WHIRLPOOL_CTX ictx, octx;
;|*** 	char iwhi[WHIRLPOOL_DIGESTSIZE], owhi[WHIRLPOOL_DIGESTSIZE];
;|*** 	char key[WHIRLPOOL_DIGESTSIZE];
;|*** 	char buf[WHIRLPOOL_BLOCKSIZE];
;|*** 	int i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = whirlpool(key), as per HMAC specifications. */
;|*** 	if (lk > WHIRLPOOL_BLOCKSIZE)
;|*** 	{
;|*** 		WHIRLPOOL_CTX tctx;
;|*** 
;|*** 		WHIRLPOOL_init (&tctx);
;|*** 		WHIRLPOOL_add ((unsigned char *) k, lk * 8, &tctx);
;|*** 		WHIRLPOOL_finalize (&tctx, (unsigned char *) key);
;|*** 
;|*** 		k = key;
;|*** 		lk = WHIRLPOOL_DIGESTSIZE;
;|*** 
;|*** 		burn (&tctx, sizeof(tctx));		// Prevent leaks
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	WHIRLPOOL_init (&ictx);
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
;|*** 	for (i = lk; i < WHIRLPOOL_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x36;
;|*** 
;|*** 	WHIRLPOOL_add ((unsigned char *) buf, WHIRLPOOL_BLOCKSIZE * 8, &ictx);
;|*** 	WHIRLPOOL_add ((unsigned char *) d, ld * 8, &ictx);
;|*** 
;|*** 	WHIRLPOOL_finalize (&ictx, (unsigned char *) iwhi);
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 
;|*** 	WHIRLPOOL_init (&octx);
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
;|*** 	for (i = lk; i < WHIRLPOOL_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x5C;
;|*** 
;|*** 	WHIRLPOOL_add ((unsigned char *) buf, WHIRLPOOL_BLOCKSIZE * 8, &octx);
;|*** 	WHIRLPOOL_add ((unsigned char *) iwhi, WHIRLPOOL_DIGESTSIZE * 8, &octx);
;|*** 
;|*** 	WHIRLPOOL_finalize (&octx, (unsigned char *) owhi);
;|*** 
;|*** 	/* truncate and print the results */
;|*** 	t = t > WHIRLPOOL_DIGESTSIZE ? WHIRLPOOL_DIGESTSIZE : t;
;|*** 	hmac_truncate (owhi, out, t);
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (&ictx, sizeof(ictx));
;|*** 	burn (&octx, sizeof(octx));
;|*** 	burn (owhi, sizeof(owhi));
;|*** 	burn (iwhi, sizeof(iwhi));
;|*** 	burn (buf, sizeof(buf));
;|*** 	burn (key, sizeof(key));
;|*** }
;|*** 
;|*** void derive_u_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
;|*** 	char j[WHIRLPOOL_DIGESTSIZE], k[WHIRLPOOL_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
;|*** 	counter[3] = (char) b;
;|*** 	memcpy (init, salt, salt_len);	/* salt */
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
;|*** 	hmac_whirlpool (pwd, pwd_len, init, salt_len + 4, j, WHIRLPOOL_DIGESTSIZE);
;|*** 	memcpy (u, j, WHIRLPOOL_DIGESTSIZE);
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
;|*** 	{
;|*** 		hmac_whirlpool (pwd, pwd_len, j, WHIRLPOOL_DIGESTSIZE, k, WHIRLPOOL_DIGESTSIZE);
;|*** 		for (i = 0; i < WHIRLPOOL_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
;|*** 	burn (k, sizeof(k));
;|*** }
;|*** 
;|*** void derive_key_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
;|*** 	char u[WHIRLPOOL_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % WHIRLPOOL_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * WHIRLPOOL_DIGESTSIZE;
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
;|*** 	{
;|*** 		derive_u_whirlpool (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, WHIRLPOOL_DIGESTSIZE);
;|*** 		dk += WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_whirlpool (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 	memcpy (dk, u, r);
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
;|*** }
;|*** 
;|*** 
;|*** char *get_pkcs5_prf_name (int pkcs5_prf_id)
;|*** {
;|*** 	switch (pkcs5_prf_id)
;|*** 	{
;|*** 	case SHA512:	
;|*** 		return "HMAC-SHA-512";
;|*** 
;|*** 	case SHA1:	// Deprecated/legacy
;|*** 		return "HMAC-SHA-1";
;|*** 
;|*** 	case RIPEMD160:	
;|*** 		return "HMAC-RIPEMD-160";
;|*** 
;|*** 	case WHIRLPOOL:	
;|*** 		return "HMAC-Whirlpool";
;|*** 
;|*** 	default:		
;|*** 		return "(Unknown)";
;|*** 	}
;|*** }
;|*** 
;|*** #endif //!TC_WINDOWS_BOOT
;|*** 
;|*** 
;|*** int get_pkcs5_iteration_count (int pkcs5_prf_id, BOOL bBoot)
;|*** {
; Line 620
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	pkcs5_prf_id = 4
;	bBoot = 6
;|*** 	switch (pkcs5_prf_id)
; Line 621
	*** 000003	8b 46 04 		mov	ax,WORD PTR [bp+4]	;pkcs5_prf_id
;|*** 	{
;|*** 	case RIPEMD160:	
;|*** 		return (bBoot ? 1000 : 2000);
;|*** 
;|*** #ifndef TC_WINDOWS_BOOT
;|*** 
;|*** 	case SHA512:	
;|*** 		return 1000;			
;|*** 
;|*** 	case SHA1:		// Deprecated/legacy		
;|*** 		return 2000;			
;|*** 
;|*** 	case WHIRLPOOL:	
;|*** 		return 1000;
;|*** #endif
;|*** 
;|*** 	default:		
;|*** 		TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
;|*** 	}
; Line 640
	*** 000006	48 			dec	ax
	*** 000007	74 0b 			je	SHORT $SC874
;|*** 		TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
; Line 639
	*** 000009	68 7f 02 		push	639	;027fH
	*** 00000c	e8 00 00 		call	_ThrowFatalException
	*** 00000f	5b 			pop	bx
;|*** 	}
;|*** 	return 0;
; Line 641
	*** 000010	33 c0 			xor	ax,ax
	*** 000012	c9 			leave	
	*** 000013	c3 			ret	
;|*** 	case RIPEMD160:	
; Line 623
					$SC874:
;|*** 		return (bBoot ? 1000 : 2000);
; Line 624
	*** 000014	80 7e 06 01 		cmp	BYTE PTR [bp+6],1	;bBoot
	*** 000018	1b c0 			sbb	ax,ax
	*** 00001a	25 e8 03 		and	ax,1000	;03e8H
	*** 00001d	05 e8 03 		add	ax,1000	;03e8H
;|*** 
;|*** #ifndef TC_WINDOWS_BOOT
;|*** 
;|*** 	case SHA512:	
;|*** 		return 1000;			
;|*** 
;|*** 	case SHA1:		// Deprecated/legacy		
;|*** 		return 2000;			
;|*** 
;|*** 	case WHIRLPOOL:	
;|*** 		return 1000;
;|*** #endif
;|*** 
;|*** 	default:		
;|*** 		TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
;|*** 	}
;|*** 	return 0;
;|*** }
; Line 642
	*** 000020	c9 			leave	
	*** 000021	c3 			ret	

_get_pkcs5_iteration_count	ENDP
_TEXT	ENDS
END
